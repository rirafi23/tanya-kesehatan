{"dependencies":[],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  (function () {\n    'use strict';\n\n    function isExpression(node) {\n      if (node == null) {\n        return false;\n      }\n\n      switch (node.type) {\n        case 'ArrayExpression':\n        case 'AssignmentExpression':\n        case 'BinaryExpression':\n        case 'CallExpression':\n        case 'ConditionalExpression':\n        case 'FunctionExpression':\n        case 'Identifier':\n        case 'Literal':\n        case 'LogicalExpression':\n        case 'MemberExpression':\n        case 'NewExpression':\n        case 'ObjectExpression':\n        case 'SequenceExpression':\n        case 'ThisExpression':\n        case 'UnaryExpression':\n        case 'UpdateExpression':\n          return true;\n      }\n\n      return false;\n    }\n\n    function isIterationStatement(node) {\n      if (node == null) {\n        return false;\n      }\n\n      switch (node.type) {\n        case 'DoWhileStatement':\n        case 'ForInStatement':\n        case 'ForStatement':\n        case 'WhileStatement':\n          return true;\n      }\n\n      return false;\n    }\n\n    function isStatement(node) {\n      if (node == null) {\n        return false;\n      }\n\n      switch (node.type) {\n        case 'BlockStatement':\n        case 'BreakStatement':\n        case 'ContinueStatement':\n        case 'DebuggerStatement':\n        case 'DoWhileStatement':\n        case 'EmptyStatement':\n        case 'ExpressionStatement':\n        case 'ForInStatement':\n        case 'ForStatement':\n        case 'IfStatement':\n        case 'LabeledStatement':\n        case 'ReturnStatement':\n        case 'SwitchStatement':\n        case 'ThrowStatement':\n        case 'TryStatement':\n        case 'VariableDeclaration':\n        case 'WhileStatement':\n        case 'WithStatement':\n          return true;\n      }\n\n      return false;\n    }\n\n    function isSourceElement(node) {\n      return isStatement(node) || node != null && node.type === 'FunctionDeclaration';\n    }\n\n    function trailingStatement(node) {\n      switch (node.type) {\n        case 'IfStatement':\n          if (node.alternate != null) {\n            return node.alternate;\n          }\n\n          return node.consequent;\n\n        case 'LabeledStatement':\n        case 'ForStatement':\n        case 'ForInStatement':\n        case 'WhileStatement':\n        case 'WithStatement':\n          return node.body;\n      }\n\n      return null;\n    }\n\n    function isProblematicIfStatement(node) {\n      var current;\n\n      if (node.type !== 'IfStatement') {\n        return false;\n      }\n\n      if (node.alternate == null) {\n        return false;\n      }\n\n      current = node.consequent;\n\n      do {\n        if (current.type === 'IfStatement') {\n          if (current.alternate == null) {\n            return true;\n          }\n        }\n\n        current = trailingStatement(current);\n      } while (current);\n\n      return false;\n    }\n\n    module.exports = {\n      isExpression: isExpression,\n      isStatement: isStatement,\n      isIterationStatement: isIterationStatement,\n      isSourceElement: isSourceElement,\n      isProblematicIfStatement: isProblematicIfStatement,\n      trailingStatement: trailingStatement\n    };\n  })();\n});","map":[[2,0,25,1],[2,15,25,13],[3,0,26,4],[5,0,28,4],[5,13,28,13,"isExpression"],[5,25,28,4],[5,26,28,26,"node"],[5,30,28,4],[5,32,28,32],[6,0,29,8],[6,10,29,12,"node"],[6,14,29,16],[6,18,29,20],[6,22,29,8],[6,24,29,26],[7,0,29,28],[7,15,29,35],[7,20,29,28],[8,0,29,43],[10,0,30,8],[10,14,30,16,"node"],[10,18,30,20],[10,19,30,21,"type"],[10,23,30,8],[11,0,31,12],[11,13,31,17],[11,30,31,12],[12,0,32,12],[12,13,32,17],[12,35,32,12],[13,0,33,12],[13,13,33,17],[13,31,33,12],[14,0,34,12],[14,13,34,17],[14,29,34,12],[15,0,35,12],[15,13,35,17],[15,36,35,12],[16,0,36,12],[16,13,36,17],[16,33,36,12],[17,0,37,12],[17,13,37,17],[17,25,37,12],[18,0,38,12],[18,13,38,17],[18,22,38,12],[19,0,39,12],[19,13,39,17],[19,32,39,12],[20,0,40,12],[20,13,40,17],[20,31,40,12],[21,0,41,12],[21,13,41,17],[21,28,41,12],[22,0,42,12],[22,13,42,17],[22,31,42,12],[23,0,43,12],[23,13,43,17],[23,33,43,12],[24,0,44,12],[24,13,44,17],[24,29,44,12],[25,0,45,12],[25,13,45,17],[25,30,45,12],[26,0,46,12],[26,13,46,17],[26,31,46,12],[27,0,47,16],[27,17,47,23],[27,21,47,16],[28,0,30,8],[30,0,49,8],[30,13,49,15],[30,18,49,8],[31,0,50,5],[33,0,52,4],[33,13,52,13,"isIterationStatement"],[33,33,52,4],[33,34,52,34,"node"],[33,38,52,4],[33,40,52,40],[34,0,53,8],[34,10,53,12,"node"],[34,14,53,16],[34,18,53,20],[34,22,53,8],[34,24,53,26],[35,0,53,28],[35,15,53,35],[35,20,53,28],[36,0,53,43],[38,0,54,8],[38,14,54,16,"node"],[38,18,54,20],[38,19,54,21,"type"],[38,23,54,8],[39,0,55,12],[39,13,55,17],[39,31,55,12],[40,0,56,12],[40,13,56,17],[40,29,56,12],[41,0,57,12],[41,13,57,17],[41,27,57,12],[42,0,58,12],[42,13,58,17],[42,29,58,12],[43,0,59,16],[43,17,59,23],[43,21,59,16],[44,0,54,8],[46,0,61,8],[46,13,61,15],[46,18,61,8],[47,0,62,5],[49,0,64,4],[49,13,64,13,"isStatement"],[49,24,64,4],[49,25,64,25,"node"],[49,29,64,4],[49,31,64,31],[50,0,65,8],[50,10,65,12,"node"],[50,14,65,16],[50,18,65,20],[50,22,65,8],[50,24,65,26],[51,0,65,28],[51,15,65,35],[51,20,65,28],[52,0,65,43],[54,0,66,8],[54,14,66,16,"node"],[54,18,66,20],[54,19,66,21,"type"],[54,23,66,8],[55,0,67,12],[55,13,67,17],[55,29,67,12],[56,0,68,12],[56,13,68,17],[56,29,68,12],[57,0,69,12],[57,13,69,17],[57,32,69,12],[58,0,70,12],[58,13,70,17],[58,32,70,12],[59,0,71,12],[59,13,71,17],[59,31,71,12],[60,0,72,12],[60,13,72,17],[60,29,72,12],[61,0,73,12],[61,13,73,17],[61,34,73,12],[62,0,74,12],[62,13,74,17],[62,29,74,12],[63,0,75,12],[63,13,75,17],[63,27,75,12],[64,0,76,12],[64,13,76,17],[64,26,76,12],[65,0,77,12],[65,13,77,17],[65,31,77,12],[66,0,78,12],[66,13,78,17],[66,30,78,12],[67,0,79,12],[67,13,79,17],[67,30,79,12],[68,0,80,12],[68,13,80,17],[68,29,80,12],[69,0,81,12],[69,13,81,17],[69,27,81,12],[70,0,82,12],[70,13,82,17],[70,34,82,12],[71,0,83,12],[71,13,83,17],[71,29,83,12],[72,0,84,12],[72,13,84,17],[72,28,84,12],[73,0,85,16],[73,17,85,23],[73,21,85,16],[74,0,66,8],[76,0,87,8],[76,13,87,15],[76,18,87,8],[77,0,88,5],[79,0,90,4],[79,13,90,13,"isSourceElement"],[79,28,90,4],[79,29,90,29,"node"],[79,33,90,4],[79,35,90,35],[80,0,91,6],[80,13,91,13,"isStatement"],[80,24,91,24],[80,25,91,25,"node"],[80,29,91,24],[80,30,91,13],[80,34,91,34,"node"],[80,38,91,38],[80,42,91,42],[80,46,91,34],[80,50,91,50,"node"],[80,54,91,54],[80,55,91,55,"type"],[80,59,91,50],[80,64,91,64],[80,85,91,6],[81,0,92,5],[83,0,94,4],[83,13,94,13,"trailingStatement"],[83,30,94,4],[83,31,94,31,"node"],[83,35,94,4],[83,37,94,37],[84,0,95,8],[84,14,95,16,"node"],[84,18,95,20],[84,19,95,21,"type"],[84,23,95,8],[85,0,96,8],[85,13,96,13],[85,26,96,8],[86,0,97,12],[86,14,97,16,"node"],[86,18,97,20],[86,19,97,21,"alternate"],[86,28,97,16],[86,32,97,34],[86,36,97,12],[86,38,97,40],[87,0,98,16],[87,19,98,23,"node"],[87,23,98,27],[87,24,98,28,"alternate"],[87,33,98,16],[88,0,99,13],[90,0,100,12],[90,17,100,19,"node"],[90,21,100,23],[90,22,100,24,"consequent"],[90,32,100,12],[92,0,102,8],[92,13,102,13],[92,31,102,8],[93,0,103,8],[93,13,103,13],[93,27,103,8],[94,0,104,8],[94,13,104,13],[94,29,104,8],[95,0,105,8],[95,13,105,13],[95,29,105,8],[96,0,106,8],[96,13,106,13],[96,28,106,8],[97,0,107,12],[97,17,107,19,"node"],[97,21,107,23],[97,22,107,24,"body"],[97,26,107,12],[98,0,95,8],[100,0,109,8],[100,13,109,15],[100,17,109,8],[101,0,110,5],[103,0,112,4],[103,13,112,13,"isProblematicIfStatement"],[103,37,112,4],[103,38,112,38,"node"],[103,42,112,4],[103,44,112,44],[104,0,113,8],[104,10,113,12,"current"],[104,17,113,8],[106,0,115,8],[106,10,115,12,"node"],[106,14,115,16],[106,15,115,17,"type"],[106,19,115,12],[106,24,115,26],[106,37,115,8],[106,39,115,41],[107,0,116,12],[107,15,116,19],[107,20,116,12],[108,0,117,9],[110,0,118,8],[110,10,118,12,"node"],[110,14,118,16],[110,15,118,17,"alternate"],[110,24,118,12],[110,28,118,30],[110,32,118,8],[110,34,118,36],[111,0,119,12],[111,15,119,19],[111,20,119,12],[112,0,120,9],[114,0,121,8,"current"],[114,6,121,8,"current"],[114,13,121,15],[114,16,121,18,"node"],[114,20,121,22],[114,21,121,23,"consequent"],[114,31,121,8],[116,0,122,8],[116,9,122,11],[117,0,123,12],[117,12,123,16,"current"],[117,19,123,23],[117,20,123,24,"type"],[117,24,123,16],[117,29,123,33],[117,42,123,12],[117,44,123,48],[118,0,124,16],[118,14,124,20,"current"],[118,21,124,27],[118,22,124,28,"alternate"],[118,31,124,20],[118,35,124,41],[118,39,124,16],[118,41,124,48],[119,0,125,20],[119,19,125,27],[119,23,125,20],[120,0,126,17],[121,0,127,13],[123,0,128,12,"current"],[123,8,128,12,"current"],[123,15,128,19],[123,18,128,22,"trailingStatement"],[123,35,128,39],[123,36,128,40,"current"],[123,43,128,39],[123,44,128,12],[124,0,129,9],[124,7,122,8],[124,15,129,17,"current"],[124,22,122,8],[126,0,131,8],[126,13,131,15],[126,18,131,8],[127,0,132,5],[129,0,134,4,"module"],[129,4,134,4,"module"],[129,10,134,10],[129,11,134,11,"exports"],[129,18,134,4],[129,21,134,21],[130,0,135,8,"isExpression"],[130,6,135,8,"isExpression"],[130,18,135,20],[130,20,135,22,"isExpression"],[130,32,134,21],[131,0,136,8,"isStatement"],[131,6,136,8,"isStatement"],[131,17,136,19],[131,19,136,21,"isStatement"],[131,30,134,21],[132,0,137,8,"isIterationStatement"],[132,6,137,8,"isIterationStatement"],[132,26,137,28],[132,28,137,30,"isIterationStatement"],[132,48,134,21],[133,0,138,8,"isSourceElement"],[133,6,138,8,"isSourceElement"],[133,21,138,23],[133,23,138,25,"isSourceElement"],[133,38,134,21],[134,0,139,8,"isProblematicIfStatement"],[134,6,139,8,"isProblematicIfStatement"],[134,30,139,32],[134,32,139,34,"isProblematicIfStatement"],[134,56,134,21],[135,0,141,8,"trailingStatement"],[135,6,141,8,"trailingStatement"],[135,23,141,25],[135,25,141,27,"trailingStatement"],[136,0,134,21],[136,5,134,4],[137,0,143,1],[137,3,25,1],[137,6,25,0]]},"type":"js/module"}]}