{"dependencies":[{"name":"./option-assertions","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.validatePluginObject = validatePluginObject;\n\n  var _optionAssertions = _$$_REQUIRE(_dependencyMap[0], \"./option-assertions\");\n\n  var VALIDATORS = {\n    name: _optionAssertions.assertString,\n    manipulateOptions: _optionAssertions.assertFunction,\n    pre: _optionAssertions.assertFunction,\n    post: _optionAssertions.assertFunction,\n    inherits: _optionAssertions.assertFunction,\n    visitor: assertVisitorMap,\n    parserOverride: _optionAssertions.assertFunction,\n    generatorOverride: _optionAssertions.assertFunction\n  };\n\n  function assertVisitorMap(key, value) {\n    var obj = (0, _optionAssertions.assertObject)(key, value);\n\n    if (obj) {\n      Object.keys(obj).forEach(function (prop) {\n        return assertVisitorHandler(prop, obj[prop]);\n      });\n\n      if (obj.enter || obj.exit) {\n        throw new Error(\".\" + key + \" cannot contain catch-all \\\"enter\\\" or \\\"exit\\\" handlers. Please target individual nodes.\");\n      }\n    }\n\n    return obj;\n  }\n\n  function assertVisitorHandler(key, value) {\n    if (value && typeof value === \"object\") {\n      Object.keys(value).forEach(function (handler) {\n        if (handler !== \"enter\" && handler !== \"exit\") {\n          throw new Error(\".visitor[\\\"\" + key + \"\\\"] may only have .enter and/or .exit handlers.\");\n        }\n      });\n    } else if (typeof value !== \"function\") {\n      throw new Error(\".visitor[\\\"\" + key + \"\\\"] must be a function\");\n    }\n\n    return value;\n  }\n\n  function validatePluginObject(obj) {\n    var rootPath = {\n      type: \"root\",\n      source: \"plugin\"\n    };\n    Object.keys(obj).forEach(function (key) {\n      var validator = VALIDATORS[key];\n      var optLoc = {\n        type: \"option\",\n        name: key,\n        parent: rootPath\n      };\n      if (validator) validator(optLoc, obj[key]);else throw new Error(\".\" + key + \" is not a valid Plugin property\");\n    });\n    return obj;\n  }\n});","map":[[2,0,1,0],[4,0,3,0,"Object"],[4,2,3,0,"Object"],[4,8,3,6],[4,9,3,7,"defineProperty"],[4,23,3,0],[4,24,3,22,"exports"],[4,31,3,0],[4,33,3,31],[4,45,3,0],[4,47,3,45],[5,0,4,2,"value"],[5,4,4,2,"value"],[5,9,4,7],[5,11,4,9],[6,0,3,45],[6,3,3,0],[7,0,6,0,"exports"],[7,2,6,0,"exports"],[7,9,6,7],[7,10,6,8,"validatePluginObject"],[7,30,6,0],[7,33,6,31,"validatePluginObject"],[7,53,6,0],[9,0,8,0],[9,6,8,4,"_optionAssertions"],[9,23,8,21],[9,26,8,24,"require"],[9,37,8,31],[9,79,8,0],[11,0,10,0],[11,6,10,6,"VALIDATORS"],[11,16,10,16],[11,19,10,19],[12,0,11,2,"name"],[12,4,11,2,"name"],[12,8,11,6],[12,10,11,8,"_optionAssertions"],[12,27,11,25],[12,28,11,26,"assertString"],[12,40,10,19],[13,0,12,2,"manipulateOptions"],[13,4,12,2,"manipulateOptions"],[13,21,12,19],[13,23,12,21,"_optionAssertions"],[13,40,12,38],[13,41,12,39,"assertFunction"],[13,55,10,19],[14,0,13,2,"pre"],[14,4,13,2,"pre"],[14,7,13,5],[14,9,13,7,"_optionAssertions"],[14,26,13,24],[14,27,13,25,"assertFunction"],[14,41,10,19],[15,0,14,2,"post"],[15,4,14,2,"post"],[15,8,14,6],[15,10,14,8,"_optionAssertions"],[15,27,14,25],[15,28,14,26,"assertFunction"],[15,42,10,19],[16,0,15,2,"inherits"],[16,4,15,2,"inherits"],[16,12,15,10],[16,14,15,12,"_optionAssertions"],[16,31,15,29],[16,32,15,30,"assertFunction"],[16,46,10,19],[17,0,16,2,"visitor"],[17,4,16,2,"visitor"],[17,11,16,9],[17,13,16,11,"assertVisitorMap"],[17,29,10,19],[18,0,17,2,"parserOverride"],[18,4,17,2,"parserOverride"],[18,18,17,16],[18,20,17,18,"_optionAssertions"],[18,37,17,35],[18,38,17,36,"assertFunction"],[18,52,10,19],[19,0,18,2,"generatorOverride"],[19,4,18,2,"generatorOverride"],[19,21,18,19],[19,23,18,21,"_optionAssertions"],[19,40,18,38],[19,41,18,39,"assertFunction"],[20,0,10,19],[20,3,10,0],[22,0,21,0],[22,11,21,9,"assertVisitorMap"],[22,27,21,0],[22,28,21,26,"key"],[22,31,21,0],[22,33,21,31,"value"],[22,38,21,0],[22,40,21,38],[23,0,22,2],[23,8,22,8,"obj"],[23,11,22,11],[23,14,22,14],[23,15,22,15],[23,18,22,18,"_optionAssertions"],[23,35,22,35],[23,36,22,36,"assertObject"],[23,48,22,14],[23,50,22,50,"key"],[23,53,22,14],[23,55,22,55,"value"],[23,60,22,14],[23,61,22,2],[25,0,24,2],[25,8,24,6,"obj"],[25,11,24,2],[25,13,24,11],[26,0,25,4,"Object"],[26,6,25,4,"Object"],[26,12,25,10],[26,13,25,11,"keys"],[26,17,25,4],[26,18,25,16,"obj"],[26,21,25,4],[26,23,25,21,"forEach"],[26,30,25,4],[26,31,25,29],[26,41,25,29,"prop"],[26,45,25,33],[27,0,25,33],[27,15,25,37,"assertVisitorHandler"],[27,35,25,57],[27,36,25,58,"prop"],[27,40,25,57],[27,42,25,64,"obj"],[27,45,25,67],[27,46,25,68,"prop"],[27,50,25,67],[27,51,25,57],[27,52,25,33],[28,0,25,33],[28,7,25,4],[30,0,27,4],[30,10,27,8,"obj"],[30,13,27,11],[30,14,27,12,"enter"],[30,19,27,8],[30,23,27,21,"obj"],[30,26,27,24],[30,27,27,25,"exit"],[30,31,27,4],[30,33,27,31],[31,0,28,6],[31,14,28,12],[31,18,28,16,"Error"],[31,23,28,12],[31,30,28,26,"key"],[31,33,28,12],[31,128,28,6],[32,0,29,5],[33,0,30,3],[35,0,32,2],[35,11,32,9,"obj"],[35,14,32,2],[36,0,33,1],[38,0,35,0],[38,11,35,9,"assertVisitorHandler"],[38,31,35,0],[38,32,35,30,"key"],[38,35,35,0],[38,37,35,35,"value"],[38,42,35,0],[38,44,35,42],[39,0,36,2],[39,8,36,6,"value"],[39,13,36,11],[39,17,36,15],[39,24,36,22,"value"],[39,29,36,15],[39,34,36,32],[39,42,36,2],[39,44,36,42],[40,0,37,4,"Object"],[40,6,37,4,"Object"],[40,12,37,10],[40,13,37,11,"keys"],[40,17,37,4],[40,18,37,16,"value"],[40,23,37,4],[40,25,37,23,"forEach"],[40,32,37,4],[40,33,37,31],[40,43,37,31,"handler"],[40,50,37,38],[40,52,37,42],[41,0,38,6],[41,12,38,10,"handler"],[41,19,38,17],[41,24,38,22],[41,31,38,10],[41,35,38,33,"handler"],[41,42,38,40],[41,47,38,45],[41,53,38,6],[41,55,38,53],[42,0,39,8],[42,16,39,14],[42,20,39,18,"Error"],[42,25,39,14],[42,42,39,37,"key"],[42,45,39,14],[42,98,39,8],[43,0,40,7],[44,0,41,5],[44,7,37,4],[45,0,42,3],[45,5,36,2],[45,11,42,9],[45,15,42,13],[45,22,42,20,"value"],[45,27,42,13],[45,32,42,30],[45,42,42,9],[45,44,42,42],[46,0,43,4],[46,12,43,10],[46,16,43,14,"Error"],[46,21,43,10],[46,38,43,33,"key"],[46,41,43,10],[46,69,43,4],[47,0,44,3],[49,0,46,2],[49,11,46,9,"value"],[49,16,46,2],[50,0,47,1],[52,0,49,0],[52,11,49,9,"validatePluginObject"],[52,31,49,0],[52,32,49,30,"obj"],[52,35,49,0],[52,37,49,35],[53,0,50,2],[53,8,50,8,"rootPath"],[53,16,50,16],[53,19,50,19],[54,0,51,4,"type"],[54,6,51,4,"type"],[54,10,51,8],[54,12,51,10],[54,18,50,19],[55,0,52,4,"source"],[55,6,52,4,"source"],[55,12,52,10],[55,14,52,12],[56,0,50,19],[56,5,50,2],[57,0,54,2,"Object"],[57,4,54,2,"Object"],[57,10,54,8],[57,11,54,9,"keys"],[57,15,54,2],[57,16,54,14,"obj"],[57,19,54,2],[57,21,54,19,"forEach"],[57,28,54,2],[57,29,54,27],[57,39,54,27,"key"],[57,42,54,30],[57,44,54,34],[58,0,55,4],[58,10,55,10,"validator"],[58,19,55,19],[58,22,55,22,"VALIDATORS"],[58,32,55,32],[58,33,55,33,"key"],[58,36,55,32],[58,37,55,4],[59,0,56,4],[59,10,56,10,"optLoc"],[59,16,56,16],[59,19,56,19],[60,0,57,6,"type"],[60,8,57,6,"type"],[60,12,57,10],[60,14,57,12],[60,22,56,19],[61,0,58,6,"name"],[61,8,58,6,"name"],[61,12,58,10],[61,14,58,12,"key"],[61,17,56,19],[62,0,59,6,"parent"],[62,8,59,6,"parent"],[62,14,59,12],[62,16,59,14,"rootPath"],[63,0,56,19],[63,7,56,4],[64,0,61,4],[64,10,61,8,"validator"],[64,19,61,4],[64,21,61,19,"validator"],[64,30,61,28],[64,31,61,29,"optLoc"],[64,37,61,28],[64,39,61,37,"obj"],[64,42,61,40],[64,43,61,41,"key"],[64,46,61,40],[64,47,61,28],[64,48,61,19],[64,49,61,4],[64,54,61,52],[64,60,61,58],[64,64,61,62,"Error"],[64,69,61,58],[64,76,61,72,"key"],[64,79,61,58],[64,116,61,52],[65,0,62,3],[65,5,54,2],[66,0,63,2],[66,11,63,9,"obj"],[66,14,63,2],[67,0,64,1]]},"type":"js/module"}]}