{"dependencies":[],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.evaluateTruthy = evaluateTruthy;\n  exports.evaluate = evaluate;\n  var VALID_CALLEES = [\"String\", \"Number\", \"Math\"];\n  var INVALID_METHODS = [\"random\"];\n\n  function evaluateTruthy() {\n    var res = this.evaluate();\n    if (res.confident) return !!res.value;\n  }\n\n  function deopt(path, state) {\n    if (!state.confident) return;\n    state.deoptPath = path;\n    state.confident = false;\n  }\n\n  function evaluateCached(path, state) {\n    var node = path.node;\n    var seen = state.seen;\n\n    if (seen.has(node)) {\n      var existing = seen.get(node);\n\n      if (existing.resolved) {\n        return existing.value;\n      } else {\n        deopt(path, state);\n        return;\n      }\n    } else {\n      var item = {\n        resolved: false\n      };\n      seen.set(node, item);\n\n      var val = _evaluate(path, state);\n\n      if (state.confident) {\n        item.resolved = true;\n        item.value = val;\n      }\n\n      return val;\n    }\n  }\n\n  function _evaluate(path, state) {\n    if (!state.confident) return;\n    var node = path.node;\n\n    if (path.isSequenceExpression()) {\n      var exprs = path.get(\"expressions\");\n      return evaluateCached(exprs[exprs.length - 1], state);\n    }\n\n    if (path.isStringLiteral() || path.isNumericLiteral() || path.isBooleanLiteral()) {\n      return node.value;\n    }\n\n    if (path.isNullLiteral()) {\n      return null;\n    }\n\n    if (path.isTemplateLiteral()) {\n      return evaluateQuasis(path, node.quasis, state);\n    }\n\n    if (path.isTaggedTemplateExpression() && path.get(\"tag\").isMemberExpression()) {\n      var object = path.get(\"tag.object\");\n      var name = object.node.name;\n      var property = path.get(\"tag.property\");\n\n      if (object.isIdentifier() && name === \"String\" && !path.scope.getBinding(name, true) && property.isIdentifier && property.node.name === \"raw\") {\n        return evaluateQuasis(path, node.quasi.quasis, state, true);\n      }\n    }\n\n    if (path.isConditionalExpression()) {\n      var testResult = evaluateCached(path.get(\"test\"), state);\n      if (!state.confident) return;\n\n      if (testResult) {\n        return evaluateCached(path.get(\"consequent\"), state);\n      } else {\n        return evaluateCached(path.get(\"alternate\"), state);\n      }\n    }\n\n    if (path.isExpressionWrapper()) {\n      return evaluateCached(path.get(\"expression\"), state);\n    }\n\n    if (path.isMemberExpression() && !path.parentPath.isCallExpression({\n      callee: node\n    })) {\n      var _property = path.get(\"property\");\n\n      var _object = path.get(\"object\");\n\n      if (_object.isLiteral() && _property.isIdentifier()) {\n        var value = _object.node.value;\n        var type = typeof value;\n\n        if (type === \"number\" || type === \"string\") {\n          return value[_property.node.name];\n        }\n      }\n    }\n\n    if (path.isReferencedIdentifier()) {\n      var binding = path.scope.getBinding(node.name);\n\n      if (binding && binding.constantViolations.length > 0) {\n        return deopt(binding.path, state);\n      }\n\n      if (binding && path.node.start < binding.path.node.end) {\n        return deopt(binding.path, state);\n      }\n\n      if (binding && binding.hasValue) {\n        return binding.value;\n      } else {\n        if (node.name === \"undefined\") {\n          return binding ? deopt(binding.path, state) : undefined;\n        } else if (node.name === \"Infinity\") {\n          return binding ? deopt(binding.path, state) : Infinity;\n        } else if (node.name === \"NaN\") {\n          return binding ? deopt(binding.path, state) : NaN;\n        }\n\n        var resolved = path.resolve();\n\n        if (resolved === path) {\n          return deopt(path, state);\n        } else {\n          return evaluateCached(resolved, state);\n        }\n      }\n    }\n\n    if (path.isUnaryExpression({\n      prefix: true\n    })) {\n      if (node.operator === \"void\") {\n        return undefined;\n      }\n\n      var argument = path.get(\"argument\");\n\n      if (node.operator === \"typeof\" && (argument.isFunction() || argument.isClass())) {\n        return \"function\";\n      }\n\n      var arg = evaluateCached(argument, state);\n      if (!state.confident) return;\n\n      switch (node.operator) {\n        case \"!\":\n          return !arg;\n\n        case \"+\":\n          return +arg;\n\n        case \"-\":\n          return -arg;\n\n        case \"~\":\n          return ~arg;\n\n        case \"typeof\":\n          return typeof arg;\n      }\n    }\n\n    if (path.isArrayExpression()) {\n      var arr = [];\n      var elems = path.get(\"elements\");\n\n      for (var _iterator = elems, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"]();;) {\n        var _ref;\n\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref = _i.value;\n        }\n\n        var _elem = _ref;\n\n        var _elemValue = _elem.evaluate();\n\n        if (_elemValue.confident) {\n          arr.push(_elemValue.value);\n        } else {\n          return deopt(_elem, state);\n        }\n      }\n\n      return arr;\n    }\n\n    if (path.isObjectExpression()) {\n      var obj = {};\n      var props = path.get(\"properties\");\n\n      for (var _iterator2 = props, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"]();;) {\n        var _ref2;\n\n        if (_isArray2) {\n          if (_i2 >= _iterator2.length) break;\n          _ref2 = _iterator2[_i2++];\n        } else {\n          _i2 = _iterator2.next();\n          if (_i2.done) break;\n          _ref2 = _i2.value;\n        }\n\n        var _prop = _ref2;\n\n        if (_prop.isObjectMethod() || _prop.isSpreadElement()) {\n          return deopt(_prop, state);\n        }\n\n        var _keyPath = _prop.get(\"key\");\n\n        var _key = _keyPath;\n\n        if (_prop.node.computed) {\n          _key = _key.evaluate();\n\n          if (!_key.confident) {\n            return deopt(_keyPath, state);\n          }\n\n          _key = _key.value;\n        } else if (_key.isIdentifier()) {\n          _key = _key.node.name;\n        } else {\n          _key = _key.node.value;\n        }\n\n        var _valuePath = _prop.get(\"value\");\n\n        var _value2 = _valuePath.evaluate();\n\n        if (!_value2.confident) {\n          return deopt(_valuePath, state);\n        }\n\n        _value2 = _value2.value;\n        obj[_key] = _value2;\n      }\n\n      return obj;\n    }\n\n    if (path.isLogicalExpression()) {\n      var wasConfident = state.confident;\n      var left = evaluateCached(path.get(\"left\"), state);\n      var leftConfident = state.confident;\n      state.confident = wasConfident;\n      var right = evaluateCached(path.get(\"right\"), state);\n      var rightConfident = state.confident;\n\n      switch (node.operator) {\n        case \"||\":\n          state.confident = leftConfident && (!!left || rightConfident);\n          if (!state.confident) return;\n          return left || right;\n\n        case \"&&\":\n          state.confident = leftConfident && (!left || rightConfident);\n          if (!state.confident) return;\n          return left && right;\n      }\n    }\n\n    if (path.isBinaryExpression()) {\n      var _left = evaluateCached(path.get(\"left\"), state);\n\n      if (!state.confident) return;\n\n      var _right = evaluateCached(path.get(\"right\"), state);\n\n      if (!state.confident) return;\n\n      switch (node.operator) {\n        case \"-\":\n          return _left - _right;\n\n        case \"+\":\n          return _left + _right;\n\n        case \"/\":\n          return _left / _right;\n\n        case \"*\":\n          return _left * _right;\n\n        case \"%\":\n          return _left % _right;\n\n        case \"**\":\n          return Math.pow(_left, _right);\n\n        case \"<\":\n          return _left < _right;\n\n        case \">\":\n          return _left > _right;\n\n        case \"<=\":\n          return _left <= _right;\n\n        case \">=\":\n          return _left >= _right;\n\n        case \"==\":\n          return _left == _right;\n\n        case \"!=\":\n          return _left != _right;\n\n        case \"===\":\n          return _left === _right;\n\n        case \"!==\":\n          return _left !== _right;\n\n        case \"|\":\n          return _left | _right;\n\n        case \"&\":\n          return _left & _right;\n\n        case \"^\":\n          return _left ^ _right;\n\n        case \"<<\":\n          return _left << _right;\n\n        case \">>\":\n          return _left >> _right;\n\n        case \">>>\":\n          return _left >>> _right;\n      }\n    }\n\n    if (path.isCallExpression()) {\n      var callee = path.get(\"callee\");\n      var context;\n      var func;\n\n      if (callee.isIdentifier() && !path.scope.getBinding(callee.node.name, true) && VALID_CALLEES.indexOf(callee.node.name) >= 0) {\n        func = global[node.callee.name];\n      }\n\n      if (callee.isMemberExpression()) {\n        var _object2 = callee.get(\"object\");\n\n        var _property2 = callee.get(\"property\");\n\n        if (_object2.isIdentifier() && _property2.isIdentifier() && VALID_CALLEES.indexOf(_object2.node.name) >= 0 && INVALID_METHODS.indexOf(_property2.node.name) < 0) {\n          context = global[_object2.node.name];\n          func = context[_property2.node.name];\n        }\n\n        if (_object2.isLiteral() && _property2.isIdentifier()) {\n          var _type = typeof _object2.node.value;\n\n          if (_type === \"string\" || _type === \"number\") {\n            context = _object2.node.value;\n            func = context[_property2.node.name];\n          }\n        }\n      }\n\n      if (func) {\n        var args = path.get(\"arguments\").map(function (arg) {\n          return evaluateCached(arg, state);\n        });\n        if (!state.confident) return;\n        return func.apply(context, args);\n      }\n    }\n\n    deopt(path, state);\n  }\n\n  function evaluateQuasis(path, quasis, state) {\n    var raw = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    var str = \"\";\n    var i = 0;\n    var exprs = path.get(\"expressions\");\n\n    for (var _iterator3 = quasis, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"]();;) {\n      var _ref3;\n\n      if (_isArray3) {\n        if (_i3 >= _iterator3.length) break;\n        _ref3 = _iterator3[_i3++];\n      } else {\n        _i3 = _iterator3.next();\n        if (_i3.done) break;\n        _ref3 = _i3.value;\n      }\n\n      var _elem2 = _ref3;\n      if (!state.confident) break;\n      str += raw ? _elem2.value.raw : _elem2.value.cooked;\n      var _expr = exprs[i++];\n      if (_expr) str += String(evaluateCached(_expr, state));\n    }\n\n    if (!state.confident) return;\n    return str;\n  }\n\n  function evaluate() {\n    var state = {\n      confident: true,\n      deoptPath: null,\n      seen: new Map()\n    };\n    var value = evaluateCached(this, state);\n    if (!state.confident) value = undefined;\n    return {\n      confident: state.confident,\n      deopt: state.deoptPath,\n      value: value\n    };\n  }\n});","map":[[2,0,1,0],[4,0,3,0,"Object"],[4,2,3,0,"Object"],[4,8,3,6],[4,9,3,7,"defineProperty"],[4,23,3,0],[4,24,3,22,"exports"],[4,31,3,0],[4,33,3,31],[4,45,3,0],[4,47,3,45],[5,0,4,2,"value"],[5,4,4,2,"value"],[5,9,4,7],[5,11,4,9],[6,0,3,45],[6,3,3,0],[7,0,6,0,"exports"],[7,2,6,0,"exports"],[7,9,6,7],[7,10,6,8,"evaluateTruthy"],[7,24,6,0],[7,27,6,25,"evaluateTruthy"],[7,41,6,0],[8,0,7,0,"exports"],[8,2,7,0,"exports"],[8,9,7,7],[8,10,7,8,"evaluate"],[8,18,7,0],[8,21,7,19,"evaluate"],[8,29,7,0],[9,0,8,0],[9,6,8,6,"VALID_CALLEES"],[9,19,8,19],[9,22,8,22],[9,23,8,23],[9,31,8,22],[9,33,8,33],[9,41,8,22],[9,43,8,43],[9,49,8,22],[9,50,8,0],[10,0,9,0],[10,6,9,6,"INVALID_METHODS"],[10,21,9,21],[10,24,9,24],[10,25,9,25],[10,33,9,24],[10,34,9,0],[12,0,11,0],[12,11,11,9,"evaluateTruthy"],[12,25,11,0],[12,28,11,26],[13,0,12,2],[13,8,12,8,"res"],[13,11,12,11],[13,14,12,14],[13,19,12,19,"evaluate"],[13,27,12,14],[13,29,12,2],[14,0,13,2],[14,8,13,6,"res"],[14,11,13,9],[14,12,13,10,"confident"],[14,21,13,2],[14,23,13,21],[14,30,13,28],[14,31,13,29],[14,32,13,30,"res"],[14,35,13,33],[14,36,13,34,"value"],[14,41,13,21],[15,0,14,1],[17,0,16,0],[17,11,16,9,"deopt"],[17,16,16,0],[17,17,16,15,"path"],[17,21,16,0],[17,23,16,21,"state"],[17,28,16,0],[17,30,16,28],[18,0,17,2],[18,8,17,6],[18,9,17,7,"state"],[18,14,17,12],[18,15,17,13,"confident"],[18,24,17,2],[18,26,17,24],[19,0,18,2,"state"],[19,4,18,2,"state"],[19,9,18,7],[19,10,18,8,"deoptPath"],[19,19,18,2],[19,22,18,20,"path"],[19,26,18,2],[20,0,19,2,"state"],[20,4,19,2,"state"],[20,9,19,7],[20,10,19,8,"confident"],[20,19,19,2],[20,22,19,20],[20,27,19,2],[21,0,20,1],[23,0,22,0],[23,11,22,9,"evaluateCached"],[23,25,22,0],[23,26,22,24,"path"],[23,30,22,0],[23,32,22,30,"state"],[23,37,22,0],[23,39,22,37],[24,0,22,37],[24,8,24,4,"node"],[24,12,22,37],[24,15,25,6,"path"],[24,19,22,37],[24,20,24,4,"node"],[24,24,22,37],[25,0,22,37],[25,8,27,4,"seen"],[25,12,22,37],[25,15,28,6,"state"],[25,20,22,37],[25,21,27,4,"seen"],[25,25,22,37],[27,0,30,2],[27,8,30,6,"seen"],[27,12,30,10],[27,13,30,11,"has"],[27,16,30,6],[27,17,30,15,"node"],[27,21,30,6],[27,22,30,2],[27,24,30,22],[28,0,31,4],[28,10,31,10,"existing"],[28,18,31,18],[28,21,31,21,"seen"],[28,25,31,25],[28,26,31,26,"get"],[28,29,31,21],[28,30,31,30,"node"],[28,34,31,21],[28,35,31,4],[30,0,33,4],[30,10,33,8,"existing"],[30,18,33,16],[30,19,33,17,"resolved"],[30,27,33,4],[30,29,33,27],[31,0,34,6],[31,15,34,13,"existing"],[31,23,34,21],[31,24,34,22,"value"],[31,29,34,6],[32,0,35,5],[32,7,33,4],[32,13,35,11],[33,0,36,6,"deopt"],[33,8,36,6,"deopt"],[33,13,36,11],[33,14,36,12,"path"],[33,18,36,11],[33,20,36,18,"state"],[33,25,36,11],[33,26,36,6],[34,0,37,6],[35,0,38,5],[36,0,39,3],[36,5,30,2],[36,11,39,9],[37,0,40,4],[37,10,40,10,"item"],[37,14,40,14],[37,17,40,17],[38,0,41,6,"resolved"],[38,8,41,6,"resolved"],[38,16,41,14],[38,18,41,16],[39,0,40,17],[39,7,40,4],[40,0,43,4,"seen"],[40,6,43,4,"seen"],[40,10,43,8],[40,11,43,9,"set"],[40,14,43,4],[40,15,43,13,"node"],[40,19,43,4],[40,21,43,19,"item"],[40,25,43,4],[42,0,45,4],[42,10,45,10,"val"],[42,13,45,13],[42,16,45,16,"_evaluate"],[42,25,45,25],[42,26,45,26,"path"],[42,30,45,25],[42,32,45,32,"state"],[42,37,45,25],[42,38,45,4],[44,0,47,4],[44,10,47,8,"state"],[44,15,47,13],[44,16,47,14,"confident"],[44,25,47,4],[44,27,47,25],[45,0,48,6,"item"],[45,8,48,6,"item"],[45,12,48,10],[45,13,48,11,"resolved"],[45,21,48,6],[45,24,48,22],[45,28,48,6],[46,0,49,6,"item"],[46,8,49,6,"item"],[46,12,49,10],[46,13,49,11,"value"],[46,18,49,6],[46,21,49,19,"val"],[46,24,49,6],[47,0,50,5],[49,0,52,4],[49,13,52,11,"val"],[49,16,52,4],[50,0,53,3],[51,0,54,1],[53,0,56,0],[53,11,56,9,"_evaluate"],[53,20,56,0],[53,21,56,19,"path"],[53,25,56,0],[53,27,56,25,"state"],[53,32,56,0],[53,34,56,32],[54,0,57,2],[54,8,57,6],[54,9,57,7,"state"],[54,14,57,12],[54,15,57,13,"confident"],[54,24,57,2],[54,26,57,24],[55,0,56,32],[55,8,59,4,"node"],[55,12,56,32],[55,15,60,6,"path"],[55,19,56,32],[55,20,59,4,"node"],[55,24,56,32],[57,0,62,2],[57,8,62,6,"path"],[57,12,62,10],[57,13,62,11,"isSequenceExpression"],[57,33,62,6],[57,35,62,2],[57,37,62,35],[58,0,63,4],[58,10,63,10,"exprs"],[58,15,63,15],[58,18,63,18,"path"],[58,22,63,22],[58,23,63,23,"get"],[58,26,63,18],[58,27,63,27],[58,40,63,18],[58,41,63,4],[59,0,64,4],[59,13,64,11,"evaluateCached"],[59,27,64,25],[59,28,64,26,"exprs"],[59,33,64,31],[59,34,64,32,"exprs"],[59,39,64,37],[59,40,64,38,"length"],[59,46,64,32],[59,49,64,47],[59,50,64,31],[59,51,64,25],[59,53,64,51,"state"],[59,58,64,25],[59,59,64,4],[60,0,65,3],[62,0,67,2],[62,8,67,6,"path"],[62,12,67,10],[62,13,67,11,"isStringLiteral"],[62,28,67,6],[62,34,67,32,"path"],[62,38,67,36],[62,39,67,37,"isNumericLiteral"],[62,55,67,32],[62,57,67,6],[62,61,67,59,"path"],[62,65,67,63],[62,66,67,64,"isBooleanLiteral"],[62,82,67,59],[62,84,67,2],[62,86,67,84],[63,0,68,4],[63,13,68,11,"node"],[63,17,68,15],[63,18,68,16,"value"],[63,23,68,4],[64,0,69,3],[66,0,71,2],[66,8,71,6,"path"],[66,12,71,10],[66,13,71,11,"isNullLiteral"],[66,26,71,6],[66,28,71,2],[66,30,71,28],[67,0,72,4],[67,13,72,11],[67,17,72,4],[68,0,73,3],[70,0,75,2],[70,8,75,6,"path"],[70,12,75,10],[70,13,75,11,"isTemplateLiteral"],[70,30,75,6],[70,32,75,2],[70,34,75,32],[71,0,76,4],[71,13,76,11,"evaluateQuasis"],[71,27,76,25],[71,28,76,26,"path"],[71,32,76,25],[71,34,76,32,"node"],[71,38,76,36],[71,39,76,37,"quasis"],[71,45,76,25],[71,47,76,45,"state"],[71,52,76,25],[71,53,76,4],[72,0,77,3],[74,0,79,2],[74,8,79,6,"path"],[74,12,79,10],[74,13,79,11,"isTaggedTemplateExpression"],[74,39,79,6],[74,45,79,43,"path"],[74,49,79,47],[74,50,79,48,"get"],[74,53,79,43],[74,54,79,52],[74,59,79,43],[74,61,79,59,"isMemberExpression"],[74,79,79,43],[74,81,79,2],[74,83,79,81],[75,0,80,4],[75,10,80,10,"object"],[75,16,80,16],[75,19,80,19,"path"],[75,23,80,23],[75,24,80,24,"get"],[75,27,80,19],[75,28,80,28],[75,40,80,19],[75,41,80,4],[76,0,79,81],[76,10,83,8,"name"],[76,14,79,81],[76,17,85,8,"object"],[76,23,79,81],[76,24,82,6,"node"],[76,28,79,81],[76,29,83,8,"name"],[76,33,79,81],[77,0,86,4],[77,10,86,10,"property"],[77,18,86,18],[77,21,86,21,"path"],[77,25,86,25],[77,26,86,26,"get"],[77,29,86,21],[77,30,86,30],[77,44,86,21],[77,45,86,4],[79,0,88,4],[79,10,88,8,"object"],[79,16,88,14],[79,17,88,15,"isIdentifier"],[79,29,88,8],[79,35,88,33,"name"],[79,39,88,37],[79,44,88,42],[79,52,88,8],[79,56,88,54],[79,57,88,55,"path"],[79,61,88,59],[79,62,88,60,"scope"],[79,67,88,55],[79,68,88,66,"getBinding"],[79,78,88,55],[79,79,88,77,"name"],[79,83,88,55],[79,85,88,83],[79,89,88,55],[79,90,88,8],[79,94,88,92,"property"],[79,102,88,100],[79,103,88,101,"isIdentifier"],[79,115,88,8],[79,119,88,117,"property"],[79,127,88,125],[79,128,88,126,"node"],[79,132,88,117],[79,133,88,131,"name"],[79,137,88,117],[79,142,88,140],[79,147,88,4],[79,149,88,147],[80,0,89,6],[80,15,89,13,"evaluateQuasis"],[80,29,89,27],[80,30,89,28,"path"],[80,34,89,27],[80,36,89,34,"node"],[80,40,89,38],[80,41,89,39,"quasi"],[80,46,89,34],[80,47,89,45,"quasis"],[80,53,89,27],[80,55,89,53,"state"],[80,60,89,27],[80,62,89,60],[80,66,89,27],[80,67,89,6],[81,0,90,5],[82,0,91,3],[84,0,93,2],[84,8,93,6,"path"],[84,12,93,10],[84,13,93,11,"isConditionalExpression"],[84,36,93,6],[84,38,93,2],[84,40,93,38],[85,0,94,4],[85,10,94,10,"testResult"],[85,20,94,20],[85,23,94,23,"evaluateCached"],[85,37,94,37],[85,38,94,38,"path"],[85,42,94,42],[85,43,94,43,"get"],[85,46,94,38],[85,47,94,47],[85,53,94,38],[85,54,94,37],[85,56,94,56,"state"],[85,61,94,37],[85,62,94,4],[86,0,95,4],[86,10,95,8],[86,11,95,9,"state"],[86,16,95,14],[86,17,95,15,"confident"],[86,26,95,4],[86,28,95,26],[88,0,97,4],[88,10,97,8,"testResult"],[88,20,97,4],[88,22,97,20],[89,0,98,6],[89,15,98,13,"evaluateCached"],[89,29,98,27],[89,30,98,28,"path"],[89,34,98,32],[89,35,98,33,"get"],[89,38,98,28],[89,39,98,37],[89,51,98,28],[89,52,98,27],[89,54,98,52,"state"],[89,59,98,27],[89,60,98,6],[90,0,99,5],[90,7,97,4],[90,13,99,11],[91,0,100,6],[91,15,100,13,"evaluateCached"],[91,29,100,27],[91,30,100,28,"path"],[91,34,100,32],[91,35,100,33,"get"],[91,38,100,28],[91,39,100,37],[91,50,100,28],[91,51,100,27],[91,53,100,51,"state"],[91,58,100,27],[91,59,100,6],[92,0,101,5],[93,0,102,3],[95,0,104,2],[95,8,104,6,"path"],[95,12,104,10],[95,13,104,11,"isExpressionWrapper"],[95,32,104,6],[95,34,104,2],[95,36,104,34],[96,0,105,4],[96,13,105,11,"evaluateCached"],[96,27,105,25],[96,28,105,26,"path"],[96,32,105,30],[96,33,105,31,"get"],[96,36,105,26],[96,37,105,35],[96,49,105,26],[96,50,105,25],[96,52,105,50,"state"],[96,57,105,25],[96,58,105,4],[97,0,106,3],[99,0,108,2],[99,8,108,6,"path"],[99,12,108,10],[99,13,108,11,"isMemberExpression"],[99,31,108,6],[99,37,108,35],[99,38,108,36,"path"],[99,42,108,40],[99,43,108,41,"parentPath"],[99,53,108,36],[99,54,108,52,"isCallExpression"],[99,70,108,36],[99,71,108,69],[100,0,109,4,"callee"],[100,6,109,4,"callee"],[100,12,109,10],[100,14,109,12,"node"],[101,0,108,69],[101,5,108,36],[101,6,108,2],[101,8,110,6],[102,0,111,4],[102,10,111,10,"property"],[102,19,111,18],[102,22,111,21,"path"],[102,26,111,25],[102,27,111,26,"get"],[102,30,111,21],[102,31,111,30],[102,41,111,21],[102,42,111,4],[104,0,112,4],[104,10,112,10,"object"],[104,17,112,16],[104,20,112,19,"path"],[104,24,112,23],[104,25,112,24,"get"],[104,28,112,19],[104,29,112,28],[104,37,112,19],[104,38,112,4],[106,0,114,4],[106,10,114,8,"object"],[106,17,114,14],[106,18,114,15,"isLiteral"],[106,27,114,8],[106,33,114,30,"property"],[106,42,114,38],[106,43,114,39,"isIdentifier"],[106,55,114,30],[106,57,114,4],[106,59,114,55],[107,0,115,6],[107,12,115,12,"value"],[107,17,115,17],[107,20,115,20,"object"],[107,27,115,26],[107,28,115,27,"node"],[107,32,115,20],[107,33,115,32,"value"],[107,38,115,6],[108,0,116,6],[108,12,116,12,"type"],[108,16,116,16],[108,19,116,19],[108,26,116,26,"value"],[108,31,116,6],[110,0,118,6],[110,12,118,10,"type"],[110,16,118,14],[110,21,118,19],[110,29,118,10],[110,33,118,31,"type"],[110,37,118,35],[110,42,118,40],[110,50,118,6],[110,52,118,50],[111,0,119,8],[111,17,119,15,"value"],[111,22,119,20],[111,23,119,21,"property"],[111,32,119,29],[111,33,119,30,"node"],[111,37,119,21],[111,38,119,35,"name"],[111,42,119,20],[111,43,119,8],[112,0,120,7],[113,0,121,5],[114,0,122,3],[116,0,124,2],[116,8,124,6,"path"],[116,12,124,10],[116,13,124,11,"isReferencedIdentifier"],[116,35,124,6],[116,37,124,2],[116,39,124,37],[117,0,125,4],[117,10,125,10,"binding"],[117,17,125,17],[117,20,125,20,"path"],[117,24,125,24],[117,25,125,25,"scope"],[117,30,125,20],[117,31,125,31,"getBinding"],[117,41,125,20],[117,42,125,42,"node"],[117,46,125,46],[117,47,125,47,"name"],[117,51,125,20],[117,52,125,4],[119,0,127,4],[119,10,127,8,"binding"],[119,17,127,15],[119,21,127,19,"binding"],[119,28,127,26],[119,29,127,27,"constantViolations"],[119,47,127,19],[119,48,127,46,"length"],[119,54,127,19],[119,57,127,55],[119,58,127,4],[119,60,127,58],[120,0,128,6],[120,15,128,13,"deopt"],[120,20,128,18],[120,21,128,19,"binding"],[120,28,128,26],[120,29,128,27,"path"],[120,33,128,18],[120,35,128,33,"state"],[120,40,128,18],[120,41,128,6],[121,0,129,5],[123,0,131,4],[123,10,131,8,"binding"],[123,17,131,15],[123,21,131,19,"path"],[123,25,131,23],[123,26,131,24,"node"],[123,30,131,19],[123,31,131,29,"start"],[123,36,131,19],[123,39,131,37,"binding"],[123,46,131,44],[123,47,131,45,"path"],[123,51,131,37],[123,52,131,50,"node"],[123,56,131,37],[123,57,131,55,"end"],[123,60,131,4],[123,62,131,60],[124,0,132,6],[124,15,132,13,"deopt"],[124,20,132,18],[124,21,132,19,"binding"],[124,28,132,26],[124,29,132,27,"path"],[124,33,132,18],[124,35,132,33,"state"],[124,40,132,18],[124,41,132,6],[125,0,133,5],[127,0,135,4],[127,10,135,8,"binding"],[127,17,135,15],[127,21,135,19,"binding"],[127,28,135,26],[127,29,135,27,"hasValue"],[127,37,135,4],[127,39,135,37],[128,0,136,6],[128,15,136,13,"binding"],[128,22,136,20],[128,23,136,21,"value"],[128,28,136,6],[129,0,137,5],[129,7,135,4],[129,13,137,11],[130,0,138,6],[130,12,138,10,"node"],[130,16,138,14],[130,17,138,15,"name"],[130,21,138,10],[130,26,138,24],[130,37,138,6],[130,39,138,37],[131,0,139,8],[131,17,139,15,"binding"],[131,24,139,22],[131,27,139,25,"deopt"],[131,32,139,30],[131,33,139,31,"binding"],[131,40,139,38],[131,41,139,39,"path"],[131,45,139,30],[131,47,139,45,"state"],[131,52,139,30],[131,53,139,22],[131,56,139,54,"undefined"],[131,65,139,8],[132,0,140,7],[132,9,138,6],[132,15,140,13],[132,19,140,17,"node"],[132,23,140,21],[132,24,140,22,"name"],[132,28,140,17],[132,33,140,31],[132,43,140,13],[132,45,140,43],[133,0,141,8],[133,17,141,15,"binding"],[133,24,141,22],[133,27,141,25,"deopt"],[133,32,141,30],[133,33,141,31,"binding"],[133,40,141,38],[133,41,141,39,"path"],[133,45,141,30],[133,47,141,45,"state"],[133,52,141,30],[133,53,141,22],[133,56,141,54,"Infinity"],[133,64,141,8],[134,0,142,7],[134,9,140,13],[134,15,142,13],[134,19,142,17,"node"],[134,23,142,21],[134,24,142,22,"name"],[134,28,142,17],[134,33,142,31],[134,38,142,13],[134,40,142,38],[135,0,143,8],[135,17,143,15,"binding"],[135,24,143,22],[135,27,143,25,"deopt"],[135,32,143,30],[135,33,143,31,"binding"],[135,40,143,38],[135,41,143,39,"path"],[135,45,143,30],[135,47,143,45,"state"],[135,52,143,30],[135,53,143,22],[135,56,143,54,"NaN"],[135,59,143,8],[136,0,144,7],[138,0,146,6],[138,12,146,12,"resolved"],[138,20,146,20],[138,23,146,23,"path"],[138,27,146,27],[138,28,146,28,"resolve"],[138,35,146,23],[138,37,146,6],[140,0,148,6],[140,12,148,10,"resolved"],[140,20,148,18],[140,25,148,23,"path"],[140,29,148,6],[140,31,148,29],[141,0,149,8],[141,17,149,15,"deopt"],[141,22,149,20],[141,23,149,21,"path"],[141,27,149,20],[141,29,149,27,"state"],[141,34,149,20],[141,35,149,8],[142,0,150,7],[142,9,148,6],[142,15,150,13],[143,0,151,8],[143,17,151,15,"evaluateCached"],[143,31,151,29],[143,32,151,30,"resolved"],[143,40,151,29],[143,42,151,40,"state"],[143,47,151,29],[143,48,151,8],[144,0,152,7],[145,0,153,5],[146,0,154,3],[148,0,156,2],[148,8,156,6,"path"],[148,12,156,10],[148,13,156,11,"isUnaryExpression"],[148,30,156,6],[148,31,156,29],[149,0,157,4,"prefix"],[149,6,157,4,"prefix"],[149,12,157,10],[149,14,157,12],[150,0,156,29],[150,5,156,6],[150,6,156,2],[150,8,158,6],[151,0,159,4],[151,10,159,8,"node"],[151,14,159,12],[151,15,159,13,"operator"],[151,23,159,8],[151,28,159,26],[151,34,159,4],[151,36,159,34],[152,0,160,6],[152,15,160,13,"undefined"],[152,24,160,6],[153,0,161,5],[155,0,163,4],[155,10,163,10,"argument"],[155,18,163,18],[155,21,163,21,"path"],[155,25,163,25],[155,26,163,26,"get"],[155,29,163,21],[155,30,163,30],[155,40,163,21],[155,41,163,4],[157,0,165,4],[157,10,165,8,"node"],[157,14,165,12],[157,15,165,13,"operator"],[157,23,165,8],[157,28,165,26],[157,36,165,8],[157,41,165,39,"argument"],[157,49,165,47],[157,50,165,48,"isFunction"],[157,60,165,39],[157,66,165,64,"argument"],[157,74,165,72],[157,75,165,73,"isClass"],[157,82,165,64],[157,84,165,8],[157,85,165,4],[157,87,165,85],[158,0,166,6],[158,15,166,13],[158,25,166,6],[159,0,167,5],[161,0,169,4],[161,10,169,10,"arg"],[161,13,169,13],[161,16,169,16,"evaluateCached"],[161,30,169,30],[161,31,169,31,"argument"],[161,39,169,30],[161,41,169,41,"state"],[161,46,169,30],[161,47,169,4],[162,0,170,4],[162,10,170,8],[162,11,170,9,"state"],[162,16,170,14],[162,17,170,15,"confident"],[162,26,170,4],[162,28,170,26],[164,0,172,4],[164,14,172,12,"node"],[164,18,172,16],[164,19,172,17,"operator"],[164,27,172,4],[165,0,173,6],[165,13,173,11],[165,16,173,6],[166,0,174,8],[166,17,174,15],[166,18,174,16,"arg"],[166,21,174,8],[168,0,176,6],[168,13,176,11],[168,16,176,6],[169,0,177,8],[169,17,177,15],[169,18,177,16,"arg"],[169,21,177,8],[171,0,179,6],[171,13,179,11],[171,16,179,6],[172,0,180,8],[172,17,180,15],[172,18,180,16,"arg"],[172,21,180,8],[174,0,182,6],[174,13,182,11],[174,16,182,6],[175,0,183,8],[175,17,183,15],[175,18,183,16,"arg"],[175,21,183,8],[177,0,185,6],[177,13,185,11],[177,21,185,6],[178,0,186,8],[178,17,186,15],[178,24,186,22,"arg"],[178,27,186,8],[179,0,172,4],[180,0,188,3],[182,0,190,2],[182,8,190,6,"path"],[182,12,190,10],[182,13,190,11,"isArrayExpression"],[182,30,190,6],[182,32,190,2],[182,34,190,32],[183,0,191,4],[183,10,191,10,"arr"],[183,13,191,13],[183,16,191,16],[183,18,191,4],[184,0,192,4],[184,10,192,10,"elems"],[184,15,192,15],[184,18,192,18,"path"],[184,22,192,22],[184,23,192,23,"get"],[184,26,192,18],[184,27,192,27],[184,37,192,18],[184,38,192,4],[186,0,194,4],[186,27,194,23,"elems"],[186,32,194,4],[186,192,194,30],[187,0,194,30],[189,0,194,30],[190,0,194,30],[191,0,194,30],[192,0,194,30],[193,0,194,30],[194,0,194,30],[195,0,194,30],[196,0,194,30],[198,0,194,30],[198,12,194,15,"elem"],[198,17,194,30],[200,0,195,6],[200,12,195,12,"elemValue"],[200,22,195,21],[200,25,195,24,"elem"],[200,30,195,28],[200,31,195,29,"evaluate"],[200,39,195,24],[200,41,195,6],[202,0,197,6],[202,12,197,10,"elemValue"],[202,22,197,19],[202,23,197,20,"confident"],[202,32,197,6],[202,34,197,31],[203,0,198,8,"arr"],[203,10,198,8,"arr"],[203,13,198,11],[203,14,198,12,"push"],[203,18,198,8],[203,19,198,17,"elemValue"],[203,29,198,26],[203,30,198,27,"value"],[203,35,198,8],[204,0,199,7],[204,9,197,6],[204,15,199,13],[205,0,200,8],[205,17,200,15,"deopt"],[205,22,200,20],[205,23,200,21,"elem"],[205,28,200,20],[205,30,200,27,"state"],[205,35,200,20],[205,36,200,8],[206,0,201,7],[207,0,202,5],[209,0,204,4],[209,13,204,11,"arr"],[209,16,204,4],[210,0,205,3],[212,0,207,2],[212,8,207,6,"path"],[212,12,207,10],[212,13,207,11,"isObjectExpression"],[212,31,207,6],[212,33,207,2],[212,35,207,33],[213,0,208,4],[213,10,208,10,"obj"],[213,13,208,13],[213,16,208,16],[213,18,208,4],[214,0,209,4],[214,10,209,10,"props"],[214,15,209,15],[214,18,209,18,"path"],[214,22,209,22],[214,23,209,23,"get"],[214,26,209,18],[214,27,209,27],[214,39,209,18],[214,40,209,4],[216,0,211,4],[216,28,211,23,"props"],[216,33,211,4],[216,200,211,30],[217,0,211,30],[219,0,211,30],[220,0,211,30],[221,0,211,30],[222,0,211,30],[223,0,211,30],[224,0,211,30],[225,0,211,30],[226,0,211,30],[228,0,211,30],[228,12,211,15,"prop"],[228,17,211,30],[230,0,212,6],[230,12,212,10,"prop"],[230,17,212,14],[230,18,212,15,"isObjectMethod"],[230,32,212,10],[230,38,212,35,"prop"],[230,43,212,39],[230,44,212,40,"isSpreadElement"],[230,59,212,35],[230,61,212,6],[230,63,212,59],[231,0,213,8],[231,17,213,15,"deopt"],[231,22,213,20],[231,23,213,21,"prop"],[231,28,213,20],[231,30,213,27,"state"],[231,35,213,20],[231,36,213,8],[232,0,214,7],[234,0,216,6],[234,12,216,12,"keyPath"],[234,20,216,19],[234,23,216,22,"prop"],[234,28,216,26],[234,29,216,27,"get"],[234,32,216,22],[234,33,216,31],[234,38,216,22],[234,39,216,6],[236,0,217,6],[236,12,217,10,"key"],[236,16,217,13],[236,19,217,16,"keyPath"],[236,27,217,6],[238,0,219,6],[238,12,219,10,"prop"],[238,17,219,14],[238,18,219,15,"node"],[238,22,219,10],[238,23,219,20,"computed"],[238,31,219,6],[238,33,219,30],[239,0,220,8,"key"],[239,10,220,8,"key"],[239,14,220,11],[239,17,220,14,"key"],[239,21,220,17],[239,22,220,18,"evaluate"],[239,30,220,14],[239,32,220,8],[241,0,222,8],[241,14,222,12],[241,15,222,13,"key"],[241,19,222,16],[241,20,222,17,"confident"],[241,29,222,8],[241,31,222,28],[242,0,223,10],[242,19,223,17,"deopt"],[242,24,223,22],[242,25,223,23,"keyPath"],[242,33,223,22],[242,35,223,32,"state"],[242,40,223,22],[242,41,223,10],[243,0,224,9],[245,0,226,8,"key"],[245,10,226,8,"key"],[245,14,226,11],[245,17,226,14,"key"],[245,21,226,17],[245,22,226,18,"value"],[245,27,226,8],[246,0,227,7],[246,9,219,6],[246,15,227,13],[246,19,227,17,"key"],[246,23,227,20],[246,24,227,21,"isIdentifier"],[246,36,227,17],[246,38,227,13],[246,40,227,37],[247,0,228,8,"key"],[247,10,228,8,"key"],[247,14,228,11],[247,17,228,14,"key"],[247,21,228,17],[247,22,228,18,"node"],[247,26,228,14],[247,27,228,23,"name"],[247,31,228,8],[248,0,229,7],[248,9,227,13],[248,15,229,13],[249,0,230,8,"key"],[249,10,230,8,"key"],[249,14,230,11],[249,17,230,14,"key"],[249,21,230,17],[249,22,230,18,"node"],[249,26,230,14],[249,27,230,23,"value"],[249,32,230,8],[250,0,231,7],[252,0,233,6],[252,12,233,12,"valuePath"],[252,22,233,21],[252,25,233,24,"prop"],[252,30,233,28],[252,31,233,29,"get"],[252,34,233,24],[252,35,233,33],[252,42,233,24],[252,43,233,6],[254,0,234,6],[254,12,234,10,"value"],[254,19,234,15],[254,22,234,18,"valuePath"],[254,32,234,27],[254,33,234,28,"evaluate"],[254,41,234,18],[254,43,234,6],[256,0,236,6],[256,12,236,10],[256,13,236,11,"value"],[256,20,236,16],[256,21,236,17,"confident"],[256,30,236,6],[256,32,236,28],[257,0,237,8],[257,17,237,15,"deopt"],[257,22,237,20],[257,23,237,21,"valuePath"],[257,33,237,20],[257,35,237,32,"state"],[257,40,237,20],[257,41,237,8],[258,0,238,7],[260,0,240,6,"value"],[260,8,240,6,"value"],[260,15,240,11],[260,18,240,14,"value"],[260,25,240,19],[260,26,240,20,"value"],[260,31,240,6],[261,0,241,6,"obj"],[261,8,241,6,"obj"],[261,11,241,9],[261,12,241,10,"key"],[261,16,241,9],[261,17,241,6],[261,20,241,17,"value"],[261,27,241,6],[262,0,242,5],[264,0,244,4],[264,13,244,11,"obj"],[264,16,244,4],[265,0,245,3],[267,0,247,2],[267,8,247,6,"path"],[267,12,247,10],[267,13,247,11,"isLogicalExpression"],[267,32,247,6],[267,34,247,2],[267,36,247,34],[268,0,248,4],[268,10,248,10,"wasConfident"],[268,22,248,22],[268,25,248,25,"state"],[268,30,248,30],[268,31,248,31,"confident"],[268,40,248,4],[269,0,249,4],[269,10,249,10,"left"],[269,14,249,14],[269,17,249,17,"evaluateCached"],[269,31,249,31],[269,32,249,32,"path"],[269,36,249,36],[269,37,249,37,"get"],[269,40,249,32],[269,41,249,41],[269,47,249,32],[269,48,249,31],[269,50,249,50,"state"],[269,55,249,31],[269,56,249,4],[270,0,250,4],[270,10,250,10,"leftConfident"],[270,23,250,23],[270,26,250,26,"state"],[270,31,250,31],[270,32,250,32,"confident"],[270,41,250,4],[271,0,251,4,"state"],[271,6,251,4,"state"],[271,11,251,9],[271,12,251,10,"confident"],[271,21,251,4],[271,24,251,22,"wasConfident"],[271,36,251,4],[272,0,252,4],[272,10,252,10,"right"],[272,15,252,15],[272,18,252,18,"evaluateCached"],[272,32,252,32],[272,33,252,33,"path"],[272,37,252,37],[272,38,252,38,"get"],[272,41,252,33],[272,42,252,42],[272,49,252,33],[272,50,252,32],[272,52,252,52,"state"],[272,57,252,32],[272,58,252,4],[273,0,253,4],[273,10,253,10,"rightConfident"],[273,24,253,24],[273,27,253,27,"state"],[273,32,253,32],[273,33,253,33,"confident"],[273,42,253,4],[275,0,255,4],[275,14,255,12,"node"],[275,18,255,16],[275,19,255,17,"operator"],[275,27,255,4],[276,0,256,6],[276,13,256,11],[276,17,256,6],[277,0,257,8,"state"],[277,10,257,8,"state"],[277,15,257,13],[277,16,257,14,"confident"],[277,25,257,8],[277,28,257,26,"leftConfident"],[277,41,257,39],[277,46,257,44],[277,47,257,45],[277,48,257,46,"left"],[277,52,257,44],[277,56,257,54,"rightConfident"],[277,70,257,39],[277,71,257,8],[278,0,258,8],[278,14,258,12],[278,15,258,13,"state"],[278,20,258,18],[278,21,258,19,"confident"],[278,30,258,8],[278,32,258,30],[279,0,259,8],[279,17,259,15,"left"],[279,21,259,19],[279,25,259,23,"right"],[279,30,259,8],[281,0,261,6],[281,13,261,11],[281,17,261,6],[282,0,262,8,"state"],[282,10,262,8,"state"],[282,15,262,13],[282,16,262,14,"confident"],[282,25,262,8],[282,28,262,26,"leftConfident"],[282,41,262,39],[282,46,262,44],[282,47,262,45,"left"],[282,51,262,44],[282,55,262,53,"rightConfident"],[282,69,262,39],[282,70,262,8],[283,0,263,8],[283,14,263,12],[283,15,263,13,"state"],[283,20,263,18],[283,21,263,19,"confident"],[283,30,263,8],[283,32,263,30],[284,0,264,8],[284,17,264,15,"left"],[284,21,264,19],[284,25,264,23,"right"],[284,30,264,8],[285,0,255,4],[286,0,266,3],[288,0,268,2],[288,8,268,6,"path"],[288,12,268,10],[288,13,268,11,"isBinaryExpression"],[288,31,268,6],[288,33,268,2],[288,35,268,33],[289,0,269,4],[289,10,269,10,"left"],[289,15,269,14],[289,18,269,17,"evaluateCached"],[289,32,269,31],[289,33,269,32,"path"],[289,37,269,36],[289,38,269,37,"get"],[289,41,269,32],[289,42,269,41],[289,48,269,32],[289,49,269,31],[289,51,269,50,"state"],[289,56,269,31],[289,57,269,4],[291,0,270,4],[291,10,270,8],[291,11,270,9,"state"],[291,16,270,14],[291,17,270,15,"confident"],[291,26,270,4],[291,28,270,26],[293,0,271,4],[293,10,271,10,"right"],[293,16,271,15],[293,19,271,18,"evaluateCached"],[293,33,271,32],[293,34,271,33,"path"],[293,38,271,37],[293,39,271,38,"get"],[293,42,271,33],[293,43,271,42],[293,50,271,33],[293,51,271,32],[293,53,271,52,"state"],[293,58,271,32],[293,59,271,4],[295,0,272,4],[295,10,272,8],[295,11,272,9,"state"],[295,16,272,14],[295,17,272,15,"confident"],[295,26,272,4],[295,28,272,26],[297,0,274,4],[297,14,274,12,"node"],[297,18,274,16],[297,19,274,17,"operator"],[297,27,274,4],[298,0,275,6],[298,13,275,11],[298,16,275,6],[299,0,276,8],[299,17,276,15,"left"],[299,22,276,19],[299,25,276,22,"right"],[299,31,276,8],[301,0,278,6],[301,13,278,11],[301,16,278,6],[302,0,279,8],[302,17,279,15,"left"],[302,22,279,19],[302,25,279,22,"right"],[302,31,279,8],[304,0,281,6],[304,13,281,11],[304,16,281,6],[305,0,282,8],[305,17,282,15,"left"],[305,22,282,19],[305,25,282,22,"right"],[305,31,282,8],[307,0,284,6],[307,13,284,11],[307,16,284,6],[308,0,285,8],[308,17,285,15,"left"],[308,22,285,19],[308,25,285,22,"right"],[308,31,285,8],[310,0,287,6],[310,13,287,11],[310,16,287,6],[311,0,288,8],[311,17,288,15,"left"],[311,22,288,19],[311,25,288,22,"right"],[311,31,288,8],[313,0,290,6],[313,13,290,11],[313,17,290,6],[314,0,291,8],[314,17,291,15,"Math"],[314,21,291,19],[314,22,291,20,"pow"],[314,25,291,15],[314,26,291,24,"left"],[314,31,291,15],[314,33,291,30,"right"],[314,39,291,15],[314,40,291,8],[316,0,293,6],[316,13,293,11],[316,16,293,6],[317,0,294,8],[317,17,294,15,"left"],[317,22,294,19],[317,25,294,22,"right"],[317,31,294,8],[319,0,296,6],[319,13,296,11],[319,16,296,6],[320,0,297,8],[320,17,297,15,"left"],[320,22,297,19],[320,25,297,22,"right"],[320,31,297,8],[322,0,299,6],[322,13,299,11],[322,17,299,6],[323,0,300,8],[323,17,300,15,"left"],[323,22,300,19],[323,26,300,23,"right"],[323,32,300,8],[325,0,302,6],[325,13,302,11],[325,17,302,6],[326,0,303,8],[326,17,303,15,"left"],[326,22,303,19],[326,26,303,23,"right"],[326,32,303,8],[328,0,305,6],[328,13,305,11],[328,17,305,6],[329,0,306,8],[329,17,306,15,"left"],[329,22,306,19],[329,26,306,23,"right"],[329,32,306,8],[331,0,308,6],[331,13,308,11],[331,17,308,6],[332,0,309,8],[332,17,309,15,"left"],[332,22,309,19],[332,26,309,23,"right"],[332,32,309,8],[334,0,311,6],[334,13,311,11],[334,18,311,6],[335,0,312,8],[335,17,312,15,"left"],[335,22,312,19],[335,27,312,24,"right"],[335,33,312,8],[337,0,314,6],[337,13,314,11],[337,18,314,6],[338,0,315,8],[338,17,315,15,"left"],[338,22,315,19],[338,27,315,24,"right"],[338,33,315,8],[340,0,317,6],[340,13,317,11],[340,16,317,6],[341,0,318,8],[341,17,318,15,"left"],[341,22,318,19],[341,25,318,22,"right"],[341,31,318,8],[343,0,320,6],[343,13,320,11],[343,16,320,6],[344,0,321,8],[344,17,321,15,"left"],[344,22,321,19],[344,25,321,22,"right"],[344,31,321,8],[346,0,323,6],[346,13,323,11],[346,16,323,6],[347,0,324,8],[347,17,324,15,"left"],[347,22,324,19],[347,25,324,22,"right"],[347,31,324,8],[349,0,326,6],[349,13,326,11],[349,17,326,6],[350,0,327,8],[350,17,327,15,"left"],[350,22,327,19],[350,26,327,23,"right"],[350,32,327,8],[352,0,329,6],[352,13,329,11],[352,17,329,6],[353,0,330,8],[353,17,330,15,"left"],[353,22,330,19],[353,26,330,23,"right"],[353,32,330,8],[355,0,332,6],[355,13,332,11],[355,18,332,6],[356,0,333,8],[356,17,333,15,"left"],[356,22,333,19],[356,27,333,24,"right"],[356,33,333,8],[357,0,274,4],[358,0,335,3],[360,0,337,2],[360,8,337,6,"path"],[360,12,337,10],[360,13,337,11,"isCallExpression"],[360,29,337,6],[360,31,337,2],[360,33,337,31],[361,0,338,4],[361,10,338,10,"callee"],[361,16,338,16],[361,19,338,19,"path"],[361,23,338,23],[361,24,338,24,"get"],[361,27,338,19],[361,28,338,28],[361,36,338,19],[361,37,338,4],[362,0,339,4],[362,10,339,8,"context"],[362,17,339,4],[363,0,340,4],[363,10,340,8,"func"],[363,14,340,4],[365,0,342,4],[365,10,342,8,"callee"],[365,16,342,14],[365,17,342,15,"isIdentifier"],[365,29,342,8],[365,35,342,33],[365,36,342,34,"path"],[365,40,342,38],[365,41,342,39,"scope"],[365,46,342,34],[365,47,342,45,"getBinding"],[365,57,342,34],[365,58,342,56,"callee"],[365,64,342,62],[365,65,342,63,"node"],[365,69,342,56],[365,70,342,68,"name"],[365,74,342,34],[365,76,342,74],[365,80,342,34],[365,81,342,8],[365,85,342,83,"VALID_CALLEES"],[365,98,342,96],[365,99,342,97,"indexOf"],[365,106,342,83],[365,107,342,105,"callee"],[365,113,342,111],[365,114,342,112,"node"],[365,118,342,105],[365,119,342,117,"name"],[365,123,342,83],[365,128,342,126],[365,129,342,4],[365,131,342,129],[366,0,343,6,"func"],[366,8,343,6,"func"],[366,12,343,10],[366,15,343,13,"global"],[366,21,343,19],[366,22,343,20,"node"],[366,26,343,24],[366,27,343,25,"callee"],[366,33,343,20],[366,34,343,32,"name"],[366,38,343,19],[366,39,343,6],[367,0,344,5],[369,0,346,4],[369,10,346,8,"callee"],[369,16,346,14],[369,17,346,15,"isMemberExpression"],[369,35,346,8],[369,37,346,4],[369,39,346,37],[370,0,347,6],[370,12,347,12,"object"],[370,20,347,18],[370,23,347,21,"callee"],[370,29,347,27],[370,30,347,28,"get"],[370,33,347,21],[370,34,347,32],[370,42,347,21],[370,43,347,6],[372,0,348,6],[372,12,348,12,"property"],[372,22,348,20],[372,25,348,23,"callee"],[372,31,348,29],[372,32,348,30,"get"],[372,35,348,23],[372,36,348,34],[372,46,348,23],[372,47,348,6],[374,0,350,6],[374,12,350,10,"object"],[374,20,350,16],[374,21,350,17,"isIdentifier"],[374,33,350,10],[374,39,350,35,"property"],[374,49,350,43],[374,50,350,44,"isIdentifier"],[374,62,350,35],[374,64,350,10],[374,68,350,62,"VALID_CALLEES"],[374,81,350,75],[374,82,350,76,"indexOf"],[374,89,350,62],[374,90,350,84,"object"],[374,98,350,90],[374,99,350,91,"node"],[374,103,350,84],[374,104,350,96,"name"],[374,108,350,62],[374,113,350,105],[374,114,350,10],[374,118,350,110,"INVALID_METHODS"],[374,133,350,125],[374,134,350,126,"indexOf"],[374,141,350,110],[374,142,350,134,"property"],[374,152,350,142],[374,153,350,143,"node"],[374,157,350,134],[374,158,350,148,"name"],[374,162,350,110],[374,166,350,156],[374,167,350,6],[374,169,350,159],[375,0,351,8,"context"],[375,10,351,8,"context"],[375,17,351,15],[375,20,351,18,"global"],[375,26,351,24],[375,27,351,25,"object"],[375,35,351,31],[375,36,351,32,"node"],[375,40,351,25],[375,41,351,37,"name"],[375,45,351,24],[375,46,351,8],[376,0,352,8,"func"],[376,10,352,8,"func"],[376,14,352,12],[376,17,352,15,"context"],[376,24,352,22],[376,25,352,23,"property"],[376,35,352,31],[376,36,352,32,"node"],[376,40,352,23],[376,41,352,37,"name"],[376,45,352,22],[376,46,352,8],[377,0,353,7],[379,0,355,6],[379,12,355,10,"object"],[379,20,355,16],[379,21,355,17,"isLiteral"],[379,30,355,10],[379,36,355,32,"property"],[379,46,355,40],[379,47,355,41,"isIdentifier"],[379,59,355,32],[379,61,355,6],[379,63,355,57],[380,0,356,8],[380,14,356,14,"type"],[380,19,356,18],[380,22,356,21],[380,29,356,28,"object"],[380,37,356,34],[380,38,356,35,"node"],[380,42,356,28],[380,43,356,40,"value"],[380,48,356,8],[382,0,358,8],[382,14,358,12,"type"],[382,19,358,16],[382,24,358,21],[382,32,358,12],[382,36,358,33,"type"],[382,41,358,37],[382,46,358,42],[382,54,358,8],[382,56,358,52],[383,0,359,10,"context"],[383,12,359,10,"context"],[383,19,359,17],[383,22,359,20,"object"],[383,30,359,26],[383,31,359,27,"node"],[383,35,359,20],[383,36,359,32,"value"],[383,41,359,10],[384,0,360,10,"func"],[384,12,360,10,"func"],[384,16,360,14],[384,19,360,17,"context"],[384,26,360,24],[384,27,360,25,"property"],[384,37,360,33],[384,38,360,34,"node"],[384,42,360,25],[384,43,360,39,"name"],[384,47,360,24],[384,48,360,10],[385,0,361,9],[386,0,362,7],[387,0,363,5],[389,0,365,4],[389,10,365,8,"func"],[389,14,365,4],[389,16,365,14],[390,0,366,6],[390,12,366,12,"args"],[390,16,366,16],[390,19,366,19,"path"],[390,23,366,23],[390,24,366,24,"get"],[390,27,366,19],[390,28,366,28],[390,39,366,19],[390,41,366,41,"map"],[390,44,366,19],[390,45,366,45],[390,55,366,45,"arg"],[390,58,366,48],[391,0,366,48],[391,17,366,52,"evaluateCached"],[391,31,366,66],[391,32,366,67,"arg"],[391,35,366,66],[391,37,366,72,"state"],[391,42,366,66],[391,43,366,48],[392,0,366,48],[392,9,366,19],[392,10,366,6],[393,0,367,6],[393,12,367,10],[393,13,367,11,"state"],[393,18,367,16],[393,19,367,17,"confident"],[393,28,367,6],[393,30,367,28],[394,0,368,6],[394,15,368,13,"func"],[394,19,368,17],[394,20,368,18,"apply"],[394,25,368,13],[394,26,368,24,"context"],[394,33,368,13],[394,35,368,33,"args"],[394,39,368,13],[394,40,368,6],[395,0,369,5],[396,0,370,3],[398,0,372,2,"deopt"],[398,4,372,2,"deopt"],[398,9,372,7],[398,10,372,8,"path"],[398,14,372,7],[398,16,372,14,"state"],[398,21,372,7],[398,22,372,2],[399,0,373,1],[401,0,375,0],[401,11,375,9,"evaluateQuasis"],[401,25,375,0],[401,26,375,24,"path"],[401,30,375,0],[401,32,375,30,"quasis"],[401,38,375,0],[401,40,375,38,"state"],[401,45,375,0],[401,47,375,58],[402,0,375,58],[402,8,375,45,"raw"],[402,11,375,58],[402,82,375,51],[402,87,375,58],[403,0,376,2],[403,8,376,6,"str"],[403,11,376,9],[403,14,376,12],[403,16,376,2],[404,0,377,2],[404,8,377,6,"i"],[404,9,377,7],[404,12,377,10],[404,13,377,2],[405,0,378,2],[405,8,378,8,"exprs"],[405,13,378,13],[405,16,378,16,"path"],[405,20,378,20],[405,21,378,21,"get"],[405,24,378,16],[405,25,378,25],[405,38,378,16],[405,39,378,2],[407,0,380,2],[407,26,380,21,"quasis"],[407,32,380,2],[407,199,380,29],[408,0,380,29],[410,0,380,29],[411,0,380,29],[412,0,380,29],[413,0,380,29],[414,0,380,29],[415,0,380,29],[416,0,380,29],[417,0,380,29],[419,0,380,29],[419,10,380,13,"elem"],[419,16,380,29],[420,0,381,4],[420,10,381,8],[420,11,381,9,"state"],[420,16,381,14],[420,17,381,15,"confident"],[420,26,381,4],[420,28,381,26],[421,0,382,4,"str"],[421,6,382,4,"str"],[421,9,382,7],[421,13,382,11,"raw"],[421,16,382,14],[421,19,382,17,"elem"],[421,25,382,21],[421,26,382,22,"value"],[421,31,382,17],[421,32,382,28,"raw"],[421,35,382,14],[421,38,382,34,"elem"],[421,44,382,38],[421,45,382,39,"value"],[421,50,382,34],[421,51,382,45,"cooked"],[421,57,382,4],[422,0,383,4],[422,10,383,10,"expr"],[422,15,383,14],[422,18,383,17,"exprs"],[422,23,383,22],[422,24,383,23,"i"],[422,25,383,24],[422,27,383,22],[422,28,383,4],[423,0,384,4],[423,10,384,8,"expr"],[423,15,384,4],[423,17,384,14,"str"],[423,20,384,17],[423,24,384,21,"String"],[423,30,384,27],[423,31,384,28,"evaluateCached"],[423,45,384,42],[423,46,384,43,"expr"],[423,51,384,42],[423,53,384,49,"state"],[423,58,384,42],[423,59,384,27],[423,60,384,14],[424,0,385,3],[426,0,387,2],[426,8,387,6],[426,9,387,7,"state"],[426,14,387,12],[426,15,387,13,"confident"],[426,24,387,2],[426,26,387,24],[427,0,388,2],[427,11,388,9,"str"],[427,14,388,2],[428,0,389,1],[430,0,391,0],[430,11,391,9,"evaluate"],[430,19,391,0],[430,22,391,20],[431,0,392,2],[431,8,392,8,"state"],[431,13,392,13],[431,16,392,16],[432,0,393,4,"confident"],[432,6,393,4,"confident"],[432,15,393,13],[432,17,393,15],[432,21,392,16],[433,0,394,4,"deoptPath"],[433,6,394,4,"deoptPath"],[433,15,394,13],[433,17,394,15],[433,21,392,16],[434,0,395,4,"seen"],[434,6,395,4,"seen"],[434,10,395,8],[434,12,395,10],[434,16,395,14,"Map"],[434,19,395,10],[435,0,392,16],[435,5,392,2],[436,0,397,2],[436,8,397,6,"value"],[436,13,397,11],[436,16,397,14,"evaluateCached"],[436,30,397,28],[436,31,397,29],[436,35,397,28],[436,37,397,35,"state"],[436,42,397,28],[436,43,397,2],[437,0,398,2],[437,8,398,6],[437,9,398,7,"state"],[437,14,398,12],[437,15,398,13,"confident"],[437,24,398,2],[437,26,398,24,"value"],[437,31,398,29],[437,34,398,32,"undefined"],[437,43,398,24],[438,0,399,2],[438,11,399,9],[439,0,400,4,"confident"],[439,6,400,4,"confident"],[439,15,400,13],[439,17,400,15,"state"],[439,22,400,20],[439,23,400,21,"confident"],[439,32,399,9],[440,0,401,4,"deopt"],[440,6,401,4,"deopt"],[440,11,401,9],[440,13,401,11,"state"],[440,18,401,16],[440,19,401,17,"deoptPath"],[440,28,399,9],[441,0,402,4,"value"],[441,6,402,4,"value"],[441,11,402,9],[441,13,402,11,"value"],[442,0,399,9],[442,5,399,2],[443,0,404,1]]},"type":"js/module"}]}