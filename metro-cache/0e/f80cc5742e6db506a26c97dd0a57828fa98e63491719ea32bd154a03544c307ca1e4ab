{"dependencies":[{"name":"@babel/runtime/helpers/slicedToArray","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/createClass","data":{"isAsync":false}},{"name":"lodash/includes","data":{"isAsync":false}},{"name":"lodash/repeat","data":{"isAsync":false}},{"name":"./lib/renamer","data":{"isAsync":false}},{"name":"../index","data":{"isAsync":false}},{"name":"lodash/defaults","data":{"isAsync":false}},{"name":"./binding","data":{"isAsync":false}},{"name":"globals","data":{"isAsync":false}},{"name":"@babel/types","data":{"isAsync":false}},{"name":"../cache","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _slicedToArray = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/slicedToArray\");\n\n  var _classCallCheck = _$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/classCallCheck\");\n\n  var _createClass = _$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/createClass\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n\n  var _includes = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"lodash/includes\"));\n\n  var _repeat = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"lodash/repeat\"));\n\n  var _renamer = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5], \"./lib/renamer\"));\n\n  var _index = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6], \"../index\"));\n\n  var _defaults = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7], \"lodash/defaults\"));\n\n  var _binding = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8], \"./binding\"));\n\n  var _globals = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9], \"globals\"));\n\n  var t = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[10], \"@babel/types\"));\n\n  var _cache = _$$_REQUIRE(_dependencyMap[11], \"../cache\");\n\n  function _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n\n    _getRequireWildcardCache = function _getRequireWildcardCache() {\n      return cache;\n    };\n\n    return cache;\n  }\n\n  function _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n      return obj;\n    }\n\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n      return {\n        default: obj\n      };\n    }\n\n    var cache = _getRequireWildcardCache();\n\n    if (cache && cache.has(obj)) {\n      return cache.get(obj);\n    }\n\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n    for (var key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n        if (desc && (desc.get || desc.set)) {\n          Object.defineProperty(newObj, key, desc);\n        } else {\n          newObj[key] = obj[key];\n        }\n      }\n    }\n\n    newObj.default = obj;\n\n    if (cache) {\n      cache.set(obj, newObj);\n    }\n\n    return newObj;\n  }\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      default: obj\n    };\n  }\n\n  function gatherNodeParts(node, parts) {\n    if (t.isModuleDeclaration(node)) {\n      if (node.source) {\n        gatherNodeParts(node.source, parts);\n      } else if (node.specifiers && node.specifiers.length) {\n        for (var _iterator = node.specifiers, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"]();;) {\n          var _ref;\n\n          if (_isArray) {\n            if (_i >= _iterator.length) break;\n            _ref = _iterator[_i++];\n          } else {\n            _i = _iterator.next();\n            if (_i.done) break;\n            _ref = _i.value;\n          }\n\n          var _specifier = _ref;\n          gatherNodeParts(_specifier, parts);\n        }\n      } else if (node.declaration) {\n        gatherNodeParts(node.declaration, parts);\n      }\n    } else if (t.isModuleSpecifier(node)) {\n      gatherNodeParts(node.local, parts);\n    } else if (t.isMemberExpression(node)) {\n      gatherNodeParts(node.object, parts);\n      gatherNodeParts(node.property, parts);\n    } else if (t.isIdentifier(node)) {\n      parts.push(node.name);\n    } else if (t.isLiteral(node)) {\n      parts.push(node.value);\n    } else if (t.isCallExpression(node)) {\n      gatherNodeParts(node.callee, parts);\n    } else if (t.isObjectExpression(node) || t.isObjectPattern(node)) {\n      for (var _iterator2 = node.properties, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"]();;) {\n        var _ref2;\n\n        if (_isArray2) {\n          if (_i2 >= _iterator2.length) break;\n          _ref2 = _iterator2[_i2++];\n        } else {\n          _i2 = _iterator2.next();\n          if (_i2.done) break;\n          _ref2 = _i2.value;\n        }\n\n        var _prop = _ref2;\n        gatherNodeParts(_prop.key || _prop.argument, parts);\n      }\n    } else if (t.isPrivateName(node)) {\n      gatherNodeParts(node.id, parts);\n    } else if (t.isThisExpression(node)) {\n      parts.push(\"this\");\n    } else if (t.isSuper(node)) {\n      parts.push(\"super\");\n    }\n  }\n\n  var collectorVisitor = {\n    For: function For(path) {\n      for (var _iterator3 = t.FOR_INIT_KEYS, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"]();;) {\n        var _ref3;\n\n        if (_isArray3) {\n          if (_i3 >= _iterator3.length) break;\n          _ref3 = _iterator3[_i3++];\n        } else {\n          _i3 = _iterator3.next();\n          if (_i3.done) break;\n          _ref3 = _i3.value;\n        }\n\n        var _key = _ref3;\n\n        var _declar = path.get(_key);\n\n        if (_declar.isVar()) {\n          var parentScope = path.scope.getFunctionParent() || path.scope.getProgramParent();\n          parentScope.registerBinding(\"var\", _declar);\n        }\n      }\n    },\n    Declaration: function Declaration(path) {\n      if (path.isBlockScoped()) return;\n\n      if (path.isExportDeclaration() && path.get(\"declaration\").isDeclaration()) {\n        return;\n      }\n\n      var parent = path.scope.getFunctionParent() || path.scope.getProgramParent();\n      parent.registerDeclaration(path);\n    },\n    ReferencedIdentifier: function ReferencedIdentifier(path, state) {\n      state.references.push(path);\n    },\n    ForXStatement: function ForXStatement(path, state) {\n      var left = path.get(\"left\");\n\n      if (left.isPattern() || left.isIdentifier()) {\n        state.constantViolations.push(path);\n      }\n    },\n    ExportDeclaration: {\n      exit: function exit(path) {\n        var node = path.node,\n            scope = path.scope;\n        var declar = node.declaration;\n\n        if (t.isClassDeclaration(declar) || t.isFunctionDeclaration(declar)) {\n          var id = declar.id;\n          if (!id) return;\n          var binding = scope.getBinding(id.name);\n          if (binding) binding.reference(path);\n        } else if (t.isVariableDeclaration(declar)) {\n          for (var _iterator4 = declar.declarations, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"]();;) {\n            var _ref4;\n\n            if (_isArray4) {\n              if (_i4 >= _iterator4.length) break;\n              _ref4 = _iterator4[_i4++];\n            } else {\n              _i4 = _iterator4.next();\n              if (_i4.done) break;\n              _ref4 = _i4.value;\n            }\n\n            var _decl = _ref4;\n\n            for (var _i5 = 0, _Object$keys = Object.keys(t.getBindingIdentifiers(_decl)); _i5 < _Object$keys.length; _i5++) {\n              var name = _Object$keys[_i5];\n\n              var _binding2 = scope.getBinding(name);\n\n              if (_binding2) _binding2.reference(path);\n            }\n          }\n        }\n      }\n    },\n    LabeledStatement: function LabeledStatement(path) {\n      path.scope.getProgramParent().addGlobal(path.node);\n      path.scope.getBlockParent().registerDeclaration(path);\n    },\n    AssignmentExpression: function AssignmentExpression(path, state) {\n      state.assignments.push(path);\n    },\n    UpdateExpression: function UpdateExpression(path, state) {\n      state.constantViolations.push(path);\n    },\n    UnaryExpression: function UnaryExpression(path, state) {\n      if (path.node.operator === \"delete\") {\n        state.constantViolations.push(path);\n      }\n    },\n    BlockScoped: function BlockScoped(path) {\n      var scope = path.scope;\n      if (scope.path === path) scope = scope.parent;\n      scope.getBlockParent().registerDeclaration(path);\n    },\n    ClassDeclaration: function ClassDeclaration(path) {\n      var id = path.node.id;\n      if (!id) return;\n      var name = id.name;\n      path.scope.bindings[name] = path.scope.getBinding(name);\n    },\n    Block: function Block(path) {\n      var paths = path.get(\"body\");\n\n      for (var _iterator5 = paths, _isArray5 = Array.isArray(_iterator5), _i6 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"]();;) {\n        var _ref5;\n\n        if (_isArray5) {\n          if (_i6 >= _iterator5.length) break;\n          _ref5 = _iterator5[_i6++];\n        } else {\n          _i6 = _iterator5.next();\n          if (_i6.done) break;\n          _ref5 = _i6.value;\n        }\n\n        var _bodyPath = _ref5;\n\n        if (_bodyPath.isFunctionDeclaration()) {\n          path.scope.getBlockParent().registerDeclaration(_bodyPath);\n        }\n      }\n    }\n  };\n  var uid = 0;\n\n  var Scope = function () {\n    function Scope(path) {\n      _classCallCheck(this, Scope);\n\n      var node = path.node;\n\n      var cached = _cache.scope.get(node);\n\n      if (cached && cached.path === path) {\n        return cached;\n      }\n\n      _cache.scope.set(node, this);\n\n      this.uid = uid++;\n      this.block = node;\n      this.path = path;\n      this.labels = new Map();\n    }\n\n    _createClass(Scope, [{\n      key: \"traverse\",\n      value: function traverse(node, opts, state) {\n        (0, _index.default)(node, opts, this, state, this.path);\n      }\n    }, {\n      key: \"generateDeclaredUidIdentifier\",\n      value: function generateDeclaredUidIdentifier(name) {\n        var id = this.generateUidIdentifier(name);\n        this.push({\n          id: id\n        });\n        return t.cloneNode(id);\n      }\n    }, {\n      key: \"generateUidIdentifier\",\n      value: function generateUidIdentifier(name) {\n        return t.identifier(this.generateUid(name));\n      }\n    }, {\n      key: \"generateUid\",\n      value: function generateUid() {\n        var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"temp\";\n        name = t.toIdentifier(name).replace(/^_+/, \"\").replace(/[0-9]+$/g, \"\");\n        var uid;\n        var i = 0;\n\n        do {\n          uid = this._generateUid(name, i);\n          i++;\n        } while (this.hasLabel(uid) || this.hasBinding(uid) || this.hasGlobal(uid) || this.hasReference(uid));\n\n        var program = this.getProgramParent();\n        program.references[uid] = true;\n        program.uids[uid] = true;\n        return uid;\n      }\n    }, {\n      key: \"_generateUid\",\n      value: function _generateUid(name, i) {\n        var id = name;\n        if (i > 1) id += i;\n        return \"_\" + id;\n      }\n    }, {\n      key: \"generateUidBasedOnNode\",\n      value: function generateUidBasedOnNode(parent, defaultName) {\n        var node = parent;\n\n        if (t.isAssignmentExpression(parent)) {\n          node = parent.left;\n        } else if (t.isVariableDeclarator(parent)) {\n          node = parent.id;\n        } else if (t.isObjectProperty(node) || t.isObjectMethod(node)) {\n          node = node.key;\n        }\n\n        var parts = [];\n        gatherNodeParts(node, parts);\n        var id = parts.join(\"$\");\n        id = id.replace(/^_/, \"\") || defaultName || \"ref\";\n        return this.generateUid(id.slice(0, 20));\n      }\n    }, {\n      key: \"generateUidIdentifierBasedOnNode\",\n      value: function generateUidIdentifierBasedOnNode(parent, defaultName) {\n        return t.identifier(this.generateUidBasedOnNode(parent, defaultName));\n      }\n    }, {\n      key: \"isStatic\",\n      value: function isStatic(node) {\n        if (t.isThisExpression(node) || t.isSuper(node)) {\n          return true;\n        }\n\n        if (t.isIdentifier(node)) {\n          var binding = this.getBinding(node.name);\n\n          if (binding) {\n            return binding.constant;\n          } else {\n            return this.hasBinding(node.name);\n          }\n        }\n\n        return false;\n      }\n    }, {\n      key: \"maybeGenerateMemoised\",\n      value: function maybeGenerateMemoised(node, dontPush) {\n        if (this.isStatic(node)) {\n          return null;\n        } else {\n          var id = this.generateUidIdentifierBasedOnNode(node);\n\n          if (!dontPush) {\n            this.push({\n              id: id\n            });\n            return t.cloneNode(id);\n          }\n\n          return id;\n        }\n      }\n    }, {\n      key: \"checkBlockScopedCollisions\",\n      value: function checkBlockScopedCollisions(local, kind, name, id) {\n        if (kind === \"param\") return;\n        if (local.kind === \"local\") return;\n        var duplicate = kind === \"let\" || local.kind === \"let\" || local.kind === \"const\" || local.kind === \"module\" || local.kind === \"param\" && (kind === \"let\" || kind === \"const\");\n\n        if (duplicate) {\n          throw this.hub.buildError(id, \"Duplicate declaration \\\"\" + name + \"\\\"\", TypeError);\n        }\n      }\n    }, {\n      key: \"rename\",\n      value: function rename(oldName, newName, block) {\n        var binding = this.getBinding(oldName);\n\n        if (binding) {\n          newName = newName || this.generateUidIdentifier(oldName).name;\n          return new _renamer.default(binding, oldName, newName).rename(block);\n        }\n      }\n    }, {\n      key: \"_renameFromMap\",\n      value: function _renameFromMap(map, oldName, newName, value) {\n        if (map[oldName]) {\n          map[newName] = value;\n          map[oldName] = null;\n        }\n      }\n    }, {\n      key: \"dump\",\n      value: function dump() {\n        var sep = (0, _repeat.default)(\"-\", 60);\n        console.log(sep);\n        var scope = this;\n\n        do {\n          console.log(\"#\", scope.block.type);\n\n          for (var _i7 = 0, _Object$keys2 = Object.keys(scope.bindings); _i7 < _Object$keys2.length; _i7++) {\n            var name = _Object$keys2[_i7];\n            var binding = scope.bindings[name];\n            console.log(\" -\", name, {\n              constant: binding.constant,\n              references: binding.references,\n              violations: binding.constantViolations.length,\n              kind: binding.kind\n            });\n          }\n        } while (scope = scope.parent);\n\n        console.log(sep);\n      }\n    }, {\n      key: \"toArray\",\n      value: function toArray(node, i) {\n        if (t.isIdentifier(node)) {\n          var binding = this.getBinding(node.name);\n\n          if (binding && binding.constant && binding.path.isGenericType(\"Array\")) {\n            return node;\n          }\n        }\n\n        if (t.isArrayExpression(node)) {\n          return node;\n        }\n\n        if (t.isIdentifier(node, {\n          name: \"arguments\"\n        })) {\n          return t.callExpression(t.memberExpression(t.memberExpression(t.memberExpression(t.identifier(\"Array\"), t.identifier(\"prototype\")), t.identifier(\"slice\")), t.identifier(\"call\")), [node]);\n        }\n\n        var helperName;\n        var args = [node];\n\n        if (i === true) {\n          helperName = \"toConsumableArray\";\n        } else if (i) {\n          args.push(t.numericLiteral(i));\n          helperName = \"slicedToArray\";\n        } else {\n          helperName = \"toArray\";\n        }\n\n        return t.callExpression(this.hub.addHelper(helperName), args);\n      }\n    }, {\n      key: \"hasLabel\",\n      value: function hasLabel(name) {\n        return !!this.getLabel(name);\n      }\n    }, {\n      key: \"getLabel\",\n      value: function getLabel(name) {\n        return this.labels.get(name);\n      }\n    }, {\n      key: \"registerLabel\",\n      value: function registerLabel(path) {\n        this.labels.set(path.node.label.name, path);\n      }\n    }, {\n      key: \"registerDeclaration\",\n      value: function registerDeclaration(path) {\n        if (path.isLabeledStatement()) {\n          this.registerLabel(path);\n        } else if (path.isFunctionDeclaration()) {\n          this.registerBinding(\"hoisted\", path.get(\"id\"), path);\n        } else if (path.isVariableDeclaration()) {\n          var declarations = path.get(\"declarations\");\n\n          for (var _iterator6 = declarations, _isArray6 = Array.isArray(_iterator6), _i8 = 0, _iterator6 = _isArray6 ? _iterator6 : _iterator6[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"]();;) {\n            var _ref6;\n\n            if (_isArray6) {\n              if (_i8 >= _iterator6.length) break;\n              _ref6 = _iterator6[_i8++];\n            } else {\n              _i8 = _iterator6.next();\n              if (_i8.done) break;\n              _ref6 = _i8.value;\n            }\n\n            var _declar2 = _ref6;\n            this.registerBinding(path.node.kind, _declar2);\n          }\n        } else if (path.isClassDeclaration()) {\n          this.registerBinding(\"let\", path);\n        } else if (path.isImportDeclaration()) {\n          var specifiers = path.get(\"specifiers\");\n\n          for (var _iterator7 = specifiers, _isArray7 = Array.isArray(_iterator7), _i9 = 0, _iterator7 = _isArray7 ? _iterator7 : _iterator7[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"]();;) {\n            var _ref7;\n\n            if (_isArray7) {\n              if (_i9 >= _iterator7.length) break;\n              _ref7 = _iterator7[_i9++];\n            } else {\n              _i9 = _iterator7.next();\n              if (_i9.done) break;\n              _ref7 = _i9.value;\n            }\n\n            var _specifier2 = _ref7;\n            this.registerBinding(\"module\", _specifier2);\n          }\n        } else if (path.isExportDeclaration()) {\n          var _declar3 = path.get(\"declaration\");\n\n          if (_declar3.isClassDeclaration() || _declar3.isFunctionDeclaration() || _declar3.isVariableDeclaration()) {\n            this.registerDeclaration(_declar3);\n          }\n        } else {\n          this.registerBinding(\"unknown\", path);\n        }\n      }\n    }, {\n      key: \"buildUndefinedNode\",\n      value: function buildUndefinedNode() {\n        return t.unaryExpression(\"void\", t.numericLiteral(0), true);\n      }\n    }, {\n      key: \"registerConstantViolation\",\n      value: function registerConstantViolation(path) {\n        var ids = path.getBindingIdentifiers();\n\n        for (var _i10 = 0, _Object$keys3 = Object.keys(ids); _i10 < _Object$keys3.length; _i10++) {\n          var name = _Object$keys3[_i10];\n          var binding = this.getBinding(name);\n          if (binding) binding.reassign(path);\n        }\n      }\n    }, {\n      key: \"registerBinding\",\n      value: function registerBinding(kind, path) {\n        var bindingPath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : path;\n        if (!kind) throw new ReferenceError(\"no `kind`\");\n\n        if (path.isVariableDeclaration()) {\n          var declarators = path.get(\"declarations\");\n\n          for (var _iterator8 = declarators, _isArray8 = Array.isArray(_iterator8), _i11 = 0, _iterator8 = _isArray8 ? _iterator8 : _iterator8[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"]();;) {\n            var _ref8;\n\n            if (_isArray8) {\n              if (_i11 >= _iterator8.length) break;\n              _ref8 = _iterator8[_i11++];\n            } else {\n              _i11 = _iterator8.next();\n              if (_i11.done) break;\n              _ref8 = _i11.value;\n            }\n\n            var _declar4 = _ref8;\n            this.registerBinding(kind, _declar4);\n          }\n\n          return;\n        }\n\n        var parent = this.getProgramParent();\n        var ids = path.getOuterBindingIdentifiers(true);\n\n        for (var _i12 = 0, _Object$keys4 = Object.keys(ids); _i12 < _Object$keys4.length; _i12++) {\n          var name = _Object$keys4[_i12];\n\n          for (var _iterator9 = ids[name], _isArray9 = Array.isArray(_iterator9), _i13 = 0, _iterator9 = _isArray9 ? _iterator9 : _iterator9[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"]();;) {\n            var _ref9;\n\n            if (_isArray9) {\n              if (_i13 >= _iterator9.length) break;\n              _ref9 = _iterator9[_i13++];\n            } else {\n              _i13 = _iterator9.next();\n              if (_i13.done) break;\n              _ref9 = _i13.value;\n            }\n\n            var _id = _ref9;\n\n            var _local = this.getOwnBinding(name);\n\n            if (_local) {\n              if (_local.identifier === _id) continue;\n              this.checkBlockScopedCollisions(_local, kind, name, _id);\n            }\n\n            parent.references[name] = true;\n\n            if (_local) {\n              this.registerConstantViolation(bindingPath);\n            } else {\n              this.bindings[name] = new _binding.default({\n                identifier: _id,\n                scope: this,\n                path: bindingPath,\n                kind: kind\n              });\n            }\n          }\n        }\n      }\n    }, {\n      key: \"addGlobal\",\n      value: function addGlobal(node) {\n        this.globals[node.name] = node;\n      }\n    }, {\n      key: \"hasUid\",\n      value: function hasUid(name) {\n        var scope = this;\n\n        do {\n          if (scope.uids[name]) return true;\n        } while (scope = scope.parent);\n\n        return false;\n      }\n    }, {\n      key: \"hasGlobal\",\n      value: function hasGlobal(name) {\n        var scope = this;\n\n        do {\n          if (scope.globals[name]) return true;\n        } while (scope = scope.parent);\n\n        return false;\n      }\n    }, {\n      key: \"hasReference\",\n      value: function hasReference(name) {\n        var scope = this;\n\n        do {\n          if (scope.references[name]) return true;\n        } while (scope = scope.parent);\n\n        return false;\n      }\n    }, {\n      key: \"isPure\",\n      value: function isPure(node, constantsOnly) {\n        if (t.isIdentifier(node)) {\n          var binding = this.getBinding(node.name);\n          if (!binding) return false;\n          if (constantsOnly) return binding.constant;\n          return true;\n        } else if (t.isClass(node)) {\n          if (node.superClass && !this.isPure(node.superClass, constantsOnly)) {\n            return false;\n          }\n\n          return this.isPure(node.body, constantsOnly);\n        } else if (t.isClassBody(node)) {\n          for (var _iterator10 = node.body, _isArray10 = Array.isArray(_iterator10), _i14 = 0, _iterator10 = _isArray10 ? _iterator10 : _iterator10[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"]();;) {\n            var _ref10;\n\n            if (_isArray10) {\n              if (_i14 >= _iterator10.length) break;\n              _ref10 = _iterator10[_i14++];\n            } else {\n              _i14 = _iterator10.next();\n              if (_i14.done) break;\n              _ref10 = _i14.value;\n            }\n\n            var _method = _ref10;\n            if (!this.isPure(_method, constantsOnly)) return false;\n          }\n\n          return true;\n        } else if (t.isBinary(node)) {\n          return this.isPure(node.left, constantsOnly) && this.isPure(node.right, constantsOnly);\n        } else if (t.isArrayExpression(node)) {\n          for (var _iterator11 = node.elements, _isArray11 = Array.isArray(_iterator11), _i15 = 0, _iterator11 = _isArray11 ? _iterator11 : _iterator11[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"]();;) {\n            var _ref11;\n\n            if (_isArray11) {\n              if (_i15 >= _iterator11.length) break;\n              _ref11 = _iterator11[_i15++];\n            } else {\n              _i15 = _iterator11.next();\n              if (_i15.done) break;\n              _ref11 = _i15.value;\n            }\n\n            var _elem = _ref11;\n            if (!this.isPure(_elem, constantsOnly)) return false;\n          }\n\n          return true;\n        } else if (t.isObjectExpression(node)) {\n          for (var _iterator12 = node.properties, _isArray12 = Array.isArray(_iterator12), _i16 = 0, _iterator12 = _isArray12 ? _iterator12 : _iterator12[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"]();;) {\n            var _ref12;\n\n            if (_isArray12) {\n              if (_i16 >= _iterator12.length) break;\n              _ref12 = _iterator12[_i16++];\n            } else {\n              _i16 = _iterator12.next();\n              if (_i16.done) break;\n              _ref12 = _i16.value;\n            }\n\n            var _prop2 = _ref12;\n            if (!this.isPure(_prop2, constantsOnly)) return false;\n          }\n\n          return true;\n        } else if (t.isClassMethod(node)) {\n          if (node.computed && !this.isPure(node.key, constantsOnly)) return false;\n          if (node.kind === \"get\" || node.kind === \"set\") return false;\n          return true;\n        } else if (t.isProperty(node)) {\n          if (node.computed && !this.isPure(node.key, constantsOnly)) return false;\n          return this.isPure(node.value, constantsOnly);\n        } else if (t.isUnaryExpression(node)) {\n          return this.isPure(node.argument, constantsOnly);\n        } else if (t.isTaggedTemplateExpression(node)) {\n          return t.matchesPattern(node.tag, \"String.raw\") && !this.hasBinding(\"String\", true) && this.isPure(node.quasi, constantsOnly);\n        } else if (t.isTemplateLiteral(node)) {\n          for (var _iterator13 = node.expressions, _isArray13 = Array.isArray(_iterator13), _i17 = 0, _iterator13 = _isArray13 ? _iterator13 : _iterator13[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"]();;) {\n            var _ref13;\n\n            if (_isArray13) {\n              if (_i17 >= _iterator13.length) break;\n              _ref13 = _iterator13[_i17++];\n            } else {\n              _i17 = _iterator13.next();\n              if (_i17.done) break;\n              _ref13 = _i17.value;\n            }\n\n            var _expression = _ref13;\n            if (!this.isPure(_expression, constantsOnly)) return false;\n          }\n\n          return true;\n        } else {\n          return t.isPureish(node);\n        }\n      }\n    }, {\n      key: \"setData\",\n      value: function setData(key, val) {\n        return this.data[key] = val;\n      }\n    }, {\n      key: \"getData\",\n      value: function getData(key) {\n        var scope = this;\n\n        do {\n          var data = scope.data[key];\n          if (data != null) return data;\n        } while (scope = scope.parent);\n      }\n    }, {\n      key: \"removeData\",\n      value: function removeData(key) {\n        var scope = this;\n\n        do {\n          var data = scope.data[key];\n          if (data != null) scope.data[key] = null;\n        } while (scope = scope.parent);\n      }\n    }, {\n      key: \"init\",\n      value: function init() {\n        if (!this.references) this.crawl();\n      }\n    }, {\n      key: \"crawl\",\n      value: function crawl() {\n        var path = this.path;\n        this.references = Object.create(null);\n        this.bindings = Object.create(null);\n        this.globals = Object.create(null);\n        this.uids = Object.create(null);\n        this.data = Object.create(null);\n\n        if (path.isLoop()) {\n          for (var _iterator14 = t.FOR_INIT_KEYS, _isArray14 = Array.isArray(_iterator14), _i18 = 0, _iterator14 = _isArray14 ? _iterator14 : _iterator14[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"]();;) {\n            var _ref14;\n\n            if (_isArray14) {\n              if (_i18 >= _iterator14.length) break;\n              _ref14 = _iterator14[_i18++];\n            } else {\n              _i18 = _iterator14.next();\n              if (_i18.done) break;\n              _ref14 = _i18.value;\n            }\n\n            var _key2 = _ref14;\n\n            var _node = path.get(_key2);\n\n            if (_node.isBlockScoped()) this.registerBinding(_node.node.kind, _node);\n          }\n        }\n\n        if (path.isFunctionExpression() && path.has(\"id\")) {\n          if (!path.get(\"id\").node[t.NOT_LOCAL_BINDING]) {\n            this.registerBinding(\"local\", path.get(\"id\"), path);\n          }\n        }\n\n        if (path.isClassExpression() && path.has(\"id\")) {\n          if (!path.get(\"id\").node[t.NOT_LOCAL_BINDING]) {\n            this.registerBinding(\"local\", path);\n          }\n        }\n\n        if (path.isFunction()) {\n          var params = path.get(\"params\");\n\n          for (var _iterator15 = params, _isArray15 = Array.isArray(_iterator15), _i19 = 0, _iterator15 = _isArray15 ? _iterator15 : _iterator15[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"]();;) {\n            var _ref15;\n\n            if (_isArray15) {\n              if (_i19 >= _iterator15.length) break;\n              _ref15 = _iterator15[_i19++];\n            } else {\n              _i19 = _iterator15.next();\n              if (_i19.done) break;\n              _ref15 = _i19.value;\n            }\n\n            var _param = _ref15;\n            this.registerBinding(\"param\", _param);\n          }\n        }\n\n        if (path.isCatchClause()) {\n          this.registerBinding(\"let\", path);\n        }\n\n        var parent = this.getProgramParent();\n        if (parent.crawling) return;\n        var state = {\n          references: [],\n          constantViolations: [],\n          assignments: []\n        };\n        this.crawling = true;\n        path.traverse(collectorVisitor, state);\n        this.crawling = false;\n\n        for (var _iterator16 = state.assignments, _isArray16 = Array.isArray(_iterator16), _i20 = 0, _iterator16 = _isArray16 ? _iterator16 : _iterator16[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"]();;) {\n          var _ref16;\n\n          if (_isArray16) {\n            if (_i20 >= _iterator16.length) break;\n            _ref16 = _iterator16[_i20++];\n          } else {\n            _i20 = _iterator16.next();\n            if (_i20.done) break;\n            _ref16 = _i20.value;\n          }\n\n          var _path3 = _ref16;\n\n          var _ids = _path3.getBindingIdentifiers();\n\n          var _programParent = void 0;\n\n          for (var _i23 = 0, _Object$keys5 = Object.keys(_ids); _i23 < _Object$keys5.length; _i23++) {\n            var name = _Object$keys5[_i23];\n            if (_path3.scope.getBinding(name)) continue;\n            _programParent = _programParent || _path3.scope.getProgramParent();\n\n            _programParent.addGlobal(_ids[name]);\n          }\n\n          _path3.scope.registerConstantViolation(_path3);\n        }\n\n        for (var _iterator17 = state.references, _isArray17 = Array.isArray(_iterator17), _i21 = 0, _iterator17 = _isArray17 ? _iterator17 : _iterator17[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"]();;) {\n          var _ref17;\n\n          if (_isArray17) {\n            if (_i21 >= _iterator17.length) break;\n            _ref17 = _iterator17[_i21++];\n          } else {\n            _i21 = _iterator17.next();\n            if (_i21.done) break;\n            _ref17 = _i21.value;\n          }\n\n          var _ref19 = _ref17;\n\n          var _binding3 = _ref19.scope.getBinding(_ref19.node.name);\n\n          if (_binding3) {\n            _binding3.reference(_ref19);\n          } else {\n            _ref19.scope.getProgramParent().addGlobal(_ref19.node);\n          }\n        }\n\n        for (var _iterator18 = state.constantViolations, _isArray18 = Array.isArray(_iterator18), _i22 = 0, _iterator18 = _isArray18 ? _iterator18 : _iterator18[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"]();;) {\n          var _ref18;\n\n          if (_isArray18) {\n            if (_i22 >= _iterator18.length) break;\n            _ref18 = _iterator18[_i22++];\n          } else {\n            _i22 = _iterator18.next();\n            if (_i22.done) break;\n            _ref18 = _i22.value;\n          }\n\n          var _path4 = _ref18;\n\n          _path4.scope.registerConstantViolation(_path4);\n        }\n      }\n    }, {\n      key: \"push\",\n      value: function push(opts) {\n        var path = this.path;\n\n        if (!path.isBlockStatement() && !path.isProgram()) {\n          path = this.getBlockParent().path;\n        }\n\n        if (path.isSwitchStatement()) {\n          path = (this.getFunctionParent() || this.getProgramParent()).path;\n        }\n\n        if (path.isLoop() || path.isCatchClause() || path.isFunction()) {\n          path.ensureBlock();\n          path = path.get(\"body\");\n        }\n\n        var unique = opts.unique;\n        var kind = opts.kind || \"var\";\n        var blockHoist = opts._blockHoist == null ? 2 : opts._blockHoist;\n        var dataKey = \"declaration:\" + kind + \":\" + blockHoist;\n        var declarPath = !unique && path.getData(dataKey);\n\n        if (!declarPath) {\n          var declar = t.variableDeclaration(kind, []);\n          declar._blockHoist = blockHoist;\n\n          var _path$unshiftContaine = path.unshiftContainer(\"body\", [declar]);\n\n          var _path$unshiftContaine2 = _slicedToArray(_path$unshiftContaine, 1);\n\n          declarPath = _path$unshiftContaine2[0];\n          if (!unique) path.setData(dataKey, declarPath);\n        }\n\n        var declarator = t.variableDeclarator(opts.id, opts.init);\n        declarPath.node.declarations.push(declarator);\n        this.registerBinding(kind, declarPath.get(\"declarations\").pop());\n      }\n    }, {\n      key: \"getProgramParent\",\n      value: function getProgramParent() {\n        var scope = this;\n\n        do {\n          if (scope.path.isProgram()) {\n            return scope;\n          }\n        } while (scope = scope.parent);\n\n        throw new Error(\"Couldn't find a Program\");\n      }\n    }, {\n      key: \"getFunctionParent\",\n      value: function getFunctionParent() {\n        var scope = this;\n\n        do {\n          if (scope.path.isFunctionParent()) {\n            return scope;\n          }\n        } while (scope = scope.parent);\n\n        return null;\n      }\n    }, {\n      key: \"getBlockParent\",\n      value: function getBlockParent() {\n        var scope = this;\n\n        do {\n          if (scope.path.isBlockParent()) {\n            return scope;\n          }\n        } while (scope = scope.parent);\n\n        throw new Error(\"We couldn't find a BlockStatement, For, Switch, Function, Loop or Program...\");\n      }\n    }, {\n      key: \"getAllBindings\",\n      value: function getAllBindings() {\n        var ids = Object.create(null);\n        var scope = this;\n\n        do {\n          (0, _defaults.default)(ids, scope.bindings);\n          scope = scope.parent;\n        } while (scope);\n\n        return ids;\n      }\n    }, {\n      key: \"getAllBindingsOfKind\",\n      value: function getAllBindingsOfKind() {\n        var ids = Object.create(null);\n\n        for (var _iterator19 = arguments, _isArray19 = Array.isArray(_iterator19), _i24 = 0, _iterator19 = _isArray19 ? _iterator19 : _iterator19[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"]();;) {\n          var _ref20;\n\n          if (_isArray19) {\n            if (_i24 >= _iterator19.length) break;\n            _ref20 = _iterator19[_i24++];\n          } else {\n            _i24 = _iterator19.next();\n            if (_i24.done) break;\n            _ref20 = _i24.value;\n          }\n\n          var _kind = _ref20;\n\n          var _scope = this;\n\n          do {\n            for (var _i25 = 0, _Object$keys6 = Object.keys(_scope.bindings); _i25 < _Object$keys6.length; _i25++) {\n              var name = _Object$keys6[_i25];\n              var binding = _scope.bindings[name];\n              if (binding.kind === _kind) ids[name] = binding;\n            }\n\n            _scope = _scope.parent;\n          } while (_scope);\n        }\n\n        return ids;\n      }\n    }, {\n      key: \"bindingIdentifierEquals\",\n      value: function bindingIdentifierEquals(name, node) {\n        return this.getBindingIdentifier(name) === node;\n      }\n    }, {\n      key: \"getBinding\",\n      value: function getBinding(name) {\n        var scope = this;\n\n        do {\n          var binding = scope.getOwnBinding(name);\n          if (binding) return binding;\n        } while (scope = scope.parent);\n      }\n    }, {\n      key: \"getOwnBinding\",\n      value: function getOwnBinding(name) {\n        return this.bindings[name];\n      }\n    }, {\n      key: \"getBindingIdentifier\",\n      value: function getBindingIdentifier(name) {\n        var info = this.getBinding(name);\n        return info && info.identifier;\n      }\n    }, {\n      key: \"getOwnBindingIdentifier\",\n      value: function getOwnBindingIdentifier(name) {\n        var binding = this.bindings[name];\n        return binding && binding.identifier;\n      }\n    }, {\n      key: \"hasOwnBinding\",\n      value: function hasOwnBinding(name) {\n        return !!this.getOwnBinding(name);\n      }\n    }, {\n      key: \"hasBinding\",\n      value: function hasBinding(name, noGlobals) {\n        if (!name) return false;\n        if (this.hasOwnBinding(name)) return true;\n        if (this.parentHasBinding(name, noGlobals)) return true;\n        if (this.hasUid(name)) return true;\n        if (!noGlobals && (0, _includes.default)(Scope.globals, name)) return true;\n        if (!noGlobals && (0, _includes.default)(Scope.contextVariables, name)) return true;\n        return false;\n      }\n    }, {\n      key: \"parentHasBinding\",\n      value: function parentHasBinding(name, noGlobals) {\n        return this.parent && this.parent.hasBinding(name, noGlobals);\n      }\n    }, {\n      key: \"moveBindingTo\",\n      value: function moveBindingTo(name, scope) {\n        var info = this.getBinding(name);\n\n        if (info) {\n          info.scope.removeOwnBinding(name);\n          info.scope = scope;\n          scope.bindings[name] = info;\n        }\n      }\n    }, {\n      key: \"removeOwnBinding\",\n      value: function removeOwnBinding(name) {\n        delete this.bindings[name];\n      }\n    }, {\n      key: \"removeBinding\",\n      value: function removeBinding(name) {\n        var info = this.getBinding(name);\n\n        if (info) {\n          info.scope.removeOwnBinding(name);\n        }\n\n        var scope = this;\n\n        do {\n          if (scope.uids[name]) {\n            scope.uids[name] = false;\n          }\n        } while (scope = scope.parent);\n      }\n    }, {\n      key: \"parent\",\n      get: function get() {\n        var parent = this.path.findParent(function (p) {\n          return p.isScope();\n        });\n        return parent && parent.scope;\n      }\n    }, {\n      key: \"parentBlock\",\n      get: function get() {\n        return this.path.parent;\n      }\n    }, {\n      key: \"hub\",\n      get: function get() {\n        return this.path.hub;\n      }\n    }]);\n\n    return Scope;\n  }();\n\n  exports.default = Scope;\n  Scope.globals = Object.keys(_globals.default.builtin);\n  Scope.contextVariables = [\"arguments\", \"undefined\", \"Infinity\", \"NaN\"];\n});","map":[[2,0,1,0],[10,0,3,0,"Object"],[10,2,3,0,"Object"],[10,8,3,6],[10,9,3,7,"defineProperty"],[10,23,3,0],[10,24,3,22,"exports"],[10,31,3,0],[10,33,3,31],[10,45,3,0],[10,47,3,45],[11,0,4,2,"value"],[11,4,4,2,"value"],[11,9,4,7],[11,11,4,9],[12,0,3,45],[12,3,3,0],[13,0,6,0,"exports"],[13,2,6,0,"exports"],[13,9,6,7],[13,10,6,8,"default"],[13,17,6,0],[13,20,6,18],[13,25,6,23],[13,26,6,0],[15,0,8,0],[15,6,8,4,"_includes"],[15,15,8,13],[15,18,8,16,"_interopRequireDefault"],[15,40,8,38],[15,41,8,39,"require"],[15,52,8,46],[15,90,8,38],[15,91,8,0],[17,0,10,0],[17,6,10,4,"_repeat"],[17,13,10,11],[17,16,10,14,"_interopRequireDefault"],[17,38,10,36],[17,39,10,37,"require"],[17,50,10,44],[17,86,10,36],[17,87,10,0],[19,0,12,0],[19,6,12,4,"_renamer"],[19,14,12,12],[19,17,12,15,"_interopRequireDefault"],[19,39,12,37],[19,40,12,38,"require"],[19,51,12,45],[19,87,12,37],[19,88,12,0],[21,0,14,0],[21,6,14,4,"_index"],[21,12,14,10],[21,15,14,13,"_interopRequireDefault"],[21,37,14,35],[21,38,14,36,"require"],[21,49,14,43],[21,80,14,35],[21,81,14,0],[23,0,16,0],[23,6,16,4,"_defaults"],[23,15,16,13],[23,18,16,16,"_interopRequireDefault"],[23,40,16,38],[23,41,16,39,"require"],[23,52,16,46],[23,90,16,38],[23,91,16,0],[25,0,18,0],[25,6,18,4,"_binding"],[25,14,18,12],[25,17,18,15,"_interopRequireDefault"],[25,39,18,37],[25,40,18,38,"require"],[25,51,18,45],[25,83,18,37],[25,84,18,0],[27,0,20,0],[27,6,20,4,"_globals"],[27,14,20,12],[27,17,20,15,"_interopRequireDefault"],[27,39,20,37],[27,40,20,38,"require"],[27,51,20,45],[27,81,20,37],[27,82,20,0],[29,0,22,0],[29,6,22,4,"t"],[29,7,22,5],[29,10,22,8,"_interopRequireWildcard"],[29,33,22,31],[29,34,22,32,"require"],[29,45,22,39],[29,81,22,31],[29,82,22,0],[31,0,24,0],[31,6,24,4,"_cache"],[31,12,24,10],[31,15,24,13,"require"],[31,26,24,20],[31,58,24,0],[33,0,26,0],[33,11,26,9,"_getRequireWildcardCache"],[33,35,26,0],[33,38,26,36],[34,0,26,38],[34,8,26,42],[34,15,26,49,"WeakMap"],[34,22,26,42],[34,27,26,61],[34,37,26,38],[34,39,26,73],[34,46,26,80],[34,50,26,73],[35,0,26,86],[35,8,26,90,"cache"],[35,13,26,95],[35,16,26,98],[35,20,26,102,"WeakMap"],[35,27,26,98],[35,29,26,86],[37,0,26,113,"_getRequireWildcardCache"],[37,4,26,113,"_getRequireWildcardCache"],[37,28,26,137],[37,31,26,140],[37,67,26,152],[38,0,26,154],[38,13,26,161,"cache"],[38,18,26,154],[39,0,26,169],[39,5,26,113],[41,0,26,171],[41,11,26,178,"cache"],[41,16,26,171],[42,0,26,186],[44,0,28,0],[44,11,28,9,"_interopRequireWildcard"],[44,34,28,0],[44,35,28,33,"obj"],[44,38,28,0],[44,40,28,38],[45,0,28,40],[45,8,28,44,"obj"],[45,11,28,47],[45,15,28,51,"obj"],[45,18,28,54],[45,19,28,55,"__esModule"],[45,29,28,40],[45,31,28,67],[46,0,28,69],[46,13,28,76,"obj"],[46,16,28,69],[47,0,28,82],[49,0,28,83],[49,8,28,87,"obj"],[49,11,28,90],[49,16,28,95],[49,20,28,87],[49,24,28,103],[49,31,28,110,"obj"],[49,34,28,103],[49,39,28,118],[49,47,28,103],[49,51,28,130],[49,58,28,137,"obj"],[49,61,28,130],[49,66,28,145],[49,76,28,83],[49,78,28,157],[50,0,28,159],[50,13,28,166],[51,0,28,168,"default"],[51,8,28,168,"default"],[51,15,28,175],[51,17,28,177,"obj"],[52,0,28,166],[52,7,28,159],[53,0,28,185],[55,0,28,186],[55,8,28,190,"cache"],[55,13,28,195],[55,16,28,198,"_getRequireWildcardCache"],[55,40,28,222],[55,42,28,186],[57,0,28,226],[57,8,28,230,"cache"],[57,13,28,235],[57,17,28,239,"cache"],[57,22,28,244],[57,23,28,245,"has"],[57,26,28,239],[57,27,28,249,"obj"],[57,30,28,239],[57,31,28,226],[57,33,28,255],[58,0,28,257],[58,13,28,264,"cache"],[58,18,28,269],[58,19,28,270,"get"],[58,22,28,264],[58,23,28,274,"obj"],[58,26,28,264],[58,27,28,257],[59,0,28,281],[61,0,28,282],[61,8,28,286,"newObj"],[61,14,28,292],[61,17,28,295],[61,19,28,282],[62,0,28,299],[62,8,28,303,"hasPropertyDescriptor"],[62,29,28,324],[62,32,28,327,"Object"],[62,38,28,333],[62,39,28,334,"defineProperty"],[62,53,28,327],[62,57,28,352,"Object"],[62,63,28,358],[62,64,28,359,"getOwnPropertyDescriptor"],[62,88,28,299],[64,0,28,385],[64,9,28,390],[64,13,28,394,"key"],[64,16,28,385],[64,20,28,401,"obj"],[64,23,28,385],[64,25,28,406],[65,0,28,408],[65,10,28,412,"Object"],[65,16,28,418],[65,17,28,419,"prototype"],[65,26,28,412],[65,27,28,429,"hasOwnProperty"],[65,41,28,412],[65,42,28,444,"call"],[65,46,28,412],[65,47,28,449,"obj"],[65,50,28,412],[65,52,28,454,"key"],[65,55,28,412],[65,56,28,408],[65,58,28,460],[66,0,28,462],[66,12,28,466,"desc"],[66,16,28,470],[66,19,28,473,"hasPropertyDescriptor"],[66,40,28,494],[66,43,28,497,"Object"],[66,49,28,503],[66,50,28,504,"getOwnPropertyDescriptor"],[66,74,28,497],[66,75,28,529,"obj"],[66,78,28,497],[66,80,28,534,"key"],[66,83,28,497],[66,84,28,494],[66,87,28,541],[66,91,28,462],[68,0,28,547],[68,12,28,551,"desc"],[68,16,28,555],[68,21,28,560,"desc"],[68,25,28,564],[68,26,28,565,"get"],[68,29,28,560],[68,33,28,572,"desc"],[68,37,28,576],[68,38,28,577,"set"],[68,41,28,555],[68,42,28,547],[68,44,28,583],[69,0,28,585,"Object"],[69,10,28,585,"Object"],[69,16,28,591],[69,17,28,592,"defineProperty"],[69,31,28,585],[69,32,28,607,"newObj"],[69,38,28,585],[69,40,28,615,"key"],[69,43,28,585],[69,45,28,620,"desc"],[69,49,28,585],[70,0,28,628],[70,9,28,547],[70,15,28,634],[71,0,28,636,"newObj"],[71,10,28,636,"newObj"],[71,16,28,642],[71,17,28,643,"key"],[71,20,28,642],[71,21,28,636],[71,24,28,650,"obj"],[71,27,28,653],[71,28,28,654,"key"],[71,31,28,653],[71,32,28,636],[72,0,28,661],[73,0,28,663],[74,0,28,665],[76,0,28,666,"newObj"],[76,4,28,666,"newObj"],[76,10,28,672],[76,11,28,673,"default"],[76,18,28,666],[76,21,28,683,"obj"],[76,24,28,666],[78,0,28,688],[78,8,28,692,"cache"],[78,13,28,688],[78,15,28,699],[79,0,28,701,"cache"],[79,6,28,701,"cache"],[79,11,28,706],[79,12,28,707,"set"],[79,15,28,701],[79,16,28,711,"obj"],[79,19,28,701],[79,21,28,716,"newObj"],[79,27,28,701],[80,0,28,726],[82,0,28,727],[82,11,28,734,"newObj"],[82,17,28,727],[83,0,28,743],[85,0,30,0],[85,11,30,9,"_interopRequireDefault"],[85,33,30,0],[85,34,30,32,"obj"],[85,37,30,0],[85,39,30,37],[86,0,30,39],[86,11,30,46,"obj"],[86,14,30,49],[86,18,30,53,"obj"],[86,21,30,56],[86,22,30,57,"__esModule"],[86,32,30,46],[86,35,30,70,"obj"],[86,38,30,46],[86,41,30,76],[87,0,30,78,"default"],[87,6,30,78,"default"],[87,13,30,85],[87,15,30,87,"obj"],[88,0,30,76],[88,5,30,39],[89,0,30,95],[91,0,32,0],[91,11,32,9,"gatherNodeParts"],[91,26,32,0],[91,27,32,25,"node"],[91,31,32,0],[91,33,32,31,"parts"],[91,38,32,0],[91,40,32,38],[92,0,33,2],[92,8,33,6,"t"],[92,9,33,7],[92,10,33,8,"isModuleDeclaration"],[92,29,33,6],[92,30,33,28,"node"],[92,34,33,6],[92,35,33,2],[92,37,33,35],[93,0,34,4],[93,10,34,8,"node"],[93,14,34,12],[93,15,34,13,"source"],[93,21,34,4],[93,23,34,21],[94,0,35,6,"gatherNodeParts"],[94,8,35,6,"gatherNodeParts"],[94,23,35,21],[94,24,35,22,"node"],[94,28,35,26],[94,29,35,27,"source"],[94,35,35,21],[94,37,35,35,"parts"],[94,42,35,21],[94,43,35,6],[95,0,36,5],[95,7,34,4],[95,13,36,11],[95,17,36,15,"node"],[95,21,36,19],[95,22,36,20,"specifiers"],[95,32,36,15],[95,36,36,34,"node"],[95,40,36,38],[95,41,36,39,"specifiers"],[95,51,36,34],[95,52,36,50,"length"],[95,58,36,11],[95,60,36,58],[96,0,37,6],[96,29,37,30,"node"],[96,33,37,34],[96,34,37,35,"specifiers"],[96,44,37,6],[96,204,37,47],[97,0,37,47],[99,0,37,47],[100,0,37,47],[101,0,37,47],[102,0,37,47],[103,0,37,47],[104,0,37,47],[105,0,37,47],[106,0,37,47],[108,0,37,47],[108,14,37,17,"specifier"],[108,24,37,47],[109,0,38,8,"gatherNodeParts"],[109,10,38,8,"gatherNodeParts"],[109,25,38,23],[109,26,38,24,"specifier"],[109,36,38,23],[109,38,38,35,"parts"],[109,43,38,23],[109,44,38,8],[110,0,39,7],[111,0,40,5],[111,7,36,11],[111,13,40,11],[111,17,40,15,"node"],[111,21,40,19],[111,22,40,20,"declaration"],[111,33,40,11],[111,35,40,33],[112,0,41,6,"gatherNodeParts"],[112,8,41,6,"gatherNodeParts"],[112,23,41,21],[112,24,41,22,"node"],[112,28,41,26],[112,29,41,27,"declaration"],[112,40,41,21],[112,42,41,40,"parts"],[112,47,41,21],[112,48,41,6],[113,0,42,5],[114,0,43,3],[114,5,33,2],[114,11,43,9],[114,15,43,13,"t"],[114,16,43,14],[114,17,43,15,"isModuleSpecifier"],[114,34,43,13],[114,35,43,33,"node"],[114,39,43,13],[114,40,43,9],[114,42,43,40],[115,0,44,4,"gatherNodeParts"],[115,6,44,4,"gatherNodeParts"],[115,21,44,19],[115,22,44,20,"node"],[115,26,44,24],[115,27,44,25,"local"],[115,32,44,19],[115,34,44,32,"parts"],[115,39,44,19],[115,40,44,4],[116,0,45,3],[116,5,43,9],[116,11,45,9],[116,15,45,13,"t"],[116,16,45,14],[116,17,45,15,"isMemberExpression"],[116,35,45,13],[116,36,45,34,"node"],[116,40,45,13],[116,41,45,9],[116,43,45,41],[117,0,46,4,"gatherNodeParts"],[117,6,46,4,"gatherNodeParts"],[117,21,46,19],[117,22,46,20,"node"],[117,26,46,24],[117,27,46,25,"object"],[117,33,46,19],[117,35,46,33,"parts"],[117,40,46,19],[117,41,46,4],[118,0,47,4,"gatherNodeParts"],[118,6,47,4,"gatherNodeParts"],[118,21,47,19],[118,22,47,20,"node"],[118,26,47,24],[118,27,47,25,"property"],[118,35,47,19],[118,37,47,35,"parts"],[118,42,47,19],[118,43,47,4],[119,0,48,3],[119,5,45,9],[119,11,48,9],[119,15,48,13,"t"],[119,16,48,14],[119,17,48,15,"isIdentifier"],[119,29,48,13],[119,30,48,28,"node"],[119,34,48,13],[119,35,48,9],[119,37,48,35],[120,0,49,4,"parts"],[120,6,49,4,"parts"],[120,11,49,9],[120,12,49,10,"push"],[120,16,49,4],[120,17,49,15,"node"],[120,21,49,19],[120,22,49,20,"name"],[120,26,49,4],[121,0,50,3],[121,5,48,9],[121,11,50,9],[121,15,50,13,"t"],[121,16,50,14],[121,17,50,15,"isLiteral"],[121,26,50,13],[121,27,50,25,"node"],[121,31,50,13],[121,32,50,9],[121,34,50,32],[122,0,51,4,"parts"],[122,6,51,4,"parts"],[122,11,51,9],[122,12,51,10,"push"],[122,16,51,4],[122,17,51,15,"node"],[122,21,51,19],[122,22,51,20,"value"],[122,27,51,4],[123,0,52,3],[123,5,50,9],[123,11,52,9],[123,15,52,13,"t"],[123,16,52,14],[123,17,52,15,"isCallExpression"],[123,33,52,13],[123,34,52,32,"node"],[123,38,52,13],[123,39,52,9],[123,41,52,39],[124,0,53,4,"gatherNodeParts"],[124,6,53,4,"gatherNodeParts"],[124,21,53,19],[124,22,53,20,"node"],[124,26,53,24],[124,27,53,25,"callee"],[124,33,53,19],[124,35,53,33,"parts"],[124,40,53,19],[124,41,53,4],[125,0,54,3],[125,5,52,9],[125,11,54,9],[125,15,54,13,"t"],[125,16,54,14],[125,17,54,15,"isObjectExpression"],[125,35,54,13],[125,36,54,34,"node"],[125,40,54,13],[125,45,54,43,"t"],[125,46,54,44],[125,47,54,45,"isObjectPattern"],[125,62,54,43],[125,63,54,61,"node"],[125,67,54,43],[125,68,54,9],[125,70,54,68],[126,0,55,4],[126,28,55,23,"node"],[126,32,55,27],[126,33,55,28,"properties"],[126,43,55,4],[126,210,55,40],[127,0,55,40],[129,0,55,40],[130,0,55,40],[131,0,55,40],[132,0,55,40],[133,0,55,40],[134,0,55,40],[135,0,55,40],[136,0,55,40],[138,0,55,40],[138,12,55,15,"prop"],[138,17,55,40],[139,0,56,6,"gatherNodeParts"],[139,8,56,6,"gatherNodeParts"],[139,23,56,21],[139,24,56,22,"prop"],[139,29,56,26],[139,30,56,27,"key"],[139,33,56,22],[139,37,56,34,"prop"],[139,42,56,38],[139,43,56,39,"argument"],[139,51,56,21],[139,53,56,49,"parts"],[139,58,56,21],[139,59,56,6],[140,0,57,5],[141,0,58,3],[141,5,54,9],[141,11,58,9],[141,15,58,13,"t"],[141,16,58,14],[141,17,58,15,"isPrivateName"],[141,30,58,13],[141,31,58,29,"node"],[141,35,58,13],[141,36,58,9],[141,38,58,36],[142,0,59,4,"gatherNodeParts"],[142,6,59,4,"gatherNodeParts"],[142,21,59,19],[142,22,59,20,"node"],[142,26,59,24],[142,27,59,25,"id"],[142,29,59,19],[142,31,59,29,"parts"],[142,36,59,19],[142,37,59,4],[143,0,60,3],[143,5,58,9],[143,11,60,9],[143,15,60,13,"t"],[143,16,60,14],[143,17,60,15,"isThisExpression"],[143,33,60,13],[143,34,60,32,"node"],[143,38,60,13],[143,39,60,9],[143,41,60,39],[144,0,61,4,"parts"],[144,6,61,4,"parts"],[144,11,61,9],[144,12,61,10,"push"],[144,16,61,4],[144,17,61,15],[144,23,61,4],[145,0,62,3],[145,5,60,9],[145,11,62,9],[145,15,62,13,"t"],[145,16,62,14],[145,17,62,15,"isSuper"],[145,24,62,13],[145,25,62,23,"node"],[145,29,62,13],[145,30,62,9],[145,32,62,30],[146,0,63,4,"parts"],[146,6,63,4,"parts"],[146,11,63,9],[146,12,63,10,"push"],[146,16,63,4],[146,17,63,15],[146,24,63,4],[147,0,64,3],[148,0,65,1],[150,0,67,0],[150,6,67,6,"collectorVisitor"],[150,22,67,22],[150,25,67,25],[151,0,68,2,"For"],[151,4,68,2,"For"],[151,7,67,25],[151,22,68,6,"path"],[151,26,67,25],[151,28,68,12],[152,0,69,4],[152,28,69,22,"t"],[152,29,69,23],[152,30,69,24,"FOR_INIT_KEYS"],[152,43,69,4],[152,210,69,39],[153,0,69,39],[155,0,69,39],[156,0,69,39],[157,0,69,39],[158,0,69,39],[159,0,69,39],[160,0,69,39],[161,0,69,39],[162,0,69,39],[164,0,69,39],[164,12,69,15,"key"],[164,16,69,39],[166,0,70,6],[166,12,70,12,"declar"],[166,19,70,18],[166,22,70,21,"path"],[166,26,70,25],[166,27,70,26,"get"],[166,30,70,21],[166,31,70,30,"key"],[166,35,70,21],[166,36,70,6],[168,0,72,6],[168,12,72,10,"declar"],[168,19,72,16],[168,20,72,17,"isVar"],[168,25,72,10],[168,27,72,6],[168,29,72,26],[169,0,73,8],[169,14,73,14,"parentScope"],[169,25,73,25],[169,28,73,28,"path"],[169,32,73,32],[169,33,73,33,"scope"],[169,38,73,28],[169,39,73,39,"getFunctionParent"],[169,56,73,28],[169,62,73,62,"path"],[169,66,73,66],[169,67,73,67,"scope"],[169,72,73,62],[169,73,73,73,"getProgramParent"],[169,89,73,62],[169,91,73,8],[170,0,74,8,"parentScope"],[170,10,74,8,"parentScope"],[170,21,74,19],[170,22,74,20,"registerBinding"],[170,37,74,8],[170,38,74,36],[170,43,74,8],[170,45,74,43,"declar"],[170,52,74,8],[171,0,75,7],[172,0,76,5],[173,0,77,3],[173,5,67,25],[174,0,79,2,"Declaration"],[174,4,79,2,"Declaration"],[174,15,67,25],[174,38,79,14,"path"],[174,42,67,25],[174,44,79,20],[175,0,80,4],[175,10,80,8,"path"],[175,14,80,12],[175,15,80,13,"isBlockScoped"],[175,28,80,8],[175,30,80,4],[175,32,80,30],[177,0,82,4],[177,10,82,8,"path"],[177,14,82,12],[177,15,82,13,"isExportDeclaration"],[177,34,82,8],[177,40,82,38,"path"],[177,44,82,42],[177,45,82,43,"get"],[177,48,82,38],[177,49,82,47],[177,62,82,38],[177,64,82,62,"isDeclaration"],[177,77,82,38],[177,79,82,4],[177,81,82,79],[178,0,83,6],[179,0,84,5],[181,0,86,4],[181,10,86,10,"parent"],[181,16,86,16],[181,19,86,19,"path"],[181,23,86,23],[181,24,86,24,"scope"],[181,29,86,19],[181,30,86,30,"getFunctionParent"],[181,47,86,19],[181,53,86,53,"path"],[181,57,86,57],[181,58,86,58,"scope"],[181,63,86,53],[181,64,86,64,"getProgramParent"],[181,80,86,53],[181,82,86,4],[182,0,87,4,"parent"],[182,6,87,4,"parent"],[182,12,87,10],[182,13,87,11,"registerDeclaration"],[182,32,87,4],[182,33,87,31,"path"],[182,37,87,4],[183,0,88,3],[183,5,67,25],[184,0,90,2,"ReferencedIdentifier"],[184,4,90,2,"ReferencedIdentifier"],[184,24,67,25],[184,56,90,23,"path"],[184,60,67,25],[184,62,90,29,"state"],[184,67,67,25],[184,69,90,36],[185,0,91,4,"state"],[185,6,91,4,"state"],[185,11,91,9],[185,12,91,10,"references"],[185,22,91,4],[185,23,91,21,"push"],[185,27,91,4],[185,28,91,26,"path"],[185,32,91,4],[186,0,92,3],[186,5,67,25],[187,0,94,2,"ForXStatement"],[187,4,94,2,"ForXStatement"],[187,17,67,25],[187,42,94,16,"path"],[187,46,67,25],[187,48,94,22,"state"],[187,53,67,25],[187,55,94,29],[188,0,95,4],[188,10,95,10,"left"],[188,14,95,14],[188,17,95,17,"path"],[188,21,95,21],[188,22,95,22,"get"],[188,25,95,17],[188,26,95,26],[188,32,95,17],[188,33,95,4],[190,0,97,4],[190,10,97,8,"left"],[190,14,97,12],[190,15,97,13,"isPattern"],[190,24,97,8],[190,30,97,28,"left"],[190,34,97,32],[190,35,97,33,"isIdentifier"],[190,47,97,28],[190,49,97,4],[190,51,97,49],[191,0,98,6,"state"],[191,8,98,6,"state"],[191,13,98,11],[191,14,98,12,"constantViolations"],[191,32,98,6],[191,33,98,31,"push"],[191,37,98,6],[191,38,98,36,"path"],[191,42,98,6],[192,0,99,5],[193,0,100,3],[193,5,67,25],[194,0,102,2,"ExportDeclaration"],[194,4,102,2,"ExportDeclaration"],[194,21,102,19],[194,23,102,21],[195,0,103,4,"exit"],[195,6,103,4,"exit"],[195,10,102,21],[195,26,103,9,"path"],[195,30,102,21],[195,32,103,15],[196,0,103,15],[196,12,105,8,"node"],[196,16,103,15],[196,19,107,10,"path"],[196,23,103,15],[196,24,105,8,"node"],[196,28,103,15],[197,0,103,15],[197,12,106,8,"scope"],[197,17,103,15],[197,20,107,10,"path"],[197,24,103,15],[197,25,106,8,"scope"],[197,30,103,15],[198,0,108,6],[198,12,108,12,"declar"],[198,18,108,18],[198,21,108,21,"node"],[198,25,108,25],[198,26,108,26,"declaration"],[198,37,108,6],[200,0,110,6],[200,12,110,10,"t"],[200,13,110,11],[200,14,110,12,"isClassDeclaration"],[200,32,110,10],[200,33,110,31,"declar"],[200,39,110,10],[200,44,110,42,"t"],[200,45,110,43],[200,46,110,44,"isFunctionDeclaration"],[200,67,110,42],[200,68,110,66,"declar"],[200,74,110,42],[200,75,110,6],[200,77,110,75],[201,0,111,8],[201,14,111,14,"id"],[201,16,111,16],[201,19,111,19,"declar"],[201,25,111,25],[201,26,111,26,"id"],[201,28,111,8],[202,0,112,8],[202,14,112,12],[202,15,112,13,"id"],[202,17,112,8],[202,19,112,17],[203,0,113,8],[203,14,113,14,"binding"],[203,21,113,21],[203,24,113,24,"scope"],[203,29,113,29],[203,30,113,30,"getBinding"],[203,40,113,24],[203,41,113,41,"id"],[203,43,113,43],[203,44,113,44,"name"],[203,48,113,24],[203,49,113,8],[204,0,114,8],[204,14,114,12,"binding"],[204,21,114,8],[204,23,114,21,"binding"],[204,30,114,28],[204,31,114,29,"reference"],[204,40,114,21],[204,41,114,39,"path"],[204,45,114,21],[205,0,115,7],[205,9,110,6],[205,15,115,13],[205,19,115,17,"t"],[205,20,115,18],[205,21,115,19,"isVariableDeclaration"],[205,42,115,17],[205,43,115,41,"declar"],[205,49,115,17],[205,50,115,13],[205,52,115,50],[206,0,116,8],[206,32,116,27,"declar"],[206,38,116,33],[206,39,116,34,"declarations"],[206,51,116,8],[206,218,116,48],[207,0,116,48],[209,0,116,48],[210,0,116,48],[211,0,116,48],[212,0,116,48],[213,0,116,48],[214,0,116,48],[215,0,116,48],[216,0,116,48],[218,0,116,48],[218,16,116,19,"decl"],[218,21,116,48],[220,0,117,10],[220,45,117,29,"Object"],[220,51,117,35],[220,52,117,36,"keys"],[220,56,117,29],[220,57,117,41,"t"],[220,58,117,42],[220,59,117,43,"getBindingIdentifiers"],[220,80,117,41],[220,81,117,65,"decl"],[220,86,117,41],[220,87,117,29],[220,88,117,10],[220,124,117,73],[221,0,117,15],[221,18,117,21,"name"],[221,22,117,25],[221,42,117,15],[223,0,118,12],[223,18,118,18,"binding"],[223,27,118,25],[223,30,118,28,"scope"],[223,35,118,33],[223,36,118,34,"getBinding"],[223,46,118,28],[223,47,118,45,"name"],[223,51,118,28],[223,52,118,12],[225,0,119,12],[225,18,119,16,"binding"],[225,27,119,12],[225,29,119,25,"binding"],[225,38,119,32],[225,39,119,33,"reference"],[225,48,119,25],[225,49,119,43,"path"],[225,53,119,25],[226,0,120,11],[227,0,121,9],[228,0,122,7],[229,0,123,5],[230,0,102,21],[230,5,67,25],[231,0,127,2,"LabeledStatement"],[231,4,127,2,"LabeledStatement"],[231,20,67,25],[231,48,127,19,"path"],[231,52,67,25],[231,54,127,25],[232,0,128,4,"path"],[232,6,128,4,"path"],[232,10,128,8],[232,11,128,9,"scope"],[232,16,128,4],[232,17,128,15,"getProgramParent"],[232,33,128,4],[232,36,128,34,"addGlobal"],[232,45,128,4],[232,46,128,44,"path"],[232,50,128,48],[232,51,128,49,"node"],[232,55,128,4],[233,0,129,4,"path"],[233,6,129,4,"path"],[233,10,129,8],[233,11,129,9,"scope"],[233,16,129,4],[233,17,129,15,"getBlockParent"],[233,31,129,4],[233,34,129,32,"registerDeclaration"],[233,53,129,4],[233,54,129,52,"path"],[233,58,129,4],[234,0,130,3],[234,5,67,25],[235,0,132,2,"AssignmentExpression"],[235,4,132,2,"AssignmentExpression"],[235,24,67,25],[235,56,132,23,"path"],[235,60,67,25],[235,62,132,29,"state"],[235,67,67,25],[235,69,132,36],[236,0,133,4,"state"],[236,6,133,4,"state"],[236,11,133,9],[236,12,133,10,"assignments"],[236,23,133,4],[236,24,133,22,"push"],[236,28,133,4],[236,29,133,27,"path"],[236,33,133,4],[237,0,134,3],[237,5,67,25],[238,0,136,2,"UpdateExpression"],[238,4,136,2,"UpdateExpression"],[238,20,67,25],[238,48,136,19,"path"],[238,52,67,25],[238,54,136,25,"state"],[238,59,67,25],[238,61,136,32],[239,0,137,4,"state"],[239,6,137,4,"state"],[239,11,137,9],[239,12,137,10,"constantViolations"],[239,30,137,4],[239,31,137,29,"push"],[239,35,137,4],[239,36,137,34,"path"],[239,40,137,4],[240,0,138,3],[240,5,67,25],[241,0,140,2,"UnaryExpression"],[241,4,140,2,"UnaryExpression"],[241,19,67,25],[241,46,140,18,"path"],[241,50,67,25],[241,52,140,24,"state"],[241,57,67,25],[241,59,140,31],[242,0,141,4],[242,10,141,8,"path"],[242,14,141,12],[242,15,141,13,"node"],[242,19,141,8],[242,20,141,18,"operator"],[242,28,141,8],[242,33,141,31],[242,41,141,4],[242,43,141,41],[243,0,142,6,"state"],[243,8,142,6,"state"],[243,13,142,11],[243,14,142,12,"constantViolations"],[243,32,142,6],[243,33,142,31,"push"],[243,37,142,6],[243,38,142,36,"path"],[243,42,142,6],[244,0,143,5],[245,0,144,3],[245,5,67,25],[246,0,146,2,"BlockScoped"],[246,4,146,2,"BlockScoped"],[246,15,67,25],[246,38,146,14,"path"],[246,42,67,25],[246,44,146,20],[247,0,147,4],[247,10,147,8,"scope"],[247,15,147,13],[247,18,147,16,"path"],[247,22,147,20],[247,23,147,21,"scope"],[247,28,147,4],[248,0,148,4],[248,10,148,8,"scope"],[248,15,148,13],[248,16,148,14,"path"],[248,20,148,8],[248,25,148,23,"path"],[248,29,148,4],[248,31,148,29,"scope"],[248,36,148,34],[248,39,148,37,"scope"],[248,44,148,42],[248,45,148,43,"parent"],[248,51,148,29],[249,0,149,4,"scope"],[249,6,149,4,"scope"],[249,11,149,9],[249,12,149,10,"getBlockParent"],[249,26,149,4],[249,29,149,27,"registerDeclaration"],[249,48,149,4],[249,49,149,47,"path"],[249,53,149,4],[250,0,150,3],[250,5,67,25],[251,0,152,2,"ClassDeclaration"],[251,4,152,2,"ClassDeclaration"],[251,20,67,25],[251,48,152,19,"path"],[251,52,67,25],[251,54,152,25],[252,0,153,4],[252,10,153,10,"id"],[252,12,153,12],[252,15,153,15,"path"],[252,19,153,19],[252,20,153,20,"node"],[252,24,153,15],[252,25,153,25,"id"],[252,27,153,4],[253,0,154,4],[253,10,154,8],[253,11,154,9,"id"],[253,13,154,4],[253,15,154,13],[254,0,155,4],[254,10,155,10,"name"],[254,14,155,14],[254,17,155,17,"id"],[254,19,155,19],[254,20,155,20,"name"],[254,24,155,4],[255,0,156,4,"path"],[255,6,156,4,"path"],[255,10,156,8],[255,11,156,9,"scope"],[255,16,156,4],[255,17,156,15,"bindings"],[255,25,156,4],[255,26,156,24,"name"],[255,30,156,4],[255,34,156,32,"path"],[255,38,156,36],[255,39,156,37,"scope"],[255,44,156,32],[255,45,156,43,"getBinding"],[255,55,156,32],[255,56,156,54,"name"],[255,60,156,32],[255,61,156,4],[256,0,157,3],[256,5,67,25],[257,0,159,2,"Block"],[257,4,159,2,"Block"],[257,9,67,25],[257,26,159,8,"path"],[257,30,67,25],[257,32,159,14],[258,0,160,4],[258,10,160,10,"paths"],[258,15,160,15],[258,18,160,18,"path"],[258,22,160,22],[258,23,160,23,"get"],[258,26,160,18],[258,27,160,27],[258,33,160,18],[258,34,160,4],[260,0,162,4],[260,28,162,27,"paths"],[260,33,162,4],[260,200,162,34],[261,0,162,34],[263,0,162,34],[264,0,162,34],[265,0,162,34],[266,0,162,34],[267,0,162,34],[268,0,162,34],[269,0,162,34],[270,0,162,34],[272,0,162,34],[272,12,162,15,"bodyPath"],[272,21,162,34],[274,0,163,6],[274,12,163,10,"bodyPath"],[274,21,163,18],[274,22,163,19,"isFunctionDeclaration"],[274,43,163,10],[274,45,163,6],[274,47,163,44],[275,0,164,8,"path"],[275,10,164,8,"path"],[275,14,164,12],[275,15,164,13,"scope"],[275,20,164,8],[275,21,164,19,"getBlockParent"],[275,35,164,8],[275,38,164,36,"registerDeclaration"],[275,57,164,8],[275,58,164,56,"bodyPath"],[275,67,164,8],[276,0,165,7],[277,0,166,5],[278,0,167,3],[279,0,67,25],[279,3,67,0],[280,0,170,0],[280,6,170,4,"uid"],[280,9,170,7],[280,12,170,10],[280,13,170,0],[282,6,172,6,"Scope"],[282,11],[283,0,173,2],[283,19,173,14,"path"],[283,23,173,2],[283,25,173,20],[284,0,173,20],[286,0,173,20],[286,10,175,6,"node"],[286,14,173,20],[286,17,176,8,"path"],[286,21,173,20],[286,22,175,6,"node"],[286,26,173,20],[288,0,178,4],[288,10,178,10,"cached"],[288,16,178,16],[288,19,178,19,"_cache"],[288,25,178,25],[288,26,178,26,"scope"],[288,31,178,19],[288,32,178,32,"get"],[288,35,178,19],[288,36,178,36,"node"],[288,40,178,19],[288,41,178,4],[290,0,180,4],[290,10,180,8,"cached"],[290,16,180,14],[290,20,180,18,"cached"],[290,26,180,24],[290,27,180,25,"path"],[290,31,180,18],[290,36,180,34,"path"],[290,40,180,4],[290,42,180,40],[291,0,181,6],[291,15,181,13,"cached"],[291,21,181,6],[292,0,182,5],[294,0,184,4,"_cache"],[294,6,184,4,"_cache"],[294,12,184,10],[294,13,184,11,"scope"],[294,18,184,4],[294,19,184,17,"set"],[294,22,184,4],[294,23,184,21,"node"],[294,27,184,4],[294,29,184,27],[294,33,184,4],[296,0,186,4],[296,11,186,9,"uid"],[296,14,186,4],[296,17,186,15,"uid"],[296,20,186,18],[296,22,186,4],[297,0,187,4],[297,11,187,9,"block"],[297,16,187,4],[297,19,187,17,"node"],[297,23,187,4],[298,0,188,4],[298,11,188,9,"path"],[298,15,188,4],[298,18,188,16,"path"],[298,22,188,4],[299,0,189,4],[299,11,189,9,"labels"],[299,17,189,4],[299,20,189,18],[299,24,189,22,"Map"],[299,27,189,18],[299,29,189,4],[300,0,190,3],[304,31,205,11,"node"],[304,35],[304,37,205,17,"opts"],[304,41],[304,43,205,23,"state"],[304,48],[304,50,205,30],[305,0,206,4],[305,9,206,5],[305,12,206,8,"_index"],[305,18,206,14],[305,19,206,15,"default"],[305,26,206,4],[305,28,206,24,"node"],[305,32,206,4],[305,34,206,30,"opts"],[305,38,206,4],[305,40,206,36],[305,44,206,4],[305,46,206,42,"state"],[305,51,206,4],[305,53,206,49],[305,58,206,54,"path"],[305,62,206,4],[306,0,207,3],[309,52,209,32,"name"],[309,56],[309,58,209,38],[310,0,210,4],[310,12,210,10,"id"],[310,14,210,12],[310,17,210,15],[310,22,210,20,"generateUidIdentifier"],[310,43,210,15],[310,44,210,42,"name"],[310,48,210,15],[310,49,210,4],[311,0,211,4],[311,13,211,9,"push"],[311,17,211,4],[311,18,211,14],[312,0,212,6,"id"],[312,10,212,6,"id"],[312,12,212,8],[312,14,212,6,"id"],[313,0,211,14],[313,9,211,4],[314,0,214,4],[314,15,214,11,"t"],[314,16,214,12],[314,17,214,13,"cloneNode"],[314,26,214,11],[314,27,214,23,"id"],[314,29,214,11],[314,30,214,4],[315,0,215,3],[318,44,217,24,"name"],[318,48],[318,50,217,30],[319,0,218,4],[319,15,218,11,"t"],[319,16,218,12],[319,17,218,13,"identifier"],[319,27,218,11],[319,28,218,24],[319,33,218,29,"generateUid"],[319,44,218,24],[319,45,218,41,"name"],[319,49,218,24],[319,50,218,11],[319,51,218,4],[320,0,219,3],[323,36,221,29],[324,0,221,29],[324,12,221,14,"name"],[324,16,221,29],[324,87,221,21],[324,93,221,29],[325,0,222,4,"name"],[325,8,222,4,"name"],[325,12,222,8],[325,15,222,11,"t"],[325,16,222,12],[325,17,222,13,"toIdentifier"],[325,29,222,11],[325,30,222,26,"name"],[325,34,222,11],[325,36,222,32,"replace"],[325,43,222,11],[325,44,222,40],[325,49,222,11],[325,51,222,47],[325,53,222,11],[325,55,222,51,"replace"],[325,62,222,11],[325,63,222,59],[325,73,222,11],[325,75,222,71],[325,77,222,11],[325,78,222,4],[326,0,223,4],[326,12,223,8,"uid"],[326,15,223,4],[327,0,224,4],[327,12,224,8,"i"],[327,13,224,9],[327,16,224,12],[327,17,224,4],[329,0,226,4],[329,11,226,7],[330,0,227,6,"uid"],[330,10,227,6,"uid"],[330,13,227,9],[330,16,227,12],[330,21,227,17,"_generateUid"],[330,33,227,12],[330,34,227,30,"name"],[330,38,227,12],[330,40,227,36,"i"],[330,41,227,12],[330,42,227,6],[331,0,228,6,"i"],[331,10,228,6,"i"],[331,11,228,7],[332,0,229,5],[332,9,226,4],[332,17,229,13],[332,22,229,18,"hasLabel"],[332,30,229,13],[332,31,229,27,"uid"],[332,34,229,13],[332,39,229,35],[332,44,229,40,"hasBinding"],[332,54,229,35],[332,55,229,51,"uid"],[332,58,229,35],[332,59,229,13],[332,63,229,59],[332,68,229,64,"hasGlobal"],[332,77,229,59],[332,78,229,74,"uid"],[332,81,229,59],[332,82,229,13],[332,86,229,82],[332,91,229,87,"hasReference"],[332,103,229,82],[332,104,229,100,"uid"],[332,107,229,82],[332,108,226,4],[334,0,231,4],[334,12,231,10,"program"],[334,19,231,17],[334,22,231,20],[334,27,231,25,"getProgramParent"],[334,43,231,20],[334,45,231,4],[335,0,232,4,"program"],[335,8,232,4,"program"],[335,15,232,11],[335,16,232,12,"references"],[335,26,232,4],[335,27,232,23,"uid"],[335,30,232,4],[335,34,232,30],[335,38,232,4],[336,0,233,4,"program"],[336,8,233,4,"program"],[336,15,233,11],[336,16,233,12,"uids"],[336,20,233,4],[336,21,233,17,"uid"],[336,24,233,4],[336,28,233,24],[336,32,233,4],[337,0,234,4],[337,15,234,11,"uid"],[337,18,234,4],[338,0,235,3],[341,35,237,15,"name"],[341,39],[341,41,237,21,"i"],[341,42],[341,44,237,24],[342,0,238,4],[342,12,238,8,"id"],[342,14,238,10],[342,17,238,13,"name"],[342,21,238,4],[343,0,239,4],[343,12,239,8,"i"],[343,13,239,9],[343,16,239,12],[343,17,239,4],[343,19,239,15,"id"],[343,21,239,17],[343,25,239,21,"i"],[343,26,239,15],[344,0,240,4],[344,21,240,15,"id"],[344,23,240,4],[345,0,241,3],[348,45,243,25,"parent"],[348,51],[348,53,243,33,"defaultName"],[348,64],[348,66,243,46],[349,0,244,4],[349,12,244,8,"node"],[349,16,244,12],[349,19,244,15,"parent"],[349,25,244,4],[351,0,246,4],[351,12,246,8,"t"],[351,13,246,9],[351,14,246,10,"isAssignmentExpression"],[351,36,246,8],[351,37,246,33,"parent"],[351,43,246,8],[351,44,246,4],[351,46,246,42],[352,0,247,6,"node"],[352,10,247,6,"node"],[352,14,247,10],[352,17,247,13,"parent"],[352,23,247,19],[352,24,247,20,"left"],[352,28,247,6],[353,0,248,5],[353,9,246,4],[353,15,248,11],[353,19,248,15,"t"],[353,20,248,16],[353,21,248,17,"isVariableDeclarator"],[353,41,248,15],[353,42,248,38,"parent"],[353,48,248,15],[353,49,248,11],[353,51,248,47],[354,0,249,6,"node"],[354,10,249,6,"node"],[354,14,249,10],[354,17,249,13,"parent"],[354,23,249,19],[354,24,249,20,"id"],[354,26,249,6],[355,0,250,5],[355,9,248,11],[355,15,250,11],[355,19,250,15,"t"],[355,20,250,16],[355,21,250,17,"isObjectProperty"],[355,37,250,15],[355,38,250,34,"node"],[355,42,250,15],[355,47,250,43,"t"],[355,48,250,44],[355,49,250,45,"isObjectMethod"],[355,63,250,43],[355,64,250,60,"node"],[355,68,250,43],[355,69,250,11],[355,71,250,67],[356,0,251,6,"node"],[356,10,251,6,"node"],[356,14,251,10],[356,17,251,13,"node"],[356,21,251,17],[356,22,251,18,"key"],[356,25,251,6],[357,0,252,5],[359,0,254,4],[359,12,254,10,"parts"],[359,17,254,15],[359,20,254,18],[359,22,254,4],[360,0,255,4,"gatherNodeParts"],[360,8,255,4,"gatherNodeParts"],[360,23,255,19],[360,24,255,20,"node"],[360,28,255,19],[360,30,255,26,"parts"],[360,35,255,19],[360,36,255,4],[361,0,256,4],[361,12,256,8,"id"],[361,14,256,10],[361,17,256,13,"parts"],[361,22,256,18],[361,23,256,19,"join"],[361,27,256,13],[361,28,256,24],[361,31,256,13],[361,32,256,4],[362,0,257,4,"id"],[362,8,257,4,"id"],[362,10,257,6],[362,13,257,9,"id"],[362,15,257,11],[362,16,257,12,"replace"],[362,23,257,9],[362,24,257,20],[362,28,257,9],[362,30,257,26],[362,32,257,9],[362,37,257,33,"defaultName"],[362,48,257,9],[362,52,257,48],[362,57,257,4],[363,0,258,4],[363,15,258,11],[363,20,258,16,"generateUid"],[363,31,258,11],[363,32,258,28,"id"],[363,34,258,30],[363,35,258,31,"slice"],[363,40,258,28],[363,41,258,37],[363,42,258,28],[363,44,258,40],[363,46,258,28],[363,47,258,11],[363,48,258,4],[364,0,259,3],[367,55,261,35,"parent"],[367,61],[367,63,261,43,"defaultName"],[367,74],[367,76,261,56],[368,0,262,4],[368,15,262,11,"t"],[368,16,262,12],[368,17,262,13,"identifier"],[368,27,262,11],[368,28,262,24],[368,33,262,29,"generateUidBasedOnNode"],[368,55,262,24],[368,56,262,52,"parent"],[368,62,262,24],[368,64,262,60,"defaultName"],[368,75,262,24],[368,76,262,11],[368,77,262,4],[369,0,263,3],[372,31,265,11,"node"],[372,35],[372,37,265,17],[373,0,266,4],[373,12,266,8,"t"],[373,13,266,9],[373,14,266,10,"isThisExpression"],[373,30,266,8],[373,31,266,27,"node"],[373,35,266,8],[373,40,266,36,"t"],[373,41,266,37],[373,42,266,38,"isSuper"],[373,49,266,36],[373,50,266,46,"node"],[373,54,266,36],[373,55,266,4],[373,57,266,53],[374,0,267,6],[374,17,267,13],[374,21,267,6],[375,0,268,5],[377,0,270,4],[377,12,270,8,"t"],[377,13,270,9],[377,14,270,10,"isIdentifier"],[377,26,270,8],[377,27,270,23,"node"],[377,31,270,8],[377,32,270,4],[377,34,270,30],[378,0,271,6],[378,14,271,12,"binding"],[378,21,271,19],[378,24,271,22],[378,29,271,27,"getBinding"],[378,39,271,22],[378,40,271,38,"node"],[378,44,271,42],[378,45,271,43,"name"],[378,49,271,22],[378,50,271,6],[380,0,273,6],[380,14,273,10,"binding"],[380,21,273,6],[380,23,273,19],[381,0,274,8],[381,19,274,15,"binding"],[381,26,274,22],[381,27,274,23,"constant"],[381,35,274,8],[382,0,275,7],[382,11,273,6],[382,17,275,13],[383,0,276,8],[383,19,276,15],[383,24,276,20,"hasBinding"],[383,34,276,15],[383,35,276,31,"node"],[383,39,276,35],[383,40,276,36,"name"],[383,44,276,15],[383,45,276,8],[384,0,277,7],[385,0,278,5],[387,0,280,4],[387,15,280,11],[387,20,280,4],[388,0,281,3],[391,44,283,24,"node"],[391,48],[391,50,283,30,"dontPush"],[391,58],[391,60,283,40],[392,0,284,4],[392,12,284,8],[392,17,284,13,"isStatic"],[392,25,284,8],[392,26,284,22,"node"],[392,30,284,8],[392,31,284,4],[392,33,284,29],[393,0,285,6],[393,17,285,13],[393,21,285,6],[394,0,286,5],[394,9,284,4],[394,15,286,11],[395,0,287,6],[395,14,287,12,"id"],[395,16,287,14],[395,19,287,17],[395,24,287,22,"generateUidIdentifierBasedOnNode"],[395,56,287,17],[395,57,287,55,"node"],[395,61,287,17],[395,62,287,6],[397,0,289,6],[397,14,289,10],[397,15,289,11,"dontPush"],[397,23,289,6],[397,25,289,21],[398,0,290,8],[398,17,290,13,"push"],[398,21,290,8],[398,22,290,18],[399,0,291,10,"id"],[399,14,291,10,"id"],[399,16,291,12],[399,18,291,10,"id"],[400,0,290,18],[400,13,290,8],[401,0,293,8],[401,19,293,15,"t"],[401,20,293,16],[401,21,293,17,"cloneNode"],[401,30,293,15],[401,31,293,27,"id"],[401,33,293,15],[401,34,293,8],[402,0,294,7],[404,0,296,6],[404,17,296,13,"id"],[404,19,296,6],[405,0,297,5],[406,0,298,3],[409,49,300,29,"local"],[409,54],[409,56,300,36,"kind"],[409,60],[409,62,300,42,"name"],[409,66],[409,68,300,48,"id"],[409,70],[409,72,300,52],[410,0,301,4],[410,12,301,8,"kind"],[410,16,301,12],[410,21,301,17],[410,28,301,4],[410,30,301,26],[411,0,302,4],[411,12,302,8,"local"],[411,17,302,13],[411,18,302,14,"kind"],[411,22,302,8],[411,27,302,23],[411,34,302,4],[411,36,302,32],[412,0,303,4],[412,12,303,10,"duplicate"],[412,21,303,19],[412,24,303,22,"kind"],[412,28,303,26],[412,33,303,31],[412,38,303,22],[412,42,303,40,"local"],[412,47,303,45],[412,48,303,46,"kind"],[412,52,303,40],[412,57,303,55],[412,62,303,22],[412,66,303,64,"local"],[412,71,303,69],[412,72,303,70,"kind"],[412,76,303,64],[412,81,303,79],[412,88,303,22],[412,92,303,90,"local"],[412,97,303,95],[412,98,303,96,"kind"],[412,102,303,90],[412,107,303,105],[412,115,303,22],[412,119,303,117,"local"],[412,124,303,122],[412,125,303,123,"kind"],[412,129,303,117],[412,134,303,132],[412,141,303,117],[412,146,303,144,"kind"],[412,150,303,148],[412,155,303,153],[412,160,303,144],[412,164,303,162,"kind"],[412,168,303,166],[412,173,303,171],[412,180,303,117],[412,181,303,4],[414,0,305,4],[414,12,305,8,"duplicate"],[414,21,305,4],[414,23,305,19],[415,0,306,6],[415,16,306,12],[415,21,306,17,"hub"],[415,24,306,12],[415,25,306,21,"buildError"],[415,35,306,12],[415,36,306,32,"id"],[415,38,306,12],[415,69,306,62,"name"],[415,73,306,12],[415,82,306,71,"TypeError"],[415,91,306,12],[415,92,306,6],[416,0,307,5],[417,0,308,3],[420,29,310,9,"oldName"],[420,36],[420,38,310,18,"newName"],[420,45],[420,47,310,27,"block"],[420,52],[420,54,310,34],[421,0,311,4],[421,12,311,10,"binding"],[421,19,311,17],[421,22,311,20],[421,27,311,25,"getBinding"],[421,37,311,20],[421,38,311,36,"oldName"],[421,45,311,20],[421,46,311,4],[423,0,313,4],[423,12,313,8,"binding"],[423,19,313,4],[423,21,313,17],[424,0,314,6,"newName"],[424,10,314,6,"newName"],[424,17,314,13],[424,20,314,16,"newName"],[424,27,314,23],[424,31,314,27],[424,36,314,32,"generateUidIdentifier"],[424,57,314,27],[424,58,314,54,"oldName"],[424,65,314,27],[424,67,314,63,"name"],[424,71,314,6],[425,0,315,6],[425,17,315,13],[425,21,315,17,"_renamer"],[425,29,315,25],[425,30,315,26,"default"],[425,37,315,13],[425,38,315,34,"binding"],[425,45,315,13],[425,47,315,43,"oldName"],[425,54,315,13],[425,56,315,52,"newName"],[425,63,315,13],[425,65,315,61,"rename"],[425,71,315,13],[425,72,315,68,"block"],[425,77,315,13],[425,78,315,6],[426,0,316,5],[427,0,317,3],[430,37,319,17,"map"],[430,40],[430,42,319,22,"oldName"],[430,49],[430,51,319,31,"newName"],[430,58],[430,60,319,40,"value"],[430,65],[430,67,319,47],[431,0,320,4],[431,12,320,8,"map"],[431,15,320,11],[431,16,320,12,"oldName"],[431,23,320,11],[431,24,320,4],[431,26,320,22],[432,0,321,6,"map"],[432,10,321,6,"map"],[432,13,321,9],[432,14,321,10,"newName"],[432,21,321,9],[432,22,321,6],[432,25,321,21,"value"],[432,30,321,6],[433,0,322,6,"map"],[433,10,322,6,"map"],[433,13,322,9],[433,14,322,10,"oldName"],[433,21,322,9],[433,22,322,6],[433,25,322,21],[433,29,322,6],[434,0,323,5],[435,0,324,3],[438,29,326,9],[439,0,327,4],[439,12,327,10,"sep"],[439,15,327,13],[439,18,327,16],[439,19,327,17],[439,22,327,20,"_repeat"],[439,29,327,27],[439,30,327,28,"default"],[439,37,327,16],[439,39,327,37],[439,42,327,16],[439,44,327,42],[439,46,327,16],[439,47,327,4],[440,0,328,4,"console"],[440,8,328,4,"console"],[440,15,328,11],[440,16,328,12,"log"],[440,19,328,4],[440,20,328,16,"sep"],[440,23,328,4],[441,0,329,4],[441,12,329,8,"scope"],[441,17,329,13],[441,20,329,16],[441,24,329,4],[443,0,331,4],[443,11,331,7],[444,0,332,6,"console"],[444,10,332,6,"console"],[444,17,332,13],[444,18,332,14,"log"],[444,21,332,6],[444,22,332,18],[444,25,332,6],[444,27,332,23,"scope"],[444,32,332,28],[444,33,332,29,"block"],[444,38,332,23],[444,39,332,35,"type"],[444,43,332,6],[446,0,334,6],[446,44,334,25,"Object"],[446,50,334,31],[446,51,334,32,"keys"],[446,55,334,25],[446,56,334,37,"scope"],[446,61,334,42],[446,62,334,43,"bindings"],[446,70,334,25],[446,71,334,6],[446,108,334,54],[447,0,334,11],[447,16,334,17,"name"],[447,20,334,21],[447,41,334,11],[448,0,335,8],[448,16,335,14,"binding"],[448,23,335,21],[448,26,335,24,"scope"],[448,31,335,29],[448,32,335,30,"bindings"],[448,40,335,24],[448,41,335,39,"name"],[448,45,335,24],[448,46,335,8],[449,0,336,8,"console"],[449,12,336,8,"console"],[449,19,336,15],[449,20,336,16,"log"],[449,23,336,8],[449,24,336,20],[449,28,336,8],[449,30,336,26,"name"],[449,34,336,8],[449,36,336,32],[450,0,337,10,"constant"],[450,14,337,10,"constant"],[450,22,337,18],[450,24,337,20,"binding"],[450,31,337,27],[450,32,337,28,"constant"],[450,40,336,32],[451,0,338,10,"references"],[451,14,338,10,"references"],[451,24,338,20],[451,26,338,22,"binding"],[451,33,338,29],[451,34,338,30,"references"],[451,44,336,32],[452,0,339,10,"violations"],[452,14,339,10,"violations"],[452,24,339,20],[452,26,339,22,"binding"],[452,33,339,29],[452,34,339,30,"constantViolations"],[452,52,339,22],[452,53,339,49,"length"],[452,59,336,32],[453,0,340,10,"kind"],[453,14,340,10,"kind"],[453,18,340,14],[453,20,340,16,"binding"],[453,27,340,23],[453,28,340,24,"kind"],[454,0,336,32],[454,13,336,8],[455,0,342,7],[456,0,343,5],[456,9,331,4],[456,17,343,13,"scope"],[456,22,343,18],[456,25,343,21,"scope"],[456,30,343,26],[456,31,343,27,"parent"],[456,37,331,4],[458,0,345,4,"console"],[458,8,345,4,"console"],[458,15,345,11],[458,16,345,12,"log"],[458,19,345,4],[458,20,345,16,"sep"],[458,23,345,4],[459,0,346,3],[462,30,348,10,"node"],[462,34],[462,36,348,16,"i"],[462,37],[462,39,348,19],[463,0,349,4],[463,12,349,8,"t"],[463,13,349,9],[463,14,349,10,"isIdentifier"],[463,26,349,8],[463,27,349,23,"node"],[463,31,349,8],[463,32,349,4],[463,34,349,30],[464,0,350,6],[464,14,350,12,"binding"],[464,21,350,19],[464,24,350,22],[464,29,350,27,"getBinding"],[464,39,350,22],[464,40,350,38,"node"],[464,44,350,42],[464,45,350,43,"name"],[464,49,350,22],[464,50,350,6],[466,0,352,6],[466,14,352,10,"binding"],[466,21,352,17],[466,25,352,21,"binding"],[466,32,352,28],[466,33,352,29,"constant"],[466,41,352,10],[466,45,352,41,"binding"],[466,52,352,48],[466,53,352,49,"path"],[466,57,352,41],[466,58,352,54,"isGenericType"],[466,71,352,41],[466,72,352,68],[466,79,352,41],[466,80,352,6],[466,82,352,78],[467,0,353,8],[467,19,353,15,"node"],[467,23,353,8],[468,0,354,7],[469,0,355,5],[471,0,357,4],[471,12,357,8,"t"],[471,13,357,9],[471,14,357,10,"isArrayExpression"],[471,31,357,8],[471,32,357,28,"node"],[471,36,357,8],[471,37,357,4],[471,39,357,35],[472,0,358,6],[472,17,358,13,"node"],[472,21,358,6],[473,0,359,5],[475,0,361,4],[475,12,361,8,"t"],[475,13,361,9],[475,14,361,10,"isIdentifier"],[475,26,361,8],[475,27,361,23,"node"],[475,31,361,8],[475,33,361,29],[476,0,362,6,"name"],[476,10,362,6,"name"],[476,14,362,10],[476,16,362,12],[477,0,361,29],[477,9,361,8],[477,10,361,4],[477,12,363,8],[478,0,364,6],[478,17,364,13,"t"],[478,18,364,14],[478,19,364,15,"callExpression"],[478,33,364,13],[478,34,364,30,"t"],[478,35,364,31],[478,36,364,32,"memberExpression"],[478,52,364,30],[478,53,364,49,"t"],[478,54,364,50],[478,55,364,51,"memberExpression"],[478,71,364,49],[478,72,364,68,"t"],[478,73,364,69],[478,74,364,70,"memberExpression"],[478,90,364,68],[478,91,364,87,"t"],[478,92,364,88],[478,93,364,89,"identifier"],[478,103,364,87],[478,104,364,100],[478,111,364,87],[478,112,364,68],[478,114,364,110,"t"],[478,115,364,111],[478,116,364,112,"identifier"],[478,126,364,110],[478,127,364,123],[478,138,364,110],[478,139,364,68],[478,140,364,49],[478,142,364,138,"t"],[478,143,364,139],[478,144,364,140,"identifier"],[478,154,364,138],[478,155,364,151],[478,162,364,138],[478,163,364,49],[478,164,364,30],[478,166,364,162,"t"],[478,167,364,163],[478,168,364,164,"identifier"],[478,178,364,162],[478,179,364,175],[478,185,364,162],[478,186,364,30],[478,187,364,13],[478,189,364,185],[478,190,364,186,"node"],[478,194,364,185],[478,195,364,13],[478,196,364,6],[479,0,365,5],[481,0,367,4],[481,12,367,8,"helperName"],[481,22,367,4],[482,0,368,4],[482,12,368,10,"args"],[482,16,368,14],[482,19,368,17],[482,20,368,18,"node"],[482,24,368,17],[482,25,368,4],[484,0,370,4],[484,12,370,8,"i"],[484,13,370,9],[484,18,370,14],[484,22,370,4],[484,24,370,20],[485,0,371,6,"helperName"],[485,10,371,6,"helperName"],[485,20,371,16],[485,23,371,19],[485,42,371,6],[486,0,372,5],[486,9,370,4],[486,15,372,11],[486,19,372,15,"i"],[486,20,372,11],[486,22,372,18],[487,0,373,6,"args"],[487,10,373,6,"args"],[487,14,373,10],[487,15,373,11,"push"],[487,19,373,6],[487,20,373,16,"t"],[487,21,373,17],[487,22,373,18,"numericLiteral"],[487,36,373,16],[487,37,373,33,"i"],[487,38,373,16],[487,39,373,6],[488,0,374,6,"helperName"],[488,10,374,6,"helperName"],[488,20,374,16],[488,23,374,19],[488,38,374,6],[489,0,375,5],[489,9,372,11],[489,15,375,11],[490,0,376,6,"helperName"],[490,10,376,6,"helperName"],[490,20,376,16],[490,23,376,19],[490,32,376,6],[491,0,377,5],[493,0,379,4],[493,15,379,11,"t"],[493,16,379,12],[493,17,379,13,"callExpression"],[493,31,379,11],[493,32,379,28],[493,37,379,33,"hub"],[493,40,379,28],[493,41,379,37,"addHelper"],[493,50,379,28],[493,51,379,47,"helperName"],[493,61,379,28],[493,62,379,11],[493,64,379,60,"args"],[493,68,379,11],[493,69,379,4],[494,0,380,3],[497,31,382,11,"name"],[497,35],[497,37,382,17],[498,0,383,4],[498,15,383,11],[498,16,383,12],[498,17,383,13],[498,22,383,18,"getLabel"],[498,30,383,13],[498,31,383,27,"name"],[498,35,383,13],[498,36,383,4],[499,0,384,3],[502,31,386,11,"name"],[502,35],[502,37,386,17],[503,0,387,4],[503,15,387,11],[503,20,387,16,"labels"],[503,26,387,11],[503,27,387,23,"get"],[503,30,387,11],[503,31,387,27,"name"],[503,35,387,11],[503,36,387,4],[504,0,388,3],[507,36,390,16,"path"],[507,40],[507,42,390,22],[508,0,391,4],[508,13,391,9,"labels"],[508,19,391,4],[508,20,391,16,"set"],[508,23,391,4],[508,24,391,20,"path"],[508,28,391,24],[508,29,391,25,"node"],[508,33,391,20],[508,34,391,30,"label"],[508,39,391,20],[508,40,391,36,"name"],[508,44,391,4],[508,46,391,42,"path"],[508,50,391,4],[509,0,392,3],[512,42,394,22,"path"],[512,46],[512,48,394,28],[513,0,395,4],[513,12,395,8,"path"],[513,16,395,12],[513,17,395,13,"isLabeledStatement"],[513,35,395,8],[513,37,395,4],[513,39,395,35],[514,0,396,6],[514,15,396,11,"registerLabel"],[514,28,396,6],[514,29,396,25,"path"],[514,33,396,6],[515,0,397,5],[515,9,395,4],[515,15,397,11],[515,19,397,15,"path"],[515,23,397,19],[515,24,397,20,"isFunctionDeclaration"],[515,45,397,15],[515,47,397,11],[515,49,397,45],[516,0,398,6],[516,15,398,11,"registerBinding"],[516,30,398,6],[516,31,398,27],[516,40,398,6],[516,42,398,38,"path"],[516,46,398,42],[516,47,398,43,"get"],[516,50,398,38],[516,51,398,47],[516,55,398,38],[516,56,398,6],[516,58,398,54,"path"],[516,62,398,6],[517,0,399,5],[517,9,397,11],[517,15,399,11],[517,19,399,15,"path"],[517,23,399,19],[517,24,399,20,"isVariableDeclaration"],[517,45,399,15],[517,47,399,11],[517,49,399,45],[518,0,400,6],[518,14,400,12,"declarations"],[518,26,400,24],[518,29,400,27,"path"],[518,33,400,31],[518,34,400,32,"get"],[518,37,400,27],[518,38,400,36],[518,52,400,27],[518,53,400,6],[520,0,402,6],[520,32,402,27,"declarations"],[520,44,402,6],[520,211,402,41],[521,0,402,41],[523,0,402,41],[524,0,402,41],[525,0,402,41],[526,0,402,41],[527,0,402,41],[528,0,402,41],[529,0,402,41],[530,0,402,41],[532,0,402,41],[532,16,402,17,"declar"],[532,24,402,41],[533,0,403,8],[533,17,403,13,"registerBinding"],[533,32,403,8],[533,33,403,29,"path"],[533,37,403,33],[533,38,403,34,"node"],[533,42,403,29],[533,43,403,39,"kind"],[533,47,403,8],[533,49,403,45,"declar"],[533,57,403,8],[534,0,404,7],[535,0,405,5],[535,9,399,11],[535,15,405,11],[535,19,405,15,"path"],[535,23,405,19],[535,24,405,20,"isClassDeclaration"],[535,42,405,15],[535,44,405,11],[535,46,405,42],[536,0,406,6],[536,15,406,11,"registerBinding"],[536,30,406,6],[536,31,406,27],[536,36,406,6],[536,38,406,34,"path"],[536,42,406,6],[537,0,407,5],[537,9,405,11],[537,15,407,11],[537,19,407,15,"path"],[537,23,407,19],[537,24,407,20,"isImportDeclaration"],[537,43,407,15],[537,45,407,11],[537,47,407,43],[538,0,408,6],[538,14,408,12,"specifiers"],[538,24,408,22],[538,27,408,25,"path"],[538,31,408,29],[538,32,408,30,"get"],[538,35,408,25],[538,36,408,34],[538,48,408,25],[538,49,408,6],[540,0,410,6],[540,32,410,30,"specifiers"],[540,42,410,6],[540,209,410,42],[541,0,410,42],[543,0,410,42],[544,0,410,42],[545,0,410,42],[546,0,410,42],[547,0,410,42],[548,0,410,42],[549,0,410,42],[550,0,410,42],[552,0,410,42],[552,16,410,17,"specifier"],[552,27,410,42],[553,0,411,8],[553,17,411,13,"registerBinding"],[553,32,411,8],[553,33,411,29],[553,41,411,8],[553,43,411,39,"specifier"],[553,54,411,8],[554,0,412,7],[555,0,413,5],[555,9,407,11],[555,15,413,11],[555,19,413,15,"path"],[555,23,413,19],[555,24,413,20,"isExportDeclaration"],[555,43,413,15],[555,45,413,11],[555,47,413,43],[556,0,414,6],[556,14,414,12,"declar"],[556,22,414,18],[556,25,414,21,"path"],[556,29,414,25],[556,30,414,26,"get"],[556,33,414,21],[556,34,414,30],[556,47,414,21],[556,48,414,6],[558,0,416,6],[558,14,416,10,"declar"],[558,22,416,16],[558,23,416,17,"isClassDeclaration"],[558,41,416,10],[558,47,416,41,"declar"],[558,55,416,47],[558,56,416,48,"isFunctionDeclaration"],[558,77,416,41],[558,79,416,10],[558,83,416,75,"declar"],[558,91,416,81],[558,92,416,82,"isVariableDeclaration"],[558,113,416,75],[558,115,416,6],[558,117,416,107],[559,0,417,8],[559,17,417,13,"registerDeclaration"],[559,36,417,8],[559,37,417,33,"declar"],[559,45,417,8],[560,0,418,7],[561,0,419,5],[561,9,413,11],[561,15,419,11],[562,0,420,6],[562,15,420,11,"registerBinding"],[562,30,420,6],[562,31,420,27],[562,40,420,6],[562,42,420,38,"path"],[562,46,420,6],[563,0,421,5],[564,0,422,3],[567,43,424,23],[568,0,425,4],[568,15,425,11,"t"],[568,16,425,12],[568,17,425,13,"unaryExpression"],[568,32,425,11],[568,33,425,29],[568,39,425,11],[568,41,425,37,"t"],[568,42,425,38],[568,43,425,39,"numericLiteral"],[568,57,425,37],[568,58,425,54],[568,59,425,37],[568,60,425,11],[568,62,425,58],[568,66,425,11],[568,67,425,4],[569,0,426,3],[572,48,428,28,"path"],[572,52],[572,54,428,34],[573,0,429,4],[573,12,429,10,"ids"],[573,15,429,13],[573,18,429,16,"path"],[573,22,429,20],[573,23,429,21,"getBindingIdentifiers"],[573,44,429,16],[573,46,429,4],[575,0,431,4],[575,43,431,23,"Object"],[575,49,431,29],[575,50,431,30,"keys"],[575,54,431,23],[575,55,431,35,"ids"],[575,58,431,23],[575,59,431,4],[575,98,431,41],[576,0,431,9],[576,14,431,15,"name"],[576,18,431,19],[576,40,431,9],[577,0,432,6],[577,14,432,12,"binding"],[577,21,432,19],[577,24,432,22],[577,29,432,27,"getBinding"],[577,39,432,22],[577,40,432,38,"name"],[577,44,432,22],[577,45,432,6],[578,0,433,6],[578,14,433,10,"binding"],[578,21,433,6],[578,23,433,19,"binding"],[578,30,433,26],[578,31,433,27,"reassign"],[578,39,433,19],[578,40,433,36,"path"],[578,44,433,19],[579,0,434,5],[580,0,435,3],[583,38,437,18,"kind"],[583,42],[583,44,437,24,"path"],[583,48],[583,50,437,50],[584,0,437,50],[584,12,437,30,"bindingPath"],[584,23,437,50],[584,94,437,44,"path"],[584,98,437,50],[585,0,438,4],[585,12,438,8],[585,13,438,9,"kind"],[585,17,438,4],[585,19,438,15],[585,25,438,21],[585,29,438,25,"ReferenceError"],[585,43,438,21],[585,44,438,40],[585,55,438,21],[585,56,438,15],[587,0,440,4],[587,12,440,8,"path"],[587,16,440,12],[587,17,440,13,"isVariableDeclaration"],[587,38,440,8],[587,40,440,4],[587,42,440,38],[588,0,441,6],[588,14,441,12,"declarators"],[588,25,441,23],[588,28,441,26,"path"],[588,32,441,30],[588,33,441,31,"get"],[588,36,441,26],[588,37,441,35],[588,51,441,26],[588,52,441,6],[590,0,443,6],[590,32,443,27,"declarators"],[590,43,443,6],[590,211,443,40],[591,0,443,40],[593,0,443,40],[594,0,443,40],[595,0,443,40],[596,0,443,40],[597,0,443,40],[598,0,443,40],[599,0,443,40],[600,0,443,40],[602,0,443,40],[602,16,443,17,"declar"],[602,24,443,40],[603,0,444,8],[603,17,444,13,"registerBinding"],[603,32,444,8],[603,33,444,29,"kind"],[603,37,444,8],[603,39,444,35,"declar"],[603,47,444,8],[604,0,445,7],[606,0,447,6],[607,0,448,5],[609,0,450,4],[609,12,450,10,"parent"],[609,18,450,16],[609,21,450,19],[609,26,450,24,"getProgramParent"],[609,42,450,19],[609,44,450,4],[610,0,451,4],[610,12,451,10,"ids"],[610,15,451,13],[610,18,451,16,"path"],[610,22,451,20],[610,23,451,21,"getOuterBindingIdentifiers"],[610,49,451,16],[610,50,451,48],[610,54,451,16],[610,55,451,4],[612,0,453,4],[612,43,453,23,"Object"],[612,49,453,29],[612,50,453,30,"keys"],[612,54,453,23],[612,55,453,35,"ids"],[612,58,453,23],[612,59,453,4],[612,98,453,41],[613,0,453,9],[613,14,453,15,"name"],[613,18,453,19],[613,40,453,9],[615,0,454,6],[615,32,454,23,"ids"],[615,35,454,26],[615,36,454,27,"name"],[615,40,454,26],[615,41,454,6],[615,209,454,34],[616,0,454,34],[618,0,454,34],[619,0,454,34],[620,0,454,34],[621,0,454,34],[622,0,454,34],[623,0,454,34],[624,0,454,34],[625,0,454,34],[627,0,454,34],[627,16,454,17,"id"],[627,19,454,34],[629,0,455,8],[629,16,455,14,"local"],[629,22,455,19],[629,25,455,22],[629,30,455,27,"getOwnBinding"],[629,43,455,22],[629,44,455,41,"name"],[629,48,455,22],[629,49,455,8],[631,0,457,8],[631,16,457,12,"local"],[631,22,457,8],[631,24,457,19],[632,0,458,10],[632,18,458,14,"local"],[632,24,458,19],[632,25,458,20,"identifier"],[632,35,458,14],[632,40,458,35,"id"],[632,43,458,10],[632,45,458,39],[633,0,459,10],[633,19,459,15,"checkBlockScopedCollisions"],[633,45,459,10],[633,46,459,42,"local"],[633,52,459,10],[633,54,459,49,"kind"],[633,58,459,10],[633,60,459,55,"name"],[633,64,459,10],[633,66,459,61,"id"],[633,69,459,10],[634,0,460,9],[636,0,462,8,"parent"],[636,12,462,8,"parent"],[636,18,462,14],[636,19,462,15,"references"],[636,29,462,8],[636,30,462,26,"name"],[636,34,462,8],[636,38,462,34],[636,42,462,8],[638,0,464,8],[638,16,464,12,"local"],[638,22,464,8],[638,24,464,19],[639,0,465,10],[639,19,465,15,"registerConstantViolation"],[639,44,465,10],[639,45,465,41,"bindingPath"],[639,56,465,10],[640,0,466,9],[640,13,464,8],[640,19,466,15],[641,0,467,10],[641,19,467,15,"bindings"],[641,27,467,10],[641,28,467,24,"name"],[641,32,467,10],[641,36,467,32],[641,40,467,36,"_binding"],[641,48,467,44],[641,49,467,45,"default"],[641,56,467,32],[641,57,467,53],[642,0,468,12,"identifier"],[642,16,468,12,"identifier"],[642,26,468,22],[642,28,468,24,"id"],[642,31,467,53],[643,0,469,12,"scope"],[643,16,469,12,"scope"],[643,21,469,17],[643,23,469,19],[643,27,467,53],[644,0,470,12,"path"],[644,16,470,12,"path"],[644,20,470,16],[644,22,470,18,"bindingPath"],[644,33,467,53],[645,0,471,12,"kind"],[645,16,471,12,"kind"],[645,20,471,16],[645,22,471,18,"kind"],[646,0,467,53],[646,15,467,32],[646,16,467,10],[647,0,473,9],[648,0,474,7],[649,0,475,5],[650,0,476,3],[653,32,478,12,"node"],[653,36],[653,38,478,18],[654,0,479,4],[654,13,479,9,"globals"],[654,20,479,4],[654,21,479,17,"node"],[654,25,479,21],[654,26,479,22,"name"],[654,30,479,4],[654,34,479,30,"node"],[654,38,479,4],[655,0,480,3],[658,29,482,9,"name"],[658,33],[658,35,482,15],[659,0,483,4],[659,12,483,8,"scope"],[659,17,483,13],[659,20,483,16],[659,24,483,4],[661,0,485,4],[661,11,485,7],[662,0,486,6],[662,14,486,10,"scope"],[662,19,486,15],[662,20,486,16,"uids"],[662,24,486,10],[662,25,486,21,"name"],[662,29,486,10],[662,30,486,6],[662,32,486,28],[662,39,486,35],[662,43,486,28],[663,0,487,5],[663,9,485,4],[663,17,487,13,"scope"],[663,22,487,18],[663,25,487,21,"scope"],[663,30,487,26],[663,31,487,27,"parent"],[663,37,485,4],[665,0,489,4],[665,15,489,11],[665,20,489,4],[666,0,490,3],[669,32,492,12,"name"],[669,36],[669,38,492,18],[670,0,493,4],[670,12,493,8,"scope"],[670,17,493,13],[670,20,493,16],[670,24,493,4],[672,0,495,4],[672,11,495,7],[673,0,496,6],[673,14,496,10,"scope"],[673,19,496,15],[673,20,496,16,"globals"],[673,27,496,10],[673,28,496,24,"name"],[673,32,496,10],[673,33,496,6],[673,35,496,31],[673,42,496,38],[673,46,496,31],[674,0,497,5],[674,9,495,4],[674,17,497,13,"scope"],[674,22,497,18],[674,25,497,21,"scope"],[674,30,497,26],[674,31,497,27,"parent"],[674,37,495,4],[676,0,499,4],[676,15,499,11],[676,20,499,4],[677,0,500,3],[680,35,502,15,"name"],[680,39],[680,41,502,21],[681,0,503,4],[681,12,503,8,"scope"],[681,17,503,13],[681,20,503,16],[681,24,503,4],[683,0,505,4],[683,11,505,7],[684,0,506,6],[684,14,506,10,"scope"],[684,19,506,15],[684,20,506,16,"references"],[684,30,506,10],[684,31,506,27,"name"],[684,35,506,10],[684,36,506,6],[684,38,506,34],[684,45,506,41],[684,49,506,34],[685,0,507,5],[685,9,505,4],[685,17,507,13,"scope"],[685,22,507,18],[685,25,507,21,"scope"],[685,30,507,26],[685,31,507,27,"parent"],[685,37,505,4],[687,0,509,4],[687,15,509,11],[687,20,509,4],[688,0,510,3],[691,29,512,9,"node"],[691,33],[691,35,512,15,"constantsOnly"],[691,48],[691,50,512,30],[692,0,513,4],[692,12,513,8,"t"],[692,13,513,9],[692,14,513,10,"isIdentifier"],[692,26,513,8],[692,27,513,23,"node"],[692,31,513,8],[692,32,513,4],[692,34,513,30],[693,0,514,6],[693,14,514,12,"binding"],[693,21,514,19],[693,24,514,22],[693,29,514,27,"getBinding"],[693,39,514,22],[693,40,514,38,"node"],[693,44,514,42],[693,45,514,43,"name"],[693,49,514,22],[693,50,514,6],[694,0,515,6],[694,14,515,10],[694,15,515,11,"binding"],[694,22,515,6],[694,24,515,20],[694,31,515,27],[694,36,515,20],[695,0,516,6],[695,14,516,10,"constantsOnly"],[695,27,516,6],[695,29,516,25],[695,36,516,32,"binding"],[695,43,516,39],[695,44,516,40,"constant"],[695,52,516,25],[696,0,517,6],[696,17,517,13],[696,21,517,6],[697,0,518,5],[697,9,513,4],[697,15,518,11],[697,19,518,15,"t"],[697,20,518,16],[697,21,518,17,"isClass"],[697,28,518,15],[697,29,518,25,"node"],[697,33,518,15],[697,34,518,11],[697,36,518,32],[698,0,519,6],[698,14,519,10,"node"],[698,18,519,14],[698,19,519,15,"superClass"],[698,29,519,10],[698,33,519,29],[698,34,519,30],[698,39,519,35,"isPure"],[698,45,519,30],[698,46,519,42,"node"],[698,50,519,46],[698,51,519,47,"superClass"],[698,61,519,30],[698,63,519,59,"constantsOnly"],[698,76,519,30],[698,77,519,6],[698,79,519,75],[699,0,520,8],[699,19,520,15],[699,24,520,8],[700,0,521,7],[702,0,523,6],[702,17,523,13],[702,22,523,18,"isPure"],[702,28,523,13],[702,29,523,25,"node"],[702,33,523,29],[702,34,523,30,"body"],[702,38,523,13],[702,40,523,36,"constantsOnly"],[702,53,523,13],[702,54,523,6],[703,0,524,5],[703,9,518,11],[703,15,524,11],[703,19,524,15,"t"],[703,20,524,16],[703,21,524,17,"isClassBody"],[703,32,524,15],[703,33,524,29,"node"],[703,37,524,15],[703,38,524,11],[703,40,524,36],[704,0,525,6],[704,33,525,27,"node"],[704,37,525,31],[704,38,525,32,"body"],[704,42,525,6],[704,216,525,38],[705,0,525,38],[707,0,525,38],[708,0,525,38],[709,0,525,38],[710,0,525,38],[711,0,525,38],[712,0,525,38],[713,0,525,38],[714,0,525,38],[716,0,525,38],[716,16,525,17,"method"],[716,23,525,38],[717,0,526,8],[717,16,526,12],[717,17,526,13],[717,22,526,18,"isPure"],[717,28,526,13],[717,29,526,25,"method"],[717,36,526,13],[717,38,526,33,"constantsOnly"],[717,51,526,13],[717,52,526,8],[717,54,526,49],[717,61,526,56],[717,66,526,49],[718,0,527,7],[720,0,529,6],[720,17,529,13],[720,21,529,6],[721,0,530,5],[721,9,524,11],[721,15,530,11],[721,19,530,15,"t"],[721,20,530,16],[721,21,530,17,"isBinary"],[721,29,530,15],[721,30,530,26,"node"],[721,34,530,15],[721,35,530,11],[721,37,530,33],[722,0,531,6],[722,17,531,13],[722,22,531,18,"isPure"],[722,28,531,13],[722,29,531,25,"node"],[722,33,531,29],[722,34,531,30,"left"],[722,38,531,13],[722,40,531,36,"constantsOnly"],[722,53,531,13],[722,58,531,54],[722,63,531,59,"isPure"],[722,69,531,54],[722,70,531,66,"node"],[722,74,531,70],[722,75,531,71,"right"],[722,80,531,54],[722,82,531,78,"constantsOnly"],[722,95,531,54],[722,96,531,6],[723,0,532,5],[723,9,530,11],[723,15,532,11],[723,19,532,15,"t"],[723,20,532,16],[723,21,532,17,"isArrayExpression"],[723,38,532,15],[723,39,532,35,"node"],[723,43,532,15],[723,44,532,11],[723,46,532,42],[724,0,533,6],[724,33,533,25,"node"],[724,37,533,29],[724,38,533,30,"elements"],[724,46,533,6],[724,220,533,40],[725,0,533,40],[727,0,533,40],[728,0,533,40],[729,0,533,40],[730,0,533,40],[731,0,533,40],[732,0,533,40],[733,0,533,40],[734,0,533,40],[736,0,533,40],[736,16,533,17,"elem"],[736,21,533,40],[737,0,534,8],[737,16,534,12],[737,17,534,13],[737,22,534,18,"isPure"],[737,28,534,13],[737,29,534,25,"elem"],[737,34,534,13],[737,36,534,31,"constantsOnly"],[737,49,534,13],[737,50,534,8],[737,52,534,47],[737,59,534,54],[737,64,534,47],[738,0,535,7],[740,0,537,6],[740,17,537,13],[740,21,537,6],[741,0,538,5],[741,9,532,11],[741,15,538,11],[741,19,538,15,"t"],[741,20,538,16],[741,21,538,17,"isObjectExpression"],[741,39,538,15],[741,40,538,36,"node"],[741,44,538,15],[741,45,538,11],[741,47,538,43],[742,0,539,6],[742,33,539,25,"node"],[742,37,539,29],[742,38,539,30,"properties"],[742,48,539,6],[742,222,539,42],[743,0,539,42],[745,0,539,42],[746,0,539,42],[747,0,539,42],[748,0,539,42],[749,0,539,42],[750,0,539,42],[751,0,539,42],[752,0,539,42],[754,0,539,42],[754,16,539,17,"prop"],[754,22,539,42],[755,0,540,8],[755,16,540,12],[755,17,540,13],[755,22,540,18,"isPure"],[755,28,540,13],[755,29,540,25,"prop"],[755,35,540,13],[755,37,540,31,"constantsOnly"],[755,50,540,13],[755,51,540,8],[755,53,540,47],[755,60,540,54],[755,65,540,47],[756,0,541,7],[758,0,543,6],[758,17,543,13],[758,21,543,6],[759,0,544,5],[759,9,538,11],[759,15,544,11],[759,19,544,15,"t"],[759,20,544,16],[759,21,544,17,"isClassMethod"],[759,34,544,15],[759,35,544,31,"node"],[759,39,544,15],[759,40,544,11],[759,42,544,38],[760,0,545,6],[760,14,545,10,"node"],[760,18,545,14],[760,19,545,15,"computed"],[760,27,545,10],[760,31,545,27],[760,32,545,28],[760,37,545,33,"isPure"],[760,43,545,28],[760,44,545,40,"node"],[760,48,545,44],[760,49,545,45,"key"],[760,52,545,28],[760,54,545,50,"constantsOnly"],[760,67,545,28],[760,68,545,6],[760,70,545,66],[760,77,545,73],[760,82,545,66],[761,0,546,6],[761,14,546,10,"node"],[761,18,546,14],[761,19,546,15,"kind"],[761,23,546,10],[761,28,546,24],[761,33,546,10],[761,37,546,33,"node"],[761,41,546,37],[761,42,546,38,"kind"],[761,46,546,33],[761,51,546,47],[761,56,546,6],[761,58,546,54],[761,65,546,61],[761,70,546,54],[762,0,547,6],[762,17,547,13],[762,21,547,6],[763,0,548,5],[763,9,544,11],[763,15,548,11],[763,19,548,15,"t"],[763,20,548,16],[763,21,548,17,"isProperty"],[763,31,548,15],[763,32,548,28,"node"],[763,36,548,15],[763,37,548,11],[763,39,548,35],[764,0,549,6],[764,14,549,10,"node"],[764,18,549,14],[764,19,549,15,"computed"],[764,27,549,10],[764,31,549,27],[764,32,549,28],[764,37,549,33,"isPure"],[764,43,549,28],[764,44,549,40,"node"],[764,48,549,44],[764,49,549,45,"key"],[764,52,549,28],[764,54,549,50,"constantsOnly"],[764,67,549,28],[764,68,549,6],[764,70,549,66],[764,77,549,73],[764,82,549,66],[765,0,550,6],[765,17,550,13],[765,22,550,18,"isPure"],[765,28,550,13],[765,29,550,25,"node"],[765,33,550,29],[765,34,550,30,"value"],[765,39,550,13],[765,41,550,37,"constantsOnly"],[765,54,550,13],[765,55,550,6],[766,0,551,5],[766,9,548,11],[766,15,551,11],[766,19,551,15,"t"],[766,20,551,16],[766,21,551,17,"isUnaryExpression"],[766,38,551,15],[766,39,551,35,"node"],[766,43,551,15],[766,44,551,11],[766,46,551,42],[767,0,552,6],[767,17,552,13],[767,22,552,18,"isPure"],[767,28,552,13],[767,29,552,25,"node"],[767,33,552,29],[767,34,552,30,"argument"],[767,42,552,13],[767,44,552,40,"constantsOnly"],[767,57,552,13],[767,58,552,6],[768,0,553,5],[768,9,551,11],[768,15,553,11],[768,19,553,15,"t"],[768,20,553,16],[768,21,553,17,"isTaggedTemplateExpression"],[768,47,553,15],[768,48,553,44,"node"],[768,52,553,15],[768,53,553,11],[768,55,553,51],[769,0,554,6],[769,17,554,13,"t"],[769,18,554,14],[769,19,554,15,"matchesPattern"],[769,33,554,13],[769,34,554,30,"node"],[769,38,554,34],[769,39,554,35,"tag"],[769,42,554,13],[769,44,554,40],[769,56,554,13],[769,61,554,57],[769,62,554,58],[769,67,554,63,"hasBinding"],[769,77,554,58],[769,78,554,74],[769,86,554,58],[769,88,554,84],[769,92,554,58],[769,93,554,13],[769,97,554,93],[769,102,554,98,"isPure"],[769,108,554,93],[769,109,554,105,"node"],[769,113,554,109],[769,114,554,110,"quasi"],[769,119,554,93],[769,121,554,117,"constantsOnly"],[769,134,554,93],[769,135,554,6],[770,0,555,5],[770,9,553,11],[770,15,555,11],[770,19,555,15,"t"],[770,20,555,16],[770,21,555,17,"isTemplateLiteral"],[770,38,555,15],[770,39,555,35,"node"],[770,43,555,15],[770,44,555,11],[770,46,555,42],[771,0,556,6],[771,33,556,31,"node"],[771,37,556,35],[771,38,556,36,"expressions"],[771,49,556,6],[771,223,556,49],[772,0,556,49],[774,0,556,49],[775,0,556,49],[776,0,556,49],[777,0,556,49],[778,0,556,49],[779,0,556,49],[780,0,556,49],[781,0,556,49],[783,0,556,49],[783,16,556,17,"expression"],[783,27,556,49],[784,0,557,8],[784,16,557,12],[784,17,557,13],[784,22,557,18,"isPure"],[784,28,557,13],[784,29,557,25,"expression"],[784,40,557,13],[784,42,557,37,"constantsOnly"],[784,55,557,13],[784,56,557,8],[784,58,557,53],[784,65,557,60],[784,70,557,53],[785,0,558,7],[787,0,560,6],[787,17,560,13],[787,21,560,6],[788,0,561,5],[788,9,555,11],[788,15,561,11],[789,0,562,6],[789,17,562,13,"t"],[789,18,562,14],[789,19,562,15,"isPureish"],[789,28,562,13],[789,29,562,25,"node"],[789,33,562,13],[789,34,562,6],[790,0,563,5],[791,0,564,3],[794,30,566,10,"key"],[794,33],[794,35,566,15,"val"],[794,38],[794,40,566,20],[795,0,567,4],[795,15,567,11],[795,20,567,16,"data"],[795,24,567,11],[795,25,567,21,"key"],[795,28,567,11],[795,32,567,28,"val"],[795,35,567,4],[796,0,568,3],[799,30,570,10,"key"],[799,33],[799,35,570,15],[800,0,571,4],[800,12,571,8,"scope"],[800,17,571,13],[800,20,571,16],[800,24,571,4],[802,0,573,4],[802,11,573,7],[803,0,574,6],[803,14,574,12,"data"],[803,18,574,16],[803,21,574,19,"scope"],[803,26,574,24],[803,27,574,25,"data"],[803,31,574,19],[803,32,574,30,"key"],[803,35,574,19],[803,36,574,6],[804,0,575,6],[804,14,575,10,"data"],[804,18,575,14],[804,22,575,18],[804,26,575,6],[804,28,575,24],[804,35,575,31,"data"],[804,39,575,24],[805,0,576,5],[805,9,573,4],[805,17,576,13,"scope"],[805,22,576,18],[805,25,576,21,"scope"],[805,30,576,26],[805,31,576,27,"parent"],[805,37,573,4],[806,0,577,3],[809,33,579,13,"key"],[809,36],[809,38,579,18],[810,0,580,4],[810,12,580,8,"scope"],[810,17,580,13],[810,20,580,16],[810,24,580,4],[812,0,582,4],[812,11,582,7],[813,0,583,6],[813,14,583,12,"data"],[813,18,583,16],[813,21,583,19,"scope"],[813,26,583,24],[813,27,583,25,"data"],[813,31,583,19],[813,32,583,30,"key"],[813,35,583,19],[813,36,583,6],[814,0,584,6],[814,14,584,10,"data"],[814,18,584,14],[814,22,584,18],[814,26,584,6],[814,28,584,24,"scope"],[814,33,584,29],[814,34,584,30,"data"],[814,38,584,24],[814,39,584,35,"key"],[814,42,584,24],[814,46,584,42],[814,50,584,24],[815,0,585,5],[815,9,582,4],[815,17,585,13,"scope"],[815,22,585,18],[815,25,585,21,"scope"],[815,30,585,26],[815,31,585,27,"parent"],[815,37,582,4],[816,0,586,3],[819,29,588,9],[820,0,589,4],[820,12,589,8],[820,13,589,9],[820,18,589,14,"references"],[820,28,589,4],[820,30,589,26],[820,35,589,31,"crawl"],[820,40,589,26],[821,0,590,3],[824,30,592,10],[825,0,593,4],[825,12,593,10,"path"],[825,16,593,14],[825,19,593,17],[825,24,593,22,"path"],[825,28,593,4],[826,0,594,4],[826,13,594,9,"references"],[826,23,594,4],[826,26,594,22,"Object"],[826,32,594,28],[826,33,594,29,"create"],[826,39,594,22],[826,40,594,36],[826,44,594,22],[826,45,594,4],[827,0,595,4],[827,13,595,9,"bindings"],[827,21,595,4],[827,24,595,20,"Object"],[827,30,595,26],[827,31,595,27,"create"],[827,37,595,20],[827,38,595,34],[827,42,595,20],[827,43,595,4],[828,0,596,4],[828,13,596,9,"globals"],[828,20,596,4],[828,23,596,19,"Object"],[828,29,596,25],[828,30,596,26,"create"],[828,36,596,19],[828,37,596,33],[828,41,596,19],[828,42,596,4],[829,0,597,4],[829,13,597,9,"uids"],[829,17,597,4],[829,20,597,16,"Object"],[829,26,597,22],[829,27,597,23,"create"],[829,33,597,16],[829,34,597,30],[829,38,597,16],[829,39,597,4],[830,0,598,4],[830,13,598,9,"data"],[830,17,598,4],[830,20,598,16,"Object"],[830,26,598,22],[830,27,598,23,"create"],[830,33,598,16],[830,34,598,30],[830,38,598,16],[830,39,598,4],[832,0,600,4],[832,12,600,8,"path"],[832,16,600,12],[832,17,600,13,"isLoop"],[832,23,600,8],[832,25,600,4],[832,27,600,23],[833,0,601,6],[833,33,601,24,"t"],[833,34,601,25],[833,35,601,26,"FOR_INIT_KEYS"],[833,48,601,6],[833,222,601,41],[834,0,601,41],[836,0,601,41],[837,0,601,41],[838,0,601,41],[839,0,601,41],[840,0,601,41],[841,0,601,41],[842,0,601,41],[843,0,601,41],[845,0,601,41],[845,16,601,17,"key"],[845,21,601,41],[847,0,602,8],[847,16,602,14,"node"],[847,21,602,18],[847,24,602,21,"path"],[847,28,602,25],[847,29,602,26,"get"],[847,32,602,21],[847,33,602,30,"key"],[847,38,602,21],[847,39,602,8],[849,0,603,8],[849,16,603,12,"node"],[849,21,603,16],[849,22,603,17,"isBlockScoped"],[849,35,603,12],[849,37,603,8],[849,39,603,34],[849,44,603,39,"registerBinding"],[849,59,603,34],[849,60,603,55,"node"],[849,65,603,59],[849,66,603,60,"node"],[849,70,603,55],[849,71,603,65,"kind"],[849,75,603,34],[849,77,603,71,"node"],[849,82,603,34],[850,0,604,7],[851,0,605,5],[853,0,607,4],[853,12,607,8,"path"],[853,16,607,12],[853,17,607,13,"isFunctionExpression"],[853,37,607,8],[853,43,607,39,"path"],[853,47,607,43],[853,48,607,44,"has"],[853,51,607,39],[853,52,607,48],[853,56,607,39],[853,57,607,4],[853,59,607,55],[854,0,608,6],[854,14,608,10],[854,15,608,11,"path"],[854,19,608,15],[854,20,608,16,"get"],[854,23,608,11],[854,24,608,20],[854,28,608,11],[854,30,608,26,"node"],[854,34,608,11],[854,35,608,31,"t"],[854,36,608,32],[854,37,608,33,"NOT_LOCAL_BINDING"],[854,54,608,11],[854,55,608,6],[854,57,608,53],[855,0,609,8],[855,17,609,13,"registerBinding"],[855,32,609,8],[855,33,609,29],[855,40,609,8],[855,42,609,38,"path"],[855,46,609,42],[855,47,609,43,"get"],[855,50,609,38],[855,51,609,47],[855,55,609,38],[855,56,609,8],[855,58,609,54,"path"],[855,62,609,8],[856,0,610,7],[857,0,611,5],[859,0,613,4],[859,12,613,8,"path"],[859,16,613,12],[859,17,613,13,"isClassExpression"],[859,34,613,8],[859,40,613,36,"path"],[859,44,613,40],[859,45,613,41,"has"],[859,48,613,36],[859,49,613,45],[859,53,613,36],[859,54,613,4],[859,56,613,52],[860,0,614,6],[860,14,614,10],[860,15,614,11,"path"],[860,19,614,15],[860,20,614,16,"get"],[860,23,614,11],[860,24,614,20],[860,28,614,11],[860,30,614,26,"node"],[860,34,614,11],[860,35,614,31,"t"],[860,36,614,32],[860,37,614,33,"NOT_LOCAL_BINDING"],[860,54,614,11],[860,55,614,6],[860,57,614,53],[861,0,615,8],[861,17,615,13,"registerBinding"],[861,32,615,8],[861,33,615,29],[861,40,615,8],[861,42,615,38,"path"],[861,46,615,8],[862,0,616,7],[863,0,617,5],[865,0,619,4],[865,12,619,8,"path"],[865,16,619,12],[865,17,619,13,"isFunction"],[865,27,619,8],[865,29,619,4],[865,31,619,27],[866,0,620,6],[866,14,620,12,"params"],[866,20,620,18],[866,23,620,21,"path"],[866,27,620,25],[866,28,620,26,"get"],[866,31,620,21],[866,32,620,30],[866,40,620,21],[866,41,620,6],[868,0,622,6],[868,33,622,26,"params"],[868,39,622,6],[868,213,622,34],[869,0,622,34],[871,0,622,34],[872,0,622,34],[873,0,622,34],[874,0,622,34],[875,0,622,34],[876,0,622,34],[877,0,622,34],[878,0,622,34],[880,0,622,34],[880,16,622,17,"param"],[880,22,622,34],[881,0,623,8],[881,17,623,13,"registerBinding"],[881,32,623,8],[881,33,623,29],[881,40,623,8],[881,42,623,38,"param"],[881,48,623,8],[882,0,624,7],[883,0,625,5],[885,0,627,4],[885,12,627,8,"path"],[885,16,627,12],[885,17,627,13,"isCatchClause"],[885,30,627,8],[885,32,627,4],[885,34,627,30],[886,0,628,6],[886,15,628,11,"registerBinding"],[886,30,628,6],[886,31,628,27],[886,36,628,6],[886,38,628,34,"path"],[886,42,628,6],[887,0,629,5],[889,0,631,4],[889,12,631,10,"parent"],[889,18,631,16],[889,21,631,19],[889,26,631,24,"getProgramParent"],[889,42,631,19],[889,44,631,4],[890,0,632,4],[890,12,632,8,"parent"],[890,18,632,14],[890,19,632,15,"crawling"],[890,27,632,4],[890,29,632,25],[891,0,633,4],[891,12,633,10,"state"],[891,17,633,15],[891,20,633,18],[892,0,634,6,"references"],[892,10,634,6,"references"],[892,20,634,16],[892,22,634,18],[892,24,633,18],[893,0,635,6,"constantViolations"],[893,10,635,6,"constantViolations"],[893,28,635,24],[893,30,635,26],[893,32,633,18],[894,0,636,6,"assignments"],[894,10,636,6,"assignments"],[894,21,636,17],[894,23,636,19],[895,0,633,18],[895,9,633,4],[896,0,638,4],[896,13,638,9,"crawling"],[896,21,638,4],[896,24,638,20],[896,28,638,4],[897,0,639,4,"path"],[897,8,639,4,"path"],[897,12,639,8],[897,13,639,9,"traverse"],[897,21,639,4],[897,22,639,18,"collectorVisitor"],[897,38,639,4],[897,40,639,36,"state"],[897,45,639,4],[898,0,640,4],[898,13,640,9,"crawling"],[898,21,640,4],[898,24,640,20],[898,29,640,4],[900,0,642,4],[900,31,642,23,"state"],[900,36,642,28],[900,37,642,29,"assignments"],[900,48,642,4],[900,222,642,42],[901,0,642,42],[903,0,642,42],[904,0,642,42],[905,0,642,42],[906,0,642,42],[907,0,642,42],[908,0,642,42],[909,0,642,42],[910,0,642,42],[912,0,642,42],[912,14,642,15,"path"],[912,20,642,42],[914,0,643,6],[914,14,643,12,"ids"],[914,18,643,15],[914,21,643,18,"path"],[914,27,643,22],[914,28,643,23,"getBindingIdentifiers"],[914,49,643,18],[914,51,643,6],[916,0,644,6],[916,14,644,10,"programParent"],[916,28,644,23],[916,37,644,6],[918,0,646,6],[918,45,646,25,"Object"],[918,51,646,31],[918,52,646,32,"keys"],[918,56,646,25],[918,57,646,37,"ids"],[918,61,646,25],[918,62,646,6],[918,101,646,43],[919,0,646,11],[919,16,646,17,"name"],[919,20,646,21],[919,42,646,11],[920,0,647,8],[920,16,647,12,"path"],[920,22,647,16],[920,23,647,17,"scope"],[920,28,647,12],[920,29,647,23,"getBinding"],[920,39,647,12],[920,40,647,34,"name"],[920,44,647,12],[920,45,647,8],[920,47,647,41],[921,0,648,8,"programParent"],[921,12,648,8,"programParent"],[921,26,648,21],[921,29,648,24,"programParent"],[921,43,648,37],[921,47,648,41,"path"],[921,53,648,45],[921,54,648,46,"scope"],[921,59,648,41],[921,60,648,52,"getProgramParent"],[921,76,648,41],[921,78,648,8],[923,0,649,8,"programParent"],[923,12,649,8,"programParent"],[923,26,649,21],[923,27,649,22,"addGlobal"],[923,36,649,8],[923,37,649,32,"ids"],[923,41,649,35],[923,42,649,36,"name"],[923,46,649,35],[923,47,649,8],[924,0,650,7],[926,0,652,6,"path"],[926,10,652,6,"path"],[926,16,652,10],[926,17,652,11,"scope"],[926,22,652,6],[926,23,652,17,"registerConstantViolation"],[926,48,652,6],[926,49,652,43,"path"],[926,55,652,6],[927,0,653,5],[929,0,655,4],[929,31,655,22,"state"],[929,36,655,27],[929,37,655,28,"references"],[929,47,655,4],[929,221,655,40],[930,0,655,40],[932,0,655,40],[933,0,655,40],[934,0,655,40],[935,0,655,40],[936,0,655,40],[937,0,655,40],[938,0,655,40],[939,0,655,40],[941,0,655,40],[941,14,655,15,"ref"],[941,20,655,40],[943,0,656,6],[943,14,656,12,"binding"],[943,23,656,19],[943,26,656,22,"ref"],[943,32,656,25],[943,33,656,26,"scope"],[943,38,656,22],[943,39,656,32,"getBinding"],[943,49,656,22],[943,50,656,43,"ref"],[943,56,656,46],[943,57,656,47,"node"],[943,61,656,43],[943,62,656,52,"name"],[943,66,656,22],[943,67,656,6],[945,0,658,6],[945,14,658,10,"binding"],[945,23,658,6],[945,25,658,19],[946,0,659,8,"binding"],[946,12,659,8,"binding"],[946,21,659,15],[946,22,659,16,"reference"],[946,31,659,8],[946,32,659,26,"ref"],[946,38,659,8],[947,0,660,7],[947,11,658,6],[947,17,660,13],[948,0,661,8,"ref"],[948,12,661,8,"ref"],[948,18,661,11],[948,19,661,12,"scope"],[948,24,661,8],[948,25,661,18,"getProgramParent"],[948,41,661,8],[948,44,661,37,"addGlobal"],[948,53,661,8],[948,54,661,47,"ref"],[948,60,661,50],[948,61,661,51,"node"],[948,65,661,8],[949,0,662,7],[950,0,663,5],[952,0,665,4],[952,31,665,23,"state"],[952,36,665,28],[952,37,665,29,"constantViolations"],[952,55,665,4],[952,229,665,49],[953,0,665,49],[955,0,665,49],[956,0,665,49],[957,0,665,49],[958,0,665,49],[959,0,665,49],[960,0,665,49],[961,0,665,49],[962,0,665,49],[964,0,665,49],[964,14,665,15,"path"],[964,20,665,49],[966,0,666,6,"path"],[966,10,666,6,"path"],[966,16,666,10],[966,17,666,11,"scope"],[966,22,666,6],[966,23,666,17,"registerConstantViolation"],[966,48,666,6],[966,49,666,43,"path"],[966,55,666,6],[967,0,667,5],[968,0,668,3],[971,27,670,7,"opts"],[971,31],[971,33,670,13],[972,0,671,4],[972,12,671,8,"path"],[972,16,671,12],[972,19,671,15],[972,24,671,20,"path"],[972,28,671,4],[974,0,673,4],[974,12,673,8],[974,13,673,9,"path"],[974,17,673,13],[974,18,673,14,"isBlockStatement"],[974,34,673,9],[974,36,673,8],[974,40,673,36],[974,41,673,37,"path"],[974,45,673,41],[974,46,673,42,"isProgram"],[974,55,673,37],[974,57,673,4],[974,59,673,55],[975,0,674,6,"path"],[975,10,674,6,"path"],[975,14,674,10],[975,17,674,13],[975,22,674,18,"getBlockParent"],[975,36,674,13],[975,39,674,35,"path"],[975,43,674,6],[976,0,675,5],[978,0,677,4],[978,12,677,8,"path"],[978,16,677,12],[978,17,677,13,"isSwitchStatement"],[978,34,677,8],[978,36,677,4],[978,38,677,34],[979,0,678,6,"path"],[979,10,678,6,"path"],[979,14,678,10],[979,17,678,13],[979,18,678,14],[979,23,678,19,"getFunctionParent"],[979,40,678,14],[979,46,678,42],[979,51,678,47,"getProgramParent"],[979,67,678,42],[979,69,678,13],[979,71,678,67,"path"],[979,75,678,6],[980,0,679,5],[982,0,681,4],[982,12,681,8,"path"],[982,16,681,12],[982,17,681,13,"isLoop"],[982,23,681,8],[982,29,681,25,"path"],[982,33,681,29],[982,34,681,30,"isCatchClause"],[982,47,681,25],[982,49,681,8],[982,53,681,49,"path"],[982,57,681,53],[982,58,681,54,"isFunction"],[982,68,681,49],[982,70,681,4],[982,72,681,68],[983,0,682,6,"path"],[983,10,682,6,"path"],[983,14,682,10],[983,15,682,11,"ensureBlock"],[983,26,682,6],[984,0,683,6,"path"],[984,10,683,6,"path"],[984,14,683,10],[984,17,683,13,"path"],[984,21,683,17],[984,22,683,18,"get"],[984,25,683,13],[984,26,683,22],[984,32,683,13],[984,33,683,6],[985,0,684,5],[987,0,686,4],[987,12,686,10,"unique"],[987,18,686,16],[987,21,686,19,"opts"],[987,25,686,23],[987,26,686,24,"unique"],[987,32,686,4],[988,0,687,4],[988,12,687,10,"kind"],[988,16,687,14],[988,19,687,17,"opts"],[988,23,687,21],[988,24,687,22,"kind"],[988,28,687,17],[988,32,687,30],[988,37,687,4],[989,0,688,4],[989,12,688,10,"blockHoist"],[989,22,688,20],[989,25,688,23,"opts"],[989,29,688,27],[989,30,688,28,"_blockHoist"],[989,41,688,23],[989,45,688,43],[989,49,688,23],[989,52,688,50],[989,53,688,23],[989,56,688,54,"opts"],[989,60,688,58],[989,61,688,59,"_blockHoist"],[989,72,688,4],[990,0,689,4],[990,12,689,10,"dataKey"],[990,19,689,17],[990,39,689,35,"kind"],[990,43,689,17],[990,52,689,43,"blockHoist"],[990,62,689,4],[991,0,690,4],[991,12,690,8,"declarPath"],[991,22,690,18],[991,25,690,21],[991,26,690,22,"unique"],[991,32,690,21],[991,36,690,32,"path"],[991,40,690,36],[991,41,690,37,"getData"],[991,48,690,32],[991,49,690,45,"dataKey"],[991,56,690,32],[991,57,690,4],[993,0,692,4],[993,12,692,8],[993,13,692,9,"declarPath"],[993,23,692,4],[993,25,692,21],[994,0,693,6],[994,14,693,12,"declar"],[994,20,693,18],[994,23,693,21,"t"],[994,24,693,22],[994,25,693,23,"variableDeclaration"],[994,44,693,21],[994,45,693,43,"kind"],[994,49,693,21],[994,51,693,49],[994,53,693,21],[994,54,693,6],[995,0,694,6,"declar"],[995,10,694,6,"declar"],[995,16,694,12],[995,17,694,13,"_blockHoist"],[995,28,694,6],[995,31,694,27,"blockHoist"],[995,41,694,6],[997,0,692,21],[997,38,695,21,"path"],[997,42,695,25],[997,43,695,26,"unshiftContainer"],[997,59,695,21],[997,60,695,43],[997,66,695,21],[997,68,695,51],[997,69,695,52,"declar"],[997,75,695,51],[997,76,695,21],[997,77,692,21],[999,0,692,21],[1001,0,695,7,"declarPath"],[1001,10,695,7,"declarPath"],[1001,20,692,21],[1002,0,696,6],[1002,14,696,10],[1002,15,696,11,"unique"],[1002,21,696,6],[1002,23,696,19,"path"],[1002,27,696,23],[1002,28,696,24,"setData"],[1002,35,696,19],[1002,36,696,32,"dataKey"],[1002,43,696,19],[1002,45,696,41,"declarPath"],[1002,55,696,19],[1003,0,697,5],[1005,0,699,4],[1005,12,699,10,"declarator"],[1005,22,699,20],[1005,25,699,23,"t"],[1005,26,699,24],[1005,27,699,25,"variableDeclarator"],[1005,45,699,23],[1005,46,699,44,"opts"],[1005,50,699,48],[1005,51,699,49,"id"],[1005,53,699,23],[1005,55,699,53,"opts"],[1005,59,699,57],[1005,60,699,58,"init"],[1005,64,699,23],[1005,65,699,4],[1006,0,700,4,"declarPath"],[1006,8,700,4,"declarPath"],[1006,18,700,14],[1006,19,700,15,"node"],[1006,23,700,4],[1006,24,700,20,"declarations"],[1006,36,700,4],[1006,37,700,33,"push"],[1006,41,700,4],[1006,42,700,38,"declarator"],[1006,52,700,4],[1007,0,701,4],[1007,13,701,9,"registerBinding"],[1007,28,701,4],[1007,29,701,25,"kind"],[1007,33,701,4],[1007,35,701,31,"declarPath"],[1007,45,701,41],[1007,46,701,42,"get"],[1007,49,701,31],[1007,50,701,46],[1007,64,701,31],[1007,66,701,62,"pop"],[1007,69,701,31],[1007,71,701,4],[1008,0,702,3],[1011,41,704,21],[1012,0,705,4],[1012,12,705,8,"scope"],[1012,17,705,13],[1012,20,705,16],[1012,24,705,4],[1014,0,707,4],[1014,11,707,7],[1015,0,708,6],[1015,14,708,10,"scope"],[1015,19,708,15],[1015,20,708,16,"path"],[1015,24,708,10],[1015,25,708,21,"isProgram"],[1015,34,708,10],[1015,36,708,6],[1015,38,708,34],[1016,0,709,8],[1016,19,709,15,"scope"],[1016,24,709,8],[1017,0,710,7],[1018,0,711,5],[1018,9,707,4],[1018,17,711,13,"scope"],[1018,22,711,18],[1018,25,711,21,"scope"],[1018,30,711,26],[1018,31,711,27,"parent"],[1018,37,707,4],[1020,0,713,4],[1020,14,713,10],[1020,18,713,14,"Error"],[1020,23,713,10],[1020,24,713,20],[1020,49,713,10],[1020,50,713,4],[1021,0,714,3],[1024,42,716,22],[1025,0,717,4],[1025,12,717,8,"scope"],[1025,17,717,13],[1025,20,717,16],[1025,24,717,4],[1027,0,719,4],[1027,11,719,7],[1028,0,720,6],[1028,14,720,10,"scope"],[1028,19,720,15],[1028,20,720,16,"path"],[1028,24,720,10],[1028,25,720,21,"isFunctionParent"],[1028,41,720,10],[1028,43,720,6],[1028,45,720,41],[1029,0,721,8],[1029,19,721,15,"scope"],[1029,24,721,8],[1030,0,722,7],[1031,0,723,5],[1031,9,719,4],[1031,17,723,13,"scope"],[1031,22,723,18],[1031,25,723,21,"scope"],[1031,30,723,26],[1031,31,723,27,"parent"],[1031,37,719,4],[1033,0,725,4],[1033,15,725,11],[1033,19,725,4],[1034,0,726,3],[1037,39,728,19],[1038,0,729,4],[1038,12,729,8,"scope"],[1038,17,729,13],[1038,20,729,16],[1038,24,729,4],[1040,0,731,4],[1040,11,731,7],[1041,0,732,6],[1041,14,732,10,"scope"],[1041,19,732,15],[1041,20,732,16,"path"],[1041,24,732,10],[1041,25,732,21,"isBlockParent"],[1041,38,732,10],[1041,40,732,6],[1041,42,732,38],[1042,0,733,8],[1042,19,733,15,"scope"],[1042,24,733,8],[1043,0,734,7],[1044,0,735,5],[1044,9,731,4],[1044,17,735,13,"scope"],[1044,22,735,18],[1044,25,735,21,"scope"],[1044,30,735,26],[1044,31,735,27,"parent"],[1044,37,731,4],[1046,0,737,4],[1046,14,737,10],[1046,18,737,14,"Error"],[1046,23,737,10],[1046,24,737,20],[1046,102,737,10],[1046,103,737,4],[1047,0,738,3],[1050,39,740,19],[1051,0,741,4],[1051,12,741,10,"ids"],[1051,15,741,13],[1051,18,741,16,"Object"],[1051,24,741,22],[1051,25,741,23,"create"],[1051,31,741,16],[1051,32,741,30],[1051,36,741,16],[1051,37,741,4],[1052,0,742,4],[1052,12,742,8,"scope"],[1052,17,742,13],[1052,20,742,16],[1052,24,742,4],[1054,0,744,4],[1054,11,744,7],[1055,0,745,6],[1055,11,745,7],[1055,14,745,10,"_defaults"],[1055,23,745,19],[1055,24,745,20,"default"],[1055,31,745,6],[1055,33,745,29,"ids"],[1055,36,745,6],[1055,38,745,34,"scope"],[1055,43,745,39],[1055,44,745,40,"bindings"],[1055,52,745,6],[1056,0,746,6,"scope"],[1056,10,746,6,"scope"],[1056,15,746,11],[1056,18,746,14,"scope"],[1056,23,746,19],[1056,24,746,20,"parent"],[1056,30,746,6],[1057,0,747,5],[1057,9,744,4],[1057,17,747,13,"scope"],[1057,22,744,4],[1059,0,749,4],[1059,15,749,11,"ids"],[1059,18,749,4],[1060,0,750,3],[1063,45,752,25],[1064,0,753,4],[1064,12,753,10,"ids"],[1064,15,753,13],[1064,18,753,16,"Object"],[1064,24,753,22],[1064,25,753,23,"create"],[1064,31,753,16],[1064,32,753,30],[1064,36,753,16],[1064,37,753,4],[1066,0,755,4],[1066,31,755,23,"arguments"],[1066,40,755,4],[1066,214,755,34],[1067,0,755,34],[1069,0,755,34],[1070,0,755,34],[1071,0,755,34],[1072,0,755,34],[1073,0,755,34],[1074,0,755,34],[1075,0,755,34],[1076,0,755,34],[1078,0,755,34],[1078,14,755,15,"kind"],[1078,19,755,34],[1080,0,756,6],[1080,14,756,10,"scope"],[1080,20,756,15],[1080,23,756,18],[1080,27,756,6],[1082,0,758,6],[1082,13,758,9],[1083,0,759,8],[1083,47,759,27,"Object"],[1083,53,759,33],[1083,54,759,34,"keys"],[1083,58,759,27],[1083,59,759,39,"scope"],[1083,65,759,44],[1083,66,759,45,"bindings"],[1083,74,759,27],[1083,75,759,8],[1083,114,759,56],[1084,0,759,13],[1084,18,759,19,"name"],[1084,22,759,23],[1084,44,759,13],[1085,0,760,10],[1085,18,760,16,"binding"],[1085,25,760,23],[1085,28,760,26,"scope"],[1085,34,760,31],[1085,35,760,32,"bindings"],[1085,43,760,26],[1085,44,760,41,"name"],[1085,48,760,26],[1085,49,760,10],[1086,0,761,10],[1086,18,761,14,"binding"],[1086,25,761,21],[1086,26,761,22,"kind"],[1086,30,761,14],[1086,35,761,31,"kind"],[1086,40,761,10],[1086,42,761,37,"ids"],[1086,45,761,40],[1086,46,761,41,"name"],[1086,50,761,40],[1086,51,761,37],[1086,54,761,49,"binding"],[1086,61,761,37],[1087,0,762,9],[1089,0,764,8,"scope"],[1089,12,764,8,"scope"],[1089,18,764,13],[1089,21,764,16,"scope"],[1089,27,764,21],[1089,28,764,22,"parent"],[1089,34,764,8],[1090,0,765,7],[1090,11,758,6],[1090,19,765,15,"scope"],[1090,25,758,6],[1091,0,766,5],[1093,0,768,4],[1093,15,768,11,"ids"],[1093,18,768,4],[1094,0,769,3],[1097,46,771,26,"name"],[1097,50],[1097,52,771,32,"node"],[1097,56],[1097,58,771,38],[1098,0,772,4],[1098,15,772,11],[1098,20,772,16,"getBindingIdentifier"],[1098,40,772,11],[1098,41,772,37,"name"],[1098,45,772,11],[1098,51,772,47,"node"],[1098,55,772,4],[1099,0,773,3],[1102,33,775,13,"name"],[1102,37],[1102,39,775,19],[1103,0,776,4],[1103,12,776,8,"scope"],[1103,17,776,13],[1103,20,776,16],[1103,24,776,4],[1105,0,778,4],[1105,11,778,7],[1106,0,779,6],[1106,14,779,12,"binding"],[1106,21,779,19],[1106,24,779,22,"scope"],[1106,29,779,27],[1106,30,779,28,"getOwnBinding"],[1106,43,779,22],[1106,44,779,42,"name"],[1106,48,779,22],[1106,49,779,6],[1107,0,780,6],[1107,14,780,10,"binding"],[1107,21,780,6],[1107,23,780,19],[1107,30,780,26,"binding"],[1107,37,780,19],[1108,0,781,5],[1108,9,778,4],[1108,17,781,13,"scope"],[1108,22,781,18],[1108,25,781,21,"scope"],[1108,30,781,26],[1108,31,781,27,"parent"],[1108,37,778,4],[1109,0,782,3],[1112,36,784,16,"name"],[1112,40],[1112,42,784,22],[1113,0,785,4],[1113,15,785,11],[1113,20,785,16,"bindings"],[1113,28,785,11],[1113,29,785,25,"name"],[1113,33,785,11],[1113,34,785,4],[1114,0,786,3],[1117,43,788,23,"name"],[1117,47],[1117,49,788,29],[1118,0,789,4],[1118,12,789,10,"info"],[1118,16,789,14],[1118,19,789,17],[1118,24,789,22,"getBinding"],[1118,34,789,17],[1118,35,789,33,"name"],[1118,39,789,17],[1118,40,789,4],[1119,0,790,4],[1119,15,790,11,"info"],[1119,19,790,15],[1119,23,790,19,"info"],[1119,27,790,23],[1119,28,790,24,"identifier"],[1119,38,790,4],[1120,0,791,3],[1123,46,793,26,"name"],[1123,50],[1123,52,793,32],[1124,0,794,4],[1124,12,794,10,"binding"],[1124,19,794,17],[1124,22,794,20],[1124,27,794,25,"bindings"],[1124,35,794,20],[1124,36,794,34,"name"],[1124,40,794,20],[1124,41,794,4],[1125,0,795,4],[1125,15,795,11,"binding"],[1125,22,795,18],[1125,26,795,22,"binding"],[1125,33,795,29],[1125,34,795,30,"identifier"],[1125,44,795,4],[1126,0,796,3],[1129,36,798,16,"name"],[1129,40],[1129,42,798,22],[1130,0,799,4],[1130,15,799,11],[1130,16,799,12],[1130,17,799,13],[1130,22,799,18,"getOwnBinding"],[1130,35,799,13],[1130,36,799,32,"name"],[1130,40,799,13],[1130,41,799,4],[1131,0,800,3],[1134,33,802,13,"name"],[1134,37],[1134,39,802,19,"noGlobals"],[1134,48],[1134,50,802,30],[1135,0,803,4],[1135,12,803,8],[1135,13,803,9,"name"],[1135,17,803,4],[1135,19,803,15],[1135,26,803,22],[1135,31,803,15],[1136,0,804,4],[1136,12,804,8],[1136,17,804,13,"hasOwnBinding"],[1136,30,804,8],[1136,31,804,27,"name"],[1136,35,804,8],[1136,36,804,4],[1136,38,804,34],[1136,45,804,41],[1136,49,804,34],[1137,0,805,4],[1137,12,805,8],[1137,17,805,13,"parentHasBinding"],[1137,33,805,8],[1137,34,805,30,"name"],[1137,38,805,8],[1137,40,805,36,"noGlobals"],[1137,49,805,8],[1137,50,805,4],[1137,52,805,48],[1137,59,805,55],[1137,63,805,48],[1138,0,806,4],[1138,12,806,8],[1138,17,806,13,"hasUid"],[1138,23,806,8],[1138,24,806,20,"name"],[1138,28,806,8],[1138,29,806,4],[1138,31,806,27],[1138,38,806,34],[1138,42,806,27],[1139,0,807,4],[1139,12,807,8],[1139,13,807,9,"noGlobals"],[1139,22,807,8],[1139,26,807,22],[1139,27,807,23],[1139,30,807,26,"_includes"],[1139,39,807,35],[1139,40,807,36,"default"],[1139,47,807,22],[1139,49,807,45,"Scope"],[1139,54,807,50],[1139,55,807,51,"globals"],[1139,62,807,22],[1139,64,807,60,"name"],[1139,68,807,22],[1139,69,807,4],[1139,71,807,67],[1139,78,807,74],[1139,82,807,67],[1140,0,808,4],[1140,12,808,8],[1140,13,808,9,"noGlobals"],[1140,22,808,8],[1140,26,808,22],[1140,27,808,23],[1140,30,808,26,"_includes"],[1140,39,808,35],[1140,40,808,36,"default"],[1140,47,808,22],[1140,49,808,45,"Scope"],[1140,54,808,50],[1140,55,808,51,"contextVariables"],[1140,71,808,22],[1140,73,808,69,"name"],[1140,77,808,22],[1140,78,808,4],[1140,80,808,76],[1140,87,808,83],[1140,91,808,76],[1141,0,809,4],[1141,15,809,11],[1141,20,809,4],[1142,0,810,3],[1145,39,812,19,"name"],[1145,43],[1145,45,812,25,"noGlobals"],[1145,54],[1145,56,812,36],[1146,0,813,4],[1146,15,813,11],[1146,20,813,16,"parent"],[1146,26,813,11],[1146,30,813,26],[1146,35,813,31,"parent"],[1146,41,813,26],[1146,42,813,38,"hasBinding"],[1146,52,813,26],[1146,53,813,49,"name"],[1146,57,813,26],[1146,59,813,55,"noGlobals"],[1146,68,813,26],[1146,69,813,4],[1147,0,814,3],[1150,36,816,16,"name"],[1150,40],[1150,42,816,22,"scope"],[1150,47],[1150,49,816,29],[1151,0,817,4],[1151,12,817,10,"info"],[1151,16,817,14],[1151,19,817,17],[1151,24,817,22,"getBinding"],[1151,34,817,17],[1151,35,817,33,"name"],[1151,39,817,17],[1151,40,817,4],[1153,0,819,4],[1153,12,819,8,"info"],[1153,16,819,4],[1153,18,819,14],[1154,0,820,6,"info"],[1154,10,820,6,"info"],[1154,14,820,10],[1154,15,820,11,"scope"],[1154,20,820,6],[1154,21,820,17,"removeOwnBinding"],[1154,37,820,6],[1154,38,820,34,"name"],[1154,42,820,6],[1155,0,821,6,"info"],[1155,10,821,6,"info"],[1155,14,821,10],[1155,15,821,11,"scope"],[1155,20,821,6],[1155,23,821,19,"scope"],[1155,28,821,6],[1156,0,822,6,"scope"],[1156,10,822,6,"scope"],[1156,15,822,11],[1156,16,822,12,"bindings"],[1156,24,822,6],[1156,25,822,21,"name"],[1156,29,822,6],[1156,33,822,29,"info"],[1156,37,822,6],[1157,0,823,5],[1158,0,824,3],[1161,39,826,19,"name"],[1161,43],[1161,45,826,25],[1162,0,827,4],[1162,15,827,11],[1162,20,827,16,"bindings"],[1162,28,827,11],[1162,29,827,25,"name"],[1162,33,827,11],[1162,34,827,4],[1163,0,828,3],[1166,36,830,16,"name"],[1166,40],[1166,42,830,22],[1167,0,831,4],[1167,12,831,10,"info"],[1167,16,831,14],[1167,19,831,17],[1167,24,831,22,"getBinding"],[1167,34,831,17],[1167,35,831,33,"name"],[1167,39,831,17],[1167,40,831,4],[1169,0,833,4],[1169,12,833,8,"info"],[1169,16,833,4],[1169,18,833,14],[1170,0,834,6,"info"],[1170,10,834,6,"info"],[1170,14,834,10],[1170,15,834,11,"scope"],[1170,20,834,6],[1170,21,834,17,"removeOwnBinding"],[1170,37,834,6],[1170,38,834,34,"name"],[1170,42,834,6],[1171,0,835,5],[1173,0,837,4],[1173,12,837,8,"scope"],[1173,17,837,13],[1173,20,837,16],[1173,24,837,4],[1175,0,839,4],[1175,11,839,7],[1176,0,840,6],[1176,14,840,10,"scope"],[1176,19,840,15],[1176,20,840,16,"uids"],[1176,24,840,10],[1176,25,840,21,"name"],[1176,29,840,10],[1176,30,840,6],[1176,32,840,28],[1177,0,841,8,"scope"],[1177,12,841,8,"scope"],[1177,17,841,13],[1177,18,841,14,"uids"],[1177,22,841,8],[1177,23,841,19,"name"],[1177,27,841,8],[1177,31,841,27],[1177,36,841,8],[1178,0,842,7],[1179,0,843,5],[1179,9,839,4],[1179,17,843,13,"scope"],[1179,22,843,18],[1179,25,843,21,"scope"],[1179,30,843,26],[1179,31,843,27,"parent"],[1179,37,839,4],[1180,0,844,3],[1183,26,192,15],[1184,0,193,4],[1184,12,193,10,"parent"],[1184,18,193,16],[1184,21,193,19],[1184,26,193,24,"path"],[1184,30,193,19],[1184,31,193,29,"findParent"],[1184,41,193,19],[1184,42,193,40],[1184,52,193,40,"p"],[1184,53,193,41],[1185,0,193,41],[1185,17,193,45,"p"],[1185,18,193,46],[1185,19,193,47,"isScope"],[1185,26,193,45],[1185,28,193,41],[1186,0,193,41],[1186,9,193,19],[1186,10,193,4],[1187,0,194,4],[1187,15,194,11,"parent"],[1187,21,194,17],[1187,25,194,21,"parent"],[1187,31,194,27],[1187,32,194,28,"scope"],[1187,37,194,4],[1188,0,195,3],[1191,26,197,20],[1192,0,198,4],[1192,15,198,11],[1192,20,198,16,"path"],[1192,24,198,11],[1192,25,198,21,"parent"],[1192,31,198,4],[1193,0,199,3],[1196,26,201,12],[1197,0,202,4],[1197,15,202,11],[1197,20,202,16,"path"],[1197,24,202,11],[1197,25,202,21,"hub"],[1197,28,202,4],[1198,0,203,3],[1204,0,848,0,"exports"],[1204,2,848,0,"exports"],[1204,9,848,7],[1204,10,848,8,"default"],[1204,17,848,0],[1204,20,848,18,"Scope"],[1204,25,848,0],[1205,0,849,0,"Scope"],[1205,2,849,0,"Scope"],[1205,7,849,5],[1205,8,849,6,"globals"],[1205,15,849,0],[1205,18,849,16,"Object"],[1205,24,849,22],[1205,25,849,23,"keys"],[1205,29,849,16],[1205,30,849,28,"_globals"],[1205,38,849,36],[1205,39,849,37,"default"],[1205,46,849,28],[1205,47,849,45,"builtin"],[1205,54,849,16],[1205,55,849,0],[1206,0,850,0,"Scope"],[1206,2,850,0,"Scope"],[1206,7,850,5],[1206,8,850,6,"contextVariables"],[1206,24,850,0],[1206,27,850,25],[1206,28,850,26],[1206,39,850,25],[1206,41,850,39],[1206,52,850,25],[1206,54,850,52],[1206,64,850,25],[1206,66,850,64],[1206,71,850,25],[1206,72,850,0]]},"type":"js/module"}]}