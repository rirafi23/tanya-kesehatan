{"dependencies":[{"name":"@babel/types","data":{"isAsync":false}},{"name":"../node","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.UnaryExpression = UnaryExpression;\n  exports.DoExpression = DoExpression;\n  exports.ParenthesizedExpression = ParenthesizedExpression;\n  exports.UpdateExpression = UpdateExpression;\n  exports.ConditionalExpression = ConditionalExpression;\n  exports.NewExpression = NewExpression;\n  exports.SequenceExpression = SequenceExpression;\n  exports.ThisExpression = ThisExpression;\n  exports.Super = Super;\n  exports.Decorator = Decorator;\n  exports.OptionalMemberExpression = OptionalMemberExpression;\n  exports.OptionalCallExpression = OptionalCallExpression;\n  exports.CallExpression = CallExpression;\n  exports.Import = Import;\n  exports.EmptyStatement = EmptyStatement;\n  exports.ExpressionStatement = ExpressionStatement;\n  exports.AssignmentPattern = AssignmentPattern;\n  exports.LogicalExpression = exports.BinaryExpression = exports.AssignmentExpression = AssignmentExpression;\n  exports.BindExpression = BindExpression;\n  exports.MemberExpression = MemberExpression;\n  exports.MetaProperty = MetaProperty;\n  exports.PrivateName = PrivateName;\n  exports.V8IntrinsicIdentifier = V8IntrinsicIdentifier;\n  exports.AwaitExpression = exports.YieldExpression = void 0;\n\n  var t = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], \"@babel/types\"));\n\n  var n = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1], \"../node\"));\n\n  function _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n\n    _getRequireWildcardCache = function _getRequireWildcardCache() {\n      return cache;\n    };\n\n    return cache;\n  }\n\n  function _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n      return obj;\n    }\n\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n      return {\n        default: obj\n      };\n    }\n\n    var cache = _getRequireWildcardCache();\n\n    if (cache && cache.has(obj)) {\n      return cache.get(obj);\n    }\n\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n    for (var key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n        if (desc && (desc.get || desc.set)) {\n          Object.defineProperty(newObj, key, desc);\n        } else {\n          newObj[key] = obj[key];\n        }\n      }\n    }\n\n    newObj.default = obj;\n\n    if (cache) {\n      cache.set(obj, newObj);\n    }\n\n    return newObj;\n  }\n\n  function UnaryExpression(node) {\n    if (node.operator === \"void\" || node.operator === \"delete\" || node.operator === \"typeof\" || node.operator === \"throw\") {\n      this.word(node.operator);\n      this.space();\n    } else {\n      this.token(node.operator);\n    }\n\n    this.print(node.argument, node);\n  }\n\n  function DoExpression(node) {\n    this.word(\"do\");\n    this.space();\n    this.print(node.body, node);\n  }\n\n  function ParenthesizedExpression(node) {\n    this.token(\"(\");\n    this.print(node.expression, node);\n    this.token(\")\");\n  }\n\n  function UpdateExpression(node) {\n    if (node.prefix) {\n      this.token(node.operator);\n      this.print(node.argument, node);\n    } else {\n      this.startTerminatorless(true);\n      this.print(node.argument, node);\n      this.endTerminatorless();\n      this.token(node.operator);\n    }\n  }\n\n  function ConditionalExpression(node) {\n    this.print(node.test, node);\n    this.space();\n    this.token(\"?\");\n    this.space();\n    this.print(node.consequent, node);\n    this.space();\n    this.token(\":\");\n    this.space();\n    this.print(node.alternate, node);\n  }\n\n  function NewExpression(node, parent) {\n    this.word(\"new\");\n    this.space();\n    this.print(node.callee, node);\n\n    if (this.format.minified && node.arguments.length === 0 && !node.optional && !t.isCallExpression(parent, {\n      callee: node\n    }) && !t.isMemberExpression(parent) && !t.isNewExpression(parent)) {\n      return;\n    }\n\n    this.print(node.typeArguments, node);\n    this.print(node.typeParameters, node);\n\n    if (node.optional) {\n      this.token(\"?.\");\n    }\n\n    this.token(\"(\");\n    this.printList(node.arguments, node);\n    this.token(\")\");\n  }\n\n  function SequenceExpression(node) {\n    this.printList(node.expressions, node);\n  }\n\n  function ThisExpression() {\n    this.word(\"this\");\n  }\n\n  function Super() {\n    this.word(\"super\");\n  }\n\n  function Decorator(node) {\n    this.token(\"@\");\n    this.print(node.expression, node);\n    this.newline();\n  }\n\n  function OptionalMemberExpression(node) {\n    this.print(node.object, node);\n\n    if (!node.computed && t.isMemberExpression(node.property)) {\n      throw new TypeError(\"Got a MemberExpression for MemberExpression property\");\n    }\n\n    var computed = node.computed;\n\n    if (t.isLiteral(node.property) && typeof node.property.value === \"number\") {\n      computed = true;\n    }\n\n    if (node.optional) {\n      this.token(\"?.\");\n    }\n\n    if (computed) {\n      this.token(\"[\");\n      this.print(node.property, node);\n      this.token(\"]\");\n    } else {\n      if (!node.optional) {\n        this.token(\".\");\n      }\n\n      this.print(node.property, node);\n    }\n  }\n\n  function OptionalCallExpression(node) {\n    this.print(node.callee, node);\n    this.print(node.typeArguments, node);\n    this.print(node.typeParameters, node);\n\n    if (node.optional) {\n      this.token(\"?.\");\n    }\n\n    this.token(\"(\");\n    this.printList(node.arguments, node);\n    this.token(\")\");\n  }\n\n  function CallExpression(node) {\n    this.print(node.callee, node);\n    this.print(node.typeArguments, node);\n    this.print(node.typeParameters, node);\n    this.token(\"(\");\n    this.printList(node.arguments, node);\n    this.token(\")\");\n  }\n\n  function Import() {\n    this.word(\"import\");\n  }\n\n  function buildYieldAwait(keyword) {\n    return function (node) {\n      this.word(keyword);\n\n      if (node.delegate) {\n        this.token(\"*\");\n      }\n\n      if (node.argument) {\n        this.space();\n        var terminatorState = this.startTerminatorless();\n        this.print(node.argument, node);\n        this.endTerminatorless(terminatorState);\n      }\n    };\n  }\n\n  var YieldExpression = buildYieldAwait(\"yield\");\n  exports.YieldExpression = YieldExpression;\n  var AwaitExpression = buildYieldAwait(\"await\");\n  exports.AwaitExpression = AwaitExpression;\n\n  function EmptyStatement() {\n    this.semicolon(true);\n  }\n\n  function ExpressionStatement(node) {\n    this.print(node.expression, node);\n    this.semicolon();\n  }\n\n  function AssignmentPattern(node) {\n    this.print(node.left, node);\n    if (node.left.optional) this.token(\"?\");\n    this.print(node.left.typeAnnotation, node);\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(node.right, node);\n  }\n\n  function AssignmentExpression(node, parent) {\n    var parens = this.inForStatementInitCounter && node.operator === \"in\" && !n.needsParens(node, parent);\n\n    if (parens) {\n      this.token(\"(\");\n    }\n\n    this.print(node.left, node);\n    this.space();\n\n    if (node.operator === \"in\" || node.operator === \"instanceof\") {\n      this.word(node.operator);\n    } else {\n      this.token(node.operator);\n    }\n\n    this.space();\n    this.print(node.right, node);\n\n    if (parens) {\n      this.token(\")\");\n    }\n  }\n\n  function BindExpression(node) {\n    this.print(node.object, node);\n    this.token(\"::\");\n    this.print(node.callee, node);\n  }\n\n  function MemberExpression(node) {\n    this.print(node.object, node);\n\n    if (!node.computed && t.isMemberExpression(node.property)) {\n      throw new TypeError(\"Got a MemberExpression for MemberExpression property\");\n    }\n\n    var computed = node.computed;\n\n    if (t.isLiteral(node.property) && typeof node.property.value === \"number\") {\n      computed = true;\n    }\n\n    if (computed) {\n      this.token(\"[\");\n      this.print(node.property, node);\n      this.token(\"]\");\n    } else {\n      this.token(\".\");\n      this.print(node.property, node);\n    }\n  }\n\n  function MetaProperty(node) {\n    this.print(node.meta, node);\n    this.token(\".\");\n    this.print(node.property, node);\n  }\n\n  function PrivateName(node) {\n    this.token(\"#\");\n    this.print(node.id, node);\n  }\n\n  function V8IntrinsicIdentifier(node) {\n    this.token(\"%\");\n    this.word(node.name);\n  }\n});","map":[[2,0,1,0],[4,0,3,0,"Object"],[4,2,3,0,"Object"],[4,8,3,6],[4,9,3,7,"defineProperty"],[4,23,3,0],[4,24,3,22,"exports"],[4,31,3,0],[4,33,3,31],[4,45,3,0],[4,47,3,45],[5,0,4,2,"value"],[5,4,4,2,"value"],[5,9,4,7],[5,11,4,9],[6,0,3,45],[6,3,3,0],[7,0,6,0,"exports"],[7,2,6,0,"exports"],[7,9,6,7],[7,10,6,8,"UnaryExpression"],[7,25,6,0],[7,28,6,26,"UnaryExpression"],[7,43,6,0],[8,0,7,0,"exports"],[8,2,7,0,"exports"],[8,9,7,7],[8,10,7,8,"DoExpression"],[8,22,7,0],[8,25,7,23,"DoExpression"],[8,37,7,0],[9,0,8,0,"exports"],[9,2,8,0,"exports"],[9,9,8,7],[9,10,8,8,"ParenthesizedExpression"],[9,33,8,0],[9,36,8,34,"ParenthesizedExpression"],[9,59,8,0],[10,0,9,0,"exports"],[10,2,9,0,"exports"],[10,9,9,7],[10,10,9,8,"UpdateExpression"],[10,26,9,0],[10,29,9,27,"UpdateExpression"],[10,45,9,0],[11,0,10,0,"exports"],[11,2,10,0,"exports"],[11,9,10,7],[11,10,10,8,"ConditionalExpression"],[11,31,10,0],[11,34,10,32,"ConditionalExpression"],[11,55,10,0],[12,0,11,0,"exports"],[12,2,11,0,"exports"],[12,9,11,7],[12,10,11,8,"NewExpression"],[12,23,11,0],[12,26,11,24,"NewExpression"],[12,39,11,0],[13,0,12,0,"exports"],[13,2,12,0,"exports"],[13,9,12,7],[13,10,12,8,"SequenceExpression"],[13,28,12,0],[13,31,12,29,"SequenceExpression"],[13,49,12,0],[14,0,13,0,"exports"],[14,2,13,0,"exports"],[14,9,13,7],[14,10,13,8,"ThisExpression"],[14,24,13,0],[14,27,13,25,"ThisExpression"],[14,41,13,0],[15,0,14,0,"exports"],[15,2,14,0,"exports"],[15,9,14,7],[15,10,14,8,"Super"],[15,15,14,0],[15,18,14,16,"Super"],[15,23,14,0],[16,0,15,0,"exports"],[16,2,15,0,"exports"],[16,9,15,7],[16,10,15,8,"Decorator"],[16,19,15,0],[16,22,15,20,"Decorator"],[16,31,15,0],[17,0,16,0,"exports"],[17,2,16,0,"exports"],[17,9,16,7],[17,10,16,8,"OptionalMemberExpression"],[17,34,16,0],[17,37,16,35,"OptionalMemberExpression"],[17,61,16,0],[18,0,17,0,"exports"],[18,2,17,0,"exports"],[18,9,17,7],[18,10,17,8,"OptionalCallExpression"],[18,32,17,0],[18,35,17,33,"OptionalCallExpression"],[18,57,17,0],[19,0,18,0,"exports"],[19,2,18,0,"exports"],[19,9,18,7],[19,10,18,8,"CallExpression"],[19,24,18,0],[19,27,18,25,"CallExpression"],[19,41,18,0],[20,0,19,0,"exports"],[20,2,19,0,"exports"],[20,9,19,7],[20,10,19,8,"Import"],[20,16,19,0],[20,19,19,17,"Import"],[20,25,19,0],[21,0,20,0,"exports"],[21,2,20,0,"exports"],[21,9,20,7],[21,10,20,8,"EmptyStatement"],[21,24,20,0],[21,27,20,25,"EmptyStatement"],[21,41,20,0],[22,0,21,0,"exports"],[22,2,21,0,"exports"],[22,9,21,7],[22,10,21,8,"ExpressionStatement"],[22,29,21,0],[22,32,21,30,"ExpressionStatement"],[22,51,21,0],[23,0,22,0,"exports"],[23,2,22,0,"exports"],[23,9,22,7],[23,10,22,8,"AssignmentPattern"],[23,27,22,0],[23,30,22,28,"AssignmentPattern"],[23,47,22,0],[24,0,23,0,"exports"],[24,2,23,0,"exports"],[24,9,23,7],[24,10,23,8,"LogicalExpression"],[24,27,23,0],[24,30,23,28,"exports"],[24,37,23,35],[24,38,23,36,"BinaryExpression"],[24,54,23,28],[24,57,23,55,"exports"],[24,64,23,62],[24,65,23,63,"AssignmentExpression"],[24,85,23,55],[24,88,23,86,"AssignmentExpression"],[24,108,23,0],[25,0,24,0,"exports"],[25,2,24,0,"exports"],[25,9,24,7],[25,10,24,8,"BindExpression"],[25,24,24,0],[25,27,24,25,"BindExpression"],[25,41,24,0],[26,0,25,0,"exports"],[26,2,25,0,"exports"],[26,9,25,7],[26,10,25,8,"MemberExpression"],[26,26,25,0],[26,29,25,27,"MemberExpression"],[26,45,25,0],[27,0,26,0,"exports"],[27,2,26,0,"exports"],[27,9,26,7],[27,10,26,8,"MetaProperty"],[27,22,26,0],[27,25,26,23,"MetaProperty"],[27,37,26,0],[28,0,27,0,"exports"],[28,2,27,0,"exports"],[28,9,27,7],[28,10,27,8,"PrivateName"],[28,21,27,0],[28,24,27,22,"PrivateName"],[28,35,27,0],[29,0,28,0,"exports"],[29,2,28,0,"exports"],[29,9,28,7],[29,10,28,8,"V8IntrinsicIdentifier"],[29,31,28,0],[29,34,28,32,"V8IntrinsicIdentifier"],[29,55,28,0],[30,0,29,0,"exports"],[30,2,29,0,"exports"],[30,9,29,7],[30,10,29,8,"AwaitExpression"],[30,25,29,0],[30,28,29,26,"exports"],[30,35,29,33],[30,36,29,34,"YieldExpression"],[30,51,29,26],[30,54,29,52],[30,59,29,57],[30,60,29,0],[32,0,31,0],[32,6,31,4,"t"],[32,7,31,5],[32,10,31,8,"_interopRequireWildcard"],[32,33,31,31],[32,34,31,32,"require"],[32,45,31,39],[32,80,31,31],[32,81,31,0],[34,0,33,0],[34,6,33,4,"n"],[34,7,33,5],[34,10,33,8,"_interopRequireWildcard"],[34,33,33,31],[34,34,33,32,"require"],[34,45,33,39],[34,75,33,31],[34,76,33,0],[36,0,35,0],[36,11,35,9,"_getRequireWildcardCache"],[36,35,35,0],[36,38,35,36],[37,0,35,38],[37,8,35,42],[37,15,35,49,"WeakMap"],[37,22,35,42],[37,27,35,61],[37,37,35,38],[37,39,35,73],[37,46,35,80],[37,50,35,73],[38,0,35,86],[38,8,35,90,"cache"],[38,13,35,95],[38,16,35,98],[38,20,35,102,"WeakMap"],[38,27,35,98],[38,29,35,86],[40,0,35,113,"_getRequireWildcardCache"],[40,4,35,113,"_getRequireWildcardCache"],[40,28,35,137],[40,31,35,140],[40,67,35,152],[41,0,35,154],[41,13,35,161,"cache"],[41,18,35,154],[42,0,35,169],[42,5,35,113],[44,0,35,171],[44,11,35,178,"cache"],[44,16,35,171],[45,0,35,186],[47,0,37,0],[47,11,37,9,"_interopRequireWildcard"],[47,34,37,0],[47,35,37,33,"obj"],[47,38,37,0],[47,40,37,38],[48,0,37,40],[48,8,37,44,"obj"],[48,11,37,47],[48,15,37,51,"obj"],[48,18,37,54],[48,19,37,55,"__esModule"],[48,29,37,40],[48,31,37,67],[49,0,37,69],[49,13,37,76,"obj"],[49,16,37,69],[50,0,37,82],[52,0,37,83],[52,8,37,87,"obj"],[52,11,37,90],[52,16,37,95],[52,20,37,87],[52,24,37,103],[52,31,37,110,"obj"],[52,34,37,103],[52,39,37,118],[52,47,37,103],[52,51,37,130],[52,58,37,137,"obj"],[52,61,37,130],[52,66,37,145],[52,76,37,83],[52,78,37,157],[53,0,37,159],[53,13,37,166],[54,0,37,168,"default"],[54,8,37,168,"default"],[54,15,37,175],[54,17,37,177,"obj"],[55,0,37,166],[55,7,37,159],[56,0,37,185],[58,0,37,186],[58,8,37,190,"cache"],[58,13,37,195],[58,16,37,198,"_getRequireWildcardCache"],[58,40,37,222],[58,42,37,186],[60,0,37,226],[60,8,37,230,"cache"],[60,13,37,235],[60,17,37,239,"cache"],[60,22,37,244],[60,23,37,245,"has"],[60,26,37,239],[60,27,37,249,"obj"],[60,30,37,239],[60,31,37,226],[60,33,37,255],[61,0,37,257],[61,13,37,264,"cache"],[61,18,37,269],[61,19,37,270,"get"],[61,22,37,264],[61,23,37,274,"obj"],[61,26,37,264],[61,27,37,257],[62,0,37,281],[64,0,37,282],[64,8,37,286,"newObj"],[64,14,37,292],[64,17,37,295],[64,19,37,282],[65,0,37,299],[65,8,37,303,"hasPropertyDescriptor"],[65,29,37,324],[65,32,37,327,"Object"],[65,38,37,333],[65,39,37,334,"defineProperty"],[65,53,37,327],[65,57,37,352,"Object"],[65,63,37,358],[65,64,37,359,"getOwnPropertyDescriptor"],[65,88,37,299],[67,0,37,385],[67,9,37,390],[67,13,37,394,"key"],[67,16,37,385],[67,20,37,401,"obj"],[67,23,37,385],[67,25,37,406],[68,0,37,408],[68,10,37,412,"Object"],[68,16,37,418],[68,17,37,419,"prototype"],[68,26,37,412],[68,27,37,429,"hasOwnProperty"],[68,41,37,412],[68,42,37,444,"call"],[68,46,37,412],[68,47,37,449,"obj"],[68,50,37,412],[68,52,37,454,"key"],[68,55,37,412],[68,56,37,408],[68,58,37,460],[69,0,37,462],[69,12,37,466,"desc"],[69,16,37,470],[69,19,37,473,"hasPropertyDescriptor"],[69,40,37,494],[69,43,37,497,"Object"],[69,49,37,503],[69,50,37,504,"getOwnPropertyDescriptor"],[69,74,37,497],[69,75,37,529,"obj"],[69,78,37,497],[69,80,37,534,"key"],[69,83,37,497],[69,84,37,494],[69,87,37,541],[69,91,37,462],[71,0,37,547],[71,12,37,551,"desc"],[71,16,37,555],[71,21,37,560,"desc"],[71,25,37,564],[71,26,37,565,"get"],[71,29,37,560],[71,33,37,572,"desc"],[71,37,37,576],[71,38,37,577,"set"],[71,41,37,555],[71,42,37,547],[71,44,37,583],[72,0,37,585,"Object"],[72,10,37,585,"Object"],[72,16,37,591],[72,17,37,592,"defineProperty"],[72,31,37,585],[72,32,37,607,"newObj"],[72,38,37,585],[72,40,37,615,"key"],[72,43,37,585],[72,45,37,620,"desc"],[72,49,37,585],[73,0,37,628],[73,9,37,547],[73,15,37,634],[74,0,37,636,"newObj"],[74,10,37,636,"newObj"],[74,16,37,642],[74,17,37,643,"key"],[74,20,37,642],[74,21,37,636],[74,24,37,650,"obj"],[74,27,37,653],[74,28,37,654,"key"],[74,31,37,653],[74,32,37,636],[75,0,37,661],[76,0,37,663],[77,0,37,665],[79,0,37,666,"newObj"],[79,4,37,666,"newObj"],[79,10,37,672],[79,11,37,673,"default"],[79,18,37,666],[79,21,37,683,"obj"],[79,24,37,666],[81,0,37,688],[81,8,37,692,"cache"],[81,13,37,688],[81,15,37,699],[82,0,37,701,"cache"],[82,6,37,701,"cache"],[82,11,37,706],[82,12,37,707,"set"],[82,15,37,701],[82,16,37,711,"obj"],[82,19,37,701],[82,21,37,716,"newObj"],[82,27,37,701],[83,0,37,726],[85,0,37,727],[85,11,37,734,"newObj"],[85,17,37,727],[86,0,37,743],[88,0,39,0],[88,11,39,9,"UnaryExpression"],[88,26,39,0],[88,27,39,25,"node"],[88,31,39,0],[88,33,39,31],[89,0,40,2],[89,8,40,6,"node"],[89,12,40,10],[89,13,40,11,"operator"],[89,21,40,6],[89,26,40,24],[89,32,40,6],[89,36,40,34,"node"],[89,40,40,38],[89,41,40,39,"operator"],[89,49,40,34],[89,54,40,52],[89,62,40,6],[89,66,40,64,"node"],[89,70,40,68],[89,71,40,69,"operator"],[89,79,40,64],[89,84,40,82],[89,92,40,6],[89,96,40,94,"node"],[89,100,40,98],[89,101,40,99,"operator"],[89,109,40,94],[89,114,40,112],[89,121,40,2],[89,123,40,121],[90,0,41,4],[90,11,41,9,"word"],[90,15,41,4],[90,16,41,14,"node"],[90,20,41,18],[90,21,41,19,"operator"],[90,29,41,4],[91,0,42,4],[91,11,42,9,"space"],[91,16,42,4],[92,0,43,3],[92,5,40,2],[92,11,43,9],[93,0,44,4],[93,11,44,9,"token"],[93,16,44,4],[93,17,44,15,"node"],[93,21,44,19],[93,22,44,20,"operator"],[93,30,44,4],[94,0,45,3],[96,0,47,2],[96,9,47,7,"print"],[96,14,47,2],[96,15,47,13,"node"],[96,19,47,17],[96,20,47,18,"argument"],[96,28,47,2],[96,30,47,28,"node"],[96,34,47,2],[97,0,48,1],[99,0,50,0],[99,11,50,9,"DoExpression"],[99,23,50,0],[99,24,50,22,"node"],[99,28,50,0],[99,30,50,28],[100,0,51,2],[100,9,51,7,"word"],[100,13,51,2],[100,14,51,12],[100,18,51,2],[101,0,52,2],[101,9,52,7,"space"],[101,14,52,2],[102,0,53,2],[102,9,53,7,"print"],[102,14,53,2],[102,15,53,13,"node"],[102,19,53,17],[102,20,53,18,"body"],[102,24,53,2],[102,26,53,24,"node"],[102,30,53,2],[103,0,54,1],[105,0,56,0],[105,11,56,9,"ParenthesizedExpression"],[105,34,56,0],[105,35,56,33,"node"],[105,39,56,0],[105,41,56,39],[106,0,57,2],[106,9,57,7,"token"],[106,14,57,2],[106,15,57,13],[106,18,57,2],[107,0,58,2],[107,9,58,7,"print"],[107,14,58,2],[107,15,58,13,"node"],[107,19,58,17],[107,20,58,18,"expression"],[107,30,58,2],[107,32,58,30,"node"],[107,36,58,2],[108,0,59,2],[108,9,59,7,"token"],[108,14,59,2],[108,15,59,13],[108,18,59,2],[109,0,60,1],[111,0,62,0],[111,11,62,9,"UpdateExpression"],[111,27,62,0],[111,28,62,26,"node"],[111,32,62,0],[111,34,62,32],[112,0,63,2],[112,8,63,6,"node"],[112,12,63,10],[112,13,63,11,"prefix"],[112,19,63,2],[112,21,63,19],[113,0,64,4],[113,11,64,9,"token"],[113,16,64,4],[113,17,64,15,"node"],[113,21,64,19],[113,22,64,20,"operator"],[113,30,64,4],[114,0,65,4],[114,11,65,9,"print"],[114,16,65,4],[114,17,65,15,"node"],[114,21,65,19],[114,22,65,20,"argument"],[114,30,65,4],[114,32,65,30,"node"],[114,36,65,4],[115,0,66,3],[115,5,63,2],[115,11,66,9],[116,0,67,4],[116,11,67,9,"startTerminatorless"],[116,30,67,4],[116,31,67,29],[116,35,67,4],[117,0,68,4],[117,11,68,9,"print"],[117,16,68,4],[117,17,68,15,"node"],[117,21,68,19],[117,22,68,20,"argument"],[117,30,68,4],[117,32,68,30,"node"],[117,36,68,4],[118,0,69,4],[118,11,69,9,"endTerminatorless"],[118,28,69,4],[119,0,70,4],[119,11,70,9,"token"],[119,16,70,4],[119,17,70,15,"node"],[119,21,70,19],[119,22,70,20,"operator"],[119,30,70,4],[120,0,71,3],[121,0,72,1],[123,0,74,0],[123,11,74,9,"ConditionalExpression"],[123,32,74,0],[123,33,74,31,"node"],[123,37,74,0],[123,39,74,37],[124,0,75,2],[124,9,75,7,"print"],[124,14,75,2],[124,15,75,13,"node"],[124,19,75,17],[124,20,75,18,"test"],[124,24,75,2],[124,26,75,24,"node"],[124,30,75,2],[125,0,76,2],[125,9,76,7,"space"],[125,14,76,2],[126,0,77,2],[126,9,77,7,"token"],[126,14,77,2],[126,15,77,13],[126,18,77,2],[127,0,78,2],[127,9,78,7,"space"],[127,14,78,2],[128,0,79,2],[128,9,79,7,"print"],[128,14,79,2],[128,15,79,13,"node"],[128,19,79,17],[128,20,79,18,"consequent"],[128,30,79,2],[128,32,79,30,"node"],[128,36,79,2],[129,0,80,2],[129,9,80,7,"space"],[129,14,80,2],[130,0,81,2],[130,9,81,7,"token"],[130,14,81,2],[130,15,81,13],[130,18,81,2],[131,0,82,2],[131,9,82,7,"space"],[131,14,82,2],[132,0,83,2],[132,9,83,7,"print"],[132,14,83,2],[132,15,83,13,"node"],[132,19,83,17],[132,20,83,18,"alternate"],[132,29,83,2],[132,31,83,29,"node"],[132,35,83,2],[133,0,84,1],[135,0,86,0],[135,11,86,9,"NewExpression"],[135,24,86,0],[135,25,86,23,"node"],[135,29,86,0],[135,31,86,29,"parent"],[135,37,86,0],[135,39,86,37],[136,0,87,2],[136,9,87,7,"word"],[136,13,87,2],[136,14,87,12],[136,19,87,2],[137,0,88,2],[137,9,88,7,"space"],[137,14,88,2],[138,0,89,2],[138,9,89,7,"print"],[138,14,89,2],[138,15,89,13,"node"],[138,19,89,17],[138,20,89,18,"callee"],[138,26,89,2],[138,28,89,26,"node"],[138,32,89,2],[140,0,91,2],[140,8,91,6],[140,13,91,11,"format"],[140,19,91,6],[140,20,91,18,"minified"],[140,28,91,6],[140,32,91,30,"node"],[140,36,91,34],[140,37,91,35,"arguments"],[140,46,91,30],[140,47,91,45,"length"],[140,53,91,30],[140,58,91,56],[140,59,91,6],[140,63,91,61],[140,64,91,62,"node"],[140,68,91,66],[140,69,91,67,"optional"],[140,77,91,6],[140,81,91,79],[140,82,91,80,"t"],[140,83,91,81],[140,84,91,82,"isCallExpression"],[140,100,91,80],[140,101,91,99,"parent"],[140,107,91,80],[140,109,91,107],[141,0,92,4,"callee"],[141,6,92,4,"callee"],[141,12,92,10],[141,14,92,12,"node"],[142,0,91,107],[142,5,91,80],[142,6,91,6],[142,10,93,8],[142,11,93,9,"t"],[142,12,93,10],[142,13,93,11,"isMemberExpression"],[142,31,93,9],[142,32,93,30,"parent"],[142,38,93,9],[142,39,91,6],[142,43,93,41],[142,44,93,42,"t"],[142,45,93,43],[142,46,93,44,"isNewExpression"],[142,61,93,42],[142,62,93,60,"parent"],[142,68,93,42],[142,69,91,2],[142,71,93,69],[143,0,94,4],[144,0,95,3],[146,0,97,2],[146,9,97,7,"print"],[146,14,97,2],[146,15,97,13,"node"],[146,19,97,17],[146,20,97,18,"typeArguments"],[146,33,97,2],[146,35,97,33,"node"],[146,39,97,2],[147,0,98,2],[147,9,98,7,"print"],[147,14,98,2],[147,15,98,13,"node"],[147,19,98,17],[147,20,98,18,"typeParameters"],[147,34,98,2],[147,36,98,34,"node"],[147,40,98,2],[149,0,100,2],[149,8,100,6,"node"],[149,12,100,10],[149,13,100,11,"optional"],[149,21,100,2],[149,23,100,21],[150,0,101,4],[150,11,101,9,"token"],[150,16,101,4],[150,17,101,15],[150,21,101,4],[151,0,102,3],[153,0,104,2],[153,9,104,7,"token"],[153,14,104,2],[153,15,104,13],[153,18,104,2],[154,0,105,2],[154,9,105,7,"printList"],[154,18,105,2],[154,19,105,17,"node"],[154,23,105,21],[154,24,105,22,"arguments"],[154,33,105,2],[154,35,105,33,"node"],[154,39,105,2],[155,0,106,2],[155,9,106,7,"token"],[155,14,106,2],[155,15,106,13],[155,18,106,2],[156,0,107,1],[158,0,109,0],[158,11,109,9,"SequenceExpression"],[158,29,109,0],[158,30,109,28,"node"],[158,34,109,0],[158,36,109,34],[159,0,110,2],[159,9,110,7,"printList"],[159,18,110,2],[159,19,110,17,"node"],[159,23,110,21],[159,24,110,22,"expressions"],[159,35,110,2],[159,37,110,35,"node"],[159,41,110,2],[160,0,111,1],[162,0,113,0],[162,11,113,9,"ThisExpression"],[162,25,113,0],[162,28,113,26],[163,0,114,2],[163,9,114,7,"word"],[163,13,114,2],[163,14,114,12],[163,20,114,2],[164,0,115,1],[166,0,117,0],[166,11,117,9,"Super"],[166,16,117,0],[166,19,117,17],[167,0,118,2],[167,9,118,7,"word"],[167,13,118,2],[167,14,118,12],[167,21,118,2],[168,0,119,1],[170,0,121,0],[170,11,121,9,"Decorator"],[170,20,121,0],[170,21,121,19,"node"],[170,25,121,0],[170,27,121,25],[171,0,122,2],[171,9,122,7,"token"],[171,14,122,2],[171,15,122,13],[171,18,122,2],[172,0,123,2],[172,9,123,7,"print"],[172,14,123,2],[172,15,123,13,"node"],[172,19,123,17],[172,20,123,18,"expression"],[172,30,123,2],[172,32,123,30,"node"],[172,36,123,2],[173,0,124,2],[173,9,124,7,"newline"],[173,16,124,2],[174,0,125,1],[176,0,127,0],[176,11,127,9,"OptionalMemberExpression"],[176,35,127,0],[176,36,127,34,"node"],[176,40,127,0],[176,42,127,40],[177,0,128,2],[177,9,128,7,"print"],[177,14,128,2],[177,15,128,13,"node"],[177,19,128,17],[177,20,128,18,"object"],[177,26,128,2],[177,28,128,26,"node"],[177,32,128,2],[179,0,130,2],[179,8,130,6],[179,9,130,7,"node"],[179,13,130,11],[179,14,130,12,"computed"],[179,22,130,6],[179,26,130,24,"t"],[179,27,130,25],[179,28,130,26,"isMemberExpression"],[179,46,130,24],[179,47,130,45,"node"],[179,51,130,49],[179,52,130,50,"property"],[179,60,130,24],[179,61,130,2],[179,63,130,61],[180,0,131,4],[180,12,131,10],[180,16,131,14,"TypeError"],[180,25,131,10],[180,26,131,24],[180,80,131,10],[180,81,131,4],[181,0,132,3],[183,0,134,2],[183,8,134,6,"computed"],[183,16,134,14],[183,19,134,17,"node"],[183,23,134,21],[183,24,134,22,"computed"],[183,32,134,2],[185,0,136,2],[185,8,136,6,"t"],[185,9,136,7],[185,10,136,8,"isLiteral"],[185,19,136,6],[185,20,136,18,"node"],[185,24,136,22],[185,25,136,23,"property"],[185,33,136,6],[185,38,136,36],[185,45,136,43,"node"],[185,49,136,47],[185,50,136,48,"property"],[185,58,136,43],[185,59,136,57,"value"],[185,64,136,36],[185,69,136,67],[185,77,136,2],[185,79,136,77],[186,0,137,4,"computed"],[186,6,137,4,"computed"],[186,14,137,12],[186,17,137,15],[186,21,137,4],[187,0,138,3],[189,0,140,2],[189,8,140,6,"node"],[189,12,140,10],[189,13,140,11,"optional"],[189,21,140,2],[189,23,140,21],[190,0,141,4],[190,11,141,9,"token"],[190,16,141,4],[190,17,141,15],[190,21,141,4],[191,0,142,3],[193,0,144,2],[193,8,144,6,"computed"],[193,16,144,2],[193,18,144,16],[194,0,145,4],[194,11,145,9,"token"],[194,16,145,4],[194,17,145,15],[194,20,145,4],[195,0,146,4],[195,11,146,9,"print"],[195,16,146,4],[195,17,146,15,"node"],[195,21,146,19],[195,22,146,20,"property"],[195,30,146,4],[195,32,146,30,"node"],[195,36,146,4],[196,0,147,4],[196,11,147,9,"token"],[196,16,147,4],[196,17,147,15],[196,20,147,4],[197,0,148,3],[197,5,144,2],[197,11,148,9],[198,0,149,4],[198,10,149,8],[198,11,149,9,"node"],[198,15,149,13],[198,16,149,14,"optional"],[198,24,149,4],[198,26,149,24],[199,0,150,6],[199,13,150,11,"token"],[199,18,150,6],[199,19,150,17],[199,22,150,6],[200,0,151,5],[202,0,153,4],[202,11,153,9,"print"],[202,16,153,4],[202,17,153,15,"node"],[202,21,153,19],[202,22,153,20,"property"],[202,30,153,4],[202,32,153,30,"node"],[202,36,153,4],[203,0,154,3],[204,0,155,1],[206,0,157,0],[206,11,157,9,"OptionalCallExpression"],[206,33,157,0],[206,34,157,32,"node"],[206,38,157,0],[206,40,157,38],[207,0,158,2],[207,9,158,7,"print"],[207,14,158,2],[207,15,158,13,"node"],[207,19,158,17],[207,20,158,18,"callee"],[207,26,158,2],[207,28,158,26,"node"],[207,32,158,2],[208,0,159,2],[208,9,159,7,"print"],[208,14,159,2],[208,15,159,13,"node"],[208,19,159,17],[208,20,159,18,"typeArguments"],[208,33,159,2],[208,35,159,33,"node"],[208,39,159,2],[209,0,160,2],[209,9,160,7,"print"],[209,14,160,2],[209,15,160,13,"node"],[209,19,160,17],[209,20,160,18,"typeParameters"],[209,34,160,2],[209,36,160,34,"node"],[209,40,160,2],[211,0,162,2],[211,8,162,6,"node"],[211,12,162,10],[211,13,162,11,"optional"],[211,21,162,2],[211,23,162,21],[212,0,163,4],[212,11,163,9,"token"],[212,16,163,4],[212,17,163,15],[212,21,163,4],[213,0,164,3],[215,0,166,2],[215,9,166,7,"token"],[215,14,166,2],[215,15,166,13],[215,18,166,2],[216,0,167,2],[216,9,167,7,"printList"],[216,18,167,2],[216,19,167,17,"node"],[216,23,167,21],[216,24,167,22,"arguments"],[216,33,167,2],[216,35,167,33,"node"],[216,39,167,2],[217,0,168,2],[217,9,168,7,"token"],[217,14,168,2],[217,15,168,13],[217,18,168,2],[218,0,169,1],[220,0,171,0],[220,11,171,9,"CallExpression"],[220,25,171,0],[220,26,171,24,"node"],[220,30,171,0],[220,32,171,30],[221,0,172,2],[221,9,172,7,"print"],[221,14,172,2],[221,15,172,13,"node"],[221,19,172,17],[221,20,172,18,"callee"],[221,26,172,2],[221,28,172,26,"node"],[221,32,172,2],[222,0,173,2],[222,9,173,7,"print"],[222,14,173,2],[222,15,173,13,"node"],[222,19,173,17],[222,20,173,18,"typeArguments"],[222,33,173,2],[222,35,173,33,"node"],[222,39,173,2],[223,0,174,2],[223,9,174,7,"print"],[223,14,174,2],[223,15,174,13,"node"],[223,19,174,17],[223,20,174,18,"typeParameters"],[223,34,174,2],[223,36,174,34,"node"],[223,40,174,2],[224,0,175,2],[224,9,175,7,"token"],[224,14,175,2],[224,15,175,13],[224,18,175,2],[225,0,176,2],[225,9,176,7,"printList"],[225,18,176,2],[225,19,176,17,"node"],[225,23,176,21],[225,24,176,22,"arguments"],[225,33,176,2],[225,35,176,33,"node"],[225,39,176,2],[226,0,177,2],[226,9,177,7,"token"],[226,14,177,2],[226,15,177,13],[226,18,177,2],[227,0,178,1],[229,0,180,0],[229,11,180,9,"Import"],[229,17,180,0],[229,20,180,18],[230,0,181,2],[230,9,181,7,"word"],[230,13,181,2],[230,14,181,12],[230,22,181,2],[231,0,182,1],[233,0,184,0],[233,11,184,9,"buildYieldAwait"],[233,26,184,0],[233,27,184,25,"keyword"],[233,34,184,0],[233,36,184,34],[234,0,185,2],[234,11,185,9],[234,21,185,19,"node"],[234,25,185,9],[234,27,185,25],[235,0,186,4],[235,11,186,9,"word"],[235,15,186,4],[235,16,186,14,"keyword"],[235,23,186,4],[237,0,188,4],[237,10,188,8,"node"],[237,14,188,12],[237,15,188,13,"delegate"],[237,23,188,4],[237,25,188,23],[238,0,189,6],[238,13,189,11,"token"],[238,18,189,6],[238,19,189,17],[238,22,189,6],[239,0,190,5],[241,0,192,4],[241,10,192,8,"node"],[241,14,192,12],[241,15,192,13,"argument"],[241,23,192,4],[241,25,192,23],[242,0,193,6],[242,13,193,11,"space"],[242,18,193,6],[243,0,194,6],[243,12,194,12,"terminatorState"],[243,27,194,27],[243,30,194,30],[243,35,194,35,"startTerminatorless"],[243,54,194,30],[243,56,194,6],[244,0,195,6],[244,13,195,11,"print"],[244,18,195,6],[244,19,195,17,"node"],[244,23,195,21],[244,24,195,22,"argument"],[244,32,195,6],[244,34,195,32,"node"],[244,38,195,6],[245,0,196,6],[245,13,196,11,"endTerminatorless"],[245,30,196,6],[245,31,196,29,"terminatorState"],[245,46,196,6],[246,0,197,5],[247,0,198,3],[247,5,185,2],[248,0,199,1],[250,0,201,0],[250,6,201,6,"YieldExpression"],[250,21,201,21],[250,24,201,24,"buildYieldAwait"],[250,39,201,39],[250,40,201,40],[250,47,201,39],[250,48,201,0],[251,0,202,0,"exports"],[251,2,202,0,"exports"],[251,9,202,7],[251,10,202,8,"YieldExpression"],[251,25,202,0],[251,28,202,26,"YieldExpression"],[251,43,202,0],[252,0,203,0],[252,6,203,6,"AwaitExpression"],[252,21,203,21],[252,24,203,24,"buildYieldAwait"],[252,39,203,39],[252,40,203,40],[252,47,203,39],[252,48,203,0],[253,0,204,0,"exports"],[253,2,204,0,"exports"],[253,9,204,7],[253,10,204,8,"AwaitExpression"],[253,25,204,0],[253,28,204,26,"AwaitExpression"],[253,43,204,0],[255,0,206,0],[255,11,206,9,"EmptyStatement"],[255,25,206,0],[255,28,206,26],[256,0,207,2],[256,9,207,7,"semicolon"],[256,18,207,2],[256,19,207,17],[256,23,207,2],[257,0,208,1],[259,0,210,0],[259,11,210,9,"ExpressionStatement"],[259,30,210,0],[259,31,210,29,"node"],[259,35,210,0],[259,37,210,35],[260,0,211,2],[260,9,211,7,"print"],[260,14,211,2],[260,15,211,13,"node"],[260,19,211,17],[260,20,211,18,"expression"],[260,30,211,2],[260,32,211,30,"node"],[260,36,211,2],[261,0,212,2],[261,9,212,7,"semicolon"],[261,18,212,2],[262,0,213,1],[264,0,215,0],[264,11,215,9,"AssignmentPattern"],[264,28,215,0],[264,29,215,27,"node"],[264,33,215,0],[264,35,215,33],[265,0,216,2],[265,9,216,7,"print"],[265,14,216,2],[265,15,216,13,"node"],[265,19,216,17],[265,20,216,18,"left"],[265,24,216,2],[265,26,216,24,"node"],[265,30,216,2],[266,0,217,2],[266,8,217,6,"node"],[266,12,217,10],[266,13,217,11,"left"],[266,17,217,6],[266,18,217,16,"optional"],[266,26,217,2],[266,28,217,26],[266,33,217,31,"token"],[266,38,217,26],[266,39,217,37],[266,42,217,26],[267,0,218,2],[267,9,218,7,"print"],[267,14,218,2],[267,15,218,13,"node"],[267,19,218,17],[267,20,218,18,"left"],[267,24,218,13],[267,25,218,23,"typeAnnotation"],[267,39,218,2],[267,41,218,39,"node"],[267,45,218,2],[268,0,219,2],[268,9,219,7,"space"],[268,14,219,2],[269,0,220,2],[269,9,220,7,"token"],[269,14,220,2],[269,15,220,13],[269,18,220,2],[270,0,221,2],[270,9,221,7,"space"],[270,14,221,2],[271,0,222,2],[271,9,222,7,"print"],[271,14,222,2],[271,15,222,13,"node"],[271,19,222,17],[271,20,222,18,"right"],[271,25,222,2],[271,27,222,25,"node"],[271,31,222,2],[272,0,223,1],[274,0,225,0],[274,11,225,9,"AssignmentExpression"],[274,31,225,0],[274,32,225,30,"node"],[274,36,225,0],[274,38,225,36,"parent"],[274,44,225,0],[274,46,225,44],[275,0,226,2],[275,8,226,8,"parens"],[275,14,226,14],[275,17,226,17],[275,22,226,22,"inForStatementInitCounter"],[275,47,226,17],[275,51,226,51,"node"],[275,55,226,55],[275,56,226,56,"operator"],[275,64,226,51],[275,69,226,69],[275,73,226,17],[275,77,226,77],[275,78,226,78,"n"],[275,79,226,79],[275,80,226,80,"needsParens"],[275,91,226,78],[275,92,226,92,"node"],[275,96,226,78],[275,98,226,98,"parent"],[275,104,226,78],[275,105,226,2],[277,0,228,2],[277,8,228,6,"parens"],[277,14,228,2],[277,16,228,14],[278,0,229,4],[278,11,229,9,"token"],[278,16,229,4],[278,17,229,15],[278,20,229,4],[279,0,230,3],[281,0,232,2],[281,9,232,7,"print"],[281,14,232,2],[281,15,232,13,"node"],[281,19,232,17],[281,20,232,18,"left"],[281,24,232,2],[281,26,232,24,"node"],[281,30,232,2],[282,0,233,2],[282,9,233,7,"space"],[282,14,233,2],[284,0,235,2],[284,8,235,6,"node"],[284,12,235,10],[284,13,235,11,"operator"],[284,21,235,6],[284,26,235,24],[284,30,235,6],[284,34,235,32,"node"],[284,38,235,36],[284,39,235,37,"operator"],[284,47,235,32],[284,52,235,50],[284,64,235,2],[284,66,235,64],[285,0,236,4],[285,11,236,9,"word"],[285,15,236,4],[285,16,236,14,"node"],[285,20,236,18],[285,21,236,19,"operator"],[285,29,236,4],[286,0,237,3],[286,5,235,2],[286,11,237,9],[287,0,238,4],[287,11,238,9,"token"],[287,16,238,4],[287,17,238,15,"node"],[287,21,238,19],[287,22,238,20,"operator"],[287,30,238,4],[288,0,239,3],[290,0,241,2],[290,9,241,7,"space"],[290,14,241,2],[291,0,242,2],[291,9,242,7,"print"],[291,14,242,2],[291,15,242,13,"node"],[291,19,242,17],[291,20,242,18,"right"],[291,25,242,2],[291,27,242,25,"node"],[291,31,242,2],[293,0,244,2],[293,8,244,6,"parens"],[293,14,244,2],[293,16,244,14],[294,0,245,4],[294,11,245,9,"token"],[294,16,245,4],[294,17,245,15],[294,20,245,4],[295,0,246,3],[296,0,247,1],[298,0,249,0],[298,11,249,9,"BindExpression"],[298,25,249,0],[298,26,249,24,"node"],[298,30,249,0],[298,32,249,30],[299,0,250,2],[299,9,250,7,"print"],[299,14,250,2],[299,15,250,13,"node"],[299,19,250,17],[299,20,250,18,"object"],[299,26,250,2],[299,28,250,26,"node"],[299,32,250,2],[300,0,251,2],[300,9,251,7,"token"],[300,14,251,2],[300,15,251,13],[300,19,251,2],[301,0,252,2],[301,9,252,7,"print"],[301,14,252,2],[301,15,252,13,"node"],[301,19,252,17],[301,20,252,18,"callee"],[301,26,252,2],[301,28,252,26,"node"],[301,32,252,2],[302,0,253,1],[304,0,255,0],[304,11,255,9,"MemberExpression"],[304,27,255,0],[304,28,255,26,"node"],[304,32,255,0],[304,34,255,32],[305,0,256,2],[305,9,256,7,"print"],[305,14,256,2],[305,15,256,13,"node"],[305,19,256,17],[305,20,256,18,"object"],[305,26,256,2],[305,28,256,26,"node"],[305,32,256,2],[307,0,258,2],[307,8,258,6],[307,9,258,7,"node"],[307,13,258,11],[307,14,258,12,"computed"],[307,22,258,6],[307,26,258,24,"t"],[307,27,258,25],[307,28,258,26,"isMemberExpression"],[307,46,258,24],[307,47,258,45,"node"],[307,51,258,49],[307,52,258,50,"property"],[307,60,258,24],[307,61,258,2],[307,63,258,61],[308,0,259,4],[308,12,259,10],[308,16,259,14,"TypeError"],[308,25,259,10],[308,26,259,24],[308,80,259,10],[308,81,259,4],[309,0,260,3],[311,0,262,2],[311,8,262,6,"computed"],[311,16,262,14],[311,19,262,17,"node"],[311,23,262,21],[311,24,262,22,"computed"],[311,32,262,2],[313,0,264,2],[313,8,264,6,"t"],[313,9,264,7],[313,10,264,8,"isLiteral"],[313,19,264,6],[313,20,264,18,"node"],[313,24,264,22],[313,25,264,23,"property"],[313,33,264,6],[313,38,264,36],[313,45,264,43,"node"],[313,49,264,47],[313,50,264,48,"property"],[313,58,264,43],[313,59,264,57,"value"],[313,64,264,36],[313,69,264,67],[313,77,264,2],[313,79,264,77],[314,0,265,4,"computed"],[314,6,265,4,"computed"],[314,14,265,12],[314,17,265,15],[314,21,265,4],[315,0,266,3],[317,0,268,2],[317,8,268,6,"computed"],[317,16,268,2],[317,18,268,16],[318,0,269,4],[318,11,269,9,"token"],[318,16,269,4],[318,17,269,15],[318,20,269,4],[319,0,270,4],[319,11,270,9,"print"],[319,16,270,4],[319,17,270,15,"node"],[319,21,270,19],[319,22,270,20,"property"],[319,30,270,4],[319,32,270,30,"node"],[319,36,270,4],[320,0,271,4],[320,11,271,9,"token"],[320,16,271,4],[320,17,271,15],[320,20,271,4],[321,0,272,3],[321,5,268,2],[321,11,272,9],[322,0,273,4],[322,11,273,9,"token"],[322,16,273,4],[322,17,273,15],[322,20,273,4],[323,0,274,4],[323,11,274,9,"print"],[323,16,274,4],[323,17,274,15,"node"],[323,21,274,19],[323,22,274,20,"property"],[323,30,274,4],[323,32,274,30,"node"],[323,36,274,4],[324,0,275,3],[325,0,276,1],[327,0,278,0],[327,11,278,9,"MetaProperty"],[327,23,278,0],[327,24,278,22,"node"],[327,28,278,0],[327,30,278,28],[328,0,279,2],[328,9,279,7,"print"],[328,14,279,2],[328,15,279,13,"node"],[328,19,279,17],[328,20,279,18,"meta"],[328,24,279,2],[328,26,279,24,"node"],[328,30,279,2],[329,0,280,2],[329,9,280,7,"token"],[329,14,280,2],[329,15,280,13],[329,18,280,2],[330,0,281,2],[330,9,281,7,"print"],[330,14,281,2],[330,15,281,13,"node"],[330,19,281,17],[330,20,281,18,"property"],[330,28,281,2],[330,30,281,28,"node"],[330,34,281,2],[331,0,282,1],[333,0,284,0],[333,11,284,9,"PrivateName"],[333,22,284,0],[333,23,284,21,"node"],[333,27,284,0],[333,29,284,27],[334,0,285,2],[334,9,285,7,"token"],[334,14,285,2],[334,15,285,13],[334,18,285,2],[335,0,286,2],[335,9,286,7,"print"],[335,14,286,2],[335,15,286,13,"node"],[335,19,286,17],[335,20,286,18,"id"],[335,22,286,2],[335,24,286,22,"node"],[335,28,286,2],[336,0,287,1],[338,0,289,0],[338,11,289,9,"V8IntrinsicIdentifier"],[338,32,289,0],[338,33,289,31,"node"],[338,37,289,0],[338,39,289,37],[339,0,290,2],[339,9,290,7,"token"],[339,14,290,2],[339,15,290,13],[339,18,290,2],[340,0,291,2],[340,9,291,7,"word"],[340,13,291,2],[340,14,291,12,"node"],[340,18,291,16],[340,19,291,17,"name"],[340,23,291,2],[341,0,292,1]]},"type":"js/module"}]}