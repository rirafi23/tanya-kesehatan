{"dependencies":[{"name":"@babel/runtime/helpers/extends","data":{"isAsync":false}},{"name":"semver","data":{"isAsync":false}},{"name":"../../","data":{"isAsync":false}},{"name":"../caching","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _extends = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/extends\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = makeAPI;\n\n  function _semver() {\n    var data = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"semver\"));\n\n    _semver = function _semver() {\n      return data;\n    };\n\n    return data;\n  }\n\n  var _ = _$$_REQUIRE(_dependencyMap[2], \"../../\");\n\n  var _caching = _$$_REQUIRE(_dependencyMap[3], \"../caching\");\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      default: obj\n    };\n  }\n\n  function makeAPI(cache) {\n    var env = function env(value) {\n      return cache.using(function (data) {\n        if (typeof value === \"undefined\") return data.envName;\n\n        if (typeof value === \"function\") {\n          return (0, _caching.assertSimpleType)(value(data.envName));\n        }\n\n        if (!Array.isArray(value)) value = [value];\n        return value.some(function (entry) {\n          if (typeof entry !== \"string\") {\n            throw new Error(\"Unexpected non-string value\");\n          }\n\n          return entry === data.envName;\n        });\n      });\n    };\n\n    var caller = function caller(cb) {\n      return cache.using(function (data) {\n        return (0, _caching.assertSimpleType)(cb(data.caller));\n      });\n    };\n\n    return {\n      version: _.version,\n      cache: cache.simple(),\n      env: env,\n      async: function async() {\n        return false;\n      },\n      caller: caller,\n      assertVersion: assertVersion,\n      tokTypes: undefined\n    };\n  }\n\n  function assertVersion(range) {\n    if (typeof range === \"number\") {\n      if (!Number.isInteger(range)) {\n        throw new Error(\"Expected string or integer value.\");\n      }\n\n      range = \"^\" + range + \".0.0-0\";\n    }\n\n    if (typeof range !== \"string\") {\n      throw new Error(\"Expected string or integer value.\");\n    }\n\n    if (_semver().default.satisfies(_.version, range)) return;\n    var limit = Error.stackTraceLimit;\n\n    if (typeof limit === \"number\" && limit < 25) {\n      Error.stackTraceLimit = 25;\n    }\n\n    var err = new Error(\"Requires Babel \\\"\" + range + \"\\\", but was loaded with \\\"\" + _.version + \"\\\". \" + \"If you are sure you have a compatible version of @babel/core, \" + \"it is likely that something in your build process is loading the \" + \"wrong version. Inspect the stack trace of this error to look for \" + \"the first entry that doesn't mention \\\"@babel/core\\\" or \\\"babel-core\\\" \" + \"to see what is calling Babel.\");\n\n    if (typeof limit === \"number\") {\n      Error.stackTraceLimit = limit;\n    }\n\n    throw _extends(err, {\n      code: \"BABEL_VERSION_UNSUPPORTED\",\n      version: _.version,\n      range: range\n    });\n  }\n});","map":[[2,0,1,0],[6,0,3,0,"Object"],[6,2,3,0,"Object"],[6,8,3,6],[6,9,3,7,"defineProperty"],[6,23,3,0],[6,24,3,22,"exports"],[6,31,3,0],[6,33,3,31],[6,45,3,0],[6,47,3,45],[7,0,4,2,"value"],[7,4,4,2,"value"],[7,9,4,7],[7,11,4,9],[8,0,3,45],[8,3,3,0],[9,0,6,0,"exports"],[9,2,6,0,"exports"],[9,9,6,7],[9,10,6,8,"default"],[9,17,6,0],[9,20,6,18,"makeAPI"],[9,27,6,0],[11,0,8,0],[11,11,8,9,"_semver"],[11,18,8,0],[11,21,8,19],[12,0,9,2],[12,8,9,8,"data"],[12,12,9,12],[12,15,9,15,"_interopRequireDefault"],[12,37,9,37],[12,38,9,38,"require"],[12,49,9,45],[12,78,9,37],[12,79,9,2],[14,0,11,2,"_semver"],[14,4,11,2,"_semver"],[14,11,11,9],[14,14,11,12],[14,33,11,24],[15,0,12,4],[15,13,12,11,"data"],[15,17,12,4],[16,0,13,3],[16,5,11,2],[18,0,15,2],[18,11,15,9,"data"],[18,15,15,2],[19,0,16,1],[21,0,18,0],[21,6,18,4,"_"],[21,7,18,5],[21,10,18,8,"require"],[21,21,18,15],[21,50,18,0],[23,0,20,0],[23,6,20,4,"_caching"],[23,14,20,12],[23,17,20,15,"require"],[23,28,20,22],[23,61,20,0],[25,0,22,0],[25,11,22,9,"_interopRequireDefault"],[25,33,22,0],[25,34,22,32,"obj"],[25,37,22,0],[25,39,22,37],[26,0,22,39],[26,11,22,46,"obj"],[26,14,22,49],[26,18,22,53,"obj"],[26,21,22,56],[26,22,22,57,"__esModule"],[26,32,22,46],[26,35,22,70,"obj"],[26,38,22,46],[26,41,22,76],[27,0,22,78,"default"],[27,6,22,78,"default"],[27,13,22,85],[27,15,22,87,"obj"],[28,0,22,76],[28,5,22,39],[29,0,22,95],[31,0,24,0],[31,11,24,9,"makeAPI"],[31,18,24,0],[31,19,24,17,"cache"],[31,24,24,0],[31,26,24,24],[32,0,25,2],[32,8,25,8,"env"],[32,11,25,11],[32,14,25,14],[32,23,25,8,"env"],[32,26,25,14],[32,27,25,14,"value"],[32,32,25,19],[33,0,25,19],[33,13,25,23,"cache"],[33,18,25,28],[33,19,25,29,"using"],[33,24,25,23],[33,25,25,35],[33,35,25,35,"data"],[33,39,25,39],[33,41,25,43],[34,0,26,4],[34,12,26,8],[34,19,26,15,"value"],[34,24,26,8],[34,29,26,25],[34,40,26,4],[34,42,26,38],[34,49,26,45,"data"],[34,53,26,49],[34,54,26,50,"envName"],[34,61,26,38],[36,0,28,4],[36,12,28,8],[36,19,28,15,"value"],[36,24,28,8],[36,29,28,25],[36,39,28,4],[36,41,28,37],[37,0,29,6],[37,17,29,13],[37,18,29,14],[37,21,29,17,"_caching"],[37,29,29,25],[37,30,29,26,"assertSimpleType"],[37,46,29,13],[37,48,29,44,"value"],[37,53,29,49],[37,54,29,50,"data"],[37,58,29,54],[37,59,29,55,"envName"],[37,66,29,49],[37,67,29,13],[37,68,29,6],[38,0,30,5],[40,0,32,4],[40,12,32,8],[40,13,32,9,"Array"],[40,18,32,14],[40,19,32,15,"isArray"],[40,26,32,9],[40,27,32,23,"value"],[40,32,32,9],[40,33,32,4],[40,35,32,31,"value"],[40,40,32,36],[40,43,32,39],[40,44,32,40,"value"],[40,49,32,39],[40,50,32,31],[41,0,33,4],[41,15,33,11,"value"],[41,20,33,16],[41,21,33,17,"some"],[41,25,33,11],[41,26,33,22],[41,36,33,22,"entry"],[41,41,33,27],[41,43,33,31],[42,0,34,6],[42,14,34,10],[42,21,34,17,"entry"],[42,26,34,10],[42,31,34,27],[42,39,34,6],[42,41,34,37],[43,0,35,8],[43,18,35,14],[43,22,35,18,"Error"],[43,27,35,14],[43,28,35,24],[43,57,35,14],[43,58,35,8],[44,0,36,7],[46,0,38,6],[46,17,38,13,"entry"],[46,22,38,18],[46,27,38,23,"data"],[46,31,38,27],[46,32,38,28,"envName"],[46,39,38,6],[47,0,39,5],[47,9,33,11],[47,10,33,4],[48,0,40,3],[48,7,25,23],[48,8,25,19],[49,0,25,19],[49,5,25,2],[51,0,42,2],[51,8,42,8,"caller"],[51,14,42,14],[51,17,42,17],[51,26,42,8,"caller"],[51,32,42,17],[51,33,42,17,"cb"],[51,35,42,19],[52,0,42,19],[52,13,42,23,"cache"],[52,18,42,28],[52,19,42,29,"using"],[52,24,42,23],[52,25,42,35],[52,35,42,35,"data"],[52,39,42,39],[53,0,42,39],[53,15,42,43],[53,16,42,44],[53,19,42,47,"_caching"],[53,27,42,55],[53,28,42,56,"assertSimpleType"],[53,44,42,43],[53,46,42,74,"cb"],[53,48,42,76],[53,49,42,77,"data"],[53,53,42,81],[53,54,42,82,"caller"],[53,60,42,76],[53,61,42,43],[53,62,42,39],[54,0,42,39],[54,7,42,23],[54,8,42,19],[55,0,42,19],[55,5,42,2],[57,0,44,2],[57,11,44,9],[58,0,45,4,"version"],[58,6,45,4,"version"],[58,13,45,11],[58,15,45,13,"_"],[58,16,45,14],[58,17,45,15,"version"],[58,24,44,9],[59,0,46,4,"cache"],[59,6,46,4,"cache"],[59,11,46,9],[59,13,46,11,"cache"],[59,18,46,16],[59,19,46,17,"simple"],[59,25,46,11],[59,27,44,9],[60,0,47,4,"env"],[60,6,47,4,"env"],[60,9,47,7],[60,11,47,4,"env"],[60,14,44,9],[61,0,48,4,"async"],[61,6,48,4,"async"],[61,11,48,9],[61,13,48,11],[62,0,48,11],[62,15,48,17],[62,20,48,11],[63,0,48,11],[63,7,44,9],[64,0,49,4,"caller"],[64,6,49,4,"caller"],[64,12,49,10],[64,14,49,4,"caller"],[64,20,44,9],[65,0,50,4,"assertVersion"],[65,6,50,4,"assertVersion"],[65,19,50,17],[65,21,50,4,"assertVersion"],[65,34,44,9],[66,0,51,4,"tokTypes"],[66,6,51,4,"tokTypes"],[66,14,51,12],[66,16,51,14,"undefined"],[67,0,44,9],[67,5,44,2],[68,0,53,1],[70,0,55,0],[70,11,55,9,"assertVersion"],[70,24,55,0],[70,25,55,23,"range"],[70,30,55,0],[70,32,55,30],[71,0,56,2],[71,8,56,6],[71,15,56,13,"range"],[71,20,56,6],[71,25,56,23],[71,33,56,2],[71,35,56,33],[72,0,57,4],[72,10,57,8],[72,11,57,9,"Number"],[72,17,57,15],[72,18,57,16,"isInteger"],[72,27,57,9],[72,28,57,26,"range"],[72,33,57,9],[72,34,57,4],[72,36,57,34],[73,0,58,6],[73,14,58,12],[73,18,58,16,"Error"],[73,23,58,12],[73,24,58,22],[73,59,58,12],[73,60,58,6],[74,0,59,5],[76,0,61,4,"range"],[76,6,61,4,"range"],[76,11,61,9],[76,20,61,16,"range"],[76,25,61,9],[76,36,61,4],[77,0,62,3],[79,0,64,2],[79,8,64,6],[79,15,64,13,"range"],[79,20,64,6],[79,25,64,23],[79,33,64,2],[79,35,64,33],[80,0,65,4],[80,12,65,10],[80,16,65,14,"Error"],[80,21,65,10],[80,22,65,20],[80,57,65,10],[80,58,65,4],[81,0,66,3],[83,0,68,2],[83,8,68,6,"_semver"],[83,15,68,13],[83,18,68,16,"default"],[83,25,68,6],[83,26,68,24,"satisfies"],[83,35,68,6],[83,36,68,34,"_"],[83,37,68,35],[83,38,68,36,"version"],[83,45,68,6],[83,47,68,45,"range"],[83,52,68,6],[83,53,68,2],[83,55,68,53],[84,0,69,2],[84,8,69,8,"limit"],[84,13,69,13],[84,16,69,16,"Error"],[84,21,69,21],[84,22,69,22,"stackTraceLimit"],[84,37,69,2],[86,0,71,2],[86,8,71,6],[86,15,71,13,"limit"],[86,20,71,6],[86,25,71,23],[86,33,71,6],[86,37,71,35,"limit"],[86,42,71,40],[86,45,71,43],[86,47,71,2],[86,49,71,47],[87,0,72,4,"Error"],[87,6,72,4,"Error"],[87,11,72,9],[87,12,72,10,"stackTraceLimit"],[87,27,72,4],[87,30,72,28],[87,32,72,4],[88,0,73,3],[90,0,75,2],[90,8,75,8,"err"],[90,11,75,11],[90,14,75,14],[90,18,75,18,"Error"],[90,23,75,14],[90,24,75,24],[90,46,75,43,"range"],[90,51,75,24],[90,85,75,75,"_"],[90,86,75,76],[90,87,75,77,"version"],[90,94,75,24],[90,420,75,14],[90,421,75,2],[92,0,77,2],[92,8,77,6],[92,15,77,13,"limit"],[92,20,77,6],[92,25,77,23],[92,33,77,2],[92,35,77,33],[93,0,78,4,"Error"],[93,6,78,4,"Error"],[93,11,78,9],[93,12,78,10,"stackTraceLimit"],[93,27,78,4],[93,30,78,28,"limit"],[93,35,78,4],[94,0,79,3],[96,0,81,2],[96,10,81,8],[96,19,81,22,"err"],[96,22,81,8],[96,24,81,27],[97,0,82,4,"code"],[97,6,82,4,"code"],[97,10,82,8],[97,12,82,10],[97,39,81,27],[98,0,83,4,"version"],[98,6,83,4,"version"],[98,13,83,11],[98,15,83,13,"_"],[98,16,83,14],[98,17,83,15,"version"],[98,24,81,27],[99,0,84,4,"range"],[99,6,84,4,"range"],[99,11,84,9],[99,13,84,4,"range"],[100,0,81,27],[100,5,81,8],[100,6,81,2],[101,0,86,1]]},"type":"js/module"}]}