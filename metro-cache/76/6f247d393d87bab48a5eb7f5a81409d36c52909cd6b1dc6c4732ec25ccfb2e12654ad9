{"dependencies":[{"name":"../retrievers/getBindingIdentifiers","data":{"isAsync":false}},{"name":"../validators/generated","data":{"isAsync":false}},{"name":"../builders/generated","data":{"isAsync":false}},{"name":"../clone/cloneNode","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = gatherSequenceExpressions;\n\n  var _getBindingIdentifiers = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0], \"../retrievers/getBindingIdentifiers\"));\n\n  var _generated = _$$_REQUIRE(_dependencyMap[1], \"../validators/generated\");\n\n  var _generated2 = _$$_REQUIRE(_dependencyMap[2], \"../builders/generated\");\n\n  var _cloneNode = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"../clone/cloneNode\"));\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      default: obj\n    };\n  }\n\n  function gatherSequenceExpressions(nodes, scope, declars) {\n    var exprs = [];\n    var ensureLastUndefined = true;\n\n    for (var _iterator = nodes, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var _node = _ref;\n      ensureLastUndefined = false;\n\n      if ((0, _generated.isExpression)(_node)) {\n        exprs.push(_node);\n      } else if ((0, _generated.isExpressionStatement)(_node)) {\n        exprs.push(_node.expression);\n      } else if ((0, _generated.isVariableDeclaration)(_node)) {\n        if (_node.kind !== \"var\") return;\n\n        for (var _iterator2 = _node.declarations, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"]();;) {\n          var _ref2;\n\n          if (_isArray2) {\n            if (_i2 >= _iterator2.length) break;\n            _ref2 = _iterator2[_i2++];\n          } else {\n            _i2 = _iterator2.next();\n            if (_i2.done) break;\n            _ref2 = _i2.value;\n          }\n\n          var _declar = _ref2;\n\n          var _bindings = (0, _getBindingIdentifiers.default)(_declar);\n\n          for (var _i3 = 0, _Object$keys = Object.keys(_bindings); _i3 < _Object$keys.length; _i3++) {\n            var key = _Object$keys[_i3];\n            declars.push({\n              kind: _node.kind,\n              id: (0, _cloneNode.default)(_bindings[key])\n            });\n          }\n\n          if (_declar.init) {\n            exprs.push((0, _generated2.assignmentExpression)(\"=\", _declar.id, _declar.init));\n          }\n        }\n\n        ensureLastUndefined = true;\n      } else if ((0, _generated.isIfStatement)(_node)) {\n        var consequent = _node.consequent ? gatherSequenceExpressions([_node.consequent], scope, declars) : scope.buildUndefinedNode();\n        var alternate = _node.alternate ? gatherSequenceExpressions([_node.alternate], scope, declars) : scope.buildUndefinedNode();\n        if (!consequent || !alternate) return;\n        exprs.push((0, _generated2.conditionalExpression)(_node.test, consequent, alternate));\n      } else if ((0, _generated.isBlockStatement)(_node)) {\n        var body = gatherSequenceExpressions(_node.body, scope, declars);\n        if (!body) return;\n        exprs.push(body);\n      } else if ((0, _generated.isEmptyStatement)(_node)) {\n        ensureLastUndefined = true;\n      } else {\n        return;\n      }\n    }\n\n    if (ensureLastUndefined) {\n      exprs.push(scope.buildUndefinedNode());\n    }\n\n    if (exprs.length === 1) {\n      return exprs[0];\n    } else {\n      return (0, _generated2.sequenceExpression)(exprs);\n    }\n  }\n});","map":[[2,0,1,0],[4,0,3,0,"Object"],[4,2,3,0,"Object"],[4,8,3,6],[4,9,3,7,"defineProperty"],[4,23,3,0],[4,24,3,22,"exports"],[4,31,3,0],[4,33,3,31],[4,45,3,0],[4,47,3,45],[5,0,4,2,"value"],[5,4,4,2,"value"],[5,9,4,7],[5,11,4,9],[6,0,3,45],[6,3,3,0],[7,0,6,0,"exports"],[7,2,6,0,"exports"],[7,9,6,7],[7,10,6,8,"default"],[7,17,6,0],[7,20,6,18,"gatherSequenceExpressions"],[7,45,6,0],[9,0,8,0],[9,6,8,4,"_getBindingIdentifiers"],[9,28,8,26],[9,31,8,29,"_interopRequireDefault"],[9,53,8,51],[9,54,8,52,"require"],[9,65,8,59],[9,123,8,51],[9,124,8,0],[11,0,10,0],[11,6,10,4,"_generated"],[11,16,10,14],[11,19,10,17,"require"],[11,30,10,24],[11,76,10,0],[13,0,12,0],[13,6,12,4,"_generated2"],[13,17,12,15],[13,20,12,18,"require"],[13,31,12,25],[13,75,12,0],[15,0,14,0],[15,6,14,4,"_cloneNode"],[15,16,14,14],[15,19,14,17,"_interopRequireDefault"],[15,41,14,39],[15,42,14,40,"require"],[15,53,14,47],[15,94,14,39],[15,95,14,0],[17,0,16,0],[17,11,16,9,"_interopRequireDefault"],[17,33,16,0],[17,34,16,32,"obj"],[17,37,16,0],[17,39,16,37],[18,0,16,39],[18,11,16,46,"obj"],[18,14,16,49],[18,18,16,53,"obj"],[18,21,16,56],[18,22,16,57,"__esModule"],[18,32,16,46],[18,35,16,70,"obj"],[18,38,16,46],[18,41,16,76],[19,0,16,78,"default"],[19,6,16,78,"default"],[19,13,16,85],[19,15,16,87,"obj"],[20,0,16,76],[20,5,16,39],[21,0,16,95],[23,0,18,0],[23,11,18,9,"gatherSequenceExpressions"],[23,36,18,0],[23,37,18,35,"nodes"],[23,42,18,0],[23,44,18,42,"scope"],[23,49,18,0],[23,51,18,49,"declars"],[23,58,18,0],[23,60,18,58],[24,0,19,2],[24,8,19,8,"exprs"],[24,13,19,13],[24,16,19,16],[24,18,19,2],[25,0,20,2],[25,8,20,6,"ensureLastUndefined"],[25,27,20,25],[25,30,20,28],[25,34,20,2],[27,0,22,2],[27,25,22,21,"nodes"],[27,30,22,2],[27,190,22,28],[28,0,22,28],[30,0,22,28],[31,0,22,28],[32,0,22,28],[33,0,22,28],[34,0,22,28],[35,0,22,28],[36,0,22,28],[37,0,22,28],[39,0,22,28],[39,10,22,13,"node"],[39,15,22,28],[40,0,23,4,"ensureLastUndefined"],[40,6,23,4,"ensureLastUndefined"],[40,25,23,23],[40,28,23,26],[40,33,23,4],[42,0,25,4],[42,10,25,8],[42,11,25,9],[42,14,25,12,"_generated"],[42,24,25,22],[42,25,25,23,"isExpression"],[42,37,25,8],[42,39,25,37,"node"],[42,44,25,8],[42,45,25,4],[42,47,25,44],[43,0,26,6,"exprs"],[43,8,26,6,"exprs"],[43,13,26,11],[43,14,26,12,"push"],[43,18,26,6],[43,19,26,17,"node"],[43,24,26,6],[44,0,27,5],[44,7,25,4],[44,13,27,11],[44,17,27,15],[44,18,27,16],[44,21,27,19,"_generated"],[44,31,27,29],[44,32,27,30,"isExpressionStatement"],[44,53,27,15],[44,55,27,53,"node"],[44,60,27,15],[44,61,27,11],[44,63,27,60],[45,0,28,6,"exprs"],[45,8,28,6,"exprs"],[45,13,28,11],[45,14,28,12,"push"],[45,18,28,6],[45,19,28,17,"node"],[45,24,28,21],[45,25,28,22,"expression"],[45,35,28,6],[46,0,29,5],[46,7,27,11],[46,13,29,11],[46,17,29,15],[46,18,29,16],[46,21,29,19,"_generated"],[46,31,29,29],[46,32,29,30,"isVariableDeclaration"],[46,53,29,15],[46,55,29,53,"node"],[46,60,29,15],[46,61,29,11],[46,63,29,60],[47,0,30,6],[47,12,30,10,"node"],[47,17,30,14],[47,18,30,15,"kind"],[47,22,30,10],[47,27,30,24],[47,32,30,6],[47,34,30,31],[49,0,32,6],[49,30,32,27,"node"],[49,35,32,31],[49,36,32,32,"declarations"],[49,48,32,6],[49,215,32,46],[50,0,32,46],[52,0,32,46],[53,0,32,46],[54,0,32,46],[55,0,32,46],[56,0,32,46],[57,0,32,46],[58,0,32,46],[59,0,32,46],[61,0,32,46],[61,14,32,17,"declar"],[61,21,32,46],[63,0,33,8],[63,14,33,14,"bindings"],[63,23,33,22],[63,26,33,25],[63,27,33,26],[63,30,33,29,"_getBindingIdentifiers"],[63,52,33,51],[63,53,33,52,"default"],[63,60,33,25],[63,62,33,61,"declar"],[63,69,33,25],[63,70,33,8],[65,0,35,8],[65,43,35,26,"Object"],[65,49,35,32],[65,50,35,33,"keys"],[65,54,35,26],[65,55,35,38,"bindings"],[65,64,35,26],[65,65,35,8],[65,101,35,49],[66,0,35,13],[66,16,35,19,"key"],[66,19,35,22],[66,39,35,13],[67,0,36,10,"declars"],[67,12,36,10,"declars"],[67,19,36,17],[67,20,36,18,"push"],[67,24,36,10],[67,25,36,23],[68,0,37,12,"kind"],[68,14,37,12,"kind"],[68,18,37,16],[68,20,37,18,"node"],[68,25,37,22],[68,26,37,23,"kind"],[68,30,36,23],[69,0,38,12,"id"],[69,14,38,12,"id"],[69,16,38,14],[69,18,38,16],[69,19,38,17],[69,22,38,20,"_cloneNode"],[69,32,38,30],[69,33,38,31,"default"],[69,40,38,16],[69,42,38,40,"bindings"],[69,51,38,48],[69,52,38,49,"key"],[69,55,38,48],[69,56,38,16],[70,0,36,23],[70,13,36,10],[71,0,40,9],[73,0,42,8],[73,14,42,12,"declar"],[73,21,42,18],[73,22,42,19,"init"],[73,26,42,8],[73,28,42,25],[74,0,43,10,"exprs"],[74,12,43,10,"exprs"],[74,17,43,15],[74,18,43,16,"push"],[74,22,43,10],[74,23,43,21],[74,24,43,22],[74,27,43,25,"_generated2"],[74,38,43,36],[74,39,43,37,"assignmentExpression"],[74,59,43,21],[74,61,43,59],[74,64,43,21],[74,66,43,64,"declar"],[74,73,43,70],[74,74,43,71,"id"],[74,76,43,21],[74,78,43,75,"declar"],[74,85,43,81],[74,86,43,82,"init"],[74,90,43,21],[74,91,43,10],[75,0,44,9],[76,0,45,7],[78,0,47,6,"ensureLastUndefined"],[78,8,47,6,"ensureLastUndefined"],[78,27,47,25],[78,30,47,28],[78,34,47,6],[79,0,48,5],[79,7,29,11],[79,13,48,11],[79,17,48,15],[79,18,48,16],[79,21,48,19,"_generated"],[79,31,48,29],[79,32,48,30,"isIfStatement"],[79,45,48,15],[79,47,48,45,"node"],[79,52,48,15],[79,53,48,11],[79,55,48,52],[80,0,49,6],[80,12,49,12,"consequent"],[80,22,49,22],[80,25,49,25,"node"],[80,30,49,29],[80,31,49,30,"consequent"],[80,41,49,25],[80,44,49,43,"gatherSequenceExpressions"],[80,69,49,68],[80,70,49,69],[80,71,49,70,"node"],[80,76,49,74],[80,77,49,75,"consequent"],[80,87,49,69],[80,88,49,68],[80,90,49,88,"scope"],[80,95,49,68],[80,97,49,95,"declars"],[80,104,49,68],[80,105,49,25],[80,108,49,106,"scope"],[80,113,49,111],[80,114,49,112,"buildUndefinedNode"],[80,132,49,106],[80,134,49,6],[81,0,50,6],[81,12,50,12,"alternate"],[81,21,50,21],[81,24,50,24,"node"],[81,29,50,28],[81,30,50,29,"alternate"],[81,39,50,24],[81,42,50,41,"gatherSequenceExpressions"],[81,67,50,66],[81,68,50,67],[81,69,50,68,"node"],[81,74,50,72],[81,75,50,73,"alternate"],[81,84,50,67],[81,85,50,66],[81,87,50,85,"scope"],[81,92,50,66],[81,94,50,92,"declars"],[81,101,50,66],[81,102,50,24],[81,105,50,103,"scope"],[81,110,50,108],[81,111,50,109,"buildUndefinedNode"],[81,129,50,103],[81,131,50,6],[82,0,51,6],[82,12,51,10],[82,13,51,11,"consequent"],[82,23,51,10],[82,27,51,25],[82,28,51,26,"alternate"],[82,37,51,6],[82,39,51,37],[83,0,52,6,"exprs"],[83,8,52,6,"exprs"],[83,13,52,11],[83,14,52,12,"push"],[83,18,52,6],[83,19,52,17],[83,20,52,18],[83,23,52,21,"_generated2"],[83,34,52,32],[83,35,52,33,"conditionalExpression"],[83,56,52,17],[83,58,52,56,"node"],[83,63,52,60],[83,64,52,61,"test"],[83,68,52,17],[83,70,52,67,"consequent"],[83,80,52,17],[83,82,52,79,"alternate"],[83,91,52,17],[83,92,52,6],[84,0,53,5],[84,7,48,11],[84,13,53,11],[84,17,53,15],[84,18,53,16],[84,21,53,19,"_generated"],[84,31,53,29],[84,32,53,30,"isBlockStatement"],[84,48,53,15],[84,50,53,48,"node"],[84,55,53,15],[84,56,53,11],[84,58,53,55],[85,0,54,6],[85,12,54,12,"body"],[85,16,54,16],[85,19,54,19,"gatherSequenceExpressions"],[85,44,54,44],[85,45,54,45,"node"],[85,50,54,49],[85,51,54,50,"body"],[85,55,54,44],[85,57,54,56,"scope"],[85,62,54,44],[85,64,54,63,"declars"],[85,71,54,44],[85,72,54,6],[86,0,55,6],[86,12,55,10],[86,13,55,11,"body"],[86,17,55,6],[86,19,55,17],[87,0,56,6,"exprs"],[87,8,56,6,"exprs"],[87,13,56,11],[87,14,56,12,"push"],[87,18,56,6],[87,19,56,17,"body"],[87,23,56,6],[88,0,57,5],[88,7,53,11],[88,13,57,11],[88,17,57,15],[88,18,57,16],[88,21,57,19,"_generated"],[88,31,57,29],[88,32,57,30,"isEmptyStatement"],[88,48,57,15],[88,50,57,48,"node"],[88,55,57,15],[88,56,57,11],[88,58,57,55],[89,0,58,6,"ensureLastUndefined"],[89,8,58,6,"ensureLastUndefined"],[89,27,58,25],[89,30,58,28],[89,34,58,6],[90,0,59,5],[90,7,57,11],[90,13,59,11],[91,0,60,6],[92,0,61,5],[93,0,62,3],[95,0,64,2],[95,8,64,6,"ensureLastUndefined"],[95,27,64,2],[95,29,64,27],[96,0,65,4,"exprs"],[96,6,65,4,"exprs"],[96,11,65,9],[96,12,65,10,"push"],[96,16,65,4],[96,17,65,15,"scope"],[96,22,65,20],[96,23,65,21,"buildUndefinedNode"],[96,41,65,15],[96,43,65,4],[97,0,66,3],[99,0,68,2],[99,8,68,6,"exprs"],[99,13,68,11],[99,14,68,12,"length"],[99,20,68,6],[99,25,68,23],[99,26,68,2],[99,28,68,26],[100,0,69,4],[100,13,69,11,"exprs"],[100,18,69,16],[100,19,69,17],[100,20,69,16],[100,21,69,4],[101,0,70,3],[101,5,68,2],[101,11,70,9],[102,0,71,4],[102,13,71,11],[102,14,71,12],[102,17,71,15,"_generated2"],[102,28,71,26],[102,29,71,27,"sequenceExpression"],[102,47,71,11],[102,49,71,47,"exprs"],[102,54,71,11],[102,55,71,4],[103,0,72,3],[104,0,73,1]]},"type":"js/module"}]}