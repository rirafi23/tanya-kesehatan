{"dependencies":[{"name":"@babel/types","data":{"isAsync":false}},{"name":"./inferer-reference","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.VariableDeclarator = VariableDeclarator;\n  exports.TypeCastExpression = TypeCastExpression;\n  exports.NewExpression = NewExpression;\n  exports.TemplateLiteral = TemplateLiteral;\n  exports.UnaryExpression = UnaryExpression;\n  exports.BinaryExpression = BinaryExpression;\n  exports.LogicalExpression = LogicalExpression;\n  exports.ConditionalExpression = ConditionalExpression;\n  exports.SequenceExpression = SequenceExpression;\n  exports.ParenthesizedExpression = ParenthesizedExpression;\n  exports.AssignmentExpression = AssignmentExpression;\n  exports.UpdateExpression = UpdateExpression;\n  exports.StringLiteral = StringLiteral;\n  exports.NumericLiteral = NumericLiteral;\n  exports.BooleanLiteral = BooleanLiteral;\n  exports.NullLiteral = NullLiteral;\n  exports.RegExpLiteral = RegExpLiteral;\n  exports.ObjectExpression = ObjectExpression;\n  exports.ArrayExpression = ArrayExpression;\n  exports.RestElement = RestElement;\n  exports.ClassDeclaration = exports.ClassExpression = exports.FunctionDeclaration = exports.ArrowFunctionExpression = exports.FunctionExpression = Func;\n  exports.CallExpression = CallExpression;\n  exports.TaggedTemplateExpression = TaggedTemplateExpression;\n  Object.defineProperty(exports, \"Identifier\", {\n    enumerable: true,\n    get: function get() {\n      return _infererReference.default;\n    }\n  });\n\n  var t = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], \"@babel/types\"));\n\n  var _infererReference = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"./inferer-reference\"));\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      default: obj\n    };\n  }\n\n  function _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n\n    _getRequireWildcardCache = function _getRequireWildcardCache() {\n      return cache;\n    };\n\n    return cache;\n  }\n\n  function _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n      return obj;\n    }\n\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n      return {\n        default: obj\n      };\n    }\n\n    var cache = _getRequireWildcardCache();\n\n    if (cache && cache.has(obj)) {\n      return cache.get(obj);\n    }\n\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n    for (var key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n        if (desc && (desc.get || desc.set)) {\n          Object.defineProperty(newObj, key, desc);\n        } else {\n          newObj[key] = obj[key];\n        }\n      }\n    }\n\n    newObj.default = obj;\n\n    if (cache) {\n      cache.set(obj, newObj);\n    }\n\n    return newObj;\n  }\n\n  function VariableDeclarator() {\n    var id = this.get(\"id\");\n    if (!id.isIdentifier()) return;\n    var init = this.get(\"init\");\n    var type = init.getTypeAnnotation();\n\n    if (type && type.type === \"AnyTypeAnnotation\") {\n      if (init.isCallExpression() && init.get(\"callee\").isIdentifier({\n        name: \"Array\"\n      }) && !init.scope.hasBinding(\"Array\", true)) {\n        type = ArrayExpression();\n      }\n    }\n\n    return type;\n  }\n\n  function TypeCastExpression(node) {\n    return node.typeAnnotation;\n  }\n\n  TypeCastExpression.validParent = true;\n\n  function NewExpression(node) {\n    if (this.get(\"callee\").isIdentifier()) {\n      return t.genericTypeAnnotation(node.callee);\n    }\n  }\n\n  function TemplateLiteral() {\n    return t.stringTypeAnnotation();\n  }\n\n  function UnaryExpression(node) {\n    var operator = node.operator;\n\n    if (operator === \"void\") {\n      return t.voidTypeAnnotation();\n    } else if (t.NUMBER_UNARY_OPERATORS.indexOf(operator) >= 0) {\n      return t.numberTypeAnnotation();\n    } else if (t.STRING_UNARY_OPERATORS.indexOf(operator) >= 0) {\n      return t.stringTypeAnnotation();\n    } else if (t.BOOLEAN_UNARY_OPERATORS.indexOf(operator) >= 0) {\n      return t.booleanTypeAnnotation();\n    }\n  }\n\n  function BinaryExpression(node) {\n    var operator = node.operator;\n\n    if (t.NUMBER_BINARY_OPERATORS.indexOf(operator) >= 0) {\n      return t.numberTypeAnnotation();\n    } else if (t.BOOLEAN_BINARY_OPERATORS.indexOf(operator) >= 0) {\n      return t.booleanTypeAnnotation();\n    } else if (operator === \"+\") {\n      var right = this.get(\"right\");\n      var left = this.get(\"left\");\n\n      if (left.isBaseType(\"number\") && right.isBaseType(\"number\")) {\n        return t.numberTypeAnnotation();\n      } else if (left.isBaseType(\"string\") || right.isBaseType(\"string\")) {\n        return t.stringTypeAnnotation();\n      }\n\n      return t.unionTypeAnnotation([t.stringTypeAnnotation(), t.numberTypeAnnotation()]);\n    }\n  }\n\n  function LogicalExpression() {\n    return t.createUnionTypeAnnotation([this.get(\"left\").getTypeAnnotation(), this.get(\"right\").getTypeAnnotation()]);\n  }\n\n  function ConditionalExpression() {\n    return t.createUnionTypeAnnotation([this.get(\"consequent\").getTypeAnnotation(), this.get(\"alternate\").getTypeAnnotation()]);\n  }\n\n  function SequenceExpression() {\n    return this.get(\"expressions\").pop().getTypeAnnotation();\n  }\n\n  function ParenthesizedExpression() {\n    return this.get(\"expression\").getTypeAnnotation();\n  }\n\n  function AssignmentExpression() {\n    return this.get(\"right\").getTypeAnnotation();\n  }\n\n  function UpdateExpression(node) {\n    var operator = node.operator;\n\n    if (operator === \"++\" || operator === \"--\") {\n      return t.numberTypeAnnotation();\n    }\n  }\n\n  function StringLiteral() {\n    return t.stringTypeAnnotation();\n  }\n\n  function NumericLiteral() {\n    return t.numberTypeAnnotation();\n  }\n\n  function BooleanLiteral() {\n    return t.booleanTypeAnnotation();\n  }\n\n  function NullLiteral() {\n    return t.nullLiteralTypeAnnotation();\n  }\n\n  function RegExpLiteral() {\n    return t.genericTypeAnnotation(t.identifier(\"RegExp\"));\n  }\n\n  function ObjectExpression() {\n    return t.genericTypeAnnotation(t.identifier(\"Object\"));\n  }\n\n  function ArrayExpression() {\n    return t.genericTypeAnnotation(t.identifier(\"Array\"));\n  }\n\n  function RestElement() {\n    return ArrayExpression();\n  }\n\n  RestElement.validParent = true;\n\n  function Func() {\n    return t.genericTypeAnnotation(t.identifier(\"Function\"));\n  }\n\n  var isArrayFrom = t.buildMatchMemberExpression(\"Array.from\");\n  var isObjectKeys = t.buildMatchMemberExpression(\"Object.keys\");\n  var isObjectValues = t.buildMatchMemberExpression(\"Object.values\");\n  var isObjectEntries = t.buildMatchMemberExpression(\"Object.entries\");\n\n  function CallExpression() {\n    var callee = this.node.callee;\n\n    if (isObjectKeys(callee)) {\n      return t.arrayTypeAnnotation(t.stringTypeAnnotation());\n    } else if (isArrayFrom(callee) || isObjectValues(callee)) {\n      return t.arrayTypeAnnotation(t.anyTypeAnnotation());\n    } else if (isObjectEntries(callee)) {\n      return t.arrayTypeAnnotation(t.tupleTypeAnnotation([t.stringTypeAnnotation(), t.anyTypeAnnotation()]));\n    }\n\n    return resolveCall(this.get(\"callee\"));\n  }\n\n  function TaggedTemplateExpression() {\n    return resolveCall(this.get(\"tag\"));\n  }\n\n  function resolveCall(callee) {\n    callee = callee.resolve();\n\n    if (callee.isFunction()) {\n      if (callee.is(\"async\")) {\n        if (callee.is(\"generator\")) {\n          return t.genericTypeAnnotation(t.identifier(\"AsyncIterator\"));\n        } else {\n          return t.genericTypeAnnotation(t.identifier(\"Promise\"));\n        }\n      } else {\n        if (callee.node.returnType) {\n          return callee.node.returnType;\n        } else {}\n      }\n    }\n  }\n});","map":[[2,0,1,0],[4,0,3,0,"Object"],[4,2,3,0,"Object"],[4,8,3,6],[4,9,3,7,"defineProperty"],[4,23,3,0],[4,24,3,22,"exports"],[4,31,3,0],[4,33,3,31],[4,45,3,0],[4,47,3,45],[5,0,4,2,"value"],[5,4,4,2,"value"],[5,9,4,7],[5,11,4,9],[6,0,3,45],[6,3,3,0],[7,0,6,0,"exports"],[7,2,6,0,"exports"],[7,9,6,7],[7,10,6,8,"VariableDeclarator"],[7,28,6,0],[7,31,6,29,"VariableDeclarator"],[7,49,6,0],[8,0,7,0,"exports"],[8,2,7,0,"exports"],[8,9,7,7],[8,10,7,8,"TypeCastExpression"],[8,28,7,0],[8,31,7,29,"TypeCastExpression"],[8,49,7,0],[9,0,8,0,"exports"],[9,2,8,0,"exports"],[9,9,8,7],[9,10,8,8,"NewExpression"],[9,23,8,0],[9,26,8,24,"NewExpression"],[9,39,8,0],[10,0,9,0,"exports"],[10,2,9,0,"exports"],[10,9,9,7],[10,10,9,8,"TemplateLiteral"],[10,25,9,0],[10,28,9,26,"TemplateLiteral"],[10,43,9,0],[11,0,10,0,"exports"],[11,2,10,0,"exports"],[11,9,10,7],[11,10,10,8,"UnaryExpression"],[11,25,10,0],[11,28,10,26,"UnaryExpression"],[11,43,10,0],[12,0,11,0,"exports"],[12,2,11,0,"exports"],[12,9,11,7],[12,10,11,8,"BinaryExpression"],[12,26,11,0],[12,29,11,27,"BinaryExpression"],[12,45,11,0],[13,0,12,0,"exports"],[13,2,12,0,"exports"],[13,9,12,7],[13,10,12,8,"LogicalExpression"],[13,27,12,0],[13,30,12,28,"LogicalExpression"],[13,47,12,0],[14,0,13,0,"exports"],[14,2,13,0,"exports"],[14,9,13,7],[14,10,13,8,"ConditionalExpression"],[14,31,13,0],[14,34,13,32,"ConditionalExpression"],[14,55,13,0],[15,0,14,0,"exports"],[15,2,14,0,"exports"],[15,9,14,7],[15,10,14,8,"SequenceExpression"],[15,28,14,0],[15,31,14,29,"SequenceExpression"],[15,49,14,0],[16,0,15,0,"exports"],[16,2,15,0,"exports"],[16,9,15,7],[16,10,15,8,"ParenthesizedExpression"],[16,33,15,0],[16,36,15,34,"ParenthesizedExpression"],[16,59,15,0],[17,0,16,0,"exports"],[17,2,16,0,"exports"],[17,9,16,7],[17,10,16,8,"AssignmentExpression"],[17,30,16,0],[17,33,16,31,"AssignmentExpression"],[17,53,16,0],[18,0,17,0,"exports"],[18,2,17,0,"exports"],[18,9,17,7],[18,10,17,8,"UpdateExpression"],[18,26,17,0],[18,29,17,27,"UpdateExpression"],[18,45,17,0],[19,0,18,0,"exports"],[19,2,18,0,"exports"],[19,9,18,7],[19,10,18,8,"StringLiteral"],[19,23,18,0],[19,26,18,24,"StringLiteral"],[19,39,18,0],[20,0,19,0,"exports"],[20,2,19,0,"exports"],[20,9,19,7],[20,10,19,8,"NumericLiteral"],[20,24,19,0],[20,27,19,25,"NumericLiteral"],[20,41,19,0],[21,0,20,0,"exports"],[21,2,20,0,"exports"],[21,9,20,7],[21,10,20,8,"BooleanLiteral"],[21,24,20,0],[21,27,20,25,"BooleanLiteral"],[21,41,20,0],[22,0,21,0,"exports"],[22,2,21,0,"exports"],[22,9,21,7],[22,10,21,8,"NullLiteral"],[22,21,21,0],[22,24,21,22,"NullLiteral"],[22,35,21,0],[23,0,22,0,"exports"],[23,2,22,0,"exports"],[23,9,22,7],[23,10,22,8,"RegExpLiteral"],[23,23,22,0],[23,26,22,24,"RegExpLiteral"],[23,39,22,0],[24,0,23,0,"exports"],[24,2,23,0,"exports"],[24,9,23,7],[24,10,23,8,"ObjectExpression"],[24,26,23,0],[24,29,23,27,"ObjectExpression"],[24,45,23,0],[25,0,24,0,"exports"],[25,2,24,0,"exports"],[25,9,24,7],[25,10,24,8,"ArrayExpression"],[25,25,24,0],[25,28,24,26,"ArrayExpression"],[25,43,24,0],[26,0,25,0,"exports"],[26,2,25,0,"exports"],[26,9,25,7],[26,10,25,8,"RestElement"],[26,21,25,0],[26,24,25,22,"RestElement"],[26,35,25,0],[27,0,26,0,"exports"],[27,2,26,0,"exports"],[27,9,26,7],[27,10,26,8,"ClassDeclaration"],[27,26,26,0],[27,29,26,27,"exports"],[27,36,26,34],[27,37,26,35,"ClassExpression"],[27,52,26,27],[27,55,26,53,"exports"],[27,62,26,60],[27,63,26,61,"FunctionDeclaration"],[27,82,26,53],[27,85,26,83,"exports"],[27,92,26,90],[27,93,26,91,"ArrowFunctionExpression"],[27,116,26,83],[27,119,26,117,"exports"],[27,126,26,124],[27,127,26,125,"FunctionExpression"],[27,145,26,117],[27,148,26,146,"Func"],[27,152,26,0],[28,0,27,0,"exports"],[28,2,27,0,"exports"],[28,9,27,7],[28,10,27,8,"CallExpression"],[28,24,27,0],[28,27,27,25,"CallExpression"],[28,41,27,0],[29,0,28,0,"exports"],[29,2,28,0,"exports"],[29,9,28,7],[29,10,28,8,"TaggedTemplateExpression"],[29,34,28,0],[29,37,28,35,"TaggedTemplateExpression"],[29,61,28,0],[30,0,29,0,"Object"],[30,2,29,0,"Object"],[30,8,29,6],[30,9,29,7,"defineProperty"],[30,23,29,0],[30,24,29,22,"exports"],[30,31,29,0],[30,33,29,31],[30,45,29,0],[30,47,29,45],[31,0,30,2,"enumerable"],[31,4,30,2,"enumerable"],[31,14,30,12],[31,16,30,14],[31,20,29,45],[32,0,31,2,"get"],[32,4,31,2,"get"],[32,7,31,5],[32,9,31,7],[32,24,31,19],[33,0,32,4],[33,13,32,11,"_infererReference"],[33,30,32,28],[33,31,32,29,"default"],[33,38,32,4],[34,0,33,3],[35,0,29,45],[35,3,29,0],[37,0,36,0],[37,6,36,4,"t"],[37,7,36,5],[37,10,36,8,"_interopRequireWildcard"],[37,33,36,31],[37,34,36,32,"require"],[37,45,36,39],[37,80,36,31],[37,81,36,0],[39,0,38,0],[39,6,38,4,"_infererReference"],[39,23,38,21],[39,26,38,24,"_interopRequireDefault"],[39,48,38,46],[39,49,38,47,"require"],[39,60,38,54],[39,102,38,46],[39,103,38,0],[41,0,40,0],[41,11,40,9,"_interopRequireDefault"],[41,33,40,0],[41,34,40,32,"obj"],[41,37,40,0],[41,39,40,37],[42,0,40,39],[42,11,40,46,"obj"],[42,14,40,49],[42,18,40,53,"obj"],[42,21,40,56],[42,22,40,57,"__esModule"],[42,32,40,46],[42,35,40,70,"obj"],[42,38,40,46],[42,41,40,76],[43,0,40,78,"default"],[43,6,40,78,"default"],[43,13,40,85],[43,15,40,87,"obj"],[44,0,40,76],[44,5,40,39],[45,0,40,95],[47,0,42,0],[47,11,42,9,"_getRequireWildcardCache"],[47,35,42,0],[47,38,42,36],[48,0,42,38],[48,8,42,42],[48,15,42,49,"WeakMap"],[48,22,42,42],[48,27,42,61],[48,37,42,38],[48,39,42,73],[48,46,42,80],[48,50,42,73],[49,0,42,86],[49,8,42,90,"cache"],[49,13,42,95],[49,16,42,98],[49,20,42,102,"WeakMap"],[49,27,42,98],[49,29,42,86],[51,0,42,113,"_getRequireWildcardCache"],[51,4,42,113,"_getRequireWildcardCache"],[51,28,42,137],[51,31,42,140],[51,67,42,152],[52,0,42,154],[52,13,42,161,"cache"],[52,18,42,154],[53,0,42,169],[53,5,42,113],[55,0,42,171],[55,11,42,178,"cache"],[55,16,42,171],[56,0,42,186],[58,0,44,0],[58,11,44,9,"_interopRequireWildcard"],[58,34,44,0],[58,35,44,33,"obj"],[58,38,44,0],[58,40,44,38],[59,0,44,40],[59,8,44,44,"obj"],[59,11,44,47],[59,15,44,51,"obj"],[59,18,44,54],[59,19,44,55,"__esModule"],[59,29,44,40],[59,31,44,67],[60,0,44,69],[60,13,44,76,"obj"],[60,16,44,69],[61,0,44,82],[63,0,44,83],[63,8,44,87,"obj"],[63,11,44,90],[63,16,44,95],[63,20,44,87],[63,24,44,103],[63,31,44,110,"obj"],[63,34,44,103],[63,39,44,118],[63,47,44,103],[63,51,44,130],[63,58,44,137,"obj"],[63,61,44,130],[63,66,44,145],[63,76,44,83],[63,78,44,157],[64,0,44,159],[64,13,44,166],[65,0,44,168,"default"],[65,8,44,168,"default"],[65,15,44,175],[65,17,44,177,"obj"],[66,0,44,166],[66,7,44,159],[67,0,44,185],[69,0,44,186],[69,8,44,190,"cache"],[69,13,44,195],[69,16,44,198,"_getRequireWildcardCache"],[69,40,44,222],[69,42,44,186],[71,0,44,226],[71,8,44,230,"cache"],[71,13,44,235],[71,17,44,239,"cache"],[71,22,44,244],[71,23,44,245,"has"],[71,26,44,239],[71,27,44,249,"obj"],[71,30,44,239],[71,31,44,226],[71,33,44,255],[72,0,44,257],[72,13,44,264,"cache"],[72,18,44,269],[72,19,44,270,"get"],[72,22,44,264],[72,23,44,274,"obj"],[72,26,44,264],[72,27,44,257],[73,0,44,281],[75,0,44,282],[75,8,44,286,"newObj"],[75,14,44,292],[75,17,44,295],[75,19,44,282],[76,0,44,299],[76,8,44,303,"hasPropertyDescriptor"],[76,29,44,324],[76,32,44,327,"Object"],[76,38,44,333],[76,39,44,334,"defineProperty"],[76,53,44,327],[76,57,44,352,"Object"],[76,63,44,358],[76,64,44,359,"getOwnPropertyDescriptor"],[76,88,44,299],[78,0,44,385],[78,9,44,390],[78,13,44,394,"key"],[78,16,44,385],[78,20,44,401,"obj"],[78,23,44,385],[78,25,44,406],[79,0,44,408],[79,10,44,412,"Object"],[79,16,44,418],[79,17,44,419,"prototype"],[79,26,44,412],[79,27,44,429,"hasOwnProperty"],[79,41,44,412],[79,42,44,444,"call"],[79,46,44,412],[79,47,44,449,"obj"],[79,50,44,412],[79,52,44,454,"key"],[79,55,44,412],[79,56,44,408],[79,58,44,460],[80,0,44,462],[80,12,44,466,"desc"],[80,16,44,470],[80,19,44,473,"hasPropertyDescriptor"],[80,40,44,494],[80,43,44,497,"Object"],[80,49,44,503],[80,50,44,504,"getOwnPropertyDescriptor"],[80,74,44,497],[80,75,44,529,"obj"],[80,78,44,497],[80,80,44,534,"key"],[80,83,44,497],[80,84,44,494],[80,87,44,541],[80,91,44,462],[82,0,44,547],[82,12,44,551,"desc"],[82,16,44,555],[82,21,44,560,"desc"],[82,25,44,564],[82,26,44,565,"get"],[82,29,44,560],[82,33,44,572,"desc"],[82,37,44,576],[82,38,44,577,"set"],[82,41,44,555],[82,42,44,547],[82,44,44,583],[83,0,44,585,"Object"],[83,10,44,585,"Object"],[83,16,44,591],[83,17,44,592,"defineProperty"],[83,31,44,585],[83,32,44,607,"newObj"],[83,38,44,585],[83,40,44,615,"key"],[83,43,44,585],[83,45,44,620,"desc"],[83,49,44,585],[84,0,44,628],[84,9,44,547],[84,15,44,634],[85,0,44,636,"newObj"],[85,10,44,636,"newObj"],[85,16,44,642],[85,17,44,643,"key"],[85,20,44,642],[85,21,44,636],[85,24,44,650,"obj"],[85,27,44,653],[85,28,44,654,"key"],[85,31,44,653],[85,32,44,636],[86,0,44,661],[87,0,44,663],[88,0,44,665],[90,0,44,666,"newObj"],[90,4,44,666,"newObj"],[90,10,44,672],[90,11,44,673,"default"],[90,18,44,666],[90,21,44,683,"obj"],[90,24,44,666],[92,0,44,688],[92,8,44,692,"cache"],[92,13,44,688],[92,15,44,699],[93,0,44,701,"cache"],[93,6,44,701,"cache"],[93,11,44,706],[93,12,44,707,"set"],[93,15,44,701],[93,16,44,711,"obj"],[93,19,44,701],[93,21,44,716,"newObj"],[93,27,44,701],[94,0,44,726],[96,0,44,727],[96,11,44,734,"newObj"],[96,17,44,727],[97,0,44,743],[99,0,46,0],[99,11,46,9,"VariableDeclarator"],[99,29,46,0],[99,32,46,30],[100,0,47,2],[100,8,47,8,"id"],[100,10,47,10],[100,13,47,13],[100,18,47,18,"get"],[100,21,47,13],[100,22,47,22],[100,26,47,13],[100,27,47,2],[101,0,48,2],[101,8,48,6],[101,9,48,7,"id"],[101,11,48,9],[101,12,48,10,"isIdentifier"],[101,24,48,7],[101,26,48,2],[101,28,48,26],[102,0,49,2],[102,8,49,8,"init"],[102,12,49,12],[102,15,49,15],[102,20,49,20,"get"],[102,23,49,15],[102,24,49,24],[102,30,49,15],[102,31,49,2],[103,0,50,2],[103,8,50,6,"type"],[103,12,50,10],[103,15,50,13,"init"],[103,19,50,17],[103,20,50,18,"getTypeAnnotation"],[103,37,50,13],[103,39,50,2],[105,0,52,2],[105,8,52,6,"type"],[105,12,52,10],[105,16,52,14,"type"],[105,20,52,18],[105,21,52,19,"type"],[105,25,52,14],[105,30,52,28],[105,49,52,2],[105,51,52,49],[106,0,53,4],[106,10,53,8,"init"],[106,14,53,12],[106,15,53,13,"isCallExpression"],[106,31,53,8],[106,37,53,35,"init"],[106,41,53,39],[106,42,53,40,"get"],[106,45,53,35],[106,46,53,44],[106,54,53,35],[106,56,53,54,"isIdentifier"],[106,68,53,35],[106,69,53,67],[107,0,54,6,"name"],[107,8,54,6,"name"],[107,12,54,10],[107,14,54,12],[108,0,53,67],[108,7,53,35],[108,8,53,8],[108,12,55,10],[108,13,55,11,"init"],[108,17,55,15],[108,18,55,16,"scope"],[108,23,55,11],[108,24,55,22,"hasBinding"],[108,34,55,11],[108,35,55,33],[108,42,55,11],[108,44,55,42],[108,48,55,11],[108,49,53,4],[108,51,55,49],[109,0,56,6,"type"],[109,8,56,6,"type"],[109,12,56,10],[109,15,56,13,"ArrayExpression"],[109,30,56,28],[109,32,56,6],[110,0,57,5],[111,0,58,3],[113,0,60,2],[113,11,60,9,"type"],[113,15,60,2],[114,0,61,1],[116,0,63,0],[116,11,63,9,"TypeCastExpression"],[116,29,63,0],[116,30,63,28,"node"],[116,34,63,0],[116,36,63,34],[117,0,64,2],[117,11,64,9,"node"],[117,15,64,13],[117,16,64,14,"typeAnnotation"],[117,30,64,2],[118,0,65,1],[120,0,67,0,"TypeCastExpression"],[120,2,67,0,"TypeCastExpression"],[120,20,67,18],[120,21,67,19,"validParent"],[120,32,67,0],[120,35,67,33],[120,39,67,0],[122,0,69,0],[122,11,69,9,"NewExpression"],[122,24,69,0],[122,25,69,23,"node"],[122,29,69,0],[122,31,69,29],[123,0,70,2],[123,8,70,6],[123,13,70,11,"get"],[123,16,70,6],[123,17,70,15],[123,25,70,6],[123,27,70,25,"isIdentifier"],[123,39,70,6],[123,41,70,2],[123,43,70,41],[124,0,71,4],[124,13,71,11,"t"],[124,14,71,12],[124,15,71,13,"genericTypeAnnotation"],[124,36,71,11],[124,37,71,35,"node"],[124,41,71,39],[124,42,71,40,"callee"],[124,48,71,11],[124,49,71,4],[125,0,72,3],[126,0,73,1],[128,0,75,0],[128,11,75,9,"TemplateLiteral"],[128,26,75,0],[128,29,75,27],[129,0,76,2],[129,11,76,9,"t"],[129,12,76,10],[129,13,76,11,"stringTypeAnnotation"],[129,33,76,9],[129,35,76,2],[130,0,77,1],[132,0,79,0],[132,11,79,9,"UnaryExpression"],[132,26,79,0],[132,27,79,25,"node"],[132,31,79,0],[132,33,79,31],[133,0,80,2],[133,8,80,8,"operator"],[133,16,80,16],[133,19,80,19,"node"],[133,23,80,23],[133,24,80,24,"operator"],[133,32,80,2],[135,0,82,2],[135,8,82,6,"operator"],[135,16,82,14],[135,21,82,19],[135,27,82,2],[135,29,82,27],[136,0,83,4],[136,13,83,11,"t"],[136,14,83,12],[136,15,83,13,"voidTypeAnnotation"],[136,33,83,11],[136,35,83,4],[137,0,84,3],[137,5,82,2],[137,11,84,9],[137,15,84,13,"t"],[137,16,84,14],[137,17,84,15,"NUMBER_UNARY_OPERATORS"],[137,39,84,13],[137,40,84,38,"indexOf"],[137,47,84,13],[137,48,84,46,"operator"],[137,56,84,13],[137,61,84,59],[137,62,84,9],[137,64,84,62],[138,0,85,4],[138,13,85,11,"t"],[138,14,85,12],[138,15,85,13,"numberTypeAnnotation"],[138,35,85,11],[138,37,85,4],[139,0,86,3],[139,5,84,9],[139,11,86,9],[139,15,86,13,"t"],[139,16,86,14],[139,17,86,15,"STRING_UNARY_OPERATORS"],[139,39,86,13],[139,40,86,38,"indexOf"],[139,47,86,13],[139,48,86,46,"operator"],[139,56,86,13],[139,61,86,59],[139,62,86,9],[139,64,86,62],[140,0,87,4],[140,13,87,11,"t"],[140,14,87,12],[140,15,87,13,"stringTypeAnnotation"],[140,35,87,11],[140,37,87,4],[141,0,88,3],[141,5,86,9],[141,11,88,9],[141,15,88,13,"t"],[141,16,88,14],[141,17,88,15,"BOOLEAN_UNARY_OPERATORS"],[141,40,88,13],[141,41,88,39,"indexOf"],[141,48,88,13],[141,49,88,47,"operator"],[141,57,88,13],[141,62,88,60],[141,63,88,9],[141,65,88,63],[142,0,89,4],[142,13,89,11,"t"],[142,14,89,12],[142,15,89,13,"booleanTypeAnnotation"],[142,36,89,11],[142,38,89,4],[143,0,90,3],[144,0,91,1],[146,0,93,0],[146,11,93,9,"BinaryExpression"],[146,27,93,0],[146,28,93,26,"node"],[146,32,93,0],[146,34,93,32],[147,0,94,2],[147,8,94,8,"operator"],[147,16,94,16],[147,19,94,19,"node"],[147,23,94,23],[147,24,94,24,"operator"],[147,32,94,2],[149,0,96,2],[149,8,96,6,"t"],[149,9,96,7],[149,10,96,8,"NUMBER_BINARY_OPERATORS"],[149,33,96,6],[149,34,96,32,"indexOf"],[149,41,96,6],[149,42,96,40,"operator"],[149,50,96,6],[149,55,96,53],[149,56,96,2],[149,58,96,56],[150,0,97,4],[150,13,97,11,"t"],[150,14,97,12],[150,15,97,13,"numberTypeAnnotation"],[150,35,97,11],[150,37,97,4],[151,0,98,3],[151,5,96,2],[151,11,98,9],[151,15,98,13,"t"],[151,16,98,14],[151,17,98,15,"BOOLEAN_BINARY_OPERATORS"],[151,41,98,13],[151,42,98,40,"indexOf"],[151,49,98,13],[151,50,98,48,"operator"],[151,58,98,13],[151,63,98,61],[151,64,98,9],[151,66,98,64],[152,0,99,4],[152,13,99,11,"t"],[152,14,99,12],[152,15,99,13,"booleanTypeAnnotation"],[152,36,99,11],[152,38,99,4],[153,0,100,3],[153,5,98,9],[153,11,100,9],[153,15,100,13,"operator"],[153,23,100,21],[153,28,100,26],[153,31,100,9],[153,33,100,31],[154,0,101,4],[154,10,101,10,"right"],[154,15,101,15],[154,18,101,18],[154,23,101,23,"get"],[154,26,101,18],[154,27,101,27],[154,34,101,18],[154,35,101,4],[155,0,102,4],[155,10,102,10,"left"],[155,14,102,14],[155,17,102,17],[155,22,102,22,"get"],[155,25,102,17],[155,26,102,26],[155,32,102,17],[155,33,102,4],[157,0,104,4],[157,10,104,8,"left"],[157,14,104,12],[157,15,104,13,"isBaseType"],[157,25,104,8],[157,26,104,24],[157,34,104,8],[157,39,104,37,"right"],[157,44,104,42],[157,45,104,43,"isBaseType"],[157,55,104,37],[157,56,104,54],[157,64,104,37],[157,65,104,4],[157,67,104,65],[158,0,105,6],[158,15,105,13,"t"],[158,16,105,14],[158,17,105,15,"numberTypeAnnotation"],[158,37,105,13],[158,39,105,6],[159,0,106,5],[159,7,104,4],[159,13,106,11],[159,17,106,15,"left"],[159,21,106,19],[159,22,106,20,"isBaseType"],[159,32,106,15],[159,33,106,31],[159,41,106,15],[159,46,106,44,"right"],[159,51,106,49],[159,52,106,50,"isBaseType"],[159,62,106,44],[159,63,106,61],[159,71,106,44],[159,72,106,11],[159,74,106,72],[160,0,107,6],[160,15,107,13,"t"],[160,16,107,14],[160,17,107,15,"stringTypeAnnotation"],[160,37,107,13],[160,39,107,6],[161,0,108,5],[163,0,110,4],[163,13,110,11,"t"],[163,14,110,12],[163,15,110,13,"unionTypeAnnotation"],[163,34,110,11],[163,35,110,33],[163,36,110,34,"t"],[163,37,110,35],[163,38,110,36,"stringTypeAnnotation"],[163,58,110,34],[163,60,110,33],[163,62,110,60,"t"],[163,63,110,61],[163,64,110,62,"numberTypeAnnotation"],[163,84,110,60],[163,86,110,33],[163,87,110,11],[163,88,110,4],[164,0,111,3],[165,0,112,1],[167,0,114,0],[167,11,114,9,"LogicalExpression"],[167,28,114,0],[167,31,114,29],[168,0,115,2],[168,11,115,9,"t"],[168,12,115,10],[168,13,115,11,"createUnionTypeAnnotation"],[168,38,115,9],[168,39,115,37],[168,40,115,38],[168,45,115,43,"get"],[168,48,115,38],[168,49,115,47],[168,55,115,38],[168,57,115,55,"getTypeAnnotation"],[168,74,115,38],[168,76,115,37],[168,78,115,76],[168,83,115,81,"get"],[168,86,115,76],[168,87,115,85],[168,94,115,76],[168,96,115,94,"getTypeAnnotation"],[168,113,115,76],[168,115,115,37],[168,116,115,9],[168,117,115,2],[169,0,116,1],[171,0,118,0],[171,11,118,9,"ConditionalExpression"],[171,32,118,0],[171,35,118,33],[172,0,119,2],[172,11,119,9,"t"],[172,12,119,10],[172,13,119,11,"createUnionTypeAnnotation"],[172,38,119,9],[172,39,119,37],[172,40,119,38],[172,45,119,43,"get"],[172,48,119,38],[172,49,119,47],[172,61,119,38],[172,63,119,61,"getTypeAnnotation"],[172,80,119,38],[172,82,119,37],[172,84,119,82],[172,89,119,87,"get"],[172,92,119,82],[172,93,119,91],[172,104,119,82],[172,106,119,104,"getTypeAnnotation"],[172,123,119,82],[172,125,119,37],[172,126,119,9],[172,127,119,2],[173,0,120,1],[175,0,122,0],[175,11,122,9,"SequenceExpression"],[175,29,122,0],[175,32,122,30],[176,0,123,2],[176,11,123,9],[176,16,123,14,"get"],[176,19,123,9],[176,20,123,18],[176,33,123,9],[176,35,123,33,"pop"],[176,38,123,9],[176,41,123,39,"getTypeAnnotation"],[176,58,123,9],[176,60,123,2],[177,0,124,1],[179,0,126,0],[179,11,126,9,"ParenthesizedExpression"],[179,34,126,0],[179,37,126,35],[180,0,127,2],[180,11,127,9],[180,16,127,14,"get"],[180,19,127,9],[180,20,127,18],[180,32,127,9],[180,34,127,32,"getTypeAnnotation"],[180,51,127,9],[180,53,127,2],[181,0,128,1],[183,0,130,0],[183,11,130,9,"AssignmentExpression"],[183,31,130,0],[183,34,130,32],[184,0,131,2],[184,11,131,9],[184,16,131,14,"get"],[184,19,131,9],[184,20,131,18],[184,27,131,9],[184,29,131,27,"getTypeAnnotation"],[184,46,131,9],[184,48,131,2],[185,0,132,1],[187,0,134,0],[187,11,134,9,"UpdateExpression"],[187,27,134,0],[187,28,134,26,"node"],[187,32,134,0],[187,34,134,32],[188,0,135,2],[188,8,135,8,"operator"],[188,16,135,16],[188,19,135,19,"node"],[188,23,135,23],[188,24,135,24,"operator"],[188,32,135,2],[190,0,137,2],[190,8,137,6,"operator"],[190,16,137,14],[190,21,137,19],[190,25,137,6],[190,29,137,27,"operator"],[190,37,137,35],[190,42,137,40],[190,46,137,2],[190,48,137,46],[191,0,138,4],[191,13,138,11,"t"],[191,14,138,12],[191,15,138,13,"numberTypeAnnotation"],[191,35,138,11],[191,37,138,4],[192,0,139,3],[193,0,140,1],[195,0,142,0],[195,11,142,9,"StringLiteral"],[195,24,142,0],[195,27,142,25],[196,0,143,2],[196,11,143,9,"t"],[196,12,143,10],[196,13,143,11,"stringTypeAnnotation"],[196,33,143,9],[196,35,143,2],[197,0,144,1],[199,0,146,0],[199,11,146,9,"NumericLiteral"],[199,25,146,0],[199,28,146,26],[200,0,147,2],[200,11,147,9,"t"],[200,12,147,10],[200,13,147,11,"numberTypeAnnotation"],[200,33,147,9],[200,35,147,2],[201,0,148,1],[203,0,150,0],[203,11,150,9,"BooleanLiteral"],[203,25,150,0],[203,28,150,26],[204,0,151,2],[204,11,151,9,"t"],[204,12,151,10],[204,13,151,11,"booleanTypeAnnotation"],[204,34,151,9],[204,36,151,2],[205,0,152,1],[207,0,154,0],[207,11,154,9,"NullLiteral"],[207,22,154,0],[207,25,154,23],[208,0,155,2],[208,11,155,9,"t"],[208,12,155,10],[208,13,155,11,"nullLiteralTypeAnnotation"],[208,38,155,9],[208,40,155,2],[209,0,156,1],[211,0,158,0],[211,11,158,9,"RegExpLiteral"],[211,24,158,0],[211,27,158,25],[212,0,159,2],[212,11,159,9,"t"],[212,12,159,10],[212,13,159,11,"genericTypeAnnotation"],[212,34,159,9],[212,35,159,33,"t"],[212,36,159,34],[212,37,159,35,"identifier"],[212,47,159,33],[212,48,159,46],[212,56,159,33],[212,57,159,9],[212,58,159,2],[213,0,160,1],[215,0,162,0],[215,11,162,9,"ObjectExpression"],[215,27,162,0],[215,30,162,28],[216,0,163,2],[216,11,163,9,"t"],[216,12,163,10],[216,13,163,11,"genericTypeAnnotation"],[216,34,163,9],[216,35,163,33,"t"],[216,36,163,34],[216,37,163,35,"identifier"],[216,47,163,33],[216,48,163,46],[216,56,163,33],[216,57,163,9],[216,58,163,2],[217,0,164,1],[219,0,166,0],[219,11,166,9,"ArrayExpression"],[219,26,166,0],[219,29,166,27],[220,0,167,2],[220,11,167,9,"t"],[220,12,167,10],[220,13,167,11,"genericTypeAnnotation"],[220,34,167,9],[220,35,167,33,"t"],[220,36,167,34],[220,37,167,35,"identifier"],[220,47,167,33],[220,48,167,46],[220,55,167,33],[220,56,167,9],[220,57,167,2],[221,0,168,1],[223,0,170,0],[223,11,170,9,"RestElement"],[223,22,170,0],[223,25,170,23],[224,0,171,2],[224,11,171,9,"ArrayExpression"],[224,26,171,24],[224,28,171,2],[225,0,172,1],[227,0,174,0,"RestElement"],[227,2,174,0,"RestElement"],[227,13,174,11],[227,14,174,12,"validParent"],[227,25,174,0],[227,28,174,26],[227,32,174,0],[229,0,176,0],[229,11,176,9,"Func"],[229,15,176,0],[229,18,176,16],[230,0,177,2],[230,11,177,9,"t"],[230,12,177,10],[230,13,177,11,"genericTypeAnnotation"],[230,34,177,9],[230,35,177,33,"t"],[230,36,177,34],[230,37,177,35,"identifier"],[230,47,177,33],[230,48,177,46],[230,58,177,33],[230,59,177,9],[230,60,177,2],[231,0,178,1],[233,0,180,0],[233,6,180,6,"isArrayFrom"],[233,17,180,17],[233,20,180,20,"t"],[233,21,180,21],[233,22,180,22,"buildMatchMemberExpression"],[233,48,180,20],[233,49,180,49],[233,61,180,20],[233,62,180,0],[234,0,181,0],[234,6,181,6,"isObjectKeys"],[234,18,181,18],[234,21,181,21,"t"],[234,22,181,22],[234,23,181,23,"buildMatchMemberExpression"],[234,49,181,21],[234,50,181,50],[234,63,181,21],[234,64,181,0],[235,0,182,0],[235,6,182,6,"isObjectValues"],[235,20,182,20],[235,23,182,23,"t"],[235,24,182,24],[235,25,182,25,"buildMatchMemberExpression"],[235,51,182,23],[235,52,182,52],[235,67,182,23],[235,68,182,0],[236,0,183,0],[236,6,183,6,"isObjectEntries"],[236,21,183,21],[236,24,183,24,"t"],[236,25,183,25],[236,26,183,26,"buildMatchMemberExpression"],[236,52,183,24],[236,53,183,53],[236,69,183,24],[236,70,183,0],[238,0,185,0],[238,11,185,9,"CallExpression"],[238,25,185,0],[238,28,185,26],[239,0,185,26],[239,8,187,4,"callee"],[239,14,185,26],[239,17,188,6],[239,22,188,11,"node"],[239,26,185,26],[239,27,187,4,"callee"],[239,33,185,26],[241,0,190,2],[241,8,190,6,"isObjectKeys"],[241,20,190,18],[241,21,190,19,"callee"],[241,27,190,18],[241,28,190,2],[241,30,190,28],[242,0,191,4],[242,13,191,11,"t"],[242,14,191,12],[242,15,191,13,"arrayTypeAnnotation"],[242,34,191,11],[242,35,191,33,"t"],[242,36,191,34],[242,37,191,35,"stringTypeAnnotation"],[242,57,191,33],[242,59,191,11],[242,60,191,4],[243,0,192,3],[243,5,190,2],[243,11,192,9],[243,15,192,13,"isArrayFrom"],[243,26,192,24],[243,27,192,25,"callee"],[243,33,192,24],[243,34,192,13],[243,38,192,36,"isObjectValues"],[243,52,192,50],[243,53,192,51,"callee"],[243,59,192,50],[243,60,192,9],[243,62,192,60],[244,0,193,4],[244,13,193,11,"t"],[244,14,193,12],[244,15,193,13,"arrayTypeAnnotation"],[244,34,193,11],[244,35,193,33,"t"],[244,36,193,34],[244,37,193,35,"anyTypeAnnotation"],[244,54,193,33],[244,56,193,11],[244,57,193,4],[245,0,194,3],[245,5,192,9],[245,11,194,9],[245,15,194,13,"isObjectEntries"],[245,30,194,28],[245,31,194,29,"callee"],[245,37,194,28],[245,38,194,9],[245,40,194,38],[246,0,195,4],[246,13,195,11,"t"],[246,14,195,12],[246,15,195,13,"arrayTypeAnnotation"],[246,34,195,11],[246,35,195,33,"t"],[246,36,195,34],[246,37,195,35,"tupleTypeAnnotation"],[246,56,195,33],[246,57,195,55],[246,58,195,56,"t"],[246,59,195,57],[246,60,195,58,"stringTypeAnnotation"],[246,80,195,56],[246,82,195,55],[246,84,195,82,"t"],[246,85,195,83],[246,86,195,84,"anyTypeAnnotation"],[246,103,195,82],[246,105,195,55],[246,106,195,33],[246,107,195,11],[246,108,195,4],[247,0,196,3],[249,0,198,2],[249,11,198,9,"resolveCall"],[249,22,198,20],[249,23,198,21],[249,28,198,26,"get"],[249,31,198,21],[249,32,198,30],[249,40,198,21],[249,41,198,20],[249,42,198,2],[250,0,199,1],[252,0,201,0],[252,11,201,9,"TaggedTemplateExpression"],[252,35,201,0],[252,38,201,36],[253,0,202,2],[253,11,202,9,"resolveCall"],[253,22,202,20],[253,23,202,21],[253,28,202,26,"get"],[253,31,202,21],[253,32,202,30],[253,37,202,21],[253,38,202,20],[253,39,202,2],[254,0,203,1],[256,0,205,0],[256,11,205,9,"resolveCall"],[256,22,205,0],[256,23,205,21,"callee"],[256,29,205,0],[256,31,205,29],[257,0,206,2,"callee"],[257,4,206,2,"callee"],[257,10,206,8],[257,13,206,11,"callee"],[257,19,206,17],[257,20,206,18,"resolve"],[257,27,206,11],[257,29,206,2],[259,0,208,2],[259,8,208,6,"callee"],[259,14,208,12],[259,15,208,13,"isFunction"],[259,25,208,6],[259,27,208,2],[259,29,208,27],[260,0,209,4],[260,10,209,8,"callee"],[260,16,209,14],[260,17,209,15,"is"],[260,19,209,8],[260,20,209,18],[260,27,209,8],[260,28,209,4],[260,30,209,28],[261,0,210,6],[261,12,210,10,"callee"],[261,18,210,16],[261,19,210,17,"is"],[261,21,210,10],[261,22,210,20],[261,33,210,10],[261,34,210,6],[261,36,210,34],[262,0,211,8],[262,17,211,15,"t"],[262,18,211,16],[262,19,211,17,"genericTypeAnnotation"],[262,40,211,15],[262,41,211,39,"t"],[262,42,211,40],[262,43,211,41,"identifier"],[262,53,211,39],[262,54,211,52],[262,69,211,39],[262,70,211,15],[262,71,211,8],[263,0,212,7],[263,9,210,6],[263,15,212,13],[264,0,213,8],[264,17,213,15,"t"],[264,18,213,16],[264,19,213,17,"genericTypeAnnotation"],[264,40,213,15],[264,41,213,39,"t"],[264,42,213,40],[264,43,213,41,"identifier"],[264,53,213,39],[264,54,213,52],[264,63,213,39],[264,64,213,15],[264,65,213,8],[265,0,214,7],[266,0,215,5],[266,7,209,4],[266,13,215,11],[267,0,216,6],[267,12,216,10,"callee"],[267,18,216,16],[267,19,216,17,"node"],[267,23,216,10],[267,24,216,22,"returnType"],[267,34,216,6],[267,36,216,34],[268,0,217,8],[268,17,217,15,"callee"],[268,23,217,21],[268,24,217,22,"node"],[268,28,217,15],[268,29,217,27,"returnType"],[268,39,217,8],[269,0,218,7],[269,9,216,6],[269,15,218,13],[269,16,218,15],[270,0,219,5],[271,0,220,3],[272,0,221,1]]},"type":"js/module"}]}