{"dependencies":[{"name":"@babel/code-frame","data":{"isAsync":false}},{"name":"../index","data":{"isAsync":false}},{"name":"./index","data":{"isAsync":false}},{"name":"@babel/parser","data":{"isAsync":false}},{"name":"@babel/types","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.replaceWithMultiple = replaceWithMultiple;\n  exports.replaceWithSourceString = replaceWithSourceString;\n  exports.replaceWith = replaceWith;\n  exports._replaceWith = _replaceWith;\n  exports.replaceExpressionWithStatements = replaceExpressionWithStatements;\n  exports.replaceInline = replaceInline;\n\n  var _codeFrame = _$$_REQUIRE(_dependencyMap[0], \"@babel/code-frame\");\n\n  var _index = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"../index\"));\n\n  var _index2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"./index\"));\n\n  var _parser = _$$_REQUIRE(_dependencyMap[3], \"@babel/parser\");\n\n  var t = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[4], \"@babel/types\"));\n\n  function _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n\n    _getRequireWildcardCache = function _getRequireWildcardCache() {\n      return cache;\n    };\n\n    return cache;\n  }\n\n  function _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n      return obj;\n    }\n\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n      return {\n        default: obj\n      };\n    }\n\n    var cache = _getRequireWildcardCache();\n\n    if (cache && cache.has(obj)) {\n      return cache.get(obj);\n    }\n\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n    for (var key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n        if (desc && (desc.get || desc.set)) {\n          Object.defineProperty(newObj, key, desc);\n        } else {\n          newObj[key] = obj[key];\n        }\n      }\n    }\n\n    newObj.default = obj;\n\n    if (cache) {\n      cache.set(obj, newObj);\n    }\n\n    return newObj;\n  }\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      default: obj\n    };\n  }\n\n  var hoistVariablesVisitor = {\n    Function: function Function(path) {\n      path.skip();\n    },\n    VariableDeclaration: function VariableDeclaration(path) {\n      if (path.node.kind !== \"var\") return;\n      var bindings = path.getBindingIdentifiers();\n\n      for (var _i = 0, _Object$keys = Object.keys(bindings); _i < _Object$keys.length; _i++) {\n        var key = _Object$keys[_i];\n        path.scope.push({\n          id: bindings[key]\n        });\n      }\n\n      var exprs = [];\n\n      for (var _iterator = path.node.declarations, _isArray = Array.isArray(_iterator), _i2 = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"]();;) {\n        var _ref;\n\n        if (_isArray) {\n          if (_i2 >= _iterator.length) break;\n          _ref = _iterator[_i2++];\n        } else {\n          _i2 = _iterator.next();\n          if (_i2.done) break;\n          _ref = _i2.value;\n        }\n\n        var _declar = _ref;\n\n        if (_declar.init) {\n          exprs.push(t.expressionStatement(t.assignmentExpression(\"=\", _declar.id, _declar.init)));\n        }\n      }\n\n      path.replaceWithMultiple(exprs);\n    }\n  };\n\n  function replaceWithMultiple(nodes) {\n    this.resync();\n    nodes = this._verifyNodeList(nodes);\n    t.inheritLeadingComments(nodes[0], this.node);\n    t.inheritTrailingComments(nodes[nodes.length - 1], this.node);\n    this.node = this.container[this.key] = null;\n    var paths = this.insertAfter(nodes);\n\n    if (this.node) {\n      this.requeue();\n    } else {\n      this.remove();\n    }\n\n    return paths;\n  }\n\n  function replaceWithSourceString(replacement) {\n    this.resync();\n\n    try {\n      replacement = \"(\" + replacement + \")\";\n      replacement = (0, _parser.parse)(replacement);\n    } catch (err) {\n      var loc = err.loc;\n\n      if (loc) {\n        err.message += \" - make sure this is an expression.\\n\" + (0, _codeFrame.codeFrameColumns)(replacement, {\n          start: {\n            line: loc.line,\n            column: loc.column + 1\n          }\n        });\n        err.code = \"BABEL_REPLACE_SOURCE_ERROR\";\n      }\n\n      throw err;\n    }\n\n    replacement = replacement.program.body[0].expression;\n\n    _index.default.removeProperties(replacement);\n\n    return this.replaceWith(replacement);\n  }\n\n  function replaceWith(replacement) {\n    this.resync();\n\n    if (this.removed) {\n      throw new Error(\"You can't replace this node, we've already removed it\");\n    }\n\n    if (replacement instanceof _index2.default) {\n      replacement = replacement.node;\n    }\n\n    if (!replacement) {\n      throw new Error(\"You passed `path.replaceWith()` a falsy node, use `path.remove()` instead\");\n    }\n\n    if (this.node === replacement) {\n      return [this];\n    }\n\n    if (this.isProgram() && !t.isProgram(replacement)) {\n      throw new Error(\"You can only replace a Program root node with another Program node\");\n    }\n\n    if (Array.isArray(replacement)) {\n      throw new Error(\"Don't use `path.replaceWith()` with an array of nodes, use `path.replaceWithMultiple()`\");\n    }\n\n    if (typeof replacement === \"string\") {\n      throw new Error(\"Don't use `path.replaceWith()` with a source string, use `path.replaceWithSourceString()`\");\n    }\n\n    var nodePath = \"\";\n\n    if (this.isNodeType(\"Statement\") && t.isExpression(replacement)) {\n      if (!this.canHaveVariableDeclarationOrExpression() && !this.canSwapBetweenExpressionAndStatement(replacement) && !this.parentPath.isExportDefaultDeclaration()) {\n        replacement = t.expressionStatement(replacement);\n        nodePath = \"expression\";\n      }\n    }\n\n    if (this.isNodeType(\"Expression\") && t.isStatement(replacement)) {\n      if (!this.canHaveVariableDeclarationOrExpression() && !this.canSwapBetweenExpressionAndStatement(replacement)) {\n        return this.replaceExpressionWithStatements([replacement]);\n      }\n    }\n\n    var oldNode = this.node;\n\n    if (oldNode) {\n      t.inheritsComments(replacement, oldNode);\n      t.removeComments(oldNode);\n    }\n\n    this._replaceWith(replacement);\n\n    this.type = replacement.type;\n    this.setScope();\n    this.requeue();\n    return [nodePath ? this.get(nodePath) : this];\n  }\n\n  function _replaceWith(node) {\n    if (!this.container) {\n      throw new ReferenceError(\"Container is falsy\");\n    }\n\n    if (this.inList) {\n      t.validate(this.parent, this.key, [node]);\n    } else {\n      t.validate(this.parent, this.key, node);\n    }\n\n    this.debug(\"Replace with \" + (node && node.type));\n    this.node = this.container[this.key] = node;\n  }\n\n  function replaceExpressionWithStatements(nodes) {\n    this.resync();\n    var toSequenceExpression = t.toSequenceExpression(nodes, this.scope);\n\n    if (toSequenceExpression) {\n      return this.replaceWith(toSequenceExpression)[0].get(\"expressions\");\n    }\n\n    var functionParent = this.getFunctionParent();\n    var isParentAsync = functionParent && functionParent.is(\"async\");\n    var container = t.arrowFunctionExpression([], t.blockStatement(nodes));\n    this.replaceWith(t.callExpression(container, []));\n    this.traverse(hoistVariablesVisitor);\n    var completionRecords = this.get(\"callee\").getCompletionRecords();\n\n    for (var _iterator2 = completionRecords, _isArray2 = Array.isArray(_iterator2), _i3 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"]();;) {\n      var _ref2;\n\n      if (_isArray2) {\n        if (_i3 >= _iterator2.length) break;\n        _ref2 = _iterator2[_i3++];\n      } else {\n        _i3 = _iterator2.next();\n        if (_i3.done) break;\n        _ref2 = _i3.value;\n      }\n\n      var _path = _ref2;\n      if (!_path.isExpressionStatement()) continue;\n\n      var _loop = _path.findParent(function (path) {\n        return path.isLoop();\n      });\n\n      if (_loop) {\n        var uid = _loop.getData(\"expressionReplacementReturnUid\");\n\n        if (!uid) {\n          var _callee = this.get(\"callee\");\n\n          uid = _callee.scope.generateDeclaredUidIdentifier(\"ret\");\n\n          _callee.get(\"body\").pushContainer(\"body\", t.returnStatement(t.cloneNode(uid)));\n\n          _loop.setData(\"expressionReplacementReturnUid\", uid);\n        } else {\n          uid = t.identifier(uid.name);\n        }\n\n        _path.get(\"expression\").replaceWith(t.assignmentExpression(\"=\", t.cloneNode(uid), _path.node.expression));\n      } else {\n        _path.replaceWith(t.returnStatement(_path.node.expression));\n      }\n    }\n\n    var callee = this.get(\"callee\");\n    callee.arrowFunctionToExpression();\n\n    if (isParentAsync && _index.default.hasType(this.get(\"callee.body\").node, \"AwaitExpression\", t.FUNCTION_TYPES)) {\n      callee.set(\"async\", true);\n      this.replaceWith(t.awaitExpression(this.node));\n    }\n\n    return callee.get(\"body.body\");\n  }\n\n  function replaceInline(nodes) {\n    this.resync();\n\n    if (Array.isArray(nodes)) {\n      if (Array.isArray(this.container)) {\n        nodes = this._verifyNodeList(nodes);\n\n        var paths = this._containerInsertAfter(nodes);\n\n        this.remove();\n        return paths;\n      } else {\n        return this.replaceWithMultiple(nodes);\n      }\n    } else {\n      return this.replaceWith(nodes);\n    }\n  }\n});","map":[[2,0,1,0],[4,0,3,0,"Object"],[4,2,3,0,"Object"],[4,8,3,6],[4,9,3,7,"defineProperty"],[4,23,3,0],[4,24,3,22,"exports"],[4,31,3,0],[4,33,3,31],[4,45,3,0],[4,47,3,45],[5,0,4,2,"value"],[5,4,4,2,"value"],[5,9,4,7],[5,11,4,9],[6,0,3,45],[6,3,3,0],[7,0,6,0,"exports"],[7,2,6,0,"exports"],[7,9,6,7],[7,10,6,8,"replaceWithMultiple"],[7,29,6,0],[7,32,6,30,"replaceWithMultiple"],[7,51,6,0],[8,0,7,0,"exports"],[8,2,7,0,"exports"],[8,9,7,7],[8,10,7,8,"replaceWithSourceString"],[8,33,7,0],[8,36,7,34,"replaceWithSourceString"],[8,59,7,0],[9,0,8,0,"exports"],[9,2,8,0,"exports"],[9,9,8,7],[9,10,8,8,"replaceWith"],[9,21,8,0],[9,24,8,22,"replaceWith"],[9,35,8,0],[10,0,9,0,"exports"],[10,2,9,0,"exports"],[10,9,9,7],[10,10,9,8,"_replaceWith"],[10,22,9,0],[10,25,9,23,"_replaceWith"],[10,37,9,0],[11,0,10,0,"exports"],[11,2,10,0,"exports"],[11,9,10,7],[11,10,10,8,"replaceExpressionWithStatements"],[11,41,10,0],[11,44,10,42,"replaceExpressionWithStatements"],[11,75,10,0],[12,0,11,0,"exports"],[12,2,11,0,"exports"],[12,9,11,7],[12,10,11,8,"replaceInline"],[12,23,11,0],[12,26,11,24,"replaceInline"],[12,39,11,0],[14,0,13,0],[14,6,13,4,"_codeFrame"],[14,16,13,14],[14,19,13,17,"require"],[14,30,13,24],[14,70,13,0],[16,0,15,0],[16,6,15,4,"_index"],[16,12,15,10],[16,15,15,13,"_interopRequireDefault"],[16,37,15,35],[16,38,15,36,"require"],[16,49,15,43],[16,80,15,35],[16,81,15,0],[18,0,17,0],[18,6,17,4,"_index2"],[18,13,17,11],[18,16,17,14,"_interopRequireDefault"],[18,38,17,36],[18,39,17,37,"require"],[18,50,17,44],[18,80,17,36],[18,81,17,0],[20,0,19,0],[20,6,19,4,"_parser"],[20,13,19,11],[20,16,19,14,"require"],[20,27,19,21],[20,63,19,0],[22,0,21,0],[22,6,21,4,"t"],[22,7,21,5],[22,10,21,8,"_interopRequireWildcard"],[22,33,21,31],[22,34,21,32,"require"],[22,45,21,39],[22,80,21,31],[22,81,21,0],[24,0,23,0],[24,11,23,9,"_getRequireWildcardCache"],[24,35,23,0],[24,38,23,36],[25,0,23,38],[25,8,23,42],[25,15,23,49,"WeakMap"],[25,22,23,42],[25,27,23,61],[25,37,23,38],[25,39,23,73],[25,46,23,80],[25,50,23,73],[26,0,23,86],[26,8,23,90,"cache"],[26,13,23,95],[26,16,23,98],[26,20,23,102,"WeakMap"],[26,27,23,98],[26,29,23,86],[28,0,23,113,"_getRequireWildcardCache"],[28,4,23,113,"_getRequireWildcardCache"],[28,28,23,137],[28,31,23,140],[28,67,23,152],[29,0,23,154],[29,13,23,161,"cache"],[29,18,23,154],[30,0,23,169],[30,5,23,113],[32,0,23,171],[32,11,23,178,"cache"],[32,16,23,171],[33,0,23,186],[35,0,25,0],[35,11,25,9,"_interopRequireWildcard"],[35,34,25,0],[35,35,25,33,"obj"],[35,38,25,0],[35,40,25,38],[36,0,25,40],[36,8,25,44,"obj"],[36,11,25,47],[36,15,25,51,"obj"],[36,18,25,54],[36,19,25,55,"__esModule"],[36,29,25,40],[36,31,25,67],[37,0,25,69],[37,13,25,76,"obj"],[37,16,25,69],[38,0,25,82],[40,0,25,83],[40,8,25,87,"obj"],[40,11,25,90],[40,16,25,95],[40,20,25,87],[40,24,25,103],[40,31,25,110,"obj"],[40,34,25,103],[40,39,25,118],[40,47,25,103],[40,51,25,130],[40,58,25,137,"obj"],[40,61,25,130],[40,66,25,145],[40,76,25,83],[40,78,25,157],[41,0,25,159],[41,13,25,166],[42,0,25,168,"default"],[42,8,25,168,"default"],[42,15,25,175],[42,17,25,177,"obj"],[43,0,25,166],[43,7,25,159],[44,0,25,185],[46,0,25,186],[46,8,25,190,"cache"],[46,13,25,195],[46,16,25,198,"_getRequireWildcardCache"],[46,40,25,222],[46,42,25,186],[48,0,25,226],[48,8,25,230,"cache"],[48,13,25,235],[48,17,25,239,"cache"],[48,22,25,244],[48,23,25,245,"has"],[48,26,25,239],[48,27,25,249,"obj"],[48,30,25,239],[48,31,25,226],[48,33,25,255],[49,0,25,257],[49,13,25,264,"cache"],[49,18,25,269],[49,19,25,270,"get"],[49,22,25,264],[49,23,25,274,"obj"],[49,26,25,264],[49,27,25,257],[50,0,25,281],[52,0,25,282],[52,8,25,286,"newObj"],[52,14,25,292],[52,17,25,295],[52,19,25,282],[53,0,25,299],[53,8,25,303,"hasPropertyDescriptor"],[53,29,25,324],[53,32,25,327,"Object"],[53,38,25,333],[53,39,25,334,"defineProperty"],[53,53,25,327],[53,57,25,352,"Object"],[53,63,25,358],[53,64,25,359,"getOwnPropertyDescriptor"],[53,88,25,299],[55,0,25,385],[55,9,25,390],[55,13,25,394,"key"],[55,16,25,385],[55,20,25,401,"obj"],[55,23,25,385],[55,25,25,406],[56,0,25,408],[56,10,25,412,"Object"],[56,16,25,418],[56,17,25,419,"prototype"],[56,26,25,412],[56,27,25,429,"hasOwnProperty"],[56,41,25,412],[56,42,25,444,"call"],[56,46,25,412],[56,47,25,449,"obj"],[56,50,25,412],[56,52,25,454,"key"],[56,55,25,412],[56,56,25,408],[56,58,25,460],[57,0,25,462],[57,12,25,466,"desc"],[57,16,25,470],[57,19,25,473,"hasPropertyDescriptor"],[57,40,25,494],[57,43,25,497,"Object"],[57,49,25,503],[57,50,25,504,"getOwnPropertyDescriptor"],[57,74,25,497],[57,75,25,529,"obj"],[57,78,25,497],[57,80,25,534,"key"],[57,83,25,497],[57,84,25,494],[57,87,25,541],[57,91,25,462],[59,0,25,547],[59,12,25,551,"desc"],[59,16,25,555],[59,21,25,560,"desc"],[59,25,25,564],[59,26,25,565,"get"],[59,29,25,560],[59,33,25,572,"desc"],[59,37,25,576],[59,38,25,577,"set"],[59,41,25,555],[59,42,25,547],[59,44,25,583],[60,0,25,585,"Object"],[60,10,25,585,"Object"],[60,16,25,591],[60,17,25,592,"defineProperty"],[60,31,25,585],[60,32,25,607,"newObj"],[60,38,25,585],[60,40,25,615,"key"],[60,43,25,585],[60,45,25,620,"desc"],[60,49,25,585],[61,0,25,628],[61,9,25,547],[61,15,25,634],[62,0,25,636,"newObj"],[62,10,25,636,"newObj"],[62,16,25,642],[62,17,25,643,"key"],[62,20,25,642],[62,21,25,636],[62,24,25,650,"obj"],[62,27,25,653],[62,28,25,654,"key"],[62,31,25,653],[62,32,25,636],[63,0,25,661],[64,0,25,663],[65,0,25,665],[67,0,25,666,"newObj"],[67,4,25,666,"newObj"],[67,10,25,672],[67,11,25,673,"default"],[67,18,25,666],[67,21,25,683,"obj"],[67,24,25,666],[69,0,25,688],[69,8,25,692,"cache"],[69,13,25,688],[69,15,25,699],[70,0,25,701,"cache"],[70,6,25,701,"cache"],[70,11,25,706],[70,12,25,707,"set"],[70,15,25,701],[70,16,25,711,"obj"],[70,19,25,701],[70,21,25,716,"newObj"],[70,27,25,701],[71,0,25,726],[73,0,25,727],[73,11,25,734,"newObj"],[73,17,25,727],[74,0,25,743],[76,0,27,0],[76,11,27,9,"_interopRequireDefault"],[76,33,27,0],[76,34,27,32,"obj"],[76,37,27,0],[76,39,27,37],[77,0,27,39],[77,11,27,46,"obj"],[77,14,27,49],[77,18,27,53,"obj"],[77,21,27,56],[77,22,27,57,"__esModule"],[77,32,27,46],[77,35,27,70,"obj"],[77,38,27,46],[77,41,27,76],[78,0,27,78,"default"],[78,6,27,78,"default"],[78,13,27,85],[78,15,27,87,"obj"],[79,0,27,76],[79,5,27,39],[80,0,27,95],[82,0,29,0],[82,6,29,6,"hoistVariablesVisitor"],[82,27,29,27],[82,30,29,30],[83,0,30,2,"Function"],[83,4,30,2,"Function"],[83,12,29,30],[83,32,30,11,"path"],[83,36,29,30],[83,38,30,17],[84,0,31,4,"path"],[84,6,31,4,"path"],[84,10,31,8],[84,11,31,9,"skip"],[84,15,31,4],[85,0,32,3],[85,5,29,30],[86,0,34,2,"VariableDeclaration"],[86,4,34,2,"VariableDeclaration"],[86,23,29,30],[86,54,34,22,"path"],[86,58,29,30],[86,60,34,28],[87,0,35,4],[87,10,35,8,"path"],[87,14,35,12],[87,15,35,13,"node"],[87,19,35,8],[87,20,35,18,"kind"],[87,24,35,8],[87,29,35,27],[87,34,35,4],[87,36,35,34],[88,0,36,4],[88,10,36,10,"bindings"],[88,18,36,18],[88,21,36,21,"path"],[88,25,36,25],[88,26,36,26,"getBindingIdentifiers"],[88,47,36,21],[88,49,36,4],[90,0,38,4],[90,38,38,22,"Object"],[90,44,38,28],[90,45,38,29,"keys"],[90,49,38,22],[90,50,38,34,"bindings"],[90,58,38,22],[90,59,38,4],[90,93,38,45],[91,0,38,9],[91,12,38,15,"key"],[91,15,38,18],[91,34,38,9],[92,0,39,6,"path"],[92,8,39,6,"path"],[92,12,39,10],[92,13,39,11,"scope"],[92,18,39,6],[92,19,39,17,"push"],[92,23,39,6],[92,24,39,22],[93,0,40,8,"id"],[93,10,40,8,"id"],[93,12,40,10],[93,14,40,12,"bindings"],[93,22,40,20],[93,23,40,21,"key"],[93,26,40,20],[94,0,39,22],[94,9,39,6],[95,0,42,5],[97,0,44,4],[97,10,44,10,"exprs"],[97,15,44,15],[97,18,44,18],[97,20,44,4],[99,0,46,4],[99,27,46,25,"path"],[99,31,46,29],[99,32,46,30,"node"],[99,36,46,25],[99,37,46,35,"declarations"],[99,49,46,4],[99,210,46,49],[100,0,46,49],[102,0,46,49],[103,0,46,49],[104,0,46,49],[105,0,46,49],[106,0,46,49],[107,0,46,49],[108,0,46,49],[109,0,46,49],[111,0,46,49],[111,12,46,15,"declar"],[111,19,46,49],[113,0,47,6],[113,12,47,10,"declar"],[113,19,47,16],[113,20,47,17,"init"],[113,24,47,6],[113,26,47,23],[114,0,48,8,"exprs"],[114,10,48,8,"exprs"],[114,15,48,13],[114,16,48,14,"push"],[114,20,48,8],[114,21,48,19,"t"],[114,22,48,20],[114,23,48,21,"expressionStatement"],[114,42,48,19],[114,43,48,41,"t"],[114,44,48,42],[114,45,48,43,"assignmentExpression"],[114,65,48,41],[114,66,48,64],[114,69,48,41],[114,71,48,69,"declar"],[114,78,48,75],[114,79,48,76,"id"],[114,81,48,41],[114,83,48,80,"declar"],[114,90,48,86],[114,91,48,87,"init"],[114,95,48,41],[114,96,48,19],[114,97,48,8],[115,0,49,7],[116,0,50,5],[118,0,52,4,"path"],[118,6,52,4,"path"],[118,10,52,8],[118,11,52,9,"replaceWithMultiple"],[118,30,52,4],[118,31,52,29,"exprs"],[118,36,52,4],[119,0,53,3],[120,0,29,30],[120,3,29,0],[122,0,57,0],[122,11,57,9,"replaceWithMultiple"],[122,30,57,0],[122,31,57,29,"nodes"],[122,36,57,0],[122,38,57,36],[123,0,58,2],[123,9,58,7,"resync"],[123,15,58,2],[124,0,59,2,"nodes"],[124,4,59,2,"nodes"],[124,9,59,7],[124,12,59,10],[124,17,59,15,"_verifyNodeList"],[124,32,59,10],[124,33,59,31,"nodes"],[124,38,59,10],[124,39,59,2],[125,0,60,2,"t"],[125,4,60,2,"t"],[125,5,60,3],[125,6,60,4,"inheritLeadingComments"],[125,28,60,2],[125,29,60,27,"nodes"],[125,34,60,32],[125,35,60,33],[125,36,60,32],[125,37,60,2],[125,39,60,37],[125,44,60,42,"node"],[125,48,60,2],[126,0,61,2,"t"],[126,4,61,2,"t"],[126,5,61,3],[126,6,61,4,"inheritTrailingComments"],[126,29,61,2],[126,30,61,28,"nodes"],[126,35,61,33],[126,36,61,34,"nodes"],[126,41,61,39],[126,42,61,40,"length"],[126,48,61,34],[126,51,61,49],[126,52,61,33],[126,53,61,2],[126,55,61,53],[126,60,61,58,"node"],[126,64,61,2],[127,0,62,2],[127,9,62,7,"node"],[127,13,62,2],[127,16,62,14],[127,21,62,19,"container"],[127,30,62,14],[127,31,62,29],[127,36,62,34,"key"],[127,39,62,14],[127,43,62,41],[127,47,62,2],[128,0,63,2],[128,8,63,8,"paths"],[128,13,63,13],[128,16,63,16],[128,21,63,21,"insertAfter"],[128,32,63,16],[128,33,63,33,"nodes"],[128,38,63,16],[128,39,63,2],[130,0,65,2],[130,8,65,6],[130,13,65,11,"node"],[130,17,65,2],[130,19,65,17],[131,0,66,4],[131,11,66,9,"requeue"],[131,18,66,4],[132,0,67,3],[132,5,65,2],[132,11,67,9],[133,0,68,4],[133,11,68,9,"remove"],[133,17,68,4],[134,0,69,3],[136,0,71,2],[136,11,71,9,"paths"],[136,16,71,2],[137,0,72,1],[139,0,74,0],[139,11,74,9,"replaceWithSourceString"],[139,34,74,0],[139,35,74,33,"replacement"],[139,46,74,0],[139,48,74,46],[140,0,75,2],[140,9,75,7,"resync"],[140,15,75,2],[142,0,77,2],[142,8,77,6],[143,0,78,4,"replacement"],[143,6,78,4,"replacement"],[143,17,78,15],[143,26,78,22,"replacement"],[143,37,78,15],[143,43,78,4],[144,0,79,4,"replacement"],[144,6,79,4,"replacement"],[144,17,79,15],[144,20,79,18],[144,21,79,19],[144,24,79,22,"_parser"],[144,31,79,29],[144,32,79,30,"parse"],[144,37,79,18],[144,39,79,37,"replacement"],[144,50,79,18],[144,51,79,4],[145,0,80,3],[145,5,77,2],[145,6,80,4],[145,13,80,11,"err"],[145,16,80,4],[145,18,80,16],[146,0,81,4],[146,10,81,10,"loc"],[146,13,81,13],[146,16,81,16,"err"],[146,19,81,19],[146,20,81,20,"loc"],[146,23,81,4],[148,0,83,4],[148,10,83,8,"loc"],[148,13,83,4],[148,15,83,13],[149,0,84,6,"err"],[149,8,84,6,"err"],[149,11,84,9],[149,12,84,10,"message"],[149,19,84,6],[149,23,84,21],[149,65,84,63],[149,66,84,64],[149,69,84,67,"_codeFrame"],[149,79,84,77],[149,80,84,78,"codeFrameColumns"],[149,96,84,63],[149,98,84,96,"replacement"],[149,109,84,63],[149,111,84,109],[150,0,85,8,"start"],[150,10,85,8,"start"],[150,15,85,13],[150,17,85,15],[151,0,86,10,"line"],[151,12,86,10,"line"],[151,16,86,14],[151,18,86,16,"loc"],[151,21,86,19],[151,22,86,20,"line"],[151,26,85,15],[152,0,87,10,"column"],[152,12,87,10,"column"],[152,18,87,16],[152,20,87,18,"loc"],[152,23,87,21],[152,24,87,22,"column"],[152,30,87,18],[152,33,87,31],[153,0,85,15],[154,0,84,109],[154,9,84,63],[154,10,84,6],[155,0,90,6,"err"],[155,8,90,6,"err"],[155,11,90,9],[155,12,90,10,"code"],[155,16,90,6],[155,19,90,17],[155,47,90,6],[156,0,91,5],[158,0,93,4],[158,12,93,10,"err"],[158,15,93,4],[159,0,94,3],[161,0,96,2,"replacement"],[161,4,96,2,"replacement"],[161,15,96,13],[161,18,96,16,"replacement"],[161,29,96,27],[161,30,96,28,"program"],[161,37,96,16],[161,38,96,36,"body"],[161,42,96,16],[161,43,96,41],[161,44,96,16],[161,46,96,44,"expression"],[161,56,96,2],[163,0,98,2,"_index"],[163,4,98,2,"_index"],[163,10,98,8],[163,11,98,9,"default"],[163,18,98,2],[163,19,98,17,"removeProperties"],[163,35,98,2],[163,36,98,34,"replacement"],[163,47,98,2],[165,0,100,2],[165,11,100,9],[165,16,100,14,"replaceWith"],[165,27,100,9],[165,28,100,26,"replacement"],[165,39,100,9],[165,40,100,2],[166,0,101,1],[168,0,103,0],[168,11,103,9,"replaceWith"],[168,22,103,0],[168,23,103,21,"replacement"],[168,34,103,0],[168,36,103,34],[169,0,104,2],[169,9,104,7,"resync"],[169,15,104,2],[171,0,106,2],[171,8,106,6],[171,13,106,11,"removed"],[171,20,106,2],[171,22,106,20],[172,0,107,4],[172,12,107,10],[172,16,107,14,"Error"],[172,21,107,10],[172,22,107,20],[172,77,107,10],[172,78,107,4],[173,0,108,3],[175,0,110,2],[175,8,110,6,"replacement"],[175,19,110,17],[175,31,110,29,"_index2"],[175,38,110,36],[175,39,110,37,"default"],[175,46,110,2],[175,48,110,46],[176,0,111,4,"replacement"],[176,6,111,4,"replacement"],[176,17,111,15],[176,20,111,18,"replacement"],[176,31,111,29],[176,32,111,30,"node"],[176,36,111,4],[177,0,112,3],[179,0,114,2],[179,8,114,6],[179,9,114,7,"replacement"],[179,20,114,2],[179,22,114,20],[180,0,115,4],[180,12,115,10],[180,16,115,14,"Error"],[180,21,115,10],[180,22,115,20],[180,97,115,10],[180,98,115,4],[181,0,116,3],[183,0,118,2],[183,8,118,6],[183,13,118,11,"node"],[183,17,118,6],[183,22,118,20,"replacement"],[183,33,118,2],[183,35,118,33],[184,0,119,4],[184,13,119,11],[184,14,119,12],[184,18,119,11],[184,19,119,4],[185,0,120,3],[187,0,122,2],[187,8,122,6],[187,13,122,11,"isProgram"],[187,22,122,6],[187,28,122,26],[187,29,122,27,"t"],[187,30,122,28],[187,31,122,29,"isProgram"],[187,40,122,27],[187,41,122,39,"replacement"],[187,52,122,27],[187,53,122,2],[187,55,122,53],[188,0,123,4],[188,12,123,10],[188,16,123,14,"Error"],[188,21,123,10],[188,22,123,20],[188,90,123,10],[188,91,123,4],[189,0,124,3],[191,0,126,2],[191,8,126,6,"Array"],[191,13,126,11],[191,14,126,12,"isArray"],[191,21,126,6],[191,22,126,20,"replacement"],[191,33,126,6],[191,34,126,2],[191,36,126,34],[192,0,127,4],[192,12,127,10],[192,16,127,14,"Error"],[192,21,127,10],[192,22,127,20],[192,111,127,10],[192,112,127,4],[193,0,128,3],[195,0,130,2],[195,8,130,6],[195,15,130,13,"replacement"],[195,26,130,6],[195,31,130,29],[195,39,130,2],[195,41,130,39],[196,0,131,4],[196,12,131,10],[196,16,131,14,"Error"],[196,21,131,10],[196,22,131,20],[196,113,131,10],[196,114,131,4],[197,0,132,3],[199,0,134,2],[199,8,134,6,"nodePath"],[199,16,134,14],[199,19,134,17],[199,21,134,2],[201,0,136,2],[201,8,136,6],[201,13,136,11,"isNodeType"],[201,23,136,6],[201,24,136,22],[201,35,136,6],[201,40,136,38,"t"],[201,41,136,39],[201,42,136,40,"isExpression"],[201,54,136,38],[201,55,136,53,"replacement"],[201,66,136,38],[201,67,136,2],[201,69,136,67],[202,0,137,4],[202,10,137,8],[202,11,137,9],[202,16,137,14,"canHaveVariableDeclarationOrExpression"],[202,54,137,9],[202,56,137,8],[202,60,137,58],[202,61,137,59],[202,66,137,64,"canSwapBetweenExpressionAndStatement"],[202,102,137,59],[202,103,137,101,"replacement"],[202,114,137,59],[202,115,137,8],[202,119,137,117],[202,120,137,118],[202,125,137,123,"parentPath"],[202,135,137,118],[202,136,137,134,"isExportDefaultDeclaration"],[202,162,137,118],[202,164,137,4],[202,166,137,164],[203,0,138,6,"replacement"],[203,8,138,6,"replacement"],[203,19,138,17],[203,22,138,20,"t"],[203,23,138,21],[203,24,138,22,"expressionStatement"],[203,43,138,20],[203,44,138,42,"replacement"],[203,55,138,20],[203,56,138,6],[204,0,139,6,"nodePath"],[204,8,139,6,"nodePath"],[204,16,139,14],[204,19,139,17],[204,31,139,6],[205,0,140,5],[206,0,141,3],[208,0,143,2],[208,8,143,6],[208,13,143,11,"isNodeType"],[208,23,143,6],[208,24,143,22],[208,36,143,6],[208,41,143,39,"t"],[208,42,143,40],[208,43,143,41,"isStatement"],[208,54,143,39],[208,55,143,53,"replacement"],[208,66,143,39],[208,67,143,2],[208,69,143,67],[209,0,144,4],[209,10,144,8],[209,11,144,9],[209,16,144,14,"canHaveVariableDeclarationOrExpression"],[209,54,144,9],[209,56,144,8],[209,60,144,58],[209,61,144,59],[209,66,144,64,"canSwapBetweenExpressionAndStatement"],[209,102,144,59],[209,103,144,101,"replacement"],[209,114,144,59],[209,115,144,4],[209,117,144,115],[210,0,145,6],[210,15,145,13],[210,20,145,18,"replaceExpressionWithStatements"],[210,51,145,13],[210,52,145,50],[210,53,145,51,"replacement"],[210,64,145,50],[210,65,145,13],[210,66,145,6],[211,0,146,5],[212,0,147,3],[214,0,149,2],[214,8,149,8,"oldNode"],[214,15,149,15],[214,18,149,18],[214,23,149,23,"node"],[214,27,149,2],[216,0,151,2],[216,8,151,6,"oldNode"],[216,15,151,2],[216,17,151,15],[217,0,152,4,"t"],[217,6,152,4,"t"],[217,7,152,5],[217,8,152,6,"inheritsComments"],[217,24,152,4],[217,25,152,23,"replacement"],[217,36,152,4],[217,38,152,36,"oldNode"],[217,45,152,4],[218,0,153,4,"t"],[218,6,153,4,"t"],[218,7,153,5],[218,8,153,6,"removeComments"],[218,22,153,4],[218,23,153,21,"oldNode"],[218,30,153,4],[219,0,154,3],[221,0,156,2],[221,9,156,7,"_replaceWith"],[221,21,156,2],[221,22,156,20,"replacement"],[221,33,156,2],[223,0,158,2],[223,9,158,7,"type"],[223,13,158,2],[223,16,158,14,"replacement"],[223,27,158,25],[223,28,158,26,"type"],[223,32,158,2],[224,0,159,2],[224,9,159,7,"setScope"],[224,17,159,2],[225,0,160,2],[225,9,160,7,"requeue"],[225,16,160,2],[226,0,161,2],[226,11,161,9],[226,12,161,10,"nodePath"],[226,20,161,18],[226,23,161,21],[226,28,161,26,"get"],[226,31,161,21],[226,32,161,30,"nodePath"],[226,40,161,21],[226,41,161,18],[226,44,161,42],[226,48,161,9],[226,49,161,2],[227,0,162,1],[229,0,164,0],[229,11,164,9,"_replaceWith"],[229,23,164,0],[229,24,164,22,"node"],[229,28,164,0],[229,30,164,28],[230,0,165,2],[230,8,165,6],[230,9,165,7],[230,14,165,12,"container"],[230,23,165,2],[230,25,165,23],[231,0,166,4],[231,12,166,10],[231,16,166,14,"ReferenceError"],[231,30,166,10],[231,31,166,29],[231,51,166,10],[231,52,166,4],[232,0,167,3],[234,0,169,2],[234,8,169,6],[234,13,169,11,"inList"],[234,19,169,2],[234,21,169,19],[235,0,170,4,"t"],[235,6,170,4,"t"],[235,7,170,5],[235,8,170,6,"validate"],[235,16,170,4],[235,17,170,15],[235,22,170,20,"parent"],[235,28,170,4],[235,30,170,28],[235,35,170,33,"key"],[235,38,170,4],[235,40,170,38],[235,41,170,39,"node"],[235,45,170,38],[235,46,170,4],[236,0,171,3],[236,5,169,2],[236,11,171,9],[237,0,172,4,"t"],[237,6,172,4,"t"],[237,7,172,5],[237,8,172,6,"validate"],[237,16,172,4],[237,17,172,15],[237,22,172,20,"parent"],[237,28,172,4],[237,30,172,28],[237,35,172,33,"key"],[237,38,172,4],[237,40,172,38,"node"],[237,44,172,4],[238,0,173,3],[240,0,175,2],[240,9,175,7,"debug"],[240,14,175,2],[240,34,175,29,"node"],[240,38,175,33],[240,42,175,37,"node"],[240,46,175,41],[240,47,175,42,"type"],[240,51,175,2],[241,0,176,2],[241,9,176,7,"node"],[241,13,176,2],[241,16,176,14],[241,21,176,19,"container"],[241,30,176,14],[241,31,176,29],[241,36,176,34,"key"],[241,39,176,14],[241,43,176,41,"node"],[241,47,176,2],[242,0,177,1],[244,0,179,0],[244,11,179,9,"replaceExpressionWithStatements"],[244,42,179,0],[244,43,179,41,"nodes"],[244,48,179,0],[244,50,179,48],[245,0,180,2],[245,9,180,7,"resync"],[245,15,180,2],[246,0,181,2],[246,8,181,8,"toSequenceExpression"],[246,28,181,28],[246,31,181,31,"t"],[246,32,181,32],[246,33,181,33,"toSequenceExpression"],[246,53,181,31],[246,54,181,54,"nodes"],[246,59,181,31],[246,61,181,61],[246,66,181,66,"scope"],[246,71,181,31],[246,72,181,2],[248,0,183,2],[248,8,183,6,"toSequenceExpression"],[248,28,183,2],[248,30,183,28],[249,0,184,4],[249,13,184,11],[249,18,184,16,"replaceWith"],[249,29,184,11],[249,30,184,28,"toSequenceExpression"],[249,50,184,11],[249,52,184,50],[249,53,184,11],[249,55,184,53,"get"],[249,58,184,11],[249,59,184,57],[249,72,184,11],[249,73,184,4],[250,0,185,3],[252,0,187,2],[252,8,187,8,"functionParent"],[252,22,187,22],[252,25,187,25],[252,30,187,30,"getFunctionParent"],[252,47,187,25],[252,49,187,2],[253,0,188,2],[253,8,188,8,"isParentAsync"],[253,21,188,21],[253,24,188,24,"functionParent"],[253,38,188,38],[253,42,188,42,"functionParent"],[253,56,188,56],[253,57,188,57,"is"],[253,59,188,42],[253,60,188,60],[253,67,188,42],[253,68,188,2],[254,0,189,2],[254,8,189,8,"container"],[254,17,189,17],[254,20,189,20,"t"],[254,21,189,21],[254,22,189,22,"arrowFunctionExpression"],[254,45,189,20],[254,46,189,46],[254,48,189,20],[254,50,189,50,"t"],[254,51,189,51],[254,52,189,52,"blockStatement"],[254,66,189,50],[254,67,189,67,"nodes"],[254,72,189,50],[254,73,189,20],[254,74,189,2],[255,0,190,2],[255,9,190,7,"replaceWith"],[255,20,190,2],[255,21,190,19,"t"],[255,22,190,20],[255,23,190,21,"callExpression"],[255,37,190,19],[255,38,190,36,"container"],[255,47,190,19],[255,49,190,47],[255,51,190,19],[255,52,190,2],[256,0,191,2],[256,9,191,7,"traverse"],[256,17,191,2],[256,18,191,16,"hoistVariablesVisitor"],[256,39,191,2],[257,0,192,2],[257,8,192,8,"completionRecords"],[257,25,192,25],[257,28,192,28],[257,33,192,33,"get"],[257,36,192,28],[257,37,192,37],[257,45,192,28],[257,47,192,47,"getCompletionRecords"],[257,67,192,28],[257,69,192,2],[259,0,194,2],[259,26,194,21,"completionRecords"],[259,43,194,2],[259,210,194,40],[260,0,194,40],[262,0,194,40],[263,0,194,40],[264,0,194,40],[265,0,194,40],[266,0,194,40],[267,0,194,40],[268,0,194,40],[269,0,194,40],[271,0,194,40],[271,10,194,13,"path"],[271,15,194,40],[272,0,195,4],[272,10,195,8],[272,11,195,9,"path"],[272,16,195,13],[272,17,195,14,"isExpressionStatement"],[272,38,195,9],[272,40,195,4],[272,42,195,39],[274,0,196,4],[274,10,196,10,"loop"],[274,15,196,14],[274,18,196,17,"path"],[274,23,196,21],[274,24,196,22,"findParent"],[274,34,196,17],[274,35,196,33],[274,45,196,33,"path"],[274,49,196,37],[275,0,196,37],[275,15,196,41,"path"],[275,19,196,45],[275,20,196,46,"isLoop"],[275,26,196,41],[275,28,196,37],[276,0,196,37],[276,7,196,17],[276,8,196,4],[278,0,198,4],[278,10,198,8,"loop"],[278,15,198,4],[278,17,198,14],[279,0,199,6],[279,12,199,10,"uid"],[279,15,199,13],[279,18,199,16,"loop"],[279,23,199,20],[279,24,199,21,"getData"],[279,31,199,16],[279,32,199,29],[279,64,199,16],[279,65,199,6],[281,0,201,6],[281,12,201,10],[281,13,201,11,"uid"],[281,16,201,6],[281,18,201,16],[282,0,202,8],[282,14,202,14,"callee"],[282,21,202,20],[282,24,202,23],[282,29,202,28,"get"],[282,32,202,23],[282,33,202,32],[282,41,202,23],[282,42,202,8],[284,0,203,8,"uid"],[284,10,203,8,"uid"],[284,13,203,11],[284,16,203,14,"callee"],[284,23,203,20],[284,24,203,21,"scope"],[284,29,203,14],[284,30,203,27,"generateDeclaredUidIdentifier"],[284,59,203,14],[284,60,203,57],[284,65,203,14],[284,66,203,8],[286,0,204,8,"callee"],[286,10,204,8,"callee"],[286,17,204,14],[286,18,204,15,"get"],[286,21,204,8],[286,22,204,19],[286,28,204,8],[286,30,204,27,"pushContainer"],[286,43,204,8],[286,44,204,41],[286,50,204,8],[286,52,204,49,"t"],[286,53,204,50],[286,54,204,51,"returnStatement"],[286,69,204,49],[286,70,204,67,"t"],[286,71,204,68],[286,72,204,69,"cloneNode"],[286,81,204,67],[286,82,204,79,"uid"],[286,85,204,67],[286,86,204,49],[286,87,204,8],[288,0,205,8,"loop"],[288,10,205,8,"loop"],[288,15,205,12],[288,16,205,13,"setData"],[288,23,205,8],[288,24,205,21],[288,56,205,8],[288,58,205,55,"uid"],[288,61,205,8],[289,0,206,7],[289,9,201,6],[289,15,206,13],[290,0,207,8,"uid"],[290,10,207,8,"uid"],[290,13,207,11],[290,16,207,14,"t"],[290,17,207,15],[290,18,207,16,"identifier"],[290,28,207,14],[290,29,207,27,"uid"],[290,32,207,30],[290,33,207,31,"name"],[290,37,207,14],[290,38,207,8],[291,0,208,7],[293,0,210,6,"path"],[293,8,210,6,"path"],[293,13,210,10],[293,14,210,11,"get"],[293,17,210,6],[293,18,210,15],[293,30,210,6],[293,32,210,29,"replaceWith"],[293,43,210,6],[293,44,210,41,"t"],[293,45,210,42],[293,46,210,43,"assignmentExpression"],[293,66,210,41],[293,67,210,64],[293,70,210,41],[293,72,210,69,"t"],[293,73,210,70],[293,74,210,71,"cloneNode"],[293,83,210,69],[293,84,210,81,"uid"],[293,87,210,69],[293,88,210,41],[293,90,210,87,"path"],[293,95,210,91],[293,96,210,92,"node"],[293,100,210,87],[293,101,210,97,"expression"],[293,111,210,41],[293,112,210,6],[294,0,211,5],[294,7,198,4],[294,13,211,11],[295,0,212,6,"path"],[295,8,212,6,"path"],[295,13,212,10],[295,14,212,11,"replaceWith"],[295,25,212,6],[295,26,212,23,"t"],[295,27,212,24],[295,28,212,25,"returnStatement"],[295,43,212,23],[295,44,212,41,"path"],[295,49,212,45],[295,50,212,46,"node"],[295,54,212,41],[295,55,212,51,"expression"],[295,65,212,23],[295,66,212,6],[296,0,213,5],[297,0,214,3],[299,0,216,2],[299,8,216,8,"callee"],[299,14,216,14],[299,17,216,17],[299,22,216,22,"get"],[299,25,216,17],[299,26,216,26],[299,34,216,17],[299,35,216,2],[300,0,217,2,"callee"],[300,4,217,2,"callee"],[300,10,217,8],[300,11,217,9,"arrowFunctionToExpression"],[300,36,217,2],[302,0,219,2],[302,8,219,6,"isParentAsync"],[302,21,219,19],[302,25,219,23,"_index"],[302,31,219,29],[302,32,219,30,"default"],[302,39,219,23],[302,40,219,38,"hasType"],[302,47,219,23],[302,48,219,46],[302,53,219,51,"get"],[302,56,219,46],[302,57,219,55],[302,70,219,46],[302,72,219,70,"node"],[302,76,219,23],[302,78,219,76],[302,95,219,23],[302,97,219,95,"t"],[302,98,219,96],[302,99,219,97,"FUNCTION_TYPES"],[302,113,219,23],[302,114,219,2],[302,116,219,114],[303,0,220,4,"callee"],[303,6,220,4,"callee"],[303,12,220,10],[303,13,220,11,"set"],[303,16,220,4],[303,17,220,15],[303,24,220,4],[303,26,220,24],[303,30,220,4],[304,0,221,4],[304,11,221,9,"replaceWith"],[304,22,221,4],[304,23,221,21,"t"],[304,24,221,22],[304,25,221,23,"awaitExpression"],[304,40,221,21],[304,41,221,39],[304,46,221,44,"node"],[304,50,221,21],[304,51,221,4],[305,0,222,3],[307,0,224,2],[307,11,224,9,"callee"],[307,17,224,15],[307,18,224,16,"get"],[307,21,224,9],[307,22,224,20],[307,33,224,9],[307,34,224,2],[308,0,225,1],[310,0,227,0],[310,11,227,9,"replaceInline"],[310,24,227,0],[310,25,227,23,"nodes"],[310,30,227,0],[310,32,227,30],[311,0,228,2],[311,9,228,7,"resync"],[311,15,228,2],[313,0,230,2],[313,8,230,6,"Array"],[313,13,230,11],[313,14,230,12,"isArray"],[313,21,230,6],[313,22,230,20,"nodes"],[313,27,230,6],[313,28,230,2],[313,30,230,28],[314,0,231,4],[314,10,231,8,"Array"],[314,15,231,13],[314,16,231,14,"isArray"],[314,23,231,8],[314,24,231,22],[314,29,231,27,"container"],[314,38,231,8],[314,39,231,4],[314,41,231,39],[315,0,232,6,"nodes"],[315,8,232,6,"nodes"],[315,13,232,11],[315,16,232,14],[315,21,232,19,"_verifyNodeList"],[315,36,232,14],[315,37,232,35,"nodes"],[315,42,232,14],[315,43,232,6],[317,0,234,6],[317,12,234,12,"paths"],[317,17,234,17],[317,20,234,20],[317,25,234,25,"_containerInsertAfter"],[317,46,234,20],[317,47,234,47,"nodes"],[317,52,234,20],[317,53,234,6],[319,0,236,6],[319,13,236,11,"remove"],[319,19,236,6],[320,0,237,6],[320,15,237,13,"paths"],[320,20,237,6],[321,0,238,5],[321,7,231,4],[321,13,238,11],[322,0,239,6],[322,15,239,13],[322,20,239,18,"replaceWithMultiple"],[322,39,239,13],[322,40,239,38,"nodes"],[322,45,239,13],[322,46,239,6],[323,0,240,5],[324,0,241,3],[324,5,230,2],[324,11,241,9],[325,0,242,4],[325,13,242,11],[325,18,242,16,"replaceWith"],[325,29,242,11],[325,30,242,28,"nodes"],[325,35,242,11],[325,36,242,4],[326,0,243,3],[327,0,244,1]]},"type":"js/module"}]}