{"dependencies":[{"name":"./inferers","data":{"isAsync":false}},{"name":"@babel/types","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getTypeAnnotation = getTypeAnnotation;\n  exports._getTypeAnnotation = _getTypeAnnotation;\n  exports.isBaseType = isBaseType;\n  exports.couldBeBaseType = couldBeBaseType;\n  exports.baseTypeStrictlyMatches = baseTypeStrictlyMatches;\n  exports.isGenericType = isGenericType;\n\n  var inferers = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], \"./inferers\"));\n\n  var t = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1], \"@babel/types\"));\n\n  function _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n\n    _getRequireWildcardCache = function _getRequireWildcardCache() {\n      return cache;\n    };\n\n    return cache;\n  }\n\n  function _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n      return obj;\n    }\n\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n      return {\n        default: obj\n      };\n    }\n\n    var cache = _getRequireWildcardCache();\n\n    if (cache && cache.has(obj)) {\n      return cache.get(obj);\n    }\n\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n    for (var key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n        if (desc && (desc.get || desc.set)) {\n          Object.defineProperty(newObj, key, desc);\n        } else {\n          newObj[key] = obj[key];\n        }\n      }\n    }\n\n    newObj.default = obj;\n\n    if (cache) {\n      cache.set(obj, newObj);\n    }\n\n    return newObj;\n  }\n\n  function getTypeAnnotation() {\n    if (this.typeAnnotation) return this.typeAnnotation;\n    var type = this._getTypeAnnotation() || t.anyTypeAnnotation();\n    if (t.isTypeAnnotation(type)) type = type.typeAnnotation;\n    return this.typeAnnotation = type;\n  }\n\n  function _getTypeAnnotation() {\n    var node = this.node;\n\n    if (!node) {\n      if (this.key === \"init\" && this.parentPath.isVariableDeclarator()) {\n        var declar = this.parentPath.parentPath;\n        var declarParent = declar.parentPath;\n\n        if (declar.key === \"left\" && declarParent.isForInStatement()) {\n          return t.stringTypeAnnotation();\n        }\n\n        if (declar.key === \"left\" && declarParent.isForOfStatement()) {\n          return t.anyTypeAnnotation();\n        }\n\n        return t.voidTypeAnnotation();\n      } else {\n        return;\n      }\n    }\n\n    if (node.typeAnnotation) {\n      return node.typeAnnotation;\n    }\n\n    var inferer = inferers[node.type];\n\n    if (inferer) {\n      return inferer.call(this, node);\n    }\n\n    inferer = inferers[this.parentPath.type];\n\n    if (inferer && inferer.validParent) {\n      return this.parentPath.getTypeAnnotation();\n    }\n  }\n\n  function isBaseType(baseName, soft) {\n    return _isBaseType(baseName, this.getTypeAnnotation(), soft);\n  }\n\n  function _isBaseType(baseName, type, soft) {\n    if (baseName === \"string\") {\n      return t.isStringTypeAnnotation(type);\n    } else if (baseName === \"number\") {\n      return t.isNumberTypeAnnotation(type);\n    } else if (baseName === \"boolean\") {\n      return t.isBooleanTypeAnnotation(type);\n    } else if (baseName === \"any\") {\n      return t.isAnyTypeAnnotation(type);\n    } else if (baseName === \"mixed\") {\n      return t.isMixedTypeAnnotation(type);\n    } else if (baseName === \"empty\") {\n      return t.isEmptyTypeAnnotation(type);\n    } else if (baseName === \"void\") {\n      return t.isVoidTypeAnnotation(type);\n    } else {\n      if (soft) {\n        return false;\n      } else {\n        throw new Error(\"Unknown base type \" + baseName);\n      }\n    }\n  }\n\n  function couldBeBaseType(name) {\n    var type = this.getTypeAnnotation();\n    if (t.isAnyTypeAnnotation(type)) return true;\n\n    if (t.isUnionTypeAnnotation(type)) {\n      for (var _iterator = type.types, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"]();;) {\n        var _ref;\n\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref = _i.value;\n        }\n\n        var _type = _ref;\n\n        if (t.isAnyTypeAnnotation(_type) || _isBaseType(name, _type, true)) {\n          return true;\n        }\n      }\n\n      return false;\n    } else {\n      return _isBaseType(name, type, true);\n    }\n  }\n\n  function baseTypeStrictlyMatches(right) {\n    var left = this.getTypeAnnotation();\n    right = right.getTypeAnnotation();\n\n    if (!t.isAnyTypeAnnotation(left) && t.isFlowBaseAnnotation(left)) {\n      return right.type === left.type;\n    }\n  }\n\n  function isGenericType(genericName) {\n    var type = this.getTypeAnnotation();\n    return t.isGenericTypeAnnotation(type) && t.isIdentifier(type.id, {\n      name: genericName\n    });\n  }\n});","map":[[2,0,1,0],[4,0,3,0,"Object"],[4,2,3,0,"Object"],[4,8,3,6],[4,9,3,7,"defineProperty"],[4,23,3,0],[4,24,3,22,"exports"],[4,31,3,0],[4,33,3,31],[4,45,3,0],[4,47,3,45],[5,0,4,2,"value"],[5,4,4,2,"value"],[5,9,4,7],[5,11,4,9],[6,0,3,45],[6,3,3,0],[7,0,6,0,"exports"],[7,2,6,0,"exports"],[7,9,6,7],[7,10,6,8,"getTypeAnnotation"],[7,27,6,0],[7,30,6,28,"getTypeAnnotation"],[7,47,6,0],[8,0,7,0,"exports"],[8,2,7,0,"exports"],[8,9,7,7],[8,10,7,8,"_getTypeAnnotation"],[8,28,7,0],[8,31,7,29,"_getTypeAnnotation"],[8,49,7,0],[9,0,8,0,"exports"],[9,2,8,0,"exports"],[9,9,8,7],[9,10,8,8,"isBaseType"],[9,20,8,0],[9,23,8,21,"isBaseType"],[9,33,8,0],[10,0,9,0,"exports"],[10,2,9,0,"exports"],[10,9,9,7],[10,10,9,8,"couldBeBaseType"],[10,25,9,0],[10,28,9,26,"couldBeBaseType"],[10,43,9,0],[11,0,10,0,"exports"],[11,2,10,0,"exports"],[11,9,10,7],[11,10,10,8,"baseTypeStrictlyMatches"],[11,33,10,0],[11,36,10,34,"baseTypeStrictlyMatches"],[11,59,10,0],[12,0,11,0,"exports"],[12,2,11,0,"exports"],[12,9,11,7],[12,10,11,8,"isGenericType"],[12,23,11,0],[12,26,11,24,"isGenericType"],[12,39,11,0],[14,0,13,0],[14,6,13,4,"inferers"],[14,14,13,12],[14,17,13,15,"_interopRequireWildcard"],[14,40,13,38],[14,41,13,39,"require"],[14,52,13,46],[14,85,13,38],[14,86,13,0],[16,0,15,0],[16,6,15,4,"t"],[16,7,15,5],[16,10,15,8,"_interopRequireWildcard"],[16,33,15,31],[16,34,15,32,"require"],[16,45,15,39],[16,80,15,31],[16,81,15,0],[18,0,17,0],[18,11,17,9,"_getRequireWildcardCache"],[18,35,17,0],[18,38,17,36],[19,0,17,38],[19,8,17,42],[19,15,17,49,"WeakMap"],[19,22,17,42],[19,27,17,61],[19,37,17,38],[19,39,17,73],[19,46,17,80],[19,50,17,73],[20,0,17,86],[20,8,17,90,"cache"],[20,13,17,95],[20,16,17,98],[20,20,17,102,"WeakMap"],[20,27,17,98],[20,29,17,86],[22,0,17,113,"_getRequireWildcardCache"],[22,4,17,113,"_getRequireWildcardCache"],[22,28,17,137],[22,31,17,140],[22,67,17,152],[23,0,17,154],[23,13,17,161,"cache"],[23,18,17,154],[24,0,17,169],[24,5,17,113],[26,0,17,171],[26,11,17,178,"cache"],[26,16,17,171],[27,0,17,186],[29,0,19,0],[29,11,19,9,"_interopRequireWildcard"],[29,34,19,0],[29,35,19,33,"obj"],[29,38,19,0],[29,40,19,38],[30,0,19,40],[30,8,19,44,"obj"],[30,11,19,47],[30,15,19,51,"obj"],[30,18,19,54],[30,19,19,55,"__esModule"],[30,29,19,40],[30,31,19,67],[31,0,19,69],[31,13,19,76,"obj"],[31,16,19,69],[32,0,19,82],[34,0,19,83],[34,8,19,87,"obj"],[34,11,19,90],[34,16,19,95],[34,20,19,87],[34,24,19,103],[34,31,19,110,"obj"],[34,34,19,103],[34,39,19,118],[34,47,19,103],[34,51,19,130],[34,58,19,137,"obj"],[34,61,19,130],[34,66,19,145],[34,76,19,83],[34,78,19,157],[35,0,19,159],[35,13,19,166],[36,0,19,168,"default"],[36,8,19,168,"default"],[36,15,19,175],[36,17,19,177,"obj"],[37,0,19,166],[37,7,19,159],[38,0,19,185],[40,0,19,186],[40,8,19,190,"cache"],[40,13,19,195],[40,16,19,198,"_getRequireWildcardCache"],[40,40,19,222],[40,42,19,186],[42,0,19,226],[42,8,19,230,"cache"],[42,13,19,235],[42,17,19,239,"cache"],[42,22,19,244],[42,23,19,245,"has"],[42,26,19,239],[42,27,19,249,"obj"],[42,30,19,239],[42,31,19,226],[42,33,19,255],[43,0,19,257],[43,13,19,264,"cache"],[43,18,19,269],[43,19,19,270,"get"],[43,22,19,264],[43,23,19,274,"obj"],[43,26,19,264],[43,27,19,257],[44,0,19,281],[46,0,19,282],[46,8,19,286,"newObj"],[46,14,19,292],[46,17,19,295],[46,19,19,282],[47,0,19,299],[47,8,19,303,"hasPropertyDescriptor"],[47,29,19,324],[47,32,19,327,"Object"],[47,38,19,333],[47,39,19,334,"defineProperty"],[47,53,19,327],[47,57,19,352,"Object"],[47,63,19,358],[47,64,19,359,"getOwnPropertyDescriptor"],[47,88,19,299],[49,0,19,385],[49,9,19,390],[49,13,19,394,"key"],[49,16,19,385],[49,20,19,401,"obj"],[49,23,19,385],[49,25,19,406],[50,0,19,408],[50,10,19,412,"Object"],[50,16,19,418],[50,17,19,419,"prototype"],[50,26,19,412],[50,27,19,429,"hasOwnProperty"],[50,41,19,412],[50,42,19,444,"call"],[50,46,19,412],[50,47,19,449,"obj"],[50,50,19,412],[50,52,19,454,"key"],[50,55,19,412],[50,56,19,408],[50,58,19,460],[51,0,19,462],[51,12,19,466,"desc"],[51,16,19,470],[51,19,19,473,"hasPropertyDescriptor"],[51,40,19,494],[51,43,19,497,"Object"],[51,49,19,503],[51,50,19,504,"getOwnPropertyDescriptor"],[51,74,19,497],[51,75,19,529,"obj"],[51,78,19,497],[51,80,19,534,"key"],[51,83,19,497],[51,84,19,494],[51,87,19,541],[51,91,19,462],[53,0,19,547],[53,12,19,551,"desc"],[53,16,19,555],[53,21,19,560,"desc"],[53,25,19,564],[53,26,19,565,"get"],[53,29,19,560],[53,33,19,572,"desc"],[53,37,19,576],[53,38,19,577,"set"],[53,41,19,555],[53,42,19,547],[53,44,19,583],[54,0,19,585,"Object"],[54,10,19,585,"Object"],[54,16,19,591],[54,17,19,592,"defineProperty"],[54,31,19,585],[54,32,19,607,"newObj"],[54,38,19,585],[54,40,19,615,"key"],[54,43,19,585],[54,45,19,620,"desc"],[54,49,19,585],[55,0,19,628],[55,9,19,547],[55,15,19,634],[56,0,19,636,"newObj"],[56,10,19,636,"newObj"],[56,16,19,642],[56,17,19,643,"key"],[56,20,19,642],[56,21,19,636],[56,24,19,650,"obj"],[56,27,19,653],[56,28,19,654,"key"],[56,31,19,653],[56,32,19,636],[57,0,19,661],[58,0,19,663],[59,0,19,665],[61,0,19,666,"newObj"],[61,4,19,666,"newObj"],[61,10,19,672],[61,11,19,673,"default"],[61,18,19,666],[61,21,19,683,"obj"],[61,24,19,666],[63,0,19,688],[63,8,19,692,"cache"],[63,13,19,688],[63,15,19,699],[64,0,19,701,"cache"],[64,6,19,701,"cache"],[64,11,19,706],[64,12,19,707,"set"],[64,15,19,701],[64,16,19,711,"obj"],[64,19,19,701],[64,21,19,716,"newObj"],[64,27,19,701],[65,0,19,726],[67,0,19,727],[67,11,19,734,"newObj"],[67,17,19,727],[68,0,19,743],[70,0,21,0],[70,11,21,9,"getTypeAnnotation"],[70,28,21,0],[70,31,21,29],[71,0,22,2],[71,8,22,6],[71,13,22,11,"typeAnnotation"],[71,27,22,2],[71,29,22,27],[71,36,22,34],[71,41,22,39,"typeAnnotation"],[71,55,22,27],[72,0,23,2],[72,8,23,6,"type"],[72,12,23,10],[72,15,23,13],[72,20,23,18,"_getTypeAnnotation"],[72,38,23,13],[72,44,23,42,"t"],[72,45,23,43],[72,46,23,44,"anyTypeAnnotation"],[72,63,23,42],[72,65,23,2],[73,0,24,2],[73,8,24,6,"t"],[73,9,24,7],[73,10,24,8,"isTypeAnnotation"],[73,26,24,6],[73,27,24,25,"type"],[73,31,24,6],[73,32,24,2],[73,34,24,32,"type"],[73,38,24,36],[73,41,24,39,"type"],[73,45,24,43],[73,46,24,44,"typeAnnotation"],[73,60,24,32],[74,0,25,2],[74,11,25,9],[74,16,25,14,"typeAnnotation"],[74,30,25,9],[74,33,25,31,"type"],[74,37,25,2],[75,0,26,1],[77,0,28,0],[77,11,28,9,"_getTypeAnnotation"],[77,29,28,0],[77,32,28,30],[78,0,29,2],[78,8,29,8,"node"],[78,12,29,12],[78,15,29,15],[78,20,29,20,"node"],[78,24,29,2],[80,0,31,2],[80,8,31,6],[80,9,31,7,"node"],[80,13,31,2],[80,15,31,13],[81,0,32,4],[81,10,32,8],[81,15,32,13,"key"],[81,18,32,8],[81,23,32,21],[81,29,32,8],[81,33,32,31],[81,38,32,36,"parentPath"],[81,48,32,31],[81,49,32,47,"isVariableDeclarator"],[81,69,32,31],[81,71,32,4],[81,73,32,71],[82,0,33,6],[82,12,33,12,"declar"],[82,18,33,18],[82,21,33,21],[82,26,33,26,"parentPath"],[82,36,33,21],[82,37,33,37,"parentPath"],[82,47,33,6],[83,0,34,6],[83,12,34,12,"declarParent"],[83,24,34,24],[83,27,34,27,"declar"],[83,33,34,33],[83,34,34,34,"parentPath"],[83,44,34,6],[85,0,36,6],[85,12,36,10,"declar"],[85,18,36,16],[85,19,36,17,"key"],[85,22,36,10],[85,27,36,25],[85,33,36,10],[85,37,36,35,"declarParent"],[85,49,36,47],[85,50,36,48,"isForInStatement"],[85,66,36,35],[85,68,36,6],[85,70,36,68],[86,0,37,8],[86,17,37,15,"t"],[86,18,37,16],[86,19,37,17,"stringTypeAnnotation"],[86,39,37,15],[86,41,37,8],[87,0,38,7],[89,0,40,6],[89,12,40,10,"declar"],[89,18,40,16],[89,19,40,17,"key"],[89,22,40,10],[89,27,40,25],[89,33,40,10],[89,37,40,35,"declarParent"],[89,49,40,47],[89,50,40,48,"isForOfStatement"],[89,66,40,35],[89,68,40,6],[89,70,40,68],[90,0,41,8],[90,17,41,15,"t"],[90,18,41,16],[90,19,41,17,"anyTypeAnnotation"],[90,36,41,15],[90,38,41,8],[91,0,42,7],[93,0,44,6],[93,15,44,13,"t"],[93,16,44,14],[93,17,44,15,"voidTypeAnnotation"],[93,35,44,13],[93,37,44,6],[94,0,45,5],[94,7,32,4],[94,13,45,11],[95,0,46,6],[96,0,47,5],[97,0,48,3],[99,0,50,2],[99,8,50,6,"node"],[99,12,50,10],[99,13,50,11,"typeAnnotation"],[99,27,50,2],[99,29,50,27],[100,0,51,4],[100,13,51,11,"node"],[100,17,51,15],[100,18,51,16,"typeAnnotation"],[100,32,51,4],[101,0,52,3],[103,0,54,2],[103,8,54,6,"inferer"],[103,15,54,13],[103,18,54,16,"inferers"],[103,26,54,24],[103,27,54,25,"node"],[103,31,54,29],[103,32,54,30,"type"],[103,36,54,24],[103,37,54,2],[105,0,56,2],[105,8,56,6,"inferer"],[105,15,56,2],[105,17,56,15],[106,0,57,4],[106,13,57,11,"inferer"],[106,20,57,18],[106,21,57,19,"call"],[106,25,57,11],[106,26,57,24],[106,30,57,11],[106,32,57,30,"node"],[106,36,57,11],[106,37,57,4],[107,0,58,3],[109,0,60,2,"inferer"],[109,4,60,2,"inferer"],[109,11,60,9],[109,14,60,12,"inferers"],[109,22,60,20],[109,23,60,21],[109,28,60,26,"parentPath"],[109,38,60,21],[109,39,60,37,"type"],[109,43,60,20],[109,44,60,2],[111,0,62,2],[111,8,62,6,"inferer"],[111,15,62,13],[111,19,62,17,"inferer"],[111,26,62,24],[111,27,62,25,"validParent"],[111,38,62,2],[111,40,62,38],[112,0,63,4],[112,13,63,11],[112,18,63,16,"parentPath"],[112,28,63,11],[112,29,63,27,"getTypeAnnotation"],[112,46,63,11],[112,48,63,4],[113,0,64,3],[114,0,65,1],[116,0,67,0],[116,11,67,9,"isBaseType"],[116,21,67,0],[116,22,67,20,"baseName"],[116,30,67,0],[116,32,67,30,"soft"],[116,36,67,0],[116,38,67,36],[117,0,68,2],[117,11,68,9,"_isBaseType"],[117,22,68,20],[117,23,68,21,"baseName"],[117,31,68,20],[117,33,68,31],[117,38,68,36,"getTypeAnnotation"],[117,55,68,31],[117,57,68,20],[117,59,68,57,"soft"],[117,63,68,20],[117,64,68,2],[118,0,69,1],[120,0,71,0],[120,11,71,9,"_isBaseType"],[120,22,71,0],[120,23,71,21,"baseName"],[120,31,71,0],[120,33,71,31,"type"],[120,37,71,0],[120,39,71,37,"soft"],[120,43,71,0],[120,45,71,43],[121,0,72,2],[121,8,72,6,"baseName"],[121,16,72,14],[121,21,72,19],[121,29,72,2],[121,31,72,29],[122,0,73,4],[122,13,73,11,"t"],[122,14,73,12],[122,15,73,13,"isStringTypeAnnotation"],[122,37,73,11],[122,38,73,36,"type"],[122,42,73,11],[122,43,73,4],[123,0,74,3],[123,5,72,2],[123,11,74,9],[123,15,74,13,"baseName"],[123,23,74,21],[123,28,74,26],[123,36,74,9],[123,38,74,36],[124,0,75,4],[124,13,75,11,"t"],[124,14,75,12],[124,15,75,13,"isNumberTypeAnnotation"],[124,37,75,11],[124,38,75,36,"type"],[124,42,75,11],[124,43,75,4],[125,0,76,3],[125,5,74,9],[125,11,76,9],[125,15,76,13,"baseName"],[125,23,76,21],[125,28,76,26],[125,37,76,9],[125,39,76,37],[126,0,77,4],[126,13,77,11,"t"],[126,14,77,12],[126,15,77,13,"isBooleanTypeAnnotation"],[126,38,77,11],[126,39,77,37,"type"],[126,43,77,11],[126,44,77,4],[127,0,78,3],[127,5,76,9],[127,11,78,9],[127,15,78,13,"baseName"],[127,23,78,21],[127,28,78,26],[127,33,78,9],[127,35,78,33],[128,0,79,4],[128,13,79,11,"t"],[128,14,79,12],[128,15,79,13,"isAnyTypeAnnotation"],[128,34,79,11],[128,35,79,33,"type"],[128,39,79,11],[128,40,79,4],[129,0,80,3],[129,5,78,9],[129,11,80,9],[129,15,80,13,"baseName"],[129,23,80,21],[129,28,80,26],[129,35,80,9],[129,37,80,35],[130,0,81,4],[130,13,81,11,"t"],[130,14,81,12],[130,15,81,13,"isMixedTypeAnnotation"],[130,36,81,11],[130,37,81,35,"type"],[130,41,81,11],[130,42,81,4],[131,0,82,3],[131,5,80,9],[131,11,82,9],[131,15,82,13,"baseName"],[131,23,82,21],[131,28,82,26],[131,35,82,9],[131,37,82,35],[132,0,83,4],[132,13,83,11,"t"],[132,14,83,12],[132,15,83,13,"isEmptyTypeAnnotation"],[132,36,83,11],[132,37,83,35,"type"],[132,41,83,11],[132,42,83,4],[133,0,84,3],[133,5,82,9],[133,11,84,9],[133,15,84,13,"baseName"],[133,23,84,21],[133,28,84,26],[133,34,84,9],[133,36,84,34],[134,0,85,4],[134,13,85,11,"t"],[134,14,85,12],[134,15,85,13,"isVoidTypeAnnotation"],[134,35,85,11],[134,36,85,34,"type"],[134,40,85,11],[134,41,85,4],[135,0,86,3],[135,5,84,9],[135,11,86,9],[136,0,87,4],[136,10,87,8,"soft"],[136,14,87,4],[136,16,87,14],[137,0,88,6],[137,15,88,13],[137,20,88,6],[138,0,89,5],[138,7,87,4],[138,13,89,11],[139,0,90,6],[139,14,90,12],[139,18,90,16,"Error"],[139,23,90,12],[139,47,90,43,"baseName"],[139,55,90,12],[139,56,90,6],[140,0,91,5],[141,0,92,3],[142,0,93,1],[144,0,95,0],[144,11,95,9,"couldBeBaseType"],[144,26,95,0],[144,27,95,25,"name"],[144,31,95,0],[144,33,95,31],[145,0,96,2],[145,8,96,8,"type"],[145,12,96,12],[145,15,96,15],[145,20,96,20,"getTypeAnnotation"],[145,37,96,15],[145,39,96,2],[146,0,97,2],[146,8,97,6,"t"],[146,9,97,7],[146,10,97,8,"isAnyTypeAnnotation"],[146,29,97,6],[146,30,97,28,"type"],[146,34,97,6],[146,35,97,2],[146,37,97,35],[146,44,97,42],[146,48,97,35],[148,0,99,2],[148,8,99,6,"t"],[148,9,99,7],[148,10,99,8,"isUnionTypeAnnotation"],[148,31,99,6],[148,32,99,30,"type"],[148,36,99,6],[148,37,99,2],[148,39,99,37],[149,0,100,4],[149,27,100,24,"type"],[149,31,100,28],[149,32,100,29,"types"],[149,37,100,4],[149,197,100,36],[150,0,100,36],[152,0,100,36],[153,0,100,36],[154,0,100,36],[155,0,100,36],[156,0,100,36],[157,0,100,36],[158,0,100,36],[159,0,100,36],[161,0,100,36],[161,12,100,15,"type2"],[161,17,100,36],[163,0,101,6],[163,12,101,10,"t"],[163,13,101,11],[163,14,101,12,"isAnyTypeAnnotation"],[163,33,101,10],[163,34,101,32,"type2"],[163,39,101,10],[163,44,101,42,"_isBaseType"],[163,55,101,53],[163,56,101,54,"name"],[163,60,101,53],[163,62,101,60,"type2"],[163,67,101,53],[163,69,101,67],[163,73,101,53],[163,74,101,6],[163,76,101,74],[164,0,102,8],[164,17,102,15],[164,21,102,8],[165,0,103,7],[166,0,104,5],[168,0,106,4],[168,13,106,11],[168,18,106,4],[169,0,107,3],[169,5,99,2],[169,11,107,9],[170,0,108,4],[170,13,108,11,"_isBaseType"],[170,24,108,22],[170,25,108,23,"name"],[170,29,108,22],[170,31,108,29,"type"],[170,35,108,22],[170,37,108,35],[170,41,108,22],[170,42,108,4],[171,0,109,3],[172,0,110,1],[174,0,112,0],[174,11,112,9,"baseTypeStrictlyMatches"],[174,34,112,0],[174,35,112,33,"right"],[174,40,112,0],[174,42,112,40],[175,0,113,2],[175,8,113,8,"left"],[175,12,113,12],[175,15,113,15],[175,20,113,20,"getTypeAnnotation"],[175,37,113,15],[175,39,113,2],[176,0,114,2,"right"],[176,4,114,2,"right"],[176,9,114,7],[176,12,114,10,"right"],[176,17,114,15],[176,18,114,16,"getTypeAnnotation"],[176,35,114,10],[176,37,114,2],[178,0,116,2],[178,8,116,6],[178,9,116,7,"t"],[178,10,116,8],[178,11,116,9,"isAnyTypeAnnotation"],[178,30,116,7],[178,31,116,29,"left"],[178,35,116,7],[178,36,116,6],[178,40,116,38,"t"],[178,41,116,39],[178,42,116,40,"isFlowBaseAnnotation"],[178,62,116,38],[178,63,116,61,"left"],[178,67,116,38],[178,68,116,2],[178,70,116,68],[179,0,117,4],[179,13,117,11,"right"],[179,18,117,16],[179,19,117,17,"type"],[179,23,117,11],[179,28,117,26,"left"],[179,32,117,30],[179,33,117,31,"type"],[179,37,117,4],[180,0,118,3],[181,0,119,1],[183,0,121,0],[183,11,121,9,"isGenericType"],[183,24,121,0],[183,25,121,23,"genericName"],[183,36,121,0],[183,38,121,36],[184,0,122,2],[184,8,122,8,"type"],[184,12,122,12],[184,15,122,15],[184,20,122,20,"getTypeAnnotation"],[184,37,122,15],[184,39,122,2],[185,0,123,2],[185,11,123,9,"t"],[185,12,123,10],[185,13,123,11,"isGenericTypeAnnotation"],[185,36,123,9],[185,37,123,35,"type"],[185,41,123,9],[185,46,123,44,"t"],[185,47,123,45],[185,48,123,46,"isIdentifier"],[185,60,123,44],[185,61,123,59,"type"],[185,65,123,63],[185,66,123,64,"id"],[185,68,123,44],[185,70,123,68],[186,0,124,4,"name"],[186,6,124,4,"name"],[186,10,124,8],[186,12,124,10,"genericName"],[187,0,123,68],[187,5,123,44],[187,6,123,2],[188,0,126,1]]},"type":"js/module"}]}