{"dependencies":[{"name":"./index","data":{"isAsync":false}},{"name":"@babel/types","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getOpposite = getOpposite;\n  exports.getCompletionRecords = getCompletionRecords;\n  exports.getSibling = getSibling;\n  exports.getPrevSibling = getPrevSibling;\n  exports.getNextSibling = getNextSibling;\n  exports.getAllNextSiblings = getAllNextSiblings;\n  exports.getAllPrevSiblings = getAllPrevSiblings;\n  exports.get = get;\n  exports._getKey = _getKey;\n  exports._getPattern = _getPattern;\n  exports.getBindingIdentifiers = getBindingIdentifiers;\n  exports.getOuterBindingIdentifiers = getOuterBindingIdentifiers;\n  exports.getBindingIdentifierPaths = getBindingIdentifierPaths;\n  exports.getOuterBindingIdentifierPaths = getOuterBindingIdentifierPaths;\n\n  var _index = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0], \"./index\"));\n\n  var t = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1], \"@babel/types\"));\n\n  function _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n\n    _getRequireWildcardCache = function _getRequireWildcardCache() {\n      return cache;\n    };\n\n    return cache;\n  }\n\n  function _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n      return obj;\n    }\n\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n      return {\n        default: obj\n      };\n    }\n\n    var cache = _getRequireWildcardCache();\n\n    if (cache && cache.has(obj)) {\n      return cache.get(obj);\n    }\n\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n    for (var key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n        if (desc && (desc.get || desc.set)) {\n          Object.defineProperty(newObj, key, desc);\n        } else {\n          newObj[key] = obj[key];\n        }\n      }\n    }\n\n    newObj.default = obj;\n\n    if (cache) {\n      cache.set(obj, newObj);\n    }\n\n    return newObj;\n  }\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      default: obj\n    };\n  }\n\n  function getOpposite() {\n    if (this.key === \"left\") {\n      return this.getSibling(\"right\");\n    } else if (this.key === \"right\") {\n      return this.getSibling(\"left\");\n    }\n  }\n\n  function addCompletionRecords(path, paths) {\n    if (path) return paths.concat(path.getCompletionRecords());\n    return paths;\n  }\n\n  function completionRecordForSwitch(cases, paths) {\n    var isLastCaseWithConsequent = true;\n\n    for (var i = cases.length - 1; i >= 0; i--) {\n      var switchCase = cases[i];\n      var consequent = switchCase.get(\"consequent\");\n      var breakStatement = void 0;\n\n      findBreak: for (var _iterator = consequent, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"]();;) {\n        var _ref;\n\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref = _i.value;\n        }\n\n        var statement = _ref;\n\n        if (statement.isBlockStatement()) {\n          for (var _iterator2 = statement.get(\"body\"), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"]();;) {\n            var _ref2;\n\n            if (_isArray2) {\n              if (_i2 >= _iterator2.length) break;\n              _ref2 = _iterator2[_i2++];\n            } else {\n              _i2 = _iterator2.next();\n              if (_i2.done) break;\n              _ref2 = _i2.value;\n            }\n\n            var _statementInBlock = _ref2;\n\n            if (_statementInBlock.isBreakStatement()) {\n              breakStatement = _statementInBlock;\n              break findBreak;\n            }\n          }\n        } else if (statement.isBreakStatement()) {\n          breakStatement = statement;\n          break;\n        }\n      }\n\n      if (breakStatement) {\n        while (breakStatement.key === 0 && breakStatement.parentPath.isBlockStatement()) {\n          breakStatement = breakStatement.parentPath;\n        }\n\n        var prevSibling = breakStatement.getPrevSibling();\n\n        if (breakStatement.key > 0 && (prevSibling.isExpressionStatement() || prevSibling.isBlockStatement())) {\n          paths = addCompletionRecords(prevSibling, paths);\n          breakStatement.remove();\n        } else {\n          breakStatement.replaceWith(breakStatement.scope.buildUndefinedNode());\n          paths = addCompletionRecords(breakStatement, paths);\n        }\n      } else if (isLastCaseWithConsequent) {\n        (function () {\n          var statementFinder = function statementFinder(statement) {\n            return !statement.isBlockStatement() || statement.get(\"body\").some(statementFinder);\n          };\n\n          var hasConsequent = consequent.some(statementFinder);\n\n          if (hasConsequent) {\n            paths = addCompletionRecords(consequent[consequent.length - 1], paths);\n            isLastCaseWithConsequent = false;\n          }\n        })();\n      }\n    }\n\n    return paths;\n  }\n\n  function getCompletionRecords() {\n    var paths = [];\n\n    if (this.isIfStatement()) {\n      paths = addCompletionRecords(this.get(\"consequent\"), paths);\n      paths = addCompletionRecords(this.get(\"alternate\"), paths);\n    } else if (this.isDoExpression() || this.isFor() || this.isWhile()) {\n      paths = addCompletionRecords(this.get(\"body\"), paths);\n    } else if (this.isProgram() || this.isBlockStatement()) {\n      paths = addCompletionRecords(this.get(\"body\").pop(), paths);\n    } else if (this.isFunction()) {\n      return this.get(\"body\").getCompletionRecords();\n    } else if (this.isTryStatement()) {\n      paths = addCompletionRecords(this.get(\"block\"), paths);\n      paths = addCompletionRecords(this.get(\"handler\"), paths);\n    } else if (this.isCatchClause()) {\n      paths = addCompletionRecords(this.get(\"body\"), paths);\n    } else if (this.isSwitchStatement()) {\n      paths = completionRecordForSwitch(this.get(\"cases\"), paths);\n    } else {\n      paths.push(this);\n    }\n\n    return paths;\n  }\n\n  function getSibling(key) {\n    return _index.default.get({\n      parentPath: this.parentPath,\n      parent: this.parent,\n      container: this.container,\n      listKey: this.listKey,\n      key: key\n    });\n  }\n\n  function getPrevSibling() {\n    return this.getSibling(this.key - 1);\n  }\n\n  function getNextSibling() {\n    return this.getSibling(this.key + 1);\n  }\n\n  function getAllNextSiblings() {\n    var _key = this.key;\n    var sibling = this.getSibling(++_key);\n    var siblings = [];\n\n    while (sibling.node) {\n      siblings.push(sibling);\n      sibling = this.getSibling(++_key);\n    }\n\n    return siblings;\n  }\n\n  function getAllPrevSiblings() {\n    var _key = this.key;\n    var sibling = this.getSibling(--_key);\n    var siblings = [];\n\n    while (sibling.node) {\n      siblings.push(sibling);\n      sibling = this.getSibling(--_key);\n    }\n\n    return siblings;\n  }\n\n  function get(key, context) {\n    if (context === true) context = this.context;\n    var parts = key.split(\".\");\n\n    if (parts.length === 1) {\n      return this._getKey(key, context);\n    } else {\n      return this._getPattern(parts, context);\n    }\n  }\n\n  function _getKey(key, context) {\n    var _this = this;\n\n    var node = this.node;\n    var container = node[key];\n\n    if (Array.isArray(container)) {\n      return container.map(function (_, i) {\n        return _index.default.get({\n          listKey: key,\n          parentPath: _this,\n          parent: node,\n          container: container,\n          key: i\n        }).setContext(context);\n      });\n    } else {\n      return _index.default.get({\n        parentPath: this,\n        parent: node,\n        container: node,\n        key: key\n      }).setContext(context);\n    }\n  }\n\n  function _getPattern(parts, context) {\n    var path = this;\n\n    for (var _iterator3 = parts, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"]();;) {\n      var _ref3;\n\n      if (_isArray3) {\n        if (_i3 >= _iterator3.length) break;\n        _ref3 = _iterator3[_i3++];\n      } else {\n        _i3 = _iterator3.next();\n        if (_i3.done) break;\n        _ref3 = _i3.value;\n      }\n\n      var _part = _ref3;\n\n      if (_part === \".\") {\n        path = path.parentPath;\n      } else {\n        if (Array.isArray(path)) {\n          path = path[_part];\n        } else {\n          path = path.get(_part, context);\n        }\n      }\n    }\n\n    return path;\n  }\n\n  function getBindingIdentifiers(duplicates) {\n    return t.getBindingIdentifiers(this.node, duplicates);\n  }\n\n  function getOuterBindingIdentifiers(duplicates) {\n    return t.getOuterBindingIdentifiers(this.node, duplicates);\n  }\n\n  function getBindingIdentifierPaths() {\n    var duplicates = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var outerOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var path = this;\n    var search = [].concat(path);\n    var ids = Object.create(null);\n\n    while (search.length) {\n      var id = search.shift();\n      if (!id) continue;\n      if (!id.node) continue;\n      var keys = t.getBindingIdentifiers.keys[id.node.type];\n\n      if (id.isIdentifier()) {\n        if (duplicates) {\n          var _ids = ids[id.node.name] = ids[id.node.name] || [];\n\n          _ids.push(id);\n        } else {\n          ids[id.node.name] = id;\n        }\n\n        continue;\n      }\n\n      if (id.isExportDeclaration()) {\n        var declaration = id.get(\"declaration\");\n\n        if (declaration.isDeclaration()) {\n          search.push(declaration);\n        }\n\n        continue;\n      }\n\n      if (outerOnly) {\n        if (id.isFunctionDeclaration()) {\n          search.push(id.get(\"id\"));\n          continue;\n        }\n\n        if (id.isFunctionExpression()) {\n          continue;\n        }\n      }\n\n      if (keys) {\n        for (var i = 0; i < keys.length; i++) {\n          var key = keys[i];\n          var child = id.get(key);\n\n          if (Array.isArray(child) || child.node) {\n            search = search.concat(child);\n          }\n        }\n      }\n    }\n\n    return ids;\n  }\n\n  function getOuterBindingIdentifierPaths(duplicates) {\n    return this.getBindingIdentifierPaths(duplicates, true);\n  }\n});","map":[[2,0,1,0],[4,0,3,0,"Object"],[4,2,3,0,"Object"],[4,8,3,6],[4,9,3,7,"defineProperty"],[4,23,3,0],[4,24,3,22,"exports"],[4,31,3,0],[4,33,3,31],[4,45,3,0],[4,47,3,45],[5,0,4,2,"value"],[5,4,4,2,"value"],[5,9,4,7],[5,11,4,9],[6,0,3,45],[6,3,3,0],[7,0,6,0,"exports"],[7,2,6,0,"exports"],[7,9,6,7],[7,10,6,8,"getOpposite"],[7,21,6,0],[7,24,6,22,"getOpposite"],[7,35,6,0],[8,0,7,0,"exports"],[8,2,7,0,"exports"],[8,9,7,7],[8,10,7,8,"getCompletionRecords"],[8,30,7,0],[8,33,7,31,"getCompletionRecords"],[8,53,7,0],[9,0,8,0,"exports"],[9,2,8,0,"exports"],[9,9,8,7],[9,10,8,8,"getSibling"],[9,20,8,0],[9,23,8,21,"getSibling"],[9,33,8,0],[10,0,9,0,"exports"],[10,2,9,0,"exports"],[10,9,9,7],[10,10,9,8,"getPrevSibling"],[10,24,9,0],[10,27,9,25,"getPrevSibling"],[10,41,9,0],[11,0,10,0,"exports"],[11,2,10,0,"exports"],[11,9,10,7],[11,10,10,8,"getNextSibling"],[11,24,10,0],[11,27,10,25,"getNextSibling"],[11,41,10,0],[12,0,11,0,"exports"],[12,2,11,0,"exports"],[12,9,11,7],[12,10,11,8,"getAllNextSiblings"],[12,28,11,0],[12,31,11,29,"getAllNextSiblings"],[12,49,11,0],[13,0,12,0,"exports"],[13,2,12,0,"exports"],[13,9,12,7],[13,10,12,8,"getAllPrevSiblings"],[13,28,12,0],[13,31,12,29,"getAllPrevSiblings"],[13,49,12,0],[14,0,13,0,"exports"],[14,2,13,0,"exports"],[14,9,13,7],[14,10,13,8,"get"],[14,13,13,0],[14,16,13,14,"get"],[14,19,13,0],[15,0,14,0,"exports"],[15,2,14,0,"exports"],[15,9,14,7],[15,10,14,8,"_getKey"],[15,17,14,0],[15,20,14,18,"_getKey"],[15,27,14,0],[16,0,15,0,"exports"],[16,2,15,0,"exports"],[16,9,15,7],[16,10,15,8,"_getPattern"],[16,21,15,0],[16,24,15,22,"_getPattern"],[16,35,15,0],[17,0,16,0,"exports"],[17,2,16,0,"exports"],[17,9,16,7],[17,10,16,8,"getBindingIdentifiers"],[17,31,16,0],[17,34,16,32,"getBindingIdentifiers"],[17,55,16,0],[18,0,17,0,"exports"],[18,2,17,0,"exports"],[18,9,17,7],[18,10,17,8,"getOuterBindingIdentifiers"],[18,36,17,0],[18,39,17,37,"getOuterBindingIdentifiers"],[18,65,17,0],[19,0,18,0,"exports"],[19,2,18,0,"exports"],[19,9,18,7],[19,10,18,8,"getBindingIdentifierPaths"],[19,35,18,0],[19,38,18,36,"getBindingIdentifierPaths"],[19,63,18,0],[20,0,19,0,"exports"],[20,2,19,0,"exports"],[20,9,19,7],[20,10,19,8,"getOuterBindingIdentifierPaths"],[20,40,19,0],[20,43,19,41,"getOuterBindingIdentifierPaths"],[20,73,19,0],[22,0,21,0],[22,6,21,4,"_index"],[22,12,21,10],[22,15,21,13,"_interopRequireDefault"],[22,37,21,35],[22,38,21,36,"require"],[22,49,21,43],[22,79,21,35],[22,80,21,0],[24,0,23,0],[24,6,23,4,"t"],[24,7,23,5],[24,10,23,8,"_interopRequireWildcard"],[24,33,23,31],[24,34,23,32,"require"],[24,45,23,39],[24,80,23,31],[24,81,23,0],[26,0,25,0],[26,11,25,9,"_getRequireWildcardCache"],[26,35,25,0],[26,38,25,36],[27,0,25,38],[27,8,25,42],[27,15,25,49,"WeakMap"],[27,22,25,42],[27,27,25,61],[27,37,25,38],[27,39,25,73],[27,46,25,80],[27,50,25,73],[28,0,25,86],[28,8,25,90,"cache"],[28,13,25,95],[28,16,25,98],[28,20,25,102,"WeakMap"],[28,27,25,98],[28,29,25,86],[30,0,25,113,"_getRequireWildcardCache"],[30,4,25,113,"_getRequireWildcardCache"],[30,28,25,137],[30,31,25,140],[30,67,25,152],[31,0,25,154],[31,13,25,161,"cache"],[31,18,25,154],[32,0,25,169],[32,5,25,113],[34,0,25,171],[34,11,25,178,"cache"],[34,16,25,171],[35,0,25,186],[37,0,27,0],[37,11,27,9,"_interopRequireWildcard"],[37,34,27,0],[37,35,27,33,"obj"],[37,38,27,0],[37,40,27,38],[38,0,27,40],[38,8,27,44,"obj"],[38,11,27,47],[38,15,27,51,"obj"],[38,18,27,54],[38,19,27,55,"__esModule"],[38,29,27,40],[38,31,27,67],[39,0,27,69],[39,13,27,76,"obj"],[39,16,27,69],[40,0,27,82],[42,0,27,83],[42,8,27,87,"obj"],[42,11,27,90],[42,16,27,95],[42,20,27,87],[42,24,27,103],[42,31,27,110,"obj"],[42,34,27,103],[42,39,27,118],[42,47,27,103],[42,51,27,130],[42,58,27,137,"obj"],[42,61,27,130],[42,66,27,145],[42,76,27,83],[42,78,27,157],[43,0,27,159],[43,13,27,166],[44,0,27,168,"default"],[44,8,27,168,"default"],[44,15,27,175],[44,17,27,177,"obj"],[45,0,27,166],[45,7,27,159],[46,0,27,185],[48,0,27,186],[48,8,27,190,"cache"],[48,13,27,195],[48,16,27,198,"_getRequireWildcardCache"],[48,40,27,222],[48,42,27,186],[50,0,27,226],[50,8,27,230,"cache"],[50,13,27,235],[50,17,27,239,"cache"],[50,22,27,244],[50,23,27,245,"has"],[50,26,27,239],[50,27,27,249,"obj"],[50,30,27,239],[50,31,27,226],[50,33,27,255],[51,0,27,257],[51,13,27,264,"cache"],[51,18,27,269],[51,19,27,270,"get"],[51,22,27,264],[51,23,27,274,"obj"],[51,26,27,264],[51,27,27,257],[52,0,27,281],[54,0,27,282],[54,8,27,286,"newObj"],[54,14,27,292],[54,17,27,295],[54,19,27,282],[55,0,27,299],[55,8,27,303,"hasPropertyDescriptor"],[55,29,27,324],[55,32,27,327,"Object"],[55,38,27,333],[55,39,27,334,"defineProperty"],[55,53,27,327],[55,57,27,352,"Object"],[55,63,27,358],[55,64,27,359,"getOwnPropertyDescriptor"],[55,88,27,299],[57,0,27,385],[57,9,27,390],[57,13,27,394,"key"],[57,16,27,385],[57,20,27,401,"obj"],[57,23,27,385],[57,25,27,406],[58,0,27,408],[58,10,27,412,"Object"],[58,16,27,418],[58,17,27,419,"prototype"],[58,26,27,412],[58,27,27,429,"hasOwnProperty"],[58,41,27,412],[58,42,27,444,"call"],[58,46,27,412],[58,47,27,449,"obj"],[58,50,27,412],[58,52,27,454,"key"],[58,55,27,412],[58,56,27,408],[58,58,27,460],[59,0,27,462],[59,12,27,466,"desc"],[59,16,27,470],[59,19,27,473,"hasPropertyDescriptor"],[59,40,27,494],[59,43,27,497,"Object"],[59,49,27,503],[59,50,27,504,"getOwnPropertyDescriptor"],[59,74,27,497],[59,75,27,529,"obj"],[59,78,27,497],[59,80,27,534,"key"],[59,83,27,497],[59,84,27,494],[59,87,27,541],[59,91,27,462],[61,0,27,547],[61,12,27,551,"desc"],[61,16,27,555],[61,21,27,560,"desc"],[61,25,27,564],[61,26,27,565,"get"],[61,29,27,560],[61,33,27,572,"desc"],[61,37,27,576],[61,38,27,577,"set"],[61,41,27,555],[61,42,27,547],[61,44,27,583],[62,0,27,585,"Object"],[62,10,27,585,"Object"],[62,16,27,591],[62,17,27,592,"defineProperty"],[62,31,27,585],[62,32,27,607,"newObj"],[62,38,27,585],[62,40,27,615,"key"],[62,43,27,585],[62,45,27,620,"desc"],[62,49,27,585],[63,0,27,628],[63,9,27,547],[63,15,27,634],[64,0,27,636,"newObj"],[64,10,27,636,"newObj"],[64,16,27,642],[64,17,27,643,"key"],[64,20,27,642],[64,21,27,636],[64,24,27,650,"obj"],[64,27,27,653],[64,28,27,654,"key"],[64,31,27,653],[64,32,27,636],[65,0,27,661],[66,0,27,663],[67,0,27,665],[69,0,27,666,"newObj"],[69,4,27,666,"newObj"],[69,10,27,672],[69,11,27,673,"default"],[69,18,27,666],[69,21,27,683,"obj"],[69,24,27,666],[71,0,27,688],[71,8,27,692,"cache"],[71,13,27,688],[71,15,27,699],[72,0,27,701,"cache"],[72,6,27,701,"cache"],[72,11,27,706],[72,12,27,707,"set"],[72,15,27,701],[72,16,27,711,"obj"],[72,19,27,701],[72,21,27,716,"newObj"],[72,27,27,701],[73,0,27,726],[75,0,27,727],[75,11,27,734,"newObj"],[75,17,27,727],[76,0,27,743],[78,0,29,0],[78,11,29,9,"_interopRequireDefault"],[78,33,29,0],[78,34,29,32,"obj"],[78,37,29,0],[78,39,29,37],[79,0,29,39],[79,11,29,46,"obj"],[79,14,29,49],[79,18,29,53,"obj"],[79,21,29,56],[79,22,29,57,"__esModule"],[79,32,29,46],[79,35,29,70,"obj"],[79,38,29,46],[79,41,29,76],[80,0,29,78,"default"],[80,6,29,78,"default"],[80,13,29,85],[80,15,29,87,"obj"],[81,0,29,76],[81,5,29,39],[82,0,29,95],[84,0,31,0],[84,11,31,9,"getOpposite"],[84,22,31,0],[84,25,31,23],[85,0,32,2],[85,8,32,6],[85,13,32,11,"key"],[85,16,32,6],[85,21,32,19],[85,27,32,2],[85,29,32,27],[86,0,33,4],[86,13,33,11],[86,18,33,16,"getSibling"],[86,28,33,11],[86,29,33,27],[86,36,33,11],[86,37,33,4],[87,0,34,3],[87,5,32,2],[87,11,34,9],[87,15,34,13],[87,20,34,18,"key"],[87,23,34,13],[87,28,34,26],[87,35,34,9],[87,37,34,35],[88,0,35,4],[88,13,35,11],[88,18,35,16,"getSibling"],[88,28,35,11],[88,29,35,27],[88,35,35,11],[88,36,35,4],[89,0,36,3],[90,0,37,1],[92,0,39,0],[92,11,39,9,"addCompletionRecords"],[92,31,39,0],[92,32,39,30,"path"],[92,36,39,0],[92,38,39,36,"paths"],[92,43,39,0],[92,45,39,43],[93,0,40,2],[93,8,40,6,"path"],[93,12,40,2],[93,14,40,12],[93,21,40,19,"paths"],[93,26,40,24],[93,27,40,25,"concat"],[93,33,40,19],[93,34,40,32,"path"],[93,38,40,36],[93,39,40,37,"getCompletionRecords"],[93,59,40,32],[93,61,40,19],[93,62,40,12],[94,0,41,2],[94,11,41,9,"paths"],[94,16,41,2],[95,0,42,1],[97,0,44,0],[97,11,44,9,"completionRecordForSwitch"],[97,36,44,0],[97,37,44,35,"cases"],[97,42,44,0],[97,44,44,42,"paths"],[97,49,44,0],[97,51,44,49],[98,0,45,2],[98,8,45,6,"isLastCaseWithConsequent"],[98,32,45,30],[98,35,45,33],[98,39,45,2],[100,0,47,2],[100,9,47,7],[100,13,47,11,"i"],[100,14,47,12],[100,17,47,15,"cases"],[100,22,47,20],[100,23,47,21,"length"],[100,29,47,15],[100,32,47,30],[100,33,47,2],[100,35,47,33,"i"],[100,36,47,34],[100,40,47,38],[100,41,47,2],[100,43,47,41,"i"],[100,44,47,42],[100,46,47,2],[100,48,47,46],[101,0,48,4],[101,10,48,10,"switchCase"],[101,20,48,20],[101,23,48,23,"cases"],[101,28,48,28],[101,29,48,29,"i"],[101,30,48,28],[101,31,48,4],[102,0,49,4],[102,10,49,10,"consequent"],[102,20,49,20],[102,23,49,23,"switchCase"],[102,33,49,33],[102,34,49,34,"get"],[102,37,49,23],[102,38,49,38],[102,50,49,23],[102,51,49,4],[103,0,50,4],[103,10,50,8,"breakStatement"],[103,24,50,22],[103,33,50,4],[105,0,52,4,"findBreak"],[105,6,52,4,"findBreak"],[105,15,47,46],[105,17,52,15],[105,38,52,39,"consequent"],[105,48,52,15],[105,208,52,51],[106,0,52,51],[108,0,52,51],[109,0,52,51],[110,0,52,51],[111,0,52,51],[112,0,52,51],[113,0,52,51],[114,0,52,51],[115,0,52,51],[117,0,52,51],[117,12,52,26,"statement"],[117,21,52,51],[119,0,53,6],[119,12,53,10,"statement"],[119,21,53,19],[119,22,53,20,"isBlockStatement"],[119,38,53,10],[119,40,53,6],[119,42,53,40],[120,0,54,8],[120,32,54,39,"statement"],[120,41,54,48],[120,42,54,49,"get"],[120,45,54,39],[120,46,54,53],[120,52,54,39],[120,53,54,8],[120,220,54,62],[121,0,54,62],[123,0,54,62],[124,0,54,62],[125,0,54,62],[126,0,54,62],[127,0,54,62],[128,0,54,62],[129,0,54,62],[130,0,54,62],[132,0,54,62],[132,16,54,19,"statementInBlock"],[132,33,54,62],[134,0,55,10],[134,16,55,14,"statementInBlock"],[134,33,55,30],[134,34,55,31,"isBreakStatement"],[134,50,55,14],[134,52,55,10],[134,54,55,51],[135,0,56,12,"breakStatement"],[135,14,56,12,"breakStatement"],[135,28,56,26],[135,31,56,29,"statementInBlock"],[135,48,56,12],[136,0,57,12],[136,20,57,18,"findBreak"],[136,29,57,12],[137,0,58,11],[138,0,59,9],[139,0,60,7],[139,9,53,6],[139,15,60,13],[139,19,60,17,"statement"],[139,28,60,26],[139,29,60,27,"isBreakStatement"],[139,45,60,17],[139,47,60,13],[139,49,60,47],[140,0,61,8,"breakStatement"],[140,10,61,8,"breakStatement"],[140,24,61,22],[140,27,61,25,"statement"],[140,36,61,8],[141,0,62,8],[142,0,63,7],[143,0,64,5],[145,0,66,4],[145,10,66,8,"breakStatement"],[145,24,66,4],[145,26,66,24],[146,0,67,6],[146,15,67,13,"breakStatement"],[146,29,67,27],[146,30,67,28,"key"],[146,33,67,13],[146,38,67,36],[146,39,67,13],[146,43,67,41,"breakStatement"],[146,57,67,55],[146,58,67,56,"parentPath"],[146,68,67,41],[146,69,67,67,"isBlockStatement"],[146,85,67,41],[146,87,67,6],[146,89,67,87],[147,0,68,8,"breakStatement"],[147,10,68,8,"breakStatement"],[147,24,68,22],[147,27,68,25,"breakStatement"],[147,41,68,39],[147,42,68,40,"parentPath"],[147,52,68,8],[148,0,69,7],[150,0,71,6],[150,12,71,12,"prevSibling"],[150,23,71,23],[150,26,71,26,"breakStatement"],[150,40,71,40],[150,41,71,41,"getPrevSibling"],[150,55,71,26],[150,57,71,6],[152,0,73,6],[152,12,73,10,"breakStatement"],[152,26,73,24],[152,27,73,25,"key"],[152,30,73,10],[152,33,73,31],[152,34,73,10],[152,39,73,37,"prevSibling"],[152,50,73,48],[152,51,73,49,"isExpressionStatement"],[152,72,73,37],[152,78,73,76,"prevSibling"],[152,89,73,87],[152,90,73,88,"isBlockStatement"],[152,106,73,76],[152,108,73,10],[152,109,73,6],[152,111,73,109],[153,0,74,8,"paths"],[153,10,74,8,"paths"],[153,15,74,13],[153,18,74,16,"addCompletionRecords"],[153,38,74,36],[153,39,74,37,"prevSibling"],[153,50,74,36],[153,52,74,50,"paths"],[153,57,74,36],[153,58,74,8],[154,0,75,8,"breakStatement"],[154,10,75,8,"breakStatement"],[154,24,75,22],[154,25,75,23,"remove"],[154,31,75,8],[155,0,76,7],[155,9,73,6],[155,15,76,13],[156,0,77,8,"breakStatement"],[156,10,77,8,"breakStatement"],[156,24,77,22],[156,25,77,23,"replaceWith"],[156,36,77,8],[156,37,77,35,"breakStatement"],[156,51,77,49],[156,52,77,50,"scope"],[156,57,77,35],[156,58,77,56,"buildUndefinedNode"],[156,76,77,35],[156,78,77,8],[157,0,78,8,"paths"],[157,10,78,8,"paths"],[157,15,78,13],[157,18,78,16,"addCompletionRecords"],[157,38,78,36],[157,39,78,37,"breakStatement"],[157,53,78,36],[157,55,78,53,"paths"],[157,60,78,36],[157,61,78,8],[158,0,79,7],[159,0,80,5],[159,7,66,4],[159,13,80,11],[159,17,80,15,"isLastCaseWithConsequent"],[159,41,80,11],[159,43,80,41],[160,0,80,41],[161,0,81,6],[161,14,81,12,"statementFinder"],[161,29,81,27],[161,32,81,30],[161,41,81,12,"statementFinder"],[161,56,81,30],[161,57,81,30,"statement"],[161,66,81,39],[162,0,81,39],[162,19,81,43],[162,20,81,44,"statement"],[162,29,81,53],[162,30,81,54,"isBlockStatement"],[162,46,81,44],[162,48,81,43],[162,52,81,76,"statement"],[162,61,81,85],[162,62,81,86,"get"],[162,65,81,76],[162,66,81,90],[162,72,81,76],[162,74,81,98,"some"],[162,78,81,76],[162,79,81,103,"statementFinder"],[162,94,81,76],[162,95,81,39],[163,0,81,39],[163,11,81,6],[165,0,83,6],[165,14,83,12,"hasConsequent"],[165,27,83,25],[165,30,83,28,"consequent"],[165,40,83,38],[165,41,83,39,"some"],[165,45,83,28],[165,46,83,44,"statementFinder"],[165,61,83,28],[165,62,83,6],[167,0,85,6],[167,14,85,10,"hasConsequent"],[167,27,85,6],[167,29,85,25],[168,0,86,8,"paths"],[168,12,86,8,"paths"],[168,17,86,13],[168,20,86,16,"addCompletionRecords"],[168,40,86,36],[168,41,86,37,"consequent"],[168,51,86,47],[168,52,86,48,"consequent"],[168,62,86,58],[168,63,86,59,"length"],[168,69,86,48],[168,72,86,68],[168,73,86,47],[168,74,86,36],[168,76,86,72,"paths"],[168,81,86,36],[168,82,86,8],[169,0,87,8,"isLastCaseWithConsequent"],[169,12,87,8,"isLastCaseWithConsequent"],[169,36,87,32],[169,39,87,35],[169,44,87,8],[170,0,88,7],[171,0,80,41],[172,0,89,5],[173,0,90,3],[175,0,92,2],[175,11,92,9,"paths"],[175,16,92,2],[176,0,93,1],[178,0,95,0],[178,11,95,9,"getCompletionRecords"],[178,31,95,0],[178,34,95,32],[179,0,96,2],[179,8,96,6,"paths"],[179,13,96,11],[179,16,96,14],[179,18,96,2],[181,0,98,2],[181,8,98,6],[181,13,98,11,"isIfStatement"],[181,26,98,6],[181,28,98,2],[181,30,98,28],[182,0,99,4,"paths"],[182,6,99,4,"paths"],[182,11,99,9],[182,14,99,12,"addCompletionRecords"],[182,34,99,32],[182,35,99,33],[182,40,99,38,"get"],[182,43,99,33],[182,44,99,42],[182,56,99,33],[182,57,99,32],[182,59,99,57,"paths"],[182,64,99,32],[182,65,99,4],[183,0,100,4,"paths"],[183,6,100,4,"paths"],[183,11,100,9],[183,14,100,12,"addCompletionRecords"],[183,34,100,32],[183,35,100,33],[183,40,100,38,"get"],[183,43,100,33],[183,44,100,42],[183,55,100,33],[183,56,100,32],[183,58,100,56,"paths"],[183,63,100,32],[183,64,100,4],[184,0,101,3],[184,5,98,2],[184,11,101,9],[184,15,101,13],[184,20,101,18,"isDoExpression"],[184,34,101,13],[184,40,101,38],[184,45,101,43,"isFor"],[184,50,101,38],[184,52,101,13],[184,56,101,54],[184,61,101,59,"isWhile"],[184,68,101,54],[184,70,101,9],[184,72,101,70],[185,0,102,4,"paths"],[185,6,102,4,"paths"],[185,11,102,9],[185,14,102,12,"addCompletionRecords"],[185,34,102,32],[185,35,102,33],[185,40,102,38,"get"],[185,43,102,33],[185,44,102,42],[185,50,102,33],[185,51,102,32],[185,53,102,51,"paths"],[185,58,102,32],[185,59,102,4],[186,0,103,3],[186,5,101,9],[186,11,103,9],[186,15,103,13],[186,20,103,18,"isProgram"],[186,29,103,13],[186,35,103,33],[186,40,103,38,"isBlockStatement"],[186,56,103,33],[186,58,103,9],[186,60,103,58],[187,0,104,4,"paths"],[187,6,104,4,"paths"],[187,11,104,9],[187,14,104,12,"addCompletionRecords"],[187,34,104,32],[187,35,104,33],[187,40,104,38,"get"],[187,43,104,33],[187,44,104,42],[187,50,104,33],[187,52,104,50,"pop"],[187,55,104,33],[187,57,104,32],[187,59,104,57,"paths"],[187,64,104,32],[187,65,104,4],[188,0,105,3],[188,5,103,9],[188,11,105,9],[188,15,105,13],[188,20,105,18,"isFunction"],[188,30,105,13],[188,32,105,9],[188,34,105,32],[189,0,106,4],[189,13,106,11],[189,18,106,16,"get"],[189,21,106,11],[189,22,106,20],[189,28,106,11],[189,30,106,28,"getCompletionRecords"],[189,50,106,11],[189,52,106,4],[190,0,107,3],[190,5,105,9],[190,11,107,9],[190,15,107,13],[190,20,107,18,"isTryStatement"],[190,34,107,13],[190,36,107,9],[190,38,107,36],[191,0,108,4,"paths"],[191,6,108,4,"paths"],[191,11,108,9],[191,14,108,12,"addCompletionRecords"],[191,34,108,32],[191,35,108,33],[191,40,108,38,"get"],[191,43,108,33],[191,44,108,42],[191,51,108,33],[191,52,108,32],[191,54,108,52,"paths"],[191,59,108,32],[191,60,108,4],[192,0,109,4,"paths"],[192,6,109,4,"paths"],[192,11,109,9],[192,14,109,12,"addCompletionRecords"],[192,34,109,32],[192,35,109,33],[192,40,109,38,"get"],[192,43,109,33],[192,44,109,42],[192,53,109,33],[192,54,109,32],[192,56,109,54,"paths"],[192,61,109,32],[192,62,109,4],[193,0,110,3],[193,5,107,9],[193,11,110,9],[193,15,110,13],[193,20,110,18,"isCatchClause"],[193,33,110,13],[193,35,110,9],[193,37,110,35],[194,0,111,4,"paths"],[194,6,111,4,"paths"],[194,11,111,9],[194,14,111,12,"addCompletionRecords"],[194,34,111,32],[194,35,111,33],[194,40,111,38,"get"],[194,43,111,33],[194,44,111,42],[194,50,111,33],[194,51,111,32],[194,53,111,51,"paths"],[194,58,111,32],[194,59,111,4],[195,0,112,3],[195,5,110,9],[195,11,112,9],[195,15,112,13],[195,20,112,18,"isSwitchStatement"],[195,37,112,13],[195,39,112,9],[195,41,112,39],[196,0,113,4,"paths"],[196,6,113,4,"paths"],[196,11,113,9],[196,14,113,12,"completionRecordForSwitch"],[196,39,113,37],[196,40,113,38],[196,45,113,43,"get"],[196,48,113,38],[196,49,113,47],[196,56,113,38],[196,57,113,37],[196,59,113,57,"paths"],[196,64,113,37],[196,65,113,4],[197,0,114,3],[197,5,112,9],[197,11,114,9],[198,0,115,4,"paths"],[198,6,115,4,"paths"],[198,11,115,9],[198,12,115,10,"push"],[198,16,115,4],[198,17,115,15],[198,21,115,4],[199,0,116,3],[201,0,118,2],[201,11,118,9,"paths"],[201,16,118,2],[202,0,119,1],[204,0,121,0],[204,11,121,9,"getSibling"],[204,21,121,0],[204,22,121,20,"key"],[204,25,121,0],[204,27,121,25],[205,0,122,2],[205,11,122,9,"_index"],[205,17,122,15],[205,18,122,16,"default"],[205,25,122,9],[205,26,122,24,"get"],[205,29,122,9],[205,30,122,28],[206,0,123,4,"parentPath"],[206,6,123,4,"parentPath"],[206,16,123,14],[206,18,123,16],[206,23,123,21,"parentPath"],[206,33,122,28],[207,0,124,4,"parent"],[207,6,124,4,"parent"],[207,12,124,10],[207,14,124,12],[207,19,124,17,"parent"],[207,25,122,28],[208,0,125,4,"container"],[208,6,125,4,"container"],[208,15,125,13],[208,17,125,15],[208,22,125,20,"container"],[208,31,122,28],[209,0,126,4,"listKey"],[209,6,126,4,"listKey"],[209,13,126,11],[209,15,126,13],[209,20,126,18,"listKey"],[209,27,122,28],[210,0,127,4,"key"],[210,6,127,4,"key"],[210,9,127,7],[210,11,127,9,"key"],[211,0,122,28],[211,5,122,9],[211,6,122,2],[212,0,129,1],[214,0,131,0],[214,11,131,9,"getPrevSibling"],[214,25,131,0],[214,28,131,26],[215,0,132,2],[215,11,132,9],[215,16,132,14,"getSibling"],[215,26,132,9],[215,27,132,25],[215,32,132,30,"key"],[215,35,132,25],[215,38,132,36],[215,39,132,9],[215,40,132,2],[216,0,133,1],[218,0,135,0],[218,11,135,9,"getNextSibling"],[218,25,135,0],[218,28,135,26],[219,0,136,2],[219,11,136,9],[219,16,136,14,"getSibling"],[219,26,136,9],[219,27,136,25],[219,32,136,30,"key"],[219,35,136,25],[219,38,136,36],[219,39,136,9],[219,40,136,2],[220,0,137,1],[222,0,139,0],[222,11,139,9,"getAllNextSiblings"],[222,29,139,0],[222,32,139,30],[223,0,140,2],[223,8,140,6,"_key"],[223,12,140,10],[223,15,140,13],[223,20,140,18,"key"],[223,23,140,2],[224,0,141,2],[224,8,141,6,"sibling"],[224,15,141,13],[224,18,141,16],[224,23,141,21,"getSibling"],[224,33,141,16],[224,34,141,32],[224,36,141,34,"_key"],[224,40,141,16],[224,41,141,2],[225,0,142,2],[225,8,142,8,"siblings"],[225,16,142,16],[225,19,142,19],[225,21,142,2],[227,0,144,2],[227,11,144,9,"sibling"],[227,18,144,16],[227,19,144,17,"node"],[227,23,144,2],[227,25,144,23],[228,0,145,4,"siblings"],[228,6,145,4,"siblings"],[228,14,145,12],[228,15,145,13,"push"],[228,19,145,4],[228,20,145,18,"sibling"],[228,27,145,4],[229,0,146,4,"sibling"],[229,6,146,4,"sibling"],[229,13,146,11],[229,16,146,14],[229,21,146,19,"getSibling"],[229,31,146,14],[229,32,146,30],[229,34,146,32,"_key"],[229,38,146,14],[229,39,146,4],[230,0,147,3],[232,0,149,2],[232,11,149,9,"siblings"],[232,19,149,2],[233,0,150,1],[235,0,152,0],[235,11,152,9,"getAllPrevSiblings"],[235,29,152,0],[235,32,152,30],[236,0,153,2],[236,8,153,6,"_key"],[236,12,153,10],[236,15,153,13],[236,20,153,18,"key"],[236,23,153,2],[237,0,154,2],[237,8,154,6,"sibling"],[237,15,154,13],[237,18,154,16],[237,23,154,21,"getSibling"],[237,33,154,16],[237,34,154,32],[237,36,154,34,"_key"],[237,40,154,16],[237,41,154,2],[238,0,155,2],[238,8,155,8,"siblings"],[238,16,155,16],[238,19,155,19],[238,21,155,2],[240,0,157,2],[240,11,157,9,"sibling"],[240,18,157,16],[240,19,157,17,"node"],[240,23,157,2],[240,25,157,23],[241,0,158,4,"siblings"],[241,6,158,4,"siblings"],[241,14,158,12],[241,15,158,13,"push"],[241,19,158,4],[241,20,158,18,"sibling"],[241,27,158,4],[242,0,159,4,"sibling"],[242,6,159,4,"sibling"],[242,13,159,11],[242,16,159,14],[242,21,159,19,"getSibling"],[242,31,159,14],[242,32,159,30],[242,34,159,32,"_key"],[242,38,159,14],[242,39,159,4],[243,0,160,3],[245,0,162,2],[245,11,162,9,"siblings"],[245,19,162,2],[246,0,163,1],[248,0,165,0],[248,11,165,9,"get"],[248,14,165,0],[248,15,165,13,"key"],[248,18,165,0],[248,20,165,18,"context"],[248,27,165,0],[248,29,165,27],[249,0,166,2],[249,8,166,6,"context"],[249,15,166,13],[249,20,166,18],[249,24,166,2],[249,26,166,24,"context"],[249,33,166,31],[249,36,166,34],[249,41,166,39,"context"],[249,48,166,24],[250,0,167,2],[250,8,167,8,"parts"],[250,13,167,13],[250,16,167,16,"key"],[250,19,167,19],[250,20,167,20,"split"],[250,25,167,16],[250,26,167,26],[250,29,167,16],[250,30,167,2],[252,0,169,2],[252,8,169,6,"parts"],[252,13,169,11],[252,14,169,12,"length"],[252,20,169,6],[252,25,169,23],[252,26,169,2],[252,28,169,26],[253,0,170,4],[253,13,170,11],[253,18,170,16,"_getKey"],[253,25,170,11],[253,26,170,24,"key"],[253,29,170,11],[253,31,170,29,"context"],[253,38,170,11],[253,39,170,4],[254,0,171,3],[254,5,169,2],[254,11,171,9],[255,0,172,4],[255,13,172,11],[255,18,172,16,"_getPattern"],[255,29,172,11],[255,30,172,28,"parts"],[255,35,172,11],[255,37,172,35,"context"],[255,44,172,11],[255,45,172,4],[256,0,173,3],[257,0,174,1],[259,0,176,0],[259,11,176,9,"_getKey"],[259,18,176,0],[259,19,176,17,"key"],[259,22,176,0],[259,24,176,22,"context"],[259,31,176,0],[259,33,176,31],[260,0,176,31],[262,0,177,2],[262,8,177,8,"node"],[262,12,177,12],[262,15,177,15],[262,20,177,20,"node"],[262,24,177,2],[263,0,178,2],[263,8,178,8,"container"],[263,17,178,17],[263,20,178,20,"node"],[263,24,178,24],[263,25,178,25,"key"],[263,28,178,24],[263,29,178,2],[265,0,180,2],[265,8,180,6,"Array"],[265,13,180,11],[265,14,180,12,"isArray"],[265,21,180,6],[265,22,180,20,"container"],[265,31,180,6],[265,32,180,2],[265,34,180,32],[266,0,181,4],[266,13,181,11,"container"],[266,22,181,20],[266,23,181,21,"map"],[266,26,181,11],[266,27,181,25],[266,37,181,26,"_"],[266,38,181,25],[266,40,181,29,"i"],[266,41,181,25],[266,43,181,35],[267,0,182,6],[267,15,182,13,"_index"],[267,21,182,19],[267,22,182,20,"default"],[267,29,182,13],[267,30,182,28,"get"],[267,33,182,13],[267,34,182,32],[268,0,183,8,"listKey"],[268,10,183,8,"listKey"],[268,17,183,15],[268,19,183,17,"key"],[268,22,182,32],[269,0,184,8,"parentPath"],[269,10,184,8,"parentPath"],[269,20,184,18],[269,22,184,20],[269,27,182,32],[270,0,185,8,"parent"],[270,10,185,8,"parent"],[270,16,185,14],[270,18,185,16,"node"],[270,22,182,32],[271,0,186,8,"container"],[271,10,186,8,"container"],[271,19,186,17],[271,21,186,19,"container"],[271,30,182,32],[272,0,187,8,"key"],[272,10,187,8,"key"],[272,13,187,11],[272,15,187,13,"i"],[273,0,182,32],[273,9,182,13],[273,11,188,9,"setContext"],[273,21,182,13],[273,22,188,20,"context"],[273,29,182,13],[273,30,182,6],[274,0,189,5],[274,7,181,11],[274,8,181,4],[275,0,190,3],[275,5,180,2],[275,11,190,9],[276,0,191,4],[276,13,191,11,"_index"],[276,19,191,17],[276,20,191,18,"default"],[276,27,191,11],[276,28,191,26,"get"],[276,31,191,11],[276,32,191,30],[277,0,192,6,"parentPath"],[277,8,192,6,"parentPath"],[277,18,192,16],[277,20,192,18],[277,24,191,30],[278,0,193,6,"parent"],[278,8,193,6,"parent"],[278,14,193,12],[278,16,193,14,"node"],[278,20,191,30],[279,0,194,6,"container"],[279,8,194,6,"container"],[279,17,194,15],[279,19,194,17,"node"],[279,23,191,30],[280,0,195,6,"key"],[280,8,195,6,"key"],[280,11,195,9],[280,13,195,11,"key"],[281,0,191,30],[281,7,191,11],[281,9,196,7,"setContext"],[281,19,191,11],[281,20,196,18,"context"],[281,27,191,11],[281,28,191,4],[282,0,197,3],[283,0,198,1],[285,0,200,0],[285,11,200,9,"_getPattern"],[285,22,200,0],[285,23,200,21,"parts"],[285,28,200,0],[285,30,200,28,"context"],[285,37,200,0],[285,39,200,37],[286,0,201,2],[286,8,201,6,"path"],[286,12,201,10],[286,15,201,13],[286,19,201,2],[288,0,203,2],[288,26,203,21,"parts"],[288,31,203,2],[288,198,203,28],[289,0,203,28],[291,0,203,28],[292,0,203,28],[293,0,203,28],[294,0,203,28],[295,0,203,28],[296,0,203,28],[297,0,203,28],[298,0,203,28],[300,0,203,28],[300,10,203,13,"part"],[300,15,203,28],[302,0,204,4],[302,10,204,8,"part"],[302,15,204,12],[302,20,204,17],[302,23,204,4],[302,25,204,22],[303,0,205,6,"path"],[303,8,205,6,"path"],[303,12,205,10],[303,15,205,13,"path"],[303,19,205,17],[303,20,205,18,"parentPath"],[303,30,205,6],[304,0,206,5],[304,7,204,4],[304,13,206,11],[305,0,207,6],[305,12,207,10,"Array"],[305,17,207,15],[305,18,207,16,"isArray"],[305,25,207,10],[305,26,207,24,"path"],[305,30,207,10],[305,31,207,6],[305,33,207,31],[306,0,208,8,"path"],[306,10,208,8,"path"],[306,14,208,12],[306,17,208,15,"path"],[306,21,208,19],[306,22,208,20,"part"],[306,27,208,19],[306,28,208,8],[307,0,209,7],[307,9,207,6],[307,15,209,13],[308,0,210,8,"path"],[308,10,210,8,"path"],[308,14,210,12],[308,17,210,15,"path"],[308,21,210,19],[308,22,210,20,"get"],[308,25,210,15],[308,26,210,24,"part"],[308,31,210,15],[308,33,210,30,"context"],[308,40,210,15],[308,41,210,8],[309,0,211,7],[310,0,212,5],[311,0,213,3],[313,0,215,2],[313,11,215,9,"path"],[313,15,215,2],[314,0,216,1],[316,0,218,0],[316,11,218,9,"getBindingIdentifiers"],[316,32,218,0],[316,33,218,31,"duplicates"],[316,43,218,0],[316,45,218,43],[317,0,219,2],[317,11,219,9,"t"],[317,12,219,10],[317,13,219,11,"getBindingIdentifiers"],[317,34,219,9],[317,35,219,33],[317,40,219,38,"node"],[317,44,219,9],[317,46,219,44,"duplicates"],[317,56,219,9],[317,57,219,2],[318,0,220,1],[320,0,222,0],[320,11,222,9,"getOuterBindingIdentifiers"],[320,37,222,0],[320,38,222,36,"duplicates"],[320,48,222,0],[320,50,222,48],[321,0,223,2],[321,11,223,9,"t"],[321,12,223,10],[321,13,223,11,"getOuterBindingIdentifiers"],[321,39,223,9],[321,40,223,38],[321,45,223,43,"node"],[321,49,223,9],[321,51,223,49,"duplicates"],[321,61,223,9],[321,62,223,2],[322,0,224,1],[324,0,226,0],[324,11,226,9,"getBindingIdentifierPaths"],[324,36,226,0],[324,39,226,74],[325,0,226,74],[325,8,226,35,"duplicates"],[325,18,226,74],[325,89,226,48],[325,94,226,74],[326,0,226,74],[326,8,226,55,"outerOnly"],[326,17,226,74],[326,88,226,67],[326,93,226,74],[327,0,227,2],[327,8,227,8,"path"],[327,12,227,12],[327,15,227,15],[327,19,227,2],[328,0,228,2],[328,8,228,6,"search"],[328,14,228,12],[328,17,228,15],[328,20,228,18,"concat"],[328,26,228,15],[328,27,228,25,"path"],[328,31,228,15],[328,32,228,2],[329,0,229,2],[329,8,229,8,"ids"],[329,11,229,11],[329,14,229,14,"Object"],[329,20,229,20],[329,21,229,21,"create"],[329,27,229,14],[329,28,229,28],[329,32,229,14],[329,33,229,2],[331,0,231,2],[331,11,231,9,"search"],[331,17,231,15],[331,18,231,16,"length"],[331,24,231,2],[331,26,231,24],[332,0,232,4],[332,10,232,10,"id"],[332,12,232,12],[332,15,232,15,"search"],[332,21,232,21],[332,22,232,22,"shift"],[332,27,232,15],[332,29,232,4],[333,0,233,4],[333,10,233,8],[333,11,233,9,"id"],[333,13,233,4],[333,15,233,13],[334,0,234,4],[334,10,234,8],[334,11,234,9,"id"],[334,13,234,11],[334,14,234,12,"node"],[334,18,234,4],[334,20,234,18],[335,0,235,4],[335,10,235,10,"keys"],[335,14,235,14],[335,17,235,17,"t"],[335,18,235,18],[335,19,235,19,"getBindingIdentifiers"],[335,40,235,17],[335,41,235,41,"keys"],[335,45,235,17],[335,46,235,46,"id"],[335,48,235,48],[335,49,235,49,"node"],[335,53,235,46],[335,54,235,54,"type"],[335,58,235,17],[335,59,235,4],[337,0,237,4],[337,10,237,8,"id"],[337,12,237,10],[337,13,237,11,"isIdentifier"],[337,25,237,8],[337,27,237,4],[337,29,237,27],[338,0,238,6],[338,12,238,10,"duplicates"],[338,22,238,6],[338,24,238,22],[339,0,239,8],[339,14,239,14,"_ids"],[339,18,239,18],[339,21,239,21,"ids"],[339,24,239,24],[339,25,239,25,"id"],[339,27,239,27],[339,28,239,28,"node"],[339,32,239,25],[339,33,239,33,"name"],[339,37,239,24],[339,38,239,21],[339,41,239,41,"ids"],[339,44,239,44],[339,45,239,45,"id"],[339,47,239,47],[339,48,239,48,"node"],[339,52,239,45],[339,53,239,53,"name"],[339,57,239,44],[339,58,239,41],[339,62,239,62],[339,64,239,8],[341,0,241,8,"_ids"],[341,10,241,8,"_ids"],[341,14,241,12],[341,15,241,13,"push"],[341,19,241,8],[341,20,241,18,"id"],[341,22,241,8],[342,0,242,7],[342,9,238,6],[342,15,242,13],[343,0,243,8,"ids"],[343,10,243,8,"ids"],[343,13,243,11],[343,14,243,12,"id"],[343,16,243,14],[343,17,243,15,"node"],[343,21,243,12],[343,22,243,20,"name"],[343,26,243,11],[343,27,243,8],[343,30,243,28,"id"],[343,32,243,8],[344,0,244,7],[346,0,246,6],[347,0,247,5],[349,0,249,4],[349,10,249,8,"id"],[349,12,249,10],[349,13,249,11,"isExportDeclaration"],[349,32,249,8],[349,34,249,4],[349,36,249,34],[350,0,250,6],[350,12,250,12,"declaration"],[350,23,250,23],[350,26,250,26,"id"],[350,28,250,28],[350,29,250,29,"get"],[350,32,250,26],[350,33,250,33],[350,46,250,26],[350,47,250,6],[352,0,252,6],[352,12,252,10,"declaration"],[352,23,252,21],[352,24,252,22,"isDeclaration"],[352,37,252,10],[352,39,252,6],[352,41,252,39],[353,0,253,8,"search"],[353,10,253,8,"search"],[353,16,253,14],[353,17,253,15,"push"],[353,21,253,8],[353,22,253,20,"declaration"],[353,33,253,8],[354,0,254,7],[356,0,256,6],[357,0,257,5],[359,0,259,4],[359,10,259,8,"outerOnly"],[359,19,259,4],[359,21,259,19],[360,0,260,6],[360,12,260,10,"id"],[360,14,260,12],[360,15,260,13,"isFunctionDeclaration"],[360,36,260,10],[360,38,260,6],[360,40,260,38],[361,0,261,8,"search"],[361,10,261,8,"search"],[361,16,261,14],[361,17,261,15,"push"],[361,21,261,8],[361,22,261,20,"id"],[361,24,261,22],[361,25,261,23,"get"],[361,28,261,20],[361,29,261,27],[361,33,261,20],[361,34,261,8],[362,0,262,8],[363,0,263,7],[365,0,265,6],[365,12,265,10,"id"],[365,14,265,12],[365,15,265,13,"isFunctionExpression"],[365,35,265,10],[365,37,265,6],[365,39,265,37],[366,0,266,8],[367,0,267,7],[368,0,268,5],[370,0,270,4],[370,10,270,8,"keys"],[370,14,270,4],[370,16,270,14],[371,0,271,6],[371,13,271,11],[371,17,271,15,"i"],[371,18,271,16],[371,21,271,19],[371,22,271,6],[371,24,271,22,"i"],[371,25,271,23],[371,28,271,26,"keys"],[371,32,271,30],[371,33,271,31,"length"],[371,39,271,6],[371,41,271,39,"i"],[371,42,271,40],[371,44,271,6],[371,46,271,44],[372,0,272,8],[372,14,272,14,"key"],[372,17,272,17],[372,20,272,20,"keys"],[372,24,272,24],[372,25,272,25,"i"],[372,26,272,24],[372,27,272,8],[373,0,273,8],[373,14,273,14,"child"],[373,19,273,19],[373,22,273,22,"id"],[373,24,273,24],[373,25,273,25,"get"],[373,28,273,22],[373,29,273,29,"key"],[373,32,273,22],[373,33,273,8],[375,0,275,8],[375,14,275,12,"Array"],[375,19,275,17],[375,20,275,18,"isArray"],[375,27,275,12],[375,28,275,26,"child"],[375,33,275,12],[375,38,275,36,"child"],[375,43,275,41],[375,44,275,42,"node"],[375,48,275,8],[375,50,275,48],[376,0,276,10,"search"],[376,12,276,10,"search"],[376,18,276,16],[376,21,276,19,"search"],[376,27,276,25],[376,28,276,26,"concat"],[376,34,276,19],[376,35,276,33,"child"],[376,40,276,19],[376,41,276,10],[377,0,277,9],[378,0,278,7],[379,0,279,5],[380,0,280,3],[382,0,282,2],[382,11,282,9,"ids"],[382,14,282,2],[383,0,283,1],[385,0,285,0],[385,11,285,9,"getOuterBindingIdentifierPaths"],[385,41,285,0],[385,42,285,40,"duplicates"],[385,52,285,0],[385,54,285,52],[386,0,286,2],[386,11,286,9],[386,16,286,14,"getBindingIdentifierPaths"],[386,41,286,9],[386,42,286,40,"duplicates"],[386,52,286,9],[386,54,286,52],[386,58,286,9],[386,59,286,2],[387,0,287,1]]},"type":"js/module"}]}