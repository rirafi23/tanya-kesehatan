{"dependencies":[{"name":"@babel/runtime/helpers/assertThisInitialized","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/extends","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/toConsumableArray","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/createClass","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/possibleConstructorReturn","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/getPrototypeOf","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/get","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/inherits","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  var _assertThisInitialized = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/assertThisInitialized\");\n\n  var _extends = _$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/extends\");\n\n  var _toConsumableArray = _$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/toConsumableArray\");\n\n  var _slicedToArray = _$$_REQUIRE(_dependencyMap[3], \"@babel/runtime/helpers/slicedToArray\");\n\n  var _createClass = _$$_REQUIRE(_dependencyMap[4], \"@babel/runtime/helpers/createClass\");\n\n  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[5], \"@babel/runtime/helpers/possibleConstructorReturn\");\n\n  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[6], \"@babel/runtime/helpers/getPrototypeOf\");\n\n  var _get = _$$_REQUIRE(_dependencyMap[7], \"@babel/runtime/helpers/get\");\n\n  var _inherits = _$$_REQUIRE(_dependencyMap[8], \"@babel/runtime/helpers/inherits\");\n\n  var _classCallCheck = _$$_REQUIRE(_dependencyMap[9], \"@babel/runtime/helpers/classCallCheck\");\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  var beforeExpr = true;\n  var startsExpr = true;\n  var isLoop = true;\n  var isAssign = true;\n  var prefix = true;\n  var postfix = true;\n\n  var TokenType = function TokenType(label) {\n    var conf = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, TokenType);\n\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    this.updateContext = null;\n  };\n\n  var keywords = new Map();\n\n  function createKeyword(name) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    options.keyword = name;\n    var token = new TokenType(name, options);\n    keywords.set(name, token);\n    return token;\n  }\n\n  function createBinop(name, binop) {\n    return new TokenType(name, {\n      beforeExpr: beforeExpr,\n      binop: binop\n    });\n  }\n\n  var types = {\n    num: new TokenType(\"num\", {\n      startsExpr: startsExpr\n    }),\n    bigint: new TokenType(\"bigint\", {\n      startsExpr: startsExpr\n    }),\n    regexp: new TokenType(\"regexp\", {\n      startsExpr: startsExpr\n    }),\n    string: new TokenType(\"string\", {\n      startsExpr: startsExpr\n    }),\n    name: new TokenType(\"name\", {\n      startsExpr: startsExpr\n    }),\n    eof: new TokenType(\"eof\"),\n    bracketL: new TokenType(\"[\", {\n      beforeExpr: beforeExpr,\n      startsExpr: startsExpr\n    }),\n    bracketR: new TokenType(\"]\"),\n    braceL: new TokenType(\"{\", {\n      beforeExpr: beforeExpr,\n      startsExpr: startsExpr\n    }),\n    braceBarL: new TokenType(\"{|\", {\n      beforeExpr: beforeExpr,\n      startsExpr: startsExpr\n    }),\n    braceR: new TokenType(\"}\"),\n    braceBarR: new TokenType(\"|}\"),\n    parenL: new TokenType(\"(\", {\n      beforeExpr: beforeExpr,\n      startsExpr: startsExpr\n    }),\n    parenR: new TokenType(\")\"),\n    comma: new TokenType(\",\", {\n      beforeExpr: beforeExpr\n    }),\n    semi: new TokenType(\";\", {\n      beforeExpr: beforeExpr\n    }),\n    colon: new TokenType(\":\", {\n      beforeExpr: beforeExpr\n    }),\n    doubleColon: new TokenType(\"::\", {\n      beforeExpr: beforeExpr\n    }),\n    dot: new TokenType(\".\"),\n    question: new TokenType(\"?\", {\n      beforeExpr: beforeExpr\n    }),\n    questionDot: new TokenType(\"?.\"),\n    arrow: new TokenType(\"=>\", {\n      beforeExpr: beforeExpr\n    }),\n    template: new TokenType(\"template\"),\n    ellipsis: new TokenType(\"...\", {\n      beforeExpr: beforeExpr\n    }),\n    backQuote: new TokenType(\"`\", {\n      startsExpr: startsExpr\n    }),\n    dollarBraceL: new TokenType(\"${\", {\n      beforeExpr: beforeExpr,\n      startsExpr: startsExpr\n    }),\n    at: new TokenType(\"@\"),\n    hash: new TokenType(\"#\", {\n      startsExpr: startsExpr\n    }),\n    interpreterDirective: new TokenType(\"#!...\"),\n    eq: new TokenType(\"=\", {\n      beforeExpr: beforeExpr,\n      isAssign: isAssign\n    }),\n    assign: new TokenType(\"_=\", {\n      beforeExpr: beforeExpr,\n      isAssign: isAssign\n    }),\n    incDec: new TokenType(\"++/--\", {\n      prefix: prefix,\n      postfix: postfix,\n      startsExpr: startsExpr\n    }),\n    bang: new TokenType(\"!\", {\n      beforeExpr: beforeExpr,\n      prefix: prefix,\n      startsExpr: startsExpr\n    }),\n    tilde: new TokenType(\"~\", {\n      beforeExpr: beforeExpr,\n      prefix: prefix,\n      startsExpr: startsExpr\n    }),\n    pipeline: createBinop(\"|>\", 0),\n    nullishCoalescing: createBinop(\"??\", 1),\n    logicalOR: createBinop(\"||\", 2),\n    logicalAND: createBinop(\"&&\", 3),\n    bitwiseOR: createBinop(\"|\", 4),\n    bitwiseXOR: createBinop(\"^\", 5),\n    bitwiseAND: createBinop(\"&\", 6),\n    equality: createBinop(\"==/!=/===/!==\", 7),\n    relational: createBinop(\"</>/<=/>=\", 8),\n    bitShift: createBinop(\"<</>>/>>>\", 9),\n    plusMin: new TokenType(\"+/-\", {\n      beforeExpr: beforeExpr,\n      binop: 10,\n      prefix: prefix,\n      startsExpr: startsExpr\n    }),\n    modulo: new TokenType(\"%\", {\n      beforeExpr: beforeExpr,\n      binop: 11,\n      startsExpr: startsExpr\n    }),\n    star: createBinop(\"*\", 11),\n    slash: createBinop(\"/\", 11),\n    exponent: new TokenType(\"**\", {\n      beforeExpr: beforeExpr,\n      binop: 12,\n      rightAssociative: true\n    }),\n    _break: createKeyword(\"break\"),\n    _case: createKeyword(\"case\", {\n      beforeExpr: beforeExpr\n    }),\n    _catch: createKeyword(\"catch\"),\n    _continue: createKeyword(\"continue\"),\n    _debugger: createKeyword(\"debugger\"),\n    _default: createKeyword(\"default\", {\n      beforeExpr: beforeExpr\n    }),\n    _do: createKeyword(\"do\", {\n      isLoop: isLoop,\n      beforeExpr: beforeExpr\n    }),\n    _else: createKeyword(\"else\", {\n      beforeExpr: beforeExpr\n    }),\n    _finally: createKeyword(\"finally\"),\n    _for: createKeyword(\"for\", {\n      isLoop: isLoop\n    }),\n    _function: createKeyword(\"function\", {\n      startsExpr: startsExpr\n    }),\n    _if: createKeyword(\"if\"),\n    _return: createKeyword(\"return\", {\n      beforeExpr: beforeExpr\n    }),\n    _switch: createKeyword(\"switch\"),\n    _throw: createKeyword(\"throw\", {\n      beforeExpr: beforeExpr,\n      prefix: prefix,\n      startsExpr: startsExpr\n    }),\n    _try: createKeyword(\"try\"),\n    _var: createKeyword(\"var\"),\n    _const: createKeyword(\"const\"),\n    _while: createKeyword(\"while\", {\n      isLoop: isLoop\n    }),\n    _with: createKeyword(\"with\"),\n    _new: createKeyword(\"new\", {\n      beforeExpr: beforeExpr,\n      startsExpr: startsExpr\n    }),\n    _this: createKeyword(\"this\", {\n      startsExpr: startsExpr\n    }),\n    _super: createKeyword(\"super\", {\n      startsExpr: startsExpr\n    }),\n    _class: createKeyword(\"class\", {\n      startsExpr: startsExpr\n    }),\n    _extends: createKeyword(\"extends\", {\n      beforeExpr: beforeExpr\n    }),\n    _export: createKeyword(\"export\"),\n    _import: createKeyword(\"import\", {\n      startsExpr: startsExpr\n    }),\n    _null: createKeyword(\"null\", {\n      startsExpr: startsExpr\n    }),\n    _true: createKeyword(\"true\", {\n      startsExpr: startsExpr\n    }),\n    _false: createKeyword(\"false\", {\n      startsExpr: startsExpr\n    }),\n    _in: createKeyword(\"in\", {\n      beforeExpr: beforeExpr,\n      binop: 8\n    }),\n    _instanceof: createKeyword(\"instanceof\", {\n      beforeExpr: beforeExpr,\n      binop: 8\n    }),\n    _typeof: createKeyword(\"typeof\", {\n      beforeExpr: beforeExpr,\n      prefix: prefix,\n      startsExpr: startsExpr\n    }),\n    _void: createKeyword(\"void\", {\n      beforeExpr: beforeExpr,\n      prefix: prefix,\n      startsExpr: startsExpr\n    }),\n    _delete: createKeyword(\"delete\", {\n      beforeExpr: beforeExpr,\n      prefix: prefix,\n      startsExpr: startsExpr\n    })\n  };\n  var SCOPE_OTHER = 0,\n      SCOPE_PROGRAM = 1,\n      SCOPE_FUNCTION = 2,\n      SCOPE_ASYNC = 4,\n      SCOPE_GENERATOR = 8,\n      SCOPE_ARROW = 16,\n      SCOPE_SIMPLE_CATCH = 32,\n      SCOPE_SUPER = 64,\n      SCOPE_DIRECT_SUPER = 128,\n      SCOPE_CLASS = 256,\n      SCOPE_TS_MODULE = 512,\n      SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\n\n  function functionFlags(isAsync, isGenerator) {\n    return SCOPE_FUNCTION | (isAsync ? SCOPE_ASYNC : 0) | (isGenerator ? SCOPE_GENERATOR : 0);\n  }\n\n  var BIND_KIND_VALUE = 1,\n      BIND_KIND_TYPE = 2,\n      BIND_SCOPE_VAR = 4,\n      BIND_SCOPE_LEXICAL = 8,\n      BIND_SCOPE_FUNCTION = 16,\n      BIND_FLAGS_NONE = 64,\n      BIND_FLAGS_CLASS = 128,\n      BIND_FLAGS_TS_ENUM = 256,\n      BIND_FLAGS_TS_CONST_ENUM = 512,\n      BIND_FLAGS_TS_EXPORT_ONLY = 1024;\n  var BIND_CLASS = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_CLASS,\n      BIND_LEXICAL = BIND_KIND_VALUE | 0 | BIND_SCOPE_LEXICAL | 0,\n      BIND_VAR = BIND_KIND_VALUE | 0 | BIND_SCOPE_VAR | 0,\n      BIND_FUNCTION = BIND_KIND_VALUE | 0 | BIND_SCOPE_FUNCTION | 0,\n      BIND_TS_INTERFACE = 0 | BIND_KIND_TYPE | 0 | BIND_FLAGS_CLASS,\n      BIND_TS_TYPE = 0 | BIND_KIND_TYPE | 0 | 0,\n      BIND_TS_ENUM = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_TS_ENUM,\n      BIND_TS_AMBIENT = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n      BIND_NONE = 0 | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_OUTSIDE = BIND_KIND_VALUE | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n      BIND_TS_NAMESPACE = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY;\n\n  function isSimpleProperty(node) {\n    return node != null && node.type === \"Property\" && node.kind === \"init\" && node.method === false;\n  }\n\n  var estree = function estree(superClass) {\n    return function (_superClass) {\n      _inherits(_class, _superClass);\n\n      function _class() {\n        _classCallCheck(this, _class);\n\n        return _possibleConstructorReturn(this, _getPrototypeOf(_class).apply(this, arguments));\n      }\n\n      _createClass(_class, [{\n        key: \"estreeParseRegExpLiteral\",\n        value: function estreeParseRegExpLiteral(_ref) {\n          var pattern = _ref.pattern,\n              flags = _ref.flags;\n          var regex = null;\n\n          try {\n            regex = new RegExp(pattern, flags);\n          } catch (e) {}\n\n          var node = this.estreeParseLiteral(regex);\n          node.regex = {\n            pattern: pattern,\n            flags: flags\n          };\n          return node;\n        }\n      }, {\n        key: \"estreeParseBigIntLiteral\",\n        value: function estreeParseBigIntLiteral(value) {\n          var bigInt = typeof BigInt !== \"undefined\" ? BigInt(value) : null;\n          var node = this.estreeParseLiteral(bigInt);\n          node.bigint = String(node.value || value);\n          return node;\n        }\n      }, {\n        key: \"estreeParseLiteral\",\n        value: function estreeParseLiteral(value) {\n          return this.parseLiteral(value, \"Literal\");\n        }\n      }, {\n        key: \"directiveToStmt\",\n        value: function directiveToStmt(directive) {\n          var directiveLiteral = directive.value;\n          var stmt = this.startNodeAt(directive.start, directive.loc.start);\n          var expression = this.startNodeAt(directiveLiteral.start, directiveLiteral.loc.start);\n          expression.value = directiveLiteral.value;\n          expression.raw = directiveLiteral.extra.raw;\n          stmt.expression = this.finishNodeAt(expression, \"Literal\", directiveLiteral.end, directiveLiteral.loc.end);\n          stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n          return this.finishNodeAt(stmt, \"ExpressionStatement\", directive.end, directive.loc.end);\n        }\n      }, {\n        key: \"initFunction\",\n        value: function initFunction(node, isAsync) {\n          _get(_getPrototypeOf(_class.prototype), \"initFunction\", this).call(this, node, isAsync);\n\n          node.expression = false;\n        }\n      }, {\n        key: \"checkDeclaration\",\n        value: function checkDeclaration(node) {\n          if (isSimpleProperty(node)) {\n            this.checkDeclaration(node.value);\n          } else {\n            _get(_getPrototypeOf(_class.prototype), \"checkDeclaration\", this).call(this, node);\n          }\n        }\n      }, {\n        key: \"checkGetterSetterParams\",\n        value: function checkGetterSetterParams(method) {\n          var prop = method;\n          var paramCount = prop.kind === \"get\" ? 0 : 1;\n          var start = prop.start;\n\n          if (prop.value.params.length !== paramCount) {\n            if (prop.kind === \"get\") {\n              this.raise(start, \"getter must not have any formal parameters\");\n            } else {\n              this.raise(start, \"setter must have exactly one formal parameter\");\n            }\n          } else if (prop.kind === \"set\" && prop.value.params[0].type === \"RestElement\") {\n            this.raise(start, \"setter function argument must not be a rest parameter\");\n          }\n        }\n      }, {\n        key: \"checkLVal\",\n        value: function checkLVal(expr) {\n          var _this = this;\n\n          var bindingType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : BIND_NONE;\n          var checkClashes = arguments.length > 2 ? arguments[2] : undefined;\n          var contextDescription = arguments.length > 3 ? arguments[3] : undefined;\n          var disallowLetBinding = arguments.length > 4 ? arguments[4] : undefined;\n\n          switch (expr.type) {\n            case \"ObjectPattern\":\n              expr.properties.forEach(function (prop) {\n                _this.checkLVal(prop.type === \"Property\" ? prop.value : prop, bindingType, checkClashes, \"object destructuring pattern\", disallowLetBinding);\n              });\n              break;\n\n            default:\n              _get(_getPrototypeOf(_class.prototype), \"checkLVal\", this).call(this, expr, bindingType, checkClashes, contextDescription, disallowLetBinding);\n\n          }\n        }\n      }, {\n        key: \"checkDuplicatedProto\",\n        value: function checkDuplicatedProto(prop, protoRef) {\n          if (prop.type === \"SpreadElement\" || prop.computed || prop.method || prop.shorthand) {\n            return;\n          }\n\n          var key = prop.key;\n          var name = key.type === \"Identifier\" ? key.name : String(key.value);\n\n          if (name === \"__proto__\" && prop.kind === \"init\") {\n            if (protoRef.used && !protoRef.start) {\n              protoRef.start = key.start;\n            }\n\n            protoRef.used = true;\n          }\n        }\n      }, {\n        key: \"isStrictBody\",\n        value: function isStrictBody(node) {\n          var isBlockStatement = node.body.type === \"BlockStatement\";\n\n          if (isBlockStatement && node.body.body.length > 0) {\n            for (var _i = 0, _node$body$body = node.body.body; _i < _node$body$body.length; _i++) {\n              var directive = _node$body$body[_i];\n\n              if (directive.type === \"ExpressionStatement\" && directive.expression.type === \"Literal\") {\n                if (directive.expression.value === \"use strict\") return true;\n              } else {\n                break;\n              }\n            }\n          }\n\n          return false;\n        }\n      }, {\n        key: \"isValidDirective\",\n        value: function isValidDirective(stmt) {\n          return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"Literal\" && typeof stmt.expression.value === \"string\" && (!stmt.expression.extra || !stmt.expression.extra.parenthesized);\n        }\n      }, {\n        key: \"stmtToDirective\",\n        value: function stmtToDirective(stmt) {\n          var directive = _get(_getPrototypeOf(_class.prototype), \"stmtToDirective\", this).call(this, stmt);\n\n          var value = stmt.expression.value;\n          directive.value.value = value;\n          return directive;\n        }\n      }, {\n        key: \"parseBlockBody\",\n        value: function parseBlockBody(node, allowDirectives, topLevel, end) {\n          var _this2 = this;\n\n          _get(_getPrototypeOf(_class.prototype), \"parseBlockBody\", this).call(this, node, allowDirectives, topLevel, end);\n\n          var directiveStatements = node.directives.map(function (d) {\n            return _this2.directiveToStmt(d);\n          });\n          node.body = directiveStatements.concat(node.body);\n          delete node.directives;\n        }\n      }, {\n        key: \"pushClassMethod\",\n        value: function pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n          this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true);\n\n          if (method.typeParameters) {\n            method.value.typeParameters = method.typeParameters;\n            delete method.typeParameters;\n          }\n\n          classBody.body.push(method);\n        }\n      }, {\n        key: \"parseExprAtom\",\n        value: function parseExprAtom(refShorthandDefaultPos) {\n          switch (this.state.type) {\n            case types.num:\n            case types.string:\n              return this.estreeParseLiteral(this.state.value);\n\n            case types.regexp:\n              return this.estreeParseRegExpLiteral(this.state.value);\n\n            case types.bigint:\n              return this.estreeParseBigIntLiteral(this.state.value);\n\n            case types._null:\n              return this.estreeParseLiteral(null);\n\n            case types._true:\n              return this.estreeParseLiteral(true);\n\n            case types._false:\n              return this.estreeParseLiteral(false);\n\n            default:\n              return _get(_getPrototypeOf(_class.prototype), \"parseExprAtom\", this).call(this, refShorthandDefaultPos);\n          }\n        }\n      }, {\n        key: \"parseLiteral\",\n        value: function parseLiteral(value, type, startPos, startLoc) {\n          var node = _get(_getPrototypeOf(_class.prototype), \"parseLiteral\", this).call(this, value, type, startPos, startLoc);\n\n          node.raw = node.extra.raw;\n          delete node.extra;\n          return node;\n        }\n      }, {\n        key: \"parseFunctionBody\",\n        value: function parseFunctionBody(node, allowExpression) {\n          var isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n          _get(_getPrototypeOf(_class.prototype), \"parseFunctionBody\", this).call(this, node, allowExpression, isMethod);\n\n          node.expression = node.body.type !== \"BlockStatement\";\n        }\n      }, {\n        key: \"parseMethod\",\n        value: function parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type) {\n          var inClassScope = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n          var funcNode = this.startNode();\n          funcNode.kind = node.kind;\n          funcNode = _get(_getPrototypeOf(_class.prototype), \"parseMethod\", this).call(this, funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);\n          funcNode.type = \"FunctionExpression\";\n          delete funcNode.kind;\n          node.value = funcNode;\n          type = type === \"ClassMethod\" ? \"MethodDefinition\" : type;\n          return this.finishNode(node, type);\n        }\n      }, {\n        key: \"parseObjectMethod\",\n        value: function parseObjectMethod(prop, isGenerator, isAsync, isPattern, containsEsc) {\n          var node = _get(_getPrototypeOf(_class.prototype), \"parseObjectMethod\", this).call(this, prop, isGenerator, isAsync, isPattern, containsEsc);\n\n          if (node) {\n            node.type = \"Property\";\n            if (node.kind === \"method\") node.kind = \"init\";\n            node.shorthand = false;\n          }\n\n          return node;\n        }\n      }, {\n        key: \"parseObjectProperty\",\n        value: function parseObjectProperty(prop, startPos, startLoc, isPattern, refShorthandDefaultPos) {\n          var node = _get(_getPrototypeOf(_class.prototype), \"parseObjectProperty\", this).call(this, prop, startPos, startLoc, isPattern, refShorthandDefaultPos);\n\n          if (node) {\n            node.kind = \"init\";\n            node.type = \"Property\";\n          }\n\n          return node;\n        }\n      }, {\n        key: \"toAssignable\",\n        value: function toAssignable(node, isBinding, contextDescription) {\n          if (isSimpleProperty(node)) {\n            this.toAssignable(node.value, isBinding, contextDescription);\n            return node;\n          }\n\n          return _get(_getPrototypeOf(_class.prototype), \"toAssignable\", this).call(this, node, isBinding, contextDescription);\n        }\n      }, {\n        key: \"toAssignableObjectExpressionProp\",\n        value: function toAssignableObjectExpressionProp(prop, isBinding, isLast) {\n          if (prop.kind === \"get\" || prop.kind === \"set\") {\n            throw this.raise(prop.key.start, \"Object pattern can't contain getter or setter\");\n          } else if (prop.method) {\n            throw this.raise(prop.key.start, \"Object pattern can't contain methods\");\n          } else {\n            _get(_getPrototypeOf(_class.prototype), \"toAssignableObjectExpressionProp\", this).call(this, prop, isBinding, isLast);\n          }\n        }\n      }, {\n        key: \"finishCallExpression\",\n        value: function finishCallExpression(node, optional) {\n          _get(_getPrototypeOf(_class.prototype), \"finishCallExpression\", this).call(this, node, optional);\n\n          if (node.callee.type === \"Import\") {\n            node.type = \"ImportExpression\";\n            node.source = node.arguments[0];\n            delete node.arguments;\n            delete node.callee;\n          }\n\n          return node;\n        }\n      }, {\n        key: \"toReferencedListDeep\",\n        value: function toReferencedListDeep(exprList, isParenthesizedExpr) {\n          if (!exprList) {\n            return;\n          }\n\n          _get(_getPrototypeOf(_class.prototype), \"toReferencedListDeep\", this).call(this, exprList, isParenthesizedExpr);\n        }\n      }]);\n\n      return _class;\n    }(superClass);\n  };\n\n  var lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\n  var lineBreakG = new RegExp(lineBreak.source, \"g\");\n\n  function isNewLine(code) {\n    switch (code) {\n      case 10:\n      case 13:\n      case 8232:\n      case 8233:\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  var skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\n  function isWhitespace(code) {\n    switch (code) {\n      case 0x0009:\n      case 0x000b:\n      case 0x000c:\n      case 32:\n      case 160:\n      case 5760:\n      case 0x2000:\n      case 0x2001:\n      case 0x2002:\n      case 0x2003:\n      case 0x2004:\n      case 0x2005:\n      case 0x2006:\n      case 0x2007:\n      case 0x2008:\n      case 0x2009:\n      case 0x200a:\n      case 0x202f:\n      case 0x205f:\n      case 0x3000:\n      case 0xfeff:\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  var TokContext = function TokContext(token, isExpr, preserveSpace, override) {\n    _classCallCheck(this, TokContext);\n\n    this.token = token;\n    this.isExpr = !!isExpr;\n    this.preserveSpace = !!preserveSpace;\n    this.override = override;\n  };\n\n  var types$1 = {\n    braceStatement: new TokContext(\"{\", false),\n    braceExpression: new TokContext(\"{\", true),\n    templateQuasi: new TokContext(\"${\", false),\n    parenStatement: new TokContext(\"(\", false),\n    parenExpression: new TokContext(\"(\", true),\n    template: new TokContext(\"`\", true, true, function (p) {\n      return p.readTmplToken();\n    }),\n    functionExpression: new TokContext(\"function\", true),\n    functionStatement: new TokContext(\"function\", false)\n  };\n\n  types.parenR.updateContext = types.braceR.updateContext = function () {\n    if (this.state.context.length === 1) {\n      this.state.exprAllowed = true;\n      return;\n    }\n\n    var out = this.state.context.pop();\n\n    if (out === types$1.braceStatement && this.curContext().token === \"function\") {\n      out = this.state.context.pop();\n    }\n\n    this.state.exprAllowed = !out.isExpr;\n  };\n\n  types.name.updateContext = function (prevType) {\n    var allowed = false;\n\n    if (prevType !== types.dot) {\n      if (this.state.value === \"of\" && !this.state.exprAllowed || this.state.value === \"yield\" && this.scope.inGenerator) {\n        allowed = true;\n      }\n    }\n\n    this.state.exprAllowed = allowed;\n\n    if (this.state.isIterator) {\n      this.state.isIterator = false;\n    }\n  };\n\n  types.braceL.updateContext = function (prevType) {\n    this.state.context.push(this.braceIsBlock(prevType) ? types$1.braceStatement : types$1.braceExpression);\n    this.state.exprAllowed = true;\n  };\n\n  types.dollarBraceL.updateContext = function () {\n    this.state.context.push(types$1.templateQuasi);\n    this.state.exprAllowed = true;\n  };\n\n  types.parenL.updateContext = function (prevType) {\n    var statementParens = prevType === types._if || prevType === types._for || prevType === types._with || prevType === types._while;\n    this.state.context.push(statementParens ? types$1.parenStatement : types$1.parenExpression);\n    this.state.exprAllowed = true;\n  };\n\n  types.incDec.updateContext = function () {};\n\n  types._function.updateContext = types._class.updateContext = function (prevType) {\n    if (prevType.beforeExpr && prevType !== types.semi && prevType !== types._else && !(prevType === types._return && lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start))) && !((prevType === types.colon || prevType === types.braceL) && this.curContext() === types$1.b_stat)) {\n      this.state.context.push(types$1.functionExpression);\n    } else {\n      this.state.context.push(types$1.functionStatement);\n    }\n\n    this.state.exprAllowed = false;\n  };\n\n  types.backQuote.updateContext = function () {\n    if (this.curContext() === types$1.template) {\n      this.state.context.pop();\n    } else {\n      this.state.context.push(types$1.template);\n    }\n\n    this.state.exprAllowed = false;\n  };\n\n  var reservedWords = {\n    strict: [\"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\"],\n    strictBind: [\"eval\", \"arguments\"]\n  };\n  var reservedWordsStrictSet = new Set(reservedWords.strict);\n  var reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\n  var isReservedWord = function isReservedWord(word, inModule) {\n    return inModule && word === \"await\" || word === \"enum\";\n  };\n\n  function isStrictReservedWord(word, inModule) {\n    return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n  }\n\n  function isStrictBindOnlyReservedWord(word) {\n    return reservedWordsStrictBindSet.has(word);\n  }\n\n  function isStrictBindReservedWord(word, inModule) {\n    return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);\n  }\n\n  function isKeyword(word) {\n    return keywords.has(word);\n  }\n\n  var keywordRelationalOperator = /^in(stanceof)?$/;\n  var nonASCIIidentifierStartChars = \"\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08BD\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E86-\\u0E8A\\u0E8C-\\u0EA3\\u0EA5\\u0EA7-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1878\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5\\u1CF6\\u1CFA\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FEF\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7BF\\uA7C2-\\uA7C6\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA8FE\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB67\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC\";\n  var nonASCIIidentifierChars = \"\\u200C\\u200D\\xB7\\u0300-\\u036F\\u0387\\u0483-\\u0487\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u0669\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u06F0-\\u06F9\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07C0-\\u07C9\\u07EB-\\u07F3\\u07FD\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08D3-\\u08E1\\u08E3-\\u0903\\u093A-\\u093C\\u093E-\\u094F\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096F\\u0981-\\u0983\\u09BC\\u09BE-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CD\\u09D7\\u09E2\\u09E3\\u09E6-\\u09EF\\u09FE\\u0A01-\\u0A03\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A66-\\u0A71\\u0A75\\u0A81-\\u0A83\\u0ABC\\u0ABE-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AE2\\u0AE3\\u0AE6-\\u0AEF\\u0AFA-\\u0AFF\\u0B01-\\u0B03\\u0B3C\\u0B3E-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B62\\u0B63\\u0B66-\\u0B6F\\u0B82\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C04\\u0C3E-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0CBC\\u0CBE-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CE2\\u0CE3\\u0CE6-\\u0CEF\\u0D00-\\u0D03\\u0D3B\\u0D3C\\u0D3E-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4D\\u0D57\\u0D62\\u0D63\\u0D66-\\u0D6F\\u0D82\\u0D83\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0E50-\\u0E59\\u0EB1\\u0EB4-\\u0EBC\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E\\u0F3F\\u0F71-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102B-\\u103E\\u1040-\\u1049\\u1056-\\u1059\\u105E-\\u1060\\u1062-\\u1064\\u1067-\\u106D\\u1071-\\u1074\\u1082-\\u108D\\u108F-\\u109D\\u135D-\\u135F\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4-\\u17D3\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u18A9\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u194F\\u19D0-\\u19DA\\u1A17-\\u1A1B\\u1A55-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AB0-\\u1ABD\\u1B00-\\u1B04\\u1B34-\\u1B44\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1B82\\u1BA1-\\u1BAD\\u1BB0-\\u1BB9\\u1BE6-\\u1BF3\\u1C24-\\u1C37\\u1C40-\\u1C49\\u1C50-\\u1C59\\u1CD0-\\u1CD2\\u1CD4-\\u1CE8\\u1CED\\u1CF4\\u1CF7-\\u1CF9\\u1DC0-\\u1DF9\\u1DFB-\\u1DFF\\u203F\\u2040\\u2054\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302F\\u3099\\u309A\\uA620-\\uA629\\uA66F\\uA674-\\uA67D\\uA69E\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA823-\\uA827\\uA880\\uA881\\uA8B4-\\uA8C5\\uA8D0-\\uA8D9\\uA8E0-\\uA8F1\\uA8FF-\\uA909\\uA926-\\uA92D\\uA947-\\uA953\\uA980-\\uA983\\uA9B3-\\uA9C0\\uA9D0-\\uA9D9\\uA9E5\\uA9F0-\\uA9F9\\uAA29-\\uAA36\\uAA43\\uAA4C\\uAA4D\\uAA50-\\uAA59\\uAA7B-\\uAA7D\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEB-\\uAAEF\\uAAF5\\uAAF6\\uABE3-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFF10-\\uFF19\\uFF3F\";\n  var nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\n  var nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\n  nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n  var astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 477, 28, 11, 0, 9, 21, 155, 22, 13, 52, 76, 44, 33, 24, 27, 35, 30, 0, 12, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 0, 33, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 230, 43, 117, 63, 32, 0, 161, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 35, 56, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 270, 921, 103, 110, 18, 195, 2749, 1070, 4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 754, 9486, 286, 50, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 2357, 44, 11, 6, 17, 0, 370, 43, 1301, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42710, 42, 4148, 12, 221, 3, 5761, 15, 7472, 3104, 541];\n  var astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 525, 10, 176, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 4, 9, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 232, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 135, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 19723, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 419, 13, 1495, 6, 110, 6, 6, 9, 792487, 239];\n\n  function isInAstralSet(code, set) {\n    var pos = 0x10000;\n\n    for (var i = 0, length = set.length; i < length; i += 2) {\n      pos += set[i];\n      if (pos > code) return false;\n      pos += set[i + 1];\n      if (pos >= code) return true;\n    }\n\n    return false;\n  }\n\n  function isIdentifierStart(code) {\n    if (code < 65) return code === 36;\n    if (code <= 90) return true;\n    if (code < 97) return code === 95;\n    if (code <= 122) return true;\n\n    if (code <= 0xffff) {\n      return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n    }\n\n    return isInAstralSet(code, astralIdentifierStartCodes);\n  }\n\n  function isIteratorStart(current, next) {\n    return current === 64 && next === 64;\n  }\n\n  function isIdentifierChar(code) {\n    if (code < 48) return code === 36;\n    if (code < 58) return true;\n    if (code < 65) return false;\n    if (code <= 90) return true;\n    if (code < 97) return code === 95;\n    if (code <= 122) return true;\n\n    if (code <= 0xffff) {\n      return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n    }\n\n    return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n  }\n\n  var reservedTypes = new Set([\"_\", \"any\", \"bool\", \"boolean\", \"empty\", \"extends\", \"false\", \"interface\", \"mixed\", \"null\", \"number\", \"static\", \"string\", \"true\", \"typeof\", \"void\"]);\n\n  function isEsModuleType(bodyElement) {\n    return bodyElement.type === \"DeclareExportAllDeclaration\" || bodyElement.type === \"DeclareExportDeclaration\" && (!bodyElement.declaration || bodyElement.declaration.type !== \"TypeAlias\" && bodyElement.declaration.type !== \"InterfaceDeclaration\");\n  }\n\n  function hasTypeImportKind(node) {\n    return node.importKind === \"type\" || node.importKind === \"typeof\";\n  }\n\n  function isMaybeDefaultImport(state) {\n    return (state.type === types.name || !!state.type.keyword) && state.value !== \"from\";\n  }\n\n  var exportSuggestions = {\n    const: \"declare export var\",\n    let: \"declare export var\",\n    type: \"export type\",\n    interface: \"export interface\"\n  };\n\n  function partition(list, test) {\n    var list1 = [];\n    var list2 = [];\n\n    for (var i = 0; i < list.length; i++) {\n      (test(list[i], i, list) ? list1 : list2).push(list[i]);\n    }\n\n    return [list1, list2];\n  }\n\n  var FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\n  var flow = function flow(superClass) {\n    return function (_superClass2) {\n      _inherits(_class2, _superClass2);\n\n      function _class2(options, input) {\n        var _this3;\n\n        _classCallCheck(this, _class2);\n\n        _this3 = _possibleConstructorReturn(this, _getPrototypeOf(_class2).call(this, options, input));\n        _this3.flowPragma = undefined;\n        return _this3;\n      }\n\n      _createClass(_class2, [{\n        key: \"shouldParseTypes\",\n        value: function shouldParseTypes() {\n          return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n        }\n      }, {\n        key: \"shouldParseEnums\",\n        value: function shouldParseEnums() {\n          return !!this.getPluginOption(\"flow\", \"enums\");\n        }\n      }, {\n        key: \"finishToken\",\n        value: function finishToken(type, val) {\n          if (type !== types.string && type !== types.semi && type !== types.interpreterDirective) {\n            if (this.flowPragma === undefined) {\n              this.flowPragma = null;\n            }\n          }\n\n          return _get(_getPrototypeOf(_class2.prototype), \"finishToken\", this).call(this, type, val);\n        }\n      }, {\n        key: \"addComment\",\n        value: function addComment(comment) {\n          if (this.flowPragma === undefined) {\n            var matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n            if (!matches) ;else if (matches[1] === \"flow\") {\n              this.flowPragma = \"flow\";\n            } else if (matches[1] === \"noflow\") {\n              this.flowPragma = \"noflow\";\n            } else {\n              throw new Error(\"Unexpected flow pragma\");\n            }\n          }\n\n          return _get(_getPrototypeOf(_class2.prototype), \"addComment\", this).call(this, comment);\n        }\n      }, {\n        key: \"flowParseTypeInitialiser\",\n        value: function flowParseTypeInitialiser(tok) {\n          var oldInType = this.state.inType;\n          this.state.inType = true;\n          this.expect(tok || types.colon);\n          var type = this.flowParseType();\n          this.state.inType = oldInType;\n          return type;\n        }\n      }, {\n        key: \"flowParsePredicate\",\n        value: function flowParsePredicate() {\n          var node = this.startNode();\n          var moduloLoc = this.state.startLoc;\n          var moduloPos = this.state.start;\n          this.expect(types.modulo);\n          var checksLoc = this.state.startLoc;\n          this.expectContextual(\"checks\");\n\n          if (moduloLoc.line !== checksLoc.line || moduloLoc.column !== checksLoc.column - 1) {\n            this.raise(moduloPos, \"Spaces between ´%´ and ´checks´ are not allowed here.\");\n          }\n\n          if (this.eat(types.parenL)) {\n            node.value = this.parseExpression();\n            this.expect(types.parenR);\n            return this.finishNode(node, \"DeclaredPredicate\");\n          } else {\n            return this.finishNode(node, \"InferredPredicate\");\n          }\n        }\n      }, {\n        key: \"flowParseTypeAndPredicateInitialiser\",\n        value: function flowParseTypeAndPredicateInitialiser() {\n          var oldInType = this.state.inType;\n          this.state.inType = true;\n          this.expect(types.colon);\n          var type = null;\n          var predicate = null;\n\n          if (this.match(types.modulo)) {\n            this.state.inType = oldInType;\n            predicate = this.flowParsePredicate();\n          } else {\n            type = this.flowParseType();\n            this.state.inType = oldInType;\n\n            if (this.match(types.modulo)) {\n              predicate = this.flowParsePredicate();\n            }\n          }\n\n          return [type, predicate];\n        }\n      }, {\n        key: \"flowParseDeclareClass\",\n        value: function flowParseDeclareClass(node) {\n          this.next();\n          this.flowParseInterfaceish(node, true);\n          return this.finishNode(node, \"DeclareClass\");\n        }\n      }, {\n        key: \"flowParseDeclareFunction\",\n        value: function flowParseDeclareFunction(node) {\n          this.next();\n          var id = node.id = this.parseIdentifier();\n          var typeNode = this.startNode();\n          var typeContainer = this.startNode();\n\n          if (this.isRelational(\"<\")) {\n            typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n          } else {\n            typeNode.typeParameters = null;\n          }\n\n          this.expect(types.parenL);\n          var tmp = this.flowParseFunctionTypeParams();\n          typeNode.params = tmp.params;\n          typeNode.rest = tmp.rest;\n          this.expect(types.parenR);\n\n          var _this$flowParseTypeAn = this.flowParseTypeAndPredicateInitialiser();\n\n          var _this$flowParseTypeAn2 = _slicedToArray(_this$flowParseTypeAn, 2);\n\n          typeNode.returnType = _this$flowParseTypeAn2[0];\n          node.predicate = _this$flowParseTypeAn2[1];\n          typeContainer.typeAnnotation = this.finishNode(typeNode, \"FunctionTypeAnnotation\");\n          id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n          this.resetEndLocation(id);\n          this.semicolon();\n          return this.finishNode(node, \"DeclareFunction\");\n        }\n      }, {\n        key: \"flowParseDeclare\",\n        value: function flowParseDeclare(node, insideModule) {\n          if (this.match(types._class)) {\n            return this.flowParseDeclareClass(node);\n          } else if (this.match(types._function)) {\n            return this.flowParseDeclareFunction(node);\n          } else if (this.match(types._var)) {\n            return this.flowParseDeclareVariable(node);\n          } else if (this.eatContextual(\"module\")) {\n            if (this.match(types.dot)) {\n              return this.flowParseDeclareModuleExports(node);\n            } else {\n              if (insideModule) {\n                this.raise(this.state.lastTokStart, \"`declare module` cannot be used inside another `declare module`\");\n              }\n\n              return this.flowParseDeclareModule(node);\n            }\n          } else if (this.isContextual(\"type\")) {\n            return this.flowParseDeclareTypeAlias(node);\n          } else if (this.isContextual(\"opaque\")) {\n            return this.flowParseDeclareOpaqueType(node);\n          } else if (this.isContextual(\"interface\")) {\n            return this.flowParseDeclareInterface(node);\n          } else if (this.match(types._export)) {\n            return this.flowParseDeclareExportDeclaration(node, insideModule);\n          } else {\n            throw this.unexpected();\n          }\n        }\n      }, {\n        key: \"flowParseDeclareVariable\",\n        value: function flowParseDeclareVariable(node) {\n          this.next();\n          node.id = this.flowParseTypeAnnotatableIdentifier(true);\n          this.scope.declareName(node.id.name, BIND_VAR, node.id.start);\n          this.semicolon();\n          return this.finishNode(node, \"DeclareVariable\");\n        }\n      }, {\n        key: \"flowParseDeclareModule\",\n        value: function flowParseDeclareModule(node) {\n          var _this4 = this;\n\n          this.scope.enter(SCOPE_OTHER);\n\n          if (this.match(types.string)) {\n            node.id = this.parseExprAtom();\n          } else {\n            node.id = this.parseIdentifier();\n          }\n\n          var bodyNode = node.body = this.startNode();\n          var body = bodyNode.body = [];\n          this.expect(types.braceL);\n\n          while (!this.match(types.braceR)) {\n            var _bodyNode = this.startNode();\n\n            if (this.match(types._import)) {\n              this.next();\n\n              if (!this.isContextual(\"type\") && !this.match(types._typeof)) {\n                this.raise(this.state.lastTokStart, \"Imports within a `declare module` body must always be `import type` or `import typeof`\");\n              }\n\n              this.parseImport(_bodyNode);\n            } else {\n              this.expectContextual(\"declare\", \"Only declares and type imports are allowed inside declare module\");\n              _bodyNode = this.flowParseDeclare(_bodyNode, true);\n            }\n\n            body.push(_bodyNode);\n          }\n\n          this.scope.exit();\n          this.expect(types.braceR);\n          this.finishNode(bodyNode, \"BlockStatement\");\n          var kind = null;\n          var hasModuleExport = false;\n          var errorMessage = \"Found both `declare module.exports` and `declare export` in the same module. \" + \"Modules can only have 1 since they are either an ES module or they are a CommonJS module\";\n          body.forEach(function (bodyElement) {\n            if (isEsModuleType(bodyElement)) {\n              if (kind === \"CommonJS\") {\n                _this4.raise(bodyElement.start, errorMessage);\n              }\n\n              kind = \"ES\";\n            } else if (bodyElement.type === \"DeclareModuleExports\") {\n              if (hasModuleExport) {\n                _this4.raise(bodyElement.start, \"Duplicate `declare module.exports` statement\");\n              }\n\n              if (kind === \"ES\") _this4.raise(bodyElement.start, errorMessage);\n              kind = \"CommonJS\";\n              hasModuleExport = true;\n            }\n          });\n          node.kind = kind || \"CommonJS\";\n          return this.finishNode(node, \"DeclareModule\");\n        }\n      }, {\n        key: \"flowParseDeclareExportDeclaration\",\n        value: function flowParseDeclareExportDeclaration(node, insideModule) {\n          this.expect(types._export);\n\n          if (this.eat(types._default)) {\n            if (this.match(types._function) || this.match(types._class)) {\n              node.declaration = this.flowParseDeclare(this.startNode());\n            } else {\n              node.declaration = this.flowParseType();\n              this.semicolon();\n            }\n\n            node.default = true;\n            return this.finishNode(node, \"DeclareExportDeclaration\");\n          } else {\n            if (this.match(types._const) || this.isLet() || (this.isContextual(\"type\") || this.isContextual(\"interface\")) && !insideModule) {\n              var label = this.state.value;\n              var suggestion = exportSuggestions[label];\n              this.unexpected(this.state.start, \"`declare export \" + label + \"` is not supported. Use `\" + suggestion + \"` instead\");\n            }\n\n            if (this.match(types._var) || this.match(types._function) || this.match(types._class) || this.isContextual(\"opaque\")) {\n              node.declaration = this.flowParseDeclare(this.startNode());\n              node.default = false;\n              return this.finishNode(node, \"DeclareExportDeclaration\");\n            } else if (this.match(types.star) || this.match(types.braceL) || this.isContextual(\"interface\") || this.isContextual(\"type\") || this.isContextual(\"opaque\")) {\n              node = this.parseExport(node);\n\n              if (node.type === \"ExportNamedDeclaration\") {\n                node.type = \"ExportDeclaration\";\n                node.default = false;\n                delete node.exportKind;\n              }\n\n              node.type = \"Declare\" + node.type;\n              return node;\n            }\n          }\n\n          throw this.unexpected();\n        }\n      }, {\n        key: \"flowParseDeclareModuleExports\",\n        value: function flowParseDeclareModuleExports(node) {\n          this.next();\n          this.expectContextual(\"exports\");\n          node.typeAnnotation = this.flowParseTypeAnnotation();\n          this.semicolon();\n          return this.finishNode(node, \"DeclareModuleExports\");\n        }\n      }, {\n        key: \"flowParseDeclareTypeAlias\",\n        value: function flowParseDeclareTypeAlias(node) {\n          this.next();\n          this.flowParseTypeAlias(node);\n          node.type = \"DeclareTypeAlias\";\n          return node;\n        }\n      }, {\n        key: \"flowParseDeclareOpaqueType\",\n        value: function flowParseDeclareOpaqueType(node) {\n          this.next();\n          this.flowParseOpaqueType(node, true);\n          node.type = \"DeclareOpaqueType\";\n          return node;\n        }\n      }, {\n        key: \"flowParseDeclareInterface\",\n        value: function flowParseDeclareInterface(node) {\n          this.next();\n          this.flowParseInterfaceish(node);\n          return this.finishNode(node, \"DeclareInterface\");\n        }\n      }, {\n        key: \"flowParseInterfaceish\",\n        value: function flowParseInterfaceish(node) {\n          var isClass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n          node.id = this.flowParseRestrictedIdentifier(!isClass, true);\n          this.scope.declareName(node.id.name, isClass ? BIND_FUNCTION : BIND_LEXICAL, node.id.start);\n\n          if (this.isRelational(\"<\")) {\n            node.typeParameters = this.flowParseTypeParameterDeclaration();\n          } else {\n            node.typeParameters = null;\n          }\n\n          node.extends = [];\n          node.implements = [];\n          node.mixins = [];\n\n          if (this.eat(types._extends)) {\n            do {\n              node.extends.push(this.flowParseInterfaceExtends());\n            } while (!isClass && this.eat(types.comma));\n          }\n\n          if (this.isContextual(\"mixins\")) {\n            this.next();\n\n            do {\n              node.mixins.push(this.flowParseInterfaceExtends());\n            } while (this.eat(types.comma));\n          }\n\n          if (this.isContextual(\"implements\")) {\n            this.next();\n\n            do {\n              node.implements.push(this.flowParseInterfaceExtends());\n            } while (this.eat(types.comma));\n          }\n\n          node.body = this.flowParseObjectType({\n            allowStatic: isClass,\n            allowExact: false,\n            allowSpread: false,\n            allowProto: isClass,\n            allowInexact: false\n          });\n        }\n      }, {\n        key: \"flowParseInterfaceExtends\",\n        value: function flowParseInterfaceExtends() {\n          var node = this.startNode();\n          node.id = this.flowParseQualifiedTypeIdentifier();\n\n          if (this.isRelational(\"<\")) {\n            node.typeParameters = this.flowParseTypeParameterInstantiation();\n          } else {\n            node.typeParameters = null;\n          }\n\n          return this.finishNode(node, \"InterfaceExtends\");\n        }\n      }, {\n        key: \"flowParseInterface\",\n        value: function flowParseInterface(node) {\n          this.flowParseInterfaceish(node);\n          return this.finishNode(node, \"InterfaceDeclaration\");\n        }\n      }, {\n        key: \"checkNotUnderscore\",\n        value: function checkNotUnderscore(word) {\n          if (word === \"_\") {\n            this.raise(this.state.start, \"`_` is only allowed as a type argument to call or new\");\n          }\n        }\n      }, {\n        key: \"checkReservedType\",\n        value: function checkReservedType(word, startLoc, declaration) {\n          if (!reservedTypes.has(word)) return;\n\n          if (declaration) {\n            this.raise(startLoc, \"Cannot overwrite reserved type \" + word);\n            return;\n          }\n\n          this.raise(startLoc, \"Unexpected reserved type \" + word);\n        }\n      }, {\n        key: \"flowParseRestrictedIdentifier\",\n        value: function flowParseRestrictedIdentifier(liberal, declaration) {\n          this.checkReservedType(this.state.value, this.state.start, declaration);\n          return this.parseIdentifier(liberal);\n        }\n      }, {\n        key: \"flowParseTypeAlias\",\n        value: function flowParseTypeAlias(node) {\n          node.id = this.flowParseRestrictedIdentifier(false, true);\n          this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n          if (this.isRelational(\"<\")) {\n            node.typeParameters = this.flowParseTypeParameterDeclaration();\n          } else {\n            node.typeParameters = null;\n          }\n\n          node.right = this.flowParseTypeInitialiser(types.eq);\n          this.semicolon();\n          return this.finishNode(node, \"TypeAlias\");\n        }\n      }, {\n        key: \"flowParseOpaqueType\",\n        value: function flowParseOpaqueType(node, declare) {\n          this.expectContextual(\"type\");\n          node.id = this.flowParseRestrictedIdentifier(true, true);\n          this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n          if (this.isRelational(\"<\")) {\n            node.typeParameters = this.flowParseTypeParameterDeclaration();\n          } else {\n            node.typeParameters = null;\n          }\n\n          node.supertype = null;\n\n          if (this.match(types.colon)) {\n            node.supertype = this.flowParseTypeInitialiser(types.colon);\n          }\n\n          node.impltype = null;\n\n          if (!declare) {\n            node.impltype = this.flowParseTypeInitialiser(types.eq);\n          }\n\n          this.semicolon();\n          return this.finishNode(node, \"OpaqueType\");\n        }\n      }, {\n        key: \"flowParseTypeParameter\",\n        value: function flowParseTypeParameter() {\n          var requireDefault = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n          var nodeStart = this.state.start;\n          var node = this.startNode();\n          var variance = this.flowParseVariance();\n          var ident = this.flowParseTypeAnnotatableIdentifier();\n          node.name = ident.name;\n          node.variance = variance;\n          node.bound = ident.typeAnnotation;\n\n          if (this.match(types.eq)) {\n            this.eat(types.eq);\n            node.default = this.flowParseType();\n          } else {\n            if (requireDefault) {\n              this.raise(nodeStart, \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\");\n            }\n          }\n\n          return this.finishNode(node, \"TypeParameter\");\n        }\n      }, {\n        key: \"flowParseTypeParameterDeclaration\",\n        value: function flowParseTypeParameterDeclaration() {\n          var oldInType = this.state.inType;\n          var node = this.startNode();\n          node.params = [];\n          this.state.inType = true;\n\n          if (this.isRelational(\"<\") || this.match(types.jsxTagStart)) {\n            this.next();\n          } else {\n            this.unexpected();\n          }\n\n          var defaultRequired = false;\n\n          do {\n            var typeParameter = this.flowParseTypeParameter(defaultRequired);\n            node.params.push(typeParameter);\n\n            if (typeParameter.default) {\n              defaultRequired = true;\n            }\n\n            if (!this.isRelational(\">\")) {\n              this.expect(types.comma);\n            }\n          } while (!this.isRelational(\">\"));\n\n          this.expectRelational(\">\");\n          this.state.inType = oldInType;\n          return this.finishNode(node, \"TypeParameterDeclaration\");\n        }\n      }, {\n        key: \"flowParseTypeParameterInstantiation\",\n        value: function flowParseTypeParameterInstantiation() {\n          var node = this.startNode();\n          var oldInType = this.state.inType;\n          node.params = [];\n          this.state.inType = true;\n          this.expectRelational(\"<\");\n          var oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = false;\n\n          while (!this.isRelational(\">\")) {\n            node.params.push(this.flowParseType());\n\n            if (!this.isRelational(\">\")) {\n              this.expect(types.comma);\n            }\n          }\n\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          this.expectRelational(\">\");\n          this.state.inType = oldInType;\n          return this.finishNode(node, \"TypeParameterInstantiation\");\n        }\n      }, {\n        key: \"flowParseTypeParameterInstantiationCallOrNew\",\n        value: function flowParseTypeParameterInstantiationCallOrNew() {\n          var node = this.startNode();\n          var oldInType = this.state.inType;\n          node.params = [];\n          this.state.inType = true;\n          this.expectRelational(\"<\");\n\n          while (!this.isRelational(\">\")) {\n            node.params.push(this.flowParseTypeOrImplicitInstantiation());\n\n            if (!this.isRelational(\">\")) {\n              this.expect(types.comma);\n            }\n          }\n\n          this.expectRelational(\">\");\n          this.state.inType = oldInType;\n          return this.finishNode(node, \"TypeParameterInstantiation\");\n        }\n      }, {\n        key: \"flowParseInterfaceType\",\n        value: function flowParseInterfaceType() {\n          var node = this.startNode();\n          this.expectContextual(\"interface\");\n          node.extends = [];\n\n          if (this.eat(types._extends)) {\n            do {\n              node.extends.push(this.flowParseInterfaceExtends());\n            } while (this.eat(types.comma));\n          }\n\n          node.body = this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: false,\n            allowSpread: false,\n            allowProto: false,\n            allowInexact: false\n          });\n          return this.finishNode(node, \"InterfaceTypeAnnotation\");\n        }\n      }, {\n        key: \"flowParseObjectPropertyKey\",\n        value: function flowParseObjectPropertyKey() {\n          return this.match(types.num) || this.match(types.string) ? this.parseExprAtom() : this.parseIdentifier(true);\n        }\n      }, {\n        key: \"flowParseObjectTypeIndexer\",\n        value: function flowParseObjectTypeIndexer(node, isStatic, variance) {\n          node.static = isStatic;\n\n          if (this.lookahead().type === types.colon) {\n            node.id = this.flowParseObjectPropertyKey();\n            node.key = this.flowParseTypeInitialiser();\n          } else {\n            node.id = null;\n            node.key = this.flowParseType();\n          }\n\n          this.expect(types.bracketR);\n          node.value = this.flowParseTypeInitialiser();\n          node.variance = variance;\n          return this.finishNode(node, \"ObjectTypeIndexer\");\n        }\n      }, {\n        key: \"flowParseObjectTypeInternalSlot\",\n        value: function flowParseObjectTypeInternalSlot(node, isStatic) {\n          node.static = isStatic;\n          node.id = this.flowParseObjectPropertyKey();\n          this.expect(types.bracketR);\n          this.expect(types.bracketR);\n\n          if (this.isRelational(\"<\") || this.match(types.parenL)) {\n            node.method = true;\n            node.optional = false;\n            node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n          } else {\n            node.method = false;\n\n            if (this.eat(types.question)) {\n              node.optional = true;\n            }\n\n            node.value = this.flowParseTypeInitialiser();\n          }\n\n          return this.finishNode(node, \"ObjectTypeInternalSlot\");\n        }\n      }, {\n        key: \"flowParseObjectTypeMethodish\",\n        value: function flowParseObjectTypeMethodish(node) {\n          node.params = [];\n          node.rest = null;\n          node.typeParameters = null;\n\n          if (this.isRelational(\"<\")) {\n            node.typeParameters = this.flowParseTypeParameterDeclaration();\n          }\n\n          this.expect(types.parenL);\n\n          while (!this.match(types.parenR) && !this.match(types.ellipsis)) {\n            node.params.push(this.flowParseFunctionTypeParam());\n\n            if (!this.match(types.parenR)) {\n              this.expect(types.comma);\n            }\n          }\n\n          if (this.eat(types.ellipsis)) {\n            node.rest = this.flowParseFunctionTypeParam();\n          }\n\n          this.expect(types.parenR);\n          node.returnType = this.flowParseTypeInitialiser();\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n        }\n      }, {\n        key: \"flowParseObjectTypeCallProperty\",\n        value: function flowParseObjectTypeCallProperty(node, isStatic) {\n          var valueNode = this.startNode();\n          node.static = isStatic;\n          node.value = this.flowParseObjectTypeMethodish(valueNode);\n          return this.finishNode(node, \"ObjectTypeCallProperty\");\n        }\n      }, {\n        key: \"flowParseObjectType\",\n        value: function flowParseObjectType(_ref2) {\n          var allowStatic = _ref2.allowStatic,\n              allowExact = _ref2.allowExact,\n              allowSpread = _ref2.allowSpread,\n              allowProto = _ref2.allowProto,\n              allowInexact = _ref2.allowInexact;\n          var oldInType = this.state.inType;\n          this.state.inType = true;\n          var nodeStart = this.startNode();\n          nodeStart.callProperties = [];\n          nodeStart.properties = [];\n          nodeStart.indexers = [];\n          nodeStart.internalSlots = [];\n          var endDelim;\n          var exact;\n          var inexact = false;\n\n          if (allowExact && this.match(types.braceBarL)) {\n            this.expect(types.braceBarL);\n            endDelim = types.braceBarR;\n            exact = true;\n          } else {\n            this.expect(types.braceL);\n            endDelim = types.braceR;\n            exact = false;\n          }\n\n          nodeStart.exact = exact;\n\n          while (!this.match(endDelim)) {\n            var isStatic = false;\n            var protoStart = null;\n            var inexactStart = null;\n            var node = this.startNode();\n\n            if (allowProto && this.isContextual(\"proto\")) {\n              var lookahead = this.lookahead();\n\n              if (lookahead.type !== types.colon && lookahead.type !== types.question) {\n                this.next();\n                protoStart = this.state.start;\n                allowStatic = false;\n              }\n            }\n\n            if (allowStatic && this.isContextual(\"static\")) {\n              var _lookahead = this.lookahead();\n\n              if (_lookahead.type !== types.colon && _lookahead.type !== types.question) {\n                this.next();\n                isStatic = true;\n              }\n            }\n\n            var variance = this.flowParseVariance();\n\n            if (this.eat(types.bracketL)) {\n              if (protoStart != null) {\n                this.unexpected(protoStart);\n              }\n\n              if (this.eat(types.bracketL)) {\n                if (variance) {\n                  this.unexpected(variance.start);\n                }\n\n                nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic));\n              } else {\n                nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));\n              }\n            } else if (this.match(types.parenL) || this.isRelational(\"<\")) {\n              if (protoStart != null) {\n                this.unexpected(protoStart);\n              }\n\n              if (variance) {\n                this.unexpected(variance.start);\n              }\n\n              nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));\n            } else {\n              var kind = \"init\";\n\n              if (this.isContextual(\"get\") || this.isContextual(\"set\")) {\n                var _lookahead2 = this.lookahead();\n\n                if (_lookahead2.type === types.name || _lookahead2.type === types.string || _lookahead2.type === types.num) {\n                  kind = this.state.value;\n                  this.next();\n                }\n              }\n\n              var propOrInexact = this.flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact != null ? allowInexact : !exact);\n\n              if (propOrInexact === null) {\n                inexact = true;\n                inexactStart = this.state.lastTokStart;\n              } else {\n                nodeStart.properties.push(propOrInexact);\n              }\n            }\n\n            this.flowObjectTypeSemicolon();\n\n            if (inexactStart && !this.match(types.braceR) && !this.match(types.braceBarR)) {\n              this.raise(inexactStart, \"Explicit inexact syntax must appear at the end of an inexact object\");\n            }\n          }\n\n          this.expect(endDelim);\n\n          if (allowSpread) {\n            nodeStart.inexact = inexact;\n          }\n\n          var out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n          this.state.inType = oldInType;\n          return out;\n        }\n      }, {\n        key: \"flowParseObjectTypeProperty\",\n        value: function flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact) {\n          if (this.eat(types.ellipsis)) {\n            var isInexactToken = this.match(types.comma) || this.match(types.semi) || this.match(types.braceR) || this.match(types.braceBarR);\n\n            if (isInexactToken) {\n              if (!allowSpread) {\n                this.raise(this.state.lastTokStart, \"Explicit inexact syntax cannot appear in class or interface definitions\");\n              } else if (!allowInexact) {\n                this.raise(this.state.lastTokStart, \"Explicit inexact syntax cannot appear inside an explicit exact object type\");\n              }\n\n              if (variance) {\n                this.raise(variance.start, \"Explicit inexact syntax cannot have variance\");\n              }\n\n              return null;\n            }\n\n            if (!allowSpread) {\n              this.raise(this.state.lastTokStart, \"Spread operator cannot appear in class or interface definitions\");\n            }\n\n            if (protoStart != null) {\n              this.unexpected(protoStart);\n            }\n\n            if (variance) {\n              this.raise(variance.start, \"Spread properties cannot have variance\");\n            }\n\n            node.argument = this.flowParseType();\n            return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n          } else {\n            node.key = this.flowParseObjectPropertyKey();\n            node.static = isStatic;\n            node.proto = protoStart != null;\n            node.kind = kind;\n            var optional = false;\n\n            if (this.isRelational(\"<\") || this.match(types.parenL)) {\n              node.method = true;\n\n              if (protoStart != null) {\n                this.unexpected(protoStart);\n              }\n\n              if (variance) {\n                this.unexpected(variance.start);\n              }\n\n              node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n\n              if (kind === \"get\" || kind === \"set\") {\n                this.flowCheckGetterSetterParams(node);\n              }\n            } else {\n              if (kind !== \"init\") this.unexpected();\n              node.method = false;\n\n              if (this.eat(types.question)) {\n                optional = true;\n              }\n\n              node.value = this.flowParseTypeInitialiser();\n              node.variance = variance;\n            }\n\n            node.optional = optional;\n            return this.finishNode(node, \"ObjectTypeProperty\");\n          }\n        }\n      }, {\n        key: \"flowCheckGetterSetterParams\",\n        value: function flowCheckGetterSetterParams(property) {\n          var paramCount = property.kind === \"get\" ? 0 : 1;\n          var start = property.start;\n          var length = property.value.params.length + (property.value.rest ? 1 : 0);\n\n          if (length !== paramCount) {\n            if (property.kind === \"get\") {\n              this.raise(start, \"getter must not have any formal parameters\");\n            } else {\n              this.raise(start, \"setter must have exactly one formal parameter\");\n            }\n          }\n\n          if (property.kind === \"set\" && property.value.rest) {\n            this.raise(start, \"setter function argument must not be a rest parameter\");\n          }\n        }\n      }, {\n        key: \"flowObjectTypeSemicolon\",\n        value: function flowObjectTypeSemicolon() {\n          if (!this.eat(types.semi) && !this.eat(types.comma) && !this.match(types.braceR) && !this.match(types.braceBarR)) {\n            this.unexpected();\n          }\n        }\n      }, {\n        key: \"flowParseQualifiedTypeIdentifier\",\n        value: function flowParseQualifiedTypeIdentifier(startPos, startLoc, id) {\n          startPos = startPos || this.state.start;\n          startLoc = startLoc || this.state.startLoc;\n          var node = id || this.flowParseRestrictedIdentifier(true);\n\n          while (this.eat(types.dot)) {\n            var node2 = this.startNodeAt(startPos, startLoc);\n            node2.qualification = node;\n            node2.id = this.flowParseRestrictedIdentifier(true);\n            node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n          }\n\n          return node;\n        }\n      }, {\n        key: \"flowParseGenericType\",\n        value: function flowParseGenericType(startPos, startLoc, id) {\n          var node = this.startNodeAt(startPos, startLoc);\n          node.typeParameters = null;\n          node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n          if (this.isRelational(\"<\")) {\n            node.typeParameters = this.flowParseTypeParameterInstantiation();\n          }\n\n          return this.finishNode(node, \"GenericTypeAnnotation\");\n        }\n      }, {\n        key: \"flowParseTypeofType\",\n        value: function flowParseTypeofType() {\n          var node = this.startNode();\n          this.expect(types._typeof);\n          node.argument = this.flowParsePrimaryType();\n          return this.finishNode(node, \"TypeofTypeAnnotation\");\n        }\n      }, {\n        key: \"flowParseTupleType\",\n        value: function flowParseTupleType() {\n          var node = this.startNode();\n          node.types = [];\n          this.expect(types.bracketL);\n\n          while (this.state.pos < this.length && !this.match(types.bracketR)) {\n            node.types.push(this.flowParseType());\n            if (this.match(types.bracketR)) break;\n            this.expect(types.comma);\n          }\n\n          this.expect(types.bracketR);\n          return this.finishNode(node, \"TupleTypeAnnotation\");\n        }\n      }, {\n        key: \"flowParseFunctionTypeParam\",\n        value: function flowParseFunctionTypeParam() {\n          var name = null;\n          var optional = false;\n          var typeAnnotation = null;\n          var node = this.startNode();\n          var lh = this.lookahead();\n\n          if (lh.type === types.colon || lh.type === types.question) {\n            name = this.parseIdentifier();\n\n            if (this.eat(types.question)) {\n              optional = true;\n            }\n\n            typeAnnotation = this.flowParseTypeInitialiser();\n          } else {\n            typeAnnotation = this.flowParseType();\n          }\n\n          node.name = name;\n          node.optional = optional;\n          node.typeAnnotation = typeAnnotation;\n          return this.finishNode(node, \"FunctionTypeParam\");\n        }\n      }, {\n        key: \"reinterpretTypeAsFunctionTypeParam\",\n        value: function reinterpretTypeAsFunctionTypeParam(type) {\n          var node = this.startNodeAt(type.start, type.loc.start);\n          node.name = null;\n          node.optional = false;\n          node.typeAnnotation = type;\n          return this.finishNode(node, \"FunctionTypeParam\");\n        }\n      }, {\n        key: \"flowParseFunctionTypeParams\",\n        value: function flowParseFunctionTypeParams() {\n          var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n          var rest = null;\n\n          while (!this.match(types.parenR) && !this.match(types.ellipsis)) {\n            params.push(this.flowParseFunctionTypeParam());\n\n            if (!this.match(types.parenR)) {\n              this.expect(types.comma);\n            }\n          }\n\n          if (this.eat(types.ellipsis)) {\n            rest = this.flowParseFunctionTypeParam();\n          }\n\n          return {\n            params: params,\n            rest: rest\n          };\n        }\n      }, {\n        key: \"flowIdentToTypeAnnotation\",\n        value: function flowIdentToTypeAnnotation(startPos, startLoc, node, id) {\n          switch (id.name) {\n            case \"any\":\n              return this.finishNode(node, \"AnyTypeAnnotation\");\n\n            case \"bool\":\n            case \"boolean\":\n              return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n            case \"mixed\":\n              return this.finishNode(node, \"MixedTypeAnnotation\");\n\n            case \"empty\":\n              return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n            case \"number\":\n              return this.finishNode(node, \"NumberTypeAnnotation\");\n\n            case \"string\":\n              return this.finishNode(node, \"StringTypeAnnotation\");\n\n            default:\n              this.checkNotUnderscore(id.name);\n              return this.flowParseGenericType(startPos, startLoc, id);\n          }\n        }\n      }, {\n        key: \"flowParsePrimaryType\",\n        value: function flowParsePrimaryType() {\n          var startPos = this.state.start;\n          var startLoc = this.state.startLoc;\n          var node = this.startNode();\n          var tmp;\n          var type;\n          var isGroupedType = false;\n          var oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n          switch (this.state.type) {\n            case types.name:\n              if (this.isContextual(\"interface\")) {\n                return this.flowParseInterfaceType();\n              }\n\n              return this.flowIdentToTypeAnnotation(startPos, startLoc, node, this.parseIdentifier());\n\n            case types.braceL:\n              return this.flowParseObjectType({\n                allowStatic: false,\n                allowExact: false,\n                allowSpread: true,\n                allowProto: false,\n                allowInexact: true\n              });\n\n            case types.braceBarL:\n              return this.flowParseObjectType({\n                allowStatic: false,\n                allowExact: true,\n                allowSpread: true,\n                allowProto: false,\n                allowInexact: false\n              });\n\n            case types.bracketL:\n              this.state.noAnonFunctionType = false;\n              type = this.flowParseTupleType();\n              this.state.noAnonFunctionType = oldNoAnonFunctionType;\n              return type;\n\n            case types.relational:\n              if (this.state.value === \"<\") {\n                node.typeParameters = this.flowParseTypeParameterDeclaration();\n                this.expect(types.parenL);\n                tmp = this.flowParseFunctionTypeParams();\n                node.params = tmp.params;\n                node.rest = tmp.rest;\n                this.expect(types.parenR);\n                this.expect(types.arrow);\n                node.returnType = this.flowParseType();\n                return this.finishNode(node, \"FunctionTypeAnnotation\");\n              }\n\n              break;\n\n            case types.parenL:\n              this.next();\n\n              if (!this.match(types.parenR) && !this.match(types.ellipsis)) {\n                if (this.match(types.name)) {\n                  var token = this.lookahead().type;\n                  isGroupedType = token !== types.question && token !== types.colon;\n                } else {\n                  isGroupedType = true;\n                }\n              }\n\n              if (isGroupedType) {\n                this.state.noAnonFunctionType = false;\n                type = this.flowParseType();\n                this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n                if (this.state.noAnonFunctionType || !(this.match(types.comma) || this.match(types.parenR) && this.lookahead().type === types.arrow)) {\n                  this.expect(types.parenR);\n                  return type;\n                } else {\n                  this.eat(types.comma);\n                }\n              }\n\n              if (type) {\n                tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);\n              } else {\n                tmp = this.flowParseFunctionTypeParams();\n              }\n\n              node.params = tmp.params;\n              node.rest = tmp.rest;\n              this.expect(types.parenR);\n              this.expect(types.arrow);\n              node.returnType = this.flowParseType();\n              node.typeParameters = null;\n              return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n            case types.string:\n              return this.parseLiteral(this.state.value, \"StringLiteralTypeAnnotation\");\n\n            case types._true:\n            case types._false:\n              node.value = this.match(types._true);\n              this.next();\n              return this.finishNode(node, \"BooleanLiteralTypeAnnotation\");\n\n            case types.plusMin:\n              if (this.state.value === \"-\") {\n                this.next();\n\n                if (this.match(types.num)) {\n                  return this.parseLiteral(-this.state.value, \"NumberLiteralTypeAnnotation\", node.start, node.loc.start);\n                }\n\n                if (this.match(types.bigint)) {\n                  return this.parseLiteral(-this.state.value, \"BigIntLiteralTypeAnnotation\", node.start, node.loc.start);\n                }\n\n                throw this.raise(this.state.start, \"Unexpected token, expected \\\"number\\\" or \\\"bigint\\\"\");\n              }\n\n              this.unexpected();\n\n            case types.num:\n              return this.parseLiteral(this.state.value, \"NumberLiteralTypeAnnotation\");\n\n            case types.bigint:\n              return this.parseLiteral(this.state.value, \"BigIntLiteralTypeAnnotation\");\n\n            case types._void:\n              this.next();\n              return this.finishNode(node, \"VoidTypeAnnotation\");\n\n            case types._null:\n              this.next();\n              return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n            case types._this:\n              this.next();\n              return this.finishNode(node, \"ThisTypeAnnotation\");\n\n            case types.star:\n              this.next();\n              return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n            default:\n              if (this.state.type.keyword === \"typeof\") {\n                return this.flowParseTypeofType();\n              } else if (this.state.type.keyword) {\n                var label = this.state.type.label;\n                this.next();\n                return _get(_getPrototypeOf(_class2.prototype), \"createIdentifier\", this).call(this, node, label);\n              }\n\n          }\n\n          throw this.unexpected();\n        }\n      }, {\n        key: \"flowParsePostfixType\",\n        value: function flowParsePostfixType() {\n          var startPos = this.state.start,\n              startLoc = this.state.startLoc;\n          var type = this.flowParsePrimaryType();\n\n          while (this.match(types.bracketL) && !this.canInsertSemicolon()) {\n            var node = this.startNodeAt(startPos, startLoc);\n            node.elementType = type;\n            this.expect(types.bracketL);\n            this.expect(types.bracketR);\n            type = this.finishNode(node, \"ArrayTypeAnnotation\");\n          }\n\n          return type;\n        }\n      }, {\n        key: \"flowParsePrefixType\",\n        value: function flowParsePrefixType() {\n          var node = this.startNode();\n\n          if (this.eat(types.question)) {\n            node.typeAnnotation = this.flowParsePrefixType();\n            return this.finishNode(node, \"NullableTypeAnnotation\");\n          } else {\n            return this.flowParsePostfixType();\n          }\n        }\n      }, {\n        key: \"flowParseAnonFunctionWithoutParens\",\n        value: function flowParseAnonFunctionWithoutParens() {\n          var param = this.flowParsePrefixType();\n\n          if (!this.state.noAnonFunctionType && this.eat(types.arrow)) {\n            var node = this.startNodeAt(param.start, param.loc.start);\n            node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n            node.rest = null;\n            node.returnType = this.flowParseType();\n            node.typeParameters = null;\n            return this.finishNode(node, \"FunctionTypeAnnotation\");\n          }\n\n          return param;\n        }\n      }, {\n        key: \"flowParseIntersectionType\",\n        value: function flowParseIntersectionType() {\n          var node = this.startNode();\n          this.eat(types.bitwiseAND);\n          var type = this.flowParseAnonFunctionWithoutParens();\n          node.types = [type];\n\n          while (this.eat(types.bitwiseAND)) {\n            node.types.push(this.flowParseAnonFunctionWithoutParens());\n          }\n\n          return node.types.length === 1 ? type : this.finishNode(node, \"IntersectionTypeAnnotation\");\n        }\n      }, {\n        key: \"flowParseUnionType\",\n        value: function flowParseUnionType() {\n          var node = this.startNode();\n          this.eat(types.bitwiseOR);\n          var type = this.flowParseIntersectionType();\n          node.types = [type];\n\n          while (this.eat(types.bitwiseOR)) {\n            node.types.push(this.flowParseIntersectionType());\n          }\n\n          return node.types.length === 1 ? type : this.finishNode(node, \"UnionTypeAnnotation\");\n        }\n      }, {\n        key: \"flowParseType\",\n        value: function flowParseType() {\n          var oldInType = this.state.inType;\n          this.state.inType = true;\n          var type = this.flowParseUnionType();\n          this.state.inType = oldInType;\n          this.state.exprAllowed = this.state.exprAllowed || this.state.noAnonFunctionType;\n          return type;\n        }\n      }, {\n        key: \"flowParseTypeOrImplicitInstantiation\",\n        value: function flowParseTypeOrImplicitInstantiation() {\n          if (this.state.type === types.name && this.state.value === \"_\") {\n            var startPos = this.state.start;\n            var startLoc = this.state.startLoc;\n            var node = this.parseIdentifier();\n            return this.flowParseGenericType(startPos, startLoc, node);\n          } else {\n            return this.flowParseType();\n          }\n        }\n      }, {\n        key: \"flowParseTypeAnnotation\",\n        value: function flowParseTypeAnnotation() {\n          var node = this.startNode();\n          node.typeAnnotation = this.flowParseTypeInitialiser();\n          return this.finishNode(node, \"TypeAnnotation\");\n        }\n      }, {\n        key: \"flowParseTypeAnnotatableIdentifier\",\n        value: function flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {\n          var ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();\n\n          if (this.match(types.colon)) {\n            ident.typeAnnotation = this.flowParseTypeAnnotation();\n            this.resetEndLocation(ident);\n          }\n\n          return ident;\n        }\n      }, {\n        key: \"typeCastToParameter\",\n        value: function typeCastToParameter(node) {\n          node.expression.typeAnnotation = node.typeAnnotation;\n          this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n          return node.expression;\n        }\n      }, {\n        key: \"flowParseVariance\",\n        value: function flowParseVariance() {\n          var variance = null;\n\n          if (this.match(types.plusMin)) {\n            variance = this.startNode();\n\n            if (this.state.value === \"+\") {\n              variance.kind = \"plus\";\n            } else {\n              variance.kind = \"minus\";\n            }\n\n            this.next();\n            this.finishNode(variance, \"Variance\");\n          }\n\n          return variance;\n        }\n      }, {\n        key: \"parseFunctionBody\",\n        value: function parseFunctionBody(node, allowExpressionBody) {\n          var _this5 = this;\n\n          var isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n          if (allowExpressionBody) {\n            return this.forwardNoArrowParamsConversionAt(node, function () {\n              return _get(_getPrototypeOf(_class2.prototype), \"parseFunctionBody\", _this5).call(_this5, node, true, isMethod);\n            });\n          }\n\n          return _get(_getPrototypeOf(_class2.prototype), \"parseFunctionBody\", this).call(this, node, false, isMethod);\n        }\n      }, {\n        key: \"parseFunctionBodyAndFinish\",\n        value: function parseFunctionBodyAndFinish(node, type) {\n          var isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n          if (this.match(types.colon)) {\n            var typeNode = this.startNode();\n\n            var _this$flowParseTypeAn3 = this.flowParseTypeAndPredicateInitialiser();\n\n            var _this$flowParseTypeAn4 = _slicedToArray(_this$flowParseTypeAn3, 2);\n\n            typeNode.typeAnnotation = _this$flowParseTypeAn4[0];\n            node.predicate = _this$flowParseTypeAn4[1];\n            node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, \"TypeAnnotation\") : null;\n          }\n\n          _get(_getPrototypeOf(_class2.prototype), \"parseFunctionBodyAndFinish\", this).call(this, node, type, isMethod);\n        }\n      }, {\n        key: \"parseStatement\",\n        value: function parseStatement(context, topLevel) {\n          if (this.state.strict && this.match(types.name) && this.state.value === \"interface\") {\n            var node = this.startNode();\n            this.next();\n            return this.flowParseInterface(node);\n          } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n            var _node = this.startNode();\n\n            this.next();\n            return this.flowParseEnumDeclaration(_node);\n          } else {\n            var stmt = _get(_getPrototypeOf(_class2.prototype), \"parseStatement\", this).call(this, context, topLevel);\n\n            if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n              this.flowPragma = null;\n            }\n\n            return stmt;\n          }\n        }\n      }, {\n        key: \"parseExpressionStatement\",\n        value: function parseExpressionStatement(node, expr) {\n          if (expr.type === \"Identifier\") {\n            if (expr.name === \"declare\") {\n              if (this.match(types._class) || this.match(types.name) || this.match(types._function) || this.match(types._var) || this.match(types._export)) {\n                return this.flowParseDeclare(node);\n              }\n            } else if (this.match(types.name)) {\n              if (expr.name === \"interface\") {\n                return this.flowParseInterface(node);\n              } else if (expr.name === \"type\") {\n                return this.flowParseTypeAlias(node);\n              } else if (expr.name === \"opaque\") {\n                return this.flowParseOpaqueType(node, false);\n              }\n            }\n          }\n\n          return _get(_getPrototypeOf(_class2.prototype), \"parseExpressionStatement\", this).call(this, node, expr);\n        }\n      }, {\n        key: \"shouldParseExportDeclaration\",\n        value: function shouldParseExportDeclaration() {\n          return this.isContextual(\"type\") || this.isContextual(\"interface\") || this.isContextual(\"opaque\") || this.shouldParseEnums() && this.isContextual(\"enum\") || _get(_getPrototypeOf(_class2.prototype), \"shouldParseExportDeclaration\", this).call(this);\n        }\n      }, {\n        key: \"isExportDefaultSpecifier\",\n        value: function isExportDefaultSpecifier() {\n          if (this.match(types.name) && (this.state.value === \"type\" || this.state.value === \"interface\" || this.state.value === \"opaque\" || this.shouldParseEnums() && this.state.value === \"enum\")) {\n            return false;\n          }\n\n          return _get(_getPrototypeOf(_class2.prototype), \"isExportDefaultSpecifier\", this).call(this);\n        }\n      }, {\n        key: \"parseExportDefaultExpression\",\n        value: function parseExportDefaultExpression() {\n          if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n            var node = this.startNode();\n            this.next();\n            return this.flowParseEnumDeclaration(node);\n          }\n\n          return _get(_getPrototypeOf(_class2.prototype), \"parseExportDefaultExpression\", this).call(this);\n        }\n      }, {\n        key: \"parseConditional\",\n        value: function parseConditional(expr, noIn, startPos, startLoc, refNeedsArrowPos) {\n          var _this6 = this;\n\n          if (!this.match(types.question)) return expr;\n\n          if (refNeedsArrowPos) {\n            var result = this.tryParse(function () {\n              return _get(_getPrototypeOf(_class2.prototype), \"parseConditional\", _this6).call(_this6, expr, noIn, startPos, startLoc);\n            });\n\n            if (!result.node) {\n              refNeedsArrowPos.start = result.error.pos || this.state.start;\n              return expr;\n            }\n\n            if (result.error) this.state = result.failState;\n            return result.node;\n          }\n\n          this.expect(types.question);\n          var state = this.state.clone();\n          var originalNoArrowAt = this.state.noArrowAt;\n          var node = this.startNodeAt(startPos, startLoc);\n\n          var _this$tryParseConditi = this.tryParseConditionalConsequent(),\n              consequent = _this$tryParseConditi.consequent,\n              failed = _this$tryParseConditi.failed;\n\n          var _this$getArrowLikeExp = this.getArrowLikeExpressions(consequent),\n              _this$getArrowLikeExp2 = _slicedToArray(_this$getArrowLikeExp, 2),\n              valid = _this$getArrowLikeExp2[0],\n              invalid = _this$getArrowLikeExp2[1];\n\n          if (failed || invalid.length > 0) {\n            var noArrowAt = _toConsumableArray(originalNoArrowAt);\n\n            if (invalid.length > 0) {\n              this.state = state;\n              this.state.noArrowAt = noArrowAt;\n\n              for (var i = 0; i < invalid.length; i++) {\n                noArrowAt.push(invalid[i].start);\n              }\n\n              var _this$tryParseConditi2 = this.tryParseConditionalConsequent();\n\n              consequent = _this$tryParseConditi2.consequent;\n              failed = _this$tryParseConditi2.failed;\n\n              var _this$getArrowLikeExp3 = this.getArrowLikeExpressions(consequent);\n\n              var _this$getArrowLikeExp4 = _slicedToArray(_this$getArrowLikeExp3, 2);\n\n              valid = _this$getArrowLikeExp4[0];\n              invalid = _this$getArrowLikeExp4[1];\n            }\n\n            if (failed && valid.length > 1) {\n              this.raise(state.start, \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\");\n            }\n\n            if (failed && valid.length === 1) {\n              this.state = state;\n              this.state.noArrowAt = noArrowAt.concat(valid[0].start);\n\n              var _this$tryParseConditi3 = this.tryParseConditionalConsequent();\n\n              consequent = _this$tryParseConditi3.consequent;\n              failed = _this$tryParseConditi3.failed;\n            }\n          }\n\n          this.getArrowLikeExpressions(consequent, true);\n          this.state.noArrowAt = originalNoArrowAt;\n          this.expect(types.colon);\n          node.test = expr;\n          node.consequent = consequent;\n          node.alternate = this.forwardNoArrowParamsConversionAt(node, function () {\n            return _this6.parseMaybeAssign(noIn, undefined, undefined, undefined);\n          });\n          return this.finishNode(node, \"ConditionalExpression\");\n        }\n      }, {\n        key: \"tryParseConditionalConsequent\",\n        value: function tryParseConditionalConsequent() {\n          this.state.noArrowParamsConversionAt.push(this.state.start);\n          var consequent = this.parseMaybeAssign();\n          var failed = !this.match(types.colon);\n          this.state.noArrowParamsConversionAt.pop();\n          return {\n            consequent: consequent,\n            failed: failed\n          };\n        }\n      }, {\n        key: \"getArrowLikeExpressions\",\n        value: function getArrowLikeExpressions(node, disallowInvalid) {\n          var _this7 = this;\n\n          var stack = [node];\n          var arrows = [];\n\n          while (stack.length !== 0) {\n            var _node2 = stack.pop();\n\n            if (_node2.type === \"ArrowFunctionExpression\") {\n              if (_node2.typeParameters || !_node2.returnType) {\n                this.finishArrowValidation(_node2);\n              } else {\n                arrows.push(_node2);\n              }\n\n              stack.push(_node2.body);\n            } else if (_node2.type === \"ConditionalExpression\") {\n              stack.push(_node2.consequent);\n              stack.push(_node2.alternate);\n            }\n          }\n\n          if (disallowInvalid) {\n            arrows.forEach(function (node) {\n              return _this7.finishArrowValidation(node);\n            });\n            return [arrows, []];\n          }\n\n          return partition(arrows, function (node) {\n            return node.params.every(function (param) {\n              return _this7.isAssignable(param, true);\n            });\n          });\n        }\n      }, {\n        key: \"finishArrowValidation\",\n        value: function finishArrowValidation(node) {\n          var _node$extra;\n\n          this.toAssignableList(node.params, true, \"arrow function parameters\", (_node$extra = node.extra) == null ? void 0 : _node$extra.trailingComma);\n          this.scope.enter(functionFlags(false, false) | SCOPE_ARROW);\n\n          _get(_getPrototypeOf(_class2.prototype), \"checkParams\", this).call(this, node, false, true);\n\n          this.scope.exit();\n        }\n      }, {\n        key: \"forwardNoArrowParamsConversionAt\",\n        value: function forwardNoArrowParamsConversionAt(node, parse) {\n          var result;\n\n          if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n            this.state.noArrowParamsConversionAt.push(this.state.start);\n            result = parse();\n            this.state.noArrowParamsConversionAt.pop();\n          } else {\n            result = parse();\n          }\n\n          return result;\n        }\n      }, {\n        key: \"parseParenItem\",\n        value: function parseParenItem(node, startPos, startLoc) {\n          node = _get(_getPrototypeOf(_class2.prototype), \"parseParenItem\", this).call(this, node, startPos, startLoc);\n\n          if (this.eat(types.question)) {\n            node.optional = true;\n            this.resetEndLocation(node);\n          }\n\n          if (this.match(types.colon)) {\n            var typeCastNode = this.startNodeAt(startPos, startLoc);\n            typeCastNode.expression = node;\n            typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n            return this.finishNode(typeCastNode, \"TypeCastExpression\");\n          }\n\n          return node;\n        }\n      }, {\n        key: \"assertModuleNodeAllowed\",\n        value: function assertModuleNodeAllowed(node) {\n          if (node.type === \"ImportDeclaration\" && (node.importKind === \"type\" || node.importKind === \"typeof\") || node.type === \"ExportNamedDeclaration\" && node.exportKind === \"type\" || node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\") {\n            return;\n          }\n\n          _get(_getPrototypeOf(_class2.prototype), \"assertModuleNodeAllowed\", this).call(this, node);\n        }\n      }, {\n        key: \"parseExport\",\n        value: function parseExport(node) {\n          var decl = _get(_getPrototypeOf(_class2.prototype), \"parseExport\", this).call(this, node);\n\n          if (decl.type === \"ExportNamedDeclaration\" || decl.type === \"ExportAllDeclaration\") {\n            decl.exportKind = decl.exportKind || \"value\";\n          }\n\n          return decl;\n        }\n      }, {\n        key: \"parseExportDeclaration\",\n        value: function parseExportDeclaration(node) {\n          if (this.isContextual(\"type\")) {\n            node.exportKind = \"type\";\n            var declarationNode = this.startNode();\n            this.next();\n\n            if (this.match(types.braceL)) {\n              node.specifiers = this.parseExportSpecifiers();\n              this.parseExportFrom(node);\n              return null;\n            } else {\n              return this.flowParseTypeAlias(declarationNode);\n            }\n          } else if (this.isContextual(\"opaque\")) {\n            node.exportKind = \"type\";\n\n            var _declarationNode = this.startNode();\n\n            this.next();\n            return this.flowParseOpaqueType(_declarationNode, false);\n          } else if (this.isContextual(\"interface\")) {\n            node.exportKind = \"type\";\n\n            var _declarationNode2 = this.startNode();\n\n            this.next();\n            return this.flowParseInterface(_declarationNode2);\n          } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n            node.exportKind = \"value\";\n\n            var _declarationNode3 = this.startNode();\n\n            this.next();\n            return this.flowParseEnumDeclaration(_declarationNode3);\n          } else {\n            return _get(_getPrototypeOf(_class2.prototype), \"parseExportDeclaration\", this).call(this, node);\n          }\n        }\n      }, {\n        key: \"eatExportStar\",\n        value: function eatExportStar(node) {\n          if (_get(_getPrototypeOf(_class2.prototype), \"eatExportStar\", this).apply(this, arguments)) return true;\n\n          if (this.isContextual(\"type\") && this.lookahead().type === types.star) {\n            node.exportKind = \"type\";\n            this.next();\n            this.next();\n            return true;\n          }\n\n          return false;\n        }\n      }, {\n        key: \"maybeParseExportNamespaceSpecifier\",\n        value: function maybeParseExportNamespaceSpecifier(node) {\n          var pos = this.state.start;\n\n          var hasNamespace = _get(_getPrototypeOf(_class2.prototype), \"maybeParseExportNamespaceSpecifier\", this).call(this, node);\n\n          if (hasNamespace && node.exportKind === \"type\") {\n            this.unexpected(pos);\n          }\n\n          return hasNamespace;\n        }\n      }, {\n        key: \"parseClassId\",\n        value: function parseClassId(node, isStatement, optionalId) {\n          _get(_getPrototypeOf(_class2.prototype), \"parseClassId\", this).call(this, node, isStatement, optionalId);\n\n          if (this.isRelational(\"<\")) {\n            node.typeParameters = this.flowParseTypeParameterDeclaration();\n          }\n        }\n      }, {\n        key: \"getTokenFromCode\",\n        value: function getTokenFromCode(code) {\n          var next = this.input.charCodeAt(this.state.pos + 1);\n\n          if (code === 123 && next === 124) {\n            return this.finishOp(types.braceBarL, 2);\n          } else if (this.state.inType && (code === 62 || code === 60)) {\n            return this.finishOp(types.relational, 1);\n          } else if (isIteratorStart(code, next)) {\n            this.state.isIterator = true;\n            return _get(_getPrototypeOf(_class2.prototype), \"readWord\", this).call(this);\n          } else {\n            return _get(_getPrototypeOf(_class2.prototype), \"getTokenFromCode\", this).call(this, code);\n          }\n        }\n      }, {\n        key: \"isAssignable\",\n        value: function isAssignable(node, isBinding) {\n          var _this8 = this;\n\n          switch (node.type) {\n            case \"Identifier\":\n            case \"ObjectPattern\":\n            case \"ArrayPattern\":\n            case \"AssignmentPattern\":\n              return true;\n\n            case \"ObjectExpression\":\n              {\n                var _last = node.properties.length - 1;\n\n                return node.properties.every(function (prop, i) {\n                  return prop.type !== \"ObjectMethod\" && (i === _last || prop.type === \"SpreadElement\") && _this8.isAssignable(prop);\n                });\n              }\n\n            case \"ObjectProperty\":\n              return this.isAssignable(node.value);\n\n            case \"SpreadElement\":\n              return this.isAssignable(node.argument);\n\n            case \"ArrayExpression\":\n              return node.elements.every(function (element) {\n                return _this8.isAssignable(element);\n              });\n\n            case \"AssignmentExpression\":\n              return node.operator === \"=\";\n\n            case \"ParenthesizedExpression\":\n            case \"TypeCastExpression\":\n              return this.isAssignable(node.expression);\n\n            case \"MemberExpression\":\n            case \"OptionalMemberExpression\":\n              return !isBinding;\n\n            default:\n              return false;\n          }\n        }\n      }, {\n        key: \"toAssignable\",\n        value: function toAssignable(node, isBinding, contextDescription) {\n          if (node.type === \"TypeCastExpression\") {\n            return _get(_getPrototypeOf(_class2.prototype), \"toAssignable\", this).call(this, this.typeCastToParameter(node), isBinding, contextDescription);\n          } else {\n            return _get(_getPrototypeOf(_class2.prototype), \"toAssignable\", this).call(this, node, isBinding, contextDescription);\n          }\n        }\n      }, {\n        key: \"toAssignableList\",\n        value: function toAssignableList(exprList, isBinding, contextDescription, trailingCommaPos) {\n          for (var i = 0; i < exprList.length; i++) {\n            var expr = exprList[i];\n\n            if (expr && expr.type === \"TypeCastExpression\") {\n              exprList[i] = this.typeCastToParameter(expr);\n            }\n          }\n\n          return _get(_getPrototypeOf(_class2.prototype), \"toAssignableList\", this).call(this, exprList, isBinding, contextDescription, trailingCommaPos);\n        }\n      }, {\n        key: \"toReferencedList\",\n        value: function toReferencedList(exprList, isParenthesizedExpr) {\n          for (var i = 0; i < exprList.length; i++) {\n            var expr = exprList[i];\n\n            if (expr && expr.type === \"TypeCastExpression\" && (!expr.extra || !expr.extra.parenthesized) && (exprList.length > 1 || !isParenthesizedExpr)) {\n              this.raise(expr.typeAnnotation.start, \"The type cast expression is expected to be wrapped with parenthesis\");\n            }\n          }\n\n          return exprList;\n        }\n      }, {\n        key: \"checkLVal\",\n        value: function checkLVal(expr) {\n          var bindingType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : BIND_NONE;\n          var checkClashes = arguments.length > 2 ? arguments[2] : undefined;\n          var contextDescription = arguments.length > 3 ? arguments[3] : undefined;\n\n          if (expr.type !== \"TypeCastExpression\") {\n            return _get(_getPrototypeOf(_class2.prototype), \"checkLVal\", this).call(this, expr, bindingType, checkClashes, contextDescription);\n          }\n        }\n      }, {\n        key: \"parseClassProperty\",\n        value: function parseClassProperty(node) {\n          if (this.match(types.colon)) {\n            node.typeAnnotation = this.flowParseTypeAnnotation();\n          }\n\n          return _get(_getPrototypeOf(_class2.prototype), \"parseClassProperty\", this).call(this, node);\n        }\n      }, {\n        key: \"parseClassPrivateProperty\",\n        value: function parseClassPrivateProperty(node) {\n          if (this.match(types.colon)) {\n            node.typeAnnotation = this.flowParseTypeAnnotation();\n          }\n\n          return _get(_getPrototypeOf(_class2.prototype), \"parseClassPrivateProperty\", this).call(this, node);\n        }\n      }, {\n        key: \"isClassMethod\",\n        value: function isClassMethod() {\n          return this.isRelational(\"<\") || _get(_getPrototypeOf(_class2.prototype), \"isClassMethod\", this).call(this);\n        }\n      }, {\n        key: \"isClassProperty\",\n        value: function isClassProperty() {\n          return this.match(types.colon) || _get(_getPrototypeOf(_class2.prototype), \"isClassProperty\", this).call(this);\n        }\n      }, {\n        key: \"isNonstaticConstructor\",\n        value: function isNonstaticConstructor(method) {\n          return !this.match(types.colon) && _get(_getPrototypeOf(_class2.prototype), \"isNonstaticConstructor\", this).call(this, method);\n        }\n      }, {\n        key: \"pushClassMethod\",\n        value: function pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n          if (method.variance) {\n            this.unexpected(method.variance.start);\n          }\n\n          delete method.variance;\n\n          if (this.isRelational(\"<\")) {\n            method.typeParameters = this.flowParseTypeParameterDeclaration();\n          }\n\n          _get(_getPrototypeOf(_class2.prototype), \"pushClassMethod\", this).call(this, classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n        }\n      }, {\n        key: \"pushClassPrivateMethod\",\n        value: function pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n          if (method.variance) {\n            this.unexpected(method.variance.start);\n          }\n\n          delete method.variance;\n\n          if (this.isRelational(\"<\")) {\n            method.typeParameters = this.flowParseTypeParameterDeclaration();\n          }\n\n          _get(_getPrototypeOf(_class2.prototype), \"pushClassPrivateMethod\", this).call(this, classBody, method, isGenerator, isAsync);\n        }\n      }, {\n        key: \"parseClassSuper\",\n        value: function parseClassSuper(node) {\n          _get(_getPrototypeOf(_class2.prototype), \"parseClassSuper\", this).call(this, node);\n\n          if (node.superClass && this.isRelational(\"<\")) {\n            node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n          }\n\n          if (this.isContextual(\"implements\")) {\n            this.next();\n            var implemented = node.implements = [];\n\n            do {\n              var _node3 = this.startNode();\n\n              _node3.id = this.flowParseRestrictedIdentifier(true);\n\n              if (this.isRelational(\"<\")) {\n                _node3.typeParameters = this.flowParseTypeParameterInstantiation();\n              } else {\n                _node3.typeParameters = null;\n              }\n\n              implemented.push(this.finishNode(_node3, \"ClassImplements\"));\n            } while (this.eat(types.comma));\n          }\n        }\n      }, {\n        key: \"parsePropertyName\",\n        value: function parsePropertyName(node) {\n          var variance = this.flowParseVariance();\n\n          var key = _get(_getPrototypeOf(_class2.prototype), \"parsePropertyName\", this).call(this, node);\n\n          node.variance = variance;\n          return key;\n        }\n      }, {\n        key: \"parseObjPropValue\",\n        value: function parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, refShorthandDefaultPos, containsEsc) {\n          if (prop.variance) {\n            this.unexpected(prop.variance.start);\n          }\n\n          delete prop.variance;\n          var typeParameters;\n\n          if (this.isRelational(\"<\")) {\n            typeParameters = this.flowParseTypeParameterDeclaration();\n            if (!this.match(types.parenL)) this.unexpected();\n          }\n\n          _get(_getPrototypeOf(_class2.prototype), \"parseObjPropValue\", this).call(this, prop, startPos, startLoc, isGenerator, isAsync, isPattern, refShorthandDefaultPos, containsEsc);\n\n          if (typeParameters) {\n            (prop.value || prop).typeParameters = typeParameters;\n          }\n        }\n      }, {\n        key: \"parseAssignableListItemTypes\",\n        value: function parseAssignableListItemTypes(param) {\n          if (this.eat(types.question)) {\n            if (param.type !== \"Identifier\") {\n              this.raise(param.start, \"A binding pattern parameter cannot be optional in an implementation signature.\");\n            }\n\n            param.optional = true;\n          }\n\n          if (this.match(types.colon)) {\n            param.typeAnnotation = this.flowParseTypeAnnotation();\n          }\n\n          this.resetEndLocation(param);\n          return param;\n        }\n      }, {\n        key: \"parseMaybeDefault\",\n        value: function parseMaybeDefault(startPos, startLoc, left) {\n          var node = _get(_getPrototypeOf(_class2.prototype), \"parseMaybeDefault\", this).call(this, startPos, startLoc, left);\n\n          if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n            this.raise(node.typeAnnotation.start, \"Type annotations must come before default assignments, \" + \"e.g. instead of `age = 25: number` use `age: number = 25`\");\n          }\n\n          return node;\n        }\n      }, {\n        key: \"shouldParseDefaultImport\",\n        value: function shouldParseDefaultImport(node) {\n          if (!hasTypeImportKind(node)) {\n            return _get(_getPrototypeOf(_class2.prototype), \"shouldParseDefaultImport\", this).call(this, node);\n          }\n\n          return isMaybeDefaultImport(this.state);\n        }\n      }, {\n        key: \"parseImportSpecifierLocal\",\n        value: function parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n          specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier();\n          this.checkLVal(specifier.local, BIND_LEXICAL, undefined, contextDescription);\n          node.specifiers.push(this.finishNode(specifier, type));\n        }\n      }, {\n        key: \"maybeParseDefaultImportSpecifier\",\n        value: function maybeParseDefaultImportSpecifier(node) {\n          node.importKind = \"value\";\n          var kind = null;\n\n          if (this.match(types._typeof)) {\n            kind = \"typeof\";\n          } else if (this.isContextual(\"type\")) {\n            kind = \"type\";\n          }\n\n          if (kind) {\n            var lh = this.lookahead();\n\n            if (kind === \"type\" && lh.type === types.star) {\n              this.unexpected(lh.start);\n            }\n\n            if (isMaybeDefaultImport(lh) || lh.type === types.braceL || lh.type === types.star) {\n              this.next();\n              node.importKind = kind;\n            }\n          }\n\n          return _get(_getPrototypeOf(_class2.prototype), \"maybeParseDefaultImportSpecifier\", this).call(this, node);\n        }\n      }, {\n        key: \"parseImportSpecifier\",\n        value: function parseImportSpecifier(node) {\n          var specifier = this.startNode();\n          var firstIdentLoc = this.state.start;\n          var firstIdent = this.parseIdentifier(true);\n          var specifierTypeKind = null;\n\n          if (firstIdent.name === \"type\") {\n            specifierTypeKind = \"type\";\n          } else if (firstIdent.name === \"typeof\") {\n            specifierTypeKind = \"typeof\";\n          }\n\n          var isBinding = false;\n\n          if (this.isContextual(\"as\") && !this.isLookaheadContextual(\"as\")) {\n            var as_ident = this.parseIdentifier(true);\n\n            if (specifierTypeKind !== null && !this.match(types.name) && !this.state.type.keyword) {\n              specifier.imported = as_ident;\n              specifier.importKind = specifierTypeKind;\n              specifier.local = as_ident.__clone();\n            } else {\n              specifier.imported = firstIdent;\n              specifier.importKind = null;\n              specifier.local = this.parseIdentifier();\n            }\n          } else if (specifierTypeKind !== null && (this.match(types.name) || this.state.type.keyword)) {\n            specifier.imported = this.parseIdentifier(true);\n            specifier.importKind = specifierTypeKind;\n\n            if (this.eatContextual(\"as\")) {\n              specifier.local = this.parseIdentifier();\n            } else {\n              isBinding = true;\n              specifier.local = specifier.imported.__clone();\n            }\n          } else {\n            isBinding = true;\n            specifier.imported = firstIdent;\n            specifier.importKind = null;\n            specifier.local = specifier.imported.__clone();\n          }\n\n          var nodeIsTypeImport = hasTypeImportKind(node);\n          var specifierIsTypeImport = hasTypeImportKind(specifier);\n\n          if (nodeIsTypeImport && specifierIsTypeImport) {\n            this.raise(firstIdentLoc, \"The `type` and `typeof` keywords on named imports can only be used on regular \" + \"`import` statements. It cannot be used with `import type` or `import typeof` statements\");\n          }\n\n          if (nodeIsTypeImport || specifierIsTypeImport) {\n            this.checkReservedType(specifier.local.name, specifier.local.start, true);\n          }\n\n          if (isBinding && !nodeIsTypeImport && !specifierIsTypeImport) {\n            this.checkReservedWord(specifier.local.name, specifier.start, true, true);\n          }\n\n          this.checkLVal(specifier.local, BIND_LEXICAL, undefined, \"import specifier\");\n          node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n        }\n      }, {\n        key: \"parseFunctionParams\",\n        value: function parseFunctionParams(node, allowModifiers) {\n          var kind = node.kind;\n\n          if (kind !== \"get\" && kind !== \"set\" && this.isRelational(\"<\")) {\n            node.typeParameters = this.flowParseTypeParameterDeclaration();\n          }\n\n          _get(_getPrototypeOf(_class2.prototype), \"parseFunctionParams\", this).call(this, node, allowModifiers);\n        }\n      }, {\n        key: \"parseVarId\",\n        value: function parseVarId(decl, kind) {\n          _get(_getPrototypeOf(_class2.prototype), \"parseVarId\", this).call(this, decl, kind);\n\n          if (this.match(types.colon)) {\n            decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n            this.resetEndLocation(decl.id);\n          }\n        }\n      }, {\n        key: \"parseAsyncArrowFromCallExpression\",\n        value: function parseAsyncArrowFromCallExpression(node, call) {\n          if (this.match(types.colon)) {\n            var oldNoAnonFunctionType = this.state.noAnonFunctionType;\n            this.state.noAnonFunctionType = true;\n            node.returnType = this.flowParseTypeAnnotation();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          }\n\n          return _get(_getPrototypeOf(_class2.prototype), \"parseAsyncArrowFromCallExpression\", this).call(this, node, call);\n        }\n      }, {\n        key: \"shouldParseAsyncArrow\",\n        value: function shouldParseAsyncArrow() {\n          return this.match(types.colon) || _get(_getPrototypeOf(_class2.prototype), \"shouldParseAsyncArrow\", this).call(this);\n        }\n      }, {\n        key: \"parseMaybeAssign\",\n        value: function parseMaybeAssign(noIn, refShorthandDefaultPos, afterLeftParse, refNeedsArrowPos) {\n          var _this9 = this;\n\n          var state = null;\n          var jsx;\n\n          if (this.hasPlugin(\"jsx\") && (this.match(types.jsxTagStart) || this.isRelational(\"<\"))) {\n            state = this.state.clone();\n            jsx = this.tryParse(function () {\n              return _get(_getPrototypeOf(_class2.prototype), \"parseMaybeAssign\", _this9).call(_this9, noIn, refShorthandDefaultPos, afterLeftParse, refNeedsArrowPos);\n            }, state);\n            if (!jsx.error) return jsx.node;\n            var context = this.state.context;\n\n            if (context[context.length - 1] === types$1.j_oTag) {\n              context.length -= 2;\n            } else if (context[context.length - 1] === types$1.j_expr) {\n              context.length -= 1;\n            }\n          }\n\n          if (jsx && jsx.error || this.isRelational(\"<\")) {\n            state = state || this.state.clone();\n            var typeParameters;\n            var arrow = this.tryParse(function () {\n              typeParameters = _this9.flowParseTypeParameterDeclaration();\n\n              var arrowExpression = _this9.forwardNoArrowParamsConversionAt(typeParameters, function () {\n                return _get(_getPrototypeOf(_class2.prototype), \"parseMaybeAssign\", _this9).call(_this9, noIn, refShorthandDefaultPos, afterLeftParse, refNeedsArrowPos);\n              });\n\n              arrowExpression.typeParameters = typeParameters;\n\n              _this9.resetStartLocationFromNode(arrowExpression, typeParameters);\n\n              return arrowExpression;\n            }, state);\n            var arrowExpression = arrow.node && arrow.node.type === \"ArrowFunctionExpression\" ? arrow.node : null;\n            if (!arrow.error && arrowExpression) return arrowExpression;\n\n            if (jsx && jsx.node) {\n              this.state = jsx.failState;\n              return jsx.node;\n            }\n\n            if (arrowExpression) {\n              this.state = arrow.failState;\n              return arrowExpression;\n            }\n\n            if (jsx && jsx.thrown) throw jsx.error;\n            if (arrow.thrown) throw arrow.error;\n            throw this.raise(typeParameters.start, \"Expected an arrow function after this type parameter declaration\");\n          }\n\n          return _get(_getPrototypeOf(_class2.prototype), \"parseMaybeAssign\", this).call(this, noIn, refShorthandDefaultPos, afterLeftParse, refNeedsArrowPos);\n        }\n      }, {\n        key: \"parseArrow\",\n        value: function parseArrow(node) {\n          var _this10 = this;\n\n          if (this.match(types.colon)) {\n            var result = this.tryParse(function () {\n              var oldNoAnonFunctionType = _this10.state.noAnonFunctionType;\n              _this10.state.noAnonFunctionType = true;\n\n              var typeNode = _this10.startNode();\n\n              var _this10$flowParseType = _this10.flowParseTypeAndPredicateInitialiser();\n\n              var _this10$flowParseType2 = _slicedToArray(_this10$flowParseType, 2);\n\n              typeNode.typeAnnotation = _this10$flowParseType2[0];\n              node.predicate = _this10$flowParseType2[1];\n              _this10.state.noAnonFunctionType = oldNoAnonFunctionType;\n              if (_this10.canInsertSemicolon()) _this10.unexpected();\n              if (!_this10.match(types.arrow)) _this10.unexpected();\n              return typeNode;\n            });\n            if (result.thrown) return null;\n            if (result.error) this.state = result.failState;\n            node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, \"TypeAnnotation\") : null;\n          }\n\n          return _get(_getPrototypeOf(_class2.prototype), \"parseArrow\", this).call(this, node);\n        }\n      }, {\n        key: \"shouldParseArrow\",\n        value: function shouldParseArrow() {\n          return this.match(types.colon) || _get(_getPrototypeOf(_class2.prototype), \"shouldParseArrow\", this).call(this);\n        }\n      }, {\n        key: \"setArrowFunctionParameters\",\n        value: function setArrowFunctionParameters(node, params) {\n          if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n            node.params = params;\n          } else {\n            _get(_getPrototypeOf(_class2.prototype), \"setArrowFunctionParameters\", this).call(this, node, params);\n          }\n        }\n      }, {\n        key: \"checkParams\",\n        value: function checkParams(node, allowDuplicates, isArrowFunction) {\n          if (isArrowFunction && this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n            return;\n          }\n\n          return _get(_getPrototypeOf(_class2.prototype), \"checkParams\", this).apply(this, arguments);\n        }\n      }, {\n        key: \"parseParenAndDistinguishExpression\",\n        value: function parseParenAndDistinguishExpression(canBeArrow) {\n          return _get(_getPrototypeOf(_class2.prototype), \"parseParenAndDistinguishExpression\", this).call(this, canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1);\n        }\n      }, {\n        key: \"parseSubscripts\",\n        value: function parseSubscripts(base, startPos, startLoc, noCalls) {\n          var _this11 = this;\n\n          if (base.type === \"Identifier\" && base.name === \"async\" && this.state.noArrowAt.indexOf(startPos) !== -1) {\n            this.next();\n            var node = this.startNodeAt(startPos, startLoc);\n            node.callee = base;\n            node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n            base = this.finishNode(node, \"CallExpression\");\n          } else if (base.type === \"Identifier\" && base.name === \"async\" && this.isRelational(\"<\")) {\n            var state = this.state.clone();\n            var arrow = this.tryParse(function (abort) {\n              return _this11.parseAsyncArrowWithTypeParameters(startPos, startLoc) || abort();\n            }, state);\n            if (!arrow.error && !arrow.aborted) return arrow.node;\n            var result = this.tryParse(function () {\n              return _get(_getPrototypeOf(_class2.prototype), \"parseSubscripts\", _this11).call(_this11, base, startPos, startLoc, noCalls);\n            }, state);\n            if (result.node && !result.error) return result.node;\n\n            if (arrow.node) {\n              this.state = arrow.failState;\n              return arrow.node;\n            }\n\n            if (result.node) {\n              this.state = result.failState;\n              return result.node;\n            }\n\n            throw arrow.error || result.error;\n          }\n\n          return _get(_getPrototypeOf(_class2.prototype), \"parseSubscripts\", this).call(this, base, startPos, startLoc, noCalls);\n        }\n      }, {\n        key: \"parseSubscript\",\n        value: function parseSubscript(base, startPos, startLoc, noCalls, subscriptState) {\n          var _this12 = this;\n\n          if (this.match(types.questionDot) && this.isLookaheadRelational(\"<\")) {\n            this.expectPlugin(\"optionalChaining\");\n            subscriptState.optionalChainMember = true;\n\n            if (noCalls) {\n              subscriptState.stop = true;\n              return base;\n            }\n\n            this.next();\n            var node = this.startNodeAt(startPos, startLoc);\n            node.callee = base;\n            node.typeArguments = this.flowParseTypeParameterInstantiation();\n            this.expect(types.parenL);\n            node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n            node.optional = true;\n            return this.finishCallExpression(node, true);\n          } else if (!noCalls && this.shouldParseTypes() && this.isRelational(\"<\")) {\n            var _node4 = this.startNodeAt(startPos, startLoc);\n\n            _node4.callee = base;\n            var result = this.tryParse(function () {\n              _node4.typeArguments = _this12.flowParseTypeParameterInstantiationCallOrNew();\n\n              _this12.expect(types.parenL);\n\n              _node4.arguments = _this12.parseCallExpressionArguments(types.parenR, false);\n              if (subscriptState.optionalChainMember) _node4.optional = false;\n              return _this12.finishCallExpression(_node4, subscriptState.optionalChainMember);\n            });\n\n            if (result.node) {\n              if (result.error) this.state = result.failState;\n              return result.node;\n            }\n          }\n\n          return _get(_getPrototypeOf(_class2.prototype), \"parseSubscript\", this).call(this, base, startPos, startLoc, noCalls, subscriptState);\n        }\n      }, {\n        key: \"parseNewArguments\",\n        value: function parseNewArguments(node) {\n          var _this13 = this;\n\n          var targs = null;\n\n          if (this.shouldParseTypes() && this.isRelational(\"<\")) {\n            targs = this.tryParse(function () {\n              return _this13.flowParseTypeParameterInstantiationCallOrNew();\n            }).node;\n          }\n\n          node.typeArguments = targs;\n\n          _get(_getPrototypeOf(_class2.prototype), \"parseNewArguments\", this).call(this, node);\n        }\n      }, {\n        key: \"parseAsyncArrowWithTypeParameters\",\n        value: function parseAsyncArrowWithTypeParameters(startPos, startLoc) {\n          var node = this.startNodeAt(startPos, startLoc);\n          this.parseFunctionParams(node);\n          if (!this.parseArrow(node)) return;\n          return this.parseArrowExpression(node, undefined, true);\n        }\n      }, {\n        key: \"readToken_mult_modulo\",\n        value: function readToken_mult_modulo(code) {\n          var next = this.input.charCodeAt(this.state.pos + 1);\n\n          if (code === 42 && next === 47 && this.state.hasFlowComment) {\n            this.state.hasFlowComment = false;\n            this.state.pos += 2;\n            this.nextToken();\n            return;\n          }\n\n          _get(_getPrototypeOf(_class2.prototype), \"readToken_mult_modulo\", this).call(this, code);\n        }\n      }, {\n        key: \"readToken_pipe_amp\",\n        value: function readToken_pipe_amp(code) {\n          var next = this.input.charCodeAt(this.state.pos + 1);\n\n          if (code === 124 && next === 125) {\n            this.finishOp(types.braceBarR, 2);\n            return;\n          }\n\n          _get(_getPrototypeOf(_class2.prototype), \"readToken_pipe_amp\", this).call(this, code);\n        }\n      }, {\n        key: \"parseTopLevel\",\n        value: function parseTopLevel(file, program) {\n          var fileNode = _get(_getPrototypeOf(_class2.prototype), \"parseTopLevel\", this).call(this, file, program);\n\n          if (this.state.hasFlowComment) {\n            this.raise(this.state.pos, \"Unterminated flow-comment\");\n          }\n\n          return fileNode;\n        }\n      }, {\n        key: \"skipBlockComment\",\n        value: function skipBlockComment() {\n          if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n            if (this.state.hasFlowComment) {\n              this.unexpected(null, \"Cannot have a flow comment inside another flow comment\");\n            }\n\n            this.hasFlowCommentCompletion();\n            this.state.pos += this.skipFlowComment();\n            this.state.hasFlowComment = true;\n            return;\n          }\n\n          if (this.state.hasFlowComment) {\n            var end = this.input.indexOf(\"*-/\", this.state.pos += 2);\n\n            if (end === -1) {\n              throw this.raise(this.state.pos - 2, \"Unterminated comment\");\n            }\n\n            this.state.pos = end + 3;\n            return;\n          }\n\n          _get(_getPrototypeOf(_class2.prototype), \"skipBlockComment\", this).call(this);\n        }\n      }, {\n        key: \"skipFlowComment\",\n        value: function skipFlowComment() {\n          var pos = this.state.pos;\n          var shiftToFirstNonWhiteSpace = 2;\n\n          while ([32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace))) {\n            shiftToFirstNonWhiteSpace++;\n          }\n\n          var ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n          var ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n          if (ch2 === 58 && ch3 === 58) {\n            return shiftToFirstNonWhiteSpace + 2;\n          }\n\n          if (this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) === \"flow-include\") {\n            return shiftToFirstNonWhiteSpace + 12;\n          }\n\n          if (ch2 === 58 && ch3 !== 58) {\n            return shiftToFirstNonWhiteSpace;\n          }\n\n          return false;\n        }\n      }, {\n        key: \"hasFlowCommentCompletion\",\n        value: function hasFlowCommentCompletion() {\n          var end = this.input.indexOf(\"*/\", this.state.pos);\n\n          if (end === -1) {\n            throw this.raise(this.state.pos, \"Unterminated comment\");\n          }\n        }\n      }, {\n        key: \"flowEnumErrorBooleanMemberNotInitialized\",\n        value: function flowEnumErrorBooleanMemberNotInitialized(pos, _ref3) {\n          var enumName = _ref3.enumName,\n              memberName = _ref3.memberName;\n          this.raise(pos, \"Boolean enum members need to be initialized. Use either `\" + memberName + \" = true,` \" + (\"or `\" + memberName + \" = false,` in enum `\" + enumName + \"`.\"));\n        }\n      }, {\n        key: \"flowEnumErrorInvalidMemberName\",\n        value: function flowEnumErrorInvalidMemberName(pos, _ref4) {\n          var enumName = _ref4.enumName,\n              memberName = _ref4.memberName;\n          var suggestion = memberName[0].toUpperCase() + memberName.slice(1);\n          this.raise(pos, \"Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \" + (\"`\" + memberName + \"`, consider using `\" + suggestion + \"`, in enum `\" + enumName + \"`.\"));\n        }\n      }, {\n        key: \"flowEnumErrorDuplicateMemberName\",\n        value: function flowEnumErrorDuplicateMemberName(pos, _ref5) {\n          var enumName = _ref5.enumName,\n              memberName = _ref5.memberName;\n          this.raise(pos, \"Enum member names need to be unique, but the name `\" + memberName + \"` has already been used \" + (\"before in enum `\" + enumName + \"`.\"));\n        }\n      }, {\n        key: \"flowEnumErrorInconsistentMemberValues\",\n        value: function flowEnumErrorInconsistentMemberValues(pos, _ref6) {\n          var enumName = _ref6.enumName;\n          this.raise(pos, \"Enum `\" + enumName + \"` has inconsistent member initializers. Either use no initializers, or \" + \"consistently use literals (either booleans, numbers, or strings) for all member initializers.\");\n        }\n      }, {\n        key: \"flowEnumErrorInvalidExplicitType\",\n        value: function flowEnumErrorInvalidExplicitType(pos, _ref7) {\n          var enumName = _ref7.enumName,\n              suppliedType = _ref7.suppliedType;\n          var suggestion = \"Use one of `boolean`, `number`, `string`, or `symbol` in \" + (\"enum `\" + enumName + \"`.\");\n          var message = suppliedType === null ? \"Supplied enum type is not valid. \" + suggestion : \"Enum type `\" + suppliedType + \"` is not valid. \" + suggestion;\n          return this.raise(pos, message);\n        }\n      }, {\n        key: \"flowEnumErrorInvalidMemberInitializer\",\n        value: function flowEnumErrorInvalidMemberInitializer(pos, _ref8) {\n          var enumName = _ref8.enumName,\n              explicitType = _ref8.explicitType,\n              memberName = _ref8.memberName;\n          var message = null;\n\n          switch (explicitType) {\n            case \"boolean\":\n            case \"number\":\n            case \"string\":\n              message = \"Enum `\" + enumName + \"` has type `\" + explicitType + \"`, so the initializer of \" + (\"`\" + memberName + \"` needs to be a \" + explicitType + \" literal.\");\n              break;\n\n            case \"symbol\":\n              message = \"Symbol enum members cannot be initialized. Use `\" + memberName + \",` in \" + (\"enum `\" + enumName + \"`.\");\n              break;\n\n            default:\n              message = \"The enum member initializer for `\" + memberName + \"` needs to be a literal (either \" + (\"a boolean, number, or string) in enum `\" + enumName + \"`.\");\n          }\n\n          return this.raise(pos, message);\n        }\n      }, {\n        key: \"flowEnumErrorNumberMemberNotInitialized\",\n        value: function flowEnumErrorNumberMemberNotInitialized(pos, _ref9) {\n          var enumName = _ref9.enumName,\n              memberName = _ref9.memberName;\n          this.raise(pos, \"Number enum members need to be initialized, e.g. `\" + memberName + \" = 1` in enum `\" + enumName + \"`.\");\n        }\n      }, {\n        key: \"flowEnumErrorStringMemberInconsistentlyInitailized\",\n        value: function flowEnumErrorStringMemberInconsistentlyInitailized(pos, _ref10) {\n          var enumName = _ref10.enumName;\n          this.raise(pos, \"String enum members need to consistently either all use initializers, or use no initializers, \" + (\"in enum `\" + enumName + \"`.\"));\n        }\n      }, {\n        key: \"flowEnumMemberInit\",\n        value: function flowEnumMemberInit() {\n          var _this14 = this;\n\n          var startPos = this.state.start;\n\n          var endOfInit = function endOfInit() {\n            return _this14.match(types.comma) || _this14.match(types.braceR);\n          };\n\n          switch (this.state.type) {\n            case types.num:\n              {\n                var _literal = this.parseLiteral(this.state.value, \"NumericLiteral\");\n\n                if (endOfInit()) {\n                  return {\n                    type: \"number\",\n                    pos: _literal.start,\n                    value: _literal\n                  };\n                }\n\n                return {\n                  type: \"invalid\",\n                  pos: startPos\n                };\n              }\n\n            case types.string:\n              {\n                var _literal2 = this.parseLiteral(this.state.value, \"StringLiteral\");\n\n                if (endOfInit()) {\n                  return {\n                    type: \"string\",\n                    pos: _literal2.start,\n                    value: _literal2\n                  };\n                }\n\n                return {\n                  type: \"invalid\",\n                  pos: startPos\n                };\n              }\n\n            case types._true:\n            case types._false:\n              {\n                var _literal3 = this.parseBooleanLiteral();\n\n                if (endOfInit()) {\n                  return {\n                    type: \"boolean\",\n                    pos: _literal3.start,\n                    value: _literal3\n                  };\n                }\n\n                return {\n                  type: \"invalid\",\n                  pos: startPos\n                };\n              }\n\n            default:\n              return {\n                type: \"invalid\",\n                pos: startPos\n              };\n          }\n        }\n      }, {\n        key: \"flowEnumMemberRaw\",\n        value: function flowEnumMemberRaw() {\n          var pos = this.state.start;\n          var id = this.parseIdentifier(true);\n          var init = this.eat(types.eq) ? this.flowEnumMemberInit() : {\n            type: \"none\",\n            pos: pos\n          };\n          return {\n            id: id,\n            init: init\n          };\n        }\n      }, {\n        key: \"flowEnumCheckExplicitTypeMismatch\",\n        value: function flowEnumCheckExplicitTypeMismatch(pos, context, expectedType) {\n          var explicitType = context.explicitType;\n\n          if (explicitType === null) {\n            return;\n          }\n\n          if (explicitType !== expectedType) {\n            this.flowEnumErrorInvalidMemberInitializer(pos, context);\n          }\n        }\n      }, {\n        key: \"flowEnumMembers\",\n        value: function flowEnumMembers(_ref11) {\n          var enumName = _ref11.enumName,\n              explicitType = _ref11.explicitType;\n          var seenNames = new Set();\n          var members = {\n            booleanMembers: [],\n            numberMembers: [],\n            stringMembers: [],\n            defaultedMembers: []\n          };\n\n          while (!this.match(types.braceR)) {\n            var memberNode = this.startNode();\n\n            var _this$flowEnumMemberR = this.flowEnumMemberRaw(),\n                id = _this$flowEnumMemberR.id,\n                init = _this$flowEnumMemberR.init;\n\n            var memberName = id.name;\n\n            if (memberName === \"\") {\n              continue;\n            }\n\n            if (/^[a-z]/.test(memberName)) {\n              this.flowEnumErrorInvalidMemberName(id.start, {\n                enumName: enumName,\n                memberName: memberName\n              });\n            }\n\n            if (seenNames.has(memberName)) {\n              this.flowEnumErrorDuplicateMemberName(id.start, {\n                enumName: enumName,\n                memberName: memberName\n              });\n            }\n\n            seenNames.add(memberName);\n            var context = {\n              enumName: enumName,\n              explicitType: explicitType,\n              memberName: memberName\n            };\n            memberNode.id = id;\n\n            switch (init.type) {\n              case \"boolean\":\n                {\n                  this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"boolean\");\n                  memberNode.init = init.value;\n                  members.booleanMembers.push(this.finishNode(memberNode, \"EnumBooleanMember\"));\n                  break;\n                }\n\n              case \"number\":\n                {\n                  this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"number\");\n                  memberNode.init = init.value;\n                  members.numberMembers.push(this.finishNode(memberNode, \"EnumNumberMember\"));\n                  break;\n                }\n\n              case \"string\":\n                {\n                  this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"string\");\n                  memberNode.init = init.value;\n                  members.stringMembers.push(this.finishNode(memberNode, \"EnumStringMember\"));\n                  break;\n                }\n\n              case \"invalid\":\n                {\n                  throw this.flowEnumErrorInvalidMemberInitializer(init.pos, context);\n                }\n\n              case \"none\":\n                {\n                  switch (explicitType) {\n                    case \"boolean\":\n                      this.flowEnumErrorBooleanMemberNotInitialized(init.pos, context);\n                      break;\n\n                    case \"number\":\n                      this.flowEnumErrorNumberMemberNotInitialized(init.pos, context);\n                      break;\n\n                    default:\n                      members.defaultedMembers.push(this.finishNode(memberNode, \"EnumDefaultedMember\"));\n                  }\n                }\n            }\n\n            if (!this.match(types.braceR)) {\n              this.expect(types.comma);\n            }\n          }\n\n          return members;\n        }\n      }, {\n        key: \"flowEnumStringMembers\",\n        value: function flowEnumStringMembers(initializedMembers, defaultedMembers, _ref12) {\n          var enumName = _ref12.enumName;\n\n          if (initializedMembers.length === 0) {\n            return defaultedMembers;\n          } else if (defaultedMembers.length === 0) {\n            return initializedMembers;\n          } else if (defaultedMembers.length > initializedMembers.length) {\n            for (var _i = 0; _i < initializedMembers.length; _i++) {\n              var member = initializedMembers[_i];\n              this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {\n                enumName: enumName\n              });\n            }\n\n            return defaultedMembers;\n          } else {\n            for (var _i2 = 0; _i2 < defaultedMembers.length; _i2++) {\n              var _member = defaultedMembers[_i2];\n              this.flowEnumErrorStringMemberInconsistentlyInitailized(_member.start, {\n                enumName: enumName\n              });\n            }\n\n            return initializedMembers;\n          }\n        }\n      }, {\n        key: \"flowEnumParseExplicitType\",\n        value: function flowEnumParseExplicitType(_ref13) {\n          var enumName = _ref13.enumName;\n\n          if (this.eatContextual(\"of\")) {\n            if (!this.match(types.name)) {\n              throw this.flowEnumErrorInvalidExplicitType(this.state.start, {\n                enumName: enumName,\n                suppliedType: null\n              });\n            }\n\n            var value = this.state.value;\n            this.next();\n\n            if (value !== \"boolean\" && value !== \"number\" && value !== \"string\" && value !== \"symbol\") {\n              this.flowEnumErrorInvalidExplicitType(this.state.start, {\n                enumName: enumName,\n                suppliedType: value\n              });\n            }\n\n            return value;\n          }\n\n          return null;\n        }\n      }, {\n        key: \"flowEnumBody\",\n        value: function flowEnumBody(node, _ref14) {\n          var _this15 = this;\n\n          var enumName = _ref14.enumName,\n              nameLoc = _ref14.nameLoc;\n          var explicitType = this.flowEnumParseExplicitType({\n            enumName: enumName\n          });\n          this.expect(types.braceL);\n          var members = this.flowEnumMembers({\n            enumName: enumName,\n            explicitType: explicitType\n          });\n\n          switch (explicitType) {\n            case \"boolean\":\n              node.explicitType = true;\n              node.members = members.booleanMembers;\n              this.expect(types.braceR);\n              return this.finishNode(node, \"EnumBooleanBody\");\n\n            case \"number\":\n              node.explicitType = true;\n              node.members = members.numberMembers;\n              this.expect(types.braceR);\n              return this.finishNode(node, \"EnumNumberBody\");\n\n            case \"string\":\n              node.explicitType = true;\n              node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n                enumName: enumName\n              });\n              this.expect(types.braceR);\n              return this.finishNode(node, \"EnumStringBody\");\n\n            case \"symbol\":\n              node.members = members.defaultedMembers;\n              this.expect(types.braceR);\n              return this.finishNode(node, \"EnumSymbolBody\");\n\n            default:\n              {\n                var empty = function empty() {\n                  node.members = [];\n\n                  _this15.expect(types.braceR);\n\n                  return _this15.finishNode(node, \"EnumStringBody\");\n                };\n\n                node.explicitType = false;\n                var boolsLen = members.booleanMembers.length;\n                var numsLen = members.numberMembers.length;\n                var strsLen = members.stringMembers.length;\n                var defaultedLen = members.defaultedMembers.length;\n\n                if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n                  return empty();\n                } else if (!boolsLen && !numsLen) {\n                  node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n                    enumName: enumName\n                  });\n                  this.expect(types.braceR);\n                  return this.finishNode(node, \"EnumStringBody\");\n                } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n                  for (var _i3 = 0, _members$defaultedMem = members.defaultedMembers; _i3 < _members$defaultedMem.length; _i3++) {\n                    var member = _members$defaultedMem[_i3];\n                    this.flowEnumErrorBooleanMemberNotInitialized(member.start, {\n                      enumName: enumName,\n                      memberName: member.id.name\n                    });\n                  }\n\n                  node.members = members.booleanMembers;\n                  this.expect(types.braceR);\n                  return this.finishNode(node, \"EnumBooleanBody\");\n                } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n                  for (var _i4 = 0, _members$defaultedMem2 = members.defaultedMembers; _i4 < _members$defaultedMem2.length; _i4++) {\n                    var _member2 = _members$defaultedMem2[_i4];\n                    this.flowEnumErrorNumberMemberNotInitialized(_member2.start, {\n                      enumName: enumName,\n                      memberName: _member2.id.name\n                    });\n                  }\n\n                  node.members = members.numberMembers;\n                  this.expect(types.braceR);\n                  return this.finishNode(node, \"EnumNumberBody\");\n                } else {\n                  this.flowEnumErrorInconsistentMemberValues(nameLoc, {\n                    enumName: enumName\n                  });\n                  return empty();\n                }\n              }\n          }\n        }\n      }, {\n        key: \"flowParseEnumDeclaration\",\n        value: function flowParseEnumDeclaration(node) {\n          var id = this.parseIdentifier();\n          node.id = id;\n          node.body = this.flowEnumBody(this.startNode(), {\n            enumName: id.name,\n            nameLoc: id.start\n          });\n          return this.finishNode(node, \"EnumDeclaration\");\n        }\n      }]);\n\n      return _class2;\n    }(superClass);\n  };\n\n  var entities = {\n    quot: \"\\\"\",\n    amp: \"&\",\n    apos: \"'\",\n    lt: \"<\",\n    gt: \">\",\n    nbsp: \"\\xA0\",\n    iexcl: \"\\xA1\",\n    cent: \"\\xA2\",\n    pound: \"\\xA3\",\n    curren: \"\\xA4\",\n    yen: \"\\xA5\",\n    brvbar: \"\\xA6\",\n    sect: \"\\xA7\",\n    uml: \"\\xA8\",\n    copy: \"\\xA9\",\n    ordf: \"\\xAA\",\n    laquo: \"\\xAB\",\n    not: \"\\xAC\",\n    shy: \"\\xAD\",\n    reg: \"\\xAE\",\n    macr: \"\\xAF\",\n    deg: \"\\xB0\",\n    plusmn: \"\\xB1\",\n    sup2: \"\\xB2\",\n    sup3: \"\\xB3\",\n    acute: \"\\xB4\",\n    micro: \"\\xB5\",\n    para: \"\\xB6\",\n    middot: \"\\xB7\",\n    cedil: \"\\xB8\",\n    sup1: \"\\xB9\",\n    ordm: \"\\xBA\",\n    raquo: \"\\xBB\",\n    frac14: \"\\xBC\",\n    frac12: \"\\xBD\",\n    frac34: \"\\xBE\",\n    iquest: \"\\xBF\",\n    Agrave: \"\\xC0\",\n    Aacute: \"\\xC1\",\n    Acirc: \"\\xC2\",\n    Atilde: \"\\xC3\",\n    Auml: \"\\xC4\",\n    Aring: \"\\xC5\",\n    AElig: \"\\xC6\",\n    Ccedil: \"\\xC7\",\n    Egrave: \"\\xC8\",\n    Eacute: \"\\xC9\",\n    Ecirc: \"\\xCA\",\n    Euml: \"\\xCB\",\n    Igrave: \"\\xCC\",\n    Iacute: \"\\xCD\",\n    Icirc: \"\\xCE\",\n    Iuml: \"\\xCF\",\n    ETH: \"\\xD0\",\n    Ntilde: \"\\xD1\",\n    Ograve: \"\\xD2\",\n    Oacute: \"\\xD3\",\n    Ocirc: \"\\xD4\",\n    Otilde: \"\\xD5\",\n    Ouml: \"\\xD6\",\n    times: \"\\xD7\",\n    Oslash: \"\\xD8\",\n    Ugrave: \"\\xD9\",\n    Uacute: \"\\xDA\",\n    Ucirc: \"\\xDB\",\n    Uuml: \"\\xDC\",\n    Yacute: \"\\xDD\",\n    THORN: \"\\xDE\",\n    szlig: \"\\xDF\",\n    agrave: \"\\xE0\",\n    aacute: \"\\xE1\",\n    acirc: \"\\xE2\",\n    atilde: \"\\xE3\",\n    auml: \"\\xE4\",\n    aring: \"\\xE5\",\n    aelig: \"\\xE6\",\n    ccedil: \"\\xE7\",\n    egrave: \"\\xE8\",\n    eacute: \"\\xE9\",\n    ecirc: \"\\xEA\",\n    euml: \"\\xEB\",\n    igrave: \"\\xEC\",\n    iacute: \"\\xED\",\n    icirc: \"\\xEE\",\n    iuml: \"\\xEF\",\n    eth: \"\\xF0\",\n    ntilde: \"\\xF1\",\n    ograve: \"\\xF2\",\n    oacute: \"\\xF3\",\n    ocirc: \"\\xF4\",\n    otilde: \"\\xF5\",\n    ouml: \"\\xF6\",\n    divide: \"\\xF7\",\n    oslash: \"\\xF8\",\n    ugrave: \"\\xF9\",\n    uacute: \"\\xFA\",\n    ucirc: \"\\xFB\",\n    uuml: \"\\xFC\",\n    yacute: \"\\xFD\",\n    thorn: \"\\xFE\",\n    yuml: \"\\xFF\",\n    OElig: \"\\u0152\",\n    oelig: \"\\u0153\",\n    Scaron: \"\\u0160\",\n    scaron: \"\\u0161\",\n    Yuml: \"\\u0178\",\n    fnof: \"\\u0192\",\n    circ: \"\\u02C6\",\n    tilde: \"\\u02DC\",\n    Alpha: \"\\u0391\",\n    Beta: \"\\u0392\",\n    Gamma: \"\\u0393\",\n    Delta: \"\\u0394\",\n    Epsilon: \"\\u0395\",\n    Zeta: \"\\u0396\",\n    Eta: \"\\u0397\",\n    Theta: \"\\u0398\",\n    Iota: \"\\u0399\",\n    Kappa: \"\\u039A\",\n    Lambda: \"\\u039B\",\n    Mu: \"\\u039C\",\n    Nu: \"\\u039D\",\n    Xi: \"\\u039E\",\n    Omicron: \"\\u039F\",\n    Pi: \"\\u03A0\",\n    Rho: \"\\u03A1\",\n    Sigma: \"\\u03A3\",\n    Tau: \"\\u03A4\",\n    Upsilon: \"\\u03A5\",\n    Phi: \"\\u03A6\",\n    Chi: \"\\u03A7\",\n    Psi: \"\\u03A8\",\n    Omega: \"\\u03A9\",\n    alpha: \"\\u03B1\",\n    beta: \"\\u03B2\",\n    gamma: \"\\u03B3\",\n    delta: \"\\u03B4\",\n    epsilon: \"\\u03B5\",\n    zeta: \"\\u03B6\",\n    eta: \"\\u03B7\",\n    theta: \"\\u03B8\",\n    iota: \"\\u03B9\",\n    kappa: \"\\u03BA\",\n    lambda: \"\\u03BB\",\n    mu: \"\\u03BC\",\n    nu: \"\\u03BD\",\n    xi: \"\\u03BE\",\n    omicron: \"\\u03BF\",\n    pi: \"\\u03C0\",\n    rho: \"\\u03C1\",\n    sigmaf: \"\\u03C2\",\n    sigma: \"\\u03C3\",\n    tau: \"\\u03C4\",\n    upsilon: \"\\u03C5\",\n    phi: \"\\u03C6\",\n    chi: \"\\u03C7\",\n    psi: \"\\u03C8\",\n    omega: \"\\u03C9\",\n    thetasym: \"\\u03D1\",\n    upsih: \"\\u03D2\",\n    piv: \"\\u03D6\",\n    ensp: \"\\u2002\",\n    emsp: \"\\u2003\",\n    thinsp: \"\\u2009\",\n    zwnj: \"\\u200C\",\n    zwj: \"\\u200D\",\n    lrm: \"\\u200E\",\n    rlm: \"\\u200F\",\n    ndash: \"\\u2013\",\n    mdash: \"\\u2014\",\n    lsquo: \"\\u2018\",\n    rsquo: \"\\u2019\",\n    sbquo: \"\\u201A\",\n    ldquo: \"\\u201C\",\n    rdquo: \"\\u201D\",\n    bdquo: \"\\u201E\",\n    dagger: \"\\u2020\",\n    Dagger: \"\\u2021\",\n    bull: \"\\u2022\",\n    hellip: \"\\u2026\",\n    permil: \"\\u2030\",\n    prime: \"\\u2032\",\n    Prime: \"\\u2033\",\n    lsaquo: \"\\u2039\",\n    rsaquo: \"\\u203A\",\n    oline: \"\\u203E\",\n    frasl: \"\\u2044\",\n    euro: \"\\u20AC\",\n    image: \"\\u2111\",\n    weierp: \"\\u2118\",\n    real: \"\\u211C\",\n    trade: \"\\u2122\",\n    alefsym: \"\\u2135\",\n    larr: \"\\u2190\",\n    uarr: \"\\u2191\",\n    rarr: \"\\u2192\",\n    darr: \"\\u2193\",\n    harr: \"\\u2194\",\n    crarr: \"\\u21B5\",\n    lArr: \"\\u21D0\",\n    uArr: \"\\u21D1\",\n    rArr: \"\\u21D2\",\n    dArr: \"\\u21D3\",\n    hArr: \"\\u21D4\",\n    forall: \"\\u2200\",\n    part: \"\\u2202\",\n    exist: \"\\u2203\",\n    empty: \"\\u2205\",\n    nabla: \"\\u2207\",\n    isin: \"\\u2208\",\n    notin: \"\\u2209\",\n    ni: \"\\u220B\",\n    prod: \"\\u220F\",\n    sum: \"\\u2211\",\n    minus: \"\\u2212\",\n    lowast: \"\\u2217\",\n    radic: \"\\u221A\",\n    prop: \"\\u221D\",\n    infin: \"\\u221E\",\n    ang: \"\\u2220\",\n    and: \"\\u2227\",\n    or: \"\\u2228\",\n    cap: \"\\u2229\",\n    cup: \"\\u222A\",\n    int: \"\\u222B\",\n    there4: \"\\u2234\",\n    sim: \"\\u223C\",\n    cong: \"\\u2245\",\n    asymp: \"\\u2248\",\n    ne: \"\\u2260\",\n    equiv: \"\\u2261\",\n    le: \"\\u2264\",\n    ge: \"\\u2265\",\n    sub: \"\\u2282\",\n    sup: \"\\u2283\",\n    nsub: \"\\u2284\",\n    sube: \"\\u2286\",\n    supe: \"\\u2287\",\n    oplus: \"\\u2295\",\n    otimes: \"\\u2297\",\n    perp: \"\\u22A5\",\n    sdot: \"\\u22C5\",\n    lceil: \"\\u2308\",\n    rceil: \"\\u2309\",\n    lfloor: \"\\u230A\",\n    rfloor: \"\\u230B\",\n    lang: \"\\u2329\",\n    rang: \"\\u232A\",\n    loz: \"\\u25CA\",\n    spades: \"\\u2660\",\n    clubs: \"\\u2663\",\n    hearts: \"\\u2665\",\n    diams: \"\\u2666\"\n  };\n  var HEX_NUMBER = /^[\\da-fA-F]+$/;\n  var DECIMAL_NUMBER = /^\\d+$/;\n  types$1.j_oTag = new TokContext(\"<tag\", false);\n  types$1.j_cTag = new TokContext(\"</tag\", false);\n  types$1.j_expr = new TokContext(\"<tag>...</tag>\", true, true);\n  types.jsxName = new TokenType(\"jsxName\");\n  types.jsxText = new TokenType(\"jsxText\", {\n    beforeExpr: true\n  });\n  types.jsxTagStart = new TokenType(\"jsxTagStart\", {\n    startsExpr: true\n  });\n  types.jsxTagEnd = new TokenType(\"jsxTagEnd\");\n\n  types.jsxTagStart.updateContext = function () {\n    this.state.context.push(types$1.j_expr);\n    this.state.context.push(types$1.j_oTag);\n    this.state.exprAllowed = false;\n  };\n\n  types.jsxTagEnd.updateContext = function (prevType) {\n    var out = this.state.context.pop();\n\n    if (out === types$1.j_oTag && prevType === types.slash || out === types$1.j_cTag) {\n      this.state.context.pop();\n      this.state.exprAllowed = this.curContext() === types$1.j_expr;\n    } else {\n      this.state.exprAllowed = true;\n    }\n  };\n\n  function isFragment(object) {\n    return object ? object.type === \"JSXOpeningFragment\" || object.type === \"JSXClosingFragment\" : false;\n  }\n\n  function getQualifiedJSXName(object) {\n    if (object.type === \"JSXIdentifier\") {\n      return object.name;\n    }\n\n    if (object.type === \"JSXNamespacedName\") {\n      return object.namespace.name + \":\" + object.name.name;\n    }\n\n    if (object.type === \"JSXMemberExpression\") {\n      return getQualifiedJSXName(object.object) + \".\" + getQualifiedJSXName(object.property);\n    }\n\n    throw new Error(\"Node had unexpected type: \" + object.type);\n  }\n\n  var jsx = function jsx(superClass) {\n    return function (_superClass3) {\n      _inherits(_class3, _superClass3);\n\n      function _class3() {\n        _classCallCheck(this, _class3);\n\n        return _possibleConstructorReturn(this, _getPrototypeOf(_class3).apply(this, arguments));\n      }\n\n      _createClass(_class3, [{\n        key: \"jsxReadToken\",\n        value: function jsxReadToken() {\n          var out = \"\";\n          var chunkStart = this.state.pos;\n\n          for (;;) {\n            if (this.state.pos >= this.length) {\n              throw this.raise(this.state.start, \"Unterminated JSX contents\");\n            }\n\n            var ch = this.input.charCodeAt(this.state.pos);\n\n            switch (ch) {\n              case 60:\n              case 123:\n                if (this.state.pos === this.state.start) {\n                  if (ch === 60 && this.state.exprAllowed) {\n                    ++this.state.pos;\n                    return this.finishToken(types.jsxTagStart);\n                  }\n\n                  return _get(_getPrototypeOf(_class3.prototype), \"getTokenFromCode\", this).call(this, ch);\n                }\n\n                out += this.input.slice(chunkStart, this.state.pos);\n                return this.finishToken(types.jsxText, out);\n\n              case 38:\n                out += this.input.slice(chunkStart, this.state.pos);\n                out += this.jsxReadEntity();\n                chunkStart = this.state.pos;\n                break;\n\n              default:\n                if (isNewLine(ch)) {\n                  out += this.input.slice(chunkStart, this.state.pos);\n                  out += this.jsxReadNewLine(true);\n                  chunkStart = this.state.pos;\n                } else {\n                  ++this.state.pos;\n                }\n\n            }\n          }\n        }\n      }, {\n        key: \"jsxReadNewLine\",\n        value: function jsxReadNewLine(normalizeCRLF) {\n          var ch = this.input.charCodeAt(this.state.pos);\n          var out;\n          ++this.state.pos;\n\n          if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {\n            ++this.state.pos;\n            out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n          } else {\n            out = String.fromCharCode(ch);\n          }\n\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          return out;\n        }\n      }, {\n        key: \"jsxReadString\",\n        value: function jsxReadString(quote) {\n          var out = \"\";\n          var chunkStart = ++this.state.pos;\n\n          for (;;) {\n            if (this.state.pos >= this.length) {\n              throw this.raise(this.state.start, \"Unterminated string constant\");\n            }\n\n            var ch = this.input.charCodeAt(this.state.pos);\n            if (ch === quote) break;\n\n            if (ch === 38) {\n              out += this.input.slice(chunkStart, this.state.pos);\n              out += this.jsxReadEntity();\n              chunkStart = this.state.pos;\n            } else if (isNewLine(ch)) {\n              out += this.input.slice(chunkStart, this.state.pos);\n              out += this.jsxReadNewLine(false);\n              chunkStart = this.state.pos;\n            } else {\n              ++this.state.pos;\n            }\n          }\n\n          out += this.input.slice(chunkStart, this.state.pos++);\n          return this.finishToken(types.string, out);\n        }\n      }, {\n        key: \"jsxReadEntity\",\n        value: function jsxReadEntity() {\n          var str = \"\";\n          var count = 0;\n          var entity;\n          var ch = this.input[this.state.pos];\n          var startPos = ++this.state.pos;\n\n          while (this.state.pos < this.length && count++ < 10) {\n            ch = this.input[this.state.pos++];\n\n            if (ch === \";\") {\n              if (str[0] === \"#\") {\n                if (str[1] === \"x\") {\n                  str = str.substr(2);\n\n                  if (HEX_NUMBER.test(str)) {\n                    entity = String.fromCodePoint(parseInt(str, 16));\n                  }\n                } else {\n                  str = str.substr(1);\n\n                  if (DECIMAL_NUMBER.test(str)) {\n                    entity = String.fromCodePoint(parseInt(str, 10));\n                  }\n                }\n              } else {\n                entity = entities[str];\n              }\n\n              break;\n            }\n\n            str += ch;\n          }\n\n          if (!entity) {\n            this.state.pos = startPos;\n            return \"&\";\n          }\n\n          return entity;\n        }\n      }, {\n        key: \"jsxReadWord\",\n        value: function jsxReadWord() {\n          var ch;\n          var start = this.state.pos;\n\n          do {\n            ch = this.input.charCodeAt(++this.state.pos);\n          } while (isIdentifierChar(ch) || ch === 45);\n\n          return this.finishToken(types.jsxName, this.input.slice(start, this.state.pos));\n        }\n      }, {\n        key: \"jsxParseIdentifier\",\n        value: function jsxParseIdentifier() {\n          var node = this.startNode();\n\n          if (this.match(types.jsxName)) {\n            node.name = this.state.value;\n          } else if (this.state.type.keyword) {\n            node.name = this.state.type.keyword;\n          } else {\n            this.unexpected();\n          }\n\n          this.next();\n          return this.finishNode(node, \"JSXIdentifier\");\n        }\n      }, {\n        key: \"jsxParseNamespacedName\",\n        value: function jsxParseNamespacedName() {\n          var startPos = this.state.start;\n          var startLoc = this.state.startLoc;\n          var name = this.jsxParseIdentifier();\n          if (!this.eat(types.colon)) return name;\n          var node = this.startNodeAt(startPos, startLoc);\n          node.namespace = name;\n          node.name = this.jsxParseIdentifier();\n          return this.finishNode(node, \"JSXNamespacedName\");\n        }\n      }, {\n        key: \"jsxParseElementName\",\n        value: function jsxParseElementName() {\n          var startPos = this.state.start;\n          var startLoc = this.state.startLoc;\n          var node = this.jsxParseNamespacedName();\n\n          if (node.type === \"JSXNamespacedName\") {\n            return node;\n          }\n\n          while (this.eat(types.dot)) {\n            var newNode = this.startNodeAt(startPos, startLoc);\n            newNode.object = node;\n            newNode.property = this.jsxParseIdentifier();\n            node = this.finishNode(newNode, \"JSXMemberExpression\");\n          }\n\n          return node;\n        }\n      }, {\n        key: \"jsxParseAttributeValue\",\n        value: function jsxParseAttributeValue() {\n          var node;\n\n          switch (this.state.type) {\n            case types.braceL:\n              node = this.startNode();\n              this.next();\n              node = this.jsxParseExpressionContainer(node);\n\n              if (node.expression.type === \"JSXEmptyExpression\") {\n                this.raise(node.start, \"JSX attributes must only be assigned a non-empty expression\");\n              }\n\n              return node;\n\n            case types.jsxTagStart:\n            case types.string:\n              return this.parseExprAtom();\n\n            default:\n              throw this.raise(this.state.start, \"JSX value should be either an expression or a quoted JSX text\");\n          }\n        }\n      }, {\n        key: \"jsxParseEmptyExpression\",\n        value: function jsxParseEmptyExpression() {\n          var node = this.startNodeAt(this.state.lastTokEnd, this.state.lastTokEndLoc);\n          return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.start, this.state.startLoc);\n        }\n      }, {\n        key: \"jsxParseSpreadChild\",\n        value: function jsxParseSpreadChild(node) {\n          this.next();\n          node.expression = this.parseExpression();\n          this.expect(types.braceR);\n          return this.finishNode(node, \"JSXSpreadChild\");\n        }\n      }, {\n        key: \"jsxParseExpressionContainer\",\n        value: function jsxParseExpressionContainer(node) {\n          if (this.match(types.braceR)) {\n            node.expression = this.jsxParseEmptyExpression();\n          } else {\n            node.expression = this.parseExpression();\n          }\n\n          this.expect(types.braceR);\n          return this.finishNode(node, \"JSXExpressionContainer\");\n        }\n      }, {\n        key: \"jsxParseAttribute\",\n        value: function jsxParseAttribute() {\n          var node = this.startNode();\n\n          if (this.eat(types.braceL)) {\n            this.expect(types.ellipsis);\n            node.argument = this.parseMaybeAssign();\n            this.expect(types.braceR);\n            return this.finishNode(node, \"JSXSpreadAttribute\");\n          }\n\n          node.name = this.jsxParseNamespacedName();\n          node.value = this.eat(types.eq) ? this.jsxParseAttributeValue() : null;\n          return this.finishNode(node, \"JSXAttribute\");\n        }\n      }, {\n        key: \"jsxParseOpeningElementAt\",\n        value: function jsxParseOpeningElementAt(startPos, startLoc) {\n          var node = this.startNodeAt(startPos, startLoc);\n\n          if (this.match(types.jsxTagEnd)) {\n            this.expect(types.jsxTagEnd);\n            return this.finishNode(node, \"JSXOpeningFragment\");\n          }\n\n          node.name = this.jsxParseElementName();\n          return this.jsxParseOpeningElementAfterName(node);\n        }\n      }, {\n        key: \"jsxParseOpeningElementAfterName\",\n        value: function jsxParseOpeningElementAfterName(node) {\n          var attributes = [];\n\n          while (!this.match(types.slash) && !this.match(types.jsxTagEnd)) {\n            attributes.push(this.jsxParseAttribute());\n          }\n\n          node.attributes = attributes;\n          node.selfClosing = this.eat(types.slash);\n          this.expect(types.jsxTagEnd);\n          return this.finishNode(node, \"JSXOpeningElement\");\n        }\n      }, {\n        key: \"jsxParseClosingElementAt\",\n        value: function jsxParseClosingElementAt(startPos, startLoc) {\n          var node = this.startNodeAt(startPos, startLoc);\n\n          if (this.match(types.jsxTagEnd)) {\n            this.expect(types.jsxTagEnd);\n            return this.finishNode(node, \"JSXClosingFragment\");\n          }\n\n          node.name = this.jsxParseElementName();\n          this.expect(types.jsxTagEnd);\n          return this.finishNode(node, \"JSXClosingElement\");\n        }\n      }, {\n        key: \"jsxParseElementAt\",\n        value: function jsxParseElementAt(startPos, startLoc) {\n          var node = this.startNodeAt(startPos, startLoc);\n          var children = [];\n          var openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n          var closingElement = null;\n\n          if (!openingElement.selfClosing) {\n            contents: for (;;) {\n              switch (this.state.type) {\n                case types.jsxTagStart:\n                  startPos = this.state.start;\n                  startLoc = this.state.startLoc;\n                  this.next();\n\n                  if (this.eat(types.slash)) {\n                    closingElement = this.jsxParseClosingElementAt(startPos, startLoc);\n                    break contents;\n                  }\n\n                  children.push(this.jsxParseElementAt(startPos, startLoc));\n                  break;\n\n                case types.jsxText:\n                  children.push(this.parseExprAtom());\n                  break;\n\n                case types.braceL:\n                  {\n                    var _node5 = this.startNode();\n\n                    this.next();\n\n                    if (this.match(types.ellipsis)) {\n                      children.push(this.jsxParseSpreadChild(_node5));\n                    } else {\n                      children.push(this.jsxParseExpressionContainer(_node5));\n                    }\n\n                    break;\n                  }\n\n                default:\n                  throw this.unexpected();\n              }\n            }\n\n            if (isFragment(openingElement) && !isFragment(closingElement)) {\n              this.raise(closingElement.start, \"Expected corresponding JSX closing tag for <>\");\n            } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n              this.raise(closingElement.start, \"Expected corresponding JSX closing tag for <\" + getQualifiedJSXName(openingElement.name) + \">\");\n            } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n              if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {\n                this.raise(closingElement.start, \"Expected corresponding JSX closing tag for <\" + getQualifiedJSXName(openingElement.name) + \">\");\n              }\n            }\n          }\n\n          if (isFragment(openingElement)) {\n            node.openingFragment = openingElement;\n            node.closingFragment = closingElement;\n          } else {\n            node.openingElement = openingElement;\n            node.closingElement = closingElement;\n          }\n\n          node.children = children;\n\n          if (this.isRelational(\"<\")) {\n            throw this.raise(this.state.start, \"Adjacent JSX elements must be wrapped in an enclosing tag. \" + \"Did you want a JSX fragment <>...</>?\");\n          }\n\n          return isFragment(openingElement) ? this.finishNode(node, \"JSXFragment\") : this.finishNode(node, \"JSXElement\");\n        }\n      }, {\n        key: \"jsxParseElement\",\n        value: function jsxParseElement() {\n          var startPos = this.state.start;\n          var startLoc = this.state.startLoc;\n          this.next();\n          return this.jsxParseElementAt(startPos, startLoc);\n        }\n      }, {\n        key: \"parseExprAtom\",\n        value: function parseExprAtom(refShortHandDefaultPos) {\n          if (this.match(types.jsxText)) {\n            return this.parseLiteral(this.state.value, \"JSXText\");\n          } else if (this.match(types.jsxTagStart)) {\n            return this.jsxParseElement();\n          } else if (this.isRelational(\"<\") && this.input.charCodeAt(this.state.pos) !== 33) {\n            this.finishToken(types.jsxTagStart);\n            return this.jsxParseElement();\n          } else {\n            return _get(_getPrototypeOf(_class3.prototype), \"parseExprAtom\", this).call(this, refShortHandDefaultPos);\n          }\n        }\n      }, {\n        key: \"getTokenFromCode\",\n        value: function getTokenFromCode(code) {\n          if (this.state.inPropertyName) return _get(_getPrototypeOf(_class3.prototype), \"getTokenFromCode\", this).call(this, code);\n          var context = this.curContext();\n\n          if (context === types$1.j_expr) {\n            return this.jsxReadToken();\n          }\n\n          if (context === types$1.j_oTag || context === types$1.j_cTag) {\n            if (isIdentifierStart(code)) {\n              return this.jsxReadWord();\n            }\n\n            if (code === 62) {\n              ++this.state.pos;\n              return this.finishToken(types.jsxTagEnd);\n            }\n\n            if ((code === 34 || code === 39) && context === types$1.j_oTag) {\n              return this.jsxReadString(code);\n            }\n          }\n\n          if (code === 60 && this.state.exprAllowed && this.input.charCodeAt(this.state.pos + 1) !== 33) {\n            ++this.state.pos;\n            return this.finishToken(types.jsxTagStart);\n          }\n\n          return _get(_getPrototypeOf(_class3.prototype), \"getTokenFromCode\", this).call(this, code);\n        }\n      }, {\n        key: \"updateContext\",\n        value: function updateContext(prevType) {\n          if (this.match(types.braceL)) {\n            var curContext = this.curContext();\n\n            if (curContext === types$1.j_oTag) {\n              this.state.context.push(types$1.braceExpression);\n            } else if (curContext === types$1.j_expr) {\n              this.state.context.push(types$1.templateQuasi);\n            } else {\n              _get(_getPrototypeOf(_class3.prototype), \"updateContext\", this).call(this, prevType);\n            }\n\n            this.state.exprAllowed = true;\n          } else if (this.match(types.slash) && prevType === types.jsxTagStart) {\n            this.state.context.length -= 2;\n            this.state.context.push(types$1.j_cTag);\n            this.state.exprAllowed = false;\n          } else {\n            return _get(_getPrototypeOf(_class3.prototype), \"updateContext\", this).call(this, prevType);\n          }\n        }\n      }]);\n\n      return _class3;\n    }(superClass);\n  };\n\n  var Scope = function Scope(flags) {\n    _classCallCheck(this, Scope);\n\n    this.var = [];\n    this.lexical = [];\n    this.functions = [];\n    this.flags = flags;\n  };\n\n  var ScopeHandler = function () {\n    function ScopeHandler(raise, inModule) {\n      _classCallCheck(this, ScopeHandler);\n\n      this.scopeStack = [];\n      this.undefinedExports = new Map();\n      this.raise = raise;\n      this.inModule = inModule;\n    }\n\n    _createClass(ScopeHandler, [{\n      key: \"createScope\",\n      value: function createScope(flags) {\n        return new Scope(flags);\n      }\n    }, {\n      key: \"enter\",\n      value: function enter(flags) {\n        this.scopeStack.push(this.createScope(flags));\n      }\n    }, {\n      key: \"exit\",\n      value: function exit() {\n        this.scopeStack.pop();\n      }\n    }, {\n      key: \"treatFunctionsAsVarInScope\",\n      value: function treatFunctionsAsVarInScope(scope) {\n        return !!(scope.flags & SCOPE_FUNCTION || !this.inModule && scope.flags & SCOPE_PROGRAM);\n      }\n    }, {\n      key: \"declareName\",\n      value: function declareName(name, bindingType, pos) {\n        var scope = this.currentScope();\n\n        if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n          this.checkRedeclarationInScope(scope, name, bindingType, pos);\n\n          if (bindingType & BIND_SCOPE_FUNCTION) {\n            scope.functions.push(name);\n          } else {\n            scope.lexical.push(name);\n          }\n\n          if (bindingType & BIND_SCOPE_LEXICAL) {\n            this.maybeExportDefined(scope, name);\n          }\n        } else if (bindingType & BIND_SCOPE_VAR) {\n          for (var i = this.scopeStack.length - 1; i >= 0; --i) {\n            scope = this.scopeStack[i];\n            this.checkRedeclarationInScope(scope, name, bindingType, pos);\n            scope.var.push(name);\n            this.maybeExportDefined(scope, name);\n            if (scope.flags & SCOPE_VAR) break;\n          }\n        }\n\n        if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n          this.undefinedExports.delete(name);\n        }\n      }\n    }, {\n      key: \"maybeExportDefined\",\n      value: function maybeExportDefined(scope, name) {\n        if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n          this.undefinedExports.delete(name);\n        }\n      }\n    }, {\n      key: \"checkRedeclarationInScope\",\n      value: function checkRedeclarationInScope(scope, name, bindingType, pos) {\n        if (this.isRedeclaredInScope(scope, name, bindingType)) {\n          this.raise(pos, \"Identifier '\" + name + \"' has already been declared\");\n        }\n      }\n    }, {\n      key: \"isRedeclaredInScope\",\n      value: function isRedeclaredInScope(scope, name, bindingType) {\n        if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n        if (bindingType & BIND_SCOPE_LEXICAL) {\n          return scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1;\n        }\n\n        if (bindingType & BIND_SCOPE_FUNCTION) {\n          return scope.lexical.indexOf(name) > -1 || !this.treatFunctionsAsVarInScope(scope) && scope.var.indexOf(name) > -1;\n        }\n\n        return scope.lexical.indexOf(name) > -1 && !(scope.flags & SCOPE_SIMPLE_CATCH && scope.lexical[0] === name) || !this.treatFunctionsAsVarInScope(scope) && scope.functions.indexOf(name) > -1;\n      }\n    }, {\n      key: \"checkLocalExport\",\n      value: function checkLocalExport(id) {\n        if (this.scopeStack[0].lexical.indexOf(id.name) === -1 && this.scopeStack[0].var.indexOf(id.name) === -1 && this.scopeStack[0].functions.indexOf(id.name) === -1) {\n          this.undefinedExports.set(id.name, id.start);\n        }\n      }\n    }, {\n      key: \"currentScope\",\n      value: function currentScope() {\n        return this.scopeStack[this.scopeStack.length - 1];\n      }\n    }, {\n      key: \"currentVarScope\",\n      value: function currentVarScope() {\n        for (var i = this.scopeStack.length - 1;; i--) {\n          var scope = this.scopeStack[i];\n\n          if (scope.flags & SCOPE_VAR) {\n            return scope;\n          }\n        }\n      }\n    }, {\n      key: \"currentThisScope\",\n      value: function currentThisScope() {\n        for (var i = this.scopeStack.length - 1;; i--) {\n          var scope = this.scopeStack[i];\n\n          if ((scope.flags & SCOPE_VAR || scope.flags & SCOPE_CLASS) && !(scope.flags & SCOPE_ARROW)) {\n            return scope;\n          }\n        }\n      }\n    }, {\n      key: \"inFunction\",\n      get: function get() {\n        return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0;\n      }\n    }, {\n      key: \"inGenerator\",\n      get: function get() {\n        return (this.currentVarScope().flags & SCOPE_GENERATOR) > 0;\n      }\n    }, {\n      key: \"inAsync\",\n      get: function get() {\n        return (this.currentVarScope().flags & SCOPE_ASYNC) > 0;\n      }\n    }, {\n      key: \"allowSuper\",\n      get: function get() {\n        return (this.currentThisScope().flags & SCOPE_SUPER) > 0;\n      }\n    }, {\n      key: \"allowDirectSuper\",\n      get: function get() {\n        return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0;\n      }\n    }, {\n      key: \"inClass\",\n      get: function get() {\n        return (this.currentThisScope().flags & SCOPE_CLASS) > 0;\n      }\n    }, {\n      key: \"inNonArrowFunction\",\n      get: function get() {\n        return (this.currentThisScope().flags & SCOPE_FUNCTION) > 0;\n      }\n    }, {\n      key: \"treatFunctionsAsVar\",\n      get: function get() {\n        return this.treatFunctionsAsVarInScope(this.currentScope());\n      }\n    }]);\n\n    return ScopeHandler;\n  }();\n\n  var TypeScriptScope = function (_Scope) {\n    _inherits(TypeScriptScope, _Scope);\n\n    function TypeScriptScope() {\n      var _getPrototypeOf2;\n\n      var _this16;\n\n      _classCallCheck(this, TypeScriptScope);\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this16 = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TypeScriptScope)).call.apply(_getPrototypeOf2, [this].concat(args)));\n      _this16.types = [];\n      _this16.enums = [];\n      _this16.constEnums = [];\n      _this16.classes = [];\n      _this16.exportOnlyBindings = [];\n      return _this16;\n    }\n\n    return TypeScriptScope;\n  }(Scope);\n\n  var TypeScriptScopeHandler = function (_ScopeHandler) {\n    _inherits(TypeScriptScopeHandler, _ScopeHandler);\n\n    function TypeScriptScopeHandler() {\n      _classCallCheck(this, TypeScriptScopeHandler);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(TypeScriptScopeHandler).apply(this, arguments));\n    }\n\n    _createClass(TypeScriptScopeHandler, [{\n      key: \"createScope\",\n      value: function createScope(flags) {\n        return new TypeScriptScope(flags);\n      }\n    }, {\n      key: \"declareName\",\n      value: function declareName(name, bindingType, pos) {\n        var scope = this.currentScope();\n\n        if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n          this.maybeExportDefined(scope, name);\n          scope.exportOnlyBindings.push(name);\n          return;\n        }\n\n        _get(_getPrototypeOf(TypeScriptScopeHandler.prototype), \"declareName\", this).apply(this, arguments);\n\n        if (bindingType & BIND_KIND_TYPE) {\n          if (!(bindingType & BIND_KIND_VALUE)) {\n            this.checkRedeclarationInScope(scope, name, bindingType, pos);\n            this.maybeExportDefined(scope, name);\n          }\n\n          scope.types.push(name);\n        }\n\n        if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.push(name);\n        if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.push(name);\n        if (bindingType & BIND_FLAGS_CLASS) scope.classes.push(name);\n      }\n    }, {\n      key: \"isRedeclaredInScope\",\n      value: function isRedeclaredInScope(scope, name, bindingType) {\n        if (scope.enums.indexOf(name) > -1) {\n          if (bindingType & BIND_FLAGS_TS_ENUM) {\n            var isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n            var wasConst = scope.constEnums.indexOf(name) > -1;\n            return isConst !== wasConst;\n          }\n\n          return true;\n        }\n\n        if (bindingType & BIND_FLAGS_CLASS && scope.classes.indexOf(name) > -1) {\n          if (scope.lexical.indexOf(name) > -1) {\n            return !!(bindingType & BIND_KIND_VALUE);\n          } else {\n            return false;\n          }\n        }\n\n        if (bindingType & BIND_KIND_TYPE && scope.types.indexOf(name) > -1) {\n          return true;\n        }\n\n        return _get(_getPrototypeOf(TypeScriptScopeHandler.prototype), \"isRedeclaredInScope\", this).apply(this, arguments);\n      }\n    }, {\n      key: \"checkLocalExport\",\n      value: function checkLocalExport(id) {\n        if (this.scopeStack[0].types.indexOf(id.name) === -1 && this.scopeStack[0].exportOnlyBindings.indexOf(id.name) === -1) {\n          _get(_getPrototypeOf(TypeScriptScopeHandler.prototype), \"checkLocalExport\", this).call(this, id);\n        }\n      }\n    }]);\n\n    return TypeScriptScopeHandler;\n  }(ScopeHandler);\n\n  function nonNull(x) {\n    if (x == null) {\n      throw new Error(\"Unexpected \" + x + \" value.\");\n    }\n\n    return x;\n  }\n\n  function assert(x) {\n    if (!x) {\n      throw new Error(\"Assert fail\");\n    }\n  }\n\n  function keywordTypeFromName(value) {\n    switch (value) {\n      case \"any\":\n        return \"TSAnyKeyword\";\n\n      case \"boolean\":\n        return \"TSBooleanKeyword\";\n\n      case \"bigint\":\n        return \"TSBigIntKeyword\";\n\n      case \"never\":\n        return \"TSNeverKeyword\";\n\n      case \"number\":\n        return \"TSNumberKeyword\";\n\n      case \"object\":\n        return \"TSObjectKeyword\";\n\n      case \"string\":\n        return \"TSStringKeyword\";\n\n      case \"symbol\":\n        return \"TSSymbolKeyword\";\n\n      case \"undefined\":\n        return \"TSUndefinedKeyword\";\n\n      case \"unknown\":\n        return \"TSUnknownKeyword\";\n\n      default:\n        return undefined;\n    }\n  }\n\n  var typescript = function typescript(superClass) {\n    return function (_superClass4) {\n      _inherits(_class4, _superClass4);\n\n      function _class4() {\n        _classCallCheck(this, _class4);\n\n        return _possibleConstructorReturn(this, _getPrototypeOf(_class4).apply(this, arguments));\n      }\n\n      _createClass(_class4, [{\n        key: \"getScopeHandler\",\n        value: function getScopeHandler() {\n          return TypeScriptScopeHandler;\n        }\n      }, {\n        key: \"tsIsIdentifier\",\n        value: function tsIsIdentifier() {\n          return this.match(types.name);\n        }\n      }, {\n        key: \"tsNextTokenCanFollowModifier\",\n        value: function tsNextTokenCanFollowModifier() {\n          this.next();\n          return !this.hasPrecedingLineBreak() && !this.match(types.parenL) && !this.match(types.parenR) && !this.match(types.colon) && !this.match(types.eq) && !this.match(types.question) && !this.match(types.bang);\n        }\n      }, {\n        key: \"tsParseModifier\",\n        value: function tsParseModifier(allowedModifiers) {\n          if (!this.match(types.name)) {\n            return undefined;\n          }\n\n          var modifier = this.state.value;\n\n          if (allowedModifiers.indexOf(modifier) !== -1 && this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n            return modifier;\n          }\n\n          return undefined;\n        }\n      }, {\n        key: \"tsParseModifiers\",\n        value: function tsParseModifiers(allowedModifiers) {\n          var modifiers = Object.create(null);\n\n          while (true) {\n            var startPos = this.state.start;\n            var modifier = this.tsParseModifier(allowedModifiers);\n            if (!modifier) break;\n\n            if (Object.hasOwnProperty.call(modifiers, modifier)) {\n              this.raise(startPos, \"Duplicate modifier: '\" + modifier + \"'\");\n            }\n\n            modifiers[modifier] = true;\n          }\n\n          return modifiers;\n        }\n      }, {\n        key: \"tsIsListTerminator\",\n        value: function tsIsListTerminator(kind) {\n          switch (kind) {\n            case \"EnumMembers\":\n            case \"TypeMembers\":\n              return this.match(types.braceR);\n\n            case \"HeritageClauseElement\":\n              return this.match(types.braceL);\n\n            case \"TupleElementTypes\":\n              return this.match(types.bracketR);\n\n            case \"TypeParametersOrArguments\":\n              return this.isRelational(\">\");\n          }\n\n          throw new Error(\"Unreachable\");\n        }\n      }, {\n        key: \"tsParseList\",\n        value: function tsParseList(kind, parseElement) {\n          var result = [];\n\n          while (!this.tsIsListTerminator(kind)) {\n            result.push(parseElement());\n          }\n\n          return result;\n        }\n      }, {\n        key: \"tsParseDelimitedList\",\n        value: function tsParseDelimitedList(kind, parseElement) {\n          return nonNull(this.tsParseDelimitedListWorker(kind, parseElement, true));\n        }\n      }, {\n        key: \"tsParseDelimitedListWorker\",\n        value: function tsParseDelimitedListWorker(kind, parseElement, expectSuccess) {\n          var result = [];\n\n          while (true) {\n            if (this.tsIsListTerminator(kind)) {\n              break;\n            }\n\n            var element = parseElement();\n\n            if (element == null) {\n              return undefined;\n            }\n\n            result.push(element);\n\n            if (this.eat(types.comma)) {\n              continue;\n            }\n\n            if (this.tsIsListTerminator(kind)) {\n              break;\n            }\n\n            if (expectSuccess) {\n              this.expect(types.comma);\n            }\n\n            return undefined;\n          }\n\n          return result;\n        }\n      }, {\n        key: \"tsParseBracketedList\",\n        value: function tsParseBracketedList(kind, parseElement, bracket, skipFirstToken) {\n          if (!skipFirstToken) {\n            if (bracket) {\n              this.expect(types.bracketL);\n            } else {\n              this.expectRelational(\"<\");\n            }\n          }\n\n          var result = this.tsParseDelimitedList(kind, parseElement);\n\n          if (bracket) {\n            this.expect(types.bracketR);\n          } else {\n            this.expectRelational(\">\");\n          }\n\n          return result;\n        }\n      }, {\n        key: \"tsParseImportType\",\n        value: function tsParseImportType() {\n          var node = this.startNode();\n          this.expect(types._import);\n          this.expect(types.parenL);\n\n          if (!this.match(types.string)) {\n            this.raise(this.state.start, \"Argument in a type import must be a string literal\");\n          }\n\n          node.argument = this.parseExprAtom();\n          this.expect(types.parenR);\n\n          if (this.eat(types.dot)) {\n            node.qualifier = this.tsParseEntityName(true);\n          }\n\n          if (this.isRelational(\"<\")) {\n            node.typeParameters = this.tsParseTypeArguments();\n          }\n\n          return this.finishNode(node, \"TSImportType\");\n        }\n      }, {\n        key: \"tsParseEntityName\",\n        value: function tsParseEntityName(allowReservedWords) {\n          var entity = this.parseIdentifier();\n\n          while (this.eat(types.dot)) {\n            var node = this.startNodeAtNode(entity);\n            node.left = entity;\n            node.right = this.parseIdentifier(allowReservedWords);\n            entity = this.finishNode(node, \"TSQualifiedName\");\n          }\n\n          return entity;\n        }\n      }, {\n        key: \"tsParseTypeReference\",\n        value: function tsParseTypeReference() {\n          var node = this.startNode();\n          node.typeName = this.tsParseEntityName(false);\n\n          if (!this.hasPrecedingLineBreak() && this.isRelational(\"<\")) {\n            node.typeParameters = this.tsParseTypeArguments();\n          }\n\n          return this.finishNode(node, \"TSTypeReference\");\n        }\n      }, {\n        key: \"tsParseThisTypePredicate\",\n        value: function tsParseThisTypePredicate(lhs) {\n          this.next();\n          var node = this.startNodeAtNode(lhs);\n          node.parameterName = lhs;\n          node.typeAnnotation = this.tsParseTypeAnnotation(false);\n          return this.finishNode(node, \"TSTypePredicate\");\n        }\n      }, {\n        key: \"tsParseThisTypeNode\",\n        value: function tsParseThisTypeNode() {\n          var node = this.startNode();\n          this.next();\n          return this.finishNode(node, \"TSThisType\");\n        }\n      }, {\n        key: \"tsParseTypeQuery\",\n        value: function tsParseTypeQuery() {\n          var node = this.startNode();\n          this.expect(types._typeof);\n\n          if (this.match(types._import)) {\n            node.exprName = this.tsParseImportType();\n          } else {\n            node.exprName = this.tsParseEntityName(true);\n          }\n\n          return this.finishNode(node, \"TSTypeQuery\");\n        }\n      }, {\n        key: \"tsParseTypeParameter\",\n        value: function tsParseTypeParameter() {\n          var node = this.startNode();\n          node.name = this.parseIdentifierName(node.start);\n          node.constraint = this.tsEatThenParseType(types._extends);\n          node.default = this.tsEatThenParseType(types.eq);\n          return this.finishNode(node, \"TSTypeParameter\");\n        }\n      }, {\n        key: \"tsTryParseTypeParameters\",\n        value: function tsTryParseTypeParameters() {\n          if (this.isRelational(\"<\")) {\n            return this.tsParseTypeParameters();\n          }\n        }\n      }, {\n        key: \"tsParseTypeParameters\",\n        value: function tsParseTypeParameters() {\n          var node = this.startNode();\n\n          if (this.isRelational(\"<\") || this.match(types.jsxTagStart)) {\n            this.next();\n          } else {\n            this.unexpected();\n          }\n\n          node.params = this.tsParseBracketedList(\"TypeParametersOrArguments\", this.tsParseTypeParameter.bind(this), false, true);\n          return this.finishNode(node, \"TSTypeParameterDeclaration\");\n        }\n      }, {\n        key: \"tsTryNextParseConstantContext\",\n        value: function tsTryNextParseConstantContext() {\n          if (this.lookahead().type === types._const) {\n            this.next();\n            return this.tsParseTypeReference();\n          }\n\n          return null;\n        }\n      }, {\n        key: \"tsFillSignature\",\n        value: function tsFillSignature(returnToken, signature) {\n          var returnTokenRequired = returnToken === types.arrow;\n          signature.typeParameters = this.tsTryParseTypeParameters();\n          this.expect(types.parenL);\n          signature.parameters = this.tsParseBindingListForSignature();\n\n          if (returnTokenRequired) {\n            signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n          } else if (this.match(returnToken)) {\n            signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n          }\n        }\n      }, {\n        key: \"tsParseBindingListForSignature\",\n        value: function tsParseBindingListForSignature() {\n          var _this17 = this;\n\n          return this.parseBindingList(types.parenR, 41).map(function (pattern) {\n            if (pattern.type !== \"Identifier\" && pattern.type !== \"RestElement\" && pattern.type !== \"ObjectPattern\" && pattern.type !== \"ArrayPattern\") {\n              _this17.raise(pattern.start, \"Name in a signature must be an Identifier, ObjectPattern or ArrayPattern,\" + (\"instead got \" + pattern.type));\n            }\n\n            return pattern;\n          });\n        }\n      }, {\n        key: \"tsParseTypeMemberSemicolon\",\n        value: function tsParseTypeMemberSemicolon() {\n          if (!this.eat(types.comma)) {\n            this.semicolon();\n          }\n        }\n      }, {\n        key: \"tsParseSignatureMember\",\n        value: function tsParseSignatureMember(kind, node) {\n          this.tsFillSignature(types.colon, node);\n          this.tsParseTypeMemberSemicolon();\n          return this.finishNode(node, kind);\n        }\n      }, {\n        key: \"tsIsUnambiguouslyIndexSignature\",\n        value: function tsIsUnambiguouslyIndexSignature() {\n          this.next();\n          return this.eat(types.name) && this.match(types.colon);\n        }\n      }, {\n        key: \"tsTryParseIndexSignature\",\n        value: function tsTryParseIndexSignature(node) {\n          if (!(this.match(types.bracketL) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) {\n            return undefined;\n          }\n\n          this.expect(types.bracketL);\n          var id = this.parseIdentifier();\n          id.typeAnnotation = this.tsParseTypeAnnotation();\n          this.resetEndLocation(id);\n          this.expect(types.bracketR);\n          node.parameters = [id];\n          var type = this.tsTryParseTypeAnnotation();\n          if (type) node.typeAnnotation = type;\n          this.tsParseTypeMemberSemicolon();\n          return this.finishNode(node, \"TSIndexSignature\");\n        }\n      }, {\n        key: \"tsParsePropertyOrMethodSignature\",\n        value: function tsParsePropertyOrMethodSignature(node, readonly) {\n          if (this.eat(types.question)) node.optional = true;\n          var nodeAny = node;\n\n          if (!readonly && (this.match(types.parenL) || this.isRelational(\"<\"))) {\n            var method = nodeAny;\n            this.tsFillSignature(types.colon, method);\n            this.tsParseTypeMemberSemicolon();\n            return this.finishNode(method, \"TSMethodSignature\");\n          } else {\n            var property = nodeAny;\n            if (readonly) property.readonly = true;\n            var type = this.tsTryParseTypeAnnotation();\n            if (type) property.typeAnnotation = type;\n            this.tsParseTypeMemberSemicolon();\n            return this.finishNode(property, \"TSPropertySignature\");\n          }\n        }\n      }, {\n        key: \"tsParseTypeMember\",\n        value: function tsParseTypeMember() {\n          var node = this.startNode();\n\n          if (this.match(types.parenL) || this.isRelational(\"<\")) {\n            return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n          }\n\n          if (this.match(types._new)) {\n            var id = this.startNode();\n            this.next();\n\n            if (this.match(types.parenL) || this.isRelational(\"<\")) {\n              return this.tsParseSignatureMember(\"TSConstructSignatureDeclaration\", node);\n            } else {\n              node.key = this.createIdentifier(id, \"new\");\n              return this.tsParsePropertyOrMethodSignature(node, false);\n            }\n          }\n\n          var readonly = !!this.tsParseModifier([\"readonly\"]);\n          var idx = this.tsTryParseIndexSignature(node);\n\n          if (idx) {\n            if (readonly) node.readonly = true;\n            return idx;\n          }\n\n          this.parsePropertyName(node);\n          return this.tsParsePropertyOrMethodSignature(node, readonly);\n        }\n      }, {\n        key: \"tsParseTypeLiteral\",\n        value: function tsParseTypeLiteral() {\n          var node = this.startNode();\n          node.members = this.tsParseObjectTypeMembers();\n          return this.finishNode(node, \"TSTypeLiteral\");\n        }\n      }, {\n        key: \"tsParseObjectTypeMembers\",\n        value: function tsParseObjectTypeMembers() {\n          this.expect(types.braceL);\n          var members = this.tsParseList(\"TypeMembers\", this.tsParseTypeMember.bind(this));\n          this.expect(types.braceR);\n          return members;\n        }\n      }, {\n        key: \"tsIsStartOfMappedType\",\n        value: function tsIsStartOfMappedType() {\n          this.next();\n\n          if (this.eat(types.plusMin)) {\n            return this.isContextual(\"readonly\");\n          }\n\n          if (this.isContextual(\"readonly\")) {\n            this.next();\n          }\n\n          if (!this.match(types.bracketL)) {\n            return false;\n          }\n\n          this.next();\n\n          if (!this.tsIsIdentifier()) {\n            return false;\n          }\n\n          this.next();\n          return this.match(types._in);\n        }\n      }, {\n        key: \"tsParseMappedTypeParameter\",\n        value: function tsParseMappedTypeParameter() {\n          var node = this.startNode();\n          node.name = this.parseIdentifierName(node.start);\n          node.constraint = this.tsExpectThenParseType(types._in);\n          return this.finishNode(node, \"TSTypeParameter\");\n        }\n      }, {\n        key: \"tsParseMappedType\",\n        value: function tsParseMappedType() {\n          var node = this.startNode();\n          this.expect(types.braceL);\n\n          if (this.match(types.plusMin)) {\n            node.readonly = this.state.value;\n            this.next();\n            this.expectContextual(\"readonly\");\n          } else if (this.eatContextual(\"readonly\")) {\n            node.readonly = true;\n          }\n\n          this.expect(types.bracketL);\n          node.typeParameter = this.tsParseMappedTypeParameter();\n          this.expect(types.bracketR);\n\n          if (this.match(types.plusMin)) {\n            node.optional = this.state.value;\n            this.next();\n            this.expect(types.question);\n          } else if (this.eat(types.question)) {\n            node.optional = true;\n          }\n\n          node.typeAnnotation = this.tsTryParseType();\n          this.semicolon();\n          this.expect(types.braceR);\n          return this.finishNode(node, \"TSMappedType\");\n        }\n      }, {\n        key: \"tsParseTupleType\",\n        value: function tsParseTupleType() {\n          var _this18 = this;\n\n          var node = this.startNode();\n          node.elementTypes = this.tsParseBracketedList(\"TupleElementTypes\", this.tsParseTupleElementType.bind(this), true, false);\n          var seenOptionalElement = false;\n          node.elementTypes.forEach(function (elementNode) {\n            if (elementNode.type === \"TSOptionalType\") {\n              seenOptionalElement = true;\n            } else if (seenOptionalElement && elementNode.type !== \"TSRestType\") {\n              _this18.raise(elementNode.start, \"A required element cannot follow an optional element.\");\n            }\n          });\n          return this.finishNode(node, \"TSTupleType\");\n        }\n      }, {\n        key: \"tsParseTupleElementType\",\n        value: function tsParseTupleElementType() {\n          if (this.match(types.ellipsis)) {\n            var restNode = this.startNode();\n            this.next();\n            restNode.typeAnnotation = this.tsParseType();\n\n            if (this.match(types.comma) && this.lookaheadCharCode() !== 93) {\n              this.raiseRestNotLast(this.state.start);\n            }\n\n            return this.finishNode(restNode, \"TSRestType\");\n          }\n\n          var type = this.tsParseType();\n\n          if (this.eat(types.question)) {\n            var optionalTypeNode = this.startNodeAtNode(type);\n            optionalTypeNode.typeAnnotation = type;\n            return this.finishNode(optionalTypeNode, \"TSOptionalType\");\n          }\n\n          return type;\n        }\n      }, {\n        key: \"tsParseParenthesizedType\",\n        value: function tsParseParenthesizedType() {\n          var node = this.startNode();\n          this.expect(types.parenL);\n          node.typeAnnotation = this.tsParseType();\n          this.expect(types.parenR);\n          return this.finishNode(node, \"TSParenthesizedType\");\n        }\n      }, {\n        key: \"tsParseFunctionOrConstructorType\",\n        value: function tsParseFunctionOrConstructorType(type) {\n          var node = this.startNode();\n\n          if (type === \"TSConstructorType\") {\n            this.expect(types._new);\n          }\n\n          this.tsFillSignature(types.arrow, node);\n          return this.finishNode(node, type);\n        }\n      }, {\n        key: \"tsParseLiteralTypeNode\",\n        value: function tsParseLiteralTypeNode() {\n          var _this19 = this;\n\n          var node = this.startNode();\n\n          node.literal = function () {\n            switch (_this19.state.type) {\n              case types.num:\n              case types.string:\n              case types._true:\n              case types._false:\n                return _this19.parseExprAtom();\n\n              default:\n                throw _this19.unexpected();\n            }\n          }();\n\n          return this.finishNode(node, \"TSLiteralType\");\n        }\n      }, {\n        key: \"tsParseTemplateLiteralType\",\n        value: function tsParseTemplateLiteralType() {\n          var node = this.startNode();\n          var templateNode = this.parseTemplate(false);\n\n          if (templateNode.expressions.length > 0) {\n            this.raise(templateNode.expressions[0].start, \"Template literal types cannot have any substitution\");\n          }\n\n          node.literal = templateNode;\n          return this.finishNode(node, \"TSLiteralType\");\n        }\n      }, {\n        key: \"tsParseThisTypeOrThisTypePredicate\",\n        value: function tsParseThisTypeOrThisTypePredicate() {\n          var thisKeyword = this.tsParseThisTypeNode();\n\n          if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n            return this.tsParseThisTypePredicate(thisKeyword);\n          } else {\n            return thisKeyword;\n          }\n        }\n      }, {\n        key: \"tsParseNonArrayType\",\n        value: function tsParseNonArrayType() {\n          switch (this.state.type) {\n            case types.name:\n            case types._void:\n            case types._null:\n              {\n                var type = this.match(types._void) ? \"TSVoidKeyword\" : this.match(types._null) ? \"TSNullKeyword\" : keywordTypeFromName(this.state.value);\n\n                if (type !== undefined && this.lookaheadCharCode() !== 46) {\n                  var node = this.startNode();\n                  this.next();\n                  return this.finishNode(node, type);\n                }\n\n                return this.tsParseTypeReference();\n              }\n\n            case types.string:\n            case types.num:\n            case types._true:\n            case types._false:\n              return this.tsParseLiteralTypeNode();\n\n            case types.plusMin:\n              if (this.state.value === \"-\") {\n                var _node6 = this.startNode();\n\n                if (this.lookahead().type !== types.num) {\n                  throw this.unexpected();\n                }\n\n                _node6.literal = this.parseMaybeUnary();\n                return this.finishNode(_node6, \"TSLiteralType\");\n              }\n\n              break;\n\n            case types._this:\n              return this.tsParseThisTypeOrThisTypePredicate();\n\n            case types._typeof:\n              return this.tsParseTypeQuery();\n\n            case types._import:\n              return this.tsParseImportType();\n\n            case types.braceL:\n              return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();\n\n            case types.bracketL:\n              return this.tsParseTupleType();\n\n            case types.parenL:\n              return this.tsParseParenthesizedType();\n\n            case types.backQuote:\n              return this.tsParseTemplateLiteralType();\n          }\n\n          throw this.unexpected();\n        }\n      }, {\n        key: \"tsParseArrayTypeOrHigher\",\n        value: function tsParseArrayTypeOrHigher() {\n          var type = this.tsParseNonArrayType();\n\n          while (!this.hasPrecedingLineBreak() && this.eat(types.bracketL)) {\n            if (this.match(types.bracketR)) {\n              var node = this.startNodeAtNode(type);\n              node.elementType = type;\n              this.expect(types.bracketR);\n              type = this.finishNode(node, \"TSArrayType\");\n            } else {\n              var _node7 = this.startNodeAtNode(type);\n\n              _node7.objectType = type;\n              _node7.indexType = this.tsParseType();\n              this.expect(types.bracketR);\n              type = this.finishNode(_node7, \"TSIndexedAccessType\");\n            }\n          }\n\n          return type;\n        }\n      }, {\n        key: \"tsParseTypeOperator\",\n        value: function tsParseTypeOperator(operator) {\n          var node = this.startNode();\n          this.expectContextual(operator);\n          node.operator = operator;\n          node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n          if (operator === \"readonly\") {\n            this.tsCheckTypeAnnotationForReadOnly(node);\n          }\n\n          return this.finishNode(node, \"TSTypeOperator\");\n        }\n      }, {\n        key: \"tsCheckTypeAnnotationForReadOnly\",\n        value: function tsCheckTypeAnnotationForReadOnly(node) {\n          switch (node.typeAnnotation.type) {\n            case \"TSTupleType\":\n            case \"TSArrayType\":\n              return;\n\n            default:\n              this.raise(node.start, \"'readonly' type modifier is only permitted on array and tuple literal types.\");\n          }\n        }\n      }, {\n        key: \"tsParseInferType\",\n        value: function tsParseInferType() {\n          var node = this.startNode();\n          this.expectContextual(\"infer\");\n          var typeParameter = this.startNode();\n          typeParameter.name = this.parseIdentifierName(typeParameter.start);\n          node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n          return this.finishNode(node, \"TSInferType\");\n        }\n      }, {\n        key: \"tsParseTypeOperatorOrHigher\",\n        value: function tsParseTypeOperatorOrHigher() {\n          var _this20 = this;\n\n          var operator = [\"keyof\", \"unique\", \"readonly\"].find(function (kw) {\n            return _this20.isContextual(kw);\n          });\n          return operator ? this.tsParseTypeOperator(operator) : this.isContextual(\"infer\") ? this.tsParseInferType() : this.tsParseArrayTypeOrHigher();\n        }\n      }, {\n        key: \"tsParseUnionOrIntersectionType\",\n        value: function tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {\n          this.eat(operator);\n          var type = parseConstituentType();\n\n          if (this.match(operator)) {\n            var _types = [type];\n\n            while (this.eat(operator)) {\n              _types.push(parseConstituentType());\n            }\n\n            var node = this.startNodeAtNode(type);\n            node.types = _types;\n            type = this.finishNode(node, kind);\n          }\n\n          return type;\n        }\n      }, {\n        key: \"tsParseIntersectionTypeOrHigher\",\n        value: function tsParseIntersectionTypeOrHigher() {\n          return this.tsParseUnionOrIntersectionType(\"TSIntersectionType\", this.tsParseTypeOperatorOrHigher.bind(this), types.bitwiseAND);\n        }\n      }, {\n        key: \"tsParseUnionTypeOrHigher\",\n        value: function tsParseUnionTypeOrHigher() {\n          return this.tsParseUnionOrIntersectionType(\"TSUnionType\", this.tsParseIntersectionTypeOrHigher.bind(this), types.bitwiseOR);\n        }\n      }, {\n        key: \"tsIsStartOfFunctionType\",\n        value: function tsIsStartOfFunctionType() {\n          if (this.isRelational(\"<\")) {\n            return true;\n          }\n\n          return this.match(types.parenL) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));\n        }\n      }, {\n        key: \"tsSkipParameterStart\",\n        value: function tsSkipParameterStart() {\n          if (this.match(types.name) || this.match(types._this)) {\n            this.next();\n            return true;\n          }\n\n          if (this.match(types.braceL)) {\n            var braceStackCounter = 1;\n            this.next();\n\n            while (braceStackCounter > 0) {\n              if (this.match(types.braceL)) {\n                ++braceStackCounter;\n              } else if (this.match(types.braceR)) {\n                --braceStackCounter;\n              }\n\n              this.next();\n            }\n\n            return true;\n          }\n\n          if (this.match(types.bracketL)) {\n            var _braceStackCounter = 1;\n            this.next();\n\n            while (_braceStackCounter > 0) {\n              if (this.match(types.bracketL)) {\n                ++_braceStackCounter;\n              } else if (this.match(types.bracketR)) {\n                --_braceStackCounter;\n              }\n\n              this.next();\n            }\n\n            return true;\n          }\n\n          return false;\n        }\n      }, {\n        key: \"tsIsUnambiguouslyStartOfFunctionType\",\n        value: function tsIsUnambiguouslyStartOfFunctionType() {\n          this.next();\n\n          if (this.match(types.parenR) || this.match(types.ellipsis)) {\n            return true;\n          }\n\n          if (this.tsSkipParameterStart()) {\n            if (this.match(types.colon) || this.match(types.comma) || this.match(types.question) || this.match(types.eq)) {\n              return true;\n            }\n\n            if (this.match(types.parenR)) {\n              this.next();\n\n              if (this.match(types.arrow)) {\n                return true;\n              }\n            }\n          }\n\n          return false;\n        }\n      }, {\n        key: \"tsParseTypeOrTypePredicateAnnotation\",\n        value: function tsParseTypeOrTypePredicateAnnotation(returnToken) {\n          var _this21 = this;\n\n          return this.tsInType(function () {\n            var t = _this21.startNode();\n\n            _this21.expect(returnToken);\n\n            var asserts = _this21.tsTryParse(_this21.tsParseTypePredicateAsserts.bind(_this21));\n\n            if (asserts && _this21.match(types._this)) {\n              var thisTypePredicate = _this21.tsParseThisTypeOrThisTypePredicate();\n\n              if (thisTypePredicate.type === \"TSThisType\") {\n                var _node8 = _this21.startNodeAtNode(t);\n\n                _node8.parameterName = thisTypePredicate;\n                _node8.asserts = true;\n                thisTypePredicate = _this21.finishNode(_node8, \"TSTypePredicate\");\n              } else {\n                thisTypePredicate.asserts = true;\n              }\n\n              t.typeAnnotation = thisTypePredicate;\n              return _this21.finishNode(t, \"TSTypeAnnotation\");\n            }\n\n            var typePredicateVariable = _this21.tsIsIdentifier() && _this21.tsTryParse(_this21.tsParseTypePredicatePrefix.bind(_this21));\n\n            if (!typePredicateVariable) {\n              if (!asserts) {\n                return _this21.tsParseTypeAnnotation(false, t);\n              }\n\n              var _node9 = _this21.startNodeAtNode(t);\n\n              _node9.parameterName = _this21.parseIdentifier();\n              _node9.asserts = asserts;\n              t.typeAnnotation = _this21.finishNode(_node9, \"TSTypePredicate\");\n              return _this21.finishNode(t, \"TSTypeAnnotation\");\n            }\n\n            var type = _this21.tsParseTypeAnnotation(false);\n\n            var node = _this21.startNodeAtNode(t);\n\n            node.parameterName = typePredicateVariable;\n            node.typeAnnotation = type;\n            node.asserts = asserts;\n            t.typeAnnotation = _this21.finishNode(node, \"TSTypePredicate\");\n            return _this21.finishNode(t, \"TSTypeAnnotation\");\n          });\n        }\n      }, {\n        key: \"tsTryParseTypeOrTypePredicateAnnotation\",\n        value: function tsTryParseTypeOrTypePredicateAnnotation() {\n          return this.match(types.colon) ? this.tsParseTypeOrTypePredicateAnnotation(types.colon) : undefined;\n        }\n      }, {\n        key: \"tsTryParseTypeAnnotation\",\n        value: function tsTryParseTypeAnnotation() {\n          return this.match(types.colon) ? this.tsParseTypeAnnotation() : undefined;\n        }\n      }, {\n        key: \"tsTryParseType\",\n        value: function tsTryParseType() {\n          return this.tsEatThenParseType(types.colon);\n        }\n      }, {\n        key: \"tsParseTypePredicatePrefix\",\n        value: function tsParseTypePredicatePrefix() {\n          var id = this.parseIdentifier();\n\n          if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n            this.next();\n            return id;\n          }\n        }\n      }, {\n        key: \"tsParseTypePredicateAsserts\",\n        value: function tsParseTypePredicateAsserts() {\n          if (!this.match(types.name) || this.state.value !== \"asserts\" || this.hasPrecedingLineBreak()) {\n            return false;\n          }\n\n          var containsEsc = this.state.containsEsc;\n          this.next();\n\n          if (!this.match(types.name) && !this.match(types._this)) {\n            return false;\n          }\n\n          if (containsEsc) {\n            this.raise(this.state.lastTokStart, \"Escape sequence in keyword asserts\");\n          }\n\n          return true;\n        }\n      }, {\n        key: \"tsParseTypeAnnotation\",\n        value: function tsParseTypeAnnotation() {\n          var _this22 = this;\n\n          var eatColon = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n          var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.startNode();\n          this.tsInType(function () {\n            if (eatColon) _this22.expect(types.colon);\n            t.typeAnnotation = _this22.tsParseType();\n          });\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n      }, {\n        key: \"tsParseType\",\n        value: function tsParseType() {\n          assert(this.state.inType);\n          var type = this.tsParseNonConditionalType();\n\n          if (this.hasPrecedingLineBreak() || !this.eat(types._extends)) {\n            return type;\n          }\n\n          var node = this.startNodeAtNode(type);\n          node.checkType = type;\n          node.extendsType = this.tsParseNonConditionalType();\n          this.expect(types.question);\n          node.trueType = this.tsParseType();\n          this.expect(types.colon);\n          node.falseType = this.tsParseType();\n          return this.finishNode(node, \"TSConditionalType\");\n        }\n      }, {\n        key: \"tsParseNonConditionalType\",\n        value: function tsParseNonConditionalType() {\n          if (this.tsIsStartOfFunctionType()) {\n            return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n          }\n\n          if (this.match(types._new)) {\n            return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n          }\n\n          return this.tsParseUnionTypeOrHigher();\n        }\n      }, {\n        key: \"tsParseTypeAssertion\",\n        value: function tsParseTypeAssertion() {\n          var node = this.startNode();\n\n          var _const = this.tsTryNextParseConstantContext();\n\n          node.typeAnnotation = _const || this.tsNextThenParseType();\n          this.expectRelational(\">\");\n          node.expression = this.parseMaybeUnary();\n          return this.finishNode(node, \"TSTypeAssertion\");\n        }\n      }, {\n        key: \"tsParseHeritageClause\",\n        value: function tsParseHeritageClause(descriptor) {\n          var originalStart = this.state.start;\n          var delimitedList = this.tsParseDelimitedList(\"HeritageClauseElement\", this.tsParseExpressionWithTypeArguments.bind(this));\n\n          if (!delimitedList.length) {\n            this.raise(originalStart, \"'\" + descriptor + \"' list cannot be empty.\");\n          }\n\n          return delimitedList;\n        }\n      }, {\n        key: \"tsParseExpressionWithTypeArguments\",\n        value: function tsParseExpressionWithTypeArguments() {\n          var node = this.startNode();\n          node.expression = this.tsParseEntityName(false);\n\n          if (this.isRelational(\"<\")) {\n            node.typeParameters = this.tsParseTypeArguments();\n          }\n\n          return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n        }\n      }, {\n        key: \"tsParseInterfaceDeclaration\",\n        value: function tsParseInterfaceDeclaration(node) {\n          node.id = this.parseIdentifier();\n          this.checkLVal(node.id, BIND_TS_INTERFACE, undefined, \"typescript interface declaration\");\n          node.typeParameters = this.tsTryParseTypeParameters();\n\n          if (this.eat(types._extends)) {\n            node.extends = this.tsParseHeritageClause(\"extends\");\n          }\n\n          var body = this.startNode();\n          body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n          node.body = this.finishNode(body, \"TSInterfaceBody\");\n          return this.finishNode(node, \"TSInterfaceDeclaration\");\n        }\n      }, {\n        key: \"tsParseTypeAliasDeclaration\",\n        value: function tsParseTypeAliasDeclaration(node) {\n          node.id = this.parseIdentifier();\n          this.checkLVal(node.id, BIND_TS_TYPE, undefined, \"typescript type alias\");\n          node.typeParameters = this.tsTryParseTypeParameters();\n          node.typeAnnotation = this.tsExpectThenParseType(types.eq);\n          this.semicolon();\n          return this.finishNode(node, \"TSTypeAliasDeclaration\");\n        }\n      }, {\n        key: \"tsInNoContext\",\n        value: function tsInNoContext(cb) {\n          var oldContext = this.state.context;\n          this.state.context = [oldContext[0]];\n\n          try {\n            return cb();\n          } finally {\n            this.state.context = oldContext;\n          }\n        }\n      }, {\n        key: \"tsInType\",\n        value: function tsInType(cb) {\n          var oldInType = this.state.inType;\n          this.state.inType = true;\n\n          try {\n            return cb();\n          } finally {\n            this.state.inType = oldInType;\n          }\n        }\n      }, {\n        key: \"tsEatThenParseType\",\n        value: function tsEatThenParseType(token) {\n          return !this.match(token) ? undefined : this.tsNextThenParseType();\n        }\n      }, {\n        key: \"tsExpectThenParseType\",\n        value: function tsExpectThenParseType(token) {\n          var _this23 = this;\n\n          return this.tsDoThenParseType(function () {\n            return _this23.expect(token);\n          });\n        }\n      }, {\n        key: \"tsNextThenParseType\",\n        value: function tsNextThenParseType() {\n          var _this24 = this;\n\n          return this.tsDoThenParseType(function () {\n            return _this24.next();\n          });\n        }\n      }, {\n        key: \"tsDoThenParseType\",\n        value: function tsDoThenParseType(cb) {\n          var _this25 = this;\n\n          return this.tsInType(function () {\n            cb();\n            return _this25.tsParseType();\n          });\n        }\n      }, {\n        key: \"tsParseEnumMember\",\n        value: function tsParseEnumMember() {\n          var node = this.startNode();\n          node.id = this.match(types.string) ? this.parseExprAtom() : this.parseIdentifier(true);\n\n          if (this.eat(types.eq)) {\n            node.initializer = this.parseMaybeAssign();\n          }\n\n          return this.finishNode(node, \"TSEnumMember\");\n        }\n      }, {\n        key: \"tsParseEnumDeclaration\",\n        value: function tsParseEnumDeclaration(node, isConst) {\n          if (isConst) node.const = true;\n          node.id = this.parseIdentifier();\n          this.checkLVal(node.id, isConst ? BIND_TS_CONST_ENUM : BIND_TS_ENUM, undefined, \"typescript enum declaration\");\n          this.expect(types.braceL);\n          node.members = this.tsParseDelimitedList(\"EnumMembers\", this.tsParseEnumMember.bind(this));\n          this.expect(types.braceR);\n          return this.finishNode(node, \"TSEnumDeclaration\");\n        }\n      }, {\n        key: \"tsParseModuleBlock\",\n        value: function tsParseModuleBlock() {\n          var node = this.startNode();\n          this.scope.enter(SCOPE_OTHER);\n          this.expect(types.braceL);\n          this.parseBlockOrModuleBlockBody(node.body = [], undefined, true, types.braceR);\n          this.scope.exit();\n          return this.finishNode(node, \"TSModuleBlock\");\n        }\n      }, {\n        key: \"tsParseModuleOrNamespaceDeclaration\",\n        value: function tsParseModuleOrNamespaceDeclaration(node) {\n          var nested = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n          node.id = this.parseIdentifier();\n\n          if (!nested) {\n            this.checkLVal(node.id, BIND_TS_NAMESPACE, null, \"module or namespace declaration\");\n          }\n\n          if (this.eat(types.dot)) {\n            var inner = this.startNode();\n            this.tsParseModuleOrNamespaceDeclaration(inner, true);\n            node.body = inner;\n          } else {\n            this.scope.enter(SCOPE_TS_MODULE);\n            node.body = this.tsParseModuleBlock();\n            this.scope.exit();\n          }\n\n          return this.finishNode(node, \"TSModuleDeclaration\");\n        }\n      }, {\n        key: \"tsParseAmbientExternalModuleDeclaration\",\n        value: function tsParseAmbientExternalModuleDeclaration(node) {\n          if (this.isContextual(\"global\")) {\n            node.global = true;\n            node.id = this.parseIdentifier();\n          } else if (this.match(types.string)) {\n            node.id = this.parseExprAtom();\n          } else {\n            this.unexpected();\n          }\n\n          if (this.match(types.braceL)) {\n            this.scope.enter(SCOPE_TS_MODULE);\n            node.body = this.tsParseModuleBlock();\n            this.scope.exit();\n          } else {\n            this.semicolon();\n          }\n\n          return this.finishNode(node, \"TSModuleDeclaration\");\n        }\n      }, {\n        key: \"tsParseImportEqualsDeclaration\",\n        value: function tsParseImportEqualsDeclaration(node, isExport) {\n          node.isExport = isExport || false;\n          node.id = this.parseIdentifier();\n          this.checkLVal(node.id, BIND_LEXICAL, undefined, \"import equals declaration\");\n          this.expect(types.eq);\n          node.moduleReference = this.tsParseModuleReference();\n          this.semicolon();\n          return this.finishNode(node, \"TSImportEqualsDeclaration\");\n        }\n      }, {\n        key: \"tsIsExternalModuleReference\",\n        value: function tsIsExternalModuleReference() {\n          return this.isContextual(\"require\") && this.lookaheadCharCode() === 40;\n        }\n      }, {\n        key: \"tsParseModuleReference\",\n        value: function tsParseModuleReference() {\n          return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);\n        }\n      }, {\n        key: \"tsParseExternalModuleReference\",\n        value: function tsParseExternalModuleReference() {\n          var node = this.startNode();\n          this.expectContextual(\"require\");\n          this.expect(types.parenL);\n\n          if (!this.match(types.string)) {\n            throw this.unexpected();\n          }\n\n          node.expression = this.parseExprAtom();\n          this.expect(types.parenR);\n          return this.finishNode(node, \"TSExternalModuleReference\");\n        }\n      }, {\n        key: \"tsLookAhead\",\n        value: function tsLookAhead(f) {\n          var state = this.state.clone();\n          var res = f();\n          this.state = state;\n          return res;\n        }\n      }, {\n        key: \"tsTryParseAndCatch\",\n        value: function tsTryParseAndCatch(f) {\n          var result = this.tryParse(function (abort) {\n            return f() || abort();\n          });\n          if (result.aborted || !result.node) return undefined;\n          if (result.error) this.state = result.failState;\n          return result.node;\n        }\n      }, {\n        key: \"tsTryParse\",\n        value: function tsTryParse(f) {\n          var state = this.state.clone();\n          var result = f();\n\n          if (result !== undefined && result !== false) {\n            return result;\n          } else {\n            this.state = state;\n            return undefined;\n          }\n        }\n      }, {\n        key: \"tsTryParseDeclare\",\n        value: function tsTryParseDeclare(nany) {\n          if (this.isLineTerminator()) {\n            return;\n          }\n\n          var starttype = this.state.type;\n          var kind;\n\n          if (this.isContextual(\"let\")) {\n            starttype = types._var;\n            kind = \"let\";\n          }\n\n          switch (starttype) {\n            case types._function:\n              return this.parseFunctionStatement(nany, false, true);\n\n            case types._class:\n              nany.declare = true;\n              return this.parseClass(nany, true, false);\n\n            case types._const:\n              if (this.match(types._const) && this.isLookaheadContextual(\"enum\")) {\n                this.expect(types._const);\n                this.expectContextual(\"enum\");\n                return this.tsParseEnumDeclaration(nany, true);\n              }\n\n            case types._var:\n              kind = kind || this.state.value;\n              return this.parseVarStatement(nany, kind);\n\n            case types.name:\n              {\n                var value = this.state.value;\n\n                if (value === \"global\") {\n                  return this.tsParseAmbientExternalModuleDeclaration(nany);\n                } else {\n                  return this.tsParseDeclaration(nany, value, true);\n                }\n              }\n          }\n        }\n      }, {\n        key: \"tsTryParseExportDeclaration\",\n        value: function tsTryParseExportDeclaration() {\n          return this.tsParseDeclaration(this.startNode(), this.state.value, true);\n        }\n      }, {\n        key: \"tsParseExpressionStatement\",\n        value: function tsParseExpressionStatement(node, expr) {\n          switch (expr.name) {\n            case \"declare\":\n              {\n                var declaration = this.tsTryParseDeclare(node);\n\n                if (declaration) {\n                  declaration.declare = true;\n                  return declaration;\n                }\n\n                break;\n              }\n\n            case \"global\":\n              if (this.match(types.braceL)) {\n                this.scope.enter(SCOPE_TS_MODULE);\n                var mod = node;\n                mod.global = true;\n                mod.id = expr;\n                mod.body = this.tsParseModuleBlock();\n                this.scope.exit();\n                return this.finishNode(mod, \"TSModuleDeclaration\");\n              }\n\n              break;\n\n            default:\n              return this.tsParseDeclaration(node, expr.name, false);\n          }\n        }\n      }, {\n        key: \"tsParseDeclaration\",\n        value: function tsParseDeclaration(node, value, next) {\n          switch (value) {\n            case \"abstract\":\n              if (this.tsCheckLineTerminatorAndMatch(types._class, next)) {\n                var cls = node;\n                cls.abstract = true;\n\n                if (next) {\n                  this.next();\n\n                  if (!this.match(types._class)) {\n                    this.unexpected(null, types._class);\n                  }\n                }\n\n                return this.parseClass(cls, true, false);\n              }\n\n              break;\n\n            case \"enum\":\n              if (next || this.match(types.name)) {\n                if (next) this.next();\n                return this.tsParseEnumDeclaration(node, false);\n              }\n\n              break;\n\n            case \"interface\":\n              if (this.tsCheckLineTerminatorAndMatch(types.name, next)) {\n                if (next) this.next();\n                return this.tsParseInterfaceDeclaration(node);\n              }\n\n              break;\n\n            case \"module\":\n              if (next) this.next();\n\n              if (this.match(types.string)) {\n                return this.tsParseAmbientExternalModuleDeclaration(node);\n              } else if (this.tsCheckLineTerminatorAndMatch(types.name, next)) {\n                return this.tsParseModuleOrNamespaceDeclaration(node);\n              }\n\n              break;\n\n            case \"namespace\":\n              if (this.tsCheckLineTerminatorAndMatch(types.name, next)) {\n                if (next) this.next();\n                return this.tsParseModuleOrNamespaceDeclaration(node);\n              }\n\n              break;\n\n            case \"type\":\n              if (this.tsCheckLineTerminatorAndMatch(types.name, next)) {\n                if (next) this.next();\n                return this.tsParseTypeAliasDeclaration(node);\n              }\n\n              break;\n          }\n        }\n      }, {\n        key: \"tsCheckLineTerminatorAndMatch\",\n        value: function tsCheckLineTerminatorAndMatch(tokenType, next) {\n          return (next || this.match(tokenType)) && !this.isLineTerminator();\n        }\n      }, {\n        key: \"tsTryParseGenericAsyncArrowFunction\",\n        value: function tsTryParseGenericAsyncArrowFunction(startPos, startLoc) {\n          var _this26 = this;\n\n          if (!this.isRelational(\"<\")) {\n            return undefined;\n          }\n\n          var res = this.tsTryParseAndCatch(function () {\n            var node = _this26.startNodeAt(startPos, startLoc);\n\n            node.typeParameters = _this26.tsParseTypeParameters();\n\n            _get(_getPrototypeOf(_class4.prototype), \"parseFunctionParams\", _this26).call(_this26, node);\n\n            node.returnType = _this26.tsTryParseTypeOrTypePredicateAnnotation();\n\n            _this26.expect(types.arrow);\n\n            return node;\n          });\n\n          if (!res) {\n            return undefined;\n          }\n\n          return this.parseArrowExpression(res, null, true);\n        }\n      }, {\n        key: \"tsParseTypeArguments\",\n        value: function tsParseTypeArguments() {\n          var _this27 = this;\n\n          var node = this.startNode();\n          node.params = this.tsInType(function () {\n            return _this27.tsInNoContext(function () {\n              _this27.expectRelational(\"<\");\n\n              return _this27.tsParseDelimitedList(\"TypeParametersOrArguments\", _this27.tsParseType.bind(_this27));\n            });\n          });\n          this.state.exprAllowed = false;\n          this.expectRelational(\">\");\n          return this.finishNode(node, \"TSTypeParameterInstantiation\");\n        }\n      }, {\n        key: \"tsIsDeclarationStart\",\n        value: function tsIsDeclarationStart() {\n          if (this.match(types.name)) {\n            switch (this.state.value) {\n              case \"abstract\":\n              case \"declare\":\n              case \"enum\":\n              case \"interface\":\n              case \"module\":\n              case \"namespace\":\n              case \"type\":\n                return true;\n            }\n          }\n\n          return false;\n        }\n      }, {\n        key: \"isExportDefaultSpecifier\",\n        value: function isExportDefaultSpecifier() {\n          if (this.tsIsDeclarationStart()) return false;\n          return _get(_getPrototypeOf(_class4.prototype), \"isExportDefaultSpecifier\", this).call(this);\n        }\n      }, {\n        key: \"parseAssignableListItem\",\n        value: function parseAssignableListItem(allowModifiers, decorators) {\n          var startPos = this.state.start;\n          var startLoc = this.state.startLoc;\n          var accessibility;\n          var readonly = false;\n\n          if (allowModifiers) {\n            accessibility = this.parseAccessModifier();\n            readonly = !!this.tsParseModifier([\"readonly\"]);\n          }\n\n          var left = this.parseMaybeDefault();\n          this.parseAssignableListItemTypes(left);\n          var elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n          if (accessibility || readonly) {\n            var pp = this.startNodeAt(startPos, startLoc);\n\n            if (decorators.length) {\n              pp.decorators = decorators;\n            }\n\n            if (accessibility) pp.accessibility = accessibility;\n            if (readonly) pp.readonly = readonly;\n\n            if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n              this.raise(pp.start, \"A parameter property may not be declared using a binding pattern.\");\n            }\n\n            pp.parameter = elt;\n            return this.finishNode(pp, \"TSParameterProperty\");\n          }\n\n          if (decorators.length) {\n            left.decorators = decorators;\n          }\n\n          return elt;\n        }\n      }, {\n        key: \"parseFunctionBodyAndFinish\",\n        value: function parseFunctionBodyAndFinish(node, type) {\n          var isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n          if (this.match(types.colon)) {\n            node.returnType = this.tsParseTypeOrTypePredicateAnnotation(types.colon);\n          }\n\n          var bodilessType = type === \"FunctionDeclaration\" ? \"TSDeclareFunction\" : type === \"ClassMethod\" ? \"TSDeclareMethod\" : undefined;\n\n          if (bodilessType && !this.match(types.braceL) && this.isLineTerminator()) {\n            this.finishNode(node, bodilessType);\n            return;\n          }\n\n          _get(_getPrototypeOf(_class4.prototype), \"parseFunctionBodyAndFinish\", this).call(this, node, type, isMethod);\n        }\n      }, {\n        key: \"registerFunctionStatementId\",\n        value: function registerFunctionStatementId(node) {\n          if (!node.body && node.id) {\n            this.checkLVal(node.id, BIND_TS_AMBIENT, null, \"function name\");\n          } else {\n            _get(_getPrototypeOf(_class4.prototype), \"registerFunctionStatementId\", this).apply(this, arguments);\n          }\n        }\n      }, {\n        key: \"parseSubscript\",\n        value: function parseSubscript(base, startPos, startLoc, noCalls, state) {\n          var _this28 = this;\n\n          if (!this.hasPrecedingLineBreak() && this.match(types.bang)) {\n            this.state.exprAllowed = false;\n            this.next();\n            var nonNullExpression = this.startNodeAt(startPos, startLoc);\n            nonNullExpression.expression = base;\n            return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n          }\n\n          if (this.isRelational(\"<\")) {\n            var result = this.tsTryParseAndCatch(function () {\n              if (!noCalls && _this28.atPossibleAsync(base)) {\n                var asyncArrowFn = _this28.tsTryParseGenericAsyncArrowFunction(startPos, startLoc);\n\n                if (asyncArrowFn) {\n                  return asyncArrowFn;\n                }\n              }\n\n              var node = _this28.startNodeAt(startPos, startLoc);\n\n              node.callee = base;\n\n              var typeArguments = _this28.tsParseTypeArguments();\n\n              if (typeArguments) {\n                if (!noCalls && _this28.eat(types.parenL)) {\n                  node.arguments = _this28.parseCallExpressionArguments(types.parenR, false);\n                  node.typeParameters = typeArguments;\n                  return _this28.finishCallExpression(node, state.optionalChainMember);\n                } else if (_this28.match(types.backQuote)) {\n                  return _this28.parseTaggedTemplateExpression(startPos, startLoc, base, state, typeArguments);\n                }\n              }\n\n              _this28.unexpected();\n            });\n            if (result) return result;\n          }\n\n          return _get(_getPrototypeOf(_class4.prototype), \"parseSubscript\", this).call(this, base, startPos, startLoc, noCalls, state);\n        }\n      }, {\n        key: \"parseNewArguments\",\n        value: function parseNewArguments(node) {\n          var _this29 = this;\n\n          if (this.isRelational(\"<\")) {\n            var typeParameters = this.tsTryParseAndCatch(function () {\n              var args = _this29.tsParseTypeArguments();\n\n              if (!_this29.match(types.parenL)) _this29.unexpected();\n              return args;\n            });\n\n            if (typeParameters) {\n              node.typeParameters = typeParameters;\n            }\n          }\n\n          _get(_getPrototypeOf(_class4.prototype), \"parseNewArguments\", this).call(this, node);\n        }\n      }, {\n        key: \"parseExprOp\",\n        value: function parseExprOp(left, leftStartPos, leftStartLoc, minPrec, noIn) {\n          if (nonNull(types._in.binop) > minPrec && !this.hasPrecedingLineBreak() && this.isContextual(\"as\")) {\n            var node = this.startNodeAt(leftStartPos, leftStartLoc);\n            node.expression = left;\n\n            var _const = this.tsTryNextParseConstantContext();\n\n            if (_const) {\n              node.typeAnnotation = _const;\n            } else {\n              node.typeAnnotation = this.tsNextThenParseType();\n            }\n\n            this.finishNode(node, \"TSAsExpression\");\n            return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn);\n          }\n\n          return _get(_getPrototypeOf(_class4.prototype), \"parseExprOp\", this).call(this, left, leftStartPos, leftStartLoc, minPrec, noIn);\n        }\n      }, {\n        key: \"checkReservedWord\",\n        value: function checkReservedWord(word, startLoc, checkKeywords, isBinding) {}\n      }, {\n        key: \"checkDuplicateExports\",\n        value: function checkDuplicateExports() {}\n      }, {\n        key: \"parseImport\",\n        value: function parseImport(node) {\n          if (this.match(types.name) && this.lookahead().type === types.eq) {\n            return this.tsParseImportEqualsDeclaration(node);\n          }\n\n          return _get(_getPrototypeOf(_class4.prototype), \"parseImport\", this).call(this, node);\n        }\n      }, {\n        key: \"parseExport\",\n        value: function parseExport(node) {\n          if (this.match(types._import)) {\n            this.expect(types._import);\n            return this.tsParseImportEqualsDeclaration(node, true);\n          } else if (this.eat(types.eq)) {\n            var assign = node;\n            assign.expression = this.parseExpression();\n            this.semicolon();\n            return this.finishNode(assign, \"TSExportAssignment\");\n          } else if (this.eatContextual(\"as\")) {\n            var decl = node;\n            this.expectContextual(\"namespace\");\n            decl.id = this.parseIdentifier();\n            this.semicolon();\n            return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n          } else {\n            return _get(_getPrototypeOf(_class4.prototype), \"parseExport\", this).call(this, node);\n          }\n        }\n      }, {\n        key: \"isAbstractClass\",\n        value: function isAbstractClass() {\n          return this.isContextual(\"abstract\") && this.lookahead().type === types._class;\n        }\n      }, {\n        key: \"parseExportDefaultExpression\",\n        value: function parseExportDefaultExpression() {\n          if (this.isAbstractClass()) {\n            var cls = this.startNode();\n            this.next();\n            this.parseClass(cls, true, true);\n            cls.abstract = true;\n            return cls;\n          }\n\n          if (this.state.value === \"interface\") {\n            var result = this.tsParseDeclaration(this.startNode(), this.state.value, true);\n            if (result) return result;\n          }\n\n          return _get(_getPrototypeOf(_class4.prototype), \"parseExportDefaultExpression\", this).call(this);\n        }\n      }, {\n        key: \"parseStatementContent\",\n        value: function parseStatementContent(context, topLevel) {\n          if (this.state.type === types._const) {\n            var ahead = this.lookahead();\n\n            if (ahead.type === types.name && ahead.value === \"enum\") {\n              var node = this.startNode();\n              this.expect(types._const);\n              this.expectContextual(\"enum\");\n              return this.tsParseEnumDeclaration(node, true);\n            }\n          }\n\n          return _get(_getPrototypeOf(_class4.prototype), \"parseStatementContent\", this).call(this, context, topLevel);\n        }\n      }, {\n        key: \"parseAccessModifier\",\n        value: function parseAccessModifier() {\n          return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n        }\n      }, {\n        key: \"parseClassMember\",\n        value: function parseClassMember(classBody, member, state, constructorAllowsSuper) {\n          var accessibility = this.parseAccessModifier();\n          if (accessibility) member.accessibility = accessibility;\n\n          _get(_getPrototypeOf(_class4.prototype), \"parseClassMember\", this).call(this, classBody, member, state, constructorAllowsSuper);\n        }\n      }, {\n        key: \"parseClassMemberWithIsStatic\",\n        value: function parseClassMemberWithIsStatic(classBody, member, state, isStatic, constructorAllowsSuper) {\n          var modifiers = this.tsParseModifiers([\"abstract\", \"readonly\", \"declare\"]);\n\n          _extends(member, modifiers);\n\n          var idx = this.tsTryParseIndexSignature(member);\n\n          if (idx) {\n            classBody.body.push(idx);\n\n            if (modifiers.abstract) {\n              this.raise(member.start, \"Index signatures cannot have the 'abstract' modifier\");\n            }\n\n            if (isStatic) {\n              this.raise(member.start, \"Index signatures cannot have the 'static' modifier\");\n            }\n\n            if (member.accessibility) {\n              this.raise(member.start, \"Index signatures cannot have an accessibility modifier ('\" + member.accessibility + \"')\");\n            }\n\n            return;\n          }\n\n          _get(_getPrototypeOf(_class4.prototype), \"parseClassMemberWithIsStatic\", this).call(this, classBody, member, state, isStatic, constructorAllowsSuper);\n        }\n      }, {\n        key: \"parsePostMemberNameModifiers\",\n        value: function parsePostMemberNameModifiers(methodOrProp) {\n          var optional = this.eat(types.question);\n          if (optional) methodOrProp.optional = true;\n\n          if (methodOrProp.readonly && this.match(types.parenL)) {\n            this.raise(methodOrProp.start, \"Class methods cannot have the 'readonly' modifier\");\n          }\n\n          if (methodOrProp.declare && this.match(types.parenL)) {\n            this.raise(methodOrProp.start, \"Class methods cannot have the 'declare' modifier\");\n          }\n        }\n      }, {\n        key: \"parseExpressionStatement\",\n        value: function parseExpressionStatement(node, expr) {\n          var decl = expr.type === \"Identifier\" ? this.tsParseExpressionStatement(node, expr) : undefined;\n          return decl || _get(_getPrototypeOf(_class4.prototype), \"parseExpressionStatement\", this).call(this, node, expr);\n        }\n      }, {\n        key: \"shouldParseExportDeclaration\",\n        value: function shouldParseExportDeclaration() {\n          if (this.tsIsDeclarationStart()) return true;\n          return _get(_getPrototypeOf(_class4.prototype), \"shouldParseExportDeclaration\", this).call(this);\n        }\n      }, {\n        key: \"parseConditional\",\n        value: function parseConditional(expr, noIn, startPos, startLoc, refNeedsArrowPos) {\n          var _this30 = this;\n\n          if (!refNeedsArrowPos || !this.match(types.question)) {\n            return _get(_getPrototypeOf(_class4.prototype), \"parseConditional\", this).call(this, expr, noIn, startPos, startLoc, refNeedsArrowPos);\n          }\n\n          var result = this.tryParse(function () {\n            return _get(_getPrototypeOf(_class4.prototype), \"parseConditional\", _this30).call(_this30, expr, noIn, startPos, startLoc);\n          });\n\n          if (!result.node) {\n            refNeedsArrowPos.start = result.error.pos || this.state.start;\n            return expr;\n          }\n\n          if (result.error) this.state = result.failState;\n          return result.node;\n        }\n      }, {\n        key: \"parseParenItem\",\n        value: function parseParenItem(node, startPos, startLoc) {\n          node = _get(_getPrototypeOf(_class4.prototype), \"parseParenItem\", this).call(this, node, startPos, startLoc);\n\n          if (this.eat(types.question)) {\n            node.optional = true;\n            this.resetEndLocation(node);\n          }\n\n          if (this.match(types.colon)) {\n            var typeCastNode = this.startNodeAt(startPos, startLoc);\n            typeCastNode.expression = node;\n            typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n            return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n          }\n\n          return node;\n        }\n      }, {\n        key: \"parseExportDeclaration\",\n        value: function parseExportDeclaration(node) {\n          var startPos = this.state.start;\n          var startLoc = this.state.startLoc;\n          var isDeclare = this.eatContextual(\"declare\");\n          var declaration;\n\n          if (this.match(types.name)) {\n            declaration = this.tsTryParseExportDeclaration();\n          }\n\n          if (!declaration) {\n            declaration = _get(_getPrototypeOf(_class4.prototype), \"parseExportDeclaration\", this).call(this, node);\n          }\n\n          if (declaration && isDeclare) {\n            this.resetStartLocation(declaration, startPos, startLoc);\n            declaration.declare = true;\n          }\n\n          return declaration;\n        }\n      }, {\n        key: \"parseClassId\",\n        value: function parseClassId(node, isStatement, optionalId) {\n          if ((!isStatement || optionalId) && this.isContextual(\"implements\")) {\n            return;\n          }\n\n          _get(_getPrototypeOf(_class4.prototype), \"parseClassId\", this).call(this, node, isStatement, optionalId, node.declare ? BIND_TS_AMBIENT : BIND_CLASS);\n\n          var typeParameters = this.tsTryParseTypeParameters();\n          if (typeParameters) node.typeParameters = typeParameters;\n        }\n      }, {\n        key: \"parseClassPropertyAnnotation\",\n        value: function parseClassPropertyAnnotation(node) {\n          if (!node.optional && this.eat(types.bang)) {\n            node.definite = true;\n          }\n\n          var type = this.tsTryParseTypeAnnotation();\n          if (type) node.typeAnnotation = type;\n        }\n      }, {\n        key: \"parseClassProperty\",\n        value: function parseClassProperty(node) {\n          this.parseClassPropertyAnnotation(node);\n\n          if (node.declare && this.match(types.equal)) {\n            this.raise(this.state.start, \"'declare' class fields cannot have an initializer\");\n          }\n\n          return _get(_getPrototypeOf(_class4.prototype), \"parseClassProperty\", this).call(this, node);\n        }\n      }, {\n        key: \"parseClassPrivateProperty\",\n        value: function parseClassPrivateProperty(node) {\n          if (node.abstract) {\n            this.raise(node.start, \"Private elements cannot have the 'abstract' modifier.\");\n          }\n\n          if (node.accessibility) {\n            this.raise(node.start, \"Private elements cannot have an accessibility modifier ('\" + node.accessibility + \"')\");\n          }\n\n          this.parseClassPropertyAnnotation(node);\n          return _get(_getPrototypeOf(_class4.prototype), \"parseClassPrivateProperty\", this).call(this, node);\n        }\n      }, {\n        key: \"pushClassMethod\",\n        value: function pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n          var typeParameters = this.tsTryParseTypeParameters();\n          if (typeParameters) method.typeParameters = typeParameters;\n\n          _get(_getPrototypeOf(_class4.prototype), \"pushClassMethod\", this).call(this, classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n        }\n      }, {\n        key: \"pushClassPrivateMethod\",\n        value: function pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n          var typeParameters = this.tsTryParseTypeParameters();\n          if (typeParameters) method.typeParameters = typeParameters;\n\n          _get(_getPrototypeOf(_class4.prototype), \"pushClassPrivateMethod\", this).call(this, classBody, method, isGenerator, isAsync);\n        }\n      }, {\n        key: \"parseClassSuper\",\n        value: function parseClassSuper(node) {\n          _get(_getPrototypeOf(_class4.prototype), \"parseClassSuper\", this).call(this, node);\n\n          if (node.superClass && this.isRelational(\"<\")) {\n            node.superTypeParameters = this.tsParseTypeArguments();\n          }\n\n          if (this.eatContextual(\"implements\")) {\n            node.implements = this.tsParseHeritageClause(\"implements\");\n          }\n        }\n      }, {\n        key: \"parseObjPropValue\",\n        value: function parseObjPropValue(prop) {\n          var _get2;\n\n          var typeParameters = this.tsTryParseTypeParameters();\n          if (typeParameters) prop.typeParameters = typeParameters;\n\n          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n            args[_key2 - 1] = arguments[_key2];\n          }\n\n          (_get2 = _get(_getPrototypeOf(_class4.prototype), \"parseObjPropValue\", this)).call.apply(_get2, [this, prop].concat(args));\n        }\n      }, {\n        key: \"parseFunctionParams\",\n        value: function parseFunctionParams(node, allowModifiers) {\n          var typeParameters = this.tsTryParseTypeParameters();\n          if (typeParameters) node.typeParameters = typeParameters;\n\n          _get(_getPrototypeOf(_class4.prototype), \"parseFunctionParams\", this).call(this, node, allowModifiers);\n        }\n      }, {\n        key: \"parseVarId\",\n        value: function parseVarId(decl, kind) {\n          _get(_getPrototypeOf(_class4.prototype), \"parseVarId\", this).call(this, decl, kind);\n\n          if (decl.id.type === \"Identifier\" && this.eat(types.bang)) {\n            decl.definite = true;\n          }\n\n          var type = this.tsTryParseTypeAnnotation();\n\n          if (type) {\n            decl.id.typeAnnotation = type;\n            this.resetEndLocation(decl.id);\n          }\n        }\n      }, {\n        key: \"parseAsyncArrowFromCallExpression\",\n        value: function parseAsyncArrowFromCallExpression(node, call) {\n          if (this.match(types.colon)) {\n            node.returnType = this.tsParseTypeAnnotation();\n          }\n\n          return _get(_getPrototypeOf(_class4.prototype), \"parseAsyncArrowFromCallExpression\", this).call(this, node, call);\n        }\n      }, {\n        key: \"parseMaybeAssign\",\n        value: function parseMaybeAssign() {\n          var _this31 = this;\n\n          for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n            args[_key3] = arguments[_key3];\n          }\n\n          var state;\n          var jsx;\n          var typeCast;\n\n          if (this.match(types.jsxTagStart)) {\n            state = this.state.clone();\n            jsx = this.tryParse(function () {\n              var _get3;\n\n              return (_get3 = _get(_getPrototypeOf(_class4.prototype), \"parseMaybeAssign\", _this31)).call.apply(_get3, [_this31].concat(args));\n            }, state);\n            if (!jsx.error) return jsx.node;\n            var context = this.state.context;\n\n            if (context[context.length - 1] === types$1.j_oTag) {\n              context.length -= 2;\n            } else if (context[context.length - 1] === types$1.j_expr) {\n              context.length -= 1;\n            }\n          }\n\n          if (!(jsx && jsx.error) && !this.isRelational(\"<\")) {\n            var _get4;\n\n            return (_get4 = _get(_getPrototypeOf(_class4.prototype), \"parseMaybeAssign\", this)).call.apply(_get4, [this].concat(args));\n          }\n\n          var typeParameters;\n          state = state || this.state.clone();\n          var arrow = this.tryParse(function (abort) {\n            var _get5;\n\n            typeParameters = _this31.tsParseTypeParameters();\n\n            var expr = (_get5 = _get(_getPrototypeOf(_class4.prototype), \"parseMaybeAssign\", _this31)).call.apply(_get5, [_this31].concat(args));\n\n            if (expr.type !== \"ArrowFunctionExpression\" || expr.extra && expr.extra.parenthesized) {\n              abort();\n            }\n\n            if (typeParameters && typeParameters.params.length !== 0) {\n              _this31.resetStartLocationFromNode(expr, typeParameters);\n            }\n\n            expr.typeParameters = typeParameters;\n            return expr;\n          }, state);\n          if (!arrow.error && !arrow.aborted) return arrow.node;\n\n          if (!jsx) {\n            assert(!this.hasPlugin(\"jsx\"));\n            typeCast = this.tryParse(function () {\n              var _get6;\n\n              return (_get6 = _get(_getPrototypeOf(_class4.prototype), \"parseMaybeAssign\", _this31)).call.apply(_get6, [_this31].concat(args));\n            }, state);\n            if (!typeCast.error) return typeCast.node;\n          }\n\n          if (jsx && jsx.node) {\n            this.state = jsx.failState;\n            return jsx.node;\n          }\n\n          if (arrow.node) {\n            this.state = arrow.failState;\n            return arrow.node;\n          }\n\n          if (typeCast && typeCast.node) {\n            this.state = typeCast.failState;\n            return typeCast.node;\n          }\n\n          if (jsx && jsx.thrown) throw jsx.error;\n          if (arrow.thrown) throw arrow.error;\n          if (typeCast && typeCast.thrown) throw typeCast.error;\n          throw jsx && jsx.error || arrow.error || typeCast && typeCast.error;\n        }\n      }, {\n        key: \"parseMaybeUnary\",\n        value: function parseMaybeUnary(refShorthandDefaultPos) {\n          if (!this.hasPlugin(\"jsx\") && this.isRelational(\"<\")) {\n            return this.tsParseTypeAssertion();\n          } else {\n            return _get(_getPrototypeOf(_class4.prototype), \"parseMaybeUnary\", this).call(this, refShorthandDefaultPos);\n          }\n        }\n      }, {\n        key: \"parseArrow\",\n        value: function parseArrow(node) {\n          var _this32 = this;\n\n          if (this.match(types.colon)) {\n            var result = this.tryParse(function (abort) {\n              var returnType = _this32.tsParseTypeOrTypePredicateAnnotation(types.colon);\n\n              if (_this32.canInsertSemicolon() || !_this32.match(types.arrow)) abort();\n              return returnType;\n            });\n            if (result.aborted) return;\n\n            if (!result.thrown) {\n              if (result.error) this.state = result.failState;\n              node.returnType = result.node;\n            }\n          }\n\n          return _get(_getPrototypeOf(_class4.prototype), \"parseArrow\", this).call(this, node);\n        }\n      }, {\n        key: \"parseAssignableListItemTypes\",\n        value: function parseAssignableListItemTypes(param) {\n          if (this.eat(types.question)) {\n            if (param.type !== \"Identifier\") {\n              this.raise(param.start, \"A binding pattern parameter cannot be optional in an implementation signature.\");\n            }\n\n            param.optional = true;\n          }\n\n          var type = this.tsTryParseTypeAnnotation();\n          if (type) param.typeAnnotation = type;\n          this.resetEndLocation(param);\n          return param;\n        }\n      }, {\n        key: \"toAssignable\",\n        value: function toAssignable(node, isBinding, contextDescription) {\n          switch (node.type) {\n            case \"TSTypeCastExpression\":\n              return _get(_getPrototypeOf(_class4.prototype), \"toAssignable\", this).call(this, this.typeCastToParameter(node), isBinding, contextDescription);\n\n            case \"TSParameterProperty\":\n              return _get(_getPrototypeOf(_class4.prototype), \"toAssignable\", this).call(this, node, isBinding, contextDescription);\n\n            case \"TSAsExpression\":\n            case \"TSNonNullExpression\":\n            case \"TSTypeAssertion\":\n              node.expression = this.toAssignable(node.expression, isBinding, contextDescription);\n              return node;\n\n            default:\n              return _get(_getPrototypeOf(_class4.prototype), \"toAssignable\", this).call(this, node, isBinding, contextDescription);\n          }\n        }\n      }, {\n        key: \"checkLVal\",\n        value: function checkLVal(expr) {\n          var bindingType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : BIND_NONE;\n          var checkClashes = arguments.length > 2 ? arguments[2] : undefined;\n          var contextDescription = arguments.length > 3 ? arguments[3] : undefined;\n\n          switch (expr.type) {\n            case \"TSTypeCastExpression\":\n              return;\n\n            case \"TSParameterProperty\":\n              this.checkLVal(expr.parameter, bindingType, checkClashes, \"parameter property\");\n              return;\n\n            case \"TSAsExpression\":\n            case \"TSNonNullExpression\":\n            case \"TSTypeAssertion\":\n              this.checkLVal(expr.expression, bindingType, checkClashes, contextDescription);\n              return;\n\n            default:\n              _get(_getPrototypeOf(_class4.prototype), \"checkLVal\", this).call(this, expr, bindingType, checkClashes, contextDescription);\n\n              return;\n          }\n        }\n      }, {\n        key: \"parseBindingAtom\",\n        value: function parseBindingAtom() {\n          switch (this.state.type) {\n            case types._this:\n              return this.parseIdentifier(true);\n\n            default:\n              return _get(_getPrototypeOf(_class4.prototype), \"parseBindingAtom\", this).call(this);\n          }\n        }\n      }, {\n        key: \"parseMaybeDecoratorArguments\",\n        value: function parseMaybeDecoratorArguments(expr) {\n          if (this.isRelational(\"<\")) {\n            var typeArguments = this.tsParseTypeArguments();\n\n            if (this.match(types.parenL)) {\n              var call = _get(_getPrototypeOf(_class4.prototype), \"parseMaybeDecoratorArguments\", this).call(this, expr);\n\n              call.typeParameters = typeArguments;\n              return call;\n            }\n\n            this.unexpected(this.state.start, types.parenL);\n          }\n\n          return _get(_getPrototypeOf(_class4.prototype), \"parseMaybeDecoratorArguments\", this).call(this, expr);\n        }\n      }, {\n        key: \"isClassMethod\",\n        value: function isClassMethod() {\n          return this.isRelational(\"<\") || _get(_getPrototypeOf(_class4.prototype), \"isClassMethod\", this).call(this);\n        }\n      }, {\n        key: \"isClassProperty\",\n        value: function isClassProperty() {\n          return this.match(types.bang) || this.match(types.colon) || _get(_getPrototypeOf(_class4.prototype), \"isClassProperty\", this).call(this);\n        }\n      }, {\n        key: \"parseMaybeDefault\",\n        value: function parseMaybeDefault() {\n          var _get7;\n\n          for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n            args[_key4] = arguments[_key4];\n          }\n\n          var node = (_get7 = _get(_getPrototypeOf(_class4.prototype), \"parseMaybeDefault\", this)).call.apply(_get7, [this].concat(args));\n\n          if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n            this.raise(node.typeAnnotation.start, \"Type annotations must come before default assignments, \" + \"e.g. instead of `age = 25: number` use `age: number = 25`\");\n          }\n\n          return node;\n        }\n      }, {\n        key: \"getTokenFromCode\",\n        value: function getTokenFromCode(code) {\n          if (this.state.inType && (code === 62 || code === 60)) {\n            return this.finishOp(types.relational, 1);\n          } else {\n            return _get(_getPrototypeOf(_class4.prototype), \"getTokenFromCode\", this).call(this, code);\n          }\n        }\n      }, {\n        key: \"toAssignableList\",\n        value: function toAssignableList(exprList, isBinding) {\n          for (var i = 0; i < exprList.length; i++) {\n            var expr = exprList[i];\n            if (!expr) continue;\n\n            switch (expr.type) {\n              case \"TSTypeCastExpression\":\n                exprList[i] = this.typeCastToParameter(expr);\n                break;\n\n              case \"TSAsExpression\":\n              case \"TSTypeAssertion\":\n                if (!isBinding) {\n                  exprList[i] = this.typeCastToParameter(expr);\n                } else {\n                  this.raise(expr.start, \"Unexpected type cast in parameter position.\");\n                }\n\n                break;\n            }\n          }\n\n          return _get(_getPrototypeOf(_class4.prototype), \"toAssignableList\", this).apply(this, arguments);\n        }\n      }, {\n        key: \"typeCastToParameter\",\n        value: function typeCastToParameter(node) {\n          node.expression.typeAnnotation = node.typeAnnotation;\n          this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n          return node.expression;\n        }\n      }, {\n        key: \"toReferencedList\",\n        value: function toReferencedList(exprList, isInParens) {\n          for (var i = 0; i < exprList.length; i++) {\n            var expr = exprList[i];\n\n            if (expr && expr._exprListItem && expr.type === \"TsTypeCastExpression\") {\n              this.raise(expr.start, \"Did not expect a type annotation here.\");\n            }\n          }\n\n          return exprList;\n        }\n      }, {\n        key: \"shouldParseArrow\",\n        value: function shouldParseArrow() {\n          return this.match(types.colon) || _get(_getPrototypeOf(_class4.prototype), \"shouldParseArrow\", this).call(this);\n        }\n      }, {\n        key: \"shouldParseAsyncArrow\",\n        value: function shouldParseAsyncArrow() {\n          return this.match(types.colon) || _get(_getPrototypeOf(_class4.prototype), \"shouldParseAsyncArrow\", this).call(this);\n        }\n      }, {\n        key: \"canHaveLeadingDecorator\",\n        value: function canHaveLeadingDecorator() {\n          return _get(_getPrototypeOf(_class4.prototype), \"canHaveLeadingDecorator\", this).call(this) || this.isAbstractClass();\n        }\n      }, {\n        key: \"jsxParseOpeningElementAfterName\",\n        value: function jsxParseOpeningElementAfterName(node) {\n          var _this33 = this;\n\n          if (this.isRelational(\"<\")) {\n            var typeArguments = this.tsTryParseAndCatch(function () {\n              return _this33.tsParseTypeArguments();\n            });\n            if (typeArguments) node.typeParameters = typeArguments;\n          }\n\n          return _get(_getPrototypeOf(_class4.prototype), \"jsxParseOpeningElementAfterName\", this).call(this, node);\n        }\n      }, {\n        key: \"getGetterSetterExpectedParamCount\",\n        value: function getGetterSetterExpectedParamCount(method) {\n          var baseCount = _get(_getPrototypeOf(_class4.prototype), \"getGetterSetterExpectedParamCount\", this).call(this, method);\n\n          var firstParam = method.params[0];\n          var hasContextParam = firstParam && firstParam.type === \"Identifier\" && firstParam.name === \"this\";\n          return hasContextParam ? baseCount + 1 : baseCount;\n        }\n      }]);\n\n      return _class4;\n    }(superClass);\n  };\n\n  types.placeholder = new TokenType(\"%%\", {\n    startsExpr: true\n  });\n\n  var placeholders = function placeholders(superClass) {\n    return function (_superClass5) {\n      _inherits(_class5, _superClass5);\n\n      function _class5() {\n        _classCallCheck(this, _class5);\n\n        return _possibleConstructorReturn(this, _getPrototypeOf(_class5).apply(this, arguments));\n      }\n\n      _createClass(_class5, [{\n        key: \"parsePlaceholder\",\n        value: function parsePlaceholder(expectedNode) {\n          if (this.match(types.placeholder)) {\n            var node = this.startNode();\n            this.next();\n            this.assertNoSpace(\"Unexpected space in placeholder.\");\n            node.name = _get(_getPrototypeOf(_class5.prototype), \"parseIdentifier\", this).call(this, true);\n            this.assertNoSpace(\"Unexpected space in placeholder.\");\n            this.expect(types.placeholder);\n            return this.finishPlaceholder(node, expectedNode);\n          }\n        }\n      }, {\n        key: \"finishPlaceholder\",\n        value: function finishPlaceholder(node, expectedNode) {\n          var isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n          node.expectedNode = expectedNode;\n          return isFinished ? node : this.finishNode(node, \"Placeholder\");\n        }\n      }, {\n        key: \"getTokenFromCode\",\n        value: function getTokenFromCode(code) {\n          if (code === 37 && this.input.charCodeAt(this.state.pos + 1) === 37) {\n            return this.finishOp(types.placeholder, 2);\n          }\n\n          return _get(_getPrototypeOf(_class5.prototype), \"getTokenFromCode\", this).apply(this, arguments);\n        }\n      }, {\n        key: \"parseExprAtom\",\n        value: function parseExprAtom() {\n          return this.parsePlaceholder(\"Expression\") || _get(_getPrototypeOf(_class5.prototype), \"parseExprAtom\", this).apply(this, arguments);\n        }\n      }, {\n        key: \"parseIdentifier\",\n        value: function parseIdentifier() {\n          return this.parsePlaceholder(\"Identifier\") || _get(_getPrototypeOf(_class5.prototype), \"parseIdentifier\", this).apply(this, arguments);\n        }\n      }, {\n        key: \"checkReservedWord\",\n        value: function checkReservedWord(word) {\n          if (word !== undefined) _get(_getPrototypeOf(_class5.prototype), \"checkReservedWord\", this).apply(this, arguments);\n        }\n      }, {\n        key: \"parseBindingAtom\",\n        value: function parseBindingAtom() {\n          return this.parsePlaceholder(\"Pattern\") || _get(_getPrototypeOf(_class5.prototype), \"parseBindingAtom\", this).apply(this, arguments);\n        }\n      }, {\n        key: \"checkLVal\",\n        value: function checkLVal(expr) {\n          if (expr.type !== \"Placeholder\") _get(_getPrototypeOf(_class5.prototype), \"checkLVal\", this).apply(this, arguments);\n        }\n      }, {\n        key: \"toAssignable\",\n        value: function toAssignable(node) {\n          if (node && node.type === \"Placeholder\" && node.expectedNode === \"Expression\") {\n            node.expectedNode = \"Pattern\";\n            return node;\n          }\n\n          return _get(_getPrototypeOf(_class5.prototype), \"toAssignable\", this).apply(this, arguments);\n        }\n      }, {\n        key: \"verifyBreakContinue\",\n        value: function verifyBreakContinue(node) {\n          if (node.label && node.label.type === \"Placeholder\") return;\n\n          _get(_getPrototypeOf(_class5.prototype), \"verifyBreakContinue\", this).apply(this, arguments);\n        }\n      }, {\n        key: \"parseExpressionStatement\",\n        value: function parseExpressionStatement(node, expr) {\n          if (expr.type !== \"Placeholder\" || expr.extra && expr.extra.parenthesized) {\n            return _get(_getPrototypeOf(_class5.prototype), \"parseExpressionStatement\", this).apply(this, arguments);\n          }\n\n          if (this.match(types.colon)) {\n            var stmt = node;\n            stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n            this.next();\n            stmt.body = this.parseStatement(\"label\");\n            return this.finishNode(stmt, \"LabeledStatement\");\n          }\n\n          this.semicolon();\n          node.name = expr.name;\n          return this.finishPlaceholder(node, \"Statement\");\n        }\n      }, {\n        key: \"parseBlock\",\n        value: function parseBlock() {\n          return this.parsePlaceholder(\"BlockStatement\") || _get(_getPrototypeOf(_class5.prototype), \"parseBlock\", this).apply(this, arguments);\n        }\n      }, {\n        key: \"parseFunctionId\",\n        value: function parseFunctionId() {\n          return this.parsePlaceholder(\"Identifier\") || _get(_getPrototypeOf(_class5.prototype), \"parseFunctionId\", this).apply(this, arguments);\n        }\n      }, {\n        key: \"parseClass\",\n        value: function parseClass(node, isStatement, optionalId) {\n          var type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n          this.next();\n          this.takeDecorators(node);\n          var placeholder = this.parsePlaceholder(\"Identifier\");\n\n          if (placeholder) {\n            if (this.match(types._extends) || this.match(types.placeholder) || this.match(types.braceL)) {\n              node.id = placeholder;\n            } else if (optionalId || !isStatement) {\n              node.id = null;\n              node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n              return this.finishNode(node, type);\n            } else {\n              this.unexpected(null, \"A class name is required\");\n            }\n          } else {\n            this.parseClassId(node, isStatement, optionalId);\n          }\n\n          this.parseClassSuper(node);\n          node.body = this.parsePlaceholder(\"ClassBody\") || this.parseClassBody(!!node.superClass);\n          return this.finishNode(node, type);\n        }\n      }, {\n        key: \"parseExport\",\n        value: function parseExport(node) {\n          var placeholder = this.parsePlaceholder(\"Identifier\");\n          if (!placeholder) return _get(_getPrototypeOf(_class5.prototype), \"parseExport\", this).apply(this, arguments);\n\n          if (!this.isContextual(\"from\") && !this.match(types.comma)) {\n            node.specifiers = [];\n            node.source = null;\n            node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n            return this.finishNode(node, \"ExportNamedDeclaration\");\n          }\n\n          this.expectPlugin(\"exportDefaultFrom\");\n          var specifier = this.startNode();\n          specifier.exported = placeholder;\n          node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n          return _get(_getPrototypeOf(_class5.prototype), \"parseExport\", this).call(this, node);\n        }\n      }, {\n        key: \"maybeParseExportDefaultSpecifier\",\n        value: function maybeParseExportDefaultSpecifier(node) {\n          if (node.specifiers && node.specifiers.length > 0) {\n            return true;\n          }\n\n          return _get(_getPrototypeOf(_class5.prototype), \"maybeParseExportDefaultSpecifier\", this).apply(this, arguments);\n        }\n      }, {\n        key: \"checkExport\",\n        value: function checkExport(node) {\n          var specifiers = node.specifiers;\n\n          if (specifiers && specifiers.length) {\n            node.specifiers = specifiers.filter(function (node) {\n              return node.exported.type === \"Placeholder\";\n            });\n          }\n\n          _get(_getPrototypeOf(_class5.prototype), \"checkExport\", this).call(this, node);\n\n          node.specifiers = specifiers;\n        }\n      }, {\n        key: \"parseImport\",\n        value: function parseImport(node) {\n          var placeholder = this.parsePlaceholder(\"Identifier\");\n          if (!placeholder) return _get(_getPrototypeOf(_class5.prototype), \"parseImport\", this).apply(this, arguments);\n          node.specifiers = [];\n\n          if (!this.isContextual(\"from\") && !this.match(types.comma)) {\n            node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n            this.semicolon();\n            return this.finishNode(node, \"ImportDeclaration\");\n          }\n\n          var specifier = this.startNodeAtNode(placeholder);\n          specifier.local = placeholder;\n          this.finishNode(specifier, \"ImportDefaultSpecifier\");\n          node.specifiers.push(specifier);\n\n          if (this.eat(types.comma)) {\n            var hasStarImport = this.maybeParseStarImportSpecifier(node);\n            if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n          }\n\n          this.expectContextual(\"from\");\n          node.source = this.parseImportSource();\n          this.semicolon();\n          return this.finishNode(node, \"ImportDeclaration\");\n        }\n      }, {\n        key: \"parseImportSource\",\n        value: function parseImportSource() {\n          return this.parsePlaceholder(\"StringLiteral\") || _get(_getPrototypeOf(_class5.prototype), \"parseImportSource\", this).apply(this, arguments);\n        }\n      }]);\n\n      return _class5;\n    }(superClass);\n  };\n\n  var v8intrinsic = function v8intrinsic(superClass) {\n    return function (_superClass6) {\n      _inherits(_class6, _superClass6);\n\n      function _class6() {\n        _classCallCheck(this, _class6);\n\n        return _possibleConstructorReturn(this, _getPrototypeOf(_class6).apply(this, arguments));\n      }\n\n      _createClass(_class6, [{\n        key: \"parseV8Intrinsic\",\n        value: function parseV8Intrinsic() {\n          if (this.match(types.modulo)) {\n            var v8IntrinsicStart = this.state.start;\n            var node = this.startNode();\n            this.eat(types.modulo);\n\n            if (this.match(types.name)) {\n              var name = this.parseIdentifierName(this.state.start);\n              var identifier = this.createIdentifier(node, name);\n              identifier.type = \"V8IntrinsicIdentifier\";\n\n              if (this.match(types.parenL)) {\n                return identifier;\n              }\n            }\n\n            this.unexpected(v8IntrinsicStart);\n          }\n        }\n      }, {\n        key: \"parseExprAtom\",\n        value: function parseExprAtom() {\n          return this.parseV8Intrinsic() || _get(_getPrototypeOf(_class6.prototype), \"parseExprAtom\", this).apply(this, arguments);\n        }\n      }]);\n\n      return _class6;\n    }(superClass);\n  };\n\n  function hasPlugin(plugins, name) {\n    return plugins.some(function (plugin) {\n      if (Array.isArray(plugin)) {\n        return plugin[0] === name;\n      } else {\n        return plugin === name;\n      }\n    });\n  }\n\n  function getPluginOption(plugins, name, option) {\n    var plugin = plugins.find(function (plugin) {\n      if (Array.isArray(plugin)) {\n        return plugin[0] === name;\n      } else {\n        return plugin === name;\n      }\n    });\n\n    if (plugin && Array.isArray(plugin)) {\n      return plugin[1][option];\n    }\n\n    return null;\n  }\n\n  var PIPELINE_PROPOSALS = [\"minimal\", \"smart\", \"fsharp\"];\n\n  function validatePlugins(plugins) {\n    if (hasPlugin(plugins, \"decorators\")) {\n      if (hasPlugin(plugins, \"decorators-legacy\")) {\n        throw new Error(\"Cannot use the decorators and decorators-legacy plugin together\");\n      }\n\n      var decoratorsBeforeExport = getPluginOption(plugins, \"decorators\", \"decoratorsBeforeExport\");\n\n      if (decoratorsBeforeExport == null) {\n        throw new Error(\"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" + \" whose value must be a boolean. If you are migrating from\" + \" Babylon/Babel 6 or want to use the old decorators proposal, you\" + \" should use the 'decorators-legacy' plugin instead of 'decorators'.\");\n      } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n        throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n      }\n    }\n\n    if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n      throw new Error(\"Cannot combine flow and typescript plugins.\");\n    }\n\n    if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n      throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n    }\n\n    if (hasPlugin(plugins, \"pipelineOperator\") && !PIPELINE_PROPOSALS.includes(getPluginOption(plugins, \"pipelineOperator\", \"proposal\"))) {\n      throw new Error(\"'pipelineOperator' requires 'proposal' option whose value should be one of: \" + PIPELINE_PROPOSALS.map(function (p) {\n        return \"'\" + p + \"'\";\n      }).join(\", \"));\n    }\n  }\n\n  var mixinPlugins = {\n    estree: estree,\n    jsx: jsx,\n    flow: flow,\n    typescript: typescript,\n    v8intrinsic: v8intrinsic,\n    placeholders: placeholders\n  };\n  var mixinPluginNames = Object.keys(mixinPlugins);\n  var defaultOptions = {\n    sourceType: \"script\",\n    sourceFilename: undefined,\n    startLine: 1,\n    allowAwaitOutsideFunction: false,\n    allowReturnOutsideFunction: false,\n    allowImportExportEverywhere: false,\n    allowSuperOutsideMethod: false,\n    allowUndeclaredExports: false,\n    plugins: [],\n    strictMode: null,\n    ranges: false,\n    tokens: false,\n    createParenthesizedExpressions: false,\n    errorRecovery: false\n  };\n\n  function getOptions(opts) {\n    var options = {};\n\n    for (var _i = 0, _Object$keys = Object.keys(defaultOptions); _i < _Object$keys.length; _i++) {\n      var key = _Object$keys[_i];\n      options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n    }\n\n    return options;\n  }\n\n  var Position = function Position(line, col) {\n    _classCallCheck(this, Position);\n\n    this.line = line;\n    this.column = col;\n  };\n\n  var SourceLocation = function SourceLocation(start, end) {\n    _classCallCheck(this, SourceLocation);\n\n    this.start = start;\n    this.end = end;\n  };\n\n  function getLineInfo(input, offset) {\n    var line = 1;\n    var lineStart = 0;\n    var match;\n    lineBreakG.lastIndex = 0;\n\n    while ((match = lineBreakG.exec(input)) && match.index < offset) {\n      line++;\n      lineStart = lineBreakG.lastIndex;\n    }\n\n    return new Position(line, offset - lineStart);\n  }\n\n  var BaseParser = function () {\n    function BaseParser() {\n      _classCallCheck(this, BaseParser);\n\n      this.sawUnambiguousESM = false;\n      this.ambiguousScriptDifferentAst = false;\n    }\n\n    _createClass(BaseParser, [{\n      key: \"hasPlugin\",\n      value: function hasPlugin(name) {\n        return this.plugins.has(name);\n      }\n    }, {\n      key: \"getPluginOption\",\n      value: function getPluginOption(plugin, name) {\n        if (this.hasPlugin(plugin)) return this.plugins.get(plugin)[name];\n      }\n    }]);\n\n    return BaseParser;\n  }();\n\n  function last(stack) {\n    return stack[stack.length - 1];\n  }\n\n  var CommentsParser = function (_BaseParser) {\n    _inherits(CommentsParser, _BaseParser);\n\n    function CommentsParser() {\n      _classCallCheck(this, CommentsParser);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(CommentsParser).apply(this, arguments));\n    }\n\n    _createClass(CommentsParser, [{\n      key: \"addComment\",\n      value: function addComment(comment) {\n        if (this.filename) comment.loc.filename = this.filename;\n        this.state.trailingComments.push(comment);\n        this.state.leadingComments.push(comment);\n      }\n    }, {\n      key: \"adjustCommentsAfterTrailingComma\",\n      value: function adjustCommentsAfterTrailingComma(node, elements, takeAllComments) {\n        if (this.state.leadingComments.length === 0) {\n          return;\n        }\n\n        var lastElement = null;\n        var i = elements.length;\n\n        while (lastElement === null && i > 0) {\n          lastElement = elements[--i];\n        }\n\n        if (lastElement === null) {\n          return;\n        }\n\n        for (var j = 0; j < this.state.leadingComments.length; j++) {\n          if (this.state.leadingComments[j].end < this.state.commentPreviousNode.end) {\n            this.state.leadingComments.splice(j, 1);\n            j--;\n          }\n        }\n\n        var newTrailingComments = [];\n\n        for (var _i7 = 0; _i7 < this.state.leadingComments.length; _i7++) {\n          var leadingComment = this.state.leadingComments[_i7];\n\n          if (leadingComment.end < node.end) {\n            newTrailingComments.push(leadingComment);\n\n            if (!takeAllComments) {\n              this.state.leadingComments.splice(_i7, 1);\n              _i7--;\n            }\n          } else {\n            if (node.trailingComments === undefined) {\n              node.trailingComments = [];\n            }\n\n            node.trailingComments.push(leadingComment);\n          }\n        }\n\n        if (takeAllComments) this.state.leadingComments = [];\n\n        if (newTrailingComments.length > 0) {\n          lastElement.trailingComments = newTrailingComments;\n        } else if (lastElement.trailingComments !== undefined) {\n          lastElement.trailingComments = [];\n        }\n      }\n    }, {\n      key: \"processComment\",\n      value: function processComment(node) {\n        if (node.type === \"Program\" && node.body.length > 0) return;\n        var stack = this.state.commentStack;\n        var firstChild, lastChild, trailingComments, i, j;\n\n        if (this.state.trailingComments.length > 0) {\n          if (this.state.trailingComments[0].start >= node.end) {\n            trailingComments = this.state.trailingComments;\n            this.state.trailingComments = [];\n          } else {\n            this.state.trailingComments.length = 0;\n          }\n        } else if (stack.length > 0) {\n          var lastInStack = last(stack);\n\n          if (lastInStack.trailingComments && lastInStack.trailingComments[0].start >= node.end) {\n            trailingComments = lastInStack.trailingComments;\n            delete lastInStack.trailingComments;\n          }\n        }\n\n        if (stack.length > 0 && last(stack).start >= node.start) {\n          firstChild = stack.pop();\n        }\n\n        while (stack.length > 0 && last(stack).start >= node.start) {\n          lastChild = stack.pop();\n        }\n\n        if (!lastChild && firstChild) lastChild = firstChild;\n\n        if (firstChild) {\n          switch (node.type) {\n            case \"ObjectExpression\":\n              this.adjustCommentsAfterTrailingComma(node, node.properties);\n              break;\n\n            case \"ObjectPattern\":\n              this.adjustCommentsAfterTrailingComma(node, node.properties, true);\n              break;\n\n            case \"CallExpression\":\n              this.adjustCommentsAfterTrailingComma(node, node.arguments);\n              break;\n\n            case \"ArrayExpression\":\n              this.adjustCommentsAfterTrailingComma(node, node.elements);\n              break;\n\n            case \"ArrayPattern\":\n              this.adjustCommentsAfterTrailingComma(node, node.elements, true);\n              break;\n          }\n        } else if (this.state.commentPreviousNode && (this.state.commentPreviousNode.type === \"ImportSpecifier\" && node.type !== \"ImportSpecifier\" || this.state.commentPreviousNode.type === \"ExportSpecifier\" && node.type !== \"ExportSpecifier\")) {\n          this.adjustCommentsAfterTrailingComma(node, [this.state.commentPreviousNode], true);\n        }\n\n        if (lastChild) {\n          if (lastChild.leadingComments) {\n            if (lastChild !== node && lastChild.leadingComments.length > 0 && last(lastChild.leadingComments).end <= node.start) {\n              node.leadingComments = lastChild.leadingComments;\n              delete lastChild.leadingComments;\n            } else {\n              for (i = lastChild.leadingComments.length - 2; i >= 0; --i) {\n                if (lastChild.leadingComments[i].end <= node.start) {\n                  node.leadingComments = lastChild.leadingComments.splice(0, i + 1);\n                  break;\n                }\n              }\n            }\n          }\n        } else if (this.state.leadingComments.length > 0) {\n          if (last(this.state.leadingComments).end <= node.start) {\n            if (this.state.commentPreviousNode) {\n              for (j = 0; j < this.state.leadingComments.length; j++) {\n                if (this.state.leadingComments[j].end < this.state.commentPreviousNode.end) {\n                  this.state.leadingComments.splice(j, 1);\n                  j--;\n                }\n              }\n            }\n\n            if (this.state.leadingComments.length > 0) {\n              node.leadingComments = this.state.leadingComments;\n              this.state.leadingComments = [];\n            }\n          } else {\n            for (i = 0; i < this.state.leadingComments.length; i++) {\n              if (this.state.leadingComments[i].end > node.start) {\n                break;\n              }\n            }\n\n            var leadingComments = this.state.leadingComments.slice(0, i);\n\n            if (leadingComments.length) {\n              node.leadingComments = leadingComments;\n            }\n\n            trailingComments = this.state.leadingComments.slice(i);\n\n            if (trailingComments.length === 0) {\n              trailingComments = null;\n            }\n          }\n        }\n\n        this.state.commentPreviousNode = node;\n\n        if (trailingComments) {\n          if (trailingComments.length && trailingComments[0].start >= node.start && last(trailingComments).end <= node.end) {\n            node.innerComments = trailingComments;\n          } else {\n            node.trailingComments = trailingComments;\n          }\n        }\n\n        stack.push(node);\n      }\n    }]);\n\n    return CommentsParser;\n  }(BaseParser);\n\n  var LocationParser = function (_CommentsParser) {\n    _inherits(LocationParser, _CommentsParser);\n\n    function LocationParser() {\n      _classCallCheck(this, LocationParser);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(LocationParser).apply(this, arguments));\n    }\n\n    _createClass(LocationParser, [{\n      key: \"getLocationForPosition\",\n      value: function getLocationForPosition(pos) {\n        var loc;\n        if (pos === this.state.start) loc = this.state.startLoc;else if (pos === this.state.lastTokStart) loc = this.state.lastTokStartLoc;else if (pos === this.state.end) loc = this.state.endLoc;else if (pos === this.state.lastTokEnd) loc = this.state.lastTokEndLoc;else loc = getLineInfo(this.input, pos);\n        return loc;\n      }\n    }, {\n      key: \"raise\",\n      value: function raise(pos, message) {\n        var _ref15 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n            missingPluginNames = _ref15.missingPluginNames,\n            code = _ref15.code;\n\n        var loc = this.getLocationForPosition(pos);\n        message += \" (\" + loc.line + \":\" + loc.column + \")\";\n        var err = new SyntaxError(message);\n        err.pos = pos;\n        err.loc = loc;\n\n        if (missingPluginNames) {\n          err.missingPlugin = missingPluginNames;\n        }\n\n        if (code !== undefined) {\n          err.code = code;\n        }\n\n        if (this.options.errorRecovery) {\n          if (!this.isLookahead) this.state.errors.push(err);\n          return err;\n        } else {\n          throw err;\n        }\n      }\n    }]);\n\n    return LocationParser;\n  }(CommentsParser);\n\n  var State = function () {\n    function State() {\n      _classCallCheck(this, State);\n\n      this.errors = [];\n      this.potentialArrowAt = -1;\n      this.noArrowAt = [];\n      this.noArrowParamsConversionAt = [];\n      this.inParameters = false;\n      this.maybeInArrowParameters = false;\n      this.inPipeline = false;\n      this.inType = false;\n      this.noAnonFunctionType = false;\n      this.inPropertyName = false;\n      this.inClassProperty = false;\n      this.hasFlowComment = false;\n      this.isIterator = false;\n      this.topicContext = {\n        maxNumOfResolvableTopics: 0,\n        maxTopicIndex: null\n      };\n      this.soloAwait = false;\n      this.inFSharpPipelineDirectBody = false;\n      this.classLevel = 0;\n      this.labels = [];\n      this.decoratorStack = [[]];\n      this.yieldPos = -1;\n      this.awaitPos = -1;\n      this.tokens = [];\n      this.comments = [];\n      this.trailingComments = [];\n      this.leadingComments = [];\n      this.commentStack = [];\n      this.commentPreviousNode = null;\n      this.pos = 0;\n      this.lineStart = 0;\n      this.type = types.eof;\n      this.value = null;\n      this.start = 0;\n      this.end = 0;\n      this.lastTokEndLoc = null;\n      this.lastTokStartLoc = null;\n      this.lastTokStart = 0;\n      this.lastTokEnd = 0;\n      this.context = [types$1.braceStatement];\n      this.exprAllowed = true;\n      this.containsEsc = false;\n      this.containsOctal = false;\n      this.octalPosition = null;\n      this.exportedIdentifiers = [];\n      this.invalidTemplateEscapePosition = null;\n    }\n\n    _createClass(State, [{\n      key: \"init\",\n      value: function init(options) {\n        this.strict = options.strictMode === false ? false : options.sourceType === \"module\";\n        this.curLine = options.startLine;\n        this.startLoc = this.endLoc = this.curPosition();\n      }\n    }, {\n      key: \"curPosition\",\n      value: function curPosition() {\n        return new Position(this.curLine, this.pos - this.lineStart);\n      }\n    }, {\n      key: \"clone\",\n      value: function clone(skipArrays) {\n        var state = new State();\n        var keys = Object.keys(this);\n\n        for (var i = 0, length = keys.length; i < length; i++) {\n          var key = keys[i];\n          var val = this[key];\n\n          if (!skipArrays && Array.isArray(val)) {\n            val = val.slice();\n          }\n\n          state[key] = val;\n        }\n\n        return state;\n      }\n    }]);\n\n    return State;\n  }();\n\n  var _isDigit = function isDigit(code) {\n    return code >= 48 && code <= 57;\n  };\n\n  var VALID_REGEX_FLAGS = new Set([\"g\", \"m\", \"s\", \"i\", \"y\", \"u\"]);\n  var forbiddenNumericSeparatorSiblings = {\n    decBinOct: [46, 66, 69, 79, 95, 98, 101, 111],\n    hex: [46, 88, 95, 120]\n  };\n  var allowedNumericSeparatorSiblings = {};\n  allowedNumericSeparatorSiblings.bin = [48, 49];\n  allowedNumericSeparatorSiblings.oct = [].concat(_toConsumableArray(allowedNumericSeparatorSiblings.bin), [50, 51, 52, 53, 54, 55]);\n  allowedNumericSeparatorSiblings.dec = [].concat(_toConsumableArray(allowedNumericSeparatorSiblings.oct), [56, 57]);\n  allowedNumericSeparatorSiblings.hex = [].concat(_toConsumableArray(allowedNumericSeparatorSiblings.dec), [65, 66, 67, 68, 69, 70, 97, 98, 99, 100, 101, 102]);\n\n  var Token = function Token(state) {\n    _classCallCheck(this, Token);\n\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  };\n\n  var Tokenizer = function (_LocationParser) {\n    _inherits(Tokenizer, _LocationParser);\n\n    function Tokenizer(options, input) {\n      var _this34;\n\n      _classCallCheck(this, Tokenizer);\n\n      _this34 = _possibleConstructorReturn(this, _getPrototypeOf(Tokenizer).call(this));\n      _this34.state = new State();\n\n      _this34.state.init(options);\n\n      _this34.input = input;\n      _this34.length = input.length;\n      _this34.isLookahead = false;\n      return _this34;\n    }\n\n    _createClass(Tokenizer, [{\n      key: \"next\",\n      value: function next() {\n        if (!this.isLookahead) {\n          this.checkKeywordEscapes();\n\n          if (this.options.tokens) {\n            this.state.tokens.push(new Token(this.state));\n          }\n        }\n\n        this.state.lastTokEnd = this.state.end;\n        this.state.lastTokStart = this.state.start;\n        this.state.lastTokEndLoc = this.state.endLoc;\n        this.state.lastTokStartLoc = this.state.startLoc;\n        this.nextToken();\n      }\n    }, {\n      key: \"eat\",\n      value: function eat(type) {\n        if (this.match(type)) {\n          this.next();\n          return true;\n        } else {\n          return false;\n        }\n      }\n    }, {\n      key: \"match\",\n      value: function match(type) {\n        return this.state.type === type;\n      }\n    }, {\n      key: \"lookahead\",\n      value: function lookahead() {\n        var old = this.state;\n        this.state = old.clone(true);\n        this.isLookahead = true;\n        this.next();\n        this.isLookahead = false;\n        var curr = this.state;\n        this.state = old;\n        return curr;\n      }\n    }, {\n      key: \"nextTokenStart\",\n      value: function nextTokenStart() {\n        var thisTokEnd = this.state.pos;\n        skipWhiteSpace.lastIndex = thisTokEnd;\n        var skip = skipWhiteSpace.exec(this.input);\n        return thisTokEnd + skip[0].length;\n      }\n    }, {\n      key: \"lookaheadCharCode\",\n      value: function lookaheadCharCode() {\n        return this.input.charCodeAt(this.nextTokenStart());\n      }\n    }, {\n      key: \"setStrict\",\n      value: function setStrict(strict) {\n        this.state.strict = strict;\n        if (!this.match(types.num) && !this.match(types.string)) return;\n        this.state.pos = this.state.start;\n\n        while (this.state.pos < this.state.lineStart) {\n          this.state.lineStart = this.input.lastIndexOf(\"\\n\", this.state.lineStart - 2) + 1;\n          --this.state.curLine;\n        }\n\n        this.nextToken();\n      }\n    }, {\n      key: \"curContext\",\n      value: function curContext() {\n        return this.state.context[this.state.context.length - 1];\n      }\n    }, {\n      key: \"nextToken\",\n      value: function nextToken() {\n        var curContext = this.curContext();\n        if (!curContext || !curContext.preserveSpace) this.skipSpace();\n        this.state.containsOctal = false;\n        this.state.octalPosition = null;\n        this.state.start = this.state.pos;\n        this.state.startLoc = this.state.curPosition();\n\n        if (this.state.pos >= this.length) {\n          this.finishToken(types.eof);\n          return;\n        }\n\n        if (curContext.override) {\n          curContext.override(this);\n        } else {\n          this.getTokenFromCode(this.input.codePointAt(this.state.pos));\n        }\n      }\n    }, {\n      key: \"pushComment\",\n      value: function pushComment(block, text, start, end, startLoc, endLoc) {\n        var comment = {\n          type: block ? \"CommentBlock\" : \"CommentLine\",\n          value: text,\n          start: start,\n          end: end,\n          loc: new SourceLocation(startLoc, endLoc)\n        };\n        if (this.options.tokens) this.state.tokens.push(comment);\n        this.state.comments.push(comment);\n        this.addComment(comment);\n      }\n    }, {\n      key: \"skipBlockComment\",\n      value: function skipBlockComment() {\n        var startLoc = this.state.curPosition();\n        var start = this.state.pos;\n        var end = this.input.indexOf(\"*/\", this.state.pos + 2);\n        if (end === -1) throw this.raise(start, \"Unterminated comment\");\n        this.state.pos = end + 2;\n        lineBreakG.lastIndex = start;\n        var match;\n\n        while ((match = lineBreakG.exec(this.input)) && match.index < this.state.pos) {\n          ++this.state.curLine;\n          this.state.lineStart = match.index + match[0].length;\n        }\n\n        if (this.isLookahead) return;\n        this.pushComment(true, this.input.slice(start + 2, end), start, this.state.pos, startLoc, this.state.curPosition());\n      }\n    }, {\n      key: \"skipLineComment\",\n      value: function skipLineComment(startSkip) {\n        var start = this.state.pos;\n        var startLoc = this.state.curPosition();\n        var ch = this.input.charCodeAt(this.state.pos += startSkip);\n\n        if (this.state.pos < this.length) {\n          while (!isNewLine(ch) && ++this.state.pos < this.length) {\n            ch = this.input.charCodeAt(this.state.pos);\n          }\n        }\n\n        if (this.isLookahead) return;\n        this.pushComment(false, this.input.slice(start + startSkip, this.state.pos), start, this.state.pos, startLoc, this.state.curPosition());\n      }\n    }, {\n      key: \"skipSpace\",\n      value: function skipSpace() {\n        loop: while (this.state.pos < this.length) {\n          var ch = this.input.charCodeAt(this.state.pos);\n\n          switch (ch) {\n            case 32:\n            case 160:\n            case 9:\n              ++this.state.pos;\n              break;\n\n            case 13:\n              if (this.input.charCodeAt(this.state.pos + 1) === 10) {\n                ++this.state.pos;\n              }\n\n            case 10:\n            case 8232:\n            case 8233:\n              ++this.state.pos;\n              ++this.state.curLine;\n              this.state.lineStart = this.state.pos;\n              break;\n\n            case 47:\n              switch (this.input.charCodeAt(this.state.pos + 1)) {\n                case 42:\n                  this.skipBlockComment();\n                  break;\n\n                case 47:\n                  this.skipLineComment(2);\n                  break;\n\n                default:\n                  break loop;\n              }\n\n              break;\n\n            default:\n              if (isWhitespace(ch)) {\n                ++this.state.pos;\n              } else {\n                break loop;\n              }\n\n          }\n        }\n      }\n    }, {\n      key: \"finishToken\",\n      value: function finishToken(type, val) {\n        this.state.end = this.state.pos;\n        this.state.endLoc = this.state.curPosition();\n        var prevType = this.state.type;\n        this.state.type = type;\n        this.state.value = val;\n        if (!this.isLookahead) this.updateContext(prevType);\n      }\n    }, {\n      key: \"readToken_numberSign\",\n      value: function readToken_numberSign() {\n        if (this.state.pos === 0 && this.readToken_interpreter()) {\n          return;\n        }\n\n        var nextPos = this.state.pos + 1;\n        var next = this.input.charCodeAt(nextPos);\n\n        if (next >= 48 && next <= 57) {\n          throw this.raise(this.state.pos, \"Unexpected digit after hash token\");\n        }\n\n        if ((this.hasPlugin(\"classPrivateProperties\") || this.hasPlugin(\"classPrivateMethods\")) && this.state.classLevel > 0) {\n          ++this.state.pos;\n          this.finishToken(types.hash);\n          return;\n        } else if (this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\") {\n          this.finishOp(types.hash, 1);\n        } else {\n          throw this.raise(this.state.pos, \"Unexpected character '#'\");\n        }\n      }\n    }, {\n      key: \"readToken_dot\",\n      value: function readToken_dot() {\n        var next = this.input.charCodeAt(this.state.pos + 1);\n\n        if (next >= 48 && next <= 57) {\n          this.readNumber(true);\n          return;\n        }\n\n        if (next === 46 && this.input.charCodeAt(this.state.pos + 2) === 46) {\n          this.state.pos += 3;\n          this.finishToken(types.ellipsis);\n        } else {\n          ++this.state.pos;\n          this.finishToken(types.dot);\n        }\n      }\n    }, {\n      key: \"readToken_slash\",\n      value: function readToken_slash() {\n        if (this.state.exprAllowed && !this.state.inType) {\n          ++this.state.pos;\n          this.readRegexp();\n          return;\n        }\n\n        var next = this.input.charCodeAt(this.state.pos + 1);\n\n        if (next === 61) {\n          this.finishOp(types.assign, 2);\n        } else {\n          this.finishOp(types.slash, 1);\n        }\n      }\n    }, {\n      key: \"readToken_interpreter\",\n      value: function readToken_interpreter() {\n        if (this.state.pos !== 0 || this.length < 2) return false;\n        var start = this.state.pos;\n        this.state.pos += 1;\n        var ch = this.input.charCodeAt(this.state.pos);\n        if (ch !== 33) return false;\n\n        while (!isNewLine(ch) && ++this.state.pos < this.length) {\n          ch = this.input.charCodeAt(this.state.pos);\n        }\n\n        var value = this.input.slice(start + 2, this.state.pos);\n        this.finishToken(types.interpreterDirective, value);\n        return true;\n      }\n    }, {\n      key: \"readToken_mult_modulo\",\n      value: function readToken_mult_modulo(code) {\n        var type = code === 42 ? types.star : types.modulo;\n        var width = 1;\n        var next = this.input.charCodeAt(this.state.pos + 1);\n        var exprAllowed = this.state.exprAllowed;\n\n        if (code === 42 && next === 42) {\n          width++;\n          next = this.input.charCodeAt(this.state.pos + 2);\n          type = types.exponent;\n        }\n\n        if (next === 61 && !exprAllowed) {\n          width++;\n          type = types.assign;\n        }\n\n        this.finishOp(type, width);\n      }\n    }, {\n      key: \"readToken_pipe_amp\",\n      value: function readToken_pipe_amp(code) {\n        var next = this.input.charCodeAt(this.state.pos + 1);\n\n        if (next === code) {\n          if (this.input.charCodeAt(this.state.pos + 2) === 61) {\n            this.finishOp(types.assign, 3);\n          } else {\n            this.finishOp(code === 124 ? types.logicalOR : types.logicalAND, 2);\n          }\n\n          return;\n        }\n\n        if (code === 124) {\n          if (next === 62) {\n            this.finishOp(types.pipeline, 2);\n            return;\n          }\n        }\n\n        if (next === 61) {\n          this.finishOp(types.assign, 2);\n          return;\n        }\n\n        this.finishOp(code === 124 ? types.bitwiseOR : types.bitwiseAND, 1);\n      }\n    }, {\n      key: \"readToken_caret\",\n      value: function readToken_caret() {\n        var next = this.input.charCodeAt(this.state.pos + 1);\n\n        if (next === 61) {\n          this.finishOp(types.assign, 2);\n        } else {\n          this.finishOp(types.bitwiseXOR, 1);\n        }\n      }\n    }, {\n      key: \"readToken_plus_min\",\n      value: function readToken_plus_min(code) {\n        var next = this.input.charCodeAt(this.state.pos + 1);\n\n        if (next === code) {\n          if (next === 45 && !this.inModule && this.input.charCodeAt(this.state.pos + 2) === 62 && (this.state.lastTokEnd === 0 || lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.pos)))) {\n            this.skipLineComment(3);\n            this.skipSpace();\n            this.nextToken();\n            return;\n          }\n\n          this.finishOp(types.incDec, 2);\n          return;\n        }\n\n        if (next === 61) {\n          this.finishOp(types.assign, 2);\n        } else {\n          this.finishOp(types.plusMin, 1);\n        }\n      }\n    }, {\n      key: \"readToken_lt_gt\",\n      value: function readToken_lt_gt(code) {\n        var next = this.input.charCodeAt(this.state.pos + 1);\n        var size = 1;\n\n        if (next === code) {\n          size = code === 62 && this.input.charCodeAt(this.state.pos + 2) === 62 ? 3 : 2;\n\n          if (this.input.charCodeAt(this.state.pos + size) === 61) {\n            this.finishOp(types.assign, size + 1);\n            return;\n          }\n\n          this.finishOp(types.bitShift, size);\n          return;\n        }\n\n        if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.state.pos + 2) === 45 && this.input.charCodeAt(this.state.pos + 3) === 45) {\n          this.skipLineComment(4);\n          this.skipSpace();\n          this.nextToken();\n          return;\n        }\n\n        if (next === 61) {\n          size = 2;\n        }\n\n        this.finishOp(types.relational, size);\n      }\n    }, {\n      key: \"readToken_eq_excl\",\n      value: function readToken_eq_excl(code) {\n        var next = this.input.charCodeAt(this.state.pos + 1);\n\n        if (next === 61) {\n          this.finishOp(types.equality, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);\n          return;\n        }\n\n        if (code === 61 && next === 62) {\n          this.state.pos += 2;\n          this.finishToken(types.arrow);\n          return;\n        }\n\n        this.finishOp(code === 61 ? types.eq : types.bang, 1);\n      }\n    }, {\n      key: \"readToken_question\",\n      value: function readToken_question() {\n        var next = this.input.charCodeAt(this.state.pos + 1);\n        var next2 = this.input.charCodeAt(this.state.pos + 2);\n\n        if (next === 63 && !this.state.inType) {\n          if (next2 === 61) {\n            this.finishOp(types.assign, 3);\n          } else {\n            this.finishOp(types.nullishCoalescing, 2);\n          }\n        } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {\n          this.state.pos += 2;\n          this.finishToken(types.questionDot);\n        } else {\n          ++this.state.pos;\n          this.finishToken(types.question);\n        }\n      }\n    }, {\n      key: \"getTokenFromCode\",\n      value: function getTokenFromCode(code) {\n        switch (code) {\n          case 46:\n            this.readToken_dot();\n            return;\n\n          case 40:\n            ++this.state.pos;\n            this.finishToken(types.parenL);\n            return;\n\n          case 41:\n            ++this.state.pos;\n            this.finishToken(types.parenR);\n            return;\n\n          case 59:\n            ++this.state.pos;\n            this.finishToken(types.semi);\n            return;\n\n          case 44:\n            ++this.state.pos;\n            this.finishToken(types.comma);\n            return;\n\n          case 91:\n            ++this.state.pos;\n            this.finishToken(types.bracketL);\n            return;\n\n          case 93:\n            ++this.state.pos;\n            this.finishToken(types.bracketR);\n            return;\n\n          case 123:\n            ++this.state.pos;\n            this.finishToken(types.braceL);\n            return;\n\n          case 125:\n            ++this.state.pos;\n            this.finishToken(types.braceR);\n            return;\n\n          case 58:\n            if (this.hasPlugin(\"functionBind\") && this.input.charCodeAt(this.state.pos + 1) === 58) {\n              this.finishOp(types.doubleColon, 2);\n            } else {\n              ++this.state.pos;\n              this.finishToken(types.colon);\n            }\n\n            return;\n\n          case 63:\n            this.readToken_question();\n            return;\n\n          case 96:\n            ++this.state.pos;\n            this.finishToken(types.backQuote);\n            return;\n\n          case 48:\n            {\n              var next = this.input.charCodeAt(this.state.pos + 1);\n\n              if (next === 120 || next === 88) {\n                this.readRadixNumber(16);\n                return;\n              }\n\n              if (next === 111 || next === 79) {\n                this.readRadixNumber(8);\n                return;\n              }\n\n              if (next === 98 || next === 66) {\n                this.readRadixNumber(2);\n                return;\n              }\n            }\n\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n            this.readNumber(false);\n            return;\n\n          case 34:\n          case 39:\n            this.readString(code);\n            return;\n\n          case 47:\n            this.readToken_slash();\n            return;\n\n          case 37:\n          case 42:\n            this.readToken_mult_modulo(code);\n            return;\n\n          case 124:\n          case 38:\n            this.readToken_pipe_amp(code);\n            return;\n\n          case 94:\n            this.readToken_caret();\n            return;\n\n          case 43:\n          case 45:\n            this.readToken_plus_min(code);\n            return;\n\n          case 60:\n          case 62:\n            this.readToken_lt_gt(code);\n            return;\n\n          case 61:\n          case 33:\n            this.readToken_eq_excl(code);\n            return;\n\n          case 126:\n            this.finishOp(types.tilde, 1);\n            return;\n\n          case 64:\n            ++this.state.pos;\n            this.finishToken(types.at);\n            return;\n\n          case 35:\n            this.readToken_numberSign();\n            return;\n\n          case 92:\n            this.readWord();\n            return;\n\n          default:\n            if (isIdentifierStart(code)) {\n              this.readWord();\n              return;\n            }\n\n        }\n\n        throw this.raise(this.state.pos, \"Unexpected character '\" + String.fromCodePoint(code) + \"'\");\n      }\n    }, {\n      key: \"finishOp\",\n      value: function finishOp(type, size) {\n        var str = this.input.slice(this.state.pos, this.state.pos + size);\n        this.state.pos += size;\n        this.finishToken(type, str);\n      }\n    }, {\n      key: \"readRegexp\",\n      value: function readRegexp() {\n        var start = this.state.pos;\n        var escaped, inClass;\n\n        for (;;) {\n          if (this.state.pos >= this.length) {\n            throw this.raise(start, \"Unterminated regular expression\");\n          }\n\n          var ch = this.input.charAt(this.state.pos);\n\n          if (lineBreak.test(ch)) {\n            throw this.raise(start, \"Unterminated regular expression\");\n          }\n\n          if (escaped) {\n            escaped = false;\n          } else {\n            if (ch === \"[\") {\n              inClass = true;\n            } else if (ch === \"]\" && inClass) {\n              inClass = false;\n            } else if (ch === \"/\" && !inClass) {\n              break;\n            }\n\n            escaped = ch === \"\\\\\";\n          }\n\n          ++this.state.pos;\n        }\n\n        var content = this.input.slice(start, this.state.pos);\n        ++this.state.pos;\n        var mods = \"\";\n\n        while (this.state.pos < this.length) {\n          var char = this.input[this.state.pos];\n          var charCode = this.input.codePointAt(this.state.pos);\n\n          if (VALID_REGEX_FLAGS.has(char)) {\n            if (mods.indexOf(char) > -1) {\n              this.raise(this.state.pos + 1, \"Duplicate regular expression flag\");\n            }\n          } else if (isIdentifierChar(charCode) || charCode === 92) {\n            this.raise(this.state.pos + 1, \"Invalid regular expression flag\");\n          } else {\n            break;\n          }\n\n          ++this.state.pos;\n          mods += char;\n        }\n\n        this.finishToken(types.regexp, {\n          pattern: content,\n          flags: mods\n        });\n      }\n    }, {\n      key: \"readInt\",\n      value: function readInt(radix, len, forceLen) {\n        var allowNumSeparator = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n        var start = this.state.pos;\n        var forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;\n        var allowedSiblings = radix === 16 ? allowedNumericSeparatorSiblings.hex : radix === 10 ? allowedNumericSeparatorSiblings.dec : radix === 8 ? allowedNumericSeparatorSiblings.oct : allowedNumericSeparatorSiblings.bin;\n        var invalid = false;\n        var total = 0;\n\n        for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n          var code = this.input.charCodeAt(this.state.pos);\n          var val = void 0;\n\n          if (this.hasPlugin(\"numericSeparator\")) {\n            if (code === 95) {\n              var prev = this.input.charCodeAt(this.state.pos - 1);\n              var next = this.input.charCodeAt(this.state.pos + 1);\n\n              if (allowedSiblings.indexOf(next) === -1) {\n                this.raise(this.state.pos, \"A numeric separator is only allowed between two digits\");\n              } else if (forbiddenSiblings.indexOf(prev) > -1 || forbiddenSiblings.indexOf(next) > -1 || Number.isNaN(next)) {\n                this.raise(this.state.pos, \"A numeric separator is only allowed between two digits\");\n              }\n\n              if (!allowNumSeparator) {\n                this.raise(this.state.pos, \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences\");\n              }\n\n              ++this.state.pos;\n              continue;\n            }\n          }\n\n          if (code >= 97) {\n            val = code - 97 + 10;\n          } else if (code >= 65) {\n            val = code - 65 + 10;\n          } else if (_isDigit(code)) {\n            val = code - 48;\n          } else {\n            val = Infinity;\n          }\n\n          if (val >= radix) {\n            if (this.options.errorRecovery && val <= 9) {\n              val = 0;\n              this.raise(this.state.start + i + 2, \"Expected number in radix \" + radix);\n            } else if (forceLen) {\n              val = 0;\n              invalid = true;\n            } else {\n              break;\n            }\n          }\n\n          ++this.state.pos;\n          total = total * radix + val;\n        }\n\n        if (this.state.pos === start || len != null && this.state.pos - start !== len || invalid) {\n          return null;\n        }\n\n        return total;\n      }\n    }, {\n      key: \"readRadixNumber\",\n      value: function readRadixNumber(radix) {\n        var start = this.state.pos;\n        var isBigInt = false;\n        this.state.pos += 2;\n        var val = this.readInt(radix);\n\n        if (val == null) {\n          this.raise(this.state.start + 2, \"Expected number in radix \" + radix);\n        }\n\n        if (this.hasPlugin(\"bigInt\")) {\n          if (this.input.charCodeAt(this.state.pos) === 110) {\n            ++this.state.pos;\n            isBigInt = true;\n          }\n        }\n\n        if (isIdentifierStart(this.input.codePointAt(this.state.pos))) {\n          throw this.raise(this.state.pos, \"Identifier directly after number\");\n        }\n\n        if (isBigInt) {\n          var str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n          this.finishToken(types.bigint, str);\n          return;\n        }\n\n        this.finishToken(types.num, val);\n      }\n    }, {\n      key: \"readNumber\",\n      value: function readNumber(startsWithDot) {\n        var start = this.state.pos;\n        var isFloat = false;\n        var isBigInt = false;\n        var isNonOctalDecimalInt = false;\n\n        if (!startsWithDot && this.readInt(10) === null) {\n          this.raise(start, \"Invalid number\");\n        }\n\n        var octal = this.state.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n\n        if (octal) {\n          if (this.state.strict) {\n            this.raise(start, \"Legacy octal literals are not allowed in strict mode\");\n          }\n\n          if (/[89]/.test(this.input.slice(start, this.state.pos))) {\n            octal = false;\n            isNonOctalDecimalInt = true;\n          }\n        }\n\n        var next = this.input.charCodeAt(this.state.pos);\n\n        if (next === 46 && !octal) {\n          ++this.state.pos;\n          this.readInt(10);\n          isFloat = true;\n          next = this.input.charCodeAt(this.state.pos);\n        }\n\n        if ((next === 69 || next === 101) && !octal) {\n          next = this.input.charCodeAt(++this.state.pos);\n\n          if (next === 43 || next === 45) {\n            ++this.state.pos;\n          }\n\n          if (this.readInt(10) === null) this.raise(start, \"Invalid number\");\n          isFloat = true;\n          next = this.input.charCodeAt(this.state.pos);\n        }\n\n        if (this.hasPlugin(\"numericSeparator\") && (octal || isNonOctalDecimalInt)) {\n          var underscorePos = this.input.slice(start, this.state.pos).indexOf(\"_\");\n\n          if (underscorePos > 0) {\n            this.raise(underscorePos + start, \"Numeric separator can not be used after leading 0\");\n          }\n        }\n\n        if (this.hasPlugin(\"bigInt\")) {\n          if (next === 110) {\n            if (isFloat || octal || isNonOctalDecimalInt) {\n              this.raise(start, \"Invalid BigIntLiteral\");\n            }\n\n            ++this.state.pos;\n            isBigInt = true;\n          }\n        }\n\n        if (isIdentifierStart(this.input.codePointAt(this.state.pos))) {\n          throw this.raise(this.state.pos, \"Identifier directly after number\");\n        }\n\n        var str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n\n        if (isBigInt) {\n          this.finishToken(types.bigint, str);\n          return;\n        }\n\n        var val = octal ? parseInt(str, 8) : parseFloat(str);\n        this.finishToken(types.num, val);\n      }\n    }, {\n      key: \"readCodePoint\",\n      value: function readCodePoint(throwOnInvalid) {\n        var ch = this.input.charCodeAt(this.state.pos);\n        var code;\n\n        if (ch === 123) {\n          var codePos = ++this.state.pos;\n          code = this.readHexChar(this.input.indexOf(\"}\", this.state.pos) - this.state.pos, true, throwOnInvalid);\n          ++this.state.pos;\n\n          if (code === null) {\n            --this.state.invalidTemplateEscapePosition;\n          } else if (code > 0x10ffff) {\n            if (throwOnInvalid) {\n              this.raise(codePos, \"Code point out of bounds\");\n            } else {\n              this.state.invalidTemplateEscapePosition = codePos - 2;\n              return null;\n            }\n          }\n        } else {\n          code = this.readHexChar(4, false, throwOnInvalid);\n        }\n\n        return code;\n      }\n    }, {\n      key: \"readString\",\n      value: function readString(quote) {\n        var out = \"\",\n            chunkStart = ++this.state.pos;\n\n        for (;;) {\n          if (this.state.pos >= this.length) {\n            throw this.raise(this.state.start, \"Unterminated string constant\");\n          }\n\n          var ch = this.input.charCodeAt(this.state.pos);\n          if (ch === quote) break;\n\n          if (ch === 92) {\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.readEscapedChar(false);\n            chunkStart = this.state.pos;\n          } else if (ch === 8232 || ch === 8233) {\n            ++this.state.pos;\n            ++this.state.curLine;\n          } else if (isNewLine(ch)) {\n            throw this.raise(this.state.start, \"Unterminated string constant\");\n          } else {\n            ++this.state.pos;\n          }\n        }\n\n        out += this.input.slice(chunkStart, this.state.pos++);\n        this.finishToken(types.string, out);\n      }\n    }, {\n      key: \"readTmplToken\",\n      value: function readTmplToken() {\n        var out = \"\",\n            chunkStart = this.state.pos,\n            containsInvalid = false;\n\n        for (;;) {\n          if (this.state.pos >= this.length) {\n            throw this.raise(this.state.start, \"Unterminated template\");\n          }\n\n          var ch = this.input.charCodeAt(this.state.pos);\n\n          if (ch === 96 || ch === 36 && this.input.charCodeAt(this.state.pos + 1) === 123) {\n            if (this.state.pos === this.state.start && this.match(types.template)) {\n              if (ch === 36) {\n                this.state.pos += 2;\n                this.finishToken(types.dollarBraceL);\n                return;\n              } else {\n                ++this.state.pos;\n                this.finishToken(types.backQuote);\n                return;\n              }\n            }\n\n            out += this.input.slice(chunkStart, this.state.pos);\n            this.finishToken(types.template, containsInvalid ? null : out);\n            return;\n          }\n\n          if (ch === 92) {\n            out += this.input.slice(chunkStart, this.state.pos);\n            var escaped = this.readEscapedChar(true);\n\n            if (escaped === null) {\n              containsInvalid = true;\n            } else {\n              out += escaped;\n            }\n\n            chunkStart = this.state.pos;\n          } else if (isNewLine(ch)) {\n            out += this.input.slice(chunkStart, this.state.pos);\n            ++this.state.pos;\n\n            switch (ch) {\n              case 13:\n                if (this.input.charCodeAt(this.state.pos) === 10) {\n                  ++this.state.pos;\n                }\n\n              case 10:\n                out += \"\\n\";\n                break;\n\n              default:\n                out += String.fromCharCode(ch);\n                break;\n            }\n\n            ++this.state.curLine;\n            this.state.lineStart = this.state.pos;\n            chunkStart = this.state.pos;\n          } else {\n            ++this.state.pos;\n          }\n        }\n      }\n    }, {\n      key: \"readEscapedChar\",\n      value: function readEscapedChar(inTemplate) {\n        var throwOnInvalid = !inTemplate;\n        var ch = this.input.charCodeAt(++this.state.pos);\n        ++this.state.pos;\n\n        switch (ch) {\n          case 110:\n            return \"\\n\";\n\n          case 114:\n            return \"\\r\";\n\n          case 120:\n            {\n              var code = this.readHexChar(2, false, throwOnInvalid);\n              return code === null ? null : String.fromCharCode(code);\n            }\n\n          case 117:\n            {\n              var _code = this.readCodePoint(throwOnInvalid);\n\n              return _code === null ? null : String.fromCodePoint(_code);\n            }\n\n          case 116:\n            return \"\\t\";\n\n          case 98:\n            return \"\\b\";\n\n          case 118:\n            return \"\\x0B\";\n\n          case 102:\n            return \"\\f\";\n\n          case 13:\n            if (this.input.charCodeAt(this.state.pos) === 10) {\n              ++this.state.pos;\n            }\n\n          case 10:\n            this.state.lineStart = this.state.pos;\n            ++this.state.curLine;\n\n          case 8232:\n          case 8233:\n            return \"\";\n\n          case 56:\n          case 57:\n            if (inTemplate) {\n              var codePos = this.state.pos - 1;\n              this.state.invalidTemplateEscapePosition = codePos;\n              return null;\n            }\n\n          default:\n            if (ch >= 48 && ch <= 55) {\n              var _codePos = this.state.pos - 1;\n\n              var octalStr = this.input.substr(this.state.pos - 1, 3).match(/^[0-7]+/)[0];\n              var octal = parseInt(octalStr, 8);\n\n              if (octal > 255) {\n                octalStr = octalStr.slice(0, -1);\n                octal = parseInt(octalStr, 8);\n              }\n\n              this.state.pos += octalStr.length - 1;\n              var next = this.input.charCodeAt(this.state.pos);\n\n              if (octalStr !== \"0\" || next === 56 || next === 57) {\n                if (inTemplate) {\n                  this.state.invalidTemplateEscapePosition = _codePos;\n                  return null;\n                } else if (this.state.strict) {\n                  this.raise(_codePos, \"Octal literal in strict mode\");\n                } else if (!this.state.containsOctal) {\n                  this.state.containsOctal = true;\n                  this.state.octalPosition = _codePos;\n                }\n              }\n\n              return String.fromCharCode(octal);\n            }\n\n            return String.fromCharCode(ch);\n        }\n      }\n    }, {\n      key: \"readHexChar\",\n      value: function readHexChar(len, forceLen, throwOnInvalid) {\n        var codePos = this.state.pos;\n        var n = this.readInt(16, len, forceLen, false);\n\n        if (n === null) {\n          if (throwOnInvalid) {\n            this.raise(codePos, \"Bad character escape sequence\");\n          } else {\n            this.state.pos = codePos - 1;\n            this.state.invalidTemplateEscapePosition = codePos - 1;\n          }\n        }\n\n        return n;\n      }\n    }, {\n      key: \"readWord1\",\n      value: function readWord1() {\n        var word = \"\";\n        this.state.containsEsc = false;\n        var start = this.state.pos;\n        var chunkStart = this.state.pos;\n\n        while (this.state.pos < this.length) {\n          var ch = this.input.codePointAt(this.state.pos);\n\n          if (isIdentifierChar(ch)) {\n            this.state.pos += ch <= 0xffff ? 1 : 2;\n          } else if (this.state.isIterator && ch === 64) {\n            ++this.state.pos;\n          } else if (ch === 92) {\n            this.state.containsEsc = true;\n            word += this.input.slice(chunkStart, this.state.pos);\n            var escStart = this.state.pos;\n            var identifierCheck = this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n            if (this.input.charCodeAt(++this.state.pos) !== 117) {\n              this.raise(this.state.pos, \"Expecting Unicode escape sequence \\\\uXXXX\");\n              continue;\n            }\n\n            ++this.state.pos;\n            var esc = this.readCodePoint(true);\n\n            if (esc !== null) {\n              if (!identifierCheck(esc)) {\n                this.raise(escStart, \"Invalid Unicode escape\");\n              }\n\n              word += String.fromCodePoint(esc);\n            }\n\n            chunkStart = this.state.pos;\n          } else {\n            break;\n          }\n        }\n\n        return word + this.input.slice(chunkStart, this.state.pos);\n      }\n    }, {\n      key: \"isIterator\",\n      value: function isIterator(word) {\n        return word === \"@@iterator\" || word === \"@@asyncIterator\";\n      }\n    }, {\n      key: \"readWord\",\n      value: function readWord() {\n        var word = this.readWord1();\n        var type = keywords.get(word) || types.name;\n\n        if (this.state.isIterator && (!this.isIterator(word) || !this.state.inType)) {\n          this.raise(this.state.pos, \"Invalid identifier \" + word);\n        }\n\n        this.finishToken(type, word);\n      }\n    }, {\n      key: \"checkKeywordEscapes\",\n      value: function checkKeywordEscapes() {\n        var kw = this.state.type.keyword;\n\n        if (kw && this.state.containsEsc) {\n          this.raise(this.state.start, \"Escape sequence in keyword \" + kw);\n        }\n      }\n    }, {\n      key: \"braceIsBlock\",\n      value: function braceIsBlock(prevType) {\n        var parent = this.curContext();\n\n        if (parent === types$1.functionExpression || parent === types$1.functionStatement) {\n          return true;\n        }\n\n        if (prevType === types.colon && (parent === types$1.braceStatement || parent === types$1.braceExpression)) {\n          return !parent.isExpr;\n        }\n\n        if (prevType === types._return || prevType === types.name && this.state.exprAllowed) {\n          return lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));\n        }\n\n        if (prevType === types._else || prevType === types.semi || prevType === types.eof || prevType === types.parenR || prevType === types.arrow) {\n          return true;\n        }\n\n        if (prevType === types.braceL) {\n          return parent === types$1.braceStatement;\n        }\n\n        if (prevType === types._var || prevType === types._const || prevType === types.name) {\n          return false;\n        }\n\n        if (prevType === types.relational) {\n          return true;\n        }\n\n        return !this.state.exprAllowed;\n      }\n    }, {\n      key: \"updateContext\",\n      value: function updateContext(prevType) {\n        var type = this.state.type;\n        var update;\n\n        if (type.keyword && (prevType === types.dot || prevType === types.questionDot)) {\n          this.state.exprAllowed = false;\n        } else if (update = type.updateContext) {\n          update.call(this, prevType);\n        } else {\n          this.state.exprAllowed = type.beforeExpr;\n        }\n      }\n    }]);\n\n    return Tokenizer;\n  }(LocationParser);\n\n  var literal = /^('|\")((?:\\\\?.)*?)\\1/;\n\n  var UtilParser = function (_Tokenizer) {\n    _inherits(UtilParser, _Tokenizer);\n\n    function UtilParser() {\n      _classCallCheck(this, UtilParser);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(UtilParser).apply(this, arguments));\n    }\n\n    _createClass(UtilParser, [{\n      key: \"addExtra\",\n      value: function addExtra(node, key, val) {\n        if (!node) return;\n        var extra = node.extra = node.extra || {};\n        extra[key] = val;\n      }\n    }, {\n      key: \"isRelational\",\n      value: function isRelational(op) {\n        return this.match(types.relational) && this.state.value === op;\n      }\n    }, {\n      key: \"isLookaheadRelational\",\n      value: function isLookaheadRelational(op) {\n        var next = this.nextTokenStart();\n\n        if (this.input.charAt(next) === op) {\n          if (next + 1 === this.input.length) {\n            return true;\n          }\n\n          var afterNext = this.input.charCodeAt(next + 1);\n          return afterNext !== op.charCodeAt(0) && afterNext !== 61;\n        }\n\n        return false;\n      }\n    }, {\n      key: \"expectRelational\",\n      value: function expectRelational(op) {\n        if (this.isRelational(op)) {\n          this.next();\n        } else {\n          this.unexpected(null, types.relational);\n        }\n      }\n    }, {\n      key: \"eatRelational\",\n      value: function eatRelational(op) {\n        if (this.isRelational(op)) {\n          this.next();\n          return true;\n        }\n\n        return false;\n      }\n    }, {\n      key: \"isContextual\",\n      value: function isContextual(name) {\n        return this.match(types.name) && this.state.value === name && !this.state.containsEsc;\n      }\n    }, {\n      key: \"isUnparsedContextual\",\n      value: function isUnparsedContextual(nameStart, name) {\n        var nameEnd = nameStart + name.length;\n        return this.input.slice(nameStart, nameEnd) === name && (nameEnd === this.input.length || !isIdentifierChar(this.input.charCodeAt(nameEnd)));\n      }\n    }, {\n      key: \"isLookaheadContextual\",\n      value: function isLookaheadContextual(name) {\n        var next = this.nextTokenStart();\n        return this.isUnparsedContextual(next, name);\n      }\n    }, {\n      key: \"eatContextual\",\n      value: function eatContextual(name) {\n        return this.isContextual(name) && this.eat(types.name);\n      }\n    }, {\n      key: \"expectContextual\",\n      value: function expectContextual(name, message) {\n        if (!this.eatContextual(name)) this.unexpected(null, message);\n      }\n    }, {\n      key: \"canInsertSemicolon\",\n      value: function canInsertSemicolon() {\n        return this.match(types.eof) || this.match(types.braceR) || this.hasPrecedingLineBreak();\n      }\n    }, {\n      key: \"hasPrecedingLineBreak\",\n      value: function hasPrecedingLineBreak() {\n        return lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));\n      }\n    }, {\n      key: \"isLineTerminator\",\n      value: function isLineTerminator() {\n        return this.eat(types.semi) || this.canInsertSemicolon();\n      }\n    }, {\n      key: \"semicolon\",\n      value: function semicolon() {\n        if (!this.isLineTerminator()) this.unexpected(null, types.semi);\n      }\n    }, {\n      key: \"expect\",\n      value: function expect(type, pos) {\n        this.eat(type) || this.unexpected(pos, type);\n      }\n    }, {\n      key: \"assertNoSpace\",\n      value: function assertNoSpace() {\n        var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"Unexpected space.\";\n\n        if (this.state.start > this.state.lastTokEnd) {\n          this.raise(this.state.lastTokEnd, message);\n        }\n      }\n    }, {\n      key: \"unexpected\",\n      value: function unexpected(pos) {\n        var messageOrType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"Unexpected token\";\n\n        if (typeof messageOrType !== \"string\") {\n          messageOrType = \"Unexpected token, expected \\\"\" + messageOrType.label + \"\\\"\";\n        }\n\n        throw this.raise(pos != null ? pos : this.state.start, messageOrType);\n      }\n    }, {\n      key: \"expectPlugin\",\n      value: function expectPlugin(name, pos) {\n        if (!this.hasPlugin(name)) {\n          throw this.raise(pos != null ? pos : this.state.start, \"This experimental syntax requires enabling the parser plugin: '\" + name + \"'\", {\n            missingPluginNames: [name]\n          });\n        }\n\n        return true;\n      }\n    }, {\n      key: \"expectOnePlugin\",\n      value: function expectOnePlugin(names, pos) {\n        var _this35 = this;\n\n        if (!names.some(function (n) {\n          return _this35.hasPlugin(n);\n        })) {\n          throw this.raise(pos != null ? pos : this.state.start, \"This experimental syntax requires enabling one of the following parser plugin(s): '\" + names.join(\", \") + \"'\", {\n            missingPluginNames: names\n          });\n        }\n      }\n    }, {\n      key: \"checkYieldAwaitInDefaultParams\",\n      value: function checkYieldAwaitInDefaultParams() {\n        if (this.state.yieldPos !== -1 && (this.state.awaitPos === -1 || this.state.yieldPos < this.state.awaitPos)) {\n          this.raise(this.state.yieldPos, \"Yield cannot be used as name inside a generator function\");\n        }\n\n        if (this.state.awaitPos !== -1) {\n          this.raise(this.state.awaitPos, \"Await cannot be used as name inside an async function\");\n        }\n      }\n    }, {\n      key: \"strictDirective\",\n      value: function strictDirective(start) {\n        for (;;) {\n          skipWhiteSpace.lastIndex = start;\n          start += skipWhiteSpace.exec(this.input)[0].length;\n          var match = literal.exec(this.input.slice(start));\n          if (!match) break;\n          if (match[2] === \"use strict\") return true;\n          start += match[0].length;\n          skipWhiteSpace.lastIndex = start;\n          start += skipWhiteSpace.exec(this.input)[0].length;\n\n          if (this.input[start] === \";\") {\n            start++;\n          }\n        }\n\n        return false;\n      }\n    }, {\n      key: \"tryParse\",\n      value: function tryParse(fn) {\n        var oldState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state.clone();\n        var abortSignal = {\n          node: null\n        };\n\n        try {\n          var node = fn(function () {\n            var node = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n            abortSignal.node = node;\n            throw abortSignal;\n          });\n\n          if (this.state.errors.length > oldState.errors.length) {\n            var failState = this.state;\n            this.state = oldState;\n            return {\n              node: node,\n              error: failState.errors[oldState.errors.length],\n              thrown: false,\n              aborted: false,\n              failState: failState\n            };\n          }\n\n          return {\n            node: node,\n            error: null,\n            thrown: false,\n            aborted: false,\n            failState: null\n          };\n        } catch (error) {\n          var _failState = this.state;\n          this.state = oldState;\n\n          if (error instanceof SyntaxError) {\n            return {\n              node: null,\n              error: error,\n              thrown: true,\n              aborted: false,\n              failState: _failState\n            };\n          }\n\n          if (error === abortSignal) {\n            return {\n              node: abortSignal.node,\n              error: null,\n              thrown: false,\n              aborted: true,\n              failState: _failState\n            };\n          }\n\n          throw error;\n        }\n      }\n    }]);\n\n    return UtilParser;\n  }(Tokenizer);\n\n  var Node = function () {\n    function Node(parser, pos, loc) {\n      _classCallCheck(this, Node);\n\n      this.type = \"\";\n      this.start = pos;\n      this.end = 0;\n      this.loc = new SourceLocation(loc);\n      if (parser && parser.options.ranges) this.range = [pos, 0];\n      if (parser && parser.filename) this.loc.filename = parser.filename;\n    }\n\n    _createClass(Node, [{\n      key: \"__clone\",\n      value: function __clone() {\n        var newNode = new Node();\n        var keys = Object.keys(this);\n\n        for (var i = 0, length = keys.length; i < length; i++) {\n          var key = keys[i];\n\n          if (key !== \"leadingComments\" && key !== \"trailingComments\" && key !== \"innerComments\") {\n            newNode[key] = this[key];\n          }\n        }\n\n        return newNode;\n      }\n    }]);\n\n    return Node;\n  }();\n\n  var NodeUtils = function (_UtilParser) {\n    _inherits(NodeUtils, _UtilParser);\n\n    function NodeUtils() {\n      _classCallCheck(this, NodeUtils);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(NodeUtils).apply(this, arguments));\n    }\n\n    _createClass(NodeUtils, [{\n      key: \"startNode\",\n      value: function startNode() {\n        return new Node(this, this.state.start, this.state.startLoc);\n      }\n    }, {\n      key: \"startNodeAt\",\n      value: function startNodeAt(pos, loc) {\n        return new Node(this, pos, loc);\n      }\n    }, {\n      key: \"startNodeAtNode\",\n      value: function startNodeAtNode(type) {\n        return this.startNodeAt(type.start, type.loc.start);\n      }\n    }, {\n      key: \"finishNode\",\n      value: function finishNode(node, type) {\n        return this.finishNodeAt(node, type, this.state.lastTokEnd, this.state.lastTokEndLoc);\n      }\n    }, {\n      key: \"finishNodeAt\",\n      value: function finishNodeAt(node, type, pos, loc) {\n        node.type = type;\n        node.end = pos;\n        node.loc.end = loc;\n        if (this.options.ranges) node.range[1] = pos;\n        this.processComment(node);\n        return node;\n      }\n    }, {\n      key: \"resetStartLocation\",\n      value: function resetStartLocation(node, start, startLoc) {\n        node.start = start;\n        node.loc.start = startLoc;\n        if (this.options.ranges) node.range[0] = start;\n      }\n    }, {\n      key: \"resetEndLocation\",\n      value: function resetEndLocation(node) {\n        var end = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state.lastTokEnd;\n        var endLoc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.state.lastTokEndLoc;\n        node.end = end;\n        node.loc.end = endLoc;\n        if (this.options.ranges) node.range[1] = end;\n      }\n    }, {\n      key: \"resetStartLocationFromNode\",\n      value: function resetStartLocationFromNode(node, locationNode) {\n        this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n      }\n    }]);\n\n    return NodeUtils;\n  }(UtilParser);\n\n  var unwrapParenthesizedExpression = function unwrapParenthesizedExpression(node) {\n    return node.type === \"ParenthesizedExpression\" ? unwrapParenthesizedExpression(node.expression) : node;\n  };\n\n  var LValParser = function (_NodeUtils) {\n    _inherits(LValParser, _NodeUtils);\n\n    function LValParser() {\n      _classCallCheck(this, LValParser);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(LValParser).apply(this, arguments));\n    }\n\n    _createClass(LValParser, [{\n      key: \"toAssignable\",\n      value: function toAssignable(node, isBinding, contextDescription) {\n        var _node$extra3;\n\n        if (node) {\n          var _node$extra;\n\n          if (this.options.createParenthesizedExpressions && node.type === \"ParenthesizedExpression\" || ((_node$extra = node.extra) == null ? void 0 : _node$extra.parenthesized)) {\n            var parenthesized = unwrapParenthesizedExpression(node);\n\n            if (parenthesized.type !== \"Identifier\" && parenthesized.type !== \"MemberExpression\") {\n              this.raise(node.start, \"Invalid parenthesized assignment pattern\");\n            }\n          }\n\n          switch (node.type) {\n            case \"Identifier\":\n            case \"ObjectPattern\":\n            case \"ArrayPattern\":\n            case \"AssignmentPattern\":\n              break;\n\n            case \"ObjectExpression\":\n              node.type = \"ObjectPattern\";\n\n              for (var i = 0, length = node.properties.length, _last2 = length - 1; i < length; i++) {\n                var _node$extra2;\n\n                var prop = node.properties[i];\n                var isLast = i === _last2;\n                this.toAssignableObjectExpressionProp(prop, isBinding, isLast);\n\n                if (isLast && prop.type === \"RestElement\" && ((_node$extra2 = node.extra) == null ? void 0 : _node$extra2.trailingComma)) {\n                  this.raiseRestNotLast(node.extra.trailingComma);\n                }\n              }\n\n              break;\n\n            case \"ObjectProperty\":\n              this.toAssignable(node.value, isBinding, contextDescription);\n              break;\n\n            case \"SpreadElement\":\n              {\n                this.checkToRestConversion(node);\n                node.type = \"RestElement\";\n                var arg = node.argument;\n                this.toAssignable(arg, isBinding, contextDescription);\n                break;\n              }\n\n            case \"ArrayExpression\":\n              node.type = \"ArrayPattern\";\n              this.toAssignableList(node.elements, isBinding, contextDescription, (_node$extra3 = node.extra) == null ? void 0 : _node$extra3.trailingComma);\n              break;\n\n            case \"AssignmentExpression\":\n              if (node.operator !== \"=\") {\n                this.raise(node.left.end, \"Only '=' operator can be used for specifying default value.\");\n              }\n\n              node.type = \"AssignmentPattern\";\n              delete node.operator;\n              this.toAssignable(node.left, isBinding, contextDescription);\n              break;\n\n            case \"ParenthesizedExpression\":\n              node.expression = this.toAssignable(node.expression, isBinding, contextDescription);\n              break;\n          }\n        }\n\n        return node;\n      }\n    }, {\n      key: \"toAssignableObjectExpressionProp\",\n      value: function toAssignableObjectExpressionProp(prop, isBinding, isLast) {\n        if (prop.type === \"ObjectMethod\") {\n          var error = prop.kind === \"get\" || prop.kind === \"set\" ? \"Object pattern can't contain getter or setter\" : \"Object pattern can't contain methods\";\n          this.raise(prop.key.start, error);\n        } else if (prop.type === \"SpreadElement\" && !isLast) {\n          this.raiseRestNotLast(prop.start);\n        } else {\n          this.toAssignable(prop, isBinding, \"object destructuring pattern\");\n        }\n      }\n    }, {\n      key: \"toAssignableList\",\n      value: function toAssignableList(exprList, isBinding, contextDescription, trailingCommaPos) {\n        var end = exprList.length;\n\n        if (end) {\n          var _last3 = exprList[end - 1];\n\n          if (_last3 && _last3.type === \"RestElement\") {\n            --end;\n          } else if (_last3 && _last3.type === \"SpreadElement\") {\n            _last3.type = \"RestElement\";\n            var arg = _last3.argument;\n            this.toAssignable(arg, isBinding, contextDescription);\n\n            if (arg.type !== \"Identifier\" && arg.type !== \"MemberExpression\" && arg.type !== \"ArrayPattern\" && arg.type !== \"ObjectPattern\") {\n              this.unexpected(arg.start);\n            }\n\n            if (trailingCommaPos) {\n              this.raiseTrailingCommaAfterRest(trailingCommaPos);\n            }\n\n            --end;\n          }\n        }\n\n        for (var i = 0; i < end; i++) {\n          var elt = exprList[i];\n\n          if (elt) {\n            this.toAssignable(elt, isBinding, contextDescription);\n\n            if (elt.type === \"RestElement\") {\n              this.raiseRestNotLast(elt.start);\n            }\n          }\n        }\n\n        return exprList;\n      }\n    }, {\n      key: \"toReferencedList\",\n      value: function toReferencedList(exprList, isParenthesizedExpr) {\n        return exprList;\n      }\n    }, {\n      key: \"toReferencedListDeep\",\n      value: function toReferencedListDeep(exprList, isParenthesizedExpr) {\n        this.toReferencedList(exprList, isParenthesizedExpr);\n\n        for (var _i = 0; _i < exprList.length; _i++) {\n          var expr = exprList[_i];\n\n          if (expr && expr.type === \"ArrayExpression\") {\n            this.toReferencedListDeep(expr.elements);\n          }\n        }\n      }\n    }, {\n      key: \"parseSpread\",\n      value: function parseSpread(refShorthandDefaultPos, refNeedsArrowPos) {\n        var node = this.startNode();\n        this.next();\n        node.argument = this.parseMaybeAssign(false, refShorthandDefaultPos, undefined, refNeedsArrowPos);\n        return this.finishNode(node, \"SpreadElement\");\n      }\n    }, {\n      key: \"parseRestBinding\",\n      value: function parseRestBinding() {\n        var node = this.startNode();\n        this.next();\n        node.argument = this.parseBindingAtom();\n        return this.finishNode(node, \"RestElement\");\n      }\n    }, {\n      key: \"parseBindingAtom\",\n      value: function parseBindingAtom() {\n        switch (this.state.type) {\n          case types.bracketL:\n            {\n              var node = this.startNode();\n              this.next();\n              node.elements = this.parseBindingList(types.bracketR, 93, true);\n              return this.finishNode(node, \"ArrayPattern\");\n            }\n\n          case types.braceL:\n            return this.parseObj(true);\n        }\n\n        return this.parseIdentifier();\n      }\n    }, {\n      key: \"parseBindingList\",\n      value: function parseBindingList(close, closeCharCode, allowEmpty, allowModifiers) {\n        var elts = [];\n        var first = true;\n\n        while (!this.eat(close)) {\n          if (first) {\n            first = false;\n          } else {\n            this.expect(types.comma);\n          }\n\n          if (allowEmpty && this.match(types.comma)) {\n            elts.push(null);\n          } else if (this.eat(close)) {\n            break;\n          } else if (this.match(types.ellipsis)) {\n            elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n            this.checkCommaAfterRest(closeCharCode);\n            this.expect(close);\n            break;\n          } else {\n            var decorators = [];\n\n            if (this.match(types.at) && this.hasPlugin(\"decorators\")) {\n              this.raise(this.state.start, \"Stage 2 decorators cannot be used to decorate parameters\");\n            }\n\n            while (this.match(types.at)) {\n              decorators.push(this.parseDecorator());\n            }\n\n            elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n          }\n        }\n\n        return elts;\n      }\n    }, {\n      key: \"parseAssignableListItem\",\n      value: function parseAssignableListItem(allowModifiers, decorators) {\n        var left = this.parseMaybeDefault();\n        this.parseAssignableListItemTypes(left);\n        var elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n        if (decorators.length) {\n          left.decorators = decorators;\n        }\n\n        return elt;\n      }\n    }, {\n      key: \"parseAssignableListItemTypes\",\n      value: function parseAssignableListItemTypes(param) {\n        return param;\n      }\n    }, {\n      key: \"parseMaybeDefault\",\n      value: function parseMaybeDefault(startPos, startLoc, left) {\n        startLoc = startLoc || this.state.startLoc;\n        startPos = startPos || this.state.start;\n        left = left || this.parseBindingAtom();\n        if (!this.eat(types.eq)) return left;\n        var node = this.startNodeAt(startPos, startLoc);\n        node.left = left;\n        node.right = this.parseMaybeAssign();\n        return this.finishNode(node, \"AssignmentPattern\");\n      }\n    }, {\n      key: \"checkLVal\",\n      value: function checkLVal(expr) {\n        var bindingType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : BIND_NONE;\n        var checkClashes = arguments.length > 2 ? arguments[2] : undefined;\n        var contextDescription = arguments.length > 3 ? arguments[3] : undefined;\n        var disallowLetBinding = arguments.length > 4 ? arguments[4] : undefined;\n        var strictModeChanged = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n\n        switch (expr.type) {\n          case \"Identifier\":\n            if (this.state.strict && (strictModeChanged ? isStrictBindReservedWord(expr.name, this.inModule) : isStrictBindOnlyReservedWord(expr.name))) {\n              this.raise(expr.start, (bindingType === BIND_NONE ? \"Assigning to\" : \"Binding\") + \" '\" + expr.name + \"' in strict mode\");\n            }\n\n            if (checkClashes) {\n              var key = \"_\" + expr.name;\n\n              if (checkClashes[key]) {\n                this.raise(expr.start, \"Argument name clash\");\n              } else {\n                checkClashes[key] = true;\n              }\n            }\n\n            if (disallowLetBinding && expr.name === \"let\") {\n              this.raise(expr.start, \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\");\n            }\n\n            if (!(bindingType & BIND_NONE)) {\n              this.scope.declareName(expr.name, bindingType, expr.start);\n            }\n\n            break;\n\n          case \"MemberExpression\":\n            if (bindingType !== BIND_NONE) {\n              this.raise(expr.start, \"Binding member expression\");\n            }\n\n            break;\n\n          case \"ObjectPattern\":\n            for (var _i2 = 0, _expr$properties = expr.properties; _i2 < _expr$properties.length; _i2++) {\n              var prop = _expr$properties[_i2];\n              if (prop.type === \"ObjectProperty\") prop = prop.value;else if (prop.type === \"ObjectMethod\") continue;\n              this.checkLVal(prop, bindingType, checkClashes, \"object destructuring pattern\", disallowLetBinding);\n            }\n\n            break;\n\n          case \"ArrayPattern\":\n            for (var _i3 = 0, _expr$elements = expr.elements; _i3 < _expr$elements.length; _i3++) {\n              var elem = _expr$elements[_i3];\n\n              if (elem) {\n                this.checkLVal(elem, bindingType, checkClashes, \"array destructuring pattern\", disallowLetBinding);\n              }\n            }\n\n            break;\n\n          case \"AssignmentPattern\":\n            this.checkLVal(expr.left, bindingType, checkClashes, \"assignment pattern\");\n            break;\n\n          case \"RestElement\":\n            this.checkLVal(expr.argument, bindingType, checkClashes, \"rest element\");\n            break;\n\n          case \"ParenthesizedExpression\":\n            this.checkLVal(expr.expression, bindingType, checkClashes, \"parenthesized expression\");\n            break;\n\n          default:\n            {\n              var message = (bindingType === BIND_NONE ? \"Invalid\" : \"Binding invalid\") + \" left-hand side\" + (contextDescription ? \" in \" + contextDescription : \"expression\");\n              this.raise(expr.start, message);\n            }\n        }\n      }\n    }, {\n      key: \"checkToRestConversion\",\n      value: function checkToRestConversion(node) {\n        if (node.argument.type !== \"Identifier\" && node.argument.type !== \"MemberExpression\") {\n          this.raise(node.argument.start, \"Invalid rest operator's argument\");\n        }\n      }\n    }, {\n      key: \"checkCommaAfterRest\",\n      value: function checkCommaAfterRest(close) {\n        if (this.match(types.comma)) {\n          if (this.lookaheadCharCode() === close) {\n            this.raiseTrailingCommaAfterRest(this.state.start);\n          } else {\n            this.raiseRestNotLast(this.state.start);\n          }\n        }\n      }\n    }, {\n      key: \"raiseRestNotLast\",\n      value: function raiseRestNotLast(pos) {\n        throw this.raise(pos, \"Rest element must be last element\");\n      }\n    }, {\n      key: \"raiseTrailingCommaAfterRest\",\n      value: function raiseTrailingCommaAfterRest(pos) {\n        this.raise(pos, \"Unexpected trailing comma after rest element\");\n      }\n    }]);\n\n    return LValParser;\n  }(NodeUtils);\n\n  var ExpressionParser = function (_LValParser) {\n    _inherits(ExpressionParser, _LValParser);\n\n    function ExpressionParser() {\n      _classCallCheck(this, ExpressionParser);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(ExpressionParser).apply(this, arguments));\n    }\n\n    _createClass(ExpressionParser, [{\n      key: \"checkDuplicatedProto\",\n      value: function checkDuplicatedProto(prop, protoRef) {\n        if (prop.type === \"SpreadElement\" || prop.computed || prop.kind || prop.shorthand) {\n          return;\n        }\n\n        var key = prop.key;\n        var name = key.type === \"Identifier\" ? key.name : String(key.value);\n\n        if (name === \"__proto__\") {\n          if (protoRef.used && !protoRef.start) {\n            protoRef.start = key.start;\n          }\n\n          protoRef.used = true;\n        }\n      }\n    }, {\n      key: \"getExpression\",\n      value: function getExpression() {\n        this.scope.enter(SCOPE_PROGRAM);\n        this.nextToken();\n        var expr = this.parseExpression();\n\n        if (!this.match(types.eof)) {\n          this.unexpected();\n        }\n\n        expr.comments = this.state.comments;\n        expr.errors = this.state.errors;\n        return expr;\n      }\n    }, {\n      key: \"parseExpression\",\n      value: function parseExpression(noIn, refShorthandDefaultPos) {\n        var startPos = this.state.start;\n        var startLoc = this.state.startLoc;\n        var expr = this.parseMaybeAssign(noIn, refShorthandDefaultPos);\n\n        if (this.match(types.comma)) {\n          var node = this.startNodeAt(startPos, startLoc);\n          node.expressions = [expr];\n\n          while (this.eat(types.comma)) {\n            node.expressions.push(this.parseMaybeAssign(noIn, refShorthandDefaultPos));\n          }\n\n          this.toReferencedList(node.expressions);\n          return this.finishNode(node, \"SequenceExpression\");\n        }\n\n        return expr;\n      }\n    }, {\n      key: \"parseMaybeAssign\",\n      value: function parseMaybeAssign(noIn, refShorthandDefaultPos, afterLeftParse, refNeedsArrowPos) {\n        var startPos = this.state.start;\n        var startLoc = this.state.startLoc;\n\n        if (this.isContextual(\"yield\")) {\n          if (this.scope.inGenerator) {\n            var _left = this.parseYield(noIn);\n\n            if (afterLeftParse) {\n              _left = afterLeftParse.call(this, _left, startPos, startLoc);\n            }\n\n            return _left;\n          } else {\n            this.state.exprAllowed = false;\n          }\n        }\n\n        var failOnShorthandAssign;\n\n        if (refShorthandDefaultPos) {\n          failOnShorthandAssign = false;\n        } else {\n          refShorthandDefaultPos = {\n            start: 0\n          };\n          failOnShorthandAssign = true;\n        }\n\n        if (this.match(types.parenL) || this.match(types.name)) {\n          this.state.potentialArrowAt = this.state.start;\n        }\n\n        var left = this.parseMaybeConditional(noIn, refShorthandDefaultPos, refNeedsArrowPos);\n\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n\n        if (this.state.type.isAssign) {\n          var node = this.startNodeAt(startPos, startLoc);\n          var operator = this.state.value;\n          node.operator = operator;\n\n          if (operator === \"??=\") {\n            this.expectPlugin(\"nullishCoalescingOperator\");\n            this.expectPlugin(\"logicalAssignment\");\n          }\n\n          if (operator === \"||=\" || operator === \"&&=\") {\n            this.expectPlugin(\"logicalAssignment\");\n          }\n\n          node.left = this.match(types.eq) ? this.toAssignable(left, undefined, \"assignment expression\") : left;\n\n          if (refShorthandDefaultPos.start >= node.left.start) {\n            refShorthandDefaultPos.start = 0;\n          }\n\n          this.checkLVal(left, undefined, undefined, \"assignment expression\");\n          this.next();\n          node.right = this.parseMaybeAssign(noIn);\n          return this.finishNode(node, \"AssignmentExpression\");\n        } else if (failOnShorthandAssign && refShorthandDefaultPos.start) {\n          this.unexpected(refShorthandDefaultPos.start);\n        }\n\n        return left;\n      }\n    }, {\n      key: \"parseMaybeConditional\",\n      value: function parseMaybeConditional(noIn, refShorthandDefaultPos, refNeedsArrowPos) {\n        var startPos = this.state.start;\n        var startLoc = this.state.startLoc;\n        var potentialArrowAt = this.state.potentialArrowAt;\n        var expr = this.parseExprOps(noIn, refShorthandDefaultPos);\n\n        if (expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt) {\n          return expr;\n        }\n\n        if (refShorthandDefaultPos && refShorthandDefaultPos.start) return expr;\n        return this.parseConditional(expr, noIn, startPos, startLoc, refNeedsArrowPos);\n      }\n    }, {\n      key: \"parseConditional\",\n      value: function parseConditional(expr, noIn, startPos, startLoc, refNeedsArrowPos) {\n        if (this.eat(types.question)) {\n          var node = this.startNodeAt(startPos, startLoc);\n          node.test = expr;\n          node.consequent = this.parseMaybeAssign();\n          this.expect(types.colon);\n          node.alternate = this.parseMaybeAssign(noIn);\n          return this.finishNode(node, \"ConditionalExpression\");\n        }\n\n        return expr;\n      }\n    }, {\n      key: \"parseExprOps\",\n      value: function parseExprOps(noIn, refShorthandDefaultPos) {\n        var startPos = this.state.start;\n        var startLoc = this.state.startLoc;\n        var potentialArrowAt = this.state.potentialArrowAt;\n        var expr = this.parseMaybeUnary(refShorthandDefaultPos);\n\n        if (expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt) {\n          return expr;\n        }\n\n        if (refShorthandDefaultPos && refShorthandDefaultPos.start) {\n          return expr;\n        }\n\n        return this.parseExprOp(expr, startPos, startLoc, -1, noIn);\n      }\n    }, {\n      key: \"parseExprOp\",\n      value: function parseExprOp(left, leftStartPos, leftStartLoc, minPrec, noIn) {\n        var prec = this.state.type.binop;\n\n        if (prec != null && (!noIn || !this.match(types._in))) {\n          if (prec > minPrec) {\n            var operator = this.state.value;\n\n            if (operator === \"|>\" && this.state.inFSharpPipelineDirectBody) {\n              return left;\n            }\n\n            var node = this.startNodeAt(leftStartPos, leftStartLoc);\n            node.left = left;\n            node.operator = operator;\n\n            if (operator === \"**\" && left.type === \"UnaryExpression\" && (this.options.createParenthesizedExpressions || !(left.extra && left.extra.parenthesized))) {\n              this.raise(left.argument.start, \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\");\n            }\n\n            var op = this.state.type;\n\n            if (op === types.pipeline) {\n              this.expectPlugin(\"pipelineOperator\");\n              this.state.inPipeline = true;\n              this.checkPipelineAtInfixOperator(left, leftStartPos);\n            } else if (op === types.nullishCoalescing) {\n              this.expectPlugin(\"nullishCoalescingOperator\");\n            }\n\n            this.next();\n\n            if (op === types.pipeline && this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"minimal\") {\n              if (this.match(types.name) && this.state.value === \"await\" && this.scope.inAsync) {\n                throw this.raise(this.state.start, \"Unexpected \\\"await\\\" after pipeline body; await must have parentheses in minimal proposal\");\n              }\n            }\n\n            node.right = this.parseExprOpRightExpr(op, prec, noIn);\n\n            if (op === types.nullishCoalescing) {\n              if (left.type === \"LogicalExpression\" && left.operator !== \"??\" && !(left.extra && left.extra.parenthesized)) {\n                throw this.raise(left.start, \"Nullish coalescing operator(??) requires parens when mixing with logical operators\");\n              } else if (node.right.type === \"LogicalExpression\" && node.right.operator !== \"??\" && !(node.right.extra && node.right.extra.parenthesized)) {\n                throw this.raise(node.right.start, \"Nullish coalescing operator(??) requires parens when mixing with logical operators\");\n              }\n            }\n\n            this.finishNode(node, op === types.logicalOR || op === types.logicalAND || op === types.nullishCoalescing ? \"LogicalExpression\" : \"BinaryExpression\");\n            return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn);\n          }\n        }\n\n        return left;\n      }\n    }, {\n      key: \"parseExprOpRightExpr\",\n      value: function parseExprOpRightExpr(op, prec, noIn) {\n        var _this36 = this;\n\n        var startPos = this.state.start;\n        var startLoc = this.state.startLoc;\n\n        switch (op) {\n          case types.pipeline:\n            switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n              case \"smart\":\n                return this.withTopicPermittingContext(function () {\n                  return _this36.parseSmartPipelineBody(_this36.parseExprOpBaseRightExpr(op, prec, noIn), startPos, startLoc);\n                });\n\n              case \"fsharp\":\n                return this.withSoloAwaitPermittingContext(function () {\n                  return _this36.parseFSharpPipelineBody(prec, noIn);\n                });\n            }\n\n          default:\n            return this.parseExprOpBaseRightExpr(op, prec, noIn);\n        }\n      }\n    }, {\n      key: \"parseExprOpBaseRightExpr\",\n      value: function parseExprOpBaseRightExpr(op, prec, noIn) {\n        var startPos = this.state.start;\n        var startLoc = this.state.startLoc;\n        return this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, op.rightAssociative ? prec - 1 : prec, noIn);\n      }\n    }, {\n      key: \"parseMaybeUnary\",\n      value: function parseMaybeUnary(refShorthandDefaultPos) {\n        if (this.isContextual(\"await\") && this.isAwaitAllowed()) {\n          return this.parseAwait();\n        } else if (this.state.type.prefix) {\n          var node = this.startNode();\n          var update = this.match(types.incDec);\n          node.operator = this.state.value;\n          node.prefix = true;\n\n          if (node.operator === \"throw\") {\n            this.expectPlugin(\"throwExpressions\");\n          }\n\n          this.next();\n          node.argument = this.parseMaybeUnary();\n\n          if (refShorthandDefaultPos && refShorthandDefaultPos.start) {\n            this.unexpected(refShorthandDefaultPos.start);\n          }\n\n          if (update) {\n            this.checkLVal(node.argument, undefined, undefined, \"prefix operation\");\n          } else if (this.state.strict && node.operator === \"delete\") {\n            var arg = node.argument;\n\n            if (arg.type === \"Identifier\") {\n              this.raise(node.start, \"Deleting local variable in strict mode\");\n            } else if (arg.type === \"MemberExpression\" && arg.property.type === \"PrivateName\") {\n              this.raise(node.start, \"Deleting a private field is not allowed\");\n            }\n          }\n\n          return this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\");\n        }\n\n        var startPos = this.state.start;\n        var startLoc = this.state.startLoc;\n        var expr = this.parseExprSubscripts(refShorthandDefaultPos);\n        if (refShorthandDefaultPos && refShorthandDefaultPos.start) return expr;\n\n        while (this.state.type.postfix && !this.canInsertSemicolon()) {\n          var _node10 = this.startNodeAt(startPos, startLoc);\n\n          _node10.operator = this.state.value;\n          _node10.prefix = false;\n          _node10.argument = expr;\n          this.checkLVal(expr, undefined, undefined, \"postfix operation\");\n          this.next();\n          expr = this.finishNode(_node10, \"UpdateExpression\");\n        }\n\n        return expr;\n      }\n    }, {\n      key: \"parseExprSubscripts\",\n      value: function parseExprSubscripts(refShorthandDefaultPos) {\n        var startPos = this.state.start;\n        var startLoc = this.state.startLoc;\n        var potentialArrowAt = this.state.potentialArrowAt;\n        var expr = this.parseExprAtom(refShorthandDefaultPos);\n\n        if (expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt) {\n          return expr;\n        }\n\n        if (refShorthandDefaultPos && refShorthandDefaultPos.start) {\n          return expr;\n        }\n\n        return this.parseSubscripts(expr, startPos, startLoc);\n      }\n    }, {\n      key: \"parseSubscripts\",\n      value: function parseSubscripts(base, startPos, startLoc, noCalls) {\n        var state = {\n          optionalChainMember: false,\n          maybeAsyncArrow: this.atPossibleAsync(base),\n          stop: false\n        };\n\n        do {\n          base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n          state.maybeAsyncArrow = false;\n        } while (!state.stop);\n\n        return base;\n      }\n    }, {\n      key: \"parseSubscript\",\n      value: function parseSubscript(base, startPos, startLoc, noCalls, state) {\n        if (!noCalls && this.eat(types.doubleColon)) {\n          var node = this.startNodeAt(startPos, startLoc);\n          node.object = base;\n          node.callee = this.parseNoCallExpr();\n          state.stop = true;\n          return this.parseSubscripts(this.finishNode(node, \"BindExpression\"), startPos, startLoc, noCalls);\n        } else if (this.match(types.questionDot)) {\n          this.expectPlugin(\"optionalChaining\");\n          state.optionalChainMember = true;\n\n          if (noCalls && this.lookaheadCharCode() === 40) {\n            state.stop = true;\n            return base;\n          }\n\n          this.next();\n\n          var _node11 = this.startNodeAt(startPos, startLoc);\n\n          if (this.eat(types.bracketL)) {\n            _node11.object = base;\n            _node11.property = this.parseExpression();\n            _node11.computed = true;\n            _node11.optional = true;\n            this.expect(types.bracketR);\n            return this.finishNode(_node11, \"OptionalMemberExpression\");\n          } else if (this.eat(types.parenL)) {\n            _node11.callee = base;\n            _node11.arguments = this.parseCallExpressionArguments(types.parenR, false);\n            _node11.optional = true;\n            return this.finishCallExpression(_node11, true);\n          } else {\n            _node11.object = base;\n            _node11.property = this.parseIdentifier(true);\n            _node11.computed = false;\n            _node11.optional = true;\n            return this.finishNode(_node11, \"OptionalMemberExpression\");\n          }\n        } else if (this.eat(types.dot)) {\n          var _node12 = this.startNodeAt(startPos, startLoc);\n\n          _node12.object = base;\n          _node12.property = this.parseMaybePrivateName();\n          _node12.computed = false;\n\n          if (_node12.property.type === \"PrivateName\" && _node12.object.type === \"Super\") {\n            this.raise(startPos, \"Private fields can't be accessed on super\");\n          }\n\n          if (state.optionalChainMember) {\n            _node12.optional = false;\n            return this.finishNode(_node12, \"OptionalMemberExpression\");\n          }\n\n          return this.finishNode(_node12, \"MemberExpression\");\n        } else if (this.eat(types.bracketL)) {\n          var _node13 = this.startNodeAt(startPos, startLoc);\n\n          _node13.object = base;\n          _node13.property = this.parseExpression();\n          _node13.computed = true;\n          this.expect(types.bracketR);\n\n          if (state.optionalChainMember) {\n            _node13.optional = false;\n            return this.finishNode(_node13, \"OptionalMemberExpression\");\n          }\n\n          return this.finishNode(_node13, \"MemberExpression\");\n        } else if (!noCalls && this.match(types.parenL)) {\n          var oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n          var oldYieldPos = this.state.yieldPos;\n          var oldAwaitPos = this.state.awaitPos;\n          this.state.maybeInArrowParameters = true;\n          this.state.yieldPos = -1;\n          this.state.awaitPos = -1;\n          this.next();\n\n          var _node14 = this.startNodeAt(startPos, startLoc);\n\n          _node14.callee = base;\n          _node14.arguments = this.parseCallExpressionArguments(types.parenR, state.maybeAsyncArrow, base.type === \"Import\", base.type !== \"Super\", _node14);\n          this.finishCallExpression(_node14, state.optionalChainMember);\n\n          if (state.maybeAsyncArrow && this.shouldParseAsyncArrow()) {\n            state.stop = true;\n            _node14 = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startPos, startLoc), _node14);\n            this.checkYieldAwaitInDefaultParams();\n            this.state.yieldPos = oldYieldPos;\n            this.state.awaitPos = oldAwaitPos;\n          } else {\n            this.toReferencedListDeep(_node14.arguments);\n            if (oldYieldPos !== -1) this.state.yieldPos = oldYieldPos;\n\n            if (!this.isAwaitAllowed() && !oldMaybeInArrowParameters || oldAwaitPos !== -1) {\n              this.state.awaitPos = oldAwaitPos;\n            }\n          }\n\n          this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n          return _node14;\n        } else if (this.match(types.backQuote)) {\n          return this.parseTaggedTemplateExpression(startPos, startLoc, base, state);\n        } else {\n          state.stop = true;\n          return base;\n        }\n      }\n    }, {\n      key: \"parseTaggedTemplateExpression\",\n      value: function parseTaggedTemplateExpression(startPos, startLoc, base, state, typeArguments) {\n        var node = this.startNodeAt(startPos, startLoc);\n        node.tag = base;\n        node.quasi = this.parseTemplate(true);\n        if (typeArguments) node.typeParameters = typeArguments;\n\n        if (state.optionalChainMember) {\n          this.raise(startPos, \"Tagged Template Literals are not allowed in optionalChain\");\n        }\n\n        return this.finishNode(node, \"TaggedTemplateExpression\");\n      }\n    }, {\n      key: \"atPossibleAsync\",\n      value: function atPossibleAsync(base) {\n        return base.type === \"Identifier\" && base.name === \"async\" && this.state.lastTokEnd === base.end && !this.canInsertSemicolon() && this.input.slice(base.start, base.end) === \"async\";\n      }\n    }, {\n      key: \"finishCallExpression\",\n      value: function finishCallExpression(node, optional) {\n        if (node.callee.type === \"Import\") {\n          if (node.arguments.length !== 1) {\n            this.raise(node.start, \"import() requires exactly one argument\");\n          } else {\n            var importArg = node.arguments[0];\n\n            if (importArg && importArg.type === \"SpreadElement\") {\n              this.raise(importArg.start, \"... is not allowed in import()\");\n            }\n          }\n        }\n\n        return this.finishNode(node, optional ? \"OptionalCallExpression\" : \"CallExpression\");\n      }\n    }, {\n      key: \"parseCallExpressionArguments\",\n      value: function parseCallExpressionArguments(close, possibleAsyncArrow, dynamicImport, allowPlaceholder, nodeForExtra) {\n        var elts = [];\n        var innerParenStart;\n        var first = true;\n        var oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n        this.state.inFSharpPipelineDirectBody = false;\n\n        while (!this.eat(close)) {\n          if (first) {\n            first = false;\n          } else {\n            this.expect(types.comma);\n\n            if (this.match(close)) {\n              if (dynamicImport) {\n                this.raise(this.state.lastTokStart, \"Trailing comma is disallowed inside import(...) arguments\");\n              }\n\n              if (nodeForExtra) {\n                this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n              }\n\n              this.next();\n              break;\n            }\n          }\n\n          if (this.match(types.parenL) && !innerParenStart) {\n            innerParenStart = this.state.start;\n          }\n\n          elts.push(this.parseExprListItem(false, possibleAsyncArrow ? {\n            start: 0\n          } : undefined, possibleAsyncArrow ? {\n            start: 0\n          } : undefined, allowPlaceholder));\n        }\n\n        if (possibleAsyncArrow && innerParenStart && this.shouldParseAsyncArrow()) {\n          this.unexpected();\n        }\n\n        this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n        return elts;\n      }\n    }, {\n      key: \"shouldParseAsyncArrow\",\n      value: function shouldParseAsyncArrow() {\n        return this.match(types.arrow) && !this.canInsertSemicolon();\n      }\n    }, {\n      key: \"parseAsyncArrowFromCallExpression\",\n      value: function parseAsyncArrowFromCallExpression(node, call) {\n        var _call$extra;\n\n        this.expect(types.arrow);\n        this.parseArrowExpression(node, call.arguments, true, (_call$extra = call.extra) == null ? void 0 : _call$extra.trailingComma);\n        return node;\n      }\n    }, {\n      key: \"parseNoCallExpr\",\n      value: function parseNoCallExpr() {\n        var startPos = this.state.start;\n        var startLoc = this.state.startLoc;\n        return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n      }\n    }, {\n      key: \"parseExprAtom\",\n      value: function parseExprAtom(refShorthandDefaultPos) {\n        if (this.state.type === types.slash) this.readRegexp();\n        var canBeArrow = this.state.potentialArrowAt === this.state.start;\n        var node;\n\n        switch (this.state.type) {\n          case types._super:\n            node = this.startNode();\n            this.next();\n\n            if (this.match(types.parenL) && !this.scope.allowDirectSuper && !this.options.allowSuperOutsideMethod) {\n              this.raise(node.start, \"super() is only valid inside a class constructor of a subclass. \" + \"Maybe a typo in the method name ('constructor') or not extending another class?\");\n            } else if (!this.scope.allowSuper && !this.options.allowSuperOutsideMethod) {\n              this.raise(node.start, \"super is only allowed in object methods and classes\");\n            }\n\n            if (!this.match(types.parenL) && !this.match(types.bracketL) && !this.match(types.dot)) {\n              this.raise(node.start, \"super can only be used with function calls (i.e. super()) or \" + \"in property accesses (i.e. super.prop or super[prop])\");\n            }\n\n            return this.finishNode(node, \"Super\");\n\n          case types._import:\n            node = this.startNode();\n            this.next();\n\n            if (this.match(types.dot)) {\n              return this.parseImportMetaProperty(node);\n            }\n\n            this.expectPlugin(\"dynamicImport\", node.start);\n\n            if (!this.match(types.parenL)) {\n              this.unexpected(null, types.parenL);\n            }\n\n            return this.finishNode(node, \"Import\");\n\n          case types._this:\n            node = this.startNode();\n            this.next();\n            return this.finishNode(node, \"ThisExpression\");\n\n          case types.name:\n            {\n              node = this.startNode();\n              var containsEsc = this.state.containsEsc;\n              var id = this.parseIdentifier();\n\n              if (!containsEsc && id.name === \"async\" && this.match(types._function) && !this.canInsertSemicolon()) {\n                var _last4 = this.state.context.length - 1;\n\n                if (this.state.context[_last4] !== types$1.functionStatement) {\n                  throw new Error(\"Internal error\");\n                }\n\n                this.state.context[_last4] = types$1.functionExpression;\n                this.next();\n                return this.parseFunction(node, undefined, true);\n              } else if (canBeArrow && !containsEsc && id.name === \"async\" && this.match(types.name) && !this.canInsertSemicolon()) {\n                var params = [this.parseIdentifier()];\n                this.expect(types.arrow);\n                this.parseArrowExpression(node, params, true);\n                return node;\n              }\n\n              if (canBeArrow && this.match(types.arrow) && !this.canInsertSemicolon()) {\n                this.next();\n                this.parseArrowExpression(node, [id], false);\n                return node;\n              }\n\n              return id;\n            }\n\n          case types._do:\n            {\n              this.expectPlugin(\"doExpressions\");\n\n              var _node15 = this.startNode();\n\n              this.next();\n              var oldLabels = this.state.labels;\n              this.state.labels = [];\n              _node15.body = this.parseBlock();\n              this.state.labels = oldLabels;\n              return this.finishNode(_node15, \"DoExpression\");\n            }\n\n          case types.regexp:\n            {\n              var value = this.state.value;\n              node = this.parseLiteral(value.value, \"RegExpLiteral\");\n              node.pattern = value.pattern;\n              node.flags = value.flags;\n              return node;\n            }\n\n          case types.num:\n            return this.parseLiteral(this.state.value, \"NumericLiteral\");\n\n          case types.bigint:\n            return this.parseLiteral(this.state.value, \"BigIntLiteral\");\n\n          case types.string:\n            return this.parseLiteral(this.state.value, \"StringLiteral\");\n\n          case types._null:\n            node = this.startNode();\n            this.next();\n            return this.finishNode(node, \"NullLiteral\");\n\n          case types._true:\n          case types._false:\n            return this.parseBooleanLiteral();\n\n          case types.parenL:\n            return this.parseParenAndDistinguishExpression(canBeArrow);\n\n          case types.bracketL:\n            {\n              var oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n              this.state.inFSharpPipelineDirectBody = false;\n              node = this.startNode();\n              this.next();\n              node.elements = this.parseExprList(types.bracketR, true, refShorthandDefaultPos, node);\n\n              if (!this.state.maybeInArrowParameters) {\n                this.toReferencedList(node.elements);\n              }\n\n              this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n              return this.finishNode(node, \"ArrayExpression\");\n            }\n\n          case types.braceL:\n            {\n              var _oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n              this.state.inFSharpPipelineDirectBody = false;\n              var ret = this.parseObj(false, refShorthandDefaultPos);\n              this.state.inFSharpPipelineDirectBody = _oldInFSharpPipelineDirectBody;\n              return ret;\n            }\n\n          case types._function:\n            return this.parseFunctionExpression();\n\n          case types.at:\n            this.parseDecorators();\n\n          case types._class:\n            node = this.startNode();\n            this.takeDecorators(node);\n            return this.parseClass(node, false);\n\n          case types._new:\n            return this.parseNew();\n\n          case types.backQuote:\n            return this.parseTemplate(false);\n\n          case types.doubleColon:\n            {\n              node = this.startNode();\n              this.next();\n              node.object = null;\n              var callee = node.callee = this.parseNoCallExpr();\n\n              if (callee.type === \"MemberExpression\") {\n                return this.finishNode(node, \"BindExpression\");\n              } else {\n                throw this.raise(callee.start, \"Binding should be performed on object property.\");\n              }\n            }\n\n          case types.hash:\n            {\n              if (this.state.inPipeline) {\n                node = this.startNode();\n\n                if (this.getPluginOption(\"pipelineOperator\", \"proposal\") !== \"smart\") {\n                  this.raise(node.start, \"Primary Topic Reference found but pipelineOperator not passed 'smart' for 'proposal' option.\");\n                }\n\n                this.next();\n\n                if (!this.primaryTopicReferenceIsAllowedInCurrentTopicContext()) {\n                  this.raise(node.start, \"Topic reference was used in a lexical context without topic binding\");\n                }\n\n                this.registerTopicReference();\n                return this.finishNode(node, \"PipelinePrimaryTopicReference\");\n              }\n            }\n\n          default:\n            throw this.unexpected();\n        }\n      }\n    }, {\n      key: \"parseBooleanLiteral\",\n      value: function parseBooleanLiteral() {\n        var node = this.startNode();\n        node.value = this.match(types._true);\n        this.next();\n        return this.finishNode(node, \"BooleanLiteral\");\n      }\n    }, {\n      key: \"parseMaybePrivateName\",\n      value: function parseMaybePrivateName() {\n        var isPrivate = this.match(types.hash);\n\n        if (isPrivate) {\n          this.expectOnePlugin([\"classPrivateProperties\", \"classPrivateMethods\"]);\n          var node = this.startNode();\n          this.next();\n          this.assertNoSpace(\"Unexpected space between # and identifier\");\n          node.id = this.parseIdentifier(true);\n          return this.finishNode(node, \"PrivateName\");\n        } else {\n          return this.parseIdentifier(true);\n        }\n      }\n    }, {\n      key: \"parseFunctionExpression\",\n      value: function parseFunctionExpression() {\n        var node = this.startNode();\n        var meta = this.startNode();\n        this.next();\n        meta = this.createIdentifier(meta, \"function\");\n\n        if (this.scope.inGenerator && this.eat(types.dot)) {\n          return this.parseMetaProperty(node, meta, \"sent\");\n        }\n\n        return this.parseFunction(node);\n      }\n    }, {\n      key: \"parseMetaProperty\",\n      value: function parseMetaProperty(node, meta, propertyName) {\n        node.meta = meta;\n\n        if (meta.name === \"function\" && propertyName === \"sent\") {\n          if (this.isContextual(propertyName)) {\n            this.expectPlugin(\"functionSent\");\n          } else if (!this.hasPlugin(\"functionSent\")) {\n            this.unexpected();\n          }\n        }\n\n        var containsEsc = this.state.containsEsc;\n        node.property = this.parseIdentifier(true);\n\n        if (node.property.name !== propertyName || containsEsc) {\n          this.raise(node.property.start, \"The only valid meta property for \" + meta.name + \" is \" + meta.name + \".\" + propertyName);\n        }\n\n        return this.finishNode(node, \"MetaProperty\");\n      }\n    }, {\n      key: \"parseImportMetaProperty\",\n      value: function parseImportMetaProperty(node) {\n        var id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n        this.expect(types.dot);\n\n        if (this.isContextual(\"meta\")) {\n          this.expectPlugin(\"importMeta\");\n\n          if (!this.inModule) {\n            this.raise(id.start, \"import.meta may appear only with 'sourceType: \\\"module\\\"'\", {\n              code: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\n            });\n          }\n\n          this.sawUnambiguousESM = true;\n        } else if (!this.hasPlugin(\"importMeta\")) {\n          this.raise(id.start, \"Dynamic imports require a parameter: import('a.js')\");\n        }\n\n        return this.parseMetaProperty(node, id, \"meta\");\n      }\n    }, {\n      key: \"parseLiteral\",\n      value: function parseLiteral(value, type, startPos, startLoc) {\n        startPos = startPos || this.state.start;\n        startLoc = startLoc || this.state.startLoc;\n        var node = this.startNodeAt(startPos, startLoc);\n        this.addExtra(node, \"rawValue\", value);\n        this.addExtra(node, \"raw\", this.input.slice(startPos, this.state.end));\n        node.value = value;\n        this.next();\n        return this.finishNode(node, type);\n      }\n    }, {\n      key: \"parseParenAndDistinguishExpression\",\n      value: function parseParenAndDistinguishExpression(canBeArrow) {\n        var startPos = this.state.start;\n        var startLoc = this.state.startLoc;\n        var val;\n        this.expect(types.parenL);\n        var oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n        var oldYieldPos = this.state.yieldPos;\n        var oldAwaitPos = this.state.awaitPos;\n        var oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n        this.state.maybeInArrowParameters = true;\n        this.state.yieldPos = -1;\n        this.state.awaitPos = -1;\n        this.state.inFSharpPipelineDirectBody = false;\n        var innerStartPos = this.state.start;\n        var innerStartLoc = this.state.startLoc;\n        var exprList = [];\n        var refShorthandDefaultPos = {\n          start: 0\n        };\n        var refNeedsArrowPos = {\n          start: 0\n        };\n        var first = true;\n        var spreadStart;\n        var optionalCommaStart;\n\n        while (!this.match(types.parenR)) {\n          if (first) {\n            first = false;\n          } else {\n            this.expect(types.comma, refNeedsArrowPos.start || null);\n\n            if (this.match(types.parenR)) {\n              optionalCommaStart = this.state.start;\n              break;\n            }\n          }\n\n          if (this.match(types.ellipsis)) {\n            var spreadNodeStartPos = this.state.start;\n            var spreadNodeStartLoc = this.state.startLoc;\n            spreadStart = this.state.start;\n            exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartPos, spreadNodeStartLoc));\n            this.checkCommaAfterRest(41);\n            break;\n          } else {\n            exprList.push(this.parseMaybeAssign(false, refShorthandDefaultPos, this.parseParenItem, refNeedsArrowPos));\n          }\n        }\n\n        var innerEndPos = this.state.start;\n        var innerEndLoc = this.state.startLoc;\n        this.expect(types.parenR);\n        this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n        this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n        var arrowNode = this.startNodeAt(startPos, startLoc);\n\n        if (canBeArrow && this.shouldParseArrow() && (arrowNode = this.parseArrow(arrowNode))) {\n          this.checkYieldAwaitInDefaultParams();\n          this.state.yieldPos = oldYieldPos;\n          this.state.awaitPos = oldAwaitPos;\n\n          for (var _i = 0; _i < exprList.length; _i++) {\n            var param = exprList[_i];\n\n            if (param.extra && param.extra.parenthesized) {\n              this.unexpected(param.extra.parenStart);\n            }\n          }\n\n          this.parseArrowExpression(arrowNode, exprList, false);\n          return arrowNode;\n        }\n\n        if (oldYieldPos !== -1) this.state.yieldPos = oldYieldPos;\n        if (oldAwaitPos !== -1) this.state.awaitPos = oldAwaitPos;\n\n        if (!exprList.length) {\n          this.unexpected(this.state.lastTokStart);\n        }\n\n        if (optionalCommaStart) this.unexpected(optionalCommaStart);\n        if (spreadStart) this.unexpected(spreadStart);\n\n        if (refShorthandDefaultPos.start) {\n          this.unexpected(refShorthandDefaultPos.start);\n        }\n\n        if (refNeedsArrowPos.start) this.unexpected(refNeedsArrowPos.start);\n        this.toReferencedListDeep(exprList, true);\n\n        if (exprList.length > 1) {\n          val = this.startNodeAt(innerStartPos, innerStartLoc);\n          val.expressions = exprList;\n          this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n        } else {\n          val = exprList[0];\n        }\n\n        if (!this.options.createParenthesizedExpressions) {\n          this.addExtra(val, \"parenthesized\", true);\n          this.addExtra(val, \"parenStart\", startPos);\n          return val;\n        }\n\n        var parenExpression = this.startNodeAt(startPos, startLoc);\n        parenExpression.expression = val;\n        this.finishNode(parenExpression, \"ParenthesizedExpression\");\n        return parenExpression;\n      }\n    }, {\n      key: \"shouldParseArrow\",\n      value: function shouldParseArrow() {\n        return !this.canInsertSemicolon();\n      }\n    }, {\n      key: \"parseArrow\",\n      value: function parseArrow(node) {\n        if (this.eat(types.arrow)) {\n          return node;\n        }\n      }\n    }, {\n      key: \"parseParenItem\",\n      value: function parseParenItem(node, startPos, startLoc) {\n        return node;\n      }\n    }, {\n      key: \"parseNew\",\n      value: function parseNew() {\n        var node = this.startNode();\n        var meta = this.startNode();\n        this.next();\n        meta = this.createIdentifier(meta, \"new\");\n\n        if (this.eat(types.dot)) {\n          var metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n          if (!this.scope.inNonArrowFunction && !this.state.inClassProperty) {\n            var error = \"new.target can only be used in functions\";\n\n            if (this.hasPlugin(\"classProperties\")) {\n              error += \" or class properties\";\n            }\n\n            this.raise(metaProp.start, error);\n          }\n\n          return metaProp;\n        }\n\n        node.callee = this.parseNoCallExpr();\n\n        if (node.callee.type === \"Import\") {\n          this.raise(node.callee.start, \"Cannot use new with import(...)\");\n        } else if (node.callee.type === \"OptionalMemberExpression\" || node.callee.type === \"OptionalCallExpression\") {\n          this.raise(this.state.lastTokEnd, \"constructors in/after an Optional Chain are not allowed\");\n        } else if (this.eat(types.questionDot)) {\n          this.raise(this.state.start, \"constructors in/after an Optional Chain are not allowed\");\n        }\n\n        this.parseNewArguments(node);\n        return this.finishNode(node, \"NewExpression\");\n      }\n    }, {\n      key: \"parseNewArguments\",\n      value: function parseNewArguments(node) {\n        if (this.eat(types.parenL)) {\n          var args = this.parseExprList(types.parenR);\n          this.toReferencedList(args);\n          node.arguments = args;\n        } else {\n          node.arguments = [];\n        }\n      }\n    }, {\n      key: \"parseTemplateElement\",\n      value: function parseTemplateElement(isTagged) {\n        var elem = this.startNode();\n\n        if (this.state.value === null) {\n          if (!isTagged) {\n            this.raise(this.state.invalidTemplateEscapePosition || 0, \"Invalid escape sequence in template\");\n          } else {\n            this.state.invalidTemplateEscapePosition = null;\n          }\n        }\n\n        elem.value = {\n          raw: this.input.slice(this.state.start, this.state.end).replace(/\\r\\n?/g, \"\\n\"),\n          cooked: this.state.value\n        };\n        this.next();\n        elem.tail = this.match(types.backQuote);\n        return this.finishNode(elem, \"TemplateElement\");\n      }\n    }, {\n      key: \"parseTemplate\",\n      value: function parseTemplate(isTagged) {\n        var node = this.startNode();\n        this.next();\n        node.expressions = [];\n        var curElt = this.parseTemplateElement(isTagged);\n        node.quasis = [curElt];\n\n        while (!curElt.tail) {\n          this.expect(types.dollarBraceL);\n          node.expressions.push(this.parseExpression());\n          this.expect(types.braceR);\n          node.quasis.push(curElt = this.parseTemplateElement(isTagged));\n        }\n\n        this.next();\n        return this.finishNode(node, \"TemplateLiteral\");\n      }\n    }, {\n      key: \"parseObj\",\n      value: function parseObj(isPattern, refShorthandDefaultPos) {\n        var propHash = Object.create(null);\n        var first = true;\n        var node = this.startNode();\n        node.properties = [];\n        this.next();\n\n        while (!this.eat(types.braceR)) {\n          if (first) {\n            first = false;\n          } else {\n            this.expect(types.comma);\n\n            if (this.match(types.braceR)) {\n              this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n              this.next();\n              break;\n            }\n          }\n\n          var prop = this.parseObjectMember(isPattern, refShorthandDefaultPos);\n          if (!isPattern) this.checkDuplicatedProto(prop, propHash);\n\n          if (prop.shorthand) {\n            this.addExtra(prop, \"shorthand\", true);\n          }\n\n          node.properties.push(prop);\n        }\n\n        if (!this.match(types.eq) && propHash.start !== undefined) {\n          this.raise(propHash.start, \"Redefinition of __proto__ property\");\n        }\n\n        return this.finishNode(node, isPattern ? \"ObjectPattern\" : \"ObjectExpression\");\n      }\n    }, {\n      key: \"isAsyncProp\",\n      value: function isAsyncProp(prop) {\n        return !prop.computed && prop.key.type === \"Identifier\" && prop.key.name === \"async\" && (this.match(types.name) || this.match(types.num) || this.match(types.string) || this.match(types.bracketL) || this.state.type.keyword || this.match(types.star)) && !this.hasPrecedingLineBreak();\n      }\n    }, {\n      key: \"parseObjectMember\",\n      value: function parseObjectMember(isPattern, refShorthandDefaultPos) {\n        var decorators = [];\n\n        if (this.match(types.at)) {\n          if (this.hasPlugin(\"decorators\")) {\n            this.raise(this.state.start, \"Stage 2 decorators disallow object literal property decorators\");\n          }\n\n          while (this.match(types.at)) {\n            decorators.push(this.parseDecorator());\n          }\n        }\n\n        var prop = this.startNode();\n        var isGenerator = false;\n        var isAsync = false;\n        var startPos;\n        var startLoc;\n\n        if (this.match(types.ellipsis)) {\n          if (decorators.length) this.unexpected();\n\n          if (isPattern) {\n            this.next();\n            prop.argument = this.parseIdentifier();\n            this.checkCommaAfterRest(125);\n            return this.finishNode(prop, \"RestElement\");\n          }\n\n          return this.parseSpread();\n        }\n\n        if (decorators.length) {\n          prop.decorators = decorators;\n          decorators = [];\n        }\n\n        prop.method = false;\n\n        if (isPattern || refShorthandDefaultPos) {\n          startPos = this.state.start;\n          startLoc = this.state.startLoc;\n        }\n\n        if (!isPattern) {\n          isGenerator = this.eat(types.star);\n        }\n\n        var containsEsc = this.state.containsEsc;\n        this.parsePropertyName(prop);\n\n        if (!isPattern && !containsEsc && !isGenerator && this.isAsyncProp(prop)) {\n          isAsync = true;\n          isGenerator = this.eat(types.star);\n          this.parsePropertyName(prop);\n        } else {\n          isAsync = false;\n        }\n\n        this.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, refShorthandDefaultPos, containsEsc);\n        return prop;\n      }\n    }, {\n      key: \"isGetterOrSetterMethod\",\n      value: function isGetterOrSetterMethod(prop, isPattern) {\n        return !isPattern && !prop.computed && prop.key.type === \"Identifier\" && (prop.key.name === \"get\" || prop.key.name === \"set\") && (this.match(types.string) || this.match(types.num) || this.match(types.bracketL) || this.match(types.name) || !!this.state.type.keyword);\n      }\n    }, {\n      key: \"getGetterSetterExpectedParamCount\",\n      value: function getGetterSetterExpectedParamCount(method) {\n        return method.kind === \"get\" ? 0 : 1;\n      }\n    }, {\n      key: \"checkGetterSetterParams\",\n      value: function checkGetterSetterParams(method) {\n        var paramCount = this.getGetterSetterExpectedParamCount(method);\n        var start = method.start;\n\n        if (method.params.length !== paramCount) {\n          if (method.kind === \"get\") {\n            this.raise(start, \"getter must not have any formal parameters\");\n          } else {\n            this.raise(start, \"setter must have exactly one formal parameter\");\n          }\n        }\n\n        if (method.kind === \"set\" && method.params[method.params.length - 1].type === \"RestElement\") {\n          this.raise(start, \"setter function argument must not be a rest parameter\");\n        }\n      }\n    }, {\n      key: \"parseObjectMethod\",\n      value: function parseObjectMethod(prop, isGenerator, isAsync, isPattern, containsEsc) {\n        if (isAsync || isGenerator || this.match(types.parenL)) {\n          if (isPattern) this.unexpected();\n          prop.kind = \"method\";\n          prop.method = true;\n          return this.parseMethod(prop, isGenerator, isAsync, false, false, \"ObjectMethod\");\n        }\n\n        if (!containsEsc && this.isGetterOrSetterMethod(prop, isPattern)) {\n          if (isGenerator || isAsync) this.unexpected();\n          prop.kind = prop.key.name;\n          this.parsePropertyName(prop);\n          this.parseMethod(prop, false, false, false, false, \"ObjectMethod\");\n          this.checkGetterSetterParams(prop);\n          return prop;\n        }\n      }\n    }, {\n      key: \"parseObjectProperty\",\n      value: function parseObjectProperty(prop, startPos, startLoc, isPattern, refShorthandDefaultPos) {\n        prop.shorthand = false;\n\n        if (this.eat(types.colon)) {\n          prop.value = isPattern ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssign(false, refShorthandDefaultPos);\n          return this.finishNode(prop, \"ObjectProperty\");\n        }\n\n        if (!prop.computed && prop.key.type === \"Identifier\") {\n          this.checkReservedWord(prop.key.name, prop.key.start, true, true);\n\n          if (isPattern) {\n            prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());\n          } else if (this.match(types.eq) && refShorthandDefaultPos) {\n            if (!refShorthandDefaultPos.start) {\n              refShorthandDefaultPos.start = this.state.start;\n            }\n\n            prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());\n          } else {\n            prop.value = prop.key.__clone();\n          }\n\n          prop.shorthand = true;\n          return this.finishNode(prop, \"ObjectProperty\");\n        }\n      }\n    }, {\n      key: \"parseObjPropValue\",\n      value: function parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, refShorthandDefaultPos, containsEsc) {\n        var node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, containsEsc) || this.parseObjectProperty(prop, startPos, startLoc, isPattern, refShorthandDefaultPos);\n        if (!node) this.unexpected();\n        return node;\n      }\n    }, {\n      key: \"parsePropertyName\",\n      value: function parsePropertyName(prop) {\n        if (this.eat(types.bracketL)) {\n          prop.computed = true;\n          prop.key = this.parseMaybeAssign();\n          this.expect(types.bracketR);\n        } else {\n          var oldInPropertyName = this.state.inPropertyName;\n          this.state.inPropertyName = true;\n          prop.key = this.match(types.num) || this.match(types.string) ? this.parseExprAtom() : this.parseMaybePrivateName();\n\n          if (prop.key.type !== \"PrivateName\") {\n            prop.computed = false;\n          }\n\n          this.state.inPropertyName = oldInPropertyName;\n        }\n\n        return prop.key;\n      }\n    }, {\n      key: \"initFunction\",\n      value: function initFunction(node, isAsync) {\n        node.id = null;\n        node.generator = false;\n        node.async = !!isAsync;\n      }\n    }, {\n      key: \"parseMethod\",\n      value: function parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type) {\n        var inClassScope = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n        var oldYieldPos = this.state.yieldPos;\n        var oldAwaitPos = this.state.awaitPos;\n        this.state.yieldPos = -1;\n        this.state.awaitPos = -1;\n        this.initFunction(node, isAsync);\n        node.generator = !!isGenerator;\n        var allowModifiers = isConstructor;\n        this.scope.enter(functionFlags(isAsync, node.generator) | SCOPE_SUPER | (inClassScope ? SCOPE_CLASS : 0) | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));\n        this.parseFunctionParams(node, allowModifiers);\n        this.checkYieldAwaitInDefaultParams();\n        this.parseFunctionBodyAndFinish(node, type, true);\n        this.scope.exit();\n        this.state.yieldPos = oldYieldPos;\n        this.state.awaitPos = oldAwaitPos;\n        return node;\n      }\n    }, {\n      key: \"parseArrowExpression\",\n      value: function parseArrowExpression(node, params, isAsync, trailingCommaPos) {\n        this.scope.enter(functionFlags(isAsync, false) | SCOPE_ARROW);\n        this.initFunction(node, isAsync);\n        var oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n        var oldYieldPos = this.state.yieldPos;\n        var oldAwaitPos = this.state.awaitPos;\n        this.state.maybeInArrowParameters = false;\n        this.state.yieldPos = -1;\n        this.state.awaitPos = -1;\n        if (params) this.setArrowFunctionParameters(node, params, trailingCommaPos);\n        this.parseFunctionBody(node, true);\n        this.scope.exit();\n        this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n        this.state.yieldPos = oldYieldPos;\n        this.state.awaitPos = oldAwaitPos;\n        return this.finishNode(node, \"ArrowFunctionExpression\");\n      }\n    }, {\n      key: \"setArrowFunctionParameters\",\n      value: function setArrowFunctionParameters(node, params, trailingCommaPos) {\n        node.params = this.toAssignableList(params, true, \"arrow function parameters\", trailingCommaPos);\n      }\n    }, {\n      key: \"isStrictBody\",\n      value: function isStrictBody(node) {\n        var isBlockStatement = node.body.type === \"BlockStatement\";\n\n        if (isBlockStatement && node.body.directives.length) {\n          for (var _i2 = 0, _node$body$directives = node.body.directives; _i2 < _node$body$directives.length; _i2++) {\n            var directive = _node$body$directives[_i2];\n\n            if (directive.value.value === \"use strict\") {\n              return true;\n            }\n          }\n        }\n\n        return false;\n      }\n    }, {\n      key: \"parseFunctionBodyAndFinish\",\n      value: function parseFunctionBodyAndFinish(node, type) {\n        var isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n        this.parseFunctionBody(node, false, isMethod);\n        this.finishNode(node, type);\n      }\n    }, {\n      key: \"parseFunctionBody\",\n      value: function parseFunctionBody(node, allowExpression) {\n        var isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n        var isExpression = allowExpression && !this.match(types.braceL);\n        var oldStrict = this.state.strict;\n        var useStrict = false;\n        var oldInParameters = this.state.inParameters;\n        this.state.inParameters = false;\n\n        if (isExpression) {\n          node.body = this.parseMaybeAssign();\n          this.checkParams(node, false, allowExpression, false);\n        } else {\n          var nonSimple = !this.isSimpleParamList(node.params);\n\n          if (!oldStrict || nonSimple) {\n            useStrict = this.strictDirective(this.state.end);\n\n            if (useStrict && nonSimple) {\n              var errorPos = (node.kind === \"method\" || node.kind === \"constructor\") && !!node.key ? node.key.end : node.start;\n              this.raise(errorPos, \"Illegal 'use strict' directive in function with non-simple parameter list\");\n            }\n          }\n\n          var oldLabels = this.state.labels;\n          this.state.labels = [];\n          if (useStrict) this.state.strict = true;\n          this.checkParams(node, !oldStrict && !useStrict && !allowExpression && !isMethod && !nonSimple, allowExpression, !oldStrict && useStrict);\n          node.body = this.parseBlock(true, false);\n          this.state.labels = oldLabels;\n        }\n\n        this.state.inParameters = oldInParameters;\n\n        if (this.state.strict && node.id) {\n          this.checkLVal(node.id, BIND_OUTSIDE, undefined, \"function name\", undefined, !oldStrict && useStrict);\n        }\n\n        this.state.strict = oldStrict;\n      }\n    }, {\n      key: \"isSimpleParamList\",\n      value: function isSimpleParamList(params) {\n        for (var i = 0, len = params.length; i < len; i++) {\n          if (params[i].type !== \"Identifier\") return false;\n        }\n\n        return true;\n      }\n    }, {\n      key: \"checkParams\",\n      value: function checkParams(node, allowDuplicates, isArrowFunction) {\n        var strictModeChanged = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n        var nameHash = Object.create(null);\n\n        for (var i = 0; i < node.params.length; i++) {\n          this.checkLVal(node.params[i], BIND_VAR, allowDuplicates ? null : nameHash, \"function parameter list\", undefined, strictModeChanged);\n        }\n      }\n    }, {\n      key: \"parseExprList\",\n      value: function parseExprList(close, allowEmpty, refShorthandDefaultPos, nodeForExtra) {\n        var elts = [];\n        var first = true;\n\n        while (!this.eat(close)) {\n          if (first) {\n            first = false;\n          } else {\n            this.expect(types.comma);\n\n            if (this.match(close)) {\n              if (nodeForExtra) {\n                this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n              }\n\n              this.next();\n              break;\n            }\n          }\n\n          elts.push(this.parseExprListItem(allowEmpty, refShorthandDefaultPos));\n        }\n\n        return elts;\n      }\n    }, {\n      key: \"parseExprListItem\",\n      value: function parseExprListItem(allowEmpty, refShorthandDefaultPos, refNeedsArrowPos, allowPlaceholder) {\n        var elt;\n\n        if (allowEmpty && this.match(types.comma)) {\n          elt = null;\n        } else if (this.match(types.ellipsis)) {\n          var spreadNodeStartPos = this.state.start;\n          var spreadNodeStartLoc = this.state.startLoc;\n          elt = this.parseParenItem(this.parseSpread(refShorthandDefaultPos, refNeedsArrowPos), spreadNodeStartPos, spreadNodeStartLoc);\n        } else if (this.match(types.question)) {\n          this.expectPlugin(\"partialApplication\");\n\n          if (!allowPlaceholder) {\n            this.raise(this.state.start, \"Unexpected argument placeholder\");\n          }\n\n          var node = this.startNode();\n          this.next();\n          elt = this.finishNode(node, \"ArgumentPlaceholder\");\n        } else {\n          elt = this.parseMaybeAssign(false, refShorthandDefaultPos, this.parseParenItem, refNeedsArrowPos);\n        }\n\n        return elt;\n      }\n    }, {\n      key: \"parseIdentifier\",\n      value: function parseIdentifier(liberal) {\n        var node = this.startNode();\n        var name = this.parseIdentifierName(node.start, liberal);\n        return this.createIdentifier(node, name);\n      }\n    }, {\n      key: \"createIdentifier\",\n      value: function createIdentifier(node, name) {\n        node.name = name;\n        node.loc.identifierName = name;\n        return this.finishNode(node, \"Identifier\");\n      }\n    }, {\n      key: \"parseIdentifierName\",\n      value: function parseIdentifierName(pos, liberal) {\n        var name;\n\n        if (this.match(types.name)) {\n          name = this.state.value;\n        } else if (this.state.type.keyword) {\n          name = this.state.type.keyword;\n\n          if ((name === \"class\" || name === \"function\") && (this.state.lastTokEnd !== this.state.lastTokStart + 1 || this.input.charCodeAt(this.state.lastTokStart) !== 46)) {\n            this.state.context.pop();\n          }\n        } else {\n          throw this.unexpected();\n        }\n\n        if (liberal) {\n          this.state.type = types.name;\n        } else {\n          this.checkReservedWord(name, this.state.start, !!this.state.type.keyword, false);\n        }\n\n        this.next();\n        return name;\n      }\n    }, {\n      key: \"checkReservedWord\",\n      value: function checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n        if (this.scope.inGenerator && word === \"yield\") {\n          this.raise(startLoc, \"Can not use 'yield' as identifier inside a generator\");\n          return;\n        }\n\n        if (word === \"await\") {\n          if (this.scope.inAsync) {\n            this.raise(startLoc, \"Can not use 'await' as identifier inside an async function\");\n            return;\n          }\n\n          if (this.state.awaitPos === -1 && (this.state.maybeInArrowParameters || this.isAwaitAllowed())) {\n            this.state.awaitPos = this.state.start;\n          }\n        }\n\n        if (this.scope.inClass && !this.scope.inNonArrowFunction && word === \"arguments\") {\n          this.raise(startLoc, \"'arguments' is not allowed in class field initializer\");\n          return;\n        }\n\n        if (checkKeywords && isKeyword(word)) {\n          this.raise(startLoc, \"Unexpected keyword '\" + word + \"'\");\n          return;\n        }\n\n        var reservedTest = !this.state.strict ? isReservedWord : isBinding ? isStrictBindReservedWord : isStrictReservedWord;\n\n        if (reservedTest(word, this.inModule)) {\n          if (!this.scope.inAsync && word === \"await\") {\n            this.raise(startLoc, \"Can not use keyword 'await' outside an async function\");\n          } else {\n            this.raise(startLoc, \"Unexpected reserved word '\" + word + \"'\");\n          }\n        }\n      }\n    }, {\n      key: \"isAwaitAllowed\",\n      value: function isAwaitAllowed() {\n        if (this.scope.inFunction) return this.scope.inAsync;\n        if (this.options.allowAwaitOutsideFunction) return true;\n        if (this.hasPlugin(\"topLevelAwait\")) return this.inModule;\n        return false;\n      }\n    }, {\n      key: \"parseAwait\",\n      value: function parseAwait() {\n        var node = this.startNode();\n        this.next();\n\n        if (this.state.inParameters) {\n          this.raise(node.start, \"await is not allowed in async function parameters\");\n        } else if (this.state.awaitPos === -1) {\n          this.state.awaitPos = node.start;\n        }\n\n        if (this.eat(types.star)) {\n          this.raise(node.start, \"await* has been removed from the async functions proposal. Use Promise.all() instead.\");\n        }\n\n        if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n          if (this.hasPrecedingLineBreak() || this.match(types.plusMin) || this.match(types.parenL) || this.match(types.bracketL) || this.match(types.backQuote) || this.match(types.regexp) || this.match(types.slash) || this.hasPlugin(\"v8intrinsic\") && this.match(types.modulo)) {\n            this.ambiguousScriptDifferentAst = true;\n          } else {\n            this.sawUnambiguousESM = true;\n          }\n        }\n\n        if (!this.state.soloAwait) {\n          node.argument = this.parseMaybeUnary();\n        }\n\n        return this.finishNode(node, \"AwaitExpression\");\n      }\n    }, {\n      key: \"parseYield\",\n      value: function parseYield(noIn) {\n        var node = this.startNode();\n\n        if (this.state.inParameters) {\n          this.raise(node.start, \"yield is not allowed in generator parameters\");\n        } else if (this.state.yieldPos === -1) {\n          this.state.yieldPos = node.start;\n        }\n\n        this.next();\n\n        if (this.match(types.semi) || !this.match(types.star) && !this.state.type.startsExpr || this.hasPrecedingLineBreak()) {\n          node.delegate = false;\n          node.argument = null;\n        } else {\n          node.delegate = this.eat(types.star);\n          node.argument = this.parseMaybeAssign(noIn);\n        }\n\n        return this.finishNode(node, \"YieldExpression\");\n      }\n    }, {\n      key: \"checkPipelineAtInfixOperator\",\n      value: function checkPipelineAtInfixOperator(left, leftStartPos) {\n        if (this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\") {\n          if (left.type === \"SequenceExpression\") {\n            this.raise(leftStartPos, \"Pipeline head should not be a comma-separated sequence expression\");\n          }\n        }\n      }\n    }, {\n      key: \"parseSmartPipelineBody\",\n      value: function parseSmartPipelineBody(childExpression, startPos, startLoc) {\n        var pipelineStyle = this.checkSmartPipelineBodyStyle(childExpression);\n        this.checkSmartPipelineBodyEarlyErrors(childExpression, pipelineStyle, startPos);\n        return this.parseSmartPipelineBodyInStyle(childExpression, pipelineStyle, startPos, startLoc);\n      }\n    }, {\n      key: \"checkSmartPipelineBodyEarlyErrors\",\n      value: function checkSmartPipelineBodyEarlyErrors(childExpression, pipelineStyle, startPos) {\n        if (this.match(types.arrow)) {\n          throw this.raise(this.state.start, \"Unexpected arrow \\\"=>\\\" after pipeline body; arrow function in pipeline body must be parenthesized\");\n        } else if (pipelineStyle === \"PipelineTopicExpression\" && childExpression.type === \"SequenceExpression\") {\n          this.raise(startPos, \"Pipeline body may not be a comma-separated sequence expression\");\n        }\n      }\n    }, {\n      key: \"parseSmartPipelineBodyInStyle\",\n      value: function parseSmartPipelineBodyInStyle(childExpression, pipelineStyle, startPos, startLoc) {\n        var bodyNode = this.startNodeAt(startPos, startLoc);\n\n        switch (pipelineStyle) {\n          case \"PipelineBareFunction\":\n            bodyNode.callee = childExpression;\n            break;\n\n          case \"PipelineBareConstructor\":\n            bodyNode.callee = childExpression.callee;\n            break;\n\n          case \"PipelineBareAwaitedFunction\":\n            bodyNode.callee = childExpression.argument;\n            break;\n\n          case \"PipelineTopicExpression\":\n            if (!this.topicReferenceWasUsedInCurrentTopicContext()) {\n              this.raise(startPos, \"Pipeline is in topic style but does not use topic reference\");\n            }\n\n            bodyNode.expression = childExpression;\n            break;\n\n          default:\n            throw new Error(\"Internal @babel/parser error: Unknown pipeline style (\" + pipelineStyle + \")\");\n        }\n\n        return this.finishNode(bodyNode, pipelineStyle);\n      }\n    }, {\n      key: \"checkSmartPipelineBodyStyle\",\n      value: function checkSmartPipelineBodyStyle(expression) {\n        switch (expression.type) {\n          default:\n            return this.isSimpleReference(expression) ? \"PipelineBareFunction\" : \"PipelineTopicExpression\";\n        }\n      }\n    }, {\n      key: \"isSimpleReference\",\n      value: function isSimpleReference(expression) {\n        switch (expression.type) {\n          case \"MemberExpression\":\n            return !expression.computed && this.isSimpleReference(expression.object);\n\n          case \"Identifier\":\n            return true;\n\n          default:\n            return false;\n        }\n      }\n    }, {\n      key: \"withTopicPermittingContext\",\n      value: function withTopicPermittingContext(callback) {\n        var outerContextTopicState = this.state.topicContext;\n        this.state.topicContext = {\n          maxNumOfResolvableTopics: 1,\n          maxTopicIndex: null\n        };\n\n        try {\n          return callback();\n        } finally {\n          this.state.topicContext = outerContextTopicState;\n        }\n      }\n    }, {\n      key: \"withTopicForbiddingContext\",\n      value: function withTopicForbiddingContext(callback) {\n        var outerContextTopicState = this.state.topicContext;\n        this.state.topicContext = {\n          maxNumOfResolvableTopics: 0,\n          maxTopicIndex: null\n        };\n\n        try {\n          return callback();\n        } finally {\n          this.state.topicContext = outerContextTopicState;\n        }\n      }\n    }, {\n      key: \"withSoloAwaitPermittingContext\",\n      value: function withSoloAwaitPermittingContext(callback) {\n        var outerContextSoloAwaitState = this.state.soloAwait;\n        this.state.soloAwait = true;\n\n        try {\n          return callback();\n        } finally {\n          this.state.soloAwait = outerContextSoloAwaitState;\n        }\n      }\n    }, {\n      key: \"registerTopicReference\",\n      value: function registerTopicReference() {\n        this.state.topicContext.maxTopicIndex = 0;\n      }\n    }, {\n      key: \"primaryTopicReferenceIsAllowedInCurrentTopicContext\",\n      value: function primaryTopicReferenceIsAllowedInCurrentTopicContext() {\n        return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n      }\n    }, {\n      key: \"topicReferenceWasUsedInCurrentTopicContext\",\n      value: function topicReferenceWasUsedInCurrentTopicContext() {\n        return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;\n      }\n    }, {\n      key: \"parseFSharpPipelineBody\",\n      value: function parseFSharpPipelineBody(prec, noIn) {\n        var startPos = this.state.start;\n        var startLoc = this.state.startLoc;\n        this.state.potentialArrowAt = this.state.start;\n        var oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n        this.state.inFSharpPipelineDirectBody = true;\n        var ret = this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, prec, noIn);\n        this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n        return ret;\n      }\n    }]);\n\n    return ExpressionParser;\n  }(LValParser);\n\n  var loopLabel = {\n    kind: \"loop\"\n  },\n      switchLabel = {\n    kind: \"switch\"\n  };\n  var FUNC_NO_FLAGS = 0,\n      FUNC_STATEMENT = 1,\n      FUNC_HANGING_STATEMENT = 2,\n      FUNC_NULLABLE_ID = 4;\n\n  var StatementParser = function (_ExpressionParser) {\n    _inherits(StatementParser, _ExpressionParser);\n\n    function StatementParser() {\n      _classCallCheck(this, StatementParser);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(StatementParser).apply(this, arguments));\n    }\n\n    _createClass(StatementParser, [{\n      key: \"parseTopLevel\",\n      value: function parseTopLevel(file, program) {\n        program.sourceType = this.options.sourceType;\n        program.interpreter = this.parseInterpreterDirective();\n        this.parseBlockBody(program, true, true, types.eof);\n\n        if (this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) {\n          for (var _i = 0, _Array$from = Array.from(this.scope.undefinedExports); _i < _Array$from.length; _i++) {\n            var _Array$from$_i = _slicedToArray(_Array$from[_i], 1),\n                name = _Array$from$_i[0];\n\n            var pos = this.scope.undefinedExports.get(name);\n            this.raise(pos, \"Export '\" + name + \"' is not defined\");\n          }\n        }\n\n        file.program = this.finishNode(program, \"Program\");\n        file.comments = this.state.comments;\n        if (this.options.tokens) file.tokens = this.state.tokens;\n        return this.finishNode(file, \"File\");\n      }\n    }, {\n      key: \"stmtToDirective\",\n      value: function stmtToDirective(stmt) {\n        var expr = stmt.expression;\n        var directiveLiteral = this.startNodeAt(expr.start, expr.loc.start);\n        var directive = this.startNodeAt(stmt.start, stmt.loc.start);\n        var raw = this.input.slice(expr.start, expr.end);\n        var val = directiveLiteral.value = raw.slice(1, -1);\n        this.addExtra(directiveLiteral, \"raw\", raw);\n        this.addExtra(directiveLiteral, \"rawValue\", val);\n        directive.value = this.finishNodeAt(directiveLiteral, \"DirectiveLiteral\", expr.end, expr.loc.end);\n        return this.finishNodeAt(directive, \"Directive\", stmt.end, stmt.loc.end);\n      }\n    }, {\n      key: \"parseInterpreterDirective\",\n      value: function parseInterpreterDirective() {\n        if (!this.match(types.interpreterDirective)) {\n          return null;\n        }\n\n        var node = this.startNode();\n        node.value = this.state.value;\n        this.next();\n        return this.finishNode(node, \"InterpreterDirective\");\n      }\n    }, {\n      key: \"isLet\",\n      value: function isLet(context) {\n        if (!this.isContextual(\"let\")) {\n          return false;\n        }\n\n        var next = this.nextTokenStart();\n        var nextCh = this.input.charCodeAt(next);\n        if (nextCh === 91) return true;\n        if (context) return false;\n        if (nextCh === 123) return true;\n\n        if (isIdentifierStart(nextCh)) {\n          var pos = next + 1;\n\n          while (isIdentifierChar(this.input.charCodeAt(pos))) {\n            ++pos;\n          }\n\n          var ident = this.input.slice(next, pos);\n          if (!keywordRelationalOperator.test(ident)) return true;\n        }\n\n        return false;\n      }\n    }, {\n      key: \"parseStatement\",\n      value: function parseStatement(context, topLevel) {\n        if (this.match(types.at)) {\n          this.parseDecorators(true);\n        }\n\n        return this.parseStatementContent(context, topLevel);\n      }\n    }, {\n      key: \"parseStatementContent\",\n      value: function parseStatementContent(context, topLevel) {\n        var starttype = this.state.type;\n        var node = this.startNode();\n        var kind;\n\n        if (this.isLet(context)) {\n          starttype = types._var;\n          kind = \"let\";\n        }\n\n        switch (starttype) {\n          case types._break:\n          case types._continue:\n            return this.parseBreakContinueStatement(node, starttype.keyword);\n\n          case types._debugger:\n            return this.parseDebuggerStatement(node);\n\n          case types._do:\n            return this.parseDoStatement(node);\n\n          case types._for:\n            return this.parseForStatement(node);\n\n          case types._function:\n            if (this.lookaheadCharCode() === 46) break;\n\n            if (context) {\n              if (this.state.strict) {\n                this.raise(this.state.start, \"In strict mode code, functions can only be declared at top level or inside a block\");\n              } else if (context !== \"if\" && context !== \"label\") {\n                this.raise(this.state.start, \"In non-strict mode code, functions can only be declared at top level, \" + \"inside a block, or as the body of an if statement\");\n              }\n            }\n\n            return this.parseFunctionStatement(node, false, !context);\n\n          case types._class:\n            if (context) this.unexpected();\n            return this.parseClass(node, true);\n\n          case types._if:\n            return this.parseIfStatement(node);\n\n          case types._return:\n            return this.parseReturnStatement(node);\n\n          case types._switch:\n            return this.parseSwitchStatement(node);\n\n          case types._throw:\n            return this.parseThrowStatement(node);\n\n          case types._try:\n            return this.parseTryStatement(node);\n\n          case types._const:\n          case types._var:\n            kind = kind || this.state.value;\n\n            if (context && kind !== \"var\") {\n              this.raise(this.state.start, \"Lexical declaration cannot appear in a single-statement context\");\n            }\n\n            return this.parseVarStatement(node, kind);\n\n          case types._while:\n            return this.parseWhileStatement(node);\n\n          case types._with:\n            return this.parseWithStatement(node);\n\n          case types.braceL:\n            return this.parseBlock();\n\n          case types.semi:\n            return this.parseEmptyStatement(node);\n\n          case types._export:\n          case types._import:\n            {\n              var nextTokenCharCode = this.lookaheadCharCode();\n\n              if (nextTokenCharCode === 40 || nextTokenCharCode === 46) {\n                break;\n              }\n\n              if (!this.options.allowImportExportEverywhere && !topLevel) {\n                this.raise(this.state.start, \"'import' and 'export' may only appear at the top level\");\n              }\n\n              this.next();\n              var result;\n\n              if (starttype === types._import) {\n                result = this.parseImport(node);\n\n                if (result.type === \"ImportDeclaration\" && (!result.importKind || result.importKind === \"value\")) {\n                  this.sawUnambiguousESM = true;\n                }\n              } else {\n                result = this.parseExport(node);\n\n                if (result.type === \"ExportNamedDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportAllDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportDefaultDeclaration\") {\n                  this.sawUnambiguousESM = true;\n                }\n              }\n\n              this.assertModuleNodeAllowed(node);\n              return result;\n            }\n\n          default:\n            {\n              if (this.isAsyncFunction()) {\n                if (context) {\n                  this.raise(this.state.start, \"Async functions can only be declared at the top level or inside a block\");\n                }\n\n                this.next();\n                return this.parseFunctionStatement(node, true, !context);\n              }\n            }\n        }\n\n        var maybeName = this.state.value;\n        var expr = this.parseExpression();\n\n        if (starttype === types.name && expr.type === \"Identifier\" && this.eat(types.colon)) {\n          return this.parseLabeledStatement(node, maybeName, expr, context);\n        } else {\n          return this.parseExpressionStatement(node, expr);\n        }\n      }\n    }, {\n      key: \"assertModuleNodeAllowed\",\n      value: function assertModuleNodeAllowed(node) {\n        if (!this.options.allowImportExportEverywhere && !this.inModule) {\n          this.raise(node.start, \"'import' and 'export' may appear only with 'sourceType: \\\"module\\\"'\", {\n            code: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\n          });\n        }\n      }\n    }, {\n      key: \"takeDecorators\",\n      value: function takeDecorators(node) {\n        var decorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n        if (decorators.length) {\n          node.decorators = decorators;\n          this.resetStartLocationFromNode(node, decorators[0]);\n          this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n        }\n      }\n    }, {\n      key: \"canHaveLeadingDecorator\",\n      value: function canHaveLeadingDecorator() {\n        return this.match(types._class);\n      }\n    }, {\n      key: \"parseDecorators\",\n      value: function parseDecorators(allowExport) {\n        var currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n        while (this.match(types.at)) {\n          var decorator = this.parseDecorator();\n          currentContextDecorators.push(decorator);\n        }\n\n        if (this.match(types._export)) {\n          if (!allowExport) {\n            this.unexpected();\n          }\n\n          if (this.hasPlugin(\"decorators\") && !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n            this.raise(this.state.start, \"Using the export keyword between a decorator and a class is not allowed. \" + \"Please use `export @dec class` instead.\");\n          }\n        } else if (!this.canHaveLeadingDecorator()) {\n          throw this.raise(this.state.start, \"Leading decorators must be attached to a class declaration\");\n        }\n      }\n    }, {\n      key: \"parseDecorator\",\n      value: function parseDecorator() {\n        this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n        var node = this.startNode();\n        this.next();\n\n        if (this.hasPlugin(\"decorators\")) {\n          this.state.decoratorStack.push([]);\n          var startPos = this.state.start;\n          var startLoc = this.state.startLoc;\n          var expr;\n\n          if (this.eat(types.parenL)) {\n            expr = this.parseExpression();\n            this.expect(types.parenR);\n          } else {\n            expr = this.parseIdentifier(false);\n\n            while (this.eat(types.dot)) {\n              var _node16 = this.startNodeAt(startPos, startLoc);\n\n              _node16.object = expr;\n              _node16.property = this.parseIdentifier(true);\n              _node16.computed = false;\n              expr = this.finishNode(_node16, \"MemberExpression\");\n            }\n          }\n\n          node.expression = this.parseMaybeDecoratorArguments(expr);\n          this.state.decoratorStack.pop();\n        } else {\n          node.expression = this.parseExprSubscripts();\n        }\n\n        return this.finishNode(node, \"Decorator\");\n      }\n    }, {\n      key: \"parseMaybeDecoratorArguments\",\n      value: function parseMaybeDecoratorArguments(expr) {\n        if (this.eat(types.parenL)) {\n          var node = this.startNodeAtNode(expr);\n          node.callee = expr;\n          node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n          this.toReferencedList(node.arguments);\n          return this.finishNode(node, \"CallExpression\");\n        }\n\n        return expr;\n      }\n    }, {\n      key: \"parseBreakContinueStatement\",\n      value: function parseBreakContinueStatement(node, keyword) {\n        var isBreak = keyword === \"break\";\n        this.next();\n\n        if (this.isLineTerminator()) {\n          node.label = null;\n        } else {\n          node.label = this.parseIdentifier();\n          this.semicolon();\n        }\n\n        this.verifyBreakContinue(node, keyword);\n        return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n      }\n    }, {\n      key: \"verifyBreakContinue\",\n      value: function verifyBreakContinue(node, keyword) {\n        var isBreak = keyword === \"break\";\n        var i;\n\n        for (i = 0; i < this.state.labels.length; ++i) {\n          var lab = this.state.labels[i];\n\n          if (node.label == null || lab.name === node.label.name) {\n            if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n            if (node.label && isBreak) break;\n          }\n        }\n\n        if (i === this.state.labels.length) {\n          this.raise(node.start, \"Unsyntactic \" + keyword);\n        }\n      }\n    }, {\n      key: \"parseDebuggerStatement\",\n      value: function parseDebuggerStatement(node) {\n        this.next();\n        this.semicolon();\n        return this.finishNode(node, \"DebuggerStatement\");\n      }\n    }, {\n      key: \"parseHeaderExpression\",\n      value: function parseHeaderExpression() {\n        this.expect(types.parenL);\n        var val = this.parseExpression();\n        this.expect(types.parenR);\n        return val;\n      }\n    }, {\n      key: \"parseDoStatement\",\n      value: function parseDoStatement(node) {\n        var _this37 = this;\n\n        this.next();\n        this.state.labels.push(loopLabel);\n        node.body = this.withTopicForbiddingContext(function () {\n          return _this37.parseStatement(\"do\");\n        });\n        this.state.labels.pop();\n        this.expect(types._while);\n        node.test = this.parseHeaderExpression();\n        this.eat(types.semi);\n        return this.finishNode(node, \"DoWhileStatement\");\n      }\n    }, {\n      key: \"parseForStatement\",\n      value: function parseForStatement(node) {\n        this.next();\n        this.state.labels.push(loopLabel);\n        var awaitAt = -1;\n\n        if (this.isAwaitAllowed() && this.eatContextual(\"await\")) {\n          awaitAt = this.state.lastTokStart;\n        }\n\n        this.scope.enter(SCOPE_OTHER);\n        this.expect(types.parenL);\n\n        if (this.match(types.semi)) {\n          if (awaitAt > -1) {\n            this.unexpected(awaitAt);\n          }\n\n          return this.parseFor(node, null);\n        }\n\n        var isLet = this.isLet();\n\n        if (this.match(types._var) || this.match(types._const) || isLet) {\n          var _init = this.startNode();\n\n          var kind = isLet ? \"let\" : this.state.value;\n          this.next();\n          this.parseVar(_init, true, kind);\n          this.finishNode(_init, \"VariableDeclaration\");\n\n          if ((this.match(types._in) || this.isContextual(\"of\")) && _init.declarations.length === 1) {\n            return this.parseForIn(node, _init, awaitAt);\n          }\n\n          if (awaitAt > -1) {\n            this.unexpected(awaitAt);\n          }\n\n          return this.parseFor(node, _init);\n        }\n\n        var refShorthandDefaultPos = {\n          start: 0\n        };\n        var init = this.parseExpression(true, refShorthandDefaultPos);\n\n        if (this.match(types._in) || this.isContextual(\"of\")) {\n          var description = this.isContextual(\"of\") ? \"for-of statement\" : \"for-in statement\";\n          this.toAssignable(init, undefined, description);\n          this.checkLVal(init, undefined, undefined, description);\n          return this.parseForIn(node, init, awaitAt);\n        } else if (refShorthandDefaultPos.start) {\n          this.unexpected(refShorthandDefaultPos.start);\n        }\n\n        if (awaitAt > -1) {\n          this.unexpected(awaitAt);\n        }\n\n        return this.parseFor(node, init);\n      }\n    }, {\n      key: \"parseFunctionStatement\",\n      value: function parseFunctionStatement(node, isAsync, declarationPosition) {\n        this.next();\n        return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), isAsync);\n      }\n    }, {\n      key: \"parseIfStatement\",\n      value: function parseIfStatement(node) {\n        this.next();\n        node.test = this.parseHeaderExpression();\n        node.consequent = this.parseStatement(\"if\");\n        node.alternate = this.eat(types._else) ? this.parseStatement(\"if\") : null;\n        return this.finishNode(node, \"IfStatement\");\n      }\n    }, {\n      key: \"parseReturnStatement\",\n      value: function parseReturnStatement(node) {\n        if (!this.scope.inFunction && !this.options.allowReturnOutsideFunction) {\n          this.raise(this.state.start, \"'return' outside of function\");\n        }\n\n        this.next();\n\n        if (this.isLineTerminator()) {\n          node.argument = null;\n        } else {\n          node.argument = this.parseExpression();\n          this.semicolon();\n        }\n\n        return this.finishNode(node, \"ReturnStatement\");\n      }\n    }, {\n      key: \"parseSwitchStatement\",\n      value: function parseSwitchStatement(node) {\n        this.next();\n        node.discriminant = this.parseHeaderExpression();\n        var cases = node.cases = [];\n        this.expect(types.braceL);\n        this.state.labels.push(switchLabel);\n        this.scope.enter(SCOPE_OTHER);\n        var cur;\n\n        for (var sawDefault; !this.match(types.braceR);) {\n          if (this.match(types._case) || this.match(types._default)) {\n            var isCase = this.match(types._case);\n            if (cur) this.finishNode(cur, \"SwitchCase\");\n            cases.push(cur = this.startNode());\n            cur.consequent = [];\n            this.next();\n\n            if (isCase) {\n              cur.test = this.parseExpression();\n            } else {\n              if (sawDefault) {\n                this.raise(this.state.lastTokStart, \"Multiple default clauses\");\n              }\n\n              sawDefault = true;\n              cur.test = null;\n            }\n\n            this.expect(types.colon);\n          } else {\n            if (cur) {\n              cur.consequent.push(this.parseStatement(null));\n            } else {\n              this.unexpected();\n            }\n          }\n        }\n\n        this.scope.exit();\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        this.next();\n        this.state.labels.pop();\n        return this.finishNode(node, \"SwitchStatement\");\n      }\n    }, {\n      key: \"parseThrowStatement\",\n      value: function parseThrowStatement(node) {\n        this.next();\n\n        if (lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start))) {\n          this.raise(this.state.lastTokEnd, \"Illegal newline after throw\");\n        }\n\n        node.argument = this.parseExpression();\n        this.semicolon();\n        return this.finishNode(node, \"ThrowStatement\");\n      }\n    }, {\n      key: \"parseTryStatement\",\n      value: function parseTryStatement(node) {\n        var _this38 = this;\n\n        this.next();\n        node.block = this.parseBlock();\n        node.handler = null;\n\n        if (this.match(types._catch)) {\n          var clause = this.startNode();\n          this.next();\n\n          if (this.match(types.parenL)) {\n            this.expect(types.parenL);\n            clause.param = this.parseBindingAtom();\n            var simple = clause.param.type === \"Identifier\";\n            this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n            this.checkLVal(clause.param, BIND_LEXICAL, null, \"catch clause\");\n            this.expect(types.parenR);\n          } else {\n            clause.param = null;\n            this.scope.enter(SCOPE_OTHER);\n          }\n\n          clause.body = this.withTopicForbiddingContext(function () {\n            return _this38.parseBlock(false, false);\n          });\n          this.scope.exit();\n          node.handler = this.finishNode(clause, \"CatchClause\");\n        }\n\n        node.finalizer = this.eat(types._finally) ? this.parseBlock() : null;\n\n        if (!node.handler && !node.finalizer) {\n          this.raise(node.start, \"Missing catch or finally clause\");\n        }\n\n        return this.finishNode(node, \"TryStatement\");\n      }\n    }, {\n      key: \"parseVarStatement\",\n      value: function parseVarStatement(node, kind) {\n        this.next();\n        this.parseVar(node, false, kind);\n        this.semicolon();\n        return this.finishNode(node, \"VariableDeclaration\");\n      }\n    }, {\n      key: \"parseWhileStatement\",\n      value: function parseWhileStatement(node) {\n        var _this39 = this;\n\n        this.next();\n        node.test = this.parseHeaderExpression();\n        this.state.labels.push(loopLabel);\n        node.body = this.withTopicForbiddingContext(function () {\n          return _this39.parseStatement(\"while\");\n        });\n        this.state.labels.pop();\n        return this.finishNode(node, \"WhileStatement\");\n      }\n    }, {\n      key: \"parseWithStatement\",\n      value: function parseWithStatement(node) {\n        var _this40 = this;\n\n        if (this.state.strict) {\n          this.raise(this.state.start, \"'with' in strict mode\");\n        }\n\n        this.next();\n        node.object = this.parseHeaderExpression();\n        node.body = this.withTopicForbiddingContext(function () {\n          return _this40.parseStatement(\"with\");\n        });\n        return this.finishNode(node, \"WithStatement\");\n      }\n    }, {\n      key: \"parseEmptyStatement\",\n      value: function parseEmptyStatement(node) {\n        this.next();\n        return this.finishNode(node, \"EmptyStatement\");\n      }\n    }, {\n      key: \"parseLabeledStatement\",\n      value: function parseLabeledStatement(node, maybeName, expr, context) {\n        for (var _i2 = 0, _this$state$labels = this.state.labels; _i2 < _this$state$labels.length; _i2++) {\n          var label = _this$state$labels[_i2];\n\n          if (label.name === maybeName) {\n            this.raise(expr.start, \"Label '\" + maybeName + \"' is already declared\");\n          }\n        }\n\n        var kind = this.state.type.isLoop ? \"loop\" : this.match(types._switch) ? \"switch\" : null;\n\n        for (var i = this.state.labels.length - 1; i >= 0; i--) {\n          var _label = this.state.labels[i];\n\n          if (_label.statementStart === node.start) {\n            _label.statementStart = this.state.start;\n            _label.kind = kind;\n          } else {\n            break;\n          }\n        }\n\n        this.state.labels.push({\n          name: maybeName,\n          kind: kind,\n          statementStart: this.state.start\n        });\n        node.body = this.parseStatement(context ? context.indexOf(\"label\") === -1 ? context + \"label\" : context : \"label\");\n        this.state.labels.pop();\n        node.label = expr;\n        return this.finishNode(node, \"LabeledStatement\");\n      }\n    }, {\n      key: \"parseExpressionStatement\",\n      value: function parseExpressionStatement(node, expr) {\n        node.expression = expr;\n        this.semicolon();\n        return this.finishNode(node, \"ExpressionStatement\");\n      }\n    }, {\n      key: \"parseBlock\",\n      value: function parseBlock() {\n        var allowDirectives = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n        var createNewLexicalScope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n        var node = this.startNode();\n        this.expect(types.braceL);\n\n        if (createNewLexicalScope) {\n          this.scope.enter(SCOPE_OTHER);\n        }\n\n        this.parseBlockBody(node, allowDirectives, false, types.braceR);\n\n        if (createNewLexicalScope) {\n          this.scope.exit();\n        }\n\n        return this.finishNode(node, \"BlockStatement\");\n      }\n    }, {\n      key: \"isValidDirective\",\n      value: function isValidDirective(stmt) {\n        return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"StringLiteral\" && !stmt.expression.extra.parenthesized;\n      }\n    }, {\n      key: \"parseBlockBody\",\n      value: function parseBlockBody(node, allowDirectives, topLevel, end) {\n        var body = node.body = [];\n        var directives = node.directives = [];\n        this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : undefined, topLevel, end);\n      }\n    }, {\n      key: \"parseBlockOrModuleBlockBody\",\n      value: function parseBlockOrModuleBlockBody(body, directives, topLevel, end) {\n        var parsedNonDirective = false;\n        var oldStrict;\n        var octalPosition;\n\n        while (!this.eat(end)) {\n          if (!parsedNonDirective && this.state.containsOctal && !octalPosition) {\n            octalPosition = this.state.octalPosition;\n          }\n\n          var stmt = this.parseStatement(null, topLevel);\n\n          if (directives && !parsedNonDirective && this.isValidDirective(stmt)) {\n            var directive = this.stmtToDirective(stmt);\n            directives.push(directive);\n\n            if (oldStrict === undefined && directive.value.value === \"use strict\") {\n              oldStrict = this.state.strict;\n              this.setStrict(true);\n\n              if (octalPosition) {\n                this.raise(octalPosition, \"Octal literal in strict mode\");\n              }\n            }\n\n            continue;\n          }\n\n          parsedNonDirective = true;\n          body.push(stmt);\n        }\n\n        if (oldStrict === false) {\n          this.setStrict(false);\n        }\n      }\n    }, {\n      key: \"parseFor\",\n      value: function parseFor(node, init) {\n        var _this41 = this;\n\n        node.init = init;\n        this.expect(types.semi);\n        node.test = this.match(types.semi) ? null : this.parseExpression();\n        this.expect(types.semi);\n        node.update = this.match(types.parenR) ? null : this.parseExpression();\n        this.expect(types.parenR);\n        node.body = this.withTopicForbiddingContext(function () {\n          return _this41.parseStatement(\"for\");\n        });\n        this.scope.exit();\n        this.state.labels.pop();\n        return this.finishNode(node, \"ForStatement\");\n      }\n    }, {\n      key: \"parseForIn\",\n      value: function parseForIn(node, init, awaitAt) {\n        var _this42 = this;\n\n        var isForIn = this.match(types._in);\n        this.next();\n\n        if (isForIn) {\n          if (awaitAt > -1) this.unexpected(awaitAt);\n        } else {\n          node.await = awaitAt > -1;\n        }\n\n        if (init.type === \"VariableDeclaration\" && init.declarations[0].init != null && (!isForIn || this.state.strict || init.kind !== \"var\" || init.declarations[0].id.type !== \"Identifier\")) {\n          this.raise(init.start, (isForIn ? \"for-in\" : \"for-of\") + \" loop variable declaration may not have an initializer\");\n        } else if (init.type === \"AssignmentPattern\") {\n          this.raise(init.start, \"Invalid left-hand side in for-loop\");\n        }\n\n        node.left = init;\n        node.right = isForIn ? this.parseExpression() : this.parseMaybeAssign();\n        this.expect(types.parenR);\n        node.body = this.withTopicForbiddingContext(function () {\n          return _this42.parseStatement(\"for\");\n        });\n        this.scope.exit();\n        this.state.labels.pop();\n        return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n      }\n    }, {\n      key: \"parseVar\",\n      value: function parseVar(node, isFor, kind) {\n        var declarations = node.declarations = [];\n        var isTypescript = this.hasPlugin(\"typescript\");\n        node.kind = kind;\n\n        for (;;) {\n          var decl = this.startNode();\n          this.parseVarId(decl, kind);\n\n          if (this.eat(types.eq)) {\n            decl.init = this.parseMaybeAssign(isFor);\n          } else {\n            if (kind === \"const\" && !(this.match(types._in) || this.isContextual(\"of\"))) {\n              if (!isTypescript) {\n                this.unexpected();\n              }\n            } else if (decl.id.type !== \"Identifier\" && !(isFor && (this.match(types._in) || this.isContextual(\"of\")))) {\n              this.raise(this.state.lastTokEnd, \"Complex binding patterns require an initialization value\");\n            }\n\n            decl.init = null;\n          }\n\n          declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n          if (!this.eat(types.comma)) break;\n        }\n\n        return node;\n      }\n    }, {\n      key: \"parseVarId\",\n      value: function parseVarId(decl, kind) {\n        decl.id = this.parseBindingAtom();\n        this.checkLVal(decl.id, kind === \"var\" ? BIND_VAR : BIND_LEXICAL, undefined, \"variable declaration\", kind !== \"var\");\n      }\n    }, {\n      key: \"parseFunction\",\n      value: function parseFunction(node) {\n        var _this43 = this;\n\n        var statement = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : FUNC_NO_FLAGS;\n        var isAsync = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n        var isStatement = statement & FUNC_STATEMENT;\n        var isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n        var requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n        this.initFunction(node, isAsync);\n\n        if (this.match(types.star) && isHangingStatement) {\n          this.raise(this.state.start, \"Generators can only be declared at the top level or inside a block\");\n        }\n\n        node.generator = this.eat(types.star);\n\n        if (isStatement) {\n          node.id = this.parseFunctionId(requireId);\n        }\n\n        var oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n        var oldInClassProperty = this.state.inClassProperty;\n        var oldYieldPos = this.state.yieldPos;\n        var oldAwaitPos = this.state.awaitPos;\n        this.state.maybeInArrowParameters = false;\n        this.state.inClassProperty = false;\n        this.state.yieldPos = -1;\n        this.state.awaitPos = -1;\n        this.scope.enter(functionFlags(node.async, node.generator));\n\n        if (!isStatement) {\n          node.id = this.parseFunctionId();\n        }\n\n        this.parseFunctionParams(node);\n        this.withTopicForbiddingContext(function () {\n          _this43.parseFunctionBodyAndFinish(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\");\n        });\n        this.scope.exit();\n\n        if (isStatement && !isHangingStatement) {\n          this.registerFunctionStatementId(node);\n        }\n\n        this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n        this.state.inClassProperty = oldInClassProperty;\n        this.state.yieldPos = oldYieldPos;\n        this.state.awaitPos = oldAwaitPos;\n        return node;\n      }\n    }, {\n      key: \"parseFunctionId\",\n      value: function parseFunctionId(requireId) {\n        return requireId || this.match(types.name) ? this.parseIdentifier() : null;\n      }\n    }, {\n      key: \"parseFunctionParams\",\n      value: function parseFunctionParams(node, allowModifiers) {\n        var oldInParameters = this.state.inParameters;\n        this.state.inParameters = true;\n        this.expect(types.parenL);\n        node.params = this.parseBindingList(types.parenR, 41, false, allowModifiers);\n        this.state.inParameters = oldInParameters;\n        this.checkYieldAwaitInDefaultParams();\n      }\n    }, {\n      key: \"registerFunctionStatementId\",\n      value: function registerFunctionStatementId(node) {\n        if (!node.id) return;\n        this.scope.declareName(node.id.name, this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION, node.id.start);\n      }\n    }, {\n      key: \"parseClass\",\n      value: function parseClass(node, isStatement, optionalId) {\n        this.next();\n        this.takeDecorators(node);\n        var oldStrict = this.state.strict;\n        this.state.strict = true;\n        this.parseClassId(node, isStatement, optionalId);\n        this.parseClassSuper(node);\n        node.body = this.parseClassBody(!!node.superClass);\n        this.state.strict = oldStrict;\n        return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n      }\n    }, {\n      key: \"isClassProperty\",\n      value: function isClassProperty() {\n        return this.match(types.eq) || this.match(types.semi) || this.match(types.braceR);\n      }\n    }, {\n      key: \"isClassMethod\",\n      value: function isClassMethod() {\n        return this.match(types.parenL);\n      }\n    }, {\n      key: \"isNonstaticConstructor\",\n      value: function isNonstaticConstructor(method) {\n        return !method.computed && !method.static && (method.key.name === \"constructor\" || method.key.value === \"constructor\");\n      }\n    }, {\n      key: \"parseClassBody\",\n      value: function parseClassBody(constructorAllowsSuper) {\n        var _this44 = this;\n\n        this.state.classLevel++;\n        var state = {\n          hadConstructor: false\n        };\n        var decorators = [];\n        var classBody = this.startNode();\n        classBody.body = [];\n        this.expect(types.braceL);\n        this.withTopicForbiddingContext(function () {\n          while (!_this44.eat(types.braceR)) {\n            if (_this44.eat(types.semi)) {\n              if (decorators.length > 0) {\n                throw _this44.raise(_this44.state.lastTokEnd, \"Decorators must not be followed by a semicolon\");\n              }\n\n              continue;\n            }\n\n            if (_this44.match(types.at)) {\n              decorators.push(_this44.parseDecorator());\n              continue;\n            }\n\n            var member = _this44.startNode();\n\n            if (decorators.length) {\n              member.decorators = decorators;\n\n              _this44.resetStartLocationFromNode(member, decorators[0]);\n\n              decorators = [];\n            }\n\n            _this44.parseClassMember(classBody, member, state, constructorAllowsSuper);\n\n            if (member.kind === \"constructor\" && member.decorators && member.decorators.length > 0) {\n              _this44.raise(member.start, \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\");\n            }\n          }\n        });\n\n        if (decorators.length) {\n          throw this.raise(this.state.start, \"You have trailing decorators with no method\");\n        }\n\n        this.state.classLevel--;\n        return this.finishNode(classBody, \"ClassBody\");\n      }\n    }, {\n      key: \"parseClassMember\",\n      value: function parseClassMember(classBody, member, state, constructorAllowsSuper) {\n        var isStatic = false;\n        var containsEsc = this.state.containsEsc;\n\n        if (this.match(types.name) && this.state.value === \"static\") {\n          var key = this.parseIdentifier(true);\n\n          if (this.isClassMethod()) {\n            var method = member;\n            method.kind = \"method\";\n            method.computed = false;\n            method.key = key;\n            method.static = false;\n            this.pushClassMethod(classBody, method, false, false, false, false);\n            return;\n          } else if (this.isClassProperty()) {\n            var prop = member;\n            prop.computed = false;\n            prop.key = key;\n            prop.static = false;\n            classBody.body.push(this.parseClassProperty(prop));\n            return;\n          } else if (containsEsc) {\n            throw this.unexpected();\n          }\n\n          isStatic = true;\n        }\n\n        this.parseClassMemberWithIsStatic(classBody, member, state, isStatic, constructorAllowsSuper);\n      }\n    }, {\n      key: \"parseClassMemberWithIsStatic\",\n      value: function parseClassMemberWithIsStatic(classBody, member, state, isStatic, constructorAllowsSuper) {\n        var publicMethod = member;\n        var privateMethod = member;\n        var publicProp = member;\n        var privateProp = member;\n        var method = publicMethod;\n        var publicMember = publicMethod;\n        member.static = isStatic;\n\n        if (this.eat(types.star)) {\n          method.kind = \"method\";\n          this.parseClassPropertyName(method);\n\n          if (method.key.type === \"PrivateName\") {\n            this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n            return;\n          }\n\n          if (this.isNonstaticConstructor(publicMethod)) {\n            this.raise(publicMethod.key.start, \"Constructor can't be a generator\");\n          }\n\n          this.pushClassMethod(classBody, publicMethod, true, false, false, false);\n          return;\n        }\n\n        var containsEsc = this.state.containsEsc;\n        var key = this.parseClassPropertyName(member);\n        var isPrivate = key.type === \"PrivateName\";\n        var isSimple = key.type === \"Identifier\";\n        var maybeQuestionTokenStart = this.state.start;\n        this.parsePostMemberNameModifiers(publicMember);\n\n        if (this.isClassMethod()) {\n          method.kind = \"method\";\n\n          if (isPrivate) {\n            this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n            return;\n          }\n\n          var isConstructor = this.isNonstaticConstructor(publicMethod);\n          var allowsDirectSuper = false;\n\n          if (isConstructor) {\n            publicMethod.kind = \"constructor\";\n\n            if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n              this.raise(key.start, \"Duplicate constructor in the same class\");\n            }\n\n            state.hadConstructor = true;\n            allowsDirectSuper = constructorAllowsSuper;\n          }\n\n          this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);\n        } else if (this.isClassProperty()) {\n          if (isPrivate) {\n            this.pushClassPrivateProperty(classBody, privateProp);\n          } else {\n            this.pushClassProperty(classBody, publicProp);\n          }\n        } else if (isSimple && key.name === \"async\" && !containsEsc && !this.isLineTerminator()) {\n          var isGenerator = this.eat(types.star);\n\n          if (publicMember.optional) {\n            this.unexpected(maybeQuestionTokenStart);\n          }\n\n          method.kind = \"method\";\n          this.parseClassPropertyName(method);\n          this.parsePostMemberNameModifiers(publicMember);\n\n          if (method.key.type === \"PrivateName\") {\n            this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true);\n          } else {\n            if (this.isNonstaticConstructor(publicMethod)) {\n              this.raise(publicMethod.key.start, \"Constructor can't be an async function\");\n            }\n\n            this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false);\n          }\n        } else if (isSimple && (key.name === \"get\" || key.name === \"set\") && !containsEsc && !(this.match(types.star) && this.isLineTerminator())) {\n          method.kind = key.name;\n          this.parseClassPropertyName(publicMethod);\n\n          if (method.key.type === \"PrivateName\") {\n            this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n          } else {\n            if (this.isNonstaticConstructor(publicMethod)) {\n              this.raise(publicMethod.key.start, \"Constructor can't have get/set modifier\");\n            }\n\n            this.pushClassMethod(classBody, publicMethod, false, false, false, false);\n          }\n\n          this.checkGetterSetterParams(publicMethod);\n        } else if (this.isLineTerminator()) {\n          if (isPrivate) {\n            this.pushClassPrivateProperty(classBody, privateProp);\n          } else {\n            this.pushClassProperty(classBody, publicProp);\n          }\n        } else {\n          this.unexpected();\n        }\n      }\n    }, {\n      key: \"parseClassPropertyName\",\n      value: function parseClassPropertyName(member) {\n        var key = this.parsePropertyName(member);\n\n        if (!member.computed && member.static && (key.name === \"prototype\" || key.value === \"prototype\")) {\n          this.raise(key.start, \"Classes may not have static property named prototype\");\n        }\n\n        if (key.type === \"PrivateName\" && key.id.name === \"constructor\") {\n          this.raise(key.start, \"Classes may not have a private field named '#constructor'\");\n        }\n\n        return key;\n      }\n    }, {\n      key: \"pushClassProperty\",\n      value: function pushClassProperty(classBody, prop) {\n        if (!prop.computed && (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")) {\n          this.raise(prop.key.start, \"Classes may not have a field named 'constructor'\");\n        }\n\n        classBody.body.push(this.parseClassProperty(prop));\n      }\n    }, {\n      key: \"pushClassPrivateProperty\",\n      value: function pushClassPrivateProperty(classBody, prop) {\n        this.expectPlugin(\"classPrivateProperties\", prop.key.start);\n        classBody.body.push(this.parseClassPrivateProperty(prop));\n      }\n    }, {\n      key: \"pushClassMethod\",\n      value: function pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n        classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true));\n      }\n    }, {\n      key: \"pushClassPrivateMethod\",\n      value: function pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n        this.expectPlugin(\"classPrivateMethods\", method.key.start);\n        classBody.body.push(this.parseMethod(method, isGenerator, isAsync, false, false, \"ClassPrivateMethod\", true));\n      }\n    }, {\n      key: \"parsePostMemberNameModifiers\",\n      value: function parsePostMemberNameModifiers(methodOrProp) {}\n    }, {\n      key: \"parseAccessModifier\",\n      value: function parseAccessModifier() {\n        return undefined;\n      }\n    }, {\n      key: \"parseClassPrivateProperty\",\n      value: function parseClassPrivateProperty(node) {\n        this.state.inClassProperty = true;\n        this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n        node.value = this.eat(types.eq) ? this.parseMaybeAssign() : null;\n        this.semicolon();\n        this.state.inClassProperty = false;\n        this.scope.exit();\n        return this.finishNode(node, \"ClassPrivateProperty\");\n      }\n    }, {\n      key: \"parseClassProperty\",\n      value: function parseClassProperty(node) {\n        if (!node.typeAnnotation) {\n          this.expectPlugin(\"classProperties\");\n        }\n\n        this.state.inClassProperty = true;\n        this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n\n        if (this.match(types.eq)) {\n          this.expectPlugin(\"classProperties\");\n          this.next();\n          node.value = this.parseMaybeAssign();\n        } else {\n          node.value = null;\n        }\n\n        this.semicolon();\n        this.state.inClassProperty = false;\n        this.scope.exit();\n        return this.finishNode(node, \"ClassProperty\");\n      }\n    }, {\n      key: \"parseClassId\",\n      value: function parseClassId(node, isStatement, optionalId) {\n        var bindingType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : BIND_CLASS;\n\n        if (this.match(types.name)) {\n          node.id = this.parseIdentifier();\n\n          if (isStatement) {\n            this.checkLVal(node.id, bindingType, undefined, \"class name\");\n          }\n        } else {\n          if (optionalId || !isStatement) {\n            node.id = null;\n          } else {\n            this.unexpected(null, \"A class name is required\");\n          }\n        }\n      }\n    }, {\n      key: \"parseClassSuper\",\n      value: function parseClassSuper(node) {\n        node.superClass = this.eat(types._extends) ? this.parseExprSubscripts() : null;\n      }\n    }, {\n      key: \"parseExport\",\n      value: function parseExport(node) {\n        var hasDefault = this.maybeParseExportDefaultSpecifier(node);\n        var parseAfterDefault = !hasDefault || this.eat(types.comma);\n        var hasStar = parseAfterDefault && this.eatExportStar(node);\n        var hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node);\n        var parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(types.comma));\n        var isFromRequired = hasDefault || hasStar;\n\n        if (hasStar && !hasNamespace) {\n          if (hasDefault) this.unexpected();\n          this.parseExportFrom(node, true);\n          return this.finishNode(node, \"ExportAllDeclaration\");\n        }\n\n        var hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n        if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers || hasNamespace && parseAfterNamespace && !hasSpecifiers) {\n          throw this.unexpected(null, types.braceL);\n        }\n\n        var hasDeclaration;\n\n        if (isFromRequired || hasSpecifiers) {\n          hasDeclaration = false;\n          this.parseExportFrom(node, isFromRequired);\n        } else {\n          hasDeclaration = this.maybeParseExportDeclaration(node);\n        }\n\n        if (isFromRequired || hasSpecifiers || hasDeclaration) {\n          this.checkExport(node, true, false, !!node.source);\n          return this.finishNode(node, \"ExportNamedDeclaration\");\n        }\n\n        if (this.eat(types._default)) {\n          node.declaration = this.parseExportDefaultExpression();\n          this.checkExport(node, true, true);\n          return this.finishNode(node, \"ExportDefaultDeclaration\");\n        }\n\n        throw this.unexpected(null, types.braceL);\n      }\n    }, {\n      key: \"eatExportStar\",\n      value: function eatExportStar(node) {\n        return this.eat(types.star);\n      }\n    }, {\n      key: \"maybeParseExportDefaultSpecifier\",\n      value: function maybeParseExportDefaultSpecifier(node) {\n        if (this.isExportDefaultSpecifier()) {\n          this.expectPlugin(\"exportDefaultFrom\");\n          var specifier = this.startNode();\n          specifier.exported = this.parseIdentifier(true);\n          node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n          return true;\n        }\n\n        return false;\n      }\n    }, {\n      key: \"maybeParseExportNamespaceSpecifier\",\n      value: function maybeParseExportNamespaceSpecifier(node) {\n        if (this.isContextual(\"as\")) {\n          if (!node.specifiers) node.specifiers = [];\n          var specifier = this.startNodeAt(this.state.lastTokStart, this.state.lastTokStartLoc);\n          this.next();\n          specifier.exported = this.parseIdentifier(true);\n          node.specifiers.push(this.finishNode(specifier, \"ExportNamespaceSpecifier\"));\n          return true;\n        }\n\n        return false;\n      }\n    }, {\n      key: \"maybeParseExportNamedSpecifiers\",\n      value: function maybeParseExportNamedSpecifiers(node) {\n        if (this.match(types.braceL)) {\n          var _node$specifiers2;\n\n          if (!node.specifiers) node.specifiers = [];\n\n          (_node$specifiers2 = node.specifiers).push.apply(_node$specifiers2, _toConsumableArray(this.parseExportSpecifiers()));\n\n          node.source = null;\n          node.declaration = null;\n          return true;\n        }\n\n        return false;\n      }\n    }, {\n      key: \"maybeParseExportDeclaration\",\n      value: function maybeParseExportDeclaration(node) {\n        if (this.shouldParseExportDeclaration()) {\n          if (this.isContextual(\"async\")) {\n            var next = this.nextTokenStart();\n\n            if (!this.isUnparsedContextual(next, \"function\")) {\n              this.unexpected(next, \"Unexpected token, expected \\\"function\\\"\");\n            }\n          }\n\n          node.specifiers = [];\n          node.source = null;\n          node.declaration = this.parseExportDeclaration(node);\n          return true;\n        }\n\n        return false;\n      }\n    }, {\n      key: \"isAsyncFunction\",\n      value: function isAsyncFunction() {\n        if (!this.isContextual(\"async\")) return false;\n        var next = this.nextTokenStart();\n        return !lineBreak.test(this.input.slice(this.state.pos, next)) && this.isUnparsedContextual(next, \"function\");\n      }\n    }, {\n      key: \"parseExportDefaultExpression\",\n      value: function parseExportDefaultExpression() {\n        var expr = this.startNode();\n        var isAsync = this.isAsyncFunction();\n\n        if (this.match(types._function) || isAsync) {\n          this.next();\n\n          if (isAsync) {\n            this.next();\n          }\n\n          return this.parseFunction(expr, FUNC_STATEMENT | FUNC_NULLABLE_ID, isAsync);\n        } else if (this.match(types._class)) {\n          return this.parseClass(expr, true, true);\n        } else if (this.match(types.at)) {\n          if (this.hasPlugin(\"decorators\") && this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n            this.raise(this.state.start, \"Decorators must be placed *before* the 'export' keyword.\" + \" You can set the 'decoratorsBeforeExport' option to false to use\" + \" the 'export @decorator class {}' syntax\");\n          }\n\n          this.parseDecorators(false);\n          return this.parseClass(expr, true, true);\n        } else if (this.match(types._const) || this.match(types._var) || this.isLet()) {\n          throw this.raise(this.state.start, \"Only expressions, functions or classes are allowed as the `default` export.\");\n        } else {\n          var res = this.parseMaybeAssign();\n          this.semicolon();\n          return res;\n        }\n      }\n    }, {\n      key: \"parseExportDeclaration\",\n      value: function parseExportDeclaration(node) {\n        return this.parseStatement(null);\n      }\n    }, {\n      key: \"isExportDefaultSpecifier\",\n      value: function isExportDefaultSpecifier() {\n        if (this.match(types.name)) {\n          return this.state.value !== \"async\" && this.state.value !== \"let\";\n        }\n\n        if (!this.match(types._default)) {\n          return false;\n        }\n\n        var next = this.nextTokenStart();\n        return this.input.charCodeAt(next) === 44 || this.isUnparsedContextual(next, \"from\");\n      }\n    }, {\n      key: \"parseExportFrom\",\n      value: function parseExportFrom(node, expect) {\n        if (this.eatContextual(\"from\")) {\n          node.source = this.parseImportSource();\n          this.checkExport(node);\n        } else {\n          if (expect) {\n            this.unexpected();\n          } else {\n            node.source = null;\n          }\n        }\n\n        this.semicolon();\n      }\n    }, {\n      key: \"shouldParseExportDeclaration\",\n      value: function shouldParseExportDeclaration() {\n        if (this.match(types.at)) {\n          this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n          if (this.hasPlugin(\"decorators\")) {\n            if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n              this.unexpected(this.state.start, \"Decorators must be placed *before* the 'export' keyword.\" + \" You can set the 'decoratorsBeforeExport' option to false to use\" + \" the 'export @decorator class {}' syntax\");\n            } else {\n              return true;\n            }\n          }\n        }\n\n        return this.state.type.keyword === \"var\" || this.state.type.keyword === \"const\" || this.state.type.keyword === \"function\" || this.state.type.keyword === \"class\" || this.isLet() || this.isAsyncFunction();\n      }\n    }, {\n      key: \"checkExport\",\n      value: function checkExport(node, checkNames, isDefault, isFrom) {\n        if (checkNames) {\n          if (isDefault) {\n            this.checkDuplicateExports(node, \"default\");\n          } else if (node.specifiers && node.specifiers.length) {\n            for (var _i3 = 0, _node$specifiers = node.specifiers; _i3 < _node$specifiers.length; _i3++) {\n              var specifier = _node$specifiers[_i3];\n              this.checkDuplicateExports(specifier, specifier.exported.name);\n\n              if (!isFrom && specifier.local) {\n                this.checkReservedWord(specifier.local.name, specifier.local.start, true, false);\n                this.scope.checkLocalExport(specifier.local);\n              }\n            }\n          } else if (node.declaration) {\n            if (node.declaration.type === \"FunctionDeclaration\" || node.declaration.type === \"ClassDeclaration\") {\n              var id = node.declaration.id;\n              if (!id) throw new Error(\"Assertion failure\");\n              this.checkDuplicateExports(node, id.name);\n            } else if (node.declaration.type === \"VariableDeclaration\") {\n              for (var _i4 = 0, _node$declaration$dec = node.declaration.declarations; _i4 < _node$declaration$dec.length; _i4++) {\n                var declaration = _node$declaration$dec[_i4];\n                this.checkDeclaration(declaration.id);\n              }\n            }\n          }\n        }\n\n        var currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n        if (currentContextDecorators.length) {\n          var isClass = node.declaration && (node.declaration.type === \"ClassDeclaration\" || node.declaration.type === \"ClassExpression\");\n\n          if (!node.declaration || !isClass) {\n            throw this.raise(node.start, \"You can only use decorators on an export when exporting a class\");\n          }\n\n          this.takeDecorators(node.declaration);\n        }\n      }\n    }, {\n      key: \"checkDeclaration\",\n      value: function checkDeclaration(node) {\n        if (node.type === \"Identifier\") {\n          this.checkDuplicateExports(node, node.name);\n        } else if (node.type === \"ObjectPattern\") {\n          for (var _i5 = 0, _node$properties = node.properties; _i5 < _node$properties.length; _i5++) {\n            var prop = _node$properties[_i5];\n            this.checkDeclaration(prop);\n          }\n        } else if (node.type === \"ArrayPattern\") {\n          for (var _i6 = 0, _node$elements = node.elements; _i6 < _node$elements.length; _i6++) {\n            var elem = _node$elements[_i6];\n\n            if (elem) {\n              this.checkDeclaration(elem);\n            }\n          }\n        } else if (node.type === \"ObjectProperty\") {\n          this.checkDeclaration(node.value);\n        } else if (node.type === \"RestElement\") {\n          this.checkDeclaration(node.argument);\n        } else if (node.type === \"AssignmentPattern\") {\n          this.checkDeclaration(node.left);\n        }\n      }\n    }, {\n      key: \"checkDuplicateExports\",\n      value: function checkDuplicateExports(node, name) {\n        if (this.state.exportedIdentifiers.indexOf(name) > -1) {\n          this.raise(node.start, name === \"default\" ? \"Only one default export allowed per module.\" : \"`\" + name + \"` has already been exported. Exported identifiers must be unique.\");\n        }\n\n        this.state.exportedIdentifiers.push(name);\n      }\n    }, {\n      key: \"parseExportSpecifiers\",\n      value: function parseExportSpecifiers() {\n        var nodes = [];\n        var first = true;\n        this.expect(types.braceL);\n\n        while (!this.eat(types.braceR)) {\n          if (first) {\n            first = false;\n          } else {\n            this.expect(types.comma);\n            if (this.eat(types.braceR)) break;\n          }\n\n          var node = this.startNode();\n          node.local = this.parseIdentifier(true);\n          node.exported = this.eatContextual(\"as\") ? this.parseIdentifier(true) : node.local.__clone();\n          nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n        }\n\n        return nodes;\n      }\n    }, {\n      key: \"parseImport\",\n      value: function parseImport(node) {\n        node.specifiers = [];\n\n        if (!this.match(types.string)) {\n          var hasDefault = this.maybeParseDefaultImportSpecifier(node);\n          var parseNext = !hasDefault || this.eat(types.comma);\n          var hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n          if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n          this.expectContextual(\"from\");\n        }\n\n        node.source = this.parseImportSource();\n        this.semicolon();\n        return this.finishNode(node, \"ImportDeclaration\");\n      }\n    }, {\n      key: \"parseImportSource\",\n      value: function parseImportSource() {\n        if (!this.match(types.string)) this.unexpected();\n        return this.parseExprAtom();\n      }\n    }, {\n      key: \"shouldParseDefaultImport\",\n      value: function shouldParseDefaultImport(node) {\n        return this.match(types.name);\n      }\n    }, {\n      key: \"parseImportSpecifierLocal\",\n      value: function parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n        specifier.local = this.parseIdentifier();\n        this.checkLVal(specifier.local, BIND_LEXICAL, undefined, contextDescription);\n        node.specifiers.push(this.finishNode(specifier, type));\n      }\n    }, {\n      key: \"maybeParseDefaultImportSpecifier\",\n      value: function maybeParseDefaultImportSpecifier(node) {\n        if (this.shouldParseDefaultImport(node)) {\n          this.parseImportSpecifierLocal(node, this.startNode(), \"ImportDefaultSpecifier\", \"default import specifier\");\n          return true;\n        }\n\n        return false;\n      }\n    }, {\n      key: \"maybeParseStarImportSpecifier\",\n      value: function maybeParseStarImportSpecifier(node) {\n        if (this.match(types.star)) {\n          var specifier = this.startNode();\n          this.next();\n          this.expectContextual(\"as\");\n          this.parseImportSpecifierLocal(node, specifier, \"ImportNamespaceSpecifier\", \"import namespace specifier\");\n          return true;\n        }\n\n        return false;\n      }\n    }, {\n      key: \"parseNamedImportSpecifiers\",\n      value: function parseNamedImportSpecifiers(node) {\n        var first = true;\n        this.expect(types.braceL);\n\n        while (!this.eat(types.braceR)) {\n          if (first) {\n            first = false;\n          } else {\n            if (this.eat(types.colon)) {\n              throw this.raise(this.state.start, \"ES2015 named imports do not destructure. \" + \"Use another statement for destructuring after the import.\");\n            }\n\n            this.expect(types.comma);\n            if (this.eat(types.braceR)) break;\n          }\n\n          this.parseImportSpecifier(node);\n        }\n      }\n    }, {\n      key: \"parseImportSpecifier\",\n      value: function parseImportSpecifier(node) {\n        var specifier = this.startNode();\n        specifier.imported = this.parseIdentifier(true);\n\n        if (this.eatContextual(\"as\")) {\n          specifier.local = this.parseIdentifier();\n        } else {\n          this.checkReservedWord(specifier.imported.name, specifier.start, true, true);\n          specifier.local = specifier.imported.__clone();\n        }\n\n        this.checkLVal(specifier.local, BIND_LEXICAL, undefined, \"import specifier\");\n        node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n      }\n    }]);\n\n    return StatementParser;\n  }(ExpressionParser);\n\n  var Parser = function (_StatementParser) {\n    _inherits(Parser, _StatementParser);\n\n    function Parser(options, input) {\n      var _this45;\n\n      _classCallCheck(this, Parser);\n\n      options = getOptions(options);\n      _this45 = _possibleConstructorReturn(this, _getPrototypeOf(Parser).call(this, options, input));\n\n      var ScopeHandler = _this45.getScopeHandler();\n\n      _this45.options = options;\n      _this45.inModule = _this45.options.sourceType === \"module\";\n      _this45.scope = new ScopeHandler(_this45.raise.bind(_assertThisInitialized(_this45)), _this45.inModule);\n      _this45.plugins = pluginsMap(_this45.options.plugins);\n      _this45.filename = options.sourceFilename;\n      return _this45;\n    }\n\n    _createClass(Parser, [{\n      key: \"getScopeHandler\",\n      value: function getScopeHandler() {\n        return ScopeHandler;\n      }\n    }, {\n      key: \"parse\",\n      value: function parse() {\n        this.scope.enter(SCOPE_PROGRAM);\n        var file = this.startNode();\n        var program = this.startNode();\n        this.nextToken();\n        file.errors = null;\n        this.parseTopLevel(file, program);\n        file.errors = this.state.errors;\n        return file;\n      }\n    }]);\n\n    return Parser;\n  }(StatementParser);\n\n  function pluginsMap(plugins) {\n    var pluginMap = new Map();\n\n    for (var _i = 0; _i < plugins.length; _i++) {\n      var plugin = plugins[_i];\n\n      var _ref16 = Array.isArray(plugin) ? plugin : [plugin, {}],\n          _ref17 = _slicedToArray(_ref16, 2),\n          name = _ref17[0],\n          options = _ref17[1];\n\n      if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n    }\n\n    return pluginMap;\n  }\n\n  function parse(input, options) {\n    if (options && options.sourceType === \"unambiguous\") {\n      options = _extends({}, options);\n\n      try {\n        options.sourceType = \"module\";\n        var parser = getParser(options, input);\n        var ast = parser.parse();\n\n        if (parser.sawUnambiguousESM) {\n          return ast;\n        }\n\n        if (parser.ambiguousScriptDifferentAst) {\n          try {\n            options.sourceType = \"script\";\n            return getParser(options, input).parse();\n          } catch (_unused) {}\n        } else {\n          ast.program.sourceType = \"script\";\n        }\n\n        return ast;\n      } catch (moduleError) {\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch (_unused2) {}\n\n        throw moduleError;\n      }\n    } else {\n      return getParser(options, input).parse();\n    }\n  }\n\n  function parseExpression(input, options) {\n    var parser = getParser(options, input);\n\n    if (parser.options.strictMode) {\n      parser.state.strict = true;\n    }\n\n    return parser.getExpression();\n  }\n\n  function getParser(options, input) {\n    var cls = Parser;\n\n    if (options && options.plugins) {\n      validatePlugins(options.plugins);\n      cls = getParserClass(options.plugins);\n    }\n\n    return new cls(options, input);\n  }\n\n  var parserClassCache = {};\n\n  function getParserClass(pluginsFromOptions) {\n    var pluginList = mixinPluginNames.filter(function (name) {\n      return hasPlugin(pluginsFromOptions, name);\n    });\n    var key = pluginList.join(\"/\");\n    var cls = parserClassCache[key];\n\n    if (!cls) {\n      cls = Parser;\n\n      for (var _i = 0; _i < pluginList.length; _i++) {\n        var plugin = pluginList[_i];\n        cls = mixinPlugins[plugin](cls);\n      }\n\n      parserClassCache[key] = cls;\n    }\n\n    return cls;\n  }\n\n  exports.parse = parse;\n  exports.parseExpression = parseExpression;\n  exports.tokTypes = types;\n});","map":[[2,0,1,0],[24,0,3,0,"Object"],[24,2,3,0,"Object"],[24,8,3,6],[24,9,3,7,"defineProperty"],[24,23,3,0],[24,24,3,22,"exports"],[24,31,3,0],[24,33,3,31],[24,45,3,0],[24,47,3,45],[25,0,3,47,"value"],[25,4,3,47,"value"],[25,9,3,52],[25,11,3,54],[26,0,3,45],[26,3,3,0],[27,0,5,0],[27,6,5,6,"beforeExpr"],[27,16,5,16],[27,19,5,19],[27,23,5,0],[28,0,6,0],[28,6,6,6,"startsExpr"],[28,16,6,16],[28,19,6,19],[28,23,6,0],[29,0,7,0],[29,6,7,6,"isLoop"],[29,12,7,12],[29,15,7,15],[29,19,7,0],[30,0,8,0],[30,6,8,6,"isAssign"],[30,14,8,14],[30,17,8,17],[30,21,8,0],[31,0,9,0],[31,6,9,6,"prefix"],[31,12,9,12],[31,15,9,15],[31,19,9,0],[32,0,10,0],[32,6,10,6,"postfix"],[32,13,10,13],[32,16,10,16],[32,20,10,0],[34,6,11,6,"TokenType"],[34,15],[34,18,12,2],[34,37,12,14,"label"],[34,42,12,2],[34,44,12,32],[35,0,12,32],[35,8,12,21,"conf"],[35,12,12,32],[35,83,12,28],[35,85,12,32],[37,0,12,32],[39,0,13,4],[39,9,13,9,"label"],[39,14,13,4],[39,17,13,17,"label"],[39,22,13,4],[40,0,14,4],[40,9,14,9,"keyword"],[40,16,14,4],[40,19,14,19,"conf"],[40,23,14,23],[40,24,14,24,"keyword"],[40,31,14,4],[41,0,15,4],[41,9,15,9,"beforeExpr"],[41,19,15,4],[41,22,15,22],[41,23,15,23],[41,24,15,24,"conf"],[41,28,15,28],[41,29,15,29,"beforeExpr"],[41,39,15,4],[42,0,16,4],[42,9,16,9,"startsExpr"],[42,19,16,4],[42,22,16,22],[42,23,16,23],[42,24,16,24,"conf"],[42,28,16,28],[42,29,16,29,"startsExpr"],[42,39,16,4],[43,0,17,4],[43,9,17,9,"rightAssociative"],[43,25,17,4],[43,28,17,28],[43,29,17,29],[43,30,17,30,"conf"],[43,34,17,34],[43,35,17,35,"rightAssociative"],[43,51,17,4],[44,0,18,4],[44,9,18,9,"isLoop"],[44,15,18,4],[44,18,18,18],[44,19,18,19],[44,20,18,20,"conf"],[44,24,18,24],[44,25,18,25,"isLoop"],[44,31,18,4],[45,0,19,4],[45,9,19,9,"isAssign"],[45,17,19,4],[45,20,19,20],[45,21,19,21],[45,22,19,22,"conf"],[45,26,19,26],[45,27,19,27,"isAssign"],[45,35,19,4],[46,0,20,4],[46,9,20,9,"prefix"],[46,15,20,4],[46,18,20,18],[46,19,20,19],[46,20,20,20,"conf"],[46,24,20,24],[46,25,20,25,"prefix"],[46,31,20,4],[47,0,21,4],[47,9,21,9,"postfix"],[47,16,21,4],[47,19,21,19],[47,20,21,20],[47,21,21,21,"conf"],[47,25,21,25],[47,26,21,26,"postfix"],[47,33,21,4],[48,0,22,4],[48,9,22,9,"binop"],[48,14,22,4],[48,17,22,17,"conf"],[48,21,22,21],[48,22,22,22,"binop"],[48,27,22,17],[48,31,22,31],[48,35,22,17],[48,38,22,38,"conf"],[48,42,22,42],[48,43,22,43,"binop"],[48,48,22,17],[48,51,22,51],[48,55,22,4],[49,0,23,4],[49,9,23,9,"updateContext"],[49,22,23,4],[49,25,23,25],[49,29,23,4],[50,0,24,3],[50,3],[52,0,27,0],[52,6,27,6,"keywords"],[52,14,27,14],[52,17,27,17],[52,21,27,21,"Map"],[52,24,27,17],[52,26,27,0],[54,0,29,0],[54,11,29,9,"createKeyword"],[54,24,29,0],[54,25,29,23,"name"],[54,29,29,0],[54,31,29,43],[55,0,29,43],[55,8,29,29,"options"],[55,15,29,43],[55,86,29,39],[55,88,29,43],[56,0,30,2,"options"],[56,4,30,2,"options"],[56,11,30,9],[56,12,30,10,"keyword"],[56,19,30,2],[56,22,30,20,"name"],[56,26,30,2],[57,0,31,2],[57,8,31,8,"token"],[57,13,31,13],[57,16,31,16],[57,20,31,20,"TokenType"],[57,29,31,16],[57,30,31,30,"name"],[57,34,31,16],[57,36,31,36,"options"],[57,43,31,16],[57,44,31,2],[58,0,32,2,"keywords"],[58,4,32,2,"keywords"],[58,12,32,10],[58,13,32,11,"set"],[58,16,32,2],[58,17,32,15,"name"],[58,21,32,2],[58,23,32,21,"token"],[58,28,32,2],[59,0,33,2],[59,11,33,9,"token"],[59,16,33,2],[60,0,34,1],[62,0,36,0],[62,11,36,9,"createBinop"],[62,22,36,0],[62,23,36,21,"name"],[62,27,36,0],[62,29,36,27,"binop"],[62,34,36,0],[62,36,36,34],[63,0,37,2],[63,11,37,9],[63,15,37,13,"TokenType"],[63,24,37,9],[63,25,37,23,"name"],[63,29,37,9],[63,31,37,29],[64,0,38,4,"beforeExpr"],[64,6,38,4,"beforeExpr"],[64,16,38,14],[64,18,38,4,"beforeExpr"],[64,28,37,29],[65,0,39,4,"binop"],[65,6,39,4,"binop"],[65,11,39,9],[65,13,39,4,"binop"],[66,0,37,29],[66,5,37,9],[66,6,37,2],[67,0,41,1],[69,0,43,0],[69,6,43,6,"types"],[69,11,43,11],[69,14,43,14],[70,0,44,2,"num"],[70,4,44,2,"num"],[70,7,44,5],[70,9,44,7],[70,13,44,11,"TokenType"],[70,22,44,7],[70,23,44,21],[70,28,44,7],[70,30,44,28],[71,0,45,4,"startsExpr"],[71,6,45,4,"startsExpr"],[71,16,45,14],[71,18,45,4,"startsExpr"],[72,0,44,28],[72,5,44,7],[72,6,43,14],[73,0,47,2,"bigint"],[73,4,47,2,"bigint"],[73,10,47,8],[73,12,47,10],[73,16,47,14,"TokenType"],[73,25,47,10],[73,26,47,24],[73,34,47,10],[73,36,47,34],[74,0,48,4,"startsExpr"],[74,6,48,4,"startsExpr"],[74,16,48,14],[74,18,48,4,"startsExpr"],[75,0,47,34],[75,5,47,10],[75,6,43,14],[76,0,50,2,"regexp"],[76,4,50,2,"regexp"],[76,10,50,8],[76,12,50,10],[76,16,50,14,"TokenType"],[76,25,50,10],[76,26,50,24],[76,34,50,10],[76,36,50,34],[77,0,51,4,"startsExpr"],[77,6,51,4,"startsExpr"],[77,16,51,14],[77,18,51,4,"startsExpr"],[78,0,50,34],[78,5,50,10],[78,6,43,14],[79,0,53,2,"string"],[79,4,53,2,"string"],[79,10,53,8],[79,12,53,10],[79,16,53,14,"TokenType"],[79,25,53,10],[79,26,53,24],[79,34,53,10],[79,36,53,34],[80,0,54,4,"startsExpr"],[80,6,54,4,"startsExpr"],[80,16,54,14],[80,18,54,4,"startsExpr"],[81,0,53,34],[81,5,53,10],[81,6,43,14],[82,0,56,2,"name"],[82,4,56,2,"name"],[82,8,56,6],[82,10,56,8],[82,14,56,12,"TokenType"],[82,23,56,8],[82,24,56,22],[82,30,56,8],[82,32,56,30],[83,0,57,4,"startsExpr"],[83,6,57,4,"startsExpr"],[83,16,57,14],[83,18,57,4,"startsExpr"],[84,0,56,30],[84,5,56,8],[84,6,43,14],[85,0,59,2,"eof"],[85,4,59,2,"eof"],[85,7,59,5],[85,9,59,7],[85,13,59,11,"TokenType"],[85,22,59,7],[85,23,59,21],[85,28,59,7],[85,29,43,14],[86,0,60,2,"bracketL"],[86,4,60,2,"bracketL"],[86,12,60,10],[86,14,60,12],[86,18,60,16,"TokenType"],[86,27,60,12],[86,28,60,26],[86,31,60,12],[86,33,60,31],[87,0,61,4,"beforeExpr"],[87,6,61,4,"beforeExpr"],[87,16,61,14],[87,18,61,4,"beforeExpr"],[87,28,60,31],[88,0,62,4,"startsExpr"],[88,6,62,4,"startsExpr"],[88,16,62,14],[88,18,62,4,"startsExpr"],[89,0,60,31],[89,5,60,12],[89,6,43,14],[90,0,64,2,"bracketR"],[90,4,64,2,"bracketR"],[90,12,64,10],[90,14,64,12],[90,18,64,16,"TokenType"],[90,27,64,12],[90,28,64,26],[90,31,64,12],[90,32,43,14],[91,0,65,2,"braceL"],[91,4,65,2,"braceL"],[91,10,65,8],[91,12,65,10],[91,16,65,14,"TokenType"],[91,25,65,10],[91,26,65,24],[91,29,65,10],[91,31,65,29],[92,0,66,4,"beforeExpr"],[92,6,66,4,"beforeExpr"],[92,16,66,14],[92,18,66,4,"beforeExpr"],[92,28,65,29],[93,0,67,4,"startsExpr"],[93,6,67,4,"startsExpr"],[93,16,67,14],[93,18,67,4,"startsExpr"],[94,0,65,29],[94,5,65,10],[94,6,43,14],[95,0,69,2,"braceBarL"],[95,4,69,2,"braceBarL"],[95,13,69,11],[95,15,69,13],[95,19,69,17,"TokenType"],[95,28,69,13],[95,29,69,27],[95,33,69,13],[95,35,69,33],[96,0,70,4,"beforeExpr"],[96,6,70,4,"beforeExpr"],[96,16,70,14],[96,18,70,4,"beforeExpr"],[96,28,69,33],[97,0,71,4,"startsExpr"],[97,6,71,4,"startsExpr"],[97,16,71,14],[97,18,71,4,"startsExpr"],[98,0,69,33],[98,5,69,13],[98,6,43,14],[99,0,73,2,"braceR"],[99,4,73,2,"braceR"],[99,10,73,8],[99,12,73,10],[99,16,73,14,"TokenType"],[99,25,73,10],[99,26,73,24],[99,29,73,10],[99,30,43,14],[100,0,74,2,"braceBarR"],[100,4,74,2,"braceBarR"],[100,13,74,11],[100,15,74,13],[100,19,74,17,"TokenType"],[100,28,74,13],[100,29,74,27],[100,33,74,13],[100,34,43,14],[101,0,75,2,"parenL"],[101,4,75,2,"parenL"],[101,10,75,8],[101,12,75,10],[101,16,75,14,"TokenType"],[101,25,75,10],[101,26,75,24],[101,29,75,10],[101,31,75,29],[102,0,76,4,"beforeExpr"],[102,6,76,4,"beforeExpr"],[102,16,76,14],[102,18,76,4,"beforeExpr"],[102,28,75,29],[103,0,77,4,"startsExpr"],[103,6,77,4,"startsExpr"],[103,16,77,14],[103,18,77,4,"startsExpr"],[104,0,75,29],[104,5,75,10],[104,6,43,14],[105,0,79,2,"parenR"],[105,4,79,2,"parenR"],[105,10,79,8],[105,12,79,10],[105,16,79,14,"TokenType"],[105,25,79,10],[105,26,79,24],[105,29,79,10],[105,30,43,14],[106,0,80,2,"comma"],[106,4,80,2,"comma"],[106,9,80,7],[106,11,80,9],[106,15,80,13,"TokenType"],[106,24,80,9],[106,25,80,23],[106,28,80,9],[106,30,80,28],[107,0,81,4,"beforeExpr"],[107,6,81,4,"beforeExpr"],[107,16,81,14],[107,18,81,4,"beforeExpr"],[108,0,80,28],[108,5,80,9],[108,6,43,14],[109,0,83,2,"semi"],[109,4,83,2,"semi"],[109,8,83,6],[109,10,83,8],[109,14,83,12,"TokenType"],[109,23,83,8],[109,24,83,22],[109,27,83,8],[109,29,83,27],[110,0,84,4,"beforeExpr"],[110,6,84,4,"beforeExpr"],[110,16,84,14],[110,18,84,4,"beforeExpr"],[111,0,83,27],[111,5,83,8],[111,6,43,14],[112,0,86,2,"colon"],[112,4,86,2,"colon"],[112,9,86,7],[112,11,86,9],[112,15,86,13,"TokenType"],[112,24,86,9],[112,25,86,23],[112,28,86,9],[112,30,86,28],[113,0,87,4,"beforeExpr"],[113,6,87,4,"beforeExpr"],[113,16,87,14],[113,18,87,4,"beforeExpr"],[114,0,86,28],[114,5,86,9],[114,6,43,14],[115,0,89,2,"doubleColon"],[115,4,89,2,"doubleColon"],[115,15,89,13],[115,17,89,15],[115,21,89,19,"TokenType"],[115,30,89,15],[115,31,89,29],[115,35,89,15],[115,37,89,35],[116,0,90,4,"beforeExpr"],[116,6,90,4,"beforeExpr"],[116,16,90,14],[116,18,90,4,"beforeExpr"],[117,0,89,35],[117,5,89,15],[117,6,43,14],[118,0,92,2,"dot"],[118,4,92,2,"dot"],[118,7,92,5],[118,9,92,7],[118,13,92,11,"TokenType"],[118,22,92,7],[118,23,92,21],[118,26,92,7],[118,27,43,14],[119,0,93,2,"question"],[119,4,93,2,"question"],[119,12,93,10],[119,14,93,12],[119,18,93,16,"TokenType"],[119,27,93,12],[119,28,93,26],[119,31,93,12],[119,33,93,31],[120,0,94,4,"beforeExpr"],[120,6,94,4,"beforeExpr"],[120,16,94,14],[120,18,94,4,"beforeExpr"],[121,0,93,31],[121,5,93,12],[121,6,43,14],[122,0,96,2,"questionDot"],[122,4,96,2,"questionDot"],[122,15,96,13],[122,17,96,15],[122,21,96,19,"TokenType"],[122,30,96,15],[122,31,96,29],[122,35,96,15],[122,36,43,14],[123,0,97,2,"arrow"],[123,4,97,2,"arrow"],[123,9,97,7],[123,11,97,9],[123,15,97,13,"TokenType"],[123,24,97,9],[123,25,97,23],[123,29,97,9],[123,31,97,29],[124,0,98,4,"beforeExpr"],[124,6,98,4,"beforeExpr"],[124,16,98,14],[124,18,98,4,"beforeExpr"],[125,0,97,29],[125,5,97,9],[125,6,43,14],[126,0,100,2,"template"],[126,4,100,2,"template"],[126,12,100,10],[126,14,100,12],[126,18,100,16,"TokenType"],[126,27,100,12],[126,28,100,26],[126,38,100,12],[126,39,43,14],[127,0,101,2,"ellipsis"],[127,4,101,2,"ellipsis"],[127,12,101,10],[127,14,101,12],[127,18,101,16,"TokenType"],[127,27,101,12],[127,28,101,26],[127,33,101,12],[127,35,101,33],[128,0,102,4,"beforeExpr"],[128,6,102,4,"beforeExpr"],[128,16,102,14],[128,18,102,4,"beforeExpr"],[129,0,101,33],[129,5,101,12],[129,6,43,14],[130,0,104,2,"backQuote"],[130,4,104,2,"backQuote"],[130,13,104,11],[130,15,104,13],[130,19,104,17,"TokenType"],[130,28,104,13],[130,29,104,27],[130,32,104,13],[130,34,104,32],[131,0,105,4,"startsExpr"],[131,6,105,4,"startsExpr"],[131,16,105,14],[131,18,105,4,"startsExpr"],[132,0,104,32],[132,5,104,13],[132,6,43,14],[133,0,107,2,"dollarBraceL"],[133,4,107,2,"dollarBraceL"],[133,16,107,14],[133,18,107,16],[133,22,107,20,"TokenType"],[133,31,107,16],[133,32,107,30],[133,36,107,16],[133,38,107,36],[134,0,108,4,"beforeExpr"],[134,6,108,4,"beforeExpr"],[134,16,108,14],[134,18,108,4,"beforeExpr"],[134,28,107,36],[135,0,109,4,"startsExpr"],[135,6,109,4,"startsExpr"],[135,16,109,14],[135,18,109,4,"startsExpr"],[136,0,107,36],[136,5,107,16],[136,6,43,14],[137,0,111,2,"at"],[137,4,111,2,"at"],[137,6,111,4],[137,8,111,6],[137,12,111,10,"TokenType"],[137,21,111,6],[137,22,111,20],[137,25,111,6],[137,26,43,14],[138,0,112,2,"hash"],[138,4,112,2,"hash"],[138,8,112,6],[138,10,112,8],[138,14,112,12,"TokenType"],[138,23,112,8],[138,24,112,22],[138,27,112,8],[138,29,112,27],[139,0,113,4,"startsExpr"],[139,6,113,4,"startsExpr"],[139,16,113,14],[139,18,113,4,"startsExpr"],[140,0,112,27],[140,5,112,8],[140,6,43,14],[141,0,115,2,"interpreterDirective"],[141,4,115,2,"interpreterDirective"],[141,24,115,22],[141,26,115,24],[141,30,115,28,"TokenType"],[141,39,115,24],[141,40,115,38],[141,47,115,24],[141,48,43,14],[142,0,116,2,"eq"],[142,4,116,2,"eq"],[142,6,116,4],[142,8,116,6],[142,12,116,10,"TokenType"],[142,21,116,6],[142,22,116,20],[142,25,116,6],[142,27,116,25],[143,0,117,4,"beforeExpr"],[143,6,117,4,"beforeExpr"],[143,16,117,14],[143,18,117,4,"beforeExpr"],[143,28,116,25],[144,0,118,4,"isAssign"],[144,6,118,4,"isAssign"],[144,14,118,12],[144,16,118,4,"isAssign"],[145,0,116,25],[145,5,116,6],[145,6,43,14],[146,0,120,2,"assign"],[146,4,120,2,"assign"],[146,10,120,8],[146,12,120,10],[146,16,120,14,"TokenType"],[146,25,120,10],[146,26,120,24],[146,30,120,10],[146,32,120,30],[147,0,121,4,"beforeExpr"],[147,6,121,4,"beforeExpr"],[147,16,121,14],[147,18,121,4,"beforeExpr"],[147,28,120,30],[148,0,122,4,"isAssign"],[148,6,122,4,"isAssign"],[148,14,122,12],[148,16,122,4,"isAssign"],[149,0,120,30],[149,5,120,10],[149,6,43,14],[150,0,124,2,"incDec"],[150,4,124,2,"incDec"],[150,10,124,8],[150,12,124,10],[150,16,124,14,"TokenType"],[150,25,124,10],[150,26,124,24],[150,33,124,10],[150,35,124,33],[151,0,125,4,"prefix"],[151,6,125,4,"prefix"],[151,12,125,10],[151,14,125,4,"prefix"],[151,20,124,33],[152,0,126,4,"postfix"],[152,6,126,4,"postfix"],[152,13,126,11],[152,15,126,4,"postfix"],[152,22,124,33],[153,0,127,4,"startsExpr"],[153,6,127,4,"startsExpr"],[153,16,127,14],[153,18,127,4,"startsExpr"],[154,0,124,33],[154,5,124,10],[154,6,43,14],[155,0,129,2,"bang"],[155,4,129,2,"bang"],[155,8,129,6],[155,10,129,8],[155,14,129,12,"TokenType"],[155,23,129,8],[155,24,129,22],[155,27,129,8],[155,29,129,27],[156,0,130,4,"beforeExpr"],[156,6,130,4,"beforeExpr"],[156,16,130,14],[156,18,130,4,"beforeExpr"],[156,28,129,27],[157,0,131,4,"prefix"],[157,6,131,4,"prefix"],[157,12,131,10],[157,14,131,4,"prefix"],[157,20,129,27],[158,0,132,4,"startsExpr"],[158,6,132,4,"startsExpr"],[158,16,132,14],[158,18,132,4,"startsExpr"],[159,0,129,27],[159,5,129,8],[159,6,43,14],[160,0,134,2,"tilde"],[160,4,134,2,"tilde"],[160,9,134,7],[160,11,134,9],[160,15,134,13,"TokenType"],[160,24,134,9],[160,25,134,23],[160,28,134,9],[160,30,134,28],[161,0,135,4,"beforeExpr"],[161,6,135,4,"beforeExpr"],[161,16,135,14],[161,18,135,4,"beforeExpr"],[161,28,134,28],[162,0,136,4,"prefix"],[162,6,136,4,"prefix"],[162,12,136,10],[162,14,136,4,"prefix"],[162,20,134,28],[163,0,137,4,"startsExpr"],[163,6,137,4,"startsExpr"],[163,16,137,14],[163,18,137,4,"startsExpr"],[164,0,134,28],[164,5,134,9],[164,6,43,14],[165,0,139,2,"pipeline"],[165,4,139,2,"pipeline"],[165,12,139,10],[165,14,139,12,"createBinop"],[165,25,139,23],[165,26,139,24],[165,30,139,23],[165,32,139,30],[165,33,139,23],[165,34,43,14],[166,0,140,2,"nullishCoalescing"],[166,4,140,2,"nullishCoalescing"],[166,21,140,19],[166,23,140,21,"createBinop"],[166,34,140,32],[166,35,140,33],[166,39,140,32],[166,41,140,39],[166,42,140,32],[166,43,43,14],[167,0,141,2,"logicalOR"],[167,4,141,2,"logicalOR"],[167,13,141,11],[167,15,141,13,"createBinop"],[167,26,141,24],[167,27,141,25],[167,31,141,24],[167,33,141,31],[167,34,141,24],[167,35,43,14],[168,0,142,2,"logicalAND"],[168,4,142,2,"logicalAND"],[168,14,142,12],[168,16,142,14,"createBinop"],[168,27,142,25],[168,28,142,26],[168,32,142,25],[168,34,142,32],[168,35,142,25],[168,36,43,14],[169,0,143,2,"bitwiseOR"],[169,4,143,2,"bitwiseOR"],[169,13,143,11],[169,15,143,13,"createBinop"],[169,26,143,24],[169,27,143,25],[169,30,143,24],[169,32,143,30],[169,33,143,24],[169,34,43,14],[170,0,144,2,"bitwiseXOR"],[170,4,144,2,"bitwiseXOR"],[170,14,144,12],[170,16,144,14,"createBinop"],[170,27,144,25],[170,28,144,26],[170,31,144,25],[170,33,144,31],[170,34,144,25],[170,35,43,14],[171,0,145,2,"bitwiseAND"],[171,4,145,2,"bitwiseAND"],[171,14,145,12],[171,16,145,14,"createBinop"],[171,27,145,25],[171,28,145,26],[171,31,145,25],[171,33,145,31],[171,34,145,25],[171,35,43,14],[172,0,146,2,"equality"],[172,4,146,2,"equality"],[172,12,146,10],[172,14,146,12,"createBinop"],[172,25,146,23],[172,26,146,24],[172,41,146,23],[172,43,146,41],[172,44,146,23],[172,45,43,14],[173,0,147,2,"relational"],[173,4,147,2,"relational"],[173,14,147,12],[173,16,147,14,"createBinop"],[173,27,147,25],[173,28,147,26],[173,39,147,25],[173,41,147,39],[173,42,147,25],[173,43,43,14],[174,0,148,2,"bitShift"],[174,4,148,2,"bitShift"],[174,12,148,10],[174,14,148,12,"createBinop"],[174,25,148,23],[174,26,148,24],[174,37,148,23],[174,39,148,37],[174,40,148,23],[174,41,43,14],[175,0,149,2,"plusMin"],[175,4,149,2,"plusMin"],[175,11,149,9],[175,13,149,11],[175,17,149,15,"TokenType"],[175,26,149,11],[175,27,149,25],[175,32,149,11],[175,34,149,32],[176,0,150,4,"beforeExpr"],[176,6,150,4,"beforeExpr"],[176,16,150,14],[176,18,150,4,"beforeExpr"],[176,28,149,32],[177,0,151,4,"binop"],[177,6,151,4,"binop"],[177,11,151,9],[177,13,151,11],[177,15,149,32],[178,0,152,4,"prefix"],[178,6,152,4,"prefix"],[178,12,152,10],[178,14,152,4,"prefix"],[178,20,149,32],[179,0,153,4,"startsExpr"],[179,6,153,4,"startsExpr"],[179,16,153,14],[179,18,153,4,"startsExpr"],[180,0,149,32],[180,5,149,11],[180,6,43,14],[181,0,155,2,"modulo"],[181,4,155,2,"modulo"],[181,10,155,8],[181,12,155,10],[181,16,155,14,"TokenType"],[181,25,155,10],[181,26,155,24],[181,29,155,10],[181,31,155,29],[182,0,156,4,"beforeExpr"],[182,6,156,4,"beforeExpr"],[182,16,156,14],[182,18,156,4,"beforeExpr"],[182,28,155,29],[183,0,157,4,"binop"],[183,6,157,4,"binop"],[183,11,157,9],[183,13,157,11],[183,15,155,29],[184,0,158,4,"startsExpr"],[184,6,158,4,"startsExpr"],[184,16,158,14],[184,18,158,4,"startsExpr"],[185,0,155,29],[185,5,155,10],[185,6,43,14],[186,0,160,2,"star"],[186,4,160,2,"star"],[186,8,160,6],[186,10,160,8,"createBinop"],[186,21,160,19],[186,22,160,20],[186,25,160,19],[186,27,160,25],[186,29,160,19],[186,30,43,14],[187,0,161,2,"slash"],[187,4,161,2,"slash"],[187,9,161,7],[187,11,161,9,"createBinop"],[187,22,161,20],[187,23,161,21],[187,26,161,20],[187,28,161,26],[187,30,161,20],[187,31,43,14],[188,0,162,2,"exponent"],[188,4,162,2,"exponent"],[188,12,162,10],[188,14,162,12],[188,18,162,16,"TokenType"],[188,27,162,12],[188,28,162,26],[188,32,162,12],[188,34,162,32],[189,0,163,4,"beforeExpr"],[189,6,163,4,"beforeExpr"],[189,16,163,14],[189,18,163,4,"beforeExpr"],[189,28,162,32],[190,0,164,4,"binop"],[190,6,164,4,"binop"],[190,11,164,9],[190,13,164,11],[190,15,162,32],[191,0,165,4,"rightAssociative"],[191,6,165,4,"rightAssociative"],[191,22,165,20],[191,24,165,22],[192,0,162,32],[192,5,162,12],[192,6,43,14],[193,0,167,2,"_break"],[193,4,167,2,"_break"],[193,10,167,8],[193,12,167,10,"createKeyword"],[193,25,167,23],[193,26,167,24],[193,33,167,23],[193,34,43,14],[194,0,168,2,"_case"],[194,4,168,2,"_case"],[194,9,168,7],[194,11,168,9,"createKeyword"],[194,24,168,22],[194,25,168,23],[194,31,168,22],[194,33,168,31],[195,0,169,4,"beforeExpr"],[195,6,169,4,"beforeExpr"],[195,16,169,14],[195,18,169,4,"beforeExpr"],[196,0,168,31],[196,5,168,22],[196,6,43,14],[197,0,171,2,"_catch"],[197,4,171,2,"_catch"],[197,10,171,8],[197,12,171,10,"createKeyword"],[197,25,171,23],[197,26,171,24],[197,33,171,23],[197,34,43,14],[198,0,172,2,"_continue"],[198,4,172,2,"_continue"],[198,13,172,11],[198,15,172,13,"createKeyword"],[198,28,172,26],[198,29,172,27],[198,39,172,26],[198,40,43,14],[199,0,173,2,"_debugger"],[199,4,173,2,"_debugger"],[199,13,173,11],[199,15,173,13,"createKeyword"],[199,28,173,26],[199,29,173,27],[199,39,173,26],[199,40,43,14],[200,0,174,2,"_default"],[200,4,174,2,"_default"],[200,12,174,10],[200,14,174,12,"createKeyword"],[200,27,174,25],[200,28,174,26],[200,37,174,25],[200,39,174,37],[201,0,175,4,"beforeExpr"],[201,6,175,4,"beforeExpr"],[201,16,175,14],[201,18,175,4,"beforeExpr"],[202,0,174,37],[202,5,174,25],[202,6,43,14],[203,0,177,2,"_do"],[203,4,177,2,"_do"],[203,7,177,5],[203,9,177,7,"createKeyword"],[203,22,177,20],[203,23,177,21],[203,27,177,20],[203,29,177,27],[204,0,178,4,"isLoop"],[204,6,178,4,"isLoop"],[204,12,178,10],[204,14,178,4,"isLoop"],[204,20,177,27],[205,0,179,4,"beforeExpr"],[205,6,179,4,"beforeExpr"],[205,16,179,14],[205,18,179,4,"beforeExpr"],[206,0,177,27],[206,5,177,20],[206,6,43,14],[207,0,181,2,"_else"],[207,4,181,2,"_else"],[207,9,181,7],[207,11,181,9,"createKeyword"],[207,24,181,22],[207,25,181,23],[207,31,181,22],[207,33,181,31],[208,0,182,4,"beforeExpr"],[208,6,182,4,"beforeExpr"],[208,16,182,14],[208,18,182,4,"beforeExpr"],[209,0,181,31],[209,5,181,22],[209,6,43,14],[210,0,184,2,"_finally"],[210,4,184,2,"_finally"],[210,12,184,10],[210,14,184,12,"createKeyword"],[210,27,184,25],[210,28,184,26],[210,37,184,25],[210,38,43,14],[211,0,185,2,"_for"],[211,4,185,2,"_for"],[211,8,185,6],[211,10,185,8,"createKeyword"],[211,23,185,21],[211,24,185,22],[211,29,185,21],[211,31,185,29],[212,0,186,4,"isLoop"],[212,6,186,4,"isLoop"],[212,12,186,10],[212,14,186,4,"isLoop"],[213,0,185,29],[213,5,185,21],[213,6,43,14],[214,0,188,2,"_function"],[214,4,188,2,"_function"],[214,13,188,11],[214,15,188,13,"createKeyword"],[214,28,188,26],[214,29,188,27],[214,39,188,26],[214,41,188,39],[215,0,189,4,"startsExpr"],[215,6,189,4,"startsExpr"],[215,16,189,14],[215,18,189,4,"startsExpr"],[216,0,188,39],[216,5,188,26],[216,6,43,14],[217,0,191,2,"_if"],[217,4,191,2,"_if"],[217,7,191,5],[217,9,191,7,"createKeyword"],[217,22,191,20],[217,23,191,21],[217,27,191,20],[217,28,43,14],[218,0,192,2,"_return"],[218,4,192,2,"_return"],[218,11,192,9],[218,13,192,11,"createKeyword"],[218,26,192,24],[218,27,192,25],[218,35,192,24],[218,37,192,35],[219,0,193,4,"beforeExpr"],[219,6,193,4,"beforeExpr"],[219,16,193,14],[219,18,193,4,"beforeExpr"],[220,0,192,35],[220,5,192,24],[220,6,43,14],[221,0,195,2,"_switch"],[221,4,195,2,"_switch"],[221,11,195,9],[221,13,195,11,"createKeyword"],[221,26,195,24],[221,27,195,25],[221,35,195,24],[221,36,43,14],[222,0,196,2,"_throw"],[222,4,196,2,"_throw"],[222,10,196,8],[222,12,196,10,"createKeyword"],[222,25,196,23],[222,26,196,24],[222,33,196,23],[222,35,196,33],[223,0,197,4,"beforeExpr"],[223,6,197,4,"beforeExpr"],[223,16,197,14],[223,18,197,4,"beforeExpr"],[223,28,196,33],[224,0,198,4,"prefix"],[224,6,198,4,"prefix"],[224,12,198,10],[224,14,198,4,"prefix"],[224,20,196,33],[225,0,199,4,"startsExpr"],[225,6,199,4,"startsExpr"],[225,16,199,14],[225,18,199,4,"startsExpr"],[226,0,196,33],[226,5,196,23],[226,6,43,14],[227,0,201,2,"_try"],[227,4,201,2,"_try"],[227,8,201,6],[227,10,201,8,"createKeyword"],[227,23,201,21],[227,24,201,22],[227,29,201,21],[227,30,43,14],[228,0,202,2,"_var"],[228,4,202,2,"_var"],[228,8,202,6],[228,10,202,8,"createKeyword"],[228,23,202,21],[228,24,202,22],[228,29,202,21],[228,30,43,14],[229,0,203,2,"_const"],[229,4,203,2,"_const"],[229,10,203,8],[229,12,203,10,"createKeyword"],[229,25,203,23],[229,26,203,24],[229,33,203,23],[229,34,43,14],[230,0,204,2,"_while"],[230,4,204,2,"_while"],[230,10,204,8],[230,12,204,10,"createKeyword"],[230,25,204,23],[230,26,204,24],[230,33,204,23],[230,35,204,33],[231,0,205,4,"isLoop"],[231,6,205,4,"isLoop"],[231,12,205,10],[231,14,205,4,"isLoop"],[232,0,204,33],[232,5,204,23],[232,6,43,14],[233,0,207,2,"_with"],[233,4,207,2,"_with"],[233,9,207,7],[233,11,207,9,"createKeyword"],[233,24,207,22],[233,25,207,23],[233,31,207,22],[233,32,43,14],[234,0,208,2,"_new"],[234,4,208,2,"_new"],[234,8,208,6],[234,10,208,8,"createKeyword"],[234,23,208,21],[234,24,208,22],[234,29,208,21],[234,31,208,29],[235,0,209,4,"beforeExpr"],[235,6,209,4,"beforeExpr"],[235,16,209,14],[235,18,209,4,"beforeExpr"],[235,28,208,29],[236,0,210,4,"startsExpr"],[236,6,210,4,"startsExpr"],[236,16,210,14],[236,18,210,4,"startsExpr"],[237,0,208,29],[237,5,208,21],[237,6,43,14],[238,0,212,2,"_this"],[238,4,212,2,"_this"],[238,9,212,7],[238,11,212,9,"createKeyword"],[238,24,212,22],[238,25,212,23],[238,31,212,22],[238,33,212,31],[239,0,213,4,"startsExpr"],[239,6,213,4,"startsExpr"],[239,16,213,14],[239,18,213,4,"startsExpr"],[240,0,212,31],[240,5,212,22],[240,6,43,14],[241,0,215,2,"_super"],[241,4,215,2,"_super"],[241,10,215,8],[241,12,215,10,"createKeyword"],[241,25,215,23],[241,26,215,24],[241,33,215,23],[241,35,215,33],[242,0,216,4,"startsExpr"],[242,6,216,4,"startsExpr"],[242,16,216,14],[242,18,216,4,"startsExpr"],[243,0,215,33],[243,5,215,23],[243,6,43,14],[244,0,218,2,"_class"],[244,4,218,2,"_class"],[244,10,218,8],[244,12,218,10,"createKeyword"],[244,25,218,23],[244,26,218,24],[244,33,218,23],[244,35,218,33],[245,0,219,4,"startsExpr"],[245,6,219,4,"startsExpr"],[245,16,219,14],[245,18,219,4,"startsExpr"],[246,0,218,33],[246,5,218,23],[246,6,43,14],[247,0,221,2,"_extends"],[247,4,221,2,"_extends"],[247,12,221,10],[247,14,221,12,"createKeyword"],[247,27,221,25],[247,28,221,26],[247,37,221,25],[247,39,221,37],[248,0,222,4,"beforeExpr"],[248,6,222,4,"beforeExpr"],[248,16,222,14],[248,18,222,4,"beforeExpr"],[249,0,221,37],[249,5,221,25],[249,6,43,14],[250,0,224,2,"_export"],[250,4,224,2,"_export"],[250,11,224,9],[250,13,224,11,"createKeyword"],[250,26,224,24],[250,27,224,25],[250,35,224,24],[250,36,43,14],[251,0,225,2,"_import"],[251,4,225,2,"_import"],[251,11,225,9],[251,13,225,11,"createKeyword"],[251,26,225,24],[251,27,225,25],[251,35,225,24],[251,37,225,35],[252,0,226,4,"startsExpr"],[252,6,226,4,"startsExpr"],[252,16,226,14],[252,18,226,4,"startsExpr"],[253,0,225,35],[253,5,225,24],[253,6,43,14],[254,0,228,2,"_null"],[254,4,228,2,"_null"],[254,9,228,7],[254,11,228,9,"createKeyword"],[254,24,228,22],[254,25,228,23],[254,31,228,22],[254,33,228,31],[255,0,229,4,"startsExpr"],[255,6,229,4,"startsExpr"],[255,16,229,14],[255,18,229,4,"startsExpr"],[256,0,228,31],[256,5,228,22],[256,6,43,14],[257,0,231,2,"_true"],[257,4,231,2,"_true"],[257,9,231,7],[257,11,231,9,"createKeyword"],[257,24,231,22],[257,25,231,23],[257,31,231,22],[257,33,231,31],[258,0,232,4,"startsExpr"],[258,6,232,4,"startsExpr"],[258,16,232,14],[258,18,232,4,"startsExpr"],[259,0,231,31],[259,5,231,22],[259,6,43,14],[260,0,234,2,"_false"],[260,4,234,2,"_false"],[260,10,234,8],[260,12,234,10,"createKeyword"],[260,25,234,23],[260,26,234,24],[260,33,234,23],[260,35,234,33],[261,0,235,4,"startsExpr"],[261,6,235,4,"startsExpr"],[261,16,235,14],[261,18,235,4,"startsExpr"],[262,0,234,33],[262,5,234,23],[262,6,43,14],[263,0,237,2,"_in"],[263,4,237,2,"_in"],[263,7,237,5],[263,9,237,7,"createKeyword"],[263,22,237,20],[263,23,237,21],[263,27,237,20],[263,29,237,27],[264,0,238,4,"beforeExpr"],[264,6,238,4,"beforeExpr"],[264,16,238,14],[264,18,238,4,"beforeExpr"],[264,28,237,27],[265,0,239,4,"binop"],[265,6,239,4,"binop"],[265,11,239,9],[265,13,239,11],[266,0,237,27],[266,5,237,20],[266,6,43,14],[267,0,241,2,"_instanceof"],[267,4,241,2,"_instanceof"],[267,15,241,13],[267,17,241,15,"createKeyword"],[267,30,241,28],[267,31,241,29],[267,43,241,28],[267,45,241,43],[268,0,242,4,"beforeExpr"],[268,6,242,4,"beforeExpr"],[268,16,242,14],[268,18,242,4,"beforeExpr"],[268,28,241,43],[269,0,243,4,"binop"],[269,6,243,4,"binop"],[269,11,243,9],[269,13,243,11],[270,0,241,43],[270,5,241,28],[270,6,43,14],[271,0,245,2,"_typeof"],[271,4,245,2,"_typeof"],[271,11,245,9],[271,13,245,11,"createKeyword"],[271,26,245,24],[271,27,245,25],[271,35,245,24],[271,37,245,35],[272,0,246,4,"beforeExpr"],[272,6,246,4,"beforeExpr"],[272,16,246,14],[272,18,246,4,"beforeExpr"],[272,28,245,35],[273,0,247,4,"prefix"],[273,6,247,4,"prefix"],[273,12,247,10],[273,14,247,4,"prefix"],[273,20,245,35],[274,0,248,4,"startsExpr"],[274,6,248,4,"startsExpr"],[274,16,248,14],[274,18,248,4,"startsExpr"],[275,0,245,35],[275,5,245,24],[275,6,43,14],[276,0,250,2,"_void"],[276,4,250,2,"_void"],[276,9,250,7],[276,11,250,9,"createKeyword"],[276,24,250,22],[276,25,250,23],[276,31,250,22],[276,33,250,31],[277,0,251,4,"beforeExpr"],[277,6,251,4,"beforeExpr"],[277,16,251,14],[277,18,251,4,"beforeExpr"],[277,28,250,31],[278,0,252,4,"prefix"],[278,6,252,4,"prefix"],[278,12,252,10],[278,14,252,4,"prefix"],[278,20,250,31],[279,0,253,4,"startsExpr"],[279,6,253,4,"startsExpr"],[279,16,253,14],[279,18,253,4,"startsExpr"],[280,0,250,31],[280,5,250,22],[280,6,43,14],[281,0,255,2,"_delete"],[281,4,255,2,"_delete"],[281,11,255,9],[281,13,255,11,"createKeyword"],[281,26,255,24],[281,27,255,25],[281,35,255,24],[281,37,255,35],[282,0,256,4,"beforeExpr"],[282,6,256,4,"beforeExpr"],[282,16,256,14],[282,18,256,4,"beforeExpr"],[282,28,255,35],[283,0,257,4,"prefix"],[283,6,257,4,"prefix"],[283,12,257,10],[283,14,257,4,"prefix"],[283,20,255,35],[284,0,258,4,"startsExpr"],[284,6,258,4,"startsExpr"],[284,16,258,14],[284,18,258,4,"startsExpr"],[285,0,255,35],[285,5,255,24],[286,0,43,14],[286,3,43,0],[287,0,262,0],[287,6,262,6,"SCOPE_OTHER"],[287,17,262,17],[287,20,262,20],[287,21,262,0],[288,0,262,0],[288,6,263,6,"SCOPE_PROGRAM"],[288,19,263,19],[288,22,263,22],[288,23,262,0],[289,0,262,0],[289,6,264,6,"SCOPE_FUNCTION"],[289,20,264,20],[289,23,264,23],[289,24,262,0],[290,0,262,0],[290,6,265,6,"SCOPE_ASYNC"],[290,17,265,17],[290,20,265,20],[290,21,262,0],[291,0,262,0],[291,6,266,6,"SCOPE_GENERATOR"],[291,21,266,21],[291,24,266,24],[291,25,262,0],[292,0,262,0],[292,6,267,6,"SCOPE_ARROW"],[292,17,267,17],[292,20,267,20],[292,22,262,0],[293,0,262,0],[293,6,268,6,"SCOPE_SIMPLE_CATCH"],[293,24,268,24],[293,27,268,27],[293,29,262,0],[294,0,262,0],[294,6,269,6,"SCOPE_SUPER"],[294,17,269,17],[294,20,269,20],[294,22,262,0],[295,0,262,0],[295,6,270,6,"SCOPE_DIRECT_SUPER"],[295,24,270,24],[295,27,270,27],[295,30,262,0],[296,0,262,0],[296,6,271,6,"SCOPE_CLASS"],[296,17,271,17],[296,20,271,20],[296,23,262,0],[297,0,262,0],[297,6,272,6,"SCOPE_TS_MODULE"],[297,21,272,21],[297,24,272,24],[297,27,262,0],[298,0,262,0],[298,6,273,6,"SCOPE_VAR"],[298,15,273,15],[298,18,273,18,"SCOPE_PROGRAM"],[298,31,273,31],[298,34,273,34,"SCOPE_FUNCTION"],[298,48,273,18],[298,51,273,51,"SCOPE_TS_MODULE"],[298,66,262,0],[300,0,274,0],[300,11,274,9,"functionFlags"],[300,24,274,0],[300,25,274,23,"isAsync"],[300,32,274,0],[300,34,274,32,"isGenerator"],[300,45,274,0],[300,47,274,45],[301,0,275,2],[301,11,275,9,"SCOPE_FUNCTION"],[301,25,275,23],[301,29,275,27,"isAsync"],[301,36,275,34],[301,39,275,37,"SCOPE_ASYNC"],[301,50,275,34],[301,53,275,51],[301,54,275,23],[301,55,275,9],[301,59,275,57,"isGenerator"],[301,70,275,68],[301,73,275,71,"SCOPE_GENERATOR"],[301,88,275,68],[301,91,275,89],[301,92,275,9],[301,93,275,2],[302,0,276,1],[304,0,277,0],[304,6,277,6,"BIND_KIND_VALUE"],[304,21,277,21],[304,24,277,24],[304,25,277,0],[305,0,277,0],[305,6,278,6,"BIND_KIND_TYPE"],[305,20,278,20],[305,23,278,23],[305,24,277,0],[306,0,277,0],[306,6,279,6,"BIND_SCOPE_VAR"],[306,20,279,20],[306,23,279,23],[306,24,277,0],[307,0,277,0],[307,6,280,6,"BIND_SCOPE_LEXICAL"],[307,24,280,24],[307,27,280,27],[307,28,277,0],[308,0,277,0],[308,6,281,6,"BIND_SCOPE_FUNCTION"],[308,25,281,25],[308,28,281,28],[308,30,277,0],[309,0,277,0],[309,6,282,6,"BIND_FLAGS_NONE"],[309,21,282,21],[309,24,282,24],[309,26,277,0],[310,0,277,0],[310,6,283,6,"BIND_FLAGS_CLASS"],[310,22,283,22],[310,25,283,25],[310,28,277,0],[311,0,277,0],[311,6,284,6,"BIND_FLAGS_TS_ENUM"],[311,24,284,24],[311,27,284,27],[311,30,277,0],[312,0,277,0],[312,6,285,6,"BIND_FLAGS_TS_CONST_ENUM"],[312,30,285,30],[312,33,285,33],[312,36,277,0],[313,0,277,0],[313,6,286,6,"BIND_FLAGS_TS_EXPORT_ONLY"],[313,31,286,31],[313,34,286,34],[313,38,277,0],[314,0,287,0],[314,6,287,6,"BIND_CLASS"],[314,16,287,16],[314,19,287,19,"BIND_KIND_VALUE"],[314,34,287,34],[314,37,287,37,"BIND_KIND_TYPE"],[314,51,287,19],[314,54,287,54,"BIND_SCOPE_LEXICAL"],[314,72,287,19],[314,75,287,75,"BIND_FLAGS_CLASS"],[314,91,287,0],[315,0,287,0],[315,6,288,6,"BIND_LEXICAL"],[315,18,288,18],[315,21,288,21,"BIND_KIND_VALUE"],[315,36,288,36],[315,39,288,39],[315,40,288,21],[315,43,288,43,"BIND_SCOPE_LEXICAL"],[315,61,288,21],[315,64,288,64],[315,65,287,0],[316,0,287,0],[316,6,289,6,"BIND_VAR"],[316,14,289,14],[316,17,289,17,"BIND_KIND_VALUE"],[316,32,289,32],[316,35,289,35],[316,36,289,17],[316,39,289,39,"BIND_SCOPE_VAR"],[316,53,289,17],[316,56,289,56],[316,57,287,0],[317,0,287,0],[317,6,290,6,"BIND_FUNCTION"],[317,19,290,19],[317,22,290,22,"BIND_KIND_VALUE"],[317,37,290,37],[317,40,290,40],[317,41,290,22],[317,44,290,44,"BIND_SCOPE_FUNCTION"],[317,63,290,22],[317,66,290,66],[317,67,287,0],[318,0,287,0],[318,6,291,6,"BIND_TS_INTERFACE"],[318,23,291,23],[318,26,291,26],[318,30,291,30,"BIND_KIND_TYPE"],[318,44,291,26],[318,47,291,47],[318,48,291,26],[318,51,291,51,"BIND_FLAGS_CLASS"],[318,67,287,0],[319,0,287,0],[319,6,292,6,"BIND_TS_TYPE"],[319,18,292,18],[319,21,292,21],[319,25,292,25,"BIND_KIND_TYPE"],[319,39,292,21],[319,42,292,42],[319,43,292,21],[319,46,292,46],[319,47,287,0],[320,0,287,0],[320,6,293,6,"BIND_TS_ENUM"],[320,18,293,18],[320,21,293,21,"BIND_KIND_VALUE"],[320,36,293,36],[320,39,293,39,"BIND_KIND_TYPE"],[320,53,293,21],[320,56,293,56,"BIND_SCOPE_LEXICAL"],[320,74,293,21],[320,77,293,77,"BIND_FLAGS_TS_ENUM"],[320,95,287,0],[321,0,287,0],[321,6,294,6,"BIND_TS_AMBIENT"],[321,21,294,21],[321,24,294,24],[321,28,294,28],[321,29,294,24],[321,32,294,32],[321,33,294,24],[321,36,294,36,"BIND_FLAGS_TS_EXPORT_ONLY"],[321,61,287,0],[322,0,287,0],[322,6,295,6,"BIND_NONE"],[322,15,295,15],[322,18,295,18],[322,22,295,22],[322,23,295,18],[322,26,295,26],[322,27,295,18],[322,30,295,30,"BIND_FLAGS_NONE"],[322,45,287,0],[323,0,287,0],[323,6,296,6,"BIND_OUTSIDE"],[323,18,296,18],[323,21,296,21,"BIND_KIND_VALUE"],[323,36,296,36],[323,39,296,39],[323,40,296,21],[323,43,296,43],[323,44,296,21],[323,47,296,47,"BIND_FLAGS_NONE"],[323,62,287,0],[324,0,287,0],[324,6,297,6,"BIND_TS_CONST_ENUM"],[324,24,297,24],[324,27,297,27,"BIND_TS_ENUM"],[324,39,297,39],[324,42,297,42,"BIND_FLAGS_TS_CONST_ENUM"],[324,66,287,0],[325,0,287,0],[325,6,298,6,"BIND_TS_NAMESPACE"],[325,23,298,23],[325,26,298,26],[325,30,298,30],[325,31,298,26],[325,34,298,34],[325,35,298,26],[325,38,298,38,"BIND_FLAGS_TS_EXPORT_ONLY"],[325,63,287,0],[327,0,300,0],[327,11,300,9,"isSimpleProperty"],[327,27,300,0],[327,28,300,26,"node"],[327,32,300,0],[327,34,300,32],[328,0,301,2],[328,11,301,9,"node"],[328,15,301,13],[328,19,301,17],[328,23,301,9],[328,27,301,25,"node"],[328,31,301,29],[328,32,301,30,"type"],[328,36,301,25],[328,41,301,39],[328,51,301,9],[328,55,301,53,"node"],[328,59,301,57],[328,60,301,58,"kind"],[328,64,301,53],[328,69,301,67],[328,75,301,9],[328,79,301,77,"node"],[328,83,301,81],[328,84,301,82,"method"],[328,90,301,77],[328,95,301,93],[328,100,301,2],[329,0,302,1],[331,0,304,0],[331,6,304,4,"estree"],[331,12,304,10],[331,15,304,14],[331,24,304,4,"estree"],[331,30,304,14],[331,31,304,14,"superClass"],[331,41,304,24],[332,0,304,24],[333,0,304,24],[335,0,304,24],[336,0,304,24],[338,0,304,24],[339,0,304,24],[341,0,304,24],[342,0,304,24],[343,0,304,24],[343,55,308,5],[344,0,308,5],[344,14,306,4,"pattern"],[344,21,308,5],[344,29,306,4,"pattern"],[344,36,308,5],[345,0,308,5],[345,14,307,4,"flags"],[345,19,308,5],[345,27,307,4,"flags"],[345,32,308,5],[346,0,309,4],[346,14,309,8,"regex"],[346,19,309,13],[346,22,309,16],[346,26,309,4],[348,0,311,4],[348,14,311,8],[349,0,312,6,"regex"],[349,12,312,6,"regex"],[349,17,312,11],[349,20,312,14],[349,24,312,18,"RegExp"],[349,30,312,14],[349,31,312,25,"pattern"],[349,38,312,14],[349,40,312,34,"flags"],[349,45,312,14],[349,46,312,6],[350,0,313,5],[350,11,311,4],[350,12,313,6],[350,19,313,13,"e"],[350,20,313,6],[350,22,313,16],[350,23,313,18],[352,0,315,4],[352,14,315,10,"node"],[352,18,315,14],[352,21,315,17],[352,26,315,22,"estreeParseLiteral"],[352,44,315,17],[352,45,315,41,"regex"],[352,50,315,17],[352,51,315,4],[353,0,316,4,"node"],[353,10,316,4,"node"],[353,14,316,8],[353,15,316,9,"regex"],[353,20,316,4],[353,23,316,17],[354,0,317,6,"pattern"],[354,12,317,6,"pattern"],[354,19,317,13],[354,21,317,6,"pattern"],[354,28,316,17],[355,0,318,6,"flags"],[355,12,318,6,"flags"],[355,17,318,11],[355,19,318,6,"flags"],[356,0,316,17],[356,11,316,4],[357,0,320,4],[357,17,320,11,"node"],[357,21,320,4],[358,0,321,3],[359,0,304,24],[360,0,304,24],[361,0,304,24],[361,49,323,27,"value"],[361,54,304,24],[361,56,323,34],[362,0,324,4],[362,14,324,10,"bigInt"],[362,20,324,16],[362,23,324,19],[362,30,324,26,"BigInt"],[362,36,324,19],[362,41,324,37],[362,52,324,19],[362,55,324,51,"BigInt"],[362,61,324,57],[362,62,324,58,"value"],[362,67,324,57],[362,68,324,19],[362,71,324,67],[362,75,324,4],[363,0,325,4],[363,14,325,10,"node"],[363,18,325,14],[363,21,325,17],[363,26,325,22,"estreeParseLiteral"],[363,44,325,17],[363,45,325,41,"bigInt"],[363,51,325,17],[363,52,325,4],[364,0,326,4,"node"],[364,10,326,4,"node"],[364,14,326,8],[364,15,326,9,"bigint"],[364,21,326,4],[364,24,326,18,"String"],[364,30,326,24],[364,31,326,25,"node"],[364,35,326,29],[364,36,326,30,"value"],[364,41,326,25],[364,45,326,39,"value"],[364,50,326,24],[364,51,326,4],[365,0,327,4],[365,17,327,11,"node"],[365,21,327,4],[366,0,328,3],[367,0,304,24],[368,0,304,24],[369,0,304,24],[369,43,330,21,"value"],[369,48,304,24],[369,50,330,28],[370,0,331,4],[370,17,331,11],[370,22,331,16,"parseLiteral"],[370,34,331,11],[370,35,331,29,"value"],[370,40,331,11],[370,42,331,36],[370,51,331,11],[370,52,331,4],[371,0,332,3],[372,0,304,24],[373,0,304,24],[374,0,304,24],[374,40,334,18,"directive"],[374,49,304,24],[374,51,334,29],[375,0,335,4],[375,14,335,10,"directiveLiteral"],[375,30,335,26],[375,33,335,29,"directive"],[375,42,335,38],[375,43,335,39,"value"],[375,48,335,4],[376,0,336,4],[376,14,336,10,"stmt"],[376,18,336,14],[376,21,336,17],[376,26,336,22,"startNodeAt"],[376,37,336,17],[376,38,336,34,"directive"],[376,47,336,43],[376,48,336,44,"start"],[376,53,336,17],[376,55,336,51,"directive"],[376,64,336,60],[376,65,336,61,"loc"],[376,68,336,51],[376,69,336,65,"start"],[376,74,336,17],[376,75,336,4],[377,0,337,4],[377,14,337,10,"expression"],[377,24,337,20],[377,27,337,23],[377,32,337,28,"startNodeAt"],[377,43,337,23],[377,44,337,40,"directiveLiteral"],[377,60,337,56],[377,61,337,57,"start"],[377,66,337,23],[377,68,337,64,"directiveLiteral"],[377,84,337,80],[377,85,337,81,"loc"],[377,88,337,64],[377,89,337,85,"start"],[377,94,337,23],[377,95,337,4],[378,0,338,4,"expression"],[378,10,338,4,"expression"],[378,20,338,14],[378,21,338,15,"value"],[378,26,338,4],[378,29,338,23,"directiveLiteral"],[378,45,338,39],[378,46,338,40,"value"],[378,51,338,4],[379,0,339,4,"expression"],[379,10,339,4,"expression"],[379,20,339,14],[379,21,339,15,"raw"],[379,24,339,4],[379,27,339,21,"directiveLiteral"],[379,43,339,37],[379,44,339,38,"extra"],[379,49,339,21],[379,50,339,44,"raw"],[379,53,339,4],[380,0,340,4,"stmt"],[380,10,340,4,"stmt"],[380,14,340,8],[380,15,340,9,"expression"],[380,25,340,4],[380,28,340,22],[380,33,340,27,"finishNodeAt"],[380,45,340,22],[380,46,340,40,"expression"],[380,56,340,22],[380,58,340,52],[380,67,340,22],[380,69,340,63,"directiveLiteral"],[380,85,340,79],[380,86,340,80,"end"],[380,89,340,22],[380,91,340,85,"directiveLiteral"],[380,107,340,101],[380,108,340,102,"loc"],[380,111,340,85],[380,112,340,106,"end"],[380,115,340,22],[380,116,340,4],[381,0,341,4,"stmt"],[381,10,341,4,"stmt"],[381,14,341,8],[381,15,341,9,"directive"],[381,24,341,4],[381,27,341,21,"directiveLiteral"],[381,43,341,37],[381,44,341,38,"extra"],[381,49,341,21],[381,50,341,44,"raw"],[381,53,341,21],[381,54,341,48,"slice"],[381,59,341,21],[381,60,341,54],[381,61,341,21],[381,63,341,57],[381,64,341,58],[381,65,341,21],[381,66,341,4],[382,0,342,4],[382,17,342,11],[382,22,342,16,"finishNodeAt"],[382,34,342,11],[382,35,342,29,"stmt"],[382,39,342,11],[382,41,342,35],[382,62,342,11],[382,64,342,58,"directive"],[382,73,342,67],[382,74,342,68,"end"],[382,77,342,11],[382,79,342,73,"directive"],[382,88,342,82],[382,89,342,83,"loc"],[382,92,342,73],[382,93,342,87,"end"],[382,96,342,11],[382,97,342,4],[383,0,343,3],[384,0,304,24],[385,0,304,24],[386,0,304,24],[386,37,345,15,"node"],[386,41,304,24],[386,43,345,21,"isAsync"],[386,50,304,24],[386,52,345,30],[387,0,346,4],[387,83,346,23,"node"],[387,87,346,4],[387,89,346,29,"isAsync"],[387,96,346,4],[389,0,347,4,"node"],[389,10,347,4,"node"],[389,14,347,8],[389,15,347,9,"expression"],[389,25,347,4],[389,28,347,22],[389,33,347,4],[390,0,348,3],[391,0,304,24],[392,0,304,24],[393,0,304,24],[393,41,350,19,"node"],[393,45,304,24],[393,47,350,25],[394,0,351,4],[394,14,351,8,"isSimpleProperty"],[394,30,351,24],[394,31,351,25,"node"],[394,35,351,24],[394,36,351,4],[394,38,351,32],[395,0,352,6],[395,17,352,11,"checkDeclaration"],[395,33,352,6],[395,34,352,28,"node"],[395,38,352,32],[395,39,352,33,"value"],[395,44,352,6],[396,0,353,5],[396,11,351,4],[396,17,353,11],[397,0,354,6],[397,89,354,29,"node"],[397,93,354,6],[398,0,355,5],[399,0,356,3],[400,0,304,24],[401,0,304,24],[402,0,304,24],[402,48,358,26,"method"],[402,54,304,24],[402,56,358,34],[403,0,359,4],[403,14,359,10,"prop"],[403,18,359,14],[403,21,359,17,"method"],[403,27,359,4],[404,0,360,4],[404,14,360,10,"paramCount"],[404,24,360,20],[404,27,360,23,"prop"],[404,31,360,27],[404,32,360,28,"kind"],[404,36,360,23],[404,41,360,37],[404,46,360,23],[404,49,360,45],[404,50,360,23],[404,53,360,49],[404,54,360,4],[405,0,361,4],[405,14,361,10,"start"],[405,19,361,15],[405,22,361,18,"prop"],[405,26,361,22],[405,27,361,23,"start"],[405,32,361,4],[407,0,363,4],[407,14,363,8,"prop"],[407,18,363,12],[407,19,363,13,"value"],[407,24,363,8],[407,25,363,19,"params"],[407,31,363,8],[407,32,363,26,"length"],[407,38,363,8],[407,43,363,37,"paramCount"],[407,53,363,4],[407,55,363,49],[408,0,364,6],[408,16,364,10,"prop"],[408,20,364,14],[408,21,364,15,"kind"],[408,25,364,10],[408,30,364,24],[408,35,364,6],[408,37,364,31],[409,0,365,8],[409,19,365,13,"raise"],[409,24,365,8],[409,25,365,19,"start"],[409,30,365,8],[409,32,365,26],[409,76,365,8],[410,0,366,7],[410,13,364,6],[410,19,366,13],[411,0,367,8],[411,19,367,13,"raise"],[411,24,367,8],[411,25,367,19,"start"],[411,30,367,8],[411,32,367,26],[411,79,367,8],[412,0,368,7],[413,0,369,5],[413,11,363,4],[413,17,369,11],[413,21,369,15,"prop"],[413,25,369,19],[413,26,369,20,"kind"],[413,30,369,15],[413,35,369,29],[413,40,369,15],[413,44,369,38,"prop"],[413,48,369,42],[413,49,369,43,"value"],[413,54,369,38],[413,55,369,49,"params"],[413,61,369,38],[413,62,369,56],[413,63,369,38],[413,65,369,59,"type"],[413,69,369,38],[413,74,369,68],[413,87,369,11],[413,89,369,83],[414,0,370,6],[414,17,370,11,"raise"],[414,22,370,6],[414,23,370,17,"start"],[414,28,370,6],[414,30,370,24],[414,85,370,6],[415,0,371,5],[416,0,372,3],[417,0,304,24],[418,0,304,24],[419,0,304,24],[419,34,374,12,"expr"],[419,38,304,24],[419,40,374,97],[420,0,374,97],[422,0,374,97],[422,14,374,18,"bindingType"],[422,25,374,97],[422,96,374,32,"BIND_NONE"],[422,105,374,97],[423,0,374,97],[423,14,374,43,"checkClashes"],[423,26,374,97],[424,0,374,97],[424,14,374,57,"contextDescription"],[424,32,374,97],[425,0,374,97],[425,14,374,77,"disallowLetBinding"],[425,32,374,97],[427,0,375,4],[427,18,375,12,"expr"],[427,22,375,16],[427,23,375,17,"type"],[427,27,375,4],[428,0,376,6],[428,17,376,11],[428,32,376,6],[429,0,377,8,"expr"],[429,14,377,8,"expr"],[429,18,377,12],[429,19,377,13,"properties"],[429,29,377,8],[429,30,377,24,"forEach"],[429,37,377,8],[429,38,377,32],[429,48,377,32,"prop"],[429,52,377,36],[429,54,377,40],[430,0,378,10],[430,16,378,10],[430,21,378,14],[430,22,378,15,"checkLVal"],[430,31,378,10],[430,32,378,25,"prop"],[430,36,378,29],[430,37,378,30,"type"],[430,41,378,25],[430,46,378,39],[430,56,378,25],[430,59,378,52,"prop"],[430,63,378,56],[430,64,378,57,"value"],[430,69,378,25],[430,72,378,65,"prop"],[430,76,378,10],[430,78,378,71,"bindingType"],[430,89,378,10],[430,91,378,84,"checkClashes"],[430,103,378,10],[430,105,378,98],[430,135,378,10],[430,137,378,130,"disallowLetBinding"],[430,155,378,10],[431,0,379,9],[431,15,377,8],[432,0,380,8],[434,0,382,6],[435,0,383,8],[435,84,383,24,"expr"],[435,88,383,8],[435,90,383,30,"bindingType"],[435,101,383,8],[435,103,383,43,"checkClashes"],[435,115,383,8],[435,117,383,57,"contextDescription"],[435,135,383,8],[435,137,383,77,"disallowLetBinding"],[435,155,383,8],[437,0,375,4],[438,0,385,3],[439,0,304,24],[440,0,304,24],[441,0,304,24],[441,45,387,23,"prop"],[441,49,304,24],[441,51,387,29,"protoRef"],[441,59,304,24],[441,61,387,39],[442,0,388,4],[442,14,388,8,"prop"],[442,18,388,12],[442,19,388,13,"type"],[442,23,388,8],[442,28,388,22],[442,43,388,8],[442,47,388,41,"prop"],[442,51,388,45],[442,52,388,46,"computed"],[442,60,388,8],[442,64,388,58,"prop"],[442,68,388,62],[442,69,388,63,"method"],[442,75,388,8],[442,79,388,73,"prop"],[442,83,388,77],[442,84,388,78,"shorthand"],[442,93,388,4],[442,95,388,89],[443,0,389,6],[444,0,390,5],[446,0,392,4],[446,14,392,10,"key"],[446,17,392,13],[446,20,392,16,"prop"],[446,24,392,20],[446,25,392,21,"key"],[446,28,392,4],[447,0,393,4],[447,14,393,10,"name"],[447,18,393,14],[447,21,393,17,"key"],[447,24,393,20],[447,25,393,21,"type"],[447,29,393,17],[447,34,393,30],[447,46,393,17],[447,49,393,45,"key"],[447,52,393,48],[447,53,393,49,"name"],[447,57,393,17],[447,60,393,56,"String"],[447,66,393,62],[447,67,393,63,"key"],[447,70,393,66],[447,71,393,67,"value"],[447,76,393,62],[447,77,393,4],[449,0,395,4],[449,14,395,8,"name"],[449,18,395,12],[449,23,395,17],[449,34,395,8],[449,38,395,32,"prop"],[449,42,395,36],[449,43,395,37,"kind"],[449,47,395,32],[449,52,395,46],[449,58,395,4],[449,60,395,54],[450,0,396,6],[450,16,396,10,"protoRef"],[450,24,396,18],[450,25,396,19,"used"],[450,29,396,10],[450,33,396,27],[450,34,396,28,"protoRef"],[450,42,396,36],[450,43,396,37,"start"],[450,48,396,6],[450,50,396,44],[451,0,397,8,"protoRef"],[451,14,397,8,"protoRef"],[451,22,397,16],[451,23,397,17,"start"],[451,28,397,8],[451,31,397,25,"key"],[451,34,397,28],[451,35,397,29,"start"],[451,40,397,8],[452,0,398,7],[454,0,400,6,"protoRef"],[454,12,400,6,"protoRef"],[454,20,400,14],[454,21,400,15,"used"],[454,25,400,6],[454,28,400,22],[454,32,400,6],[455,0,401,5],[456,0,402,3],[457,0,304,24],[458,0,304,24],[459,0,304,24],[459,37,404,15,"node"],[459,41,304,24],[459,43,404,21],[460,0,405,4],[460,14,405,10,"isBlockStatement"],[460,30,405,26],[460,33,405,29,"node"],[460,37,405,33],[460,38,405,34,"body"],[460,42,405,29],[460,43,405,39,"type"],[460,47,405,29],[460,52,405,48],[460,68,405,4],[462,0,407,4],[462,14,407,8,"isBlockStatement"],[462,30,407,24],[462,34,407,28,"node"],[462,38,407,32],[462,39,407,33,"body"],[462,43,407,28],[462,44,407,38,"body"],[462,48,407,28],[462,49,407,43,"length"],[462,55,407,28],[462,58,407,52],[462,59,407,4],[462,61,407,55],[463,0,408,6],[463,17,408,11],[463,21,408,15,"_i"],[463,23,408,17],[463,26,408,20],[463,27,408,11],[463,29,408,23,"_node$body$body"],[463,44,408,38],[463,47,408,41,"node"],[463,51,408,45],[463,52,408,46,"body"],[463,56,408,41],[463,57,408,51,"body"],[463,61,408,6],[463,63,408,57,"_i"],[463,65,408,59],[463,68,408,62,"_node$body$body"],[463,83,408,77],[463,84,408,78,"length"],[463,90,408,6],[463,92,408,86,"_i"],[463,94,408,88],[463,96,408,6],[463,98,408,92],[464,0,409,8],[464,18,409,14,"directive"],[464,27,409,23],[464,30,409,26,"_node$body$body"],[464,45,409,41],[464,46,409,42,"_i"],[464,48,409,41],[464,49,409,8],[466,0,411,8],[466,18,411,12,"directive"],[466,27,411,21],[466,28,411,22,"type"],[466,32,411,12],[466,37,411,31],[466,58,411,12],[466,62,411,56,"directive"],[466,71,411,65],[466,72,411,66,"expression"],[466,82,411,56],[466,83,411,77,"type"],[466,87,411,56],[466,92,411,86],[466,101,411,8],[466,103,411,97],[467,0,412,10],[467,20,412,14,"directive"],[467,29,412,23],[467,30,412,24,"expression"],[467,40,412,14],[467,41,412,35,"value"],[467,46,412,14],[467,51,412,45],[467,63,412,10],[467,65,412,59],[467,72,412,66],[467,76,412,59],[468,0,413,9],[468,15,411,8],[468,21,413,15],[469,0,414,10],[470,0,415,9],[471,0,416,7],[472,0,417,5],[474,0,419,4],[474,17,419,11],[474,22,419,4],[475,0,420,3],[476,0,304,24],[477,0,304,24],[478,0,304,24],[478,41,422,19,"stmt"],[478,45,304,24],[478,47,422,25],[479,0,423,4],[479,17,423,11,"stmt"],[479,21,423,15],[479,22,423,16,"type"],[479,26,423,11],[479,31,423,25],[479,52,423,11],[479,56,423,50,"stmt"],[479,60,423,54],[479,61,423,55,"expression"],[479,71,423,50],[479,72,423,66,"type"],[479,76,423,50],[479,81,423,75],[479,90,423,11],[479,94,423,88],[479,101,423,95,"stmt"],[479,105,423,99],[479,106,423,100,"expression"],[479,116,423,95],[479,117,423,111,"value"],[479,122,423,88],[479,127,423,121],[479,135,423,11],[479,140,423,134],[479,141,423,135,"stmt"],[479,145,423,139],[479,146,423,140,"expression"],[479,156,423,135],[479,157,423,151,"extra"],[479,162,423,134],[479,166,423,160],[479,167,423,161,"stmt"],[479,171,423,165],[479,172,423,166,"expression"],[479,182,423,161],[479,183,423,177,"extra"],[479,188,423,161],[479,189,423,183,"parenthesized"],[479,202,423,11],[479,203,423,4],[480,0,424,3],[481,0,304,24],[482,0,304,24],[483,0,304,24],[483,40,426,18,"stmt"],[483,44,304,24],[483,46,426,24],[484,0,427,4],[484,14,427,10,"directive"],[484,23,427,19],[484,102,427,44,"stmt"],[484,106,427,19],[484,107,427,4],[486,0,428,4],[486,14,428,10,"value"],[486,19,428,15],[486,22,428,18,"stmt"],[486,26,428,22],[486,27,428,23,"expression"],[486,37,428,18],[486,38,428,34,"value"],[486,43,428,4],[487,0,429,4,"directive"],[487,10,429,4,"directive"],[487,19,429,13],[487,20,429,14,"value"],[487,25,429,4],[487,26,429,20,"value"],[487,31,429,4],[487,34,429,28,"value"],[487,39,429,4],[488,0,430,4],[488,17,430,11,"directive"],[488,26,430,4],[489,0,431,3],[490,0,304,24],[491,0,304,24],[492,0,304,24],[492,39,433,17,"node"],[492,43,304,24],[492,45,433,23,"allowDirectives"],[492,60,304,24],[492,62,433,40,"topLevel"],[492,70,304,24],[492,72,433,50,"end"],[492,75,304,24],[492,77,433,55],[493,0,433,55],[495,0,434,4],[495,85,434,25,"node"],[495,89,434,4],[495,91,434,31,"allowDirectives"],[495,106,434,4],[495,108,434,48,"topLevel"],[495,116,434,4],[495,118,434,58,"end"],[495,121,434,4],[497,0,435,4],[497,14,435,10,"directiveStatements"],[497,33,435,29],[497,36,435,32,"node"],[497,40,435,36],[497,41,435,37,"directives"],[497,51,435,32],[497,52,435,48,"map"],[497,55,435,32],[497,56,435,52],[497,66,435,52,"d"],[497,67,435,53],[498,0,435,53],[498,19,435,57],[498,25,435,61],[498,26,435,62,"directiveToStmt"],[498,41,435,57],[498,42,435,78,"d"],[498,43,435,57],[498,44,435,53],[499,0,435,53],[499,11,435,32],[499,12,435,4],[500,0,436,4,"node"],[500,10,436,4,"node"],[500,14,436,8],[500,15,436,9,"body"],[500,19,436,4],[500,22,436,16,"directiveStatements"],[500,41,436,35],[500,42,436,36,"concat"],[500,48,436,16],[500,49,436,43,"node"],[500,53,436,47],[500,54,436,48,"body"],[500,58,436,16],[500,59,436,4],[501,0,437,4],[501,17,437,11,"node"],[501,21,437,15],[501,22,437,16,"directives"],[501,32,437,4],[502,0,438,3],[503,0,304,24],[504,0,304,24],[505,0,304,24],[505,40,440,18,"classBody"],[505,49,304,24],[505,51,440,29,"method"],[505,57,304,24],[505,59,440,37,"isGenerator"],[505,70,304,24],[505,72,440,50,"isAsync"],[505,79,304,24],[505,81,440,59,"isConstructor"],[505,94,304,24],[505,96,440,74,"allowsDirectSuper"],[505,113,304,24],[505,115,440,93],[506,0,441,4],[506,15,441,9,"parseMethod"],[506,26,441,4],[506,27,441,21,"method"],[506,33,441,4],[506,35,441,29,"isGenerator"],[506,46,441,4],[506,48,441,42,"isAsync"],[506,55,441,4],[506,57,441,51,"isConstructor"],[506,70,441,4],[506,72,441,66,"allowsDirectSuper"],[506,89,441,4],[506,91,441,85],[506,104,441,4],[506,106,441,100],[506,110,441,4],[508,0,443,4],[508,14,443,8,"method"],[508,20,443,14],[508,21,443,15,"typeParameters"],[508,35,443,4],[508,37,443,31],[509,0,444,6,"method"],[509,12,444,6,"method"],[509,18,444,12],[509,19,444,13,"value"],[509,24,444,6],[509,25,444,19,"typeParameters"],[509,39,444,6],[509,42,444,36,"method"],[509,48,444,42],[509,49,444,43,"typeParameters"],[509,63,444,6],[510,0,445,6],[510,19,445,13,"method"],[510,25,445,19],[510,26,445,20,"typeParameters"],[510,40,445,6],[511,0,446,5],[513,0,448,4,"classBody"],[513,10,448,4,"classBody"],[513,19,448,13],[513,20,448,14,"body"],[513,24,448,4],[513,25,448,19,"push"],[513,29,448,4],[513,30,448,24,"method"],[513,36,448,4],[514,0,449,3],[515,0,304,24],[516,0,304,24],[517,0,304,24],[517,38,451,16,"refShorthandDefaultPos"],[517,60,304,24],[517,62,451,40],[518,0,452,4],[518,18,452,12],[518,23,452,17,"state"],[518,28,452,12],[518,29,452,23,"type"],[518,33,452,4],[519,0,453,6],[519,17,453,11,"types"],[519,22,453,16],[519,23,453,17,"num"],[519,26,453,6],[520,0,454,6],[520,17,454,11,"types"],[520,22,454,16],[520,23,454,17,"string"],[520,29,454,6],[521,0,455,8],[521,21,455,15],[521,26,455,20,"estreeParseLiteral"],[521,44,455,15],[521,45,455,39],[521,50,455,44,"state"],[521,55,455,39],[521,56,455,50,"value"],[521,61,455,15],[521,62,455,8],[523,0,457,6],[523,17,457,11,"types"],[523,22,457,16],[523,23,457,17,"regexp"],[523,29,457,6],[524,0,458,8],[524,21,458,15],[524,26,458,20,"estreeParseRegExpLiteral"],[524,50,458,15],[524,51,458,45],[524,56,458,50,"state"],[524,61,458,45],[524,62,458,56,"value"],[524,67,458,15],[524,68,458,8],[526,0,460,6],[526,17,460,11,"types"],[526,22,460,16],[526,23,460,17,"bigint"],[526,29,460,6],[527,0,461,8],[527,21,461,15],[527,26,461,20,"estreeParseBigIntLiteral"],[527,50,461,15],[527,51,461,45],[527,56,461,50,"state"],[527,61,461,45],[527,62,461,56,"value"],[527,67,461,15],[527,68,461,8],[529,0,463,6],[529,17,463,11,"types"],[529,22,463,16],[529,23,463,17,"_null"],[529,28,463,6],[530,0,464,8],[530,21,464,15],[530,26,464,20,"estreeParseLiteral"],[530,44,464,15],[530,45,464,39],[530,49,464,15],[530,50,464,8],[532,0,466,6],[532,17,466,11,"types"],[532,22,466,16],[532,23,466,17,"_true"],[532,28,466,6],[533,0,467,8],[533,21,467,15],[533,26,467,20,"estreeParseLiteral"],[533,44,467,15],[533,45,467,39],[533,49,467,15],[533,50,467,8],[535,0,469,6],[535,17,469,11,"types"],[535,22,469,16],[535,23,469,17,"_false"],[535,29,469,6],[536,0,470,8],[536,21,470,15],[536,26,470,20,"estreeParseLiteral"],[536,44,470,15],[536,45,470,39],[536,50,470,15],[536,51,470,8],[538,0,472,6],[539,0,473,8],[539,95,473,35,"refShorthandDefaultPos"],[539,117,473,8],[540,0,452,4],[541,0,475,3],[542,0,304,24],[543,0,304,24],[544,0,304,24],[544,37,477,15,"value"],[544,42,304,24],[544,44,477,22,"type"],[544,48,304,24],[544,50,477,28,"startPos"],[544,58,304,24],[544,60,477,38,"startLoc"],[544,68,304,24],[544,70,477,48],[545,0,478,4],[545,14,478,10,"node"],[545,18,478,14],[545,94,478,36,"value"],[545,99,478,14],[545,101,478,43,"type"],[545,105,478,14],[545,107,478,49,"startPos"],[545,115,478,14],[545,117,478,59,"startLoc"],[545,125,478,14],[545,126,478,4],[547,0,479,4,"node"],[547,10,479,4,"node"],[547,14,479,8],[547,15,479,9,"raw"],[547,18,479,4],[547,21,479,15,"node"],[547,25,479,19],[547,26,479,20,"extra"],[547,31,479,15],[547,32,479,26,"raw"],[547,35,479,4],[548,0,480,4],[548,17,480,11,"node"],[548,21,480,15],[548,22,480,16,"extra"],[548,27,480,4],[549,0,481,4],[549,17,481,11,"node"],[549,21,481,4],[550,0,482,3],[551,0,304,24],[552,0,304,24],[553,0,304,24],[553,42,484,20,"node"],[553,46,304,24],[553,48,484,26,"allowExpression"],[553,63,304,24],[553,65,484,61],[554,0,484,61],[554,14,484,43,"isMethod"],[554,22,484,61],[554,93,484,54],[554,98,484,61],[556,0,485,4],[556,88,485,28,"node"],[556,92,485,4],[556,94,485,34,"allowExpression"],[556,109,485,4],[556,111,485,51,"isMethod"],[556,119,485,4],[558,0,486,4,"node"],[558,10,486,4,"node"],[558,14,486,8],[558,15,486,9,"expression"],[558,25,486,4],[558,28,486,22,"node"],[558,32,486,26],[558,33,486,27,"body"],[558,37,486,22],[558,38,486,32,"type"],[558,42,486,22],[558,47,486,41],[558,63,486,4],[559,0,487,3],[560,0,304,24],[561,0,304,24],[562,0,304,24],[562,36,489,14,"node"],[562,40,304,24],[562,42,489,20,"isGenerator"],[562,53,304,24],[562,55,489,33,"isAsync"],[562,62,304,24],[562,64,489,42,"isConstructor"],[562,77,304,24],[562,79,489,57,"allowDirectSuper"],[562,95,304,24],[562,97,489,75,"type"],[562,101,304,24],[562,103,489,103],[563,0,489,103],[563,14,489,81,"inClassScope"],[563,26,489,103],[563,97,489,96],[563,102,489,103],[564,0,490,4],[564,14,490,8,"funcNode"],[564,22,490,16],[564,25,490,19],[564,30,490,24,"startNode"],[564,39,490,19],[564,41,490,4],[565,0,491,4,"funcNode"],[565,10,491,4,"funcNode"],[565,18,491,12],[565,19,491,13,"kind"],[565,23,491,4],[565,26,491,20,"node"],[565,30,491,24],[565,31,491,25,"kind"],[565,35,491,4],[566,0,492,4,"funcNode"],[566,10,492,4,"funcNode"],[566,18,492,12],[566,93,492,33,"funcNode"],[566,101,492,12],[566,103,492,43,"isGenerator"],[566,114,492,12],[566,116,492,56,"isAsync"],[566,123,492,12],[566,125,492,65,"isConstructor"],[566,138,492,12],[566,140,492,80,"allowDirectSuper"],[566,156,492,12],[566,158,492,98,"type"],[566,162,492,12],[566,164,492,104,"inClassScope"],[566,176,492,12],[566,177,492,4],[567,0,493,4,"funcNode"],[567,10,493,4,"funcNode"],[567,18,493,12],[567,19,493,13,"type"],[567,23,493,4],[567,26,493,20],[567,46,493,4],[568,0,494,4],[568,17,494,11,"funcNode"],[568,25,494,19],[568,26,494,20,"kind"],[568,30,494,4],[569,0,495,4,"node"],[569,10,495,4,"node"],[569,14,495,8],[569,15,495,9,"value"],[569,20,495,4],[569,23,495,17,"funcNode"],[569,31,495,4],[570,0,496,4,"type"],[570,10,496,4,"type"],[570,14,496,8],[570,17,496,11,"type"],[570,21,496,15],[570,26,496,20],[570,39,496,11],[570,42,496,36],[570,60,496,11],[570,63,496,57,"type"],[570,67,496,4],[571,0,497,4],[571,17,497,11],[571,22,497,16,"finishNode"],[571,32,497,11],[571,33,497,27,"node"],[571,37,497,11],[571,39,497,33,"type"],[571,43,497,11],[571,44,497,4],[572,0,498,3],[573,0,304,24],[574,0,304,24],[575,0,304,24],[575,42,500,20,"prop"],[575,46,304,24],[575,48,500,26,"isGenerator"],[575,59,304,24],[575,61,500,39,"isAsync"],[575,68,304,24],[575,70,500,48,"isPattern"],[575,79,304,24],[575,81,500,59,"containsEsc"],[575,92,304,24],[575,94,500,72],[576,0,501,4],[576,14,501,10,"node"],[576,18,501,14],[576,99,501,41,"prop"],[576,103,501,14],[576,105,501,47,"isGenerator"],[576,116,501,14],[576,118,501,60,"isAsync"],[576,125,501,14],[576,127,501,69,"isPattern"],[576,136,501,14],[576,138,501,80,"containsEsc"],[576,149,501,14],[576,150,501,4],[578,0,503,4],[578,14,503,8,"node"],[578,18,503,4],[578,20,503,14],[579,0,504,6,"node"],[579,12,504,6,"node"],[579,16,504,10],[579,17,504,11,"type"],[579,21,504,6],[579,24,504,18],[579,34,504,6],[580,0,505,6],[580,16,505,10,"node"],[580,20,505,14],[580,21,505,15,"kind"],[580,25,505,10],[580,30,505,24],[580,38,505,6],[580,40,505,34,"node"],[580,44,505,38],[580,45,505,39,"kind"],[580,49,505,34],[580,52,505,46],[580,58,505,34],[581,0,506,6,"node"],[581,12,506,6,"node"],[581,16,506,10],[581,17,506,11,"shorthand"],[581,26,506,6],[581,29,506,23],[581,34,506,6],[582,0,507,5],[584,0,509,4],[584,17,509,11,"node"],[584,21,509,4],[585,0,510,3],[586,0,304,24],[587,0,304,24],[588,0,304,24],[588,44,512,22,"prop"],[588,48,304,24],[588,50,512,28,"startPos"],[588,58,304,24],[588,60,512,38,"startLoc"],[588,68,304,24],[588,70,512,48,"isPattern"],[588,79,304,24],[588,81,512,59,"refShorthandDefaultPos"],[588,103,304,24],[588,105,512,83],[589,0,513,4],[589,14,513,10,"node"],[589,18,513,14],[589,101,513,43,"prop"],[589,105,513,14],[589,107,513,49,"startPos"],[589,115,513,14],[589,117,513,59,"startLoc"],[589,125,513,14],[589,127,513,69,"isPattern"],[589,136,513,14],[589,138,513,80,"refShorthandDefaultPos"],[589,160,513,14],[589,161,513,4],[591,0,515,4],[591,14,515,8,"node"],[591,18,515,4],[591,20,515,14],[592,0,516,6,"node"],[592,12,516,6,"node"],[592,16,516,10],[592,17,516,11,"kind"],[592,21,516,6],[592,24,516,18],[592,30,516,6],[593,0,517,6,"node"],[593,12,517,6,"node"],[593,16,517,10],[593,17,517,11,"type"],[593,21,517,6],[593,24,517,18],[593,34,517,6],[594,0,518,5],[596,0,520,4],[596,17,520,11,"node"],[596,21,520,4],[597,0,521,3],[598,0,304,24],[599,0,304,24],[600,0,304,24],[600,37,523,15,"node"],[600,41,304,24],[600,43,523,21,"isBinding"],[600,52,304,24],[600,54,523,32,"contextDescription"],[600,72,304,24],[600,74,523,52],[601,0,524,4],[601,14,524,8,"isSimpleProperty"],[601,30,524,24],[601,31,524,25,"node"],[601,35,524,24],[601,36,524,4],[601,38,524,32],[602,0,525,6],[602,17,525,11,"toAssignable"],[602,29,525,6],[602,30,525,24,"node"],[602,34,525,28],[602,35,525,29,"value"],[602,40,525,6],[602,42,525,36,"isBinding"],[602,51,525,6],[602,53,525,47,"contextDescription"],[602,71,525,6],[603,0,526,6],[603,19,526,13,"node"],[603,23,526,6],[604,0,527,5],[606,0,529,4],[606,90,529,30,"node"],[606,94,529,4],[606,96,529,36,"isBinding"],[606,105,529,4],[606,107,529,47,"contextDescription"],[606,125,529,4],[607,0,530,3],[608,0,304,24],[609,0,304,24],[610,0,304,24],[610,57,532,35,"prop"],[610,61,304,24],[610,63,532,41,"isBinding"],[610,72,304,24],[610,74,532,52,"isLast"],[610,80,304,24],[610,82,532,60],[611,0,533,4],[611,14,533,8,"prop"],[611,18,533,12],[611,19,533,13,"kind"],[611,23,533,8],[611,28,533,22],[611,33,533,8],[611,37,533,31,"prop"],[611,41,533,35],[611,42,533,36,"kind"],[611,46,533,31],[611,51,533,45],[611,56,533,4],[611,58,533,52],[612,0,534,6],[612,18,534,12],[612,23,534,17,"raise"],[612,28,534,12],[612,29,534,23,"prop"],[612,33,534,27],[612,34,534,28,"key"],[612,37,534,23],[612,38,534,32,"start"],[612,43,534,12],[612,45,534,39],[612,92,534,12],[612,93,534,6],[613,0,535,5],[613,11,533,4],[613,17,535,11],[613,21,535,15,"prop"],[613,25,535,19],[613,26,535,20,"method"],[613,32,535,11],[613,34,535,28],[614,0,536,6],[614,18,536,12],[614,23,536,17,"raise"],[614,28,536,12],[614,29,536,23,"prop"],[614,33,536,27],[614,34,536,28,"key"],[614,37,536,23],[614,38,536,32,"start"],[614,43,536,12],[614,45,536,39],[614,83,536,12],[614,84,536,6],[615,0,537,5],[615,11,535,11],[615,17,537,11],[616,0,538,6],[616,105,538,45,"prop"],[616,109,538,6],[616,111,538,51,"isBinding"],[616,120,538,6],[616,122,538,62,"isLast"],[616,128,538,6],[617,0,539,5],[618,0,540,3],[619,0,304,24],[620,0,304,24],[621,0,304,24],[621,45,542,23,"node"],[621,49,304,24],[621,51,542,29,"optional"],[621,59,304,24],[621,61,542,39],[622,0,543,4],[622,91,543,31,"node"],[622,95,543,4],[622,97,543,37,"optional"],[622,105,543,4],[624,0,545,4],[624,14,545,8,"node"],[624,18,545,12],[624,19,545,13,"callee"],[624,25,545,8],[624,26,545,20,"type"],[624,30,545,8],[624,35,545,29],[624,43,545,4],[624,45,545,39],[625,0,546,6,"node"],[625,12,546,6,"node"],[625,16,546,10],[625,17,546,11,"type"],[625,21,546,6],[625,24,546,18],[625,42,546,6],[626,0,547,6,"node"],[626,12,547,6,"node"],[626,16,547,10],[626,17,547,11,"source"],[626,23,547,6],[626,26,547,20,"node"],[626,30,547,24],[626,31,547,25,"arguments"],[626,40,547,20],[626,41,547,35],[626,42,547,20],[626,43,547,6],[627,0,548,6],[627,19,548,13,"node"],[627,23,548,17],[627,24,548,18,"arguments"],[627,33,548,6],[628,0,549,6],[628,19,549,13,"node"],[628,23,549,17],[628,24,549,18,"callee"],[628,30,549,6],[629,0,550,5],[631,0,552,4],[631,17,552,11,"node"],[631,21,552,4],[632,0,553,3],[633,0,304,24],[634,0,304,24],[635,0,304,24],[635,45,555,23,"exprList"],[635,53,304,24],[635,55,555,33,"isParenthesizedExpr"],[635,74,304,24],[635,76,555,54],[636,0,556,4],[636,14,556,8],[636,15,556,9,"exprList"],[636,23,556,4],[636,25,556,19],[637,0,557,6],[638,0,558,5],[640,0,560,4],[640,91,560,31,"exprList"],[640,99,560,4],[640,101,560,41,"isParenthesizedExpr"],[640,120,560,4],[641,0,561,3],[642,0,304,24],[644,0,304,24],[645,0,304,24],[645,6,304,42,"superClass"],[645,16,304,24],[646,0,304,24],[646,3,304,0],[648,0,565,0],[648,6,565,6,"lineBreak"],[648,15,565,15],[648,18,565,18],[648,42,565,0],[649,0,566,0],[649,6,566,6,"lineBreakG"],[649,16,566,16],[649,19,566,19],[649,23,566,23,"RegExp"],[649,29,566,19],[649,30,566,30,"lineBreak"],[649,39,566,39],[649,40,566,40,"source"],[649,46,566,19],[649,48,566,48],[649,51,566,19],[649,52,566,0],[651,0,567,0],[651,11,567,9,"isNewLine"],[651,20,567,0],[651,21,567,19,"code"],[651,25,567,0],[651,27,567,25],[652,0,568,2],[652,12,568,10,"code"],[652,16,568,2],[653,0,569,4],[653,11,569,9],[653,13,569,4],[654,0,570,4],[654,11,570,9],[654,13,570,4],[655,0,571,4],[655,11,571,9],[655,15,571,4],[656,0,572,4],[656,11,572,9],[656,15,572,4],[657,0,573,6],[657,15,573,13],[657,19,573,6],[659,0,575,4],[660,0,576,6],[660,15,576,13],[660,20,576,6],[661,0,568,2],[662,0,578,1],[664,0,579,0],[664,6,579,6,"skipWhiteSpace"],[664,20,579,20],[664,23,579,23],[664,54,579,0],[666,0,580,0],[666,11,580,9,"isWhitespace"],[666,23,580,0],[666,24,580,22,"code"],[666,28,580,0],[666,30,580,28],[667,0,581,2],[667,12,581,10,"code"],[667,16,581,2],[668,0,582,4],[668,11,582,9],[668,17,582,4],[669,0,583,4],[669,11,583,9],[669,17,583,4],[670,0,584,4],[670,11,584,9],[670,17,584,4],[671,0,585,4],[671,11,585,9],[671,13,585,4],[672,0,586,4],[672,11,586,9],[672,14,586,4],[673,0,587,4],[673,11,587,9],[673,15,587,4],[674,0,588,4],[674,11,588,9],[674,17,588,4],[675,0,589,4],[675,11,589,9],[675,17,589,4],[676,0,590,4],[676,11,590,9],[676,17,590,4],[677,0,591,4],[677,11,591,9],[677,17,591,4],[678,0,592,4],[678,11,592,9],[678,17,592,4],[679,0,593,4],[679,11,593,9],[679,17,593,4],[680,0,594,4],[680,11,594,9],[680,17,594,4],[681,0,595,4],[681,11,595,9],[681,17,595,4],[682,0,596,4],[682,11,596,9],[682,17,596,4],[683,0,597,4],[683,11,597,9],[683,17,597,4],[684,0,598,4],[684,11,598,9],[684,17,598,4],[685,0,599,4],[685,11,599,9],[685,17,599,4],[686,0,600,4],[686,11,600,9],[686,17,600,4],[687,0,601,4],[687,11,601,9],[687,17,601,4],[688,0,602,4],[688,11,602,9],[688,17,602,4],[689,0,603,6],[689,15,603,13],[689,19,603,6],[691,0,605,4],[692,0,606,6],[692,15,606,13],[692,20,606,6],[693,0,581,2],[694,0,608,1],[696,6,610,6,"TokContext"],[696,16],[696,19,611,2],[696,39,611,14,"token"],[696,44,611,2],[696,46,611,21,"isExpr"],[696,52,611,2],[696,54,611,29,"preserveSpace"],[696,67,611,2],[696,69,611,44,"override"],[696,77,611,2],[696,79,611,54],[697,0,611,54],[699,0,612,4],[699,9,612,9,"token"],[699,14,612,4],[699,17,612,17,"token"],[699,22,612,4],[700,0,613,4],[700,9,613,9,"isExpr"],[700,15,613,4],[700,18,613,18],[700,19,613,19],[700,20,613,20,"isExpr"],[700,26,613,4],[701,0,614,4],[701,9,614,9,"preserveSpace"],[701,22,614,4],[701,25,614,25],[701,26,614,26],[701,27,614,27,"preserveSpace"],[701,40,614,4],[702,0,615,4],[702,9,615,9,"override"],[702,17,615,4],[702,20,615,20,"override"],[702,28,615,4],[703,0,616,3],[703,3],[705,0,619,0],[705,6,619,6,"types$1"],[705,13,619,13],[705,16,619,16],[706,0,620,2,"braceStatement"],[706,4,620,2,"braceStatement"],[706,18,620,16],[706,20,620,18],[706,24,620,22,"TokContext"],[706,34,620,18],[706,35,620,33],[706,38,620,18],[706,40,620,38],[706,45,620,18],[706,46,619,16],[707,0,621,2,"braceExpression"],[707,4,621,2,"braceExpression"],[707,19,621,17],[707,21,621,19],[707,25,621,23,"TokContext"],[707,35,621,19],[707,36,621,34],[707,39,621,19],[707,41,621,39],[707,45,621,19],[707,46,619,16],[708,0,622,2,"templateQuasi"],[708,4,622,2,"templateQuasi"],[708,17,622,15],[708,19,622,17],[708,23,622,21,"TokContext"],[708,33,622,17],[708,34,622,32],[708,38,622,17],[708,40,622,38],[708,45,622,17],[708,46,619,16],[709,0,623,2,"parenStatement"],[709,4,623,2,"parenStatement"],[709,18,623,16],[709,20,623,18],[709,24,623,22,"TokContext"],[709,34,623,18],[709,35,623,33],[709,38,623,18],[709,40,623,38],[709,45,623,18],[709,46,619,16],[710,0,624,2,"parenExpression"],[710,4,624,2,"parenExpression"],[710,19,624,17],[710,21,624,19],[710,25,624,23,"TokContext"],[710,35,624,19],[710,36,624,34],[710,39,624,19],[710,41,624,39],[710,45,624,19],[710,46,619,16],[711,0,625,2,"template"],[711,4,625,2,"template"],[711,12,625,10],[711,14,625,12],[711,18,625,16,"TokContext"],[711,28,625,12],[711,29,625,27],[711,32,625,12],[711,34,625,32],[711,38,625,12],[711,40,625,38],[711,44,625,12],[711,46,625,44],[711,56,625,44,"p"],[711,57,625,45],[712,0,625,45],[712,13,625,49,"p"],[712,14,625,50],[712,15,625,51,"readTmplToken"],[712,28,625,49],[712,30,625,45],[713,0,625,45],[713,5,625,12],[713,6,619,16],[714,0,626,2,"functionExpression"],[714,4,626,2,"functionExpression"],[714,22,626,20],[714,24,626,22],[714,28,626,26,"TokContext"],[714,38,626,22],[714,39,626,37],[714,49,626,22],[714,51,626,49],[714,55,626,22],[714,56,619,16],[715,0,627,2,"functionStatement"],[715,4,627,2,"functionStatement"],[715,21,627,19],[715,23,627,21],[715,27,627,25,"TokContext"],[715,37,627,21],[715,38,627,36],[715,48,627,21],[715,50,627,48],[715,55,627,21],[716,0,619,16],[716,3,619,0],[718,0,630,0,"types"],[718,2,630,0,"types"],[718,7,630,5],[718,8,630,6,"parenR"],[718,14,630,0],[718,15,630,13,"updateContext"],[718,28,630,0],[718,31,630,29,"types"],[718,36,630,34],[718,37,630,35,"braceR"],[718,43,630,29],[718,44,630,42,"updateContext"],[718,57,630,29],[718,60,630,58],[718,72,630,70],[719,0,631,2],[719,8,631,6],[719,13,631,11,"state"],[719,18,631,6],[719,19,631,17,"context"],[719,26,631,6],[719,27,631,25,"length"],[719,33,631,6],[719,38,631,36],[719,39,631,2],[719,41,631,39],[720,0,632,4],[720,11,632,9,"state"],[720,16,632,4],[720,17,632,15,"exprAllowed"],[720,28,632,4],[720,31,632,29],[720,35,632,4],[721,0,633,4],[722,0,634,3],[724,0,636,2],[724,8,636,6,"out"],[724,11,636,9],[724,14,636,12],[724,19,636,17,"state"],[724,24,636,12],[724,25,636,23,"context"],[724,32,636,12],[724,33,636,31,"pop"],[724,36,636,12],[724,38,636,2],[726,0,638,2],[726,8,638,6,"out"],[726,11,638,9],[726,16,638,14,"types$1"],[726,23,638,21],[726,24,638,22,"braceStatement"],[726,38,638,6],[726,42,638,40],[726,47,638,45,"curContext"],[726,57,638,40],[726,60,638,58,"token"],[726,65,638,40],[726,70,638,68],[726,80,638,2],[726,82,638,80],[727,0,639,4,"out"],[727,6,639,4,"out"],[727,9,639,7],[727,12,639,10],[727,17,639,15,"state"],[727,22,639,10],[727,23,639,21,"context"],[727,30,639,10],[727,31,639,29,"pop"],[727,34,639,10],[727,36,639,4],[728,0,640,3],[730,0,642,2],[730,9,642,7,"state"],[730,14,642,2],[730,15,642,13,"exprAllowed"],[730,26,642,2],[730,29,642,27],[730,30,642,28,"out"],[730,33,642,31],[730,34,642,32,"isExpr"],[730,40,642,2],[731,0,643,1],[731,3,630,0],[733,0,645,0,"types"],[733,2,645,0,"types"],[733,7,645,5],[733,8,645,6,"name"],[733,12,645,0],[733,13,645,11,"updateContext"],[733,26,645,0],[733,29,645,27],[733,39,645,37,"prevType"],[733,47,645,27],[733,49,645,47],[734,0,646,2],[734,8,646,6,"allowed"],[734,15,646,13],[734,18,646,16],[734,23,646,2],[736,0,648,2],[736,8,648,6,"prevType"],[736,16,648,14],[736,21,648,19,"types"],[736,26,648,24],[736,27,648,25,"dot"],[736,30,648,2],[736,32,648,30],[737,0,649,4],[737,10,649,8],[737,15,649,13,"state"],[737,20,649,8],[737,21,649,19,"value"],[737,26,649,8],[737,31,649,29],[737,35,649,8],[737,39,649,37],[737,40,649,38],[737,45,649,43,"state"],[737,50,649,38],[737,51,649,49,"exprAllowed"],[737,62,649,8],[737,66,649,64],[737,71,649,69,"state"],[737,76,649,64],[737,77,649,75,"value"],[737,82,649,64],[737,87,649,85],[737,94,649,64],[737,98,649,96],[737,103,649,101,"scope"],[737,108,649,96],[737,109,649,107,"inGenerator"],[737,120,649,4],[737,122,649,120],[738,0,650,6,"allowed"],[738,8,650,6,"allowed"],[738,15,650,13],[738,18,650,16],[738,22,650,6],[739,0,651,5],[740,0,652,3],[742,0,654,2],[742,9,654,7,"state"],[742,14,654,2],[742,15,654,13,"exprAllowed"],[742,26,654,2],[742,29,654,27,"allowed"],[742,36,654,2],[744,0,656,2],[744,8,656,6],[744,13,656,11,"state"],[744,18,656,6],[744,19,656,17,"isIterator"],[744,29,656,2],[744,31,656,29],[745,0,657,4],[745,11,657,9,"state"],[745,16,657,4],[745,17,657,15,"isIterator"],[745,27,657,4],[745,30,657,28],[745,35,657,4],[746,0,658,3],[747,0,659,1],[747,3,645,0],[749,0,661,0,"types"],[749,2,661,0,"types"],[749,7,661,5],[749,8,661,6,"braceL"],[749,14,661,0],[749,15,661,13,"updateContext"],[749,28,661,0],[749,31,661,29],[749,41,661,39,"prevType"],[749,49,661,29],[749,51,661,49],[750,0,662,2],[750,9,662,7,"state"],[750,14,662,2],[750,15,662,13,"context"],[750,22,662,2],[750,23,662,21,"push"],[750,27,662,2],[750,28,662,26],[750,33,662,31,"braceIsBlock"],[750,45,662,26],[750,46,662,44,"prevType"],[750,54,662,26],[750,58,662,56,"types$1"],[750,65,662,63],[750,66,662,64,"braceStatement"],[750,80,662,26],[750,83,662,81,"types$1"],[750,90,662,88],[750,91,662,89,"braceExpression"],[750,106,662,2],[751,0,663,2],[751,9,663,7,"state"],[751,14,663,2],[751,15,663,13,"exprAllowed"],[751,26,663,2],[751,29,663,27],[751,33,663,2],[752,0,664,1],[752,3,661,0],[754,0,666,0,"types"],[754,2,666,0,"types"],[754,7,666,5],[754,8,666,6,"dollarBraceL"],[754,20,666,0],[754,21,666,19,"updateContext"],[754,34,666,0],[754,37,666,35],[754,49,666,47],[755,0,667,2],[755,9,667,7,"state"],[755,14,667,2],[755,15,667,13,"context"],[755,22,667,2],[755,23,667,21,"push"],[755,27,667,2],[755,28,667,26,"types$1"],[755,35,667,33],[755,36,667,34,"templateQuasi"],[755,49,667,2],[756,0,668,2],[756,9,668,7,"state"],[756,14,668,2],[756,15,668,13,"exprAllowed"],[756,26,668,2],[756,29,668,27],[756,33,668,2],[757,0,669,1],[757,3,666,0],[759,0,671,0,"types"],[759,2,671,0,"types"],[759,7,671,5],[759,8,671,6,"parenL"],[759,14,671,0],[759,15,671,13,"updateContext"],[759,28,671,0],[759,31,671,29],[759,41,671,39,"prevType"],[759,49,671,29],[759,51,671,49],[760,0,672,2],[760,8,672,8,"statementParens"],[760,23,672,23],[760,26,672,26,"prevType"],[760,34,672,34],[760,39,672,39,"types"],[760,44,672,44],[760,45,672,45,"_if"],[760,48,672,26],[760,52,672,52,"prevType"],[760,60,672,60],[760,65,672,65,"types"],[760,70,672,70],[760,71,672,71,"_for"],[760,75,672,26],[760,79,672,79,"prevType"],[760,87,672,87],[760,92,672,92,"types"],[760,97,672,97],[760,98,672,98,"_with"],[760,103,672,26],[760,107,672,107,"prevType"],[760,115,672,115],[760,120,672,120,"types"],[760,125,672,125],[760,126,672,126,"_while"],[760,132,672,2],[761,0,673,2],[761,9,673,7,"state"],[761,14,673,2],[761,15,673,13,"context"],[761,22,673,2],[761,23,673,21,"push"],[761,27,673,2],[761,28,673,26,"statementParens"],[761,43,673,41],[761,46,673,44,"types$1"],[761,53,673,51],[761,54,673,52,"parenStatement"],[761,68,673,41],[761,71,673,69,"types$1"],[761,78,673,76],[761,79,673,77,"parenExpression"],[761,94,673,2],[762,0,674,2],[762,9,674,7,"state"],[762,14,674,2],[762,15,674,13,"exprAllowed"],[762,26,674,2],[762,29,674,27],[762,33,674,2],[763,0,675,1],[763,3,671,0],[765,0,677,0,"types"],[765,2,677,0,"types"],[765,7,677,5],[765,8,677,6,"incDec"],[765,14,677,0],[765,15,677,13,"updateContext"],[765,28,677,0],[765,31,677,29],[765,43,677,41],[765,44,677,43],[765,45,677,0],[767,0,679,0,"types"],[767,2,679,0,"types"],[767,7,679,5],[767,8,679,6,"_function"],[767,17,679,0],[767,18,679,16,"updateContext"],[767,31,679,0],[767,34,679,32,"types"],[767,39,679,37],[767,40,679,38,"_class"],[767,46,679,32],[767,47,679,45,"updateContext"],[767,60,679,32],[767,63,679,61],[767,73,679,71,"prevType"],[767,81,679,61],[767,83,679,81],[768,0,680,2],[768,8,680,6,"prevType"],[768,16,680,14],[768,17,680,15,"beforeExpr"],[768,27,680,6],[768,31,680,29,"prevType"],[768,39,680,37],[768,44,680,42,"types"],[768,49,680,47],[768,50,680,48,"semi"],[768,54,680,6],[768,58,680,56,"prevType"],[768,66,680,64],[768,71,680,69,"types"],[768,76,680,74],[768,77,680,75,"_else"],[768,82,680,6],[768,86,680,84],[768,88,680,86,"prevType"],[768,96,680,94],[768,101,680,99,"types"],[768,106,680,104],[768,107,680,105,"_return"],[768,114,680,86],[768,118,680,116,"lineBreak"],[768,127,680,125],[768,128,680,126,"test"],[768,132,680,116],[768,133,680,131],[768,138,680,136,"input"],[768,143,680,131],[768,144,680,142,"slice"],[768,149,680,131],[768,150,680,148],[768,155,680,153,"state"],[768,160,680,148],[768,161,680,159,"lastTokEnd"],[768,171,680,131],[768,173,680,171],[768,178,680,176,"state"],[768,183,680,171],[768,184,680,182,"start"],[768,189,680,131],[768,190,680,116],[768,191,680,84],[768,192,680,6],[768,196,680,194],[768,198,680,196],[768,199,680,197,"prevType"],[768,207,680,205],[768,212,680,210,"types"],[768,217,680,215],[768,218,680,216,"colon"],[768,223,680,197],[768,227,680,225,"prevType"],[768,235,680,233],[768,240,680,238,"types"],[768,245,680,243],[768,246,680,244,"braceL"],[768,252,680,196],[768,257,680,255],[768,262,680,260,"curContext"],[768,272,680,255],[768,279,680,277,"types$1"],[768,286,680,284],[768,287,680,285,"b_stat"],[768,293,680,194],[768,294,680,2],[768,296,680,294],[769,0,681,4],[769,11,681,9,"state"],[769,16,681,4],[769,17,681,15,"context"],[769,24,681,4],[769,25,681,23,"push"],[769,29,681,4],[769,30,681,28,"types$1"],[769,37,681,35],[769,38,681,36,"functionExpression"],[769,56,681,4],[770,0,682,3],[770,5,680,2],[770,11,682,9],[771,0,683,4],[771,11,683,9,"state"],[771,16,683,4],[771,17,683,15,"context"],[771,24,683,4],[771,25,683,23,"push"],[771,29,683,4],[771,30,683,28,"types$1"],[771,37,683,35],[771,38,683,36,"functionStatement"],[771,55,683,4],[772,0,684,3],[774,0,686,2],[774,9,686,7,"state"],[774,14,686,2],[774,15,686,13,"exprAllowed"],[774,26,686,2],[774,29,686,27],[774,34,686,2],[775,0,687,1],[775,3,679,0],[777,0,689,0,"types"],[777,2,689,0,"types"],[777,7,689,5],[777,8,689,6,"backQuote"],[777,17,689,0],[777,18,689,16,"updateContext"],[777,31,689,0],[777,34,689,32],[777,46,689,44],[778,0,690,2],[778,8,690,6],[778,13,690,11,"curContext"],[778,23,690,6],[778,30,690,28,"types$1"],[778,37,690,35],[778,38,690,36,"template"],[778,46,690,2],[778,48,690,46],[779,0,691,4],[779,11,691,9,"state"],[779,16,691,4],[779,17,691,15,"context"],[779,24,691,4],[779,25,691,23,"pop"],[779,28,691,4],[780,0,692,3],[780,5,690,2],[780,11,692,9],[781,0,693,4],[781,11,693,9,"state"],[781,16,693,4],[781,17,693,15,"context"],[781,24,693,4],[781,25,693,23,"push"],[781,29,693,4],[781,30,693,28,"types$1"],[781,37,693,35],[781,38,693,36,"template"],[781,46,693,4],[782,0,694,3],[784,0,696,2],[784,9,696,7,"state"],[784,14,696,2],[784,15,696,13,"exprAllowed"],[784,26,696,2],[784,29,696,27],[784,34,696,2],[785,0,697,1],[785,3,689,0],[787,0,699,0],[787,6,699,6,"reservedWords"],[787,19,699,19],[787,22,699,22],[788,0,700,2,"strict"],[788,4,700,2,"strict"],[788,10,700,8],[788,12,700,10],[788,13,700,11],[788,25,700,10],[788,27,700,25],[788,38,700,10],[788,40,700,38],[788,45,700,10],[788,47,700,45],[788,56,700,10],[788,58,700,56],[788,67,700,10],[788,69,700,67],[788,80,700,10],[788,82,700,80],[788,90,700,10],[788,92,700,90],[788,100,700,10],[788,102,700,100],[788,109,700,10],[788,110,699,22],[789,0,701,2,"strictBind"],[789,4,701,2,"strictBind"],[789,14,701,12],[789,16,701,14],[789,17,701,15],[789,23,701,14],[789,25,701,23],[789,36,701,14],[790,0,699,22],[790,3,699,0],[791,0,703,0],[791,6,703,6,"reservedWordsStrictSet"],[791,28,703,28],[791,31,703,31],[791,35,703,35,"Set"],[791,38,703,31],[791,39,703,39,"reservedWords"],[791,52,703,52],[791,53,703,53,"strict"],[791,59,703,31],[791,60,703,0],[792,0,704,0],[792,6,704,6,"reservedWordsStrictBindSet"],[792,32,704,32],[792,35,704,35],[792,39,704,39,"Set"],[792,42,704,35],[792,43,704,43,"reservedWords"],[792,56,704,56],[792,57,704,57,"strictBind"],[792,67,704,35],[792,68,704,0],[794,0,705,0],[794,6,705,6,"isReservedWord"],[794,20,705,20],[794,23,705,23],[794,32,705,6,"isReservedWord"],[794,46,705,23],[794,47,705,24,"word"],[794,51,705,23],[794,53,705,30,"inModule"],[794,61,705,23],[794,63,705,43],[795,0,706,2],[795,11,706,9,"inModule"],[795,19,706,17],[795,23,706,21,"word"],[795,27,706,25],[795,32,706,30],[795,39,706,9],[795,43,706,41,"word"],[795,47,706,45],[795,52,706,50],[795,58,706,2],[796,0,707,1],[796,3,705,0],[798,0,708,0],[798,11,708,9,"isStrictReservedWord"],[798,31,708,0],[798,32,708,30,"word"],[798,36,708,0],[798,38,708,36,"inModule"],[798,46,708,0],[798,48,708,46],[799,0,709,2],[799,11,709,9,"isReservedWord"],[799,25,709,23],[799,26,709,24,"word"],[799,30,709,23],[799,32,709,30,"inModule"],[799,40,709,23],[799,41,709,9],[799,45,709,43,"reservedWordsStrictSet"],[799,67,709,65],[799,68,709,66,"has"],[799,71,709,43],[799,72,709,70,"word"],[799,76,709,43],[799,77,709,2],[800,0,710,1],[802,0,711,0],[802,11,711,9,"isStrictBindOnlyReservedWord"],[802,39,711,0],[802,40,711,38,"word"],[802,44,711,0],[802,46,711,44],[803,0,712,2],[803,11,712,9,"reservedWordsStrictBindSet"],[803,37,712,35],[803,38,712,36,"has"],[803,41,712,9],[803,42,712,40,"word"],[803,46,712,9],[803,47,712,2],[804,0,713,1],[806,0,714,0],[806,11,714,9,"isStrictBindReservedWord"],[806,35,714,0],[806,36,714,34,"word"],[806,40,714,0],[806,42,714,40,"inModule"],[806,50,714,0],[806,52,714,50],[807,0,715,2],[807,11,715,9,"isStrictReservedWord"],[807,31,715,29],[807,32,715,30,"word"],[807,36,715,29],[807,38,715,36,"inModule"],[807,46,715,29],[807,47,715,9],[807,51,715,49,"isStrictBindOnlyReservedWord"],[807,79,715,77],[807,80,715,78,"word"],[807,84,715,77],[807,85,715,2],[808,0,716,1],[810,0,717,0],[810,11,717,9,"isKeyword"],[810,20,717,0],[810,21,717,19,"word"],[810,25,717,0],[810,27,717,25],[811,0,718,2],[811,11,718,9,"keywords"],[811,19,718,17],[811,20,718,18,"has"],[811,23,718,9],[811,24,718,22,"word"],[811,28,718,9],[811,29,718,2],[812,0,719,1],[814,0,720,0],[814,6,720,6,"keywordRelationalOperator"],[814,31,720,31],[814,34,720,34],[814,51,720,0],[815,0,721,0],[815,6,721,4,"nonASCIIidentifierStartChars"],[815,34,721,32],[815,37,721,35],[815,4316,721,0],[816,0,722,0],[816,6,722,4,"nonASCIIidentifierChars"],[816,29,722,27],[816,32,722,30],[816,2626,722,0],[817,0,723,0],[817,6,723,6,"nonASCIIidentifierStart"],[817,29,723,29],[817,32,723,32],[817,36,723,36,"RegExp"],[817,42,723,32],[817,43,723,43],[817,49,723,49,"nonASCIIidentifierStartChars"],[817,77,723,43],[817,80,723,80],[817,83,723,32],[817,84,723,0],[818,0,724,0],[818,6,724,6,"nonASCIIidentifier"],[818,24,724,24],[818,27,724,27],[818,31,724,31,"RegExp"],[818,37,724,27],[818,38,724,38],[818,44,724,44,"nonASCIIidentifierStartChars"],[818,72,724,38],[818,75,724,75,"nonASCIIidentifierChars"],[818,98,724,38],[818,101,724,101],[818,104,724,27],[818,105,724,0],[819,0,725,0,"nonASCIIidentifierStartChars"],[819,2,725,0,"nonASCIIidentifierStartChars"],[819,30,725,28],[819,33,725,31,"nonASCIIidentifierChars"],[819,56,725,54],[819,59,725,57],[819,63,725,0],[820,0,726,0],[820,6,726,6,"astralIdentifierStartCodes"],[820,32,726,32],[820,35,726,35],[820,36,726,36],[820,37,726,35],[820,39,726,39],[820,41,726,35],[820,43,726,43],[820,44,726,35],[820,46,726,46],[820,48,726,35],[820,50,726,50],[820,51,726,35],[820,53,726,53],[820,55,726,35],[820,57,726,57],[820,58,726,35],[820,60,726,60],[820,61,726,35],[820,63,726,63],[820,64,726,35],[820,66,726,66],[820,68,726,35],[820,70,726,70],[820,71,726,35],[820,73,726,73],[820,75,726,35],[820,77,726,77],[820,79,726,35],[820,81,726,81],[820,84,726,35],[820,86,726,86],[820,88,726,35],[820,90,726,90],[820,92,726,35],[820,94,726,94],[820,97,726,35],[820,99,726,99],[820,101,726,35],[820,103,726,103],[820,104,726,35],[820,106,726,106],[820,108,726,35],[820,110,726,110],[820,112,726,35],[820,114,726,114],[820,116,726,35],[820,118,726,118],[820,120,726,35],[820,122,726,122],[820,124,726,35],[820,126,726,126],[820,127,726,35],[820,129,726,129],[820,131,726,35],[820,133,726,133],[820,135,726,35],[820,137,726,137],[820,139,726,35],[820,141,726,141],[820,142,726,35],[820,144,726,144],[820,146,726,35],[820,148,726,148],[820,149,726,35],[820,151,726,151],[820,152,726,35],[820,154,726,154],[820,155,726,35],[820,157,726,157],[820,158,726,35],[820,160,726,160],[820,162,726,35],[820,164,726,164],[820,167,726,35],[820,169,726,169],[820,171,726,35],[820,173,726,173],[820,175,726,35],[820,177,726,177],[820,178,726,35],[820,180,726,180],[820,182,726,35],[820,184,726,184],[820,185,726,35],[820,187,726,187],[820,189,726,35],[820,191,726,191],[820,192,726,35],[820,194,726,194],[820,196,726,35],[820,198,726,198],[820,201,726,35],[820,203,726,203],[820,206,726,35],[820,208,726,208],[820,210,726,35],[820,212,726,212],[820,214,726,35],[820,216,726,216],[820,218,726,35],[820,220,726,220],[820,221,726,35],[820,223,726,223],[820,226,726,35],[820,228,726,228],[820,229,726,35],[820,231,726,231],[820,232,726,35],[820,234,726,234],[820,235,726,35],[820,237,726,237],[820,238,726,35],[820,240,726,240],[820,242,726,35],[820,244,726,244],[820,245,726,35],[820,247,726,247],[820,248,726,35],[820,250,726,250],[820,251,726,35],[820,253,726,253],[820,254,726,35],[820,256,726,256],[820,257,726,35],[820,259,726,259],[820,261,726,35],[820,263,726,263],[820,265,726,35],[820,267,726,267],[820,269,726,35],[820,271,726,271],[820,273,726,35],[820,275,726,275],[820,277,726,35],[820,279,726,279],[820,281,726,35],[820,283,726,283],[820,285,726,35],[820,287,726,287],[820,288,726,35],[820,290,726,290],[820,291,726,35],[820,293,726,293],[820,295,726,35],[820,297,726,297],[820,299,726,35],[820,301,726,301],[820,303,726,35],[820,305,726,305],[820,307,726,35],[820,309,726,309],[820,311,726,35],[820,313,726,313],[820,315,726,35],[820,317,726,317],[820,318,726,35],[820,320,726,320],[820,321,726,35],[820,323,726,323],[820,325,726,35],[820,327,726,327],[820,328,726,35],[820,330,726,330],[820,332,726,35],[820,334,726,334],[820,335,726,35],[820,337,726,337],[820,338,726,35],[820,340,726,340],[820,341,726,35],[820,343,726,343],[820,344,726,35],[820,346,726,346],[820,348,726,35],[820,350,726,350],[820,352,726,35],[820,354,726,354],[820,356,726,35],[820,358,726,358],[820,359,726,35],[820,361,726,361],[820,363,726,35],[820,365,726,365],[820,367,726,35],[820,369,726,369],[820,370,726,35],[820,372,726,372],[820,373,726,35],[820,375,726,375],[820,377,726,35],[820,379,726,379],[820,381,726,35],[820,383,726,383],[820,385,726,35],[820,387,726,387],[820,389,726,35],[820,391,726,391],[820,393,726,35],[820,395,726,395],[820,397,726,35],[820,399,726,399],[820,401,726,35],[820,403,726,403],[820,405,726,35],[820,407,726,407],[820,409,726,35],[820,411,726,411],[820,414,726,35],[820,416,726,416],[820,418,726,35],[820,420,726,420],[820,422,726,35],[820,424,726,424],[820,426,726,35],[820,428,726,428],[820,430,726,35],[820,432,726,432],[820,434,726,35],[820,436,726,436],[820,438,726,35],[820,440,726,440],[820,442,726,35],[820,444,726,444],[820,447,726,35],[820,449,726,449],[820,451,726,35],[820,453,726,453],[820,455,726,35],[820,457,726,457],[820,458,726,35],[820,460,726,460],[820,461,726,35],[820,463,726,463],[820,465,726,35],[820,467,726,467],[820,470,726,35],[820,472,726,472],[820,474,726,35],[820,476,726,476],[820,478,726,35],[820,480,726,480],[820,482,726,35],[820,484,726,484],[820,486,726,35],[820,488,726,488],[820,490,726,35],[820,492,726,492],[820,494,726,35],[820,496,726,496],[820,498,726,35],[820,500,726,500],[820,502,726,35],[820,504,726,504],[820,506,726,35],[820,508,726,508],[820,510,726,35],[820,512,726,512],[820,513,726,35],[820,515,726,515],[820,517,726,35],[820,519,726,519],[820,521,726,35],[820,523,726,523],[820,524,726,35],[820,526,726,526],[820,527,726,35],[820,529,726,529],[820,531,726,35],[820,533,726,533],[820,535,726,35],[820,537,726,537],[820,539,726,35],[820,541,726,541],[820,542,726,35],[820,544,726,544],[820,546,726,35],[820,548,726,548],[820,549,726,35],[820,551,726,551],[820,552,726,35],[820,554,726,554],[820,555,726,35],[820,557,726,557],[820,559,726,35],[820,561,726,561],[820,563,726,35],[820,565,726,565],[820,566,726,35],[820,568,726,568],[820,570,726,35],[820,572,726,572],[820,574,726,35],[820,576,726,576],[820,577,726,35],[820,579,726,579],[820,580,726,35],[820,582,726,582],[820,583,726,35],[820,585,726,585],[820,586,726,35],[820,588,726,588],[820,589,726,35],[820,591,726,591],[820,592,726,35],[820,594,726,594],[820,596,726,35],[820,598,726,598],[820,599,726,35],[820,601,726,601],[820,602,726,35],[820,604,726,604],[820,605,726,35],[820,607,726,607],[820,609,726,35],[820,611,726,611],[820,613,726,35],[820,615,726,615],[820,616,726,35],[820,618,726,618],[820,619,726,35],[820,621,726,621],[820,622,726,35],[820,624,726,624],[820,625,726,35],[820,627,726,627],[820,629,726,35],[820,631,726,631],[820,632,726,35],[820,634,726,634],[820,635,726,35],[820,637,726,637],[820,638,726,35],[820,640,726,640],[820,641,726,35],[820,643,726,643],[820,644,726,35],[820,646,726,646],[820,647,726,35],[820,649,726,649],[820,650,726,35],[820,652,726,652],[820,653,726,35],[820,655,726,655],[820,657,726,35],[820,659,726,659],[820,660,726,35],[820,662,726,662],[820,664,726,35],[820,666,726,666],[820,667,726,35],[820,669,726,669],[820,672,726,35],[820,674,726,674],[820,676,726,35],[820,678,726,678],[820,680,726,35],[820,682,726,682],[820,683,726,35],[820,685,726,685],[820,687,726,35],[820,689,726,689],[820,690,726,35],[820,692,726,692],[820,694,726,35],[820,696,726,696],[820,698,726,35],[820,700,726,700],[820,702,726,35],[820,704,726,704],[820,705,726,35],[820,707,726,707],[820,708,726,35],[820,710,726,710],[820,711,726,35],[820,713,726,713],[820,716,726,35],[820,718,726,718],[820,720,726,35],[820,722,726,722],[820,724,726,35],[820,726,726,726],[820,727,726,35],[820,729,726,729],[820,731,726,35],[820,733,726,733],[820,735,726,35],[820,737,726,737],[820,739,726,35],[820,741,726,741],[820,742,726,35],[820,744,726,744],[820,746,726,35],[820,748,726,748],[820,750,726,35],[820,752,726,752],[820,754,726,35],[820,756,726,756],[820,757,726,35],[820,759,726,759],[820,761,726,35],[820,763,726,763],[820,765,726,35],[820,767,726,767],[820,770,726,35],[820,772,726,772],[820,774,726,35],[820,776,726,776],[820,779,726,35],[820,781,726,781],[820,783,726,35],[820,785,726,785],[820,787,726,35],[820,789,726,789],[820,790,726,35],[820,792,726,792],[820,795,726,35],[820,797,726,797],[820,798,726,35],[820,800,726,800],[820,801,726,35],[820,803,726,803],[820,805,726,35],[820,807,726,807],[820,809,726,35],[820,811,726,811],[820,812,726,35],[820,814,726,814],[820,815,726,35],[820,817,726,817],[820,818,726,35],[820,820,726,820],[820,822,726,35],[820,824,726,824],[820,825,726,35],[820,827,726,827],[820,829,726,35],[820,831,726,831],[820,833,726,35],[820,835,726,835],[820,836,726,35],[820,838,726,838],[820,839,726,35],[820,841,726,841],[820,843,726,35],[820,845,726,845],[820,846,726,35],[820,848,726,848],[820,850,726,35],[820,852,726,852],[820,854,726,35],[820,856,726,856],[820,858,726,35],[820,860,726,860],[820,861,726,35],[820,863,726,863],[820,865,726,35],[820,867,726,867],[820,869,726,35],[820,871,726,871],[820,874,726,35],[820,876,726,876],[820,877,726,35],[820,879,726,879],[820,880,726,35],[820,882,726,882],[820,884,726,35],[820,886,726,886],[820,888,726,35],[820,890,726,890],[820,891,726,35],[820,893,726,893],[820,895,726,35],[820,897,726,897],[820,899,726,35],[820,901,726,901],[820,904,726,35],[820,906,726,906],[820,907,726,35],[820,909,726,909],[820,910,726,35],[820,912,726,912],[820,913,726,35],[820,915,726,915],[820,916,726,35],[820,918,726,918],[820,920,726,35],[820,922,726,922],[820,924,726,35],[820,926,726,926],[820,927,726,35],[820,929,726,929],[820,931,726,35],[820,933,726,933],[820,934,726,35],[820,936,726,936],[820,937,726,35],[820,939,726,939],[820,940,726,35],[820,942,726,942],[820,943,726,35],[820,945,726,945],[820,947,726,35],[820,949,726,949],[820,951,726,35],[820,953,726,953],[820,954,726,35],[820,956,726,956],[820,959,726,35],[820,961,726,961],[820,963,726,35],[820,965,726,965],[820,968,726,35],[820,970,726,970],[820,973,726,35],[820,975,726,975],[820,978,726,35],[820,980,726,980],[820,983,726,35],[820,985,726,985],[820,987,726,35],[820,989,726,989],[820,992,726,35],[820,994,726,994],[820,998,726,35],[820,1000,726,1000],[820,1004,726,35],[820,1006,726,1006],[820,1010,726,35],[820,1012,726,1012],[820,1015,726,35],[820,1017,726,1017],[820,1021,726,35],[820,1023,726,1023],[820,1026,726,35],[820,1028,726,1028],[820,1029,726,35],[820,1031,726,1031],[820,1033,726,35],[820,1035,726,1035],[820,1038,726,35],[820,1040,726,1040],[820,1042,726,35],[820,1044,726,1044],[820,1046,726,35],[820,1048,726,1048],[820,1050,726,35],[820,1052,726,1052],[820,1054,726,35],[820,1056,726,1056],[820,1057,726,35],[820,1059,726,1059],[820,1061,726,35],[820,1063,726,1063],[820,1065,726,35],[820,1067,726,1067],[820,1068,726,35],[820,1070,726,1070],[820,1072,726,35],[820,1074,726,1074],[820,1077,726,35],[820,1079,726,1079],[820,1081,726,35],[820,1083,726,1083],[820,1086,726,35],[820,1088,726,1088],[820,1090,726,35],[820,1092,726,1092],[820,1093,726,35],[820,1095,726,1095],[820,1096,726,35],[820,1098,726,1098],[820,1100,726,35],[820,1102,726,1102],[820,1104,726,35],[820,1106,726,1106],[820,1108,726,35],[820,1110,726,1110],[820,1111,726,35],[820,1113,726,1113],[820,1114,726,35],[820,1116,726,1116],[820,1117,726,35],[820,1119,726,1119],[820,1121,726,35],[820,1123,726,1123],[820,1127,726,35],[820,1129,726,1129],[820,1130,726,35],[820,1132,726,1132],[820,1135,726,35],[820,1137,726,1137],[820,1141,726,35],[820,1143,726,1143],[820,1146,726,35],[820,1148,726,1148],[820,1150,726,35],[820,1152,726,1152],[820,1153,726,35],[820,1155,726,1155],[820,1157,726,35],[820,1159,726,1159],[820,1160,726,35],[820,1162,726,1162],[820,1163,726,35],[820,1165,726,1165],[820,1168,726,35],[820,1170,726,1170],[820,1174,726,35],[820,1176,726,1176],[820,1179,726,35],[820,1181,726,1181],[820,1182,726,35],[820,1184,726,1184],[820,1186,726,35],[820,1188,726,1188],[820,1189,726,35],[820,1191,726,1191],[820,1192,726,35],[820,1194,726,1194],[820,1195,726,35],[820,1197,726,1197],[820,1198,726,35],[820,1200,726,1200],[820,1204,726,35],[820,1206,726,1206],[820,1208,726,35],[820,1210,726,1210],[820,1211,726,35],[820,1213,726,1213],[820,1215,726,35],[820,1217,726,1217],[820,1218,726,35],[820,1220,726,1220],[820,1221,726,35],[820,1223,726,1223],[820,1224,726,35],[820,1226,726,1226],[820,1227,726,35],[820,1229,726,1229],[820,1230,726,35],[820,1232,726,1232],[820,1233,726,35],[820,1235,726,1235],[820,1236,726,35],[820,1238,726,1238],[820,1239,726,35],[820,1241,726,1241],[820,1242,726,35],[820,1244,726,1244],[820,1246,726,35],[820,1248,726,1248],[820,1249,726,35],[820,1251,726,1251],[820,1252,726,35],[820,1254,726,1254],[820,1255,726,35],[820,1257,726,1257],[820,1258,726,35],[820,1260,726,1260],[820,1261,726,35],[820,1263,726,1263],[820,1265,726,35],[820,1267,726,1267],[820,1268,726,35],[820,1270,726,1270],[820,1271,726,35],[820,1273,726,1273],[820,1274,726,35],[820,1276,726,1276],[820,1277,726,35],[820,1279,726,1279],[820,1280,726,35],[820,1282,726,1282],[820,1283,726,35],[820,1285,726,1285],[820,1286,726,35],[820,1288,726,1288],[820,1290,726,35],[820,1292,726,1292],[820,1293,726,35],[820,1295,726,1295],[820,1296,726,35],[820,1298,726,1298],[820,1299,726,35],[820,1301,726,1301],[820,1302,726,35],[820,1304,726,1304],[820,1305,726,35],[820,1307,726,1307],[820,1308,726,35],[820,1310,726,1310],[820,1311,726,35],[820,1313,726,1313],[820,1314,726,35],[820,1316,726,1316],[820,1317,726,35],[820,1319,726,1319],[820,1322,726,35],[820,1324,726,1324],[820,1325,726,35],[820,1327,726,1327],[820,1329,726,35],[820,1331,726,1331],[820,1332,726,35],[820,1334,726,1334],[820,1336,726,35],[820,1338,726,1338],[820,1339,726,35],[820,1341,726,1341],[820,1343,726,35],[820,1345,726,1345],[820,1346,726,35],[820,1348,726,1348],[820,1350,726,35],[820,1352,726,1352],[820,1353,726,35],[820,1355,726,1355],[820,1357,726,35],[820,1359,726,1359],[820,1360,726,35],[820,1362,726,1362],[820,1364,726,35],[820,1366,726,1366],[820,1367,726,35],[820,1369,726,1369],[820,1371,726,35],[820,1373,726,1373],[820,1374,726,35],[820,1376,726,1376],[820,1378,726,35],[820,1380,726,1380],[820,1381,726,35],[820,1383,726,1383],[820,1385,726,35],[820,1387,726,1387],[820,1388,726,35],[820,1390,726,1390],[820,1392,726,35],[820,1394,726,1394],[820,1395,726,35],[820,1397,726,1397],[820,1398,726,35],[820,1400,726,1400],[820,1404,726,35],[820,1406,726,1406],[820,1408,726,35],[820,1410,726,1410],[820,1412,726,35],[820,1414,726,1414],[820,1415,726,35],[820,1417,726,1417],[820,1419,726,35],[820,1421,726,1421],[820,1422,726,35],[820,1424,726,1424],[820,1427,726,35],[820,1429,726,1429],[820,1431,726,35],[820,1433,726,1433],[820,1437,726,35],[820,1439,726,1439],[820,1442,726,35],[820,1444,726,1444],[820,1446,726,35],[820,1448,726,1448],[820,1450,726,35],[820,1452,726,1452],[820,1453,726,35],[820,1455,726,1455],[820,1456,726,35],[820,1458,726,1458],[820,1462,726,35],[820,1464,726,1464],[820,1465,726,35],[820,1467,726,1467],[820,1468,726,35],[820,1470,726,1470],[820,1472,726,35],[820,1474,726,1474],[820,1475,726,35],[820,1477,726,1477],[820,1478,726,35],[820,1480,726,1480],[820,1481,726,35],[820,1483,726,1483],[820,1484,726,35],[820,1486,726,1486],[820,1487,726,35],[820,1489,726,1489],[820,1490,726,35],[820,1492,726,1492],[820,1493,726,35],[820,1495,726,1495],[820,1496,726,35],[820,1498,726,1498],[820,1499,726,35],[820,1501,726,1501],[820,1502,726,35],[820,1504,726,1504],[820,1505,726,35],[820,1507,726,1507],[820,1508,726,35],[820,1510,726,1510],[820,1511,726,35],[820,1513,726,1513],[820,1514,726,35],[820,1516,726,1516],[820,1517,726,35],[820,1519,726,1519],[820,1520,726,35],[820,1522,726,1522],[820,1523,726,35],[820,1525,726,1525],[820,1526,726,35],[820,1528,726,1528],[820,1529,726,35],[820,1531,726,1531],[820,1532,726,35],[820,1534,726,1534],[820,1535,726,35],[820,1537,726,1537],[820,1538,726,35],[820,1540,726,1540],[820,1541,726,35],[820,1543,726,1543],[820,1544,726,35],[820,1546,726,1546],[820,1547,726,35],[820,1549,726,1549],[820,1550,726,35],[820,1552,726,1552],[820,1553,726,35],[820,1555,726,1555],[820,1556,726,35],[820,1558,726,1558],[820,1559,726,35],[820,1561,726,1561],[820,1562,726,35],[820,1564,726,1564],[820,1565,726,35],[820,1567,726,1567],[820,1568,726,35],[820,1570,726,1570],[820,1571,726,35],[820,1573,726,1573],[820,1574,726,35],[820,1576,726,1576],[820,1577,726,35],[820,1579,726,1579],[820,1580,726,35],[820,1582,726,1582],[820,1583,726,35],[820,1585,726,1585],[820,1586,726,35],[820,1588,726,1588],[820,1589,726,35],[820,1591,726,1591],[820,1592,726,35],[820,1594,726,1594],[820,1595,726,35],[820,1597,726,1597],[820,1598,726,35],[820,1600,726,1600],[820,1601,726,35],[820,1603,726,1603],[820,1604,726,35],[820,1606,726,1606],[820,1607,726,35],[820,1609,726,1609],[820,1610,726,35],[820,1612,726,1612],[820,1613,726,35],[820,1615,726,1615],[820,1616,726,35],[820,1618,726,1618],[820,1619,726,35],[820,1621,726,1621],[820,1622,726,35],[820,1624,726,1624],[820,1625,726,35],[820,1627,726,1627],[820,1628,726,35],[820,1630,726,1630],[820,1631,726,35],[820,1633,726,1633],[820,1634,726,35],[820,1636,726,1636],[820,1637,726,35],[820,1639,726,1639],[820,1641,726,35],[820,1643,726,1643],[820,1644,726,35],[820,1646,726,1646],[820,1647,726,35],[820,1649,726,1649],[820,1650,726,35],[820,1652,726,1652],[820,1653,726,35],[820,1655,726,1655],[820,1656,726,35],[820,1658,726,1658],[820,1660,726,35],[820,1662,726,1662],[820,1666,726,35],[820,1668,726,1668],[820,1673,726,35],[820,1675,726,1675],[820,1677,726,35],[820,1679,726,1679],[820,1683,726,35],[820,1685,726,1685],[820,1687,726,35],[820,1689,726,1689],[820,1692,726,35],[820,1694,726,1694],[820,1695,726,35],[820,1697,726,1697],[820,1701,726,35],[820,1703,726,1703],[820,1705,726,35],[820,1707,726,1707],[820,1711,726,35],[820,1713,726,1713],[820,1717,726,35],[820,1719,726,1719],[820,1722,726,35],[820,1723,726,0],[821,0,727,0],[821,6,727,6,"astralIdentifierCodes"],[821,27,727,27],[821,30,727,30],[821,31,727,31],[821,34,727,30],[821,36,727,36],[821,37,727,30],[821,39,727,39],[821,42,727,30],[821,44,727,44],[821,45,727,30],[821,47,727,47],[821,50,727,30],[821,52,727,52],[821,53,727,30],[821,55,727,55],[821,58,727,30],[821,60,727,60],[821,61,727,30],[821,63,727,63],[821,67,727,30],[821,69,727,69],[821,70,727,30],[821,72,727,72],[821,73,727,30],[821,75,727,75],[821,76,727,30],[821,78,727,78],[821,79,727,30],[821,81,727,81],[821,82,727,30],[821,84,727,84],[821,86,727,30],[821,88,727,88],[821,89,727,30],[821,91,727,91],[821,92,727,30],[821,94,727,94],[821,95,727,30],[821,97,727,97],[821,100,727,30],[821,102,727,102],[821,103,727,30],[821,105,727,105],[821,108,727,30],[821,110,727,110],[821,111,727,30],[821,113,727,113],[821,114,727,30],[821,116,727,116],[821,117,727,30],[821,119,727,119],[821,122,727,30],[821,124,727,124],[821,126,727,30],[821,128,727,128],[821,131,727,30],[821,133,727,133],[821,134,727,30],[821,136,727,136],[821,138,727,30],[821,140,727,140],[821,142,727,30],[821,144,727,144],[821,146,727,30],[821,148,727,148],[821,149,727,30],[821,151,727,151],[821,153,727,30],[821,155,727,155],[821,156,727,30],[821,158,727,158],[821,160,727,30],[821,162,727,162],[821,164,727,30],[821,166,727,166],[821,168,727,30],[821,170,727,170],[821,171,727,30],[821,173,727,173],[821,174,727,30],[821,176,727,176],[821,177,727,30],[821,179,727,179],[821,181,727,30],[821,183,727,183],[821,185,727,30],[821,187,727,187],[821,188,727,30],[821,190,727,190],[821,191,727,30],[821,193,727,193],[821,194,727,30],[821,196,727,196],[821,197,727,30],[821,199,727,199],[821,201,727,30],[821,203,727,203],[821,204,727,30],[821,206,727,206],[821,208,727,30],[821,210,727,210],[821,211,727,30],[821,213,727,213],[821,215,727,30],[821,217,727,217],[821,219,727,30],[821,221,727,221],[821,222,727,30],[821,224,727,224],[821,225,727,30],[821,227,727,227],[821,228,727,30],[821,230,727,230],[821,231,727,30],[821,233,727,233],[821,235,727,30],[821,237,727,237],[821,239,727,30],[821,241,727,241],[821,242,727,30],[821,244,727,244],[821,245,727,30],[821,247,727,247],[821,250,727,30],[821,252,727,252],[821,254,727,30],[821,256,727,256],[821,257,727,30],[821,259,727,259],[821,260,727,30],[821,262,727,262],[821,263,727,30],[821,265,727,265],[821,266,727,30],[821,268,727,268],[821,270,727,30],[821,272,727,272],[821,273,727,30],[821,275,727,275],[821,276,727,30],[821,278,727,278],[821,279,727,30],[821,281,727,281],[821,282,727,30],[821,284,727,284],[821,285,727,30],[821,287,727,287],[821,288,727,30],[821,290,727,290],[821,291,727,30],[821,293,727,293],[821,295,727,30],[821,297,727,297],[821,298,727,30],[821,300,727,300],[821,302,727,30],[821,304,727,304],[821,305,727,30],[821,307,727,307],[821,308,727,30],[821,310,727,310],[821,311,727,30],[821,313,727,313],[821,314,727,30],[821,316,727,316],[821,317,727,30],[821,319,727,319],[821,322,727,30],[821,324,727,324],[821,326,727,30],[821,328,727,328],[821,330,727,30],[821,332,727,332],[821,333,727,30],[821,335,727,335],[821,336,727,30],[821,338,727,338],[821,339,727,30],[821,341,727,341],[821,343,727,30],[821,345,727,345],[821,347,727,30],[821,349,727,349],[821,351,727,30],[821,353,727,353],[821,354,727,30],[821,356,727,356],[821,359,727,30],[821,361,727,361],[821,362,727,30],[821,364,727,364],[821,365,727,30],[821,367,727,367],[821,368,727,30],[821,370,727,370],[821,372,727,30],[821,374,727,374],[821,375,727,30],[821,377,727,377],[821,379,727,30],[821,381,727,381],[821,383,727,30],[821,385,727,385],[821,387,727,30],[821,389,727,389],[821,390,727,30],[821,392,727,392],[821,394,727,30],[821,396,727,396],[821,398,727,30],[821,400,727,400],[821,401,727,30],[821,403,727,403],[821,404,727,30],[821,406,727,406],[821,408,727,30],[821,410,727,410],[821,412,727,30],[821,414,727,414],[821,415,727,30],[821,417,727,417],[821,418,727,30],[821,420,727,420],[821,423,727,30],[821,425,727,425],[821,427,727,30],[821,429,727,429],[821,432,727,30],[821,434,727,434],[821,435,727,30],[821,437,727,437],[821,440,727,30],[821,442,727,442],[821,443,727,30],[821,445,727,445],[821,446,727,30],[821,448,727,448],[821,449,727,30],[821,451,727,451],[821,452,727,30],[821,454,727,454],[821,455,727,30],[821,457,727,457],[821,459,727,30],[821,461,727,461],[821,462,727,30],[821,464,727,464],[821,466,727,30],[821,468,727,468],[821,469,727,30],[821,471,727,471],[821,472,727,30],[821,474,727,474],[821,475,727,30],[821,477,727,477],[821,478,727,30],[821,480,727,480],[821,481,727,30],[821,483,727,483],[821,485,727,30],[821,487,727,487],[821,489,727,30],[821,491,727,491],[821,493,727,30],[821,495,727,495],[821,497,727,30],[821,499,727,499],[821,502,727,30],[821,504,727,504],[821,505,727,30],[821,507,727,507],[821,508,727,30],[821,510,727,510],[821,511,727,30],[821,513,727,513],[821,515,727,30],[821,517,727,517],[821,518,727,30],[821,520,727,520],[821,522,727,30],[821,524,727,524],[821,526,727,30],[821,528,727,528],[821,529,727,30],[821,531,727,531],[821,533,727,30],[821,535,727,535],[821,538,727,30],[821,540,727,540],[821,541,727,30],[821,543,727,543],[821,544,727,30],[821,546,727,546],[821,547,727,30],[821,549,727,549],[821,550,727,30],[821,552,727,552],[821,553,727,30],[821,555,727,555],[821,556,727,30],[821,558,727,558],[821,559,727,30],[821,561,727,561],[821,562,727,30],[821,564,727,564],[821,565,727,30],[821,567,727,567],[821,568,727,30],[821,570,727,570],[821,571,727,30],[821,573,727,573],[821,575,727,30],[821,577,727,577],[821,578,727,30],[821,580,727,580],[821,581,727,30],[821,583,727,583],[821,584,727,30],[821,586,727,586],[821,587,727,30],[821,589,727,589],[821,590,727,30],[821,592,727,592],[821,593,727,30],[821,595,727,595],[821,596,727,30],[821,598,727,598],[821,601,727,30],[821,603,727,603],[821,604,727,30],[821,606,727,606],[821,611,727,30],[821,613,727,613],[821,614,727,30],[821,616,727,616],[821,619,727,30],[821,621,727,621],[821,622,727,30],[821,624,727,624],[821,626,727,30],[821,628,727,628],[821,629,727,30],[821,631,727,631],[821,633,727,30],[821,635,727,635],[821,636,727,30],[821,638,727,638],[821,642,727,30],[821,644,727,644],[821,645,727,30],[821,647,727,647],[821,648,727,30],[821,650,727,650],[821,652,727,30],[821,654,727,654],[821,655,727,30],[821,657,727,657],[821,658,727,30],[821,660,727,660],[821,665,727,30],[821,667,727,667],[821,668,727,30],[821,670,727,670],[821,674,727,30],[821,676,727,676],[821,677,727,30],[821,679,727,679],[821,680,727,30],[821,682,727,682],[821,683,727,30],[821,685,727,685],[821,686,727,30],[821,688,727,688],[821,689,727,30],[821,691,727,691],[821,692,727,30],[821,694,727,694],[821,695,727,30],[821,697,727,697],[821,699,727,30],[821,701,727,701],[821,702,727,30],[821,704,727,704],[821,707,727,30],[821,709,727,709],[821,710,727,30],[821,712,727,712],[821,716,727,30],[821,718,727,718],[821,720,727,30],[821,722,727,722],[821,725,727,30],[821,727,727,727],[821,729,727,30],[821,731,727,731],[821,732,727,30],[821,734,727,734],[821,736,727,30],[821,738,727,738],[821,739,727,30],[821,741,727,741],[821,742,727,30],[821,744,727,744],[821,746,727,30],[821,748,727,748],[821,749,727,30],[821,751,727,751],[821,753,727,30],[821,755,727,755],[821,756,727,30],[821,758,727,758],[821,759,727,30],[821,761,727,761],[821,763,727,30],[821,765,727,765],[821,769,727,30],[821,771,727,771],[821,772,727,30],[821,774,727,774],[821,775,727,30],[821,777,727,777],[821,779,727,30],[821,781,727,781],[821,782,727,30],[821,784,727,784],[821,785,727,30],[821,787,727,787],[821,788,727,30],[821,790,727,790],[821,791,727,30],[821,793,727,793],[821,794,727,30],[821,796,727,796],[821,797,727,30],[821,799,727,799],[821,802,727,30],[821,804,727,804],[821,805,727,30],[821,807,727,807],[821,809,727,30],[821,811,727,811],[821,812,727,30],[821,814,727,814],[821,817,727,30],[821,819,727,819],[821,821,727,30],[821,823,727,823],[821,827,727,30],[821,829,727,829],[821,830,727,30],[821,832,727,832],[821,835,727,30],[821,837,727,837],[821,838,727,30],[821,840,727,840],[821,841,727,30],[821,843,727,843],[821,844,727,30],[821,846,727,846],[821,852,727,30],[821,854,727,854],[821,857,727,30],[821,858,727,0],[823,0,729,0],[823,11,729,9,"isInAstralSet"],[823,24,729,0],[823,25,729,23,"code"],[823,29,729,0],[823,31,729,29,"set"],[823,34,729,0],[823,36,729,34],[824,0,730,2],[824,8,730,6,"pos"],[824,11,730,9],[824,14,730,12],[824,21,730,2],[826,0,732,2],[826,9,732,7],[826,13,732,11,"i"],[826,14,732,12],[826,17,732,15],[826,18,732,7],[826,20,732,18,"length"],[826,26,732,24],[826,29,732,27,"set"],[826,32,732,30],[826,33,732,31,"length"],[826,39,732,2],[826,41,732,39,"i"],[826,42,732,40],[826,45,732,43,"length"],[826,51,732,2],[826,53,732,51,"i"],[826,54,732,52],[826,58,732,56],[826,59,732,2],[826,61,732,59],[827,0,733,4,"pos"],[827,6,733,4,"pos"],[827,9,733,7],[827,13,733,11,"set"],[827,16,733,14],[827,17,733,15,"i"],[827,18,733,14],[827,19,733,4],[828,0,734,4],[828,10,734,8,"pos"],[828,13,734,11],[828,16,734,14,"code"],[828,20,734,4],[828,22,734,20],[828,29,734,27],[828,34,734,20],[829,0,735,4,"pos"],[829,6,735,4,"pos"],[829,9,735,7],[829,13,735,11,"set"],[829,16,735,14],[829,17,735,15,"i"],[829,18,735,16],[829,21,735,19],[829,22,735,14],[829,23,735,4],[830,0,736,4],[830,10,736,8,"pos"],[830,13,736,11],[830,17,736,15,"code"],[830,21,736,4],[830,23,736,21],[830,30,736,28],[830,34,736,21],[831,0,737,3],[833,0,739,2],[833,11,739,9],[833,16,739,2],[834,0,740,1],[836,0,742,0],[836,11,742,9,"isIdentifierStart"],[836,28,742,0],[836,29,742,27,"code"],[836,33,742,0],[836,35,742,33],[837,0,743,2],[837,8,743,6,"code"],[837,12,743,10],[837,15,743,13],[837,17,743,2],[837,19,743,17],[837,26,743,24,"code"],[837,30,743,28],[837,35,743,33],[837,37,743,17],[838,0,744,2],[838,8,744,6,"code"],[838,12,744,10],[838,16,744,14],[838,18,744,2],[838,20,744,18],[838,27,744,25],[838,31,744,18],[839,0,745,2],[839,8,745,6,"code"],[839,12,745,10],[839,15,745,13],[839,17,745,2],[839,19,745,17],[839,26,745,24,"code"],[839,30,745,28],[839,35,745,33],[839,37,745,17],[840,0,746,2],[840,8,746,6,"code"],[840,12,746,10],[840,16,746,14],[840,19,746,2],[840,21,746,19],[840,28,746,26],[840,32,746,19],[842,0,748,2],[842,8,748,6,"code"],[842,12,748,10],[842,16,748,14],[842,22,748,2],[842,24,748,22],[843,0,749,4],[843,13,749,11,"code"],[843,17,749,15],[843,21,749,19],[843,25,749,11],[843,29,749,27,"nonASCIIidentifierStart"],[843,52,749,50],[843,53,749,51,"test"],[843,57,749,27],[843,58,749,56,"String"],[843,64,749,62],[843,65,749,63,"fromCharCode"],[843,77,749,56],[843,78,749,76,"code"],[843,82,749,56],[843,83,749,27],[843,84,749,4],[844,0,750,3],[846,0,752,2],[846,11,752,9,"isInAstralSet"],[846,24,752,22],[846,25,752,23,"code"],[846,29,752,22],[846,31,752,29,"astralIdentifierStartCodes"],[846,57,752,22],[846,58,752,2],[847,0,753,1],[849,0,754,0],[849,11,754,9,"isIteratorStart"],[849,26,754,0],[849,27,754,25,"current"],[849,34,754,0],[849,36,754,34,"next"],[849,40,754,0],[849,42,754,40],[850,0,755,2],[850,11,755,9,"current"],[850,18,755,16],[850,23,755,21],[850,25,755,9],[850,29,755,27,"next"],[850,33,755,31],[850,38,755,36],[850,40,755,2],[851,0,756,1],[853,0,757,0],[853,11,757,9,"isIdentifierChar"],[853,27,757,0],[853,28,757,26,"code"],[853,32,757,0],[853,34,757,32],[854,0,758,2],[854,8,758,6,"code"],[854,12,758,10],[854,15,758,13],[854,17,758,2],[854,19,758,17],[854,26,758,24,"code"],[854,30,758,28],[854,35,758,33],[854,37,758,17],[855,0,759,2],[855,8,759,6,"code"],[855,12,759,10],[855,15,759,13],[855,17,759,2],[855,19,759,17],[855,26,759,24],[855,30,759,17],[856,0,760,2],[856,8,760,6,"code"],[856,12,760,10],[856,15,760,13],[856,17,760,2],[856,19,760,17],[856,26,760,24],[856,31,760,17],[857,0,761,2],[857,8,761,6,"code"],[857,12,761,10],[857,16,761,14],[857,18,761,2],[857,20,761,18],[857,27,761,25],[857,31,761,18],[858,0,762,2],[858,8,762,6,"code"],[858,12,762,10],[858,15,762,13],[858,17,762,2],[858,19,762,17],[858,26,762,24,"code"],[858,30,762,28],[858,35,762,33],[858,37,762,17],[859,0,763,2],[859,8,763,6,"code"],[859,12,763,10],[859,16,763,14],[859,19,763,2],[859,21,763,19],[859,28,763,26],[859,32,763,19],[861,0,765,2],[861,8,765,6,"code"],[861,12,765,10],[861,16,765,14],[861,22,765,2],[861,24,765,22],[862,0,766,4],[862,13,766,11,"code"],[862,17,766,15],[862,21,766,19],[862,25,766,11],[862,29,766,27,"nonASCIIidentifier"],[862,47,766,45],[862,48,766,46,"test"],[862,52,766,27],[862,53,766,51,"String"],[862,59,766,57],[862,60,766,58,"fromCharCode"],[862,72,766,51],[862,73,766,71,"code"],[862,77,766,51],[862,78,766,27],[862,79,766,4],[863,0,767,3],[865,0,769,2],[865,11,769,9,"isInAstralSet"],[865,24,769,22],[865,25,769,23,"code"],[865,29,769,22],[865,31,769,29,"astralIdentifierStartCodes"],[865,57,769,22],[865,58,769,9],[865,62,769,60,"isInAstralSet"],[865,75,769,73],[865,76,769,74,"code"],[865,80,769,73],[865,82,769,80,"astralIdentifierCodes"],[865,103,769,73],[865,104,769,2],[866,0,770,1],[868,0,772,0],[868,6,772,6,"reservedTypes"],[868,19,772,19],[868,22,772,22],[868,26,772,26,"Set"],[868,29,772,22],[868,30,772,30],[868,31,772,31],[868,34,772,30],[868,36,772,36],[868,41,772,30],[868,43,772,43],[868,49,772,30],[868,51,772,51],[868,60,772,30],[868,62,772,62],[868,69,772,30],[868,71,772,71],[868,80,772,30],[868,82,772,82],[868,89,772,30],[868,91,772,91],[868,102,772,30],[868,104,772,104],[868,111,772,30],[868,113,772,113],[868,119,772,30],[868,121,772,121],[868,129,772,30],[868,131,772,131],[868,139,772,30],[868,141,772,141],[868,149,772,30],[868,151,772,151],[868,157,772,30],[868,159,772,159],[868,167,772,30],[868,169,772,169],[868,175,772,30],[868,176,772,22],[868,177,772,0],[870,0,774,0],[870,11,774,9,"isEsModuleType"],[870,25,774,0],[870,26,774,24,"bodyElement"],[870,37,774,0],[870,39,774,37],[871,0,775,2],[871,11,775,9,"bodyElement"],[871,22,775,20],[871,23,775,21,"type"],[871,27,775,9],[871,32,775,30],[871,61,775,9],[871,65,775,63,"bodyElement"],[871,76,775,74],[871,77,775,75,"type"],[871,81,775,63],[871,86,775,84],[871,112,775,63],[871,117,775,115],[871,118,775,116,"bodyElement"],[871,129,775,127],[871,130,775,128,"declaration"],[871,141,775,115],[871,145,775,143,"bodyElement"],[871,156,775,154],[871,157,775,155,"declaration"],[871,168,775,143],[871,169,775,167,"type"],[871,173,775,143],[871,178,775,176],[871,189,775,143],[871,193,775,191,"bodyElement"],[871,204,775,202],[871,205,775,203,"declaration"],[871,216,775,191],[871,217,775,215,"type"],[871,221,775,191],[871,226,775,224],[871,248,775,63],[871,249,775,2],[872,0,776,1],[874,0,778,0],[874,11,778,9,"hasTypeImportKind"],[874,28,778,0],[874,29,778,27,"node"],[874,33,778,0],[874,35,778,33],[875,0,779,2],[875,11,779,9,"node"],[875,15,779,13],[875,16,779,14,"importKind"],[875,26,779,9],[875,31,779,29],[875,37,779,9],[875,41,779,39,"node"],[875,45,779,43],[875,46,779,44,"importKind"],[875,56,779,39],[875,61,779,59],[875,69,779,2],[876,0,780,1],[878,0,782,0],[878,11,782,9,"isMaybeDefaultImport"],[878,31,782,0],[878,32,782,30,"state"],[878,37,782,0],[878,39,782,37],[879,0,783,2],[879,11,783,9],[879,12,783,10,"state"],[879,17,783,15],[879,18,783,16,"type"],[879,22,783,10],[879,27,783,25,"types"],[879,32,783,30],[879,33,783,31,"name"],[879,37,783,10],[879,41,783,39],[879,42,783,40],[879,43,783,41,"state"],[879,48,783,46],[879,49,783,47,"type"],[879,53,783,41],[879,54,783,52,"keyword"],[879,61,783,9],[879,66,783,64,"state"],[879,71,783,69],[879,72,783,70,"value"],[879,77,783,64],[879,82,783,80],[879,88,783,2],[880,0,784,1],[882,0,786,0],[882,6,786,6,"exportSuggestions"],[882,23,786,23],[882,26,786,26],[883,0,787,2,"const"],[883,4,787,2,"const"],[883,9,787,7],[883,11,787,9],[883,31,786,26],[884,0,788,2,"let"],[884,4,788,2,"let"],[884,7,788,5],[884,9,788,7],[884,29,786,26],[885,0,789,2,"type"],[885,4,789,2,"type"],[885,8,789,6],[885,10,789,8],[885,23,786,26],[886,0,790,2,"interface"],[886,4,790,2,"interface"],[886,13,790,11],[886,15,790,13],[887,0,786,26],[887,3,786,0],[889,0,793,0],[889,11,793,9,"partition"],[889,20,793,0],[889,21,793,19,"list"],[889,25,793,0],[889,27,793,25,"test"],[889,31,793,0],[889,33,793,31],[890,0,794,2],[890,8,794,8,"list1"],[890,13,794,13],[890,16,794,16],[890,18,794,2],[891,0,795,2],[891,8,795,8,"list2"],[891,13,795,13],[891,16,795,16],[891,18,795,2],[893,0,797,2],[893,9,797,7],[893,13,797,11,"i"],[893,14,797,12],[893,17,797,15],[893,18,797,2],[893,20,797,18,"i"],[893,21,797,19],[893,24,797,22,"list"],[893,28,797,26],[893,29,797,27,"length"],[893,35,797,2],[893,37,797,35,"i"],[893,38,797,36],[893,40,797,2],[893,42,797,40],[894,0,798,4],[894,7,798,5,"test"],[894,11,798,9],[894,12,798,10,"list"],[894,16,798,14],[894,17,798,15,"i"],[894,18,798,14],[894,19,798,9],[894,21,798,19,"i"],[894,22,798,9],[894,24,798,22,"list"],[894,28,798,9],[894,29,798,5],[894,32,798,30,"list1"],[894,37,798,5],[894,40,798,38,"list2"],[894,45,798,4],[894,47,798,45,"push"],[894,51,798,4],[894,52,798,50,"list"],[894,56,798,54],[894,57,798,55,"i"],[894,58,798,54],[894,59,798,4],[895,0,799,3],[897,0,801,2],[897,11,801,9],[897,12,801,10,"list1"],[897,17,801,9],[897,19,801,17,"list2"],[897,24,801,9],[897,25,801,2],[898,0,802,1],[900,0,804,0],[900,6,804,6,"FLOW_PRAGMA_REGEX"],[900,23,804,23],[900,26,804,26],[900,50,804,0],[902,0,805,0],[902,6,805,4,"flow"],[902,10,805,8],[902,13,805,12],[902,22,805,4,"flow"],[902,26,805,12],[902,27,805,12,"superClass"],[902,37,805,22],[903,0,805,22],[904,0,805,22],[906,0,806,2],[906,23,806,14,"options"],[906,30,806,2],[906,32,806,23,"input"],[906,37,806,2],[906,39,806,30],[907,0,806,30],[909,0,806,30],[911,0,807,4],[911,86,807,10,"options"],[911,93,807,4],[911,95,807,19,"input"],[911,100,807,4],[912,0,808,4],[912,15,808,9,"flowPragma"],[912,25,808,4],[912,28,808,22,"undefined"],[912,37,808,4],[913,0,806,30],[914,0,809,3],[916,0,805,22],[917,0,805,22],[918,0,805,22],[918,43,811,21],[919,0,812,4],[919,17,812,11],[919,22,812,16,"getPluginOption"],[919,37,812,11],[919,38,812,32],[919,44,812,11],[919,46,812,40],[919,51,812,11],[919,56,812,50],[919,61,812,55,"flowPragma"],[919,71,812,50],[919,76,812,70],[919,82,812,4],[920,0,813,3],[921,0,805,22],[922,0,805,22],[923,0,805,22],[923,43,815,21],[924,0,816,4],[924,17,816,11],[924,18,816,12],[924,19,816,13],[924,24,816,18,"getPluginOption"],[924,39,816,13],[924,40,816,34],[924,46,816,13],[924,48,816,42],[924,55,816,13],[924,56,816,4],[925,0,817,3],[926,0,805,22],[927,0,805,22],[928,0,805,22],[928,36,819,14,"type"],[928,40,805,22],[928,42,819,20,"val"],[928,45,805,22],[928,47,819,25],[929,0,820,4],[929,14,820,8,"type"],[929,18,820,12],[929,23,820,17,"types"],[929,28,820,22],[929,29,820,23,"string"],[929,35,820,8],[929,39,820,33,"type"],[929,43,820,37],[929,48,820,42,"types"],[929,53,820,47],[929,54,820,48,"semi"],[929,58,820,8],[929,62,820,56,"type"],[929,66,820,60],[929,71,820,65,"types"],[929,76,820,70],[929,77,820,71,"interpreterDirective"],[929,97,820,4],[929,99,820,93],[930,0,821,6],[930,16,821,10],[930,21,821,15,"flowPragma"],[930,31,821,10],[930,36,821,30,"undefined"],[930,45,821,6],[930,47,821,41],[931,0,822,8],[931,19,822,13,"flowPragma"],[931,29,822,8],[931,32,822,26],[931,36,822,8],[932,0,823,7],[933,0,824,5],[935,0,826,4],[935,90,826,29,"type"],[935,94,826,4],[935,96,826,35,"val"],[935,99,826,4],[936,0,827,3],[937,0,805,22],[938,0,805,22],[939,0,805,22],[939,35,829,13,"comment"],[939,42,805,22],[939,44,829,22],[940,0,830,4],[940,14,830,8],[940,19,830,13,"flowPragma"],[940,29,830,8],[940,34,830,28,"undefined"],[940,43,830,4],[940,45,830,39],[941,0,831,6],[941,16,831,12,"matches"],[941,23,831,19],[941,26,831,22,"FLOW_PRAGMA_REGEX"],[941,43,831,39],[941,44,831,40,"exec"],[941,48,831,22],[941,49,831,45,"comment"],[941,56,831,52],[941,57,831,53,"value"],[941,62,831,22],[941,63,831,6],[942,0,833,6],[942,16,833,10],[942,17,833,11,"matches"],[942,24,833,6],[942,26,833,20],[942,27,833,6],[942,32,833,27],[942,36,833,31,"matches"],[942,43,833,38],[942,44,833,39],[942,45,833,38],[942,46,833,31],[942,51,833,46],[942,57,833,27],[942,59,833,54],[943,0,834,8],[943,19,834,13,"flowPragma"],[943,29,834,8],[943,32,834,26],[943,38,834,8],[944,0,835,7],[944,13,833,27],[944,19,835,13],[944,23,835,17,"matches"],[944,30,835,24],[944,31,835,25],[944,32,835,24],[944,33,835,17],[944,38,835,32],[944,46,835,13],[944,48,835,42],[945,0,836,8],[945,19,836,13,"flowPragma"],[945,29,836,8],[945,32,836,26],[945,40,836,8],[946,0,837,7],[946,13,835,13],[946,19,837,13],[947,0,838,8],[947,20,838,14],[947,24,838,18,"Error"],[947,29,838,14],[947,30,838,24],[947,54,838,14],[947,55,838,8],[948,0,839,7],[949,0,840,5],[951,0,842,4],[951,89,842,28,"comment"],[951,96,842,4],[952,0,843,3],[953,0,805,22],[954,0,805,22],[955,0,805,22],[955,49,845,27,"tok"],[955,52,805,22],[955,54,845,32],[956,0,846,4],[956,14,846,10,"oldInType"],[956,23,846,19],[956,26,846,22],[956,31,846,27,"state"],[956,36,846,22],[956,37,846,33,"inType"],[956,43,846,4],[957,0,847,4],[957,15,847,9,"state"],[957,20,847,4],[957,21,847,15,"inType"],[957,27,847,4],[957,30,847,24],[957,34,847,4],[958,0,848,4],[958,15,848,9,"expect"],[958,21,848,4],[958,22,848,16,"tok"],[958,25,848,19],[958,29,848,23,"types"],[958,34,848,28],[958,35,848,29,"colon"],[958,40,848,4],[959,0,849,4],[959,14,849,10,"type"],[959,18,849,14],[959,21,849,17],[959,26,849,22,"flowParseType"],[959,39,849,17],[959,41,849,4],[960,0,850,4],[960,15,850,9,"state"],[960,20,850,4],[960,21,850,15,"inType"],[960,27,850,4],[960,30,850,24,"oldInType"],[960,39,850,4],[961,0,851,4],[961,17,851,11,"type"],[961,21,851,4],[962,0,852,3],[963,0,805,22],[964,0,805,22],[965,0,805,22],[965,45,854,23],[966,0,855,4],[966,14,855,10,"node"],[966,18,855,14],[966,21,855,17],[966,26,855,22,"startNode"],[966,35,855,17],[966,37,855,4],[967,0,856,4],[967,14,856,10,"moduloLoc"],[967,23,856,19],[967,26,856,22],[967,31,856,27,"state"],[967,36,856,22],[967,37,856,33,"startLoc"],[967,45,856,4],[968,0,857,4],[968,14,857,10,"moduloPos"],[968,23,857,19],[968,26,857,22],[968,31,857,27,"state"],[968,36,857,22],[968,37,857,33,"start"],[968,42,857,4],[969,0,858,4],[969,15,858,9,"expect"],[969,21,858,4],[969,22,858,16,"types"],[969,27,858,21],[969,28,858,22,"modulo"],[969,34,858,4],[970,0,859,4],[970,14,859,10,"checksLoc"],[970,23,859,19],[970,26,859,22],[970,31,859,27,"state"],[970,36,859,22],[970,37,859,33,"startLoc"],[970,45,859,4],[971,0,860,4],[971,15,860,9,"expectContextual"],[971,31,860,4],[971,32,860,26],[971,40,860,4],[973,0,862,4],[973,14,862,8,"moduloLoc"],[973,23,862,17],[973,24,862,18,"line"],[973,28,862,8],[973,33,862,27,"checksLoc"],[973,42,862,36],[973,43,862,37,"line"],[973,47,862,8],[973,51,862,45,"moduloLoc"],[973,60,862,54],[973,61,862,55,"column"],[973,67,862,45],[973,72,862,66,"checksLoc"],[973,81,862,75],[973,82,862,76,"column"],[973,88,862,66],[973,91,862,85],[973,92,862,4],[973,94,862,88],[974,0,863,6],[974,17,863,11,"raise"],[974,22,863,6],[974,23,863,17,"moduloPos"],[974,32,863,6],[974,34,863,28],[974,89,863,6],[975,0,864,5],[977,0,866,4],[977,14,866,8],[977,19,866,13,"eat"],[977,22,866,8],[977,23,866,17,"types"],[977,28,866,22],[977,29,866,23,"parenL"],[977,35,866,8],[977,36,866,4],[977,38,866,32],[978,0,867,6,"node"],[978,12,867,6,"node"],[978,16,867,10],[978,17,867,11,"value"],[978,22,867,6],[978,25,867,19],[978,30,867,24,"parseExpression"],[978,45,867,19],[978,47,867,6],[979,0,868,6],[979,17,868,11,"expect"],[979,23,868,6],[979,24,868,18,"types"],[979,29,868,23],[979,30,868,24,"parenR"],[979,36,868,6],[980,0,869,6],[980,19,869,13],[980,24,869,18,"finishNode"],[980,34,869,13],[980,35,869,29,"node"],[980,39,869,13],[980,41,869,35],[980,60,869,13],[980,61,869,6],[981,0,870,5],[981,11,866,4],[981,17,870,11],[982,0,871,6],[982,19,871,13],[982,24,871,18,"finishNode"],[982,34,871,13],[982,35,871,29,"node"],[982,39,871,13],[982,41,871,35],[982,60,871,13],[982,61,871,6],[983,0,872,5],[984,0,873,3],[985,0,805,22],[986,0,805,22],[987,0,805,22],[987,63,875,41],[988,0,876,4],[988,14,876,10,"oldInType"],[988,23,876,19],[988,26,876,22],[988,31,876,27,"state"],[988,36,876,22],[988,37,876,33,"inType"],[988,43,876,4],[989,0,877,4],[989,15,877,9,"state"],[989,20,877,4],[989,21,877,15,"inType"],[989,27,877,4],[989,30,877,24],[989,34,877,4],[990,0,878,4],[990,15,878,9,"expect"],[990,21,878,4],[990,22,878,16,"types"],[990,27,878,21],[990,28,878,22,"colon"],[990,33,878,4],[991,0,879,4],[991,14,879,8,"type"],[991,18,879,12],[991,21,879,15],[991,25,879,4],[992,0,880,4],[992,14,880,8,"predicate"],[992,23,880,17],[992,26,880,20],[992,30,880,4],[994,0,882,4],[994,14,882,8],[994,19,882,13,"match"],[994,24,882,8],[994,25,882,19,"types"],[994,30,882,24],[994,31,882,25,"modulo"],[994,37,882,8],[994,38,882,4],[994,40,882,34],[995,0,883,6],[995,17,883,11,"state"],[995,22,883,6],[995,23,883,17,"inType"],[995,29,883,6],[995,32,883,26,"oldInType"],[995,41,883,6],[996,0,884,6,"predicate"],[996,12,884,6,"predicate"],[996,21,884,15],[996,24,884,18],[996,29,884,23,"flowParsePredicate"],[996,47,884,18],[996,49,884,6],[997,0,885,5],[997,11,882,4],[997,17,885,11],[998,0,886,6,"type"],[998,12,886,6,"type"],[998,16,886,10],[998,19,886,13],[998,24,886,18,"flowParseType"],[998,37,886,13],[998,39,886,6],[999,0,887,6],[999,17,887,11,"state"],[999,22,887,6],[999,23,887,17,"inType"],[999,29,887,6],[999,32,887,26,"oldInType"],[999,41,887,6],[1001,0,889,6],[1001,16,889,10],[1001,21,889,15,"match"],[1001,26,889,10],[1001,27,889,21,"types"],[1001,32,889,26],[1001,33,889,27,"modulo"],[1001,39,889,10],[1001,40,889,6],[1001,42,889,36],[1002,0,890,8,"predicate"],[1002,14,890,8,"predicate"],[1002,23,890,17],[1002,26,890,20],[1002,31,890,25,"flowParsePredicate"],[1002,49,890,20],[1002,51,890,8],[1003,0,891,7],[1004,0,892,5],[1006,0,894,4],[1006,17,894,11],[1006,18,894,12,"type"],[1006,22,894,11],[1006,24,894,18,"predicate"],[1006,33,894,11],[1006,34,894,4],[1007,0,895,3],[1008,0,805,22],[1009,0,805,22],[1010,0,805,22],[1010,46,897,24,"node"],[1010,50,805,22],[1010,52,897,30],[1011,0,898,4],[1011,15,898,9,"next"],[1011,19,898,4],[1012,0,899,4],[1012,15,899,9,"flowParseInterfaceish"],[1012,36,899,4],[1012,37,899,31,"node"],[1012,41,899,4],[1012,43,899,37],[1012,47,899,4],[1013,0,900,4],[1013,17,900,11],[1013,22,900,16,"finishNode"],[1013,32,900,11],[1013,33,900,27,"node"],[1013,37,900,11],[1013,39,900,33],[1013,53,900,11],[1013,54,900,4],[1014,0,901,3],[1015,0,805,22],[1016,0,805,22],[1017,0,805,22],[1017,49,903,27,"node"],[1017,53,805,22],[1017,55,903,33],[1018,0,904,4],[1018,15,904,9,"next"],[1018,19,904,4],[1019,0,905,4],[1019,14,905,10,"id"],[1019,16,905,12],[1019,19,905,15,"node"],[1019,23,905,19],[1019,24,905,20,"id"],[1019,26,905,15],[1019,29,905,25],[1019,34,905,30,"parseIdentifier"],[1019,49,905,25],[1019,51,905,4],[1020,0,906,4],[1020,14,906,10,"typeNode"],[1020,22,906,18],[1020,25,906,21],[1020,30,906,26,"startNode"],[1020,39,906,21],[1020,41,906,4],[1021,0,907,4],[1021,14,907,10,"typeContainer"],[1021,27,907,23],[1021,30,907,26],[1021,35,907,31,"startNode"],[1021,44,907,26],[1021,46,907,4],[1023,0,909,4],[1023,14,909,8],[1023,19,909,13,"isRelational"],[1023,31,909,8],[1023,32,909,26],[1023,35,909,8],[1023,36,909,4],[1023,38,909,32],[1024,0,910,6,"typeNode"],[1024,12,910,6,"typeNode"],[1024,20,910,14],[1024,21,910,15,"typeParameters"],[1024,35,910,6],[1024,38,910,32],[1024,43,910,37,"flowParseTypeParameterDeclaration"],[1024,76,910,32],[1024,78,910,6],[1025,0,911,5],[1025,11,909,4],[1025,17,911,11],[1026,0,912,6,"typeNode"],[1026,12,912,6,"typeNode"],[1026,20,912,14],[1026,21,912,15,"typeParameters"],[1026,35,912,6],[1026,38,912,32],[1026,42,912,6],[1027,0,913,5],[1029,0,915,4],[1029,15,915,9,"expect"],[1029,21,915,4],[1029,22,915,16,"types"],[1029,27,915,21],[1029,28,915,22,"parenL"],[1029,34,915,4],[1030,0,916,4],[1030,14,916,10,"tmp"],[1030,17,916,13],[1030,20,916,16],[1030,25,916,21,"flowParseFunctionTypeParams"],[1030,52,916,16],[1030,54,916,4],[1031,0,917,4,"typeNode"],[1031,10,917,4,"typeNode"],[1031,18,917,12],[1031,19,917,13,"params"],[1031,25,917,4],[1031,28,917,22,"tmp"],[1031,31,917,25],[1031,32,917,26,"params"],[1031,38,917,4],[1032,0,918,4,"typeNode"],[1032,10,918,4,"typeNode"],[1032,18,918,12],[1032,19,918,13,"rest"],[1032,23,918,4],[1032,26,918,20,"tmp"],[1032,29,918,23],[1032,30,918,24,"rest"],[1032,34,918,4],[1033,0,919,4],[1033,15,919,9,"expect"],[1033,21,919,4],[1033,22,919,16,"types"],[1033,27,919,21],[1033,28,919,22,"parenR"],[1033,34,919,4],[1035,0,903,33],[1035,38,920,44],[1035,43,920,49,"flowParseTypeAndPredicateInitialiser"],[1035,79,920,44],[1035,81,903,33],[1037,0,903,33],[1039,0,920,5,"typeNode"],[1039,10,920,5,"typeNode"],[1039,18,920,13],[1039,19,920,14,"returnType"],[1039,29,903,33],[1040,0,920,26,"node"],[1040,10,920,26,"node"],[1040,14,920,30],[1040,15,920,31,"predicate"],[1040,24,903,33],[1041,0,921,4,"typeContainer"],[1041,10,921,4,"typeContainer"],[1041,23,921,17],[1041,24,921,18,"typeAnnotation"],[1041,38,921,4],[1041,41,921,35],[1041,46,921,40,"finishNode"],[1041,56,921,35],[1041,57,921,51,"typeNode"],[1041,65,921,35],[1041,67,921,61],[1041,91,921,35],[1041,92,921,4],[1042,0,922,4,"id"],[1042,10,922,4,"id"],[1042,12,922,6],[1042,13,922,7,"typeAnnotation"],[1042,27,922,4],[1042,30,922,24],[1042,35,922,29,"finishNode"],[1042,45,922,24],[1042,46,922,40,"typeContainer"],[1042,59,922,24],[1042,61,922,55],[1042,77,922,24],[1042,78,922,4],[1043,0,923,4],[1043,15,923,9,"resetEndLocation"],[1043,31,923,4],[1043,32,923,26,"id"],[1043,34,923,4],[1044,0,924,4],[1044,15,924,9,"semicolon"],[1044,24,924,4],[1045,0,925,4],[1045,17,925,11],[1045,22,925,16,"finishNode"],[1045,32,925,11],[1045,33,925,27,"node"],[1045,37,925,11],[1045,39,925,33],[1045,56,925,11],[1045,57,925,4],[1046,0,926,3],[1047,0,805,22],[1048,0,805,22],[1049,0,805,22],[1049,41,928,19,"node"],[1049,45,805,22],[1049,47,928,25,"insideModule"],[1049,59,805,22],[1049,61,928,39],[1050,0,929,4],[1050,14,929,8],[1050,19,929,13,"match"],[1050,24,929,8],[1050,25,929,19,"types"],[1050,30,929,24],[1050,31,929,25,"_class"],[1050,37,929,8],[1050,38,929,4],[1050,40,929,34],[1051,0,930,6],[1051,19,930,13],[1051,24,930,18,"flowParseDeclareClass"],[1051,45,930,13],[1051,46,930,40,"node"],[1051,50,930,13],[1051,51,930,6],[1052,0,931,5],[1052,11,929,4],[1052,17,931,11],[1052,21,931,15],[1052,26,931,20,"match"],[1052,31,931,15],[1052,32,931,26,"types"],[1052,37,931,31],[1052,38,931,32,"_function"],[1052,47,931,15],[1052,48,931,11],[1052,50,931,44],[1053,0,932,6],[1053,19,932,13],[1053,24,932,18,"flowParseDeclareFunction"],[1053,48,932,13],[1053,49,932,43,"node"],[1053,53,932,13],[1053,54,932,6],[1054,0,933,5],[1054,11,931,11],[1054,17,933,11],[1054,21,933,15],[1054,26,933,20,"match"],[1054,31,933,15],[1054,32,933,26,"types"],[1054,37,933,31],[1054,38,933,32,"_var"],[1054,42,933,15],[1054,43,933,11],[1054,45,933,39],[1055,0,934,6],[1055,19,934,13],[1055,24,934,18,"flowParseDeclareVariable"],[1055,48,934,13],[1055,49,934,43,"node"],[1055,53,934,13],[1055,54,934,6],[1056,0,935,5],[1056,11,933,11],[1056,17,935,11],[1056,21,935,15],[1056,26,935,20,"eatContextual"],[1056,39,935,15],[1056,40,935,34],[1056,48,935,15],[1056,49,935,11],[1056,51,935,45],[1057,0,936,6],[1057,16,936,10],[1057,21,936,15,"match"],[1057,26,936,10],[1057,27,936,21,"types"],[1057,32,936,26],[1057,33,936,27,"dot"],[1057,36,936,10],[1057,37,936,6],[1057,39,936,33],[1058,0,937,8],[1058,21,937,15],[1058,26,937,20,"flowParseDeclareModuleExports"],[1058,55,937,15],[1058,56,937,50,"node"],[1058,60,937,15],[1058,61,937,8],[1059,0,938,7],[1059,13,936,6],[1059,19,938,13],[1060,0,939,8],[1060,18,939,12,"insideModule"],[1060,30,939,8],[1060,32,939,26],[1061,0,940,10],[1061,21,940,15,"raise"],[1061,26,940,10],[1061,27,940,21],[1061,32,940,26,"state"],[1061,37,940,21],[1061,38,940,32,"lastTokStart"],[1061,50,940,10],[1061,52,940,46],[1061,117,940,10],[1062,0,941,9],[1064,0,943,8],[1064,21,943,15],[1064,26,943,20,"flowParseDeclareModule"],[1064,48,943,15],[1064,49,943,43,"node"],[1064,53,943,15],[1064,54,943,8],[1065,0,944,7],[1066,0,945,5],[1066,11,935,11],[1066,17,945,11],[1066,21,945,15],[1066,26,945,20,"isContextual"],[1066,38,945,15],[1066,39,945,33],[1066,45,945,15],[1066,46,945,11],[1066,48,945,42],[1067,0,946,6],[1067,19,946,13],[1067,24,946,18,"flowParseDeclareTypeAlias"],[1067,49,946,13],[1067,50,946,44,"node"],[1067,54,946,13],[1067,55,946,6],[1068,0,947,5],[1068,11,945,11],[1068,17,947,11],[1068,21,947,15],[1068,26,947,20,"isContextual"],[1068,38,947,15],[1068,39,947,33],[1068,47,947,15],[1068,48,947,11],[1068,50,947,44],[1069,0,948,6],[1069,19,948,13],[1069,24,948,18,"flowParseDeclareOpaqueType"],[1069,50,948,13],[1069,51,948,45,"node"],[1069,55,948,13],[1069,56,948,6],[1070,0,949,5],[1070,11,947,11],[1070,17,949,11],[1070,21,949,15],[1070,26,949,20,"isContextual"],[1070,38,949,15],[1070,39,949,33],[1070,50,949,15],[1070,51,949,11],[1070,53,949,47],[1071,0,950,6],[1071,19,950,13],[1071,24,950,18,"flowParseDeclareInterface"],[1071,49,950,13],[1071,50,950,44,"node"],[1071,54,950,13],[1071,55,950,6],[1072,0,951,5],[1072,11,949,11],[1072,17,951,11],[1072,21,951,15],[1072,26,951,20,"match"],[1072,31,951,15],[1072,32,951,26,"types"],[1072,37,951,31],[1072,38,951,32,"_export"],[1072,45,951,15],[1072,46,951,11],[1072,48,951,42],[1073,0,952,6],[1073,19,952,13],[1073,24,952,18,"flowParseDeclareExportDeclaration"],[1073,57,952,13],[1073,58,952,52,"node"],[1073,62,952,13],[1073,64,952,58,"insideModule"],[1073,76,952,13],[1073,77,952,6],[1074,0,953,5],[1074,11,951,11],[1074,17,953,11],[1075,0,954,6],[1075,18,954,12],[1075,23,954,17,"unexpected"],[1075,33,954,12],[1075,35,954,6],[1076,0,955,5],[1077,0,956,3],[1078,0,805,22],[1079,0,805,22],[1080,0,805,22],[1080,49,958,27,"node"],[1080,53,805,22],[1080,55,958,33],[1081,0,959,4],[1081,15,959,9,"next"],[1081,19,959,4],[1082,0,960,4,"node"],[1082,10,960,4,"node"],[1082,14,960,8],[1082,15,960,9,"id"],[1082,17,960,4],[1082,20,960,14],[1082,25,960,19,"flowParseTypeAnnotatableIdentifier"],[1082,59,960,14],[1082,60,960,54],[1082,64,960,14],[1082,65,960,4],[1083,0,961,4],[1083,15,961,9,"scope"],[1083,20,961,4],[1083,21,961,15,"declareName"],[1083,32,961,4],[1083,33,961,27,"node"],[1083,37,961,31],[1083,38,961,32,"id"],[1083,40,961,27],[1083,41,961,35,"name"],[1083,45,961,4],[1083,47,961,41,"BIND_VAR"],[1083,55,961,4],[1083,57,961,51,"node"],[1083,61,961,55],[1083,62,961,56,"id"],[1083,64,961,51],[1083,65,961,59,"start"],[1083,70,961,4],[1084,0,962,4],[1084,15,962,9,"semicolon"],[1084,24,962,4],[1085,0,963,4],[1085,17,963,11],[1085,22,963,16,"finishNode"],[1085,32,963,11],[1085,33,963,27,"node"],[1085,37,963,11],[1085,39,963,33],[1085,56,963,11],[1085,57,963,4],[1086,0,964,3],[1087,0,805,22],[1088,0,805,22],[1089,0,805,22],[1089,47,966,25,"node"],[1089,51,805,22],[1089,53,966,31],[1090,0,966,31],[1092,0,967,4],[1092,15,967,9,"scope"],[1092,20,967,4],[1092,21,967,15,"enter"],[1092,26,967,4],[1092,27,967,21,"SCOPE_OTHER"],[1092,38,967,4],[1094,0,969,4],[1094,14,969,8],[1094,19,969,13,"match"],[1094,24,969,8],[1094,25,969,19,"types"],[1094,30,969,24],[1094,31,969,25,"string"],[1094,37,969,8],[1094,38,969,4],[1094,40,969,34],[1095,0,970,6,"node"],[1095,12,970,6,"node"],[1095,16,970,10],[1095,17,970,11,"id"],[1095,19,970,6],[1095,22,970,16],[1095,27,970,21,"parseExprAtom"],[1095,40,970,16],[1095,42,970,6],[1096,0,971,5],[1096,11,969,4],[1096,17,971,11],[1097,0,972,6,"node"],[1097,12,972,6,"node"],[1097,16,972,10],[1097,17,972,11,"id"],[1097,19,972,6],[1097,22,972,16],[1097,27,972,21,"parseIdentifier"],[1097,42,972,16],[1097,44,972,6],[1098,0,973,5],[1100,0,975,4],[1100,14,975,10,"bodyNode"],[1100,22,975,18],[1100,25,975,21,"node"],[1100,29,975,25],[1100,30,975,26,"body"],[1100,34,975,21],[1100,37,975,33],[1100,42,975,38,"startNode"],[1100,51,975,33],[1100,53,975,4],[1101,0,976,4],[1101,14,976,10,"body"],[1101,18,976,14],[1101,21,976,17,"bodyNode"],[1101,29,976,25],[1101,30,976,26,"body"],[1101,34,976,17],[1101,37,976,33],[1101,39,976,4],[1102,0,977,4],[1102,15,977,9,"expect"],[1102,21,977,4],[1102,22,977,16,"types"],[1102,27,977,21],[1102,28,977,22,"braceL"],[1102,34,977,4],[1104,0,979,4],[1104,17,979,11],[1104,18,979,12],[1104,23,979,17,"match"],[1104,28,979,12],[1104,29,979,23,"types"],[1104,34,979,28],[1104,35,979,29,"braceR"],[1104,41,979,12],[1104,42,979,4],[1104,44,979,38],[1105,0,980,6],[1105,16,980,10,"bodyNode"],[1105,25,980,18],[1105,28,980,21],[1105,33,980,26,"startNode"],[1105,42,980,21],[1105,44,980,6],[1107,0,982,6],[1107,16,982,10],[1107,21,982,15,"match"],[1107,26,982,10],[1107,27,982,21,"types"],[1107,32,982,26],[1107,33,982,27,"_import"],[1107,40,982,10],[1107,41,982,6],[1107,43,982,37],[1108,0,983,8],[1108,19,983,13,"next"],[1108,23,983,8],[1110,0,985,8],[1110,18,985,12],[1110,19,985,13],[1110,24,985,18,"isContextual"],[1110,36,985,13],[1110,37,985,31],[1110,43,985,13],[1110,44,985,12],[1110,48,985,42],[1110,49,985,43],[1110,54,985,48,"match"],[1110,59,985,43],[1110,60,985,54,"types"],[1110,65,985,59],[1110,66,985,60,"_typeof"],[1110,73,985,43],[1110,74,985,8],[1110,76,985,70],[1111,0,986,10],[1111,21,986,15,"raise"],[1111,26,986,10],[1111,27,986,21],[1111,32,986,26,"state"],[1111,37,986,21],[1111,38,986,32,"lastTokStart"],[1111,50,986,10],[1111,52,986,46],[1111,140,986,10],[1112,0,987,9],[1114,0,989,8],[1114,19,989,13,"parseImport"],[1114,30,989,8],[1114,31,989,25,"bodyNode"],[1114,40,989,8],[1115,0,990,7],[1115,13,982,6],[1115,19,990,13],[1116,0,991,8],[1116,19,991,13,"expectContextual"],[1116,35,991,8],[1116,36,991,30],[1116,45,991,8],[1116,47,991,41],[1116,113,991,8],[1117,0,992,8,"bodyNode"],[1117,14,992,8,"bodyNode"],[1117,23,992,16],[1117,26,992,19],[1117,31,992,24,"flowParseDeclare"],[1117,47,992,19],[1117,48,992,41,"bodyNode"],[1117,57,992,19],[1117,59,992,51],[1117,63,992,19],[1117,64,992,8],[1118,0,993,7],[1120,0,995,6,"body"],[1120,12,995,6,"body"],[1120,16,995,10],[1120,17,995,11,"push"],[1120,21,995,6],[1120,22,995,16,"bodyNode"],[1120,31,995,6],[1121,0,996,5],[1123,0,998,4],[1123,15,998,9,"scope"],[1123,20,998,4],[1123,21,998,15,"exit"],[1123,25,998,4],[1124,0,999,4],[1124,15,999,9,"expect"],[1124,21,999,4],[1124,22,999,16,"types"],[1124,27,999,21],[1124,28,999,22,"braceR"],[1124,34,999,4],[1125,0,1000,4],[1125,15,1000,9,"finishNode"],[1125,25,1000,4],[1125,26,1000,20,"bodyNode"],[1125,34,1000,4],[1125,36,1000,30],[1125,52,1000,4],[1126,0,1001,4],[1126,14,1001,8,"kind"],[1126,18,1001,12],[1126,21,1001,15],[1126,25,1001,4],[1127,0,1002,4],[1127,14,1002,8,"hasModuleExport"],[1127,29,1002,23],[1127,32,1002,26],[1127,37,1002,4],[1128,0,1003,4],[1128,14,1003,10,"errorMessage"],[1128,26,1003,22],[1128,29,1003,25],[1128,111,1003,107],[1128,201,1003,4],[1129,0,1004,4,"body"],[1129,10,1004,4,"body"],[1129,14,1004,8],[1129,15,1004,9,"forEach"],[1129,22,1004,4],[1129,23,1004,17],[1129,33,1004,17,"bodyElement"],[1129,44,1004,28],[1129,46,1004,32],[1130,0,1005,6],[1130,16,1005,10,"isEsModuleType"],[1130,30,1005,24],[1130,31,1005,25,"bodyElement"],[1130,42,1005,24],[1130,43,1005,6],[1130,45,1005,39],[1131,0,1006,8],[1131,18,1006,12,"kind"],[1131,22,1006,16],[1131,27,1006,21],[1131,37,1006,8],[1131,39,1006,33],[1132,0,1007,10],[1132,16,1007,10],[1132,22,1007,14],[1132,23,1007,15,"raise"],[1132,28,1007,10],[1132,29,1007,21,"bodyElement"],[1132,40,1007,32],[1132,41,1007,33,"start"],[1132,46,1007,10],[1132,48,1007,40,"errorMessage"],[1132,60,1007,10],[1133,0,1008,9],[1135,0,1010,8,"kind"],[1135,14,1010,8,"kind"],[1135,18,1010,12],[1135,21,1010,15],[1135,25,1010,8],[1136,0,1011,7],[1136,13,1005,6],[1136,19,1011,13],[1136,23,1011,17,"bodyElement"],[1136,34,1011,28],[1136,35,1011,29,"type"],[1136,39,1011,17],[1136,44,1011,38],[1136,66,1011,13],[1136,68,1011,62],[1137,0,1012,8],[1137,18,1012,12,"hasModuleExport"],[1137,33,1012,8],[1137,35,1012,29],[1138,0,1013,10],[1138,16,1013,10],[1138,22,1013,14],[1138,23,1013,15,"raise"],[1138,28,1013,10],[1138,29,1013,21,"bodyElement"],[1138,40,1013,32],[1138,41,1013,33,"start"],[1138,46,1013,10],[1138,48,1013,40],[1138,94,1013,10],[1139,0,1014,9],[1141,0,1016,8],[1141,18,1016,12,"kind"],[1141,22,1016,16],[1141,27,1016,21],[1141,31,1016,8],[1141,33,1016,27],[1141,39,1016,31],[1141,40,1016,32,"raise"],[1141,45,1016,27],[1141,46,1016,38,"bodyElement"],[1141,57,1016,49],[1141,58,1016,50,"start"],[1141,63,1016,27],[1141,65,1016,57,"errorMessage"],[1141,77,1016,27],[1142,0,1017,8,"kind"],[1142,14,1017,8,"kind"],[1142,18,1017,12],[1142,21,1017,15],[1142,31,1017,8],[1143,0,1018,8,"hasModuleExport"],[1143,14,1018,8,"hasModuleExport"],[1143,29,1018,23],[1143,32,1018,26],[1143,36,1018,8],[1144,0,1019,7],[1145,0,1020,5],[1145,11,1004,4],[1146,0,1021,4,"node"],[1146,10,1021,4,"node"],[1146,14,1021,8],[1146,15,1021,9,"kind"],[1146,19,1021,4],[1146,22,1021,16,"kind"],[1146,26,1021,20],[1146,30,1021,24],[1146,40,1021,4],[1147,0,1022,4],[1147,17,1022,11],[1147,22,1022,16,"finishNode"],[1147,32,1022,11],[1147,33,1022,27,"node"],[1147,37,1022,11],[1147,39,1022,33],[1147,54,1022,11],[1147,55,1022,4],[1148,0,1023,3],[1149,0,805,22],[1150,0,805,22],[1151,0,805,22],[1151,58,1025,36,"node"],[1151,62,805,22],[1151,64,1025,42,"insideModule"],[1151,76,805,22],[1151,78,1025,56],[1152,0,1026,4],[1152,15,1026,9,"expect"],[1152,21,1026,4],[1152,22,1026,16,"types"],[1152,27,1026,21],[1152,28,1026,22,"_export"],[1152,35,1026,4],[1154,0,1028,4],[1154,14,1028,8],[1154,19,1028,13,"eat"],[1154,22,1028,8],[1154,23,1028,17,"types"],[1154,28,1028,22],[1154,29,1028,23,"_default"],[1154,37,1028,8],[1154,38,1028,4],[1154,40,1028,34],[1155,0,1029,6],[1155,16,1029,10],[1155,21,1029,15,"match"],[1155,26,1029,10],[1155,27,1029,21,"types"],[1155,32,1029,26],[1155,33,1029,27,"_function"],[1155,42,1029,10],[1155,47,1029,41],[1155,52,1029,46,"match"],[1155,57,1029,41],[1155,58,1029,52,"types"],[1155,63,1029,57],[1155,64,1029,58,"_class"],[1155,70,1029,41],[1155,71,1029,6],[1155,73,1029,67],[1156,0,1030,8,"node"],[1156,14,1030,8,"node"],[1156,18,1030,12],[1156,19,1030,13,"declaration"],[1156,30,1030,8],[1156,33,1030,27],[1156,38,1030,32,"flowParseDeclare"],[1156,54,1030,27],[1156,55,1030,49],[1156,60,1030,54,"startNode"],[1156,69,1030,49],[1156,71,1030,27],[1156,72,1030,8],[1157,0,1031,7],[1157,13,1029,6],[1157,19,1031,13],[1158,0,1032,8,"node"],[1158,14,1032,8,"node"],[1158,18,1032,12],[1158,19,1032,13,"declaration"],[1158,30,1032,8],[1158,33,1032,27],[1158,38,1032,32,"flowParseType"],[1158,51,1032,27],[1158,53,1032,8],[1159,0,1033,8],[1159,19,1033,13,"semicolon"],[1159,28,1033,8],[1160,0,1034,7],[1162,0,1036,6,"node"],[1162,12,1036,6,"node"],[1162,16,1036,10],[1162,17,1036,11,"default"],[1162,24,1036,6],[1162,27,1036,21],[1162,31,1036,6],[1163,0,1037,6],[1163,19,1037,13],[1163,24,1037,18,"finishNode"],[1163,34,1037,13],[1163,35,1037,29,"node"],[1163,39,1037,13],[1163,41,1037,35],[1163,67,1037,13],[1163,68,1037,6],[1164,0,1038,5],[1164,11,1028,4],[1164,17,1038,11],[1165,0,1039,6],[1165,16,1039,10],[1165,21,1039,15,"match"],[1165,26,1039,10],[1165,27,1039,21,"types"],[1165,32,1039,26],[1165,33,1039,27,"_const"],[1165,39,1039,10],[1165,44,1039,38],[1165,49,1039,43,"isLet"],[1165,54,1039,38],[1165,56,1039,10],[1165,60,1039,54],[1165,61,1039,55],[1165,66,1039,60,"isContextual"],[1165,78,1039,55],[1165,79,1039,73],[1165,85,1039,55],[1165,90,1039,84],[1165,95,1039,89,"isContextual"],[1165,107,1039,84],[1165,108,1039,102],[1165,119,1039,84],[1165,120,1039,54],[1165,125,1039,119],[1165,126,1039,120,"insideModule"],[1165,138,1039,6],[1165,140,1039,134],[1166,0,1040,8],[1166,18,1040,14,"label"],[1166,23,1040,19],[1166,26,1040,22],[1166,31,1040,27,"state"],[1166,36,1040,22],[1166,37,1040,33,"value"],[1166,42,1040,8],[1167,0,1041,8],[1167,18,1041,14,"suggestion"],[1167,28,1041,24],[1167,31,1041,27,"exportSuggestions"],[1167,48,1041,44],[1167,49,1041,45,"label"],[1167,54,1041,44],[1167,55,1041,8],[1168,0,1042,8],[1168,19,1042,13,"unexpected"],[1168,29,1042,8],[1168,30,1042,24],[1168,35,1042,29,"state"],[1168,40,1042,24],[1168,41,1042,35,"start"],[1168,46,1042,8],[1168,69,1042,62,"label"],[1168,74,1042,8],[1168,107,1042,97,"suggestion"],[1168,117,1042,8],[1169,0,1043,7],[1171,0,1045,6],[1171,16,1045,10],[1171,21,1045,15,"match"],[1171,26,1045,10],[1171,27,1045,21,"types"],[1171,32,1045,26],[1171,33,1045,27,"_var"],[1171,37,1045,10],[1171,42,1045,36],[1171,47,1045,41,"match"],[1171,52,1045,36],[1171,53,1045,47,"types"],[1171,58,1045,52],[1171,59,1045,53,"_function"],[1171,68,1045,36],[1171,69,1045,10],[1171,73,1045,67],[1171,78,1045,72,"match"],[1171,83,1045,67],[1171,84,1045,78,"types"],[1171,89,1045,83],[1171,90,1045,84,"_class"],[1171,96,1045,67],[1171,97,1045,10],[1171,101,1045,95],[1171,106,1045,100,"isContextual"],[1171,118,1045,95],[1171,119,1045,113],[1171,127,1045,95],[1171,128,1045,6],[1171,130,1045,124],[1172,0,1046,10,"node"],[1172,14,1046,10,"node"],[1172,18,1046,14],[1172,19,1046,15,"declaration"],[1172,30,1046,10],[1172,33,1046,29],[1172,38,1046,34,"flowParseDeclare"],[1172,54,1046,29],[1172,55,1046,51],[1172,60,1046,56,"startNode"],[1172,69,1046,51],[1172,71,1046,29],[1172,72,1046,10],[1173,0,1047,10,"node"],[1173,14,1047,10,"node"],[1173,18,1047,14],[1173,19,1047,15,"default"],[1173,26,1047,10],[1173,29,1047,25],[1173,34,1047,10],[1174,0,1048,10],[1174,21,1048,17],[1174,26,1048,22,"finishNode"],[1174,36,1048,17],[1174,37,1048,33,"node"],[1174,41,1048,17],[1174,43,1048,39],[1174,69,1048,17],[1174,70,1048,10],[1175,0,1049,9],[1175,13,1045,6],[1175,19,1049,15],[1175,23,1049,19],[1175,28,1049,24,"match"],[1175,33,1049,19],[1175,34,1049,30,"types"],[1175,39,1049,35],[1175,40,1049,36,"star"],[1175,44,1049,19],[1175,49,1049,45],[1175,54,1049,50,"match"],[1175,59,1049,45],[1175,60,1049,56,"types"],[1175,65,1049,61],[1175,66,1049,62,"braceL"],[1175,72,1049,45],[1175,73,1049,19],[1175,77,1049,73],[1175,82,1049,78,"isContextual"],[1175,94,1049,73],[1175,95,1049,91],[1175,106,1049,73],[1175,107,1049,19],[1175,111,1049,107],[1175,116,1049,112,"isContextual"],[1175,128,1049,107],[1175,129,1049,125],[1175,135,1049,107],[1175,136,1049,19],[1175,140,1049,136],[1175,145,1049,141,"isContextual"],[1175,157,1049,136],[1175,158,1049,154],[1175,166,1049,136],[1175,167,1049,15],[1175,169,1049,165],[1176,0,1050,10,"node"],[1176,14,1050,10,"node"],[1176,18,1050,14],[1176,21,1050,17],[1176,26,1050,22,"parseExport"],[1176,37,1050,17],[1176,38,1050,34,"node"],[1176,42,1050,17],[1176,43,1050,10],[1178,0,1052,10],[1178,18,1052,14,"node"],[1178,22,1052,18],[1178,23,1052,19,"type"],[1178,27,1052,14],[1178,32,1052,28],[1178,56,1052,10],[1178,58,1052,54],[1179,0,1053,12,"node"],[1179,16,1053,12,"node"],[1179,20,1053,16],[1179,21,1053,17,"type"],[1179,25,1053,12],[1179,28,1053,24],[1179,47,1053,12],[1180,0,1054,12,"node"],[1180,16,1054,12,"node"],[1180,20,1054,16],[1180,21,1054,17,"default"],[1180,28,1054,12],[1180,31,1054,27],[1180,36,1054,12],[1181,0,1055,12],[1181,23,1055,19,"node"],[1181,27,1055,23],[1181,28,1055,24,"exportKind"],[1181,38,1055,12],[1182,0,1056,11],[1184,0,1058,10,"node"],[1184,14,1058,10,"node"],[1184,18,1058,14],[1184,19,1058,15,"type"],[1184,23,1058,10],[1184,26,1058,22],[1184,38,1058,34,"node"],[1184,42,1058,38],[1184,43,1058,39,"type"],[1184,47,1058,10],[1185,0,1059,10],[1185,21,1059,17,"node"],[1185,25,1059,10],[1186,0,1060,9],[1187,0,1061,5],[1189,0,1063,4],[1189,16,1063,10],[1189,21,1063,15,"unexpected"],[1189,31,1063,10],[1189,33,1063,4],[1190,0,1064,3],[1191,0,805,22],[1192,0,805,22],[1193,0,805,22],[1193,54,1066,32,"node"],[1193,58,805,22],[1193,60,1066,38],[1194,0,1067,4],[1194,15,1067,9,"next"],[1194,19,1067,4],[1195,0,1068,4],[1195,15,1068,9,"expectContextual"],[1195,31,1068,4],[1195,32,1068,26],[1195,41,1068,4],[1196,0,1069,4,"node"],[1196,10,1069,4,"node"],[1196,14,1069,8],[1196,15,1069,9,"typeAnnotation"],[1196,29,1069,4],[1196,32,1069,26],[1196,37,1069,31,"flowParseTypeAnnotation"],[1196,60,1069,26],[1196,62,1069,4],[1197,0,1070,4],[1197,15,1070,9,"semicolon"],[1197,24,1070,4],[1198,0,1071,4],[1198,17,1071,11],[1198,22,1071,16,"finishNode"],[1198,32,1071,11],[1198,33,1071,27,"node"],[1198,37,1071,11],[1198,39,1071,33],[1198,61,1071,11],[1198,62,1071,4],[1199,0,1072,3],[1200,0,805,22],[1201,0,805,22],[1202,0,805,22],[1202,50,1074,28,"node"],[1202,54,805,22],[1202,56,1074,34],[1203,0,1075,4],[1203,15,1075,9,"next"],[1203,19,1075,4],[1204,0,1076,4],[1204,15,1076,9,"flowParseTypeAlias"],[1204,33,1076,4],[1204,34,1076,28,"node"],[1204,38,1076,4],[1205,0,1077,4,"node"],[1205,10,1077,4,"node"],[1205,14,1077,8],[1205,15,1077,9,"type"],[1205,19,1077,4],[1205,22,1077,16],[1205,40,1077,4],[1206,0,1078,4],[1206,17,1078,11,"node"],[1206,21,1078,4],[1207,0,1079,3],[1208,0,805,22],[1209,0,805,22],[1210,0,805,22],[1210,51,1081,29,"node"],[1210,55,805,22],[1210,57,1081,35],[1211,0,1082,4],[1211,15,1082,9,"next"],[1211,19,1082,4],[1212,0,1083,4],[1212,15,1083,9,"flowParseOpaqueType"],[1212,34,1083,4],[1212,35,1083,29,"node"],[1212,39,1083,4],[1212,41,1083,35],[1212,45,1083,4],[1213,0,1084,4,"node"],[1213,10,1084,4,"node"],[1213,14,1084,8],[1213,15,1084,9,"type"],[1213,19,1084,4],[1213,22,1084,16],[1213,41,1084,4],[1214,0,1085,4],[1214,17,1085,11,"node"],[1214,21,1085,4],[1215,0,1086,3],[1216,0,805,22],[1217,0,805,22],[1218,0,805,22],[1218,50,1088,28,"node"],[1218,54,805,22],[1218,56,1088,34],[1219,0,1089,4],[1219,15,1089,9,"next"],[1219,19,1089,4],[1220,0,1090,4],[1220,15,1090,9,"flowParseInterfaceish"],[1220,36,1090,4],[1220,37,1090,31,"node"],[1220,41,1090,4],[1221,0,1091,4],[1221,17,1091,11],[1221,22,1091,16,"finishNode"],[1221,32,1091,11],[1221,33,1091,27,"node"],[1221,37,1091,11],[1221,39,1091,33],[1221,57,1091,11],[1221,58,1091,4],[1222,0,1092,3],[1223,0,805,22],[1224,0,805,22],[1225,0,805,22],[1225,46,1094,24,"node"],[1225,50,805,22],[1225,52,1094,47],[1226,0,1094,47],[1226,14,1094,30,"isClass"],[1226,21,1094,47],[1226,92,1094,40],[1226,97,1094,47],[1227,0,1095,4,"node"],[1227,10,1095,4,"node"],[1227,14,1095,8],[1227,15,1095,9,"id"],[1227,17,1095,4],[1227,20,1095,14],[1227,25,1095,19,"flowParseRestrictedIdentifier"],[1227,54,1095,14],[1227,55,1095,49],[1227,56,1095,50,"isClass"],[1227,63,1095,14],[1227,65,1095,59],[1227,69,1095,14],[1227,70,1095,4],[1228,0,1096,4],[1228,15,1096,9,"scope"],[1228,20,1096,4],[1228,21,1096,15,"declareName"],[1228,32,1096,4],[1228,33,1096,27,"node"],[1228,37,1096,31],[1228,38,1096,32,"id"],[1228,40,1096,27],[1228,41,1096,35,"name"],[1228,45,1096,4],[1228,47,1096,41,"isClass"],[1228,54,1096,48],[1228,57,1096,51,"BIND_FUNCTION"],[1228,70,1096,48],[1228,73,1096,67,"BIND_LEXICAL"],[1228,85,1096,4],[1228,87,1096,81,"node"],[1228,91,1096,85],[1228,92,1096,86,"id"],[1228,94,1096,81],[1228,95,1096,89,"start"],[1228,100,1096,4],[1230,0,1098,4],[1230,14,1098,8],[1230,19,1098,13,"isRelational"],[1230,31,1098,8],[1230,32,1098,26],[1230,35,1098,8],[1230,36,1098,4],[1230,38,1098,32],[1231,0,1099,6,"node"],[1231,12,1099,6,"node"],[1231,16,1099,10],[1231,17,1099,11,"typeParameters"],[1231,31,1099,6],[1231,34,1099,28],[1231,39,1099,33,"flowParseTypeParameterDeclaration"],[1231,72,1099,28],[1231,74,1099,6],[1232,0,1100,5],[1232,11,1098,4],[1232,17,1100,11],[1233,0,1101,6,"node"],[1233,12,1101,6,"node"],[1233,16,1101,10],[1233,17,1101,11,"typeParameters"],[1233,31,1101,6],[1233,34,1101,28],[1233,38,1101,6],[1234,0,1102,5],[1236,0,1104,4,"node"],[1236,10,1104,4,"node"],[1236,14,1104,8],[1236,15,1104,9,"extends"],[1236,22,1104,4],[1236,25,1104,19],[1236,27,1104,4],[1237,0,1105,4,"node"],[1237,10,1105,4,"node"],[1237,14,1105,8],[1237,15,1105,9,"implements"],[1237,25,1105,4],[1237,28,1105,22],[1237,30,1105,4],[1238,0,1106,4,"node"],[1238,10,1106,4,"node"],[1238,14,1106,8],[1238,15,1106,9,"mixins"],[1238,21,1106,4],[1238,24,1106,18],[1238,26,1106,4],[1240,0,1108,4],[1240,14,1108,8],[1240,19,1108,13,"eat"],[1240,22,1108,8],[1240,23,1108,17,"types"],[1240,28,1108,22],[1240,29,1108,23,"_extends"],[1240,37,1108,8],[1240,38,1108,4],[1240,40,1108,34],[1241,0,1109,6],[1241,15,1109,9],[1242,0,1110,8,"node"],[1242,14,1110,8,"node"],[1242,18,1110,12],[1242,19,1110,13,"extends"],[1242,26,1110,8],[1242,27,1110,21,"push"],[1242,31,1110,8],[1242,32,1110,26],[1242,37,1110,31,"flowParseInterfaceExtends"],[1242,62,1110,26],[1242,64,1110,8],[1243,0,1111,7],[1243,13,1109,6],[1243,21,1111,15],[1243,22,1111,16,"isClass"],[1243,29,1111,15],[1243,33,1111,27],[1243,38,1111,32,"eat"],[1243,41,1111,27],[1243,42,1111,36,"types"],[1243,47,1111,41],[1243,48,1111,42,"comma"],[1243,53,1111,27],[1243,54,1109,6],[1244,0,1112,5],[1246,0,1114,4],[1246,14,1114,8],[1246,19,1114,13,"isContextual"],[1246,31,1114,8],[1246,32,1114,26],[1246,40,1114,8],[1246,41,1114,4],[1246,43,1114,37],[1247,0,1115,6],[1247,17,1115,11,"next"],[1247,21,1115,6],[1249,0,1117,6],[1249,15,1117,9],[1250,0,1118,8,"node"],[1250,14,1118,8,"node"],[1250,18,1118,12],[1250,19,1118,13,"mixins"],[1250,25,1118,8],[1250,26,1118,20,"push"],[1250,30,1118,8],[1250,31,1118,25],[1250,36,1118,30,"flowParseInterfaceExtends"],[1250,61,1118,25],[1250,63,1118,8],[1251,0,1119,7],[1251,13,1117,6],[1251,21,1119,15],[1251,26,1119,20,"eat"],[1251,29,1119,15],[1251,30,1119,24,"types"],[1251,35,1119,29],[1251,36,1119,30,"comma"],[1251,41,1119,15],[1251,42,1117,6],[1252,0,1120,5],[1254,0,1122,4],[1254,14,1122,8],[1254,19,1122,13,"isContextual"],[1254,31,1122,8],[1254,32,1122,26],[1254,44,1122,8],[1254,45,1122,4],[1254,47,1122,41],[1255,0,1123,6],[1255,17,1123,11,"next"],[1255,21,1123,6],[1257,0,1125,6],[1257,15,1125,9],[1258,0,1126,8,"node"],[1258,14,1126,8,"node"],[1258,18,1126,12],[1258,19,1126,13,"implements"],[1258,29,1126,8],[1258,30,1126,24,"push"],[1258,34,1126,8],[1258,35,1126,29],[1258,40,1126,34,"flowParseInterfaceExtends"],[1258,65,1126,29],[1258,67,1126,8],[1259,0,1127,7],[1259,13,1125,6],[1259,21,1127,15],[1259,26,1127,20,"eat"],[1259,29,1127,15],[1259,30,1127,24,"types"],[1259,35,1127,29],[1259,36,1127,30,"comma"],[1259,41,1127,15],[1259,42,1125,6],[1260,0,1128,5],[1262,0,1130,4,"node"],[1262,10,1130,4,"node"],[1262,14,1130,8],[1262,15,1130,9,"body"],[1262,19,1130,4],[1262,22,1130,16],[1262,27,1130,21,"flowParseObjectType"],[1262,46,1130,16],[1262,47,1130,41],[1263,0,1131,6,"allowStatic"],[1263,12,1131,6,"allowStatic"],[1263,23,1131,17],[1263,25,1131,19,"isClass"],[1263,32,1130,41],[1264,0,1132,6,"allowExact"],[1264,12,1132,6,"allowExact"],[1264,22,1132,16],[1264,24,1132,18],[1264,29,1130,41],[1265,0,1133,6,"allowSpread"],[1265,12,1133,6,"allowSpread"],[1265,23,1133,17],[1265,25,1133,19],[1265,30,1130,41],[1266,0,1134,6,"allowProto"],[1266,12,1134,6,"allowProto"],[1266,22,1134,16],[1266,24,1134,18,"isClass"],[1266,31,1130,41],[1267,0,1135,6,"allowInexact"],[1267,12,1135,6,"allowInexact"],[1267,24,1135,18],[1267,26,1135,20],[1268,0,1130,41],[1268,11,1130,16],[1268,12,1130,4],[1269,0,1137,3],[1270,0,805,22],[1271,0,805,22],[1272,0,805,22],[1272,52,1139,30],[1273,0,1140,4],[1273,14,1140,10,"node"],[1273,18,1140,14],[1273,21,1140,17],[1273,26,1140,22,"startNode"],[1273,35,1140,17],[1273,37,1140,4],[1274,0,1141,4,"node"],[1274,10,1141,4,"node"],[1274,14,1141,8],[1274,15,1141,9,"id"],[1274,17,1141,4],[1274,20,1141,14],[1274,25,1141,19,"flowParseQualifiedTypeIdentifier"],[1274,57,1141,14],[1274,59,1141,4],[1276,0,1143,4],[1276,14,1143,8],[1276,19,1143,13,"isRelational"],[1276,31,1143,8],[1276,32,1143,26],[1276,35,1143,8],[1276,36,1143,4],[1276,38,1143,32],[1277,0,1144,6,"node"],[1277,12,1144,6,"node"],[1277,16,1144,10],[1277,17,1144,11,"typeParameters"],[1277,31,1144,6],[1277,34,1144,28],[1277,39,1144,33,"flowParseTypeParameterInstantiation"],[1277,74,1144,28],[1277,76,1144,6],[1278,0,1145,5],[1278,11,1143,4],[1278,17,1145,11],[1279,0,1146,6,"node"],[1279,12,1146,6,"node"],[1279,16,1146,10],[1279,17,1146,11,"typeParameters"],[1279,31,1146,6],[1279,34,1146,28],[1279,38,1146,6],[1280,0,1147,5],[1282,0,1149,4],[1282,17,1149,11],[1282,22,1149,16,"finishNode"],[1282,32,1149,11],[1282,33,1149,27,"node"],[1282,37,1149,11],[1282,39,1149,33],[1282,57,1149,11],[1282,58,1149,4],[1283,0,1150,3],[1284,0,805,22],[1285,0,805,22],[1286,0,805,22],[1286,43,1152,21,"node"],[1286,47,805,22],[1286,49,1152,27],[1287,0,1153,4],[1287,15,1153,9,"flowParseInterfaceish"],[1287,36,1153,4],[1287,37,1153,31,"node"],[1287,41,1153,4],[1288,0,1154,4],[1288,17,1154,11],[1288,22,1154,16,"finishNode"],[1288,32,1154,11],[1288,33,1154,27,"node"],[1288,37,1154,11],[1288,39,1154,33],[1288,61,1154,11],[1288,62,1154,4],[1289,0,1155,3],[1290,0,805,22],[1291,0,805,22],[1292,0,805,22],[1292,43,1157,21,"word"],[1292,47,805,22],[1292,49,1157,27],[1293,0,1158,4],[1293,14,1158,8,"word"],[1293,18,1158,12],[1293,23,1158,17],[1293,26,1158,4],[1293,28,1158,22],[1294,0,1159,6],[1294,17,1159,11,"raise"],[1294,22,1159,6],[1294,23,1159,17],[1294,28,1159,22,"state"],[1294,33,1159,17],[1294,34,1159,28,"start"],[1294,39,1159,6],[1294,41,1159,35],[1294,96,1159,6],[1295,0,1160,5],[1296,0,1161,3],[1297,0,805,22],[1298,0,805,22],[1299,0,805,22],[1299,42,1163,20,"word"],[1299,46,805,22],[1299,48,1163,26,"startLoc"],[1299,56,805,22],[1299,58,1163,36,"declaration"],[1299,69,805,22],[1299,71,1163,49],[1300,0,1164,4],[1300,14,1164,8],[1300,15,1164,9,"reservedTypes"],[1300,28,1164,22],[1300,29,1164,23,"has"],[1300,32,1164,9],[1300,33,1164,27,"word"],[1300,37,1164,9],[1300,38,1164,4],[1300,40,1164,34],[1302,0,1166,4],[1302,14,1166,8,"declaration"],[1302,25,1166,4],[1302,27,1166,21],[1303,0,1167,6],[1303,17,1167,11,"raise"],[1303,22,1167,6],[1303,23,1167,17,"startLoc"],[1303,31,1167,6],[1303,69,1167,61,"word"],[1303,73,1167,6],[1304,0,1168,6],[1305,0,1169,5],[1307,0,1171,4],[1307,15,1171,9,"raise"],[1307,20,1171,4],[1307,21,1171,15,"startLoc"],[1307,29,1171,4],[1307,61,1171,53,"word"],[1307,65,1171,4],[1308,0,1172,3],[1309,0,805,22],[1310,0,805,22],[1311,0,805,22],[1311,54,1174,32,"liberal"],[1311,61,805,22],[1311,63,1174,41,"declaration"],[1311,74,805,22],[1311,76,1174,54],[1312,0,1175,4],[1312,15,1175,9,"checkReservedType"],[1312,32,1175,4],[1312,33,1175,27],[1312,38,1175,32,"state"],[1312,43,1175,27],[1312,44,1175,38,"value"],[1312,49,1175,4],[1312,51,1175,45],[1312,56,1175,50,"state"],[1312,61,1175,45],[1312,62,1175,56,"start"],[1312,67,1175,4],[1312,69,1175,63,"declaration"],[1312,80,1175,4],[1313,0,1176,4],[1313,17,1176,11],[1313,22,1176,16,"parseIdentifier"],[1313,37,1176,11],[1313,38,1176,32,"liberal"],[1313,45,1176,11],[1313,46,1176,4],[1314,0,1177,3],[1315,0,805,22],[1316,0,805,22],[1317,0,805,22],[1317,43,1179,21,"node"],[1317,47,805,22],[1317,49,1179,27],[1318,0,1180,4,"node"],[1318,10,1180,4,"node"],[1318,14,1180,8],[1318,15,1180,9,"id"],[1318,17,1180,4],[1318,20,1180,14],[1318,25,1180,19,"flowParseRestrictedIdentifier"],[1318,54,1180,14],[1318,55,1180,49],[1318,60,1180,14],[1318,62,1180,56],[1318,66,1180,14],[1318,67,1180,4],[1319,0,1181,4],[1319,15,1181,9,"scope"],[1319,20,1181,4],[1319,21,1181,15,"declareName"],[1319,32,1181,4],[1319,33,1181,27,"node"],[1319,37,1181,31],[1319,38,1181,32,"id"],[1319,40,1181,27],[1319,41,1181,35,"name"],[1319,45,1181,4],[1319,47,1181,41,"BIND_LEXICAL"],[1319,59,1181,4],[1319,61,1181,55,"node"],[1319,65,1181,59],[1319,66,1181,60,"id"],[1319,68,1181,55],[1319,69,1181,63,"start"],[1319,74,1181,4],[1321,0,1183,4],[1321,14,1183,8],[1321,19,1183,13,"isRelational"],[1321,31,1183,8],[1321,32,1183,26],[1321,35,1183,8],[1321,36,1183,4],[1321,38,1183,32],[1322,0,1184,6,"node"],[1322,12,1184,6,"node"],[1322,16,1184,10],[1322,17,1184,11,"typeParameters"],[1322,31,1184,6],[1322,34,1184,28],[1322,39,1184,33,"flowParseTypeParameterDeclaration"],[1322,72,1184,28],[1322,74,1184,6],[1323,0,1185,5],[1323,11,1183,4],[1323,17,1185,11],[1324,0,1186,6,"node"],[1324,12,1186,6,"node"],[1324,16,1186,10],[1324,17,1186,11,"typeParameters"],[1324,31,1186,6],[1324,34,1186,28],[1324,38,1186,6],[1325,0,1187,5],[1327,0,1189,4,"node"],[1327,10,1189,4,"node"],[1327,14,1189,8],[1327,15,1189,9,"right"],[1327,20,1189,4],[1327,23,1189,17],[1327,28,1189,22,"flowParseTypeInitialiser"],[1327,52,1189,17],[1327,53,1189,47,"types"],[1327,58,1189,52],[1327,59,1189,53,"eq"],[1327,61,1189,17],[1327,62,1189,4],[1328,0,1190,4],[1328,15,1190,9,"semicolon"],[1328,24,1190,4],[1329,0,1191,4],[1329,17,1191,11],[1329,22,1191,16,"finishNode"],[1329,32,1191,11],[1329,33,1191,27,"node"],[1329,37,1191,11],[1329,39,1191,33],[1329,50,1191,11],[1329,51,1191,4],[1330,0,1192,3],[1331,0,805,22],[1332,0,805,22],[1333,0,805,22],[1333,44,1194,22,"node"],[1333,48,805,22],[1333,50,1194,28,"declare"],[1333,57,805,22],[1333,59,1194,37],[1334,0,1195,4],[1334,15,1195,9,"expectContextual"],[1334,31,1195,4],[1334,32,1195,26],[1334,38,1195,4],[1335,0,1196,4,"node"],[1335,10,1196,4,"node"],[1335,14,1196,8],[1335,15,1196,9,"id"],[1335,17,1196,4],[1335,20,1196,14],[1335,25,1196,19,"flowParseRestrictedIdentifier"],[1335,54,1196,14],[1335,55,1196,49],[1335,59,1196,14],[1335,61,1196,55],[1335,65,1196,14],[1335,66,1196,4],[1336,0,1197,4],[1336,15,1197,9,"scope"],[1336,20,1197,4],[1336,21,1197,15,"declareName"],[1336,32,1197,4],[1336,33,1197,27,"node"],[1336,37,1197,31],[1336,38,1197,32,"id"],[1336,40,1197,27],[1336,41,1197,35,"name"],[1336,45,1197,4],[1336,47,1197,41,"BIND_LEXICAL"],[1336,59,1197,4],[1336,61,1197,55,"node"],[1336,65,1197,59],[1336,66,1197,60,"id"],[1336,68,1197,55],[1336,69,1197,63,"start"],[1336,74,1197,4],[1338,0,1199,4],[1338,14,1199,8],[1338,19,1199,13,"isRelational"],[1338,31,1199,8],[1338,32,1199,26],[1338,35,1199,8],[1338,36,1199,4],[1338,38,1199,32],[1339,0,1200,6,"node"],[1339,12,1200,6,"node"],[1339,16,1200,10],[1339,17,1200,11,"typeParameters"],[1339,31,1200,6],[1339,34,1200,28],[1339,39,1200,33,"flowParseTypeParameterDeclaration"],[1339,72,1200,28],[1339,74,1200,6],[1340,0,1201,5],[1340,11,1199,4],[1340,17,1201,11],[1341,0,1202,6,"node"],[1341,12,1202,6,"node"],[1341,16,1202,10],[1341,17,1202,11,"typeParameters"],[1341,31,1202,6],[1341,34,1202,28],[1341,38,1202,6],[1342,0,1203,5],[1344,0,1205,4,"node"],[1344,10,1205,4,"node"],[1344,14,1205,8],[1344,15,1205,9,"supertype"],[1344,24,1205,4],[1344,27,1205,21],[1344,31,1205,4],[1346,0,1207,4],[1346,14,1207,8],[1346,19,1207,13,"match"],[1346,24,1207,8],[1346,25,1207,19,"types"],[1346,30,1207,24],[1346,31,1207,25,"colon"],[1346,36,1207,8],[1346,37,1207,4],[1346,39,1207,33],[1347,0,1208,6,"node"],[1347,12,1208,6,"node"],[1347,16,1208,10],[1347,17,1208,11,"supertype"],[1347,26,1208,6],[1347,29,1208,23],[1347,34,1208,28,"flowParseTypeInitialiser"],[1347,58,1208,23],[1347,59,1208,53,"types"],[1347,64,1208,58],[1347,65,1208,59,"colon"],[1347,70,1208,23],[1347,71,1208,6],[1348,0,1209,5],[1350,0,1211,4,"node"],[1350,10,1211,4,"node"],[1350,14,1211,8],[1350,15,1211,9,"impltype"],[1350,23,1211,4],[1350,26,1211,20],[1350,30,1211,4],[1352,0,1213,4],[1352,14,1213,8],[1352,15,1213,9,"declare"],[1352,22,1213,4],[1352,24,1213,18],[1353,0,1214,6,"node"],[1353,12,1214,6,"node"],[1353,16,1214,10],[1353,17,1214,11,"impltype"],[1353,25,1214,6],[1353,28,1214,22],[1353,33,1214,27,"flowParseTypeInitialiser"],[1353,57,1214,22],[1353,58,1214,52,"types"],[1353,63,1214,57],[1353,64,1214,58,"eq"],[1353,66,1214,22],[1353,67,1214,6],[1354,0,1215,5],[1356,0,1217,4],[1356,15,1217,9,"semicolon"],[1356,24,1217,4],[1357,0,1218,4],[1357,17,1218,11],[1357,22,1218,16,"finishNode"],[1357,32,1218,11],[1357,33,1218,27,"node"],[1357,37,1218,11],[1357,39,1218,33],[1357,51,1218,11],[1357,52,1218,4],[1358,0,1219,3],[1359,0,805,22],[1360,0,805,22],[1361,0,805,22],[1361,49,1221,49],[1362,0,1221,49],[1362,14,1221,25,"requireDefault"],[1362,28,1221,49],[1362,99,1221,42],[1362,104,1221,49],[1363,0,1222,4],[1363,14,1222,10,"nodeStart"],[1363,23,1222,19],[1363,26,1222,22],[1363,31,1222,27,"state"],[1363,36,1222,22],[1363,37,1222,33,"start"],[1363,42,1222,4],[1364,0,1223,4],[1364,14,1223,10,"node"],[1364,18,1223,14],[1364,21,1223,17],[1364,26,1223,22,"startNode"],[1364,35,1223,17],[1364,37,1223,4],[1365,0,1224,4],[1365,14,1224,10,"variance"],[1365,22,1224,18],[1365,25,1224,21],[1365,30,1224,26,"flowParseVariance"],[1365,47,1224,21],[1365,49,1224,4],[1366,0,1225,4],[1366,14,1225,10,"ident"],[1366,19,1225,15],[1366,22,1225,18],[1366,27,1225,23,"flowParseTypeAnnotatableIdentifier"],[1366,61,1225,18],[1366,63,1225,4],[1367,0,1226,4,"node"],[1367,10,1226,4,"node"],[1367,14,1226,8],[1367,15,1226,9,"name"],[1367,19,1226,4],[1367,22,1226,16,"ident"],[1367,27,1226,21],[1367,28,1226,22,"name"],[1367,32,1226,4],[1368,0,1227,4,"node"],[1368,10,1227,4,"node"],[1368,14,1227,8],[1368,15,1227,9,"variance"],[1368,23,1227,4],[1368,26,1227,20,"variance"],[1368,34,1227,4],[1369,0,1228,4,"node"],[1369,10,1228,4,"node"],[1369,14,1228,8],[1369,15,1228,9,"bound"],[1369,20,1228,4],[1369,23,1228,17,"ident"],[1369,28,1228,22],[1369,29,1228,23,"typeAnnotation"],[1369,43,1228,4],[1371,0,1230,4],[1371,14,1230,8],[1371,19,1230,13,"match"],[1371,24,1230,8],[1371,25,1230,19,"types"],[1371,30,1230,24],[1371,31,1230,25,"eq"],[1371,33,1230,8],[1371,34,1230,4],[1371,36,1230,30],[1372,0,1231,6],[1372,17,1231,11,"eat"],[1372,20,1231,6],[1372,21,1231,15,"types"],[1372,26,1231,20],[1372,27,1231,21,"eq"],[1372,29,1231,6],[1373,0,1232,6,"node"],[1373,12,1232,6,"node"],[1373,16,1232,10],[1373,17,1232,11,"default"],[1373,24,1232,6],[1373,27,1232,21],[1373,32,1232,26,"flowParseType"],[1373,45,1232,21],[1373,47,1232,6],[1374,0,1233,5],[1374,11,1230,4],[1374,17,1233,11],[1375,0,1234,6],[1375,16,1234,10,"requireDefault"],[1375,30,1234,6],[1375,32,1234,26],[1376,0,1235,8],[1376,19,1235,13,"raise"],[1376,24,1235,8],[1376,25,1235,19,"nodeStart"],[1376,34,1235,8],[1376,36,1235,30],[1376,141,1235,8],[1377,0,1236,7],[1378,0,1237,5],[1380,0,1239,4],[1380,17,1239,11],[1380,22,1239,16,"finishNode"],[1380,32,1239,11],[1380,33,1239,27,"node"],[1380,37,1239,11],[1380,39,1239,33],[1380,54,1239,11],[1380,55,1239,4],[1381,0,1240,3],[1382,0,805,22],[1383,0,805,22],[1384,0,805,22],[1384,60,1242,38],[1385,0,1243,4],[1385,14,1243,10,"oldInType"],[1385,23,1243,19],[1385,26,1243,22],[1385,31,1243,27,"state"],[1385,36,1243,22],[1385,37,1243,33,"inType"],[1385,43,1243,4],[1386,0,1244,4],[1386,14,1244,10,"node"],[1386,18,1244,14],[1386,21,1244,17],[1386,26,1244,22,"startNode"],[1386,35,1244,17],[1386,37,1244,4],[1387,0,1245,4,"node"],[1387,10,1245,4,"node"],[1387,14,1245,8],[1387,15,1245,9,"params"],[1387,21,1245,4],[1387,24,1245,18],[1387,26,1245,4],[1388,0,1246,4],[1388,15,1246,9,"state"],[1388,20,1246,4],[1388,21,1246,15,"inType"],[1388,27,1246,4],[1388,30,1246,24],[1388,34,1246,4],[1390,0,1248,4],[1390,14,1248,8],[1390,19,1248,13,"isRelational"],[1390,31,1248,8],[1390,32,1248,26],[1390,35,1248,8],[1390,40,1248,34],[1390,45,1248,39,"match"],[1390,50,1248,34],[1390,51,1248,45,"types"],[1390,56,1248,50],[1390,57,1248,51,"jsxTagStart"],[1390,68,1248,34],[1390,69,1248,4],[1390,71,1248,65],[1391,0,1249,6],[1391,17,1249,11,"next"],[1391,21,1249,6],[1392,0,1250,5],[1392,11,1248,4],[1392,17,1250,11],[1393,0,1251,6],[1393,17,1251,11,"unexpected"],[1393,27,1251,6],[1394,0,1252,5],[1396,0,1254,4],[1396,14,1254,8,"defaultRequired"],[1396,29,1254,23],[1396,32,1254,26],[1396,37,1254,4],[1398,0,1256,4],[1398,13,1256,7],[1399,0,1257,6],[1399,16,1257,12,"typeParameter"],[1399,29,1257,25],[1399,32,1257,28],[1399,37,1257,33,"flowParseTypeParameter"],[1399,59,1257,28],[1399,60,1257,56,"defaultRequired"],[1399,75,1257,28],[1399,76,1257,6],[1400,0,1258,6,"node"],[1400,12,1258,6,"node"],[1400,16,1258,10],[1400,17,1258,11,"params"],[1400,23,1258,6],[1400,24,1258,18,"push"],[1400,28,1258,6],[1400,29,1258,23,"typeParameter"],[1400,42,1258,6],[1402,0,1260,6],[1402,16,1260,10,"typeParameter"],[1402,29,1260,23],[1402,30,1260,24,"default"],[1402,37,1260,6],[1402,39,1260,33],[1403,0,1261,8,"defaultRequired"],[1403,14,1261,8,"defaultRequired"],[1403,29,1261,23],[1403,32,1261,26],[1403,36,1261,8],[1404,0,1262,7],[1406,0,1264,6],[1406,16,1264,10],[1406,17,1264,11],[1406,22,1264,16,"isRelational"],[1406,34,1264,11],[1406,35,1264,29],[1406,38,1264,11],[1406,39,1264,6],[1406,41,1264,35],[1407,0,1265,8],[1407,19,1265,13,"expect"],[1407,25,1265,8],[1407,26,1265,20,"types"],[1407,31,1265,25],[1407,32,1265,26,"comma"],[1407,37,1265,8],[1408,0,1266,7],[1409,0,1267,5],[1409,11,1256,4],[1409,19,1267,13],[1409,20,1267,14],[1409,25,1267,19,"isRelational"],[1409,37,1267,14],[1409,38,1267,32],[1409,41,1267,14],[1409,42,1256,4],[1411,0,1269,4],[1411,15,1269,9,"expectRelational"],[1411,31,1269,4],[1411,32,1269,26],[1411,35,1269,4],[1412,0,1270,4],[1412,15,1270,9,"state"],[1412,20,1270,4],[1412,21,1270,15,"inType"],[1412,27,1270,4],[1412,30,1270,24,"oldInType"],[1412,39,1270,4],[1413,0,1271,4],[1413,17,1271,11],[1413,22,1271,16,"finishNode"],[1413,32,1271,11],[1413,33,1271,27,"node"],[1413,37,1271,11],[1413,39,1271,33],[1413,65,1271,11],[1413,66,1271,4],[1414,0,1272,3],[1415,0,805,22],[1416,0,805,22],[1417,0,805,22],[1417,62,1274,40],[1418,0,1275,4],[1418,14,1275,10,"node"],[1418,18,1275,14],[1418,21,1275,17],[1418,26,1275,22,"startNode"],[1418,35,1275,17],[1418,37,1275,4],[1419,0,1276,4],[1419,14,1276,10,"oldInType"],[1419,23,1276,19],[1419,26,1276,22],[1419,31,1276,27,"state"],[1419,36,1276,22],[1419,37,1276,33,"inType"],[1419,43,1276,4],[1420,0,1277,4,"node"],[1420,10,1277,4,"node"],[1420,14,1277,8],[1420,15,1277,9,"params"],[1420,21,1277,4],[1420,24,1277,18],[1420,26,1277,4],[1421,0,1278,4],[1421,15,1278,9,"state"],[1421,20,1278,4],[1421,21,1278,15,"inType"],[1421,27,1278,4],[1421,30,1278,24],[1421,34,1278,4],[1422,0,1279,4],[1422,15,1279,9,"expectRelational"],[1422,31,1279,4],[1422,32,1279,26],[1422,35,1279,4],[1423,0,1280,4],[1423,14,1280,10,"oldNoAnonFunctionType"],[1423,35,1280,31],[1423,38,1280,34],[1423,43,1280,39,"state"],[1423,48,1280,34],[1423,49,1280,45,"noAnonFunctionType"],[1423,67,1280,4],[1424,0,1281,4],[1424,15,1281,9,"state"],[1424,20,1281,4],[1424,21,1281,15,"noAnonFunctionType"],[1424,39,1281,4],[1424,42,1281,36],[1424,47,1281,4],[1426,0,1283,4],[1426,17,1283,11],[1426,18,1283,12],[1426,23,1283,17,"isRelational"],[1426,35,1283,12],[1426,36,1283,30],[1426,39,1283,12],[1426,40,1283,4],[1426,42,1283,36],[1427,0,1284,6,"node"],[1427,12,1284,6,"node"],[1427,16,1284,10],[1427,17,1284,11,"params"],[1427,23,1284,6],[1427,24,1284,18,"push"],[1427,28,1284,6],[1427,29,1284,23],[1427,34,1284,28,"flowParseType"],[1427,47,1284,23],[1427,49,1284,6],[1429,0,1286,6],[1429,16,1286,10],[1429,17,1286,11],[1429,22,1286,16,"isRelational"],[1429,34,1286,11],[1429,35,1286,29],[1429,38,1286,11],[1429,39,1286,6],[1429,41,1286,35],[1430,0,1287,8],[1430,19,1287,13,"expect"],[1430,25,1287,8],[1430,26,1287,20,"types"],[1430,31,1287,25],[1430,32,1287,26,"comma"],[1430,37,1287,8],[1431,0,1288,7],[1432,0,1289,5],[1434,0,1291,4],[1434,15,1291,9,"state"],[1434,20,1291,4],[1434,21,1291,15,"noAnonFunctionType"],[1434,39,1291,4],[1434,42,1291,36,"oldNoAnonFunctionType"],[1434,63,1291,4],[1435,0,1292,4],[1435,15,1292,9,"expectRelational"],[1435,31,1292,4],[1435,32,1292,26],[1435,35,1292,4],[1436,0,1293,4],[1436,15,1293,9,"state"],[1436,20,1293,4],[1436,21,1293,15,"inType"],[1436,27,1293,4],[1436,30,1293,24,"oldInType"],[1436,39,1293,4],[1437,0,1294,4],[1437,17,1294,11],[1437,22,1294,16,"finishNode"],[1437,32,1294,11],[1437,33,1294,27,"node"],[1437,37,1294,11],[1437,39,1294,33],[1437,67,1294,11],[1437,68,1294,4],[1438,0,1295,3],[1439,0,805,22],[1440,0,805,22],[1441,0,805,22],[1441,71,1297,49],[1442,0,1298,4],[1442,14,1298,10,"node"],[1442,18,1298,14],[1442,21,1298,17],[1442,26,1298,22,"startNode"],[1442,35,1298,17],[1442,37,1298,4],[1443,0,1299,4],[1443,14,1299,10,"oldInType"],[1443,23,1299,19],[1443,26,1299,22],[1443,31,1299,27,"state"],[1443,36,1299,22],[1443,37,1299,33,"inType"],[1443,43,1299,4],[1444,0,1300,4,"node"],[1444,10,1300,4,"node"],[1444,14,1300,8],[1444,15,1300,9,"params"],[1444,21,1300,4],[1444,24,1300,18],[1444,26,1300,4],[1445,0,1301,4],[1445,15,1301,9,"state"],[1445,20,1301,4],[1445,21,1301,15,"inType"],[1445,27,1301,4],[1445,30,1301,24],[1445,34,1301,4],[1446,0,1302,4],[1446,15,1302,9,"expectRelational"],[1446,31,1302,4],[1446,32,1302,26],[1446,35,1302,4],[1448,0,1304,4],[1448,17,1304,11],[1448,18,1304,12],[1448,23,1304,17,"isRelational"],[1448,35,1304,12],[1448,36,1304,30],[1448,39,1304,12],[1448,40,1304,4],[1448,42,1304,36],[1449,0,1305,6,"node"],[1449,12,1305,6,"node"],[1449,16,1305,10],[1449,17,1305,11,"params"],[1449,23,1305,6],[1449,24,1305,18,"push"],[1449,28,1305,6],[1449,29,1305,23],[1449,34,1305,28,"flowParseTypeOrImplicitInstantiation"],[1449,70,1305,23],[1449,72,1305,6],[1451,0,1307,6],[1451,16,1307,10],[1451,17,1307,11],[1451,22,1307,16,"isRelational"],[1451,34,1307,11],[1451,35,1307,29],[1451,38,1307,11],[1451,39,1307,6],[1451,41,1307,35],[1452,0,1308,8],[1452,19,1308,13,"expect"],[1452,25,1308,8],[1452,26,1308,20,"types"],[1452,31,1308,25],[1452,32,1308,26,"comma"],[1452,37,1308,8],[1453,0,1309,7],[1454,0,1310,5],[1456,0,1312,4],[1456,15,1312,9,"expectRelational"],[1456,31,1312,4],[1456,32,1312,26],[1456,35,1312,4],[1457,0,1313,4],[1457,15,1313,9,"state"],[1457,20,1313,4],[1457,21,1313,15,"inType"],[1457,27,1313,4],[1457,30,1313,24,"oldInType"],[1457,39,1313,4],[1458,0,1314,4],[1458,17,1314,11],[1458,22,1314,16,"finishNode"],[1458,32,1314,11],[1458,33,1314,27,"node"],[1458,37,1314,11],[1458,39,1314,33],[1458,67,1314,11],[1458,68,1314,4],[1459,0,1315,3],[1460,0,805,22],[1461,0,805,22],[1462,0,805,22],[1462,49,1317,27],[1463,0,1318,4],[1463,14,1318,10,"node"],[1463,18,1318,14],[1463,21,1318,17],[1463,26,1318,22,"startNode"],[1463,35,1318,17],[1463,37,1318,4],[1464,0,1319,4],[1464,15,1319,9,"expectContextual"],[1464,31,1319,4],[1464,32,1319,26],[1464,43,1319,4],[1465,0,1320,4,"node"],[1465,10,1320,4,"node"],[1465,14,1320,8],[1465,15,1320,9,"extends"],[1465,22,1320,4],[1465,25,1320,19],[1465,27,1320,4],[1467,0,1322,4],[1467,14,1322,8],[1467,19,1322,13,"eat"],[1467,22,1322,8],[1467,23,1322,17,"types"],[1467,28,1322,22],[1467,29,1322,23,"_extends"],[1467,37,1322,8],[1467,38,1322,4],[1467,40,1322,34],[1468,0,1323,6],[1468,15,1323,9],[1469,0,1324,8,"node"],[1469,14,1324,8,"node"],[1469,18,1324,12],[1469,19,1324,13,"extends"],[1469,26,1324,8],[1469,27,1324,21,"push"],[1469,31,1324,8],[1469,32,1324,26],[1469,37,1324,31,"flowParseInterfaceExtends"],[1469,62,1324,26],[1469,64,1324,8],[1470,0,1325,7],[1470,13,1323,6],[1470,21,1325,15],[1470,26,1325,20,"eat"],[1470,29,1325,15],[1470,30,1325,24,"types"],[1470,35,1325,29],[1470,36,1325,30,"comma"],[1470,41,1325,15],[1470,42,1323,6],[1471,0,1326,5],[1473,0,1328,4,"node"],[1473,10,1328,4,"node"],[1473,14,1328,8],[1473,15,1328,9,"body"],[1473,19,1328,4],[1473,22,1328,16],[1473,27,1328,21,"flowParseObjectType"],[1473,46,1328,16],[1473,47,1328,41],[1474,0,1329,6,"allowStatic"],[1474,12,1329,6,"allowStatic"],[1474,23,1329,17],[1474,25,1329,19],[1474,30,1328,41],[1475,0,1330,6,"allowExact"],[1475,12,1330,6,"allowExact"],[1475,22,1330,16],[1475,24,1330,18],[1475,29,1328,41],[1476,0,1331,6,"allowSpread"],[1476,12,1331,6,"allowSpread"],[1476,23,1331,17],[1476,25,1331,19],[1476,30,1328,41],[1477,0,1332,6,"allowProto"],[1477,12,1332,6,"allowProto"],[1477,22,1332,16],[1477,24,1332,18],[1477,29,1328,41],[1478,0,1333,6,"allowInexact"],[1478,12,1333,6,"allowInexact"],[1478,24,1333,18],[1478,26,1333,20],[1479,0,1328,41],[1479,11,1328,16],[1479,12,1328,4],[1480,0,1335,4],[1480,17,1335,11],[1480,22,1335,16,"finishNode"],[1480,32,1335,11],[1480,33,1335,27,"node"],[1480,37,1335,11],[1480,39,1335,33],[1480,64,1335,11],[1480,65,1335,4],[1481,0,1336,3],[1482,0,805,22],[1483,0,805,22],[1484,0,805,22],[1484,53,1338,31],[1485,0,1339,4],[1485,17,1339,11],[1485,22,1339,16,"match"],[1485,27,1339,11],[1485,28,1339,22,"types"],[1485,33,1339,27],[1485,34,1339,28,"num"],[1485,37,1339,11],[1485,42,1339,36],[1485,47,1339,41,"match"],[1485,52,1339,36],[1485,53,1339,47,"types"],[1485,58,1339,52],[1485,59,1339,53,"string"],[1485,65,1339,36],[1485,66,1339,11],[1485,69,1339,63],[1485,74,1339,68,"parseExprAtom"],[1485,87,1339,63],[1485,89,1339,11],[1485,92,1339,86],[1485,97,1339,91,"parseIdentifier"],[1485,112,1339,86],[1485,113,1339,107],[1485,117,1339,86],[1485,118,1339,4],[1486,0,1340,3],[1487,0,805,22],[1488,0,805,22],[1489,0,805,22],[1489,51,1342,29,"node"],[1489,55,805,22],[1489,57,1342,35,"isStatic"],[1489,65,805,22],[1489,67,1342,45,"variance"],[1489,75,805,22],[1489,77,1342,55],[1490,0,1343,4,"node"],[1490,10,1343,4,"node"],[1490,14,1343,8],[1490,15,1343,9,"static"],[1490,21,1343,4],[1490,24,1343,18,"isStatic"],[1490,32,1343,4],[1492,0,1345,4],[1492,14,1345,8],[1492,19,1345,13,"lookahead"],[1492,28,1345,8],[1492,31,1345,25,"type"],[1492,35,1345,8],[1492,40,1345,34,"types"],[1492,45,1345,39],[1492,46,1345,40,"colon"],[1492,51,1345,4],[1492,53,1345,47],[1493,0,1346,6,"node"],[1493,12,1346,6,"node"],[1493,16,1346,10],[1493,17,1346,11,"id"],[1493,19,1346,6],[1493,22,1346,16],[1493,27,1346,21,"flowParseObjectPropertyKey"],[1493,53,1346,16],[1493,55,1346,6],[1494,0,1347,6,"node"],[1494,12,1347,6,"node"],[1494,16,1347,10],[1494,17,1347,11,"key"],[1494,20,1347,6],[1494,23,1347,17],[1494,28,1347,22,"flowParseTypeInitialiser"],[1494,52,1347,17],[1494,54,1347,6],[1495,0,1348,5],[1495,11,1345,4],[1495,17,1348,11],[1496,0,1349,6,"node"],[1496,12,1349,6,"node"],[1496,16,1349,10],[1496,17,1349,11,"id"],[1496,19,1349,6],[1496,22,1349,16],[1496,26,1349,6],[1497,0,1350,6,"node"],[1497,12,1350,6,"node"],[1497,16,1350,10],[1497,17,1350,11,"key"],[1497,20,1350,6],[1497,23,1350,17],[1497,28,1350,22,"flowParseType"],[1497,41,1350,17],[1497,43,1350,6],[1498,0,1351,5],[1500,0,1353,4],[1500,15,1353,9,"expect"],[1500,21,1353,4],[1500,22,1353,16,"types"],[1500,27,1353,21],[1500,28,1353,22,"bracketR"],[1500,36,1353,4],[1501,0,1354,4,"node"],[1501,10,1354,4,"node"],[1501,14,1354,8],[1501,15,1354,9,"value"],[1501,20,1354,4],[1501,23,1354,17],[1501,28,1354,22,"flowParseTypeInitialiser"],[1501,52,1354,17],[1501,54,1354,4],[1502,0,1355,4,"node"],[1502,10,1355,4,"node"],[1502,14,1355,8],[1502,15,1355,9,"variance"],[1502,23,1355,4],[1502,26,1355,20,"variance"],[1502,34,1355,4],[1503,0,1356,4],[1503,17,1356,11],[1503,22,1356,16,"finishNode"],[1503,32,1356,11],[1503,33,1356,27,"node"],[1503,37,1356,11],[1503,39,1356,33],[1503,58,1356,11],[1503,59,1356,4],[1504,0,1357,3],[1505,0,805,22],[1506,0,805,22],[1507,0,805,22],[1507,56,1359,34,"node"],[1507,60,805,22],[1507,62,1359,40,"isStatic"],[1507,70,805,22],[1507,72,1359,50],[1508,0,1360,4,"node"],[1508,10,1360,4,"node"],[1508,14,1360,8],[1508,15,1360,9,"static"],[1508,21,1360,4],[1508,24,1360,18,"isStatic"],[1508,32,1360,4],[1509,0,1361,4,"node"],[1509,10,1361,4,"node"],[1509,14,1361,8],[1509,15,1361,9,"id"],[1509,17,1361,4],[1509,20,1361,14],[1509,25,1361,19,"flowParseObjectPropertyKey"],[1509,51,1361,14],[1509,53,1361,4],[1510,0,1362,4],[1510,15,1362,9,"expect"],[1510,21,1362,4],[1510,22,1362,16,"types"],[1510,27,1362,21],[1510,28,1362,22,"bracketR"],[1510,36,1362,4],[1511,0,1363,4],[1511,15,1363,9,"expect"],[1511,21,1363,4],[1511,22,1363,16,"types"],[1511,27,1363,21],[1511,28,1363,22,"bracketR"],[1511,36,1363,4],[1513,0,1365,4],[1513,14,1365,8],[1513,19,1365,13,"isRelational"],[1513,31,1365,8],[1513,32,1365,26],[1513,35,1365,8],[1513,40,1365,34],[1513,45,1365,39,"match"],[1513,50,1365,34],[1513,51,1365,45,"types"],[1513,56,1365,50],[1513,57,1365,51,"parenL"],[1513,63,1365,34],[1513,64,1365,4],[1513,66,1365,60],[1514,0,1366,6,"node"],[1514,12,1366,6,"node"],[1514,16,1366,10],[1514,17,1366,11,"method"],[1514,23,1366,6],[1514,26,1366,20],[1514,30,1366,6],[1515,0,1367,6,"node"],[1515,12,1367,6,"node"],[1515,16,1367,10],[1515,17,1367,11,"optional"],[1515,25,1367,6],[1515,28,1367,22],[1515,33,1367,6],[1516,0,1368,6,"node"],[1516,12,1368,6,"node"],[1516,16,1368,10],[1516,17,1368,11,"value"],[1516,22,1368,6],[1516,25,1368,19],[1516,30,1368,24,"flowParseObjectTypeMethodish"],[1516,58,1368,19],[1516,59,1368,53],[1516,64,1368,58,"startNodeAt"],[1516,75,1368,53],[1516,76,1368,70,"node"],[1516,80,1368,74],[1516,81,1368,75,"start"],[1516,86,1368,53],[1516,88,1368,82,"node"],[1516,92,1368,86],[1516,93,1368,87,"loc"],[1516,96,1368,82],[1516,97,1368,91,"start"],[1516,102,1368,53],[1516,103,1368,19],[1516,104,1368,6],[1517,0,1369,5],[1517,11,1365,4],[1517,17,1369,11],[1518,0,1370,6,"node"],[1518,12,1370,6,"node"],[1518,16,1370,10],[1518,17,1370,11,"method"],[1518,23,1370,6],[1518,26,1370,20],[1518,31,1370,6],[1520,0,1372,6],[1520,16,1372,10],[1520,21,1372,15,"eat"],[1520,24,1372,10],[1520,25,1372,19,"types"],[1520,30,1372,24],[1520,31,1372,25,"question"],[1520,39,1372,10],[1520,40,1372,6],[1520,42,1372,36],[1521,0,1373,8,"node"],[1521,14,1373,8,"node"],[1521,18,1373,12],[1521,19,1373,13,"optional"],[1521,27,1373,8],[1521,30,1373,24],[1521,34,1373,8],[1522,0,1374,7],[1524,0,1376,6,"node"],[1524,12,1376,6,"node"],[1524,16,1376,10],[1524,17,1376,11,"value"],[1524,22,1376,6],[1524,25,1376,19],[1524,30,1376,24,"flowParseTypeInitialiser"],[1524,54,1376,19],[1524,56,1376,6],[1525,0,1377,5],[1527,0,1379,4],[1527,17,1379,11],[1527,22,1379,16,"finishNode"],[1527,32,1379,11],[1527,33,1379,27,"node"],[1527,37,1379,11],[1527,39,1379,33],[1527,63,1379,11],[1527,64,1379,4],[1528,0,1380,3],[1529,0,805,22],[1530,0,805,22],[1531,0,805,22],[1531,53,1382,31,"node"],[1531,57,805,22],[1531,59,1382,37],[1532,0,1383,4,"node"],[1532,10,1383,4,"node"],[1532,14,1383,8],[1532,15,1383,9,"params"],[1532,21,1383,4],[1532,24,1383,18],[1532,26,1383,4],[1533,0,1384,4,"node"],[1533,10,1384,4,"node"],[1533,14,1384,8],[1533,15,1384,9,"rest"],[1533,19,1384,4],[1533,22,1384,16],[1533,26,1384,4],[1534,0,1385,4,"node"],[1534,10,1385,4,"node"],[1534,14,1385,8],[1534,15,1385,9,"typeParameters"],[1534,29,1385,4],[1534,32,1385,26],[1534,36,1385,4],[1536,0,1387,4],[1536,14,1387,8],[1536,19,1387,13,"isRelational"],[1536,31,1387,8],[1536,32,1387,26],[1536,35,1387,8],[1536,36,1387,4],[1536,38,1387,32],[1537,0,1388,6,"node"],[1537,12,1388,6,"node"],[1537,16,1388,10],[1537,17,1388,11,"typeParameters"],[1537,31,1388,6],[1537,34,1388,28],[1537,39,1388,33,"flowParseTypeParameterDeclaration"],[1537,72,1388,28],[1537,74,1388,6],[1538,0,1389,5],[1540,0,1391,4],[1540,15,1391,9,"expect"],[1540,21,1391,4],[1540,22,1391,16,"types"],[1540,27,1391,21],[1540,28,1391,22,"parenL"],[1540,34,1391,4],[1542,0,1393,4],[1542,17,1393,11],[1542,18,1393,12],[1542,23,1393,17,"match"],[1542,28,1393,12],[1542,29,1393,23,"types"],[1542,34,1393,28],[1542,35,1393,29,"parenR"],[1542,41,1393,12],[1542,42,1393,11],[1542,46,1393,40],[1542,47,1393,41],[1542,52,1393,46,"match"],[1542,57,1393,41],[1542,58,1393,52,"types"],[1542,63,1393,57],[1542,64,1393,58,"ellipsis"],[1542,72,1393,41],[1542,73,1393,4],[1542,75,1393,69],[1543,0,1394,6,"node"],[1543,12,1394,6,"node"],[1543,16,1394,10],[1543,17,1394,11,"params"],[1543,23,1394,6],[1543,24,1394,18,"push"],[1543,28,1394,6],[1543,29,1394,23],[1543,34,1394,28,"flowParseFunctionTypeParam"],[1543,60,1394,23],[1543,62,1394,6],[1545,0,1396,6],[1545,16,1396,10],[1545,17,1396,11],[1545,22,1396,16,"match"],[1545,27,1396,11],[1545,28,1396,22,"types"],[1545,33,1396,27],[1545,34,1396,28,"parenR"],[1545,40,1396,11],[1545,41,1396,6],[1545,43,1396,37],[1546,0,1397,8],[1546,19,1397,13,"expect"],[1546,25,1397,8],[1546,26,1397,20,"types"],[1546,31,1397,25],[1546,32,1397,26,"comma"],[1546,37,1397,8],[1547,0,1398,7],[1548,0,1399,5],[1550,0,1401,4],[1550,14,1401,8],[1550,19,1401,13,"eat"],[1550,22,1401,8],[1550,23,1401,17,"types"],[1550,28,1401,22],[1550,29,1401,23,"ellipsis"],[1550,37,1401,8],[1550,38,1401,4],[1550,40,1401,34],[1551,0,1402,6,"node"],[1551,12,1402,6,"node"],[1551,16,1402,10],[1551,17,1402,11,"rest"],[1551,21,1402,6],[1551,24,1402,18],[1551,29,1402,23,"flowParseFunctionTypeParam"],[1551,55,1402,18],[1551,57,1402,6],[1552,0,1403,5],[1554,0,1405,4],[1554,15,1405,9,"expect"],[1554,21,1405,4],[1554,22,1405,16,"types"],[1554,27,1405,21],[1554,28,1405,22,"parenR"],[1554,34,1405,4],[1555,0,1406,4,"node"],[1555,10,1406,4,"node"],[1555,14,1406,8],[1555,15,1406,9,"returnType"],[1555,25,1406,4],[1555,28,1406,22],[1555,33,1406,27,"flowParseTypeInitialiser"],[1555,57,1406,22],[1555,59,1406,4],[1556,0,1407,4],[1556,17,1407,11],[1556,22,1407,16,"finishNode"],[1556,32,1407,11],[1556,33,1407,27,"node"],[1556,37,1407,11],[1556,39,1407,33],[1556,63,1407,11],[1556,64,1407,4],[1557,0,1408,3],[1558,0,805,22],[1559,0,805,22],[1560,0,805,22],[1560,56,1410,34,"node"],[1560,60,805,22],[1560,62,1410,40,"isStatic"],[1560,70,805,22],[1560,72,1410,50],[1561,0,1411,4],[1561,14,1411,10,"valueNode"],[1561,23,1411,19],[1561,26,1411,22],[1561,31,1411,27,"startNode"],[1561,40,1411,22],[1561,42,1411,4],[1562,0,1412,4,"node"],[1562,10,1412,4,"node"],[1562,14,1412,8],[1562,15,1412,9,"static"],[1562,21,1412,4],[1562,24,1412,18,"isStatic"],[1562,32,1412,4],[1563,0,1413,4,"node"],[1563,10,1413,4,"node"],[1563,14,1413,8],[1563,15,1413,9,"value"],[1563,20,1413,4],[1563,23,1413,17],[1563,28,1413,22,"flowParseObjectTypeMethodish"],[1563,56,1413,17],[1563,57,1413,51,"valueNode"],[1563,66,1413,17],[1563,67,1413,4],[1564,0,1414,4],[1564,17,1414,11],[1564,22,1414,16,"finishNode"],[1564,32,1414,11],[1564,33,1414,27,"node"],[1564,37,1414,11],[1564,39,1414,33],[1564,63,1414,11],[1564,64,1414,4],[1565,0,1415,3],[1566,0,805,22],[1567,0,805,22],[1568,0,805,22],[1568,51,1423,5],[1569,0,1423,5],[1569,14,1418,4,"allowStatic"],[1569,25,1423,5],[1569,34,1418,4,"allowStatic"],[1569,45,1423,5],[1570,0,1423,5],[1570,14,1419,4,"allowExact"],[1570,24,1423,5],[1570,33,1419,4,"allowExact"],[1570,43,1423,5],[1571,0,1423,5],[1571,14,1420,4,"allowSpread"],[1571,25,1423,5],[1571,34,1420,4,"allowSpread"],[1571,45,1423,5],[1572,0,1423,5],[1572,14,1421,4,"allowProto"],[1572,24,1423,5],[1572,33,1421,4,"allowProto"],[1572,43,1423,5],[1573,0,1423,5],[1573,14,1422,4,"allowInexact"],[1573,26,1423,5],[1573,35,1422,4,"allowInexact"],[1573,47,1423,5],[1574,0,1424,4],[1574,14,1424,10,"oldInType"],[1574,23,1424,19],[1574,26,1424,22],[1574,31,1424,27,"state"],[1574,36,1424,22],[1574,37,1424,33,"inType"],[1574,43,1424,4],[1575,0,1425,4],[1575,15,1425,9,"state"],[1575,20,1425,4],[1575,21,1425,15,"inType"],[1575,27,1425,4],[1575,30,1425,24],[1575,34,1425,4],[1576,0,1426,4],[1576,14,1426,10,"nodeStart"],[1576,23,1426,19],[1576,26,1426,22],[1576,31,1426,27,"startNode"],[1576,40,1426,22],[1576,42,1426,4],[1577,0,1427,4,"nodeStart"],[1577,10,1427,4,"nodeStart"],[1577,19,1427,13],[1577,20,1427,14,"callProperties"],[1577,34,1427,4],[1577,37,1427,31],[1577,39,1427,4],[1578,0,1428,4,"nodeStart"],[1578,10,1428,4,"nodeStart"],[1578,19,1428,13],[1578,20,1428,14,"properties"],[1578,30,1428,4],[1578,33,1428,27],[1578,35,1428,4],[1579,0,1429,4,"nodeStart"],[1579,10,1429,4,"nodeStart"],[1579,19,1429,13],[1579,20,1429,14,"indexers"],[1579,28,1429,4],[1579,31,1429,25],[1579,33,1429,4],[1580,0,1430,4,"nodeStart"],[1580,10,1430,4,"nodeStart"],[1580,19,1430,13],[1580,20,1430,14,"internalSlots"],[1580,33,1430,4],[1580,36,1430,30],[1580,38,1430,4],[1581,0,1431,4],[1581,14,1431,8,"endDelim"],[1581,22,1431,4],[1582,0,1432,4],[1582,14,1432,8,"exact"],[1582,19,1432,4],[1583,0,1433,4],[1583,14,1433,8,"inexact"],[1583,21,1433,15],[1583,24,1433,18],[1583,29,1433,4],[1585,0,1435,4],[1585,14,1435,8,"allowExact"],[1585,24,1435,18],[1585,28,1435,22],[1585,33,1435,27,"match"],[1585,38,1435,22],[1585,39,1435,33,"types"],[1585,44,1435,38],[1585,45,1435,39,"braceBarL"],[1585,54,1435,22],[1585,55,1435,4],[1585,57,1435,51],[1586,0,1436,6],[1586,17,1436,11,"expect"],[1586,23,1436,6],[1586,24,1436,18,"types"],[1586,29,1436,23],[1586,30,1436,24,"braceBarL"],[1586,39,1436,6],[1587,0,1437,6,"endDelim"],[1587,12,1437,6,"endDelim"],[1587,20,1437,14],[1587,23,1437,17,"types"],[1587,28,1437,22],[1587,29,1437,23,"braceBarR"],[1587,38,1437,6],[1588,0,1438,6,"exact"],[1588,12,1438,6,"exact"],[1588,17,1438,11],[1588,20,1438,14],[1588,24,1438,6],[1589,0,1439,5],[1589,11,1435,4],[1589,17,1439,11],[1590,0,1440,6],[1590,17,1440,11,"expect"],[1590,23,1440,6],[1590,24,1440,18,"types"],[1590,29,1440,23],[1590,30,1440,24,"braceL"],[1590,36,1440,6],[1591,0,1441,6,"endDelim"],[1591,12,1441,6,"endDelim"],[1591,20,1441,14],[1591,23,1441,17,"types"],[1591,28,1441,22],[1591,29,1441,23,"braceR"],[1591,35,1441,6],[1592,0,1442,6,"exact"],[1592,12,1442,6,"exact"],[1592,17,1442,11],[1592,20,1442,14],[1592,25,1442,6],[1593,0,1443,5],[1595,0,1445,4,"nodeStart"],[1595,10,1445,4,"nodeStart"],[1595,19,1445,13],[1595,20,1445,14,"exact"],[1595,25,1445,4],[1595,28,1445,22,"exact"],[1595,33,1445,4],[1597,0,1447,4],[1597,17,1447,11],[1597,18,1447,12],[1597,23,1447,17,"match"],[1597,28,1447,12],[1597,29,1447,23,"endDelim"],[1597,37,1447,12],[1597,38,1447,4],[1597,40,1447,34],[1598,0,1448,6],[1598,16,1448,10,"isStatic"],[1598,24,1448,18],[1598,27,1448,21],[1598,32,1448,6],[1599,0,1449,6],[1599,16,1449,10,"protoStart"],[1599,26,1449,20],[1599,29,1449,23],[1599,33,1449,6],[1600,0,1450,6],[1600,16,1450,10,"inexactStart"],[1600,28,1450,22],[1600,31,1450,25],[1600,35,1450,6],[1601,0,1451,6],[1601,16,1451,12,"node"],[1601,20,1451,16],[1601,23,1451,19],[1601,28,1451,24,"startNode"],[1601,37,1451,19],[1601,39,1451,6],[1603,0,1453,6],[1603,16,1453,10,"allowProto"],[1603,26,1453,20],[1603,30,1453,24],[1603,35,1453,29,"isContextual"],[1603,47,1453,24],[1603,48,1453,42],[1603,55,1453,24],[1603,56,1453,6],[1603,58,1453,52],[1604,0,1454,8],[1604,18,1454,14,"lookahead"],[1604,27,1454,23],[1604,30,1454,26],[1604,35,1454,31,"lookahead"],[1604,44,1454,26],[1604,46,1454,8],[1606,0,1456,8],[1606,18,1456,12,"lookahead"],[1606,27,1456,21],[1606,28,1456,22,"type"],[1606,32,1456,12],[1606,37,1456,31,"types"],[1606,42,1456,36],[1606,43,1456,37,"colon"],[1606,48,1456,12],[1606,52,1456,46,"lookahead"],[1606,61,1456,55],[1606,62,1456,56,"type"],[1606,66,1456,46],[1606,71,1456,65,"types"],[1606,76,1456,70],[1606,77,1456,71,"question"],[1606,85,1456,8],[1606,87,1456,81],[1607,0,1457,10],[1607,21,1457,15,"next"],[1607,25,1457,10],[1608,0,1458,10,"protoStart"],[1608,16,1458,10,"protoStart"],[1608,26,1458,20],[1608,29,1458,23],[1608,34,1458,28,"state"],[1608,39,1458,23],[1608,40,1458,34,"start"],[1608,45,1458,10],[1609,0,1459,10,"allowStatic"],[1609,16,1459,10,"allowStatic"],[1609,27,1459,21],[1609,30,1459,24],[1609,35,1459,10],[1610,0,1460,9],[1611,0,1461,7],[1613,0,1463,6],[1613,16,1463,10,"allowStatic"],[1613,27,1463,21],[1613,31,1463,25],[1613,36,1463,30,"isContextual"],[1613,48,1463,25],[1613,49,1463,43],[1613,57,1463,25],[1613,58,1463,6],[1613,60,1463,54],[1614,0,1464,8],[1614,18,1464,14,"lookahead"],[1614,28,1464,23],[1614,31,1464,26],[1614,36,1464,31,"lookahead"],[1614,45,1464,26],[1614,47,1464,8],[1616,0,1466,8],[1616,18,1466,12,"lookahead"],[1616,28,1466,21],[1616,29,1466,22,"type"],[1616,33,1466,12],[1616,38,1466,31,"types"],[1616,43,1466,36],[1616,44,1466,37,"colon"],[1616,49,1466,12],[1616,53,1466,46,"lookahead"],[1616,63,1466,55],[1616,64,1466,56,"type"],[1616,68,1466,46],[1616,73,1466,65,"types"],[1616,78,1466,70],[1616,79,1466,71,"question"],[1616,87,1466,8],[1616,89,1466,81],[1617,0,1467,10],[1617,21,1467,15,"next"],[1617,25,1467,10],[1618,0,1468,10,"isStatic"],[1618,16,1468,10,"isStatic"],[1618,24,1468,18],[1618,27,1468,21],[1618,31,1468,10],[1619,0,1469,9],[1620,0,1470,7],[1622,0,1472,6],[1622,16,1472,12,"variance"],[1622,24,1472,20],[1622,27,1472,23],[1622,32,1472,28,"flowParseVariance"],[1622,49,1472,23],[1622,51,1472,6],[1624,0,1474,6],[1624,16,1474,10],[1624,21,1474,15,"eat"],[1624,24,1474,10],[1624,25,1474,19,"types"],[1624,30,1474,24],[1624,31,1474,25,"bracketL"],[1624,39,1474,10],[1624,40,1474,6],[1624,42,1474,36],[1625,0,1475,8],[1625,18,1475,12,"protoStart"],[1625,28,1475,22],[1625,32,1475,26],[1625,36,1475,8],[1625,38,1475,32],[1626,0,1476,10],[1626,21,1476,15,"unexpected"],[1626,31,1476,10],[1626,32,1476,26,"protoStart"],[1626,42,1476,10],[1627,0,1477,9],[1629,0,1479,8],[1629,18,1479,12],[1629,23,1479,17,"eat"],[1629,26,1479,12],[1629,27,1479,21,"types"],[1629,32,1479,26],[1629,33,1479,27,"bracketL"],[1629,41,1479,12],[1629,42,1479,8],[1629,44,1479,38],[1630,0,1480,10],[1630,20,1480,14,"variance"],[1630,28,1480,10],[1630,30,1480,24],[1631,0,1481,12],[1631,23,1481,17,"unexpected"],[1631,33,1481,12],[1631,34,1481,28,"variance"],[1631,42,1481,36],[1631,43,1481,37,"start"],[1631,48,1481,12],[1632,0,1482,11],[1634,0,1484,10,"nodeStart"],[1634,16,1484,10,"nodeStart"],[1634,25,1484,19],[1634,26,1484,20,"internalSlots"],[1634,39,1484,10],[1634,40,1484,34,"push"],[1634,44,1484,10],[1634,45,1484,39],[1634,50,1484,44,"flowParseObjectTypeInternalSlot"],[1634,81,1484,39],[1634,82,1484,76,"node"],[1634,86,1484,39],[1634,88,1484,82,"isStatic"],[1634,96,1484,39],[1634,97,1484,10],[1635,0,1485,9],[1635,15,1479,8],[1635,21,1485,15],[1636,0,1486,10,"nodeStart"],[1636,16,1486,10,"nodeStart"],[1636,25,1486,19],[1636,26,1486,20,"indexers"],[1636,34,1486,10],[1636,35,1486,29,"push"],[1636,39,1486,10],[1636,40,1486,34],[1636,45,1486,39,"flowParseObjectTypeIndexer"],[1636,71,1486,34],[1636,72,1486,66,"node"],[1636,76,1486,34],[1636,78,1486,72,"isStatic"],[1636,86,1486,34],[1636,88,1486,82,"variance"],[1636,96,1486,34],[1636,97,1486,10],[1637,0,1487,9],[1638,0,1488,7],[1638,13,1474,6],[1638,19,1488,13],[1638,23,1488,17],[1638,28,1488,22,"match"],[1638,33,1488,17],[1638,34,1488,28,"types"],[1638,39,1488,33],[1638,40,1488,34,"parenL"],[1638,46,1488,17],[1638,51,1488,45],[1638,56,1488,50,"isRelational"],[1638,68,1488,45],[1638,69,1488,63],[1638,72,1488,45],[1638,73,1488,13],[1638,75,1488,69],[1639,0,1489,8],[1639,18,1489,12,"protoStart"],[1639,28,1489,22],[1639,32,1489,26],[1639,36,1489,8],[1639,38,1489,32],[1640,0,1490,10],[1640,21,1490,15,"unexpected"],[1640,31,1490,10],[1640,32,1490,26,"protoStart"],[1640,42,1490,10],[1641,0,1491,9],[1643,0,1493,8],[1643,18,1493,12,"variance"],[1643,26,1493,8],[1643,28,1493,22],[1644,0,1494,10],[1644,21,1494,15,"unexpected"],[1644,31,1494,10],[1644,32,1494,26,"variance"],[1644,40,1494,34],[1644,41,1494,35,"start"],[1644,46,1494,10],[1645,0,1495,9],[1647,0,1497,8,"nodeStart"],[1647,14,1497,8,"nodeStart"],[1647,23,1497,17],[1647,24,1497,18,"callProperties"],[1647,38,1497,8],[1647,39,1497,33,"push"],[1647,43,1497,8],[1647,44,1497,38],[1647,49,1497,43,"flowParseObjectTypeCallProperty"],[1647,80,1497,38],[1647,81,1497,75,"node"],[1647,85,1497,38],[1647,87,1497,81,"isStatic"],[1647,95,1497,38],[1647,96,1497,8],[1648,0,1498,7],[1648,13,1488,13],[1648,19,1498,13],[1649,0,1499,8],[1649,18,1499,12,"kind"],[1649,22,1499,16],[1649,25,1499,19],[1649,31,1499,8],[1651,0,1501,8],[1651,18,1501,12],[1651,23,1501,17,"isContextual"],[1651,35,1501,12],[1651,36,1501,30],[1651,41,1501,12],[1651,46,1501,40],[1651,51,1501,45,"isContextual"],[1651,63,1501,40],[1651,64,1501,58],[1651,69,1501,40],[1651,70,1501,8],[1651,72,1501,66],[1652,0,1502,10],[1652,20,1502,16,"lookahead"],[1652,31,1502,25],[1652,34,1502,28],[1652,39,1502,33,"lookahead"],[1652,48,1502,28],[1652,50,1502,10],[1654,0,1504,10],[1654,20,1504,14,"lookahead"],[1654,31,1504,23],[1654,32,1504,24,"type"],[1654,36,1504,14],[1654,41,1504,33,"types"],[1654,46,1504,38],[1654,47,1504,39,"name"],[1654,51,1504,14],[1654,55,1504,47,"lookahead"],[1654,66,1504,56],[1654,67,1504,57,"type"],[1654,71,1504,47],[1654,76,1504,66,"types"],[1654,81,1504,71],[1654,82,1504,72,"string"],[1654,88,1504,14],[1654,92,1504,82,"lookahead"],[1654,103,1504,91],[1654,104,1504,92,"type"],[1654,108,1504,82],[1654,113,1504,101,"types"],[1654,118,1504,106],[1654,119,1504,107,"num"],[1654,122,1504,10],[1654,124,1504,112],[1655,0,1505,12,"kind"],[1655,18,1505,12,"kind"],[1655,22,1505,16],[1655,25,1505,19],[1655,30,1505,24,"state"],[1655,35,1505,19],[1655,36,1505,30,"value"],[1655,41,1505,12],[1656,0,1506,12],[1656,23,1506,17,"next"],[1656,27,1506,12],[1657,0,1507,11],[1658,0,1508,9],[1660,0,1510,8],[1660,18,1510,14,"propOrInexact"],[1660,31,1510,27],[1660,34,1510,30],[1660,39,1510,35,"flowParseObjectTypeProperty"],[1660,66,1510,30],[1660,67,1510,63,"node"],[1660,71,1510,30],[1660,73,1510,69,"isStatic"],[1660,81,1510,30],[1660,83,1510,79,"protoStart"],[1660,93,1510,30],[1660,95,1510,91,"variance"],[1660,103,1510,30],[1660,105,1510,101,"kind"],[1660,109,1510,30],[1660,111,1510,107,"allowSpread"],[1660,122,1510,30],[1660,124,1510,120,"allowInexact"],[1660,136,1510,132],[1660,140,1510,136],[1660,144,1510,120],[1660,147,1510,143,"allowInexact"],[1660,159,1510,120],[1660,162,1510,158],[1660,163,1510,159,"exact"],[1660,168,1510,30],[1660,169,1510,8],[1662,0,1512,8],[1662,18,1512,12,"propOrInexact"],[1662,31,1512,25],[1662,36,1512,30],[1662,40,1512,8],[1662,42,1512,36],[1663,0,1513,10,"inexact"],[1663,16,1513,10,"inexact"],[1663,23,1513,17],[1663,26,1513,20],[1663,30,1513,10],[1664,0,1514,10,"inexactStart"],[1664,16,1514,10,"inexactStart"],[1664,28,1514,22],[1664,31,1514,25],[1664,36,1514,30,"state"],[1664,41,1514,25],[1664,42,1514,36,"lastTokStart"],[1664,54,1514,10],[1665,0,1515,9],[1665,15,1512,8],[1665,21,1515,15],[1666,0,1516,10,"nodeStart"],[1666,16,1516,10,"nodeStart"],[1666,25,1516,19],[1666,26,1516,20,"properties"],[1666,36,1516,10],[1666,37,1516,31,"push"],[1666,41,1516,10],[1666,42,1516,36,"propOrInexact"],[1666,55,1516,10],[1667,0,1517,9],[1668,0,1518,7],[1670,0,1520,6],[1670,17,1520,11,"flowObjectTypeSemicolon"],[1670,40,1520,6],[1672,0,1522,6],[1672,16,1522,10,"inexactStart"],[1672,28,1522,22],[1672,32,1522,26],[1672,33,1522,27],[1672,38,1522,32,"match"],[1672,43,1522,27],[1672,44,1522,38,"types"],[1672,49,1522,43],[1672,50,1522,44,"braceR"],[1672,56,1522,27],[1672,57,1522,10],[1672,61,1522,55],[1672,62,1522,56],[1672,67,1522,61,"match"],[1672,72,1522,56],[1672,73,1522,67,"types"],[1672,78,1522,72],[1672,79,1522,73,"braceBarR"],[1672,88,1522,56],[1672,89,1522,6],[1672,91,1522,85],[1673,0,1523,8],[1673,19,1523,13,"raise"],[1673,24,1523,8],[1673,25,1523,19,"inexactStart"],[1673,37,1523,8],[1673,39,1523,33],[1673,108,1523,8],[1674,0,1524,7],[1675,0,1525,5],[1677,0,1527,4],[1677,15,1527,9,"expect"],[1677,21,1527,4],[1677,22,1527,16,"endDelim"],[1677,30,1527,4],[1679,0,1529,4],[1679,14,1529,8,"allowSpread"],[1679,25,1529,4],[1679,27,1529,21],[1680,0,1530,6,"nodeStart"],[1680,12,1530,6,"nodeStart"],[1680,21,1530,15],[1680,22,1530,16,"inexact"],[1680,29,1530,6],[1680,32,1530,26,"inexact"],[1680,39,1530,6],[1681,0,1531,5],[1683,0,1533,4],[1683,14,1533,10,"out"],[1683,17,1533,13],[1683,20,1533,16],[1683,25,1533,21,"finishNode"],[1683,35,1533,16],[1683,36,1533,32,"nodeStart"],[1683,45,1533,16],[1683,47,1533,43],[1683,69,1533,16],[1683,70,1533,4],[1684,0,1534,4],[1684,15,1534,9,"state"],[1684,20,1534,4],[1684,21,1534,15,"inType"],[1684,27,1534,4],[1684,30,1534,24,"oldInType"],[1684,39,1534,4],[1685,0,1535,4],[1685,17,1535,11,"out"],[1685,20,1535,4],[1686,0,1536,3],[1687,0,805,22],[1688,0,805,22],[1689,0,805,22],[1689,52,1538,30,"node"],[1689,56,805,22],[1689,58,1538,36,"isStatic"],[1689,66,805,22],[1689,68,1538,46,"protoStart"],[1689,78,805,22],[1689,80,1538,58,"variance"],[1689,88,805,22],[1689,90,1538,68,"kind"],[1689,94,805,22],[1689,96,1538,74,"allowSpread"],[1689,107,805,22],[1689,109,1538,87,"allowInexact"],[1689,121,805,22],[1689,123,1538,101],[1690,0,1539,4],[1690,14,1539,8],[1690,19,1539,13,"eat"],[1690,22,1539,8],[1690,23,1539,17,"types"],[1690,28,1539,22],[1690,29,1539,23,"ellipsis"],[1690,37,1539,8],[1690,38,1539,4],[1690,40,1539,34],[1691,0,1540,6],[1691,16,1540,12,"isInexactToken"],[1691,30,1540,26],[1691,33,1540,29],[1691,38,1540,34,"match"],[1691,43,1540,29],[1691,44,1540,40,"types"],[1691,49,1540,45],[1691,50,1540,46,"comma"],[1691,55,1540,29],[1691,60,1540,56],[1691,65,1540,61,"match"],[1691,70,1540,56],[1691,71,1540,67,"types"],[1691,76,1540,72],[1691,77,1540,73,"semi"],[1691,81,1540,56],[1691,82,1540,29],[1691,86,1540,82],[1691,91,1540,87,"match"],[1691,96,1540,82],[1691,97,1540,93,"types"],[1691,102,1540,98],[1691,103,1540,99,"braceR"],[1691,109,1540,82],[1691,110,1540,29],[1691,114,1540,110],[1691,119,1540,115,"match"],[1691,124,1540,110],[1691,125,1540,121,"types"],[1691,130,1540,126],[1691,131,1540,127,"braceBarR"],[1691,140,1540,110],[1691,141,1540,6],[1693,0,1542,6],[1693,16,1542,10,"isInexactToken"],[1693,30,1542,6],[1693,32,1542,26],[1694,0,1543,8],[1694,18,1543,12],[1694,19,1543,13,"allowSpread"],[1694,30,1543,8],[1694,32,1543,26],[1695,0,1544,10],[1695,21,1544,15,"raise"],[1695,26,1544,10],[1695,27,1544,21],[1695,32,1544,26,"state"],[1695,37,1544,21],[1695,38,1544,32,"lastTokStart"],[1695,50,1544,10],[1695,52,1544,46],[1695,125,1544,10],[1696,0,1545,9],[1696,15,1543,8],[1696,21,1545,15],[1696,25,1545,19],[1696,26,1545,20,"allowInexact"],[1696,38,1545,15],[1696,40,1545,34],[1697,0,1546,10],[1697,21,1546,15,"raise"],[1697,26,1546,10],[1697,27,1546,21],[1697,32,1546,26,"state"],[1697,37,1546,21],[1697,38,1546,32,"lastTokStart"],[1697,50,1546,10],[1697,52,1546,46],[1697,128,1546,10],[1698,0,1547,9],[1700,0,1549,8],[1700,18,1549,12,"variance"],[1700,26,1549,8],[1700,28,1549,22],[1701,0,1550,10],[1701,21,1550,15,"raise"],[1701,26,1550,10],[1701,27,1550,21,"variance"],[1701,35,1550,29],[1701,36,1550,30,"start"],[1701,41,1550,10],[1701,43,1550,37],[1701,89,1550,10],[1702,0,1551,9],[1704,0,1553,8],[1704,21,1553,15],[1704,25,1553,8],[1705,0,1554,7],[1707,0,1556,6],[1707,16,1556,10],[1707,17,1556,11,"allowSpread"],[1707,28,1556,6],[1707,30,1556,24],[1708,0,1557,8],[1708,19,1557,13,"raise"],[1708,24,1557,8],[1708,25,1557,19],[1708,30,1557,24,"state"],[1708,35,1557,19],[1708,36,1557,30,"lastTokStart"],[1708,48,1557,8],[1708,50,1557,44],[1708,115,1557,8],[1709,0,1558,7],[1711,0,1560,6],[1711,16,1560,10,"protoStart"],[1711,26,1560,20],[1711,30,1560,24],[1711,34,1560,6],[1711,36,1560,30],[1712,0,1561,8],[1712,19,1561,13,"unexpected"],[1712,29,1561,8],[1712,30,1561,24,"protoStart"],[1712,40,1561,8],[1713,0,1562,7],[1715,0,1564,6],[1715,16,1564,10,"variance"],[1715,24,1564,6],[1715,26,1564,20],[1716,0,1565,8],[1716,19,1565,13,"raise"],[1716,24,1565,8],[1716,25,1565,19,"variance"],[1716,33,1565,27],[1716,34,1565,28,"start"],[1716,39,1565,8],[1716,41,1565,35],[1716,81,1565,8],[1717,0,1566,7],[1719,0,1568,6,"node"],[1719,12,1568,6,"node"],[1719,16,1568,10],[1719,17,1568,11,"argument"],[1719,25,1568,6],[1719,28,1568,22],[1719,33,1568,27,"flowParseType"],[1719,46,1568,22],[1719,48,1568,6],[1720,0,1569,6],[1720,19,1569,13],[1720,24,1569,18,"finishNode"],[1720,34,1569,13],[1720,35,1569,29,"node"],[1720,39,1569,13],[1720,41,1569,35],[1720,67,1569,13],[1720,68,1569,6],[1721,0,1570,5],[1721,11,1539,4],[1721,17,1570,11],[1722,0,1571,6,"node"],[1722,12,1571,6,"node"],[1722,16,1571,10],[1722,17,1571,11,"key"],[1722,20,1571,6],[1722,23,1571,17],[1722,28,1571,22,"flowParseObjectPropertyKey"],[1722,54,1571,17],[1722,56,1571,6],[1723,0,1572,6,"node"],[1723,12,1572,6,"node"],[1723,16,1572,10],[1723,17,1572,11,"static"],[1723,23,1572,6],[1723,26,1572,20,"isStatic"],[1723,34,1572,6],[1724,0,1573,6,"node"],[1724,12,1573,6,"node"],[1724,16,1573,10],[1724,17,1573,11,"proto"],[1724,22,1573,6],[1724,25,1573,19,"protoStart"],[1724,35,1573,29],[1724,39,1573,33],[1724,43,1573,6],[1725,0,1574,6,"node"],[1725,12,1574,6,"node"],[1725,16,1574,10],[1725,17,1574,11,"kind"],[1725,21,1574,6],[1725,24,1574,18,"kind"],[1725,28,1574,6],[1726,0,1575,6],[1726,16,1575,10,"optional"],[1726,24,1575,18],[1726,27,1575,21],[1726,32,1575,6],[1728,0,1577,6],[1728,16,1577,10],[1728,21,1577,15,"isRelational"],[1728,33,1577,10],[1728,34,1577,28],[1728,37,1577,10],[1728,42,1577,36],[1728,47,1577,41,"match"],[1728,52,1577,36],[1728,53,1577,47,"types"],[1728,58,1577,52],[1728,59,1577,53,"parenL"],[1728,65,1577,36],[1728,66,1577,6],[1728,68,1577,62],[1729,0,1578,8,"node"],[1729,14,1578,8,"node"],[1729,18,1578,12],[1729,19,1578,13,"method"],[1729,25,1578,8],[1729,28,1578,22],[1729,32,1578,8],[1731,0,1580,8],[1731,18,1580,12,"protoStart"],[1731,28,1580,22],[1731,32,1580,26],[1731,36,1580,8],[1731,38,1580,32],[1732,0,1581,10],[1732,21,1581,15,"unexpected"],[1732,31,1581,10],[1732,32,1581,26,"protoStart"],[1732,42,1581,10],[1733,0,1582,9],[1735,0,1584,8],[1735,18,1584,12,"variance"],[1735,26,1584,8],[1735,28,1584,22],[1736,0,1585,10],[1736,21,1585,15,"unexpected"],[1736,31,1585,10],[1736,32,1585,26,"variance"],[1736,40,1585,34],[1736,41,1585,35,"start"],[1736,46,1585,10],[1737,0,1586,9],[1739,0,1588,8,"node"],[1739,14,1588,8,"node"],[1739,18,1588,12],[1739,19,1588,13,"value"],[1739,24,1588,8],[1739,27,1588,21],[1739,32,1588,26,"flowParseObjectTypeMethodish"],[1739,60,1588,21],[1739,61,1588,55],[1739,66,1588,60,"startNodeAt"],[1739,77,1588,55],[1739,78,1588,72,"node"],[1739,82,1588,76],[1739,83,1588,77,"start"],[1739,88,1588,55],[1739,90,1588,84,"node"],[1739,94,1588,88],[1739,95,1588,89,"loc"],[1739,98,1588,84],[1739,99,1588,93,"start"],[1739,104,1588,55],[1739,105,1588,21],[1739,106,1588,8],[1741,0,1590,8],[1741,18,1590,12,"kind"],[1741,22,1590,16],[1741,27,1590,21],[1741,32,1590,12],[1741,36,1590,30,"kind"],[1741,40,1590,34],[1741,45,1590,39],[1741,50,1590,8],[1741,52,1590,46],[1742,0,1591,10],[1742,21,1591,15,"flowCheckGetterSetterParams"],[1742,48,1591,10],[1742,49,1591,43,"node"],[1742,53,1591,10],[1743,0,1592,9],[1744,0,1593,7],[1744,13,1577,6],[1744,19,1593,13],[1745,0,1594,8],[1745,18,1594,12,"kind"],[1745,22,1594,16],[1745,27,1594,21],[1745,33,1594,8],[1745,35,1594,29],[1745,40,1594,34,"unexpected"],[1745,50,1594,29],[1746,0,1595,8,"node"],[1746,14,1595,8,"node"],[1746,18,1595,12],[1746,19,1595,13,"method"],[1746,25,1595,8],[1746,28,1595,22],[1746,33,1595,8],[1748,0,1597,8],[1748,18,1597,12],[1748,23,1597,17,"eat"],[1748,26,1597,12],[1748,27,1597,21,"types"],[1748,32,1597,26],[1748,33,1597,27,"question"],[1748,41,1597,12],[1748,42,1597,8],[1748,44,1597,38],[1749,0,1598,10,"optional"],[1749,16,1598,10,"optional"],[1749,24,1598,18],[1749,27,1598,21],[1749,31,1598,10],[1750,0,1599,9],[1752,0,1601,8,"node"],[1752,14,1601,8,"node"],[1752,18,1601,12],[1752,19,1601,13,"value"],[1752,24,1601,8],[1752,27,1601,21],[1752,32,1601,26,"flowParseTypeInitialiser"],[1752,56,1601,21],[1752,58,1601,8],[1753,0,1602,8,"node"],[1753,14,1602,8,"node"],[1753,18,1602,12],[1753,19,1602,13,"variance"],[1753,27,1602,8],[1753,30,1602,24,"variance"],[1753,38,1602,8],[1754,0,1603,7],[1756,0,1605,6,"node"],[1756,12,1605,6,"node"],[1756,16,1605,10],[1756,17,1605,11,"optional"],[1756,25,1605,6],[1756,28,1605,22,"optional"],[1756,36,1605,6],[1757,0,1606,6],[1757,19,1606,13],[1757,24,1606,18,"finishNode"],[1757,34,1606,13],[1757,35,1606,29,"node"],[1757,39,1606,13],[1757,41,1606,35],[1757,61,1606,13],[1757,62,1606,6],[1758,0,1607,5],[1759,0,1608,3],[1760,0,805,22],[1761,0,805,22],[1762,0,805,22],[1762,52,1610,30,"property"],[1762,60,805,22],[1762,62,1610,40],[1763,0,1611,4],[1763,14,1611,10,"paramCount"],[1763,24,1611,20],[1763,27,1611,23,"property"],[1763,35,1611,31],[1763,36,1611,32,"kind"],[1763,40,1611,23],[1763,45,1611,41],[1763,50,1611,23],[1763,53,1611,49],[1763,54,1611,23],[1763,57,1611,53],[1763,58,1611,4],[1764,0,1612,4],[1764,14,1612,10,"start"],[1764,19,1612,15],[1764,22,1612,18,"property"],[1764,30,1612,26],[1764,31,1612,27,"start"],[1764,36,1612,4],[1765,0,1613,4],[1765,14,1613,10,"length"],[1765,20,1613,16],[1765,23,1613,19,"property"],[1765,31,1613,27],[1765,32,1613,28,"value"],[1765,37,1613,19],[1765,38,1613,34,"params"],[1765,44,1613,19],[1765,45,1613,41,"length"],[1765,51,1613,19],[1765,55,1613,51,"property"],[1765,63,1613,59],[1765,64,1613,60,"value"],[1765,69,1613,51],[1765,70,1613,66,"rest"],[1765,74,1613,51],[1765,77,1613,73],[1765,78,1613,51],[1765,81,1613,77],[1765,82,1613,19],[1765,83,1613,4],[1767,0,1615,4],[1767,14,1615,8,"length"],[1767,20,1615,14],[1767,25,1615,19,"paramCount"],[1767,35,1615,4],[1767,37,1615,31],[1768,0,1616,6],[1768,16,1616,10,"property"],[1768,24,1616,18],[1768,25,1616,19,"kind"],[1768,29,1616,10],[1768,34,1616,28],[1768,39,1616,6],[1768,41,1616,35],[1769,0,1617,8],[1769,19,1617,13,"raise"],[1769,24,1617,8],[1769,25,1617,19,"start"],[1769,30,1617,8],[1769,32,1617,26],[1769,76,1617,8],[1770,0,1618,7],[1770,13,1616,6],[1770,19,1618,13],[1771,0,1619,8],[1771,19,1619,13,"raise"],[1771,24,1619,8],[1771,25,1619,19,"start"],[1771,30,1619,8],[1771,32,1619,26],[1771,79,1619,8],[1772,0,1620,7],[1773,0,1621,5],[1775,0,1623,4],[1775,14,1623,8,"property"],[1775,22,1623,16],[1775,23,1623,17,"kind"],[1775,27,1623,8],[1775,32,1623,26],[1775,37,1623,8],[1775,41,1623,35,"property"],[1775,49,1623,43],[1775,50,1623,44,"value"],[1775,55,1623,35],[1775,56,1623,50,"rest"],[1775,60,1623,4],[1775,62,1623,56],[1776,0,1624,6],[1776,17,1624,11,"raise"],[1776,22,1624,6],[1776,23,1624,17,"start"],[1776,28,1624,6],[1776,30,1624,24],[1776,85,1624,6],[1777,0,1625,5],[1778,0,1626,3],[1779,0,805,22],[1780,0,805,22],[1781,0,805,22],[1781,50,1628,28],[1782,0,1629,4],[1782,14,1629,8],[1782,15,1629,9],[1782,20,1629,14,"eat"],[1782,23,1629,9],[1782,24,1629,18,"types"],[1782,29,1629,23],[1782,30,1629,24,"semi"],[1782,34,1629,9],[1782,35,1629,8],[1782,39,1629,33],[1782,40,1629,34],[1782,45,1629,39,"eat"],[1782,48,1629,34],[1782,49,1629,43,"types"],[1782,54,1629,48],[1782,55,1629,49,"comma"],[1782,60,1629,34],[1782,61,1629,8],[1782,65,1629,59],[1782,66,1629,60],[1782,71,1629,65,"match"],[1782,76,1629,60],[1782,77,1629,71,"types"],[1782,82,1629,76],[1782,83,1629,77,"braceR"],[1782,89,1629,60],[1782,90,1629,8],[1782,94,1629,88],[1782,95,1629,89],[1782,100,1629,94,"match"],[1782,105,1629,89],[1782,106,1629,100,"types"],[1782,111,1629,105],[1782,112,1629,106,"braceBarR"],[1782,121,1629,89],[1782,122,1629,4],[1782,124,1629,118],[1783,0,1630,6],[1783,17,1630,11,"unexpected"],[1783,27,1630,6],[1784,0,1631,5],[1785,0,1632,3],[1786,0,805,22],[1787,0,805,22],[1788,0,805,22],[1788,57,1634,35,"startPos"],[1788,65,805,22],[1788,67,1634,45,"startLoc"],[1788,75,805,22],[1788,77,1634,55,"id"],[1788,79,805,22],[1788,81,1634,59],[1789,0,1635,4,"startPos"],[1789,10,1635,4,"startPos"],[1789,18,1635,12],[1789,21,1635,15,"startPos"],[1789,29,1635,23],[1789,33,1635,27],[1789,38,1635,32,"state"],[1789,43,1635,27],[1789,44,1635,38,"start"],[1789,49,1635,4],[1790,0,1636,4,"startLoc"],[1790,10,1636,4,"startLoc"],[1790,18,1636,12],[1790,21,1636,15,"startLoc"],[1790,29,1636,23],[1790,33,1636,27],[1790,38,1636,32,"state"],[1790,43,1636,27],[1790,44,1636,38,"startLoc"],[1790,52,1636,4],[1791,0,1637,4],[1791,14,1637,8,"node"],[1791,18,1637,12],[1791,21,1637,15,"id"],[1791,23,1637,17],[1791,27,1637,21],[1791,32,1637,26,"flowParseRestrictedIdentifier"],[1791,61,1637,21],[1791,62,1637,56],[1791,66,1637,21],[1791,67,1637,4],[1793,0,1639,4],[1793,17,1639,11],[1793,22,1639,16,"eat"],[1793,25,1639,11],[1793,26,1639,20,"types"],[1793,31,1639,25],[1793,32,1639,26,"dot"],[1793,35,1639,11],[1793,36,1639,4],[1793,38,1639,32],[1794,0,1640,6],[1794,16,1640,12,"node2"],[1794,21,1640,17],[1794,24,1640,20],[1794,29,1640,25,"startNodeAt"],[1794,40,1640,20],[1794,41,1640,37,"startPos"],[1794,49,1640,20],[1794,51,1640,47,"startLoc"],[1794,59,1640,20],[1794,60,1640,6],[1795,0,1641,6,"node2"],[1795,12,1641,6,"node2"],[1795,17,1641,11],[1795,18,1641,12,"qualification"],[1795,31,1641,6],[1795,34,1641,28,"node"],[1795,38,1641,6],[1796,0,1642,6,"node2"],[1796,12,1642,6,"node2"],[1796,17,1642,11],[1796,18,1642,12,"id"],[1796,20,1642,6],[1796,23,1642,17],[1796,28,1642,22,"flowParseRestrictedIdentifier"],[1796,57,1642,17],[1796,58,1642,52],[1796,62,1642,17],[1796,63,1642,6],[1797,0,1643,6,"node"],[1797,12,1643,6,"node"],[1797,16,1643,10],[1797,19,1643,13],[1797,24,1643,18,"finishNode"],[1797,34,1643,13],[1797,35,1643,29,"node2"],[1797,40,1643,13],[1797,42,1643,36],[1797,67,1643,13],[1797,68,1643,6],[1798,0,1644,5],[1800,0,1646,4],[1800,17,1646,11,"node"],[1800,21,1646,4],[1801,0,1647,3],[1802,0,805,22],[1803,0,805,22],[1804,0,805,22],[1804,45,1649,23,"startPos"],[1804,53,805,22],[1804,55,1649,33,"startLoc"],[1804,63,805,22],[1804,65,1649,43,"id"],[1804,67,805,22],[1804,69,1649,47],[1805,0,1650,4],[1805,14,1650,10,"node"],[1805,18,1650,14],[1805,21,1650,17],[1805,26,1650,22,"startNodeAt"],[1805,37,1650,17],[1805,38,1650,34,"startPos"],[1805,46,1650,17],[1805,48,1650,44,"startLoc"],[1805,56,1650,17],[1805,57,1650,4],[1806,0,1651,4,"node"],[1806,10,1651,4,"node"],[1806,14,1651,8],[1806,15,1651,9,"typeParameters"],[1806,29,1651,4],[1806,32,1651,26],[1806,36,1651,4],[1807,0,1652,4,"node"],[1807,10,1652,4,"node"],[1807,14,1652,8],[1807,15,1652,9,"id"],[1807,17,1652,4],[1807,20,1652,14],[1807,25,1652,19,"flowParseQualifiedTypeIdentifier"],[1807,57,1652,14],[1807,58,1652,52,"startPos"],[1807,66,1652,14],[1807,68,1652,62,"startLoc"],[1807,76,1652,14],[1807,78,1652,72,"id"],[1807,80,1652,14],[1807,81,1652,4],[1809,0,1654,4],[1809,14,1654,8],[1809,19,1654,13,"isRelational"],[1809,31,1654,8],[1809,32,1654,26],[1809,35,1654,8],[1809,36,1654,4],[1809,38,1654,32],[1810,0,1655,6,"node"],[1810,12,1655,6,"node"],[1810,16,1655,10],[1810,17,1655,11,"typeParameters"],[1810,31,1655,6],[1810,34,1655,28],[1810,39,1655,33,"flowParseTypeParameterInstantiation"],[1810,74,1655,28],[1810,76,1655,6],[1811,0,1656,5],[1813,0,1658,4],[1813,17,1658,11],[1813,22,1658,16,"finishNode"],[1813,32,1658,11],[1813,33,1658,27,"node"],[1813,37,1658,11],[1813,39,1658,33],[1813,62,1658,11],[1813,63,1658,4],[1814,0,1659,3],[1815,0,805,22],[1816,0,805,22],[1817,0,805,22],[1817,46,1661,24],[1818,0,1662,4],[1818,14,1662,10,"node"],[1818,18,1662,14],[1818,21,1662,17],[1818,26,1662,22,"startNode"],[1818,35,1662,17],[1818,37,1662,4],[1819,0,1663,4],[1819,15,1663,9,"expect"],[1819,21,1663,4],[1819,22,1663,16,"types"],[1819,27,1663,21],[1819,28,1663,22,"_typeof"],[1819,35,1663,4],[1820,0,1664,4,"node"],[1820,10,1664,4,"node"],[1820,14,1664,8],[1820,15,1664,9,"argument"],[1820,23,1664,4],[1820,26,1664,20],[1820,31,1664,25,"flowParsePrimaryType"],[1820,51,1664,20],[1820,53,1664,4],[1821,0,1665,4],[1821,17,1665,11],[1821,22,1665,16,"finishNode"],[1821,32,1665,11],[1821,33,1665,27,"node"],[1821,37,1665,11],[1821,39,1665,33],[1821,61,1665,11],[1821,62,1665,4],[1822,0,1666,3],[1823,0,805,22],[1824,0,805,22],[1825,0,805,22],[1825,45,1668,23],[1826,0,1669,4],[1826,14,1669,10,"node"],[1826,18,1669,14],[1826,21,1669,17],[1826,26,1669,22,"startNode"],[1826,35,1669,17],[1826,37,1669,4],[1827,0,1670,4,"node"],[1827,10,1670,4,"node"],[1827,14,1670,8],[1827,15,1670,9,"types"],[1827,20,1670,4],[1827,23,1670,17],[1827,25,1670,4],[1828,0,1671,4],[1828,15,1671,9,"expect"],[1828,21,1671,4],[1828,22,1671,16,"types"],[1828,27,1671,21],[1828,28,1671,22,"bracketL"],[1828,36,1671,4],[1830,0,1673,4],[1830,17,1673,11],[1830,22,1673,16,"state"],[1830,27,1673,11],[1830,28,1673,22,"pos"],[1830,31,1673,11],[1830,34,1673,28],[1830,39,1673,33,"length"],[1830,45,1673,11],[1830,49,1673,43],[1830,50,1673,44],[1830,55,1673,49,"match"],[1830,60,1673,44],[1830,61,1673,55,"types"],[1830,66,1673,60],[1830,67,1673,61,"bracketR"],[1830,75,1673,44],[1830,76,1673,4],[1830,78,1673,72],[1831,0,1674,6,"node"],[1831,12,1674,6,"node"],[1831,16,1674,10],[1831,17,1674,11,"types"],[1831,22,1674,6],[1831,23,1674,17,"push"],[1831,27,1674,6],[1831,28,1674,22],[1831,33,1674,27,"flowParseType"],[1831,46,1674,22],[1831,48,1674,6],[1832,0,1675,6],[1832,16,1675,10],[1832,21,1675,15,"match"],[1832,26,1675,10],[1832,27,1675,21,"types"],[1832,32,1675,26],[1832,33,1675,27,"bracketR"],[1832,41,1675,10],[1832,42,1675,6],[1832,44,1675,38],[1833,0,1676,6],[1833,17,1676,11,"expect"],[1833,23,1676,6],[1833,24,1676,18,"types"],[1833,29,1676,23],[1833,30,1676,24,"comma"],[1833,35,1676,6],[1834,0,1677,5],[1836,0,1679,4],[1836,15,1679,9,"expect"],[1836,21,1679,4],[1836,22,1679,16,"types"],[1836,27,1679,21],[1836,28,1679,22,"bracketR"],[1836,36,1679,4],[1837,0,1680,4],[1837,17,1680,11],[1837,22,1680,16,"finishNode"],[1837,32,1680,11],[1837,33,1680,27,"node"],[1837,37,1680,11],[1837,39,1680,33],[1837,60,1680,11],[1837,61,1680,4],[1838,0,1681,3],[1839,0,805,22],[1840,0,805,22],[1841,0,805,22],[1841,53,1683,31],[1842,0,1684,4],[1842,14,1684,8,"name"],[1842,18,1684,12],[1842,21,1684,15],[1842,25,1684,4],[1843,0,1685,4],[1843,14,1685,8,"optional"],[1843,22,1685,16],[1843,25,1685,19],[1843,30,1685,4],[1844,0,1686,4],[1844,14,1686,8,"typeAnnotation"],[1844,28,1686,22],[1844,31,1686,25],[1844,35,1686,4],[1845,0,1687,4],[1845,14,1687,10,"node"],[1845,18,1687,14],[1845,21,1687,17],[1845,26,1687,22,"startNode"],[1845,35,1687,17],[1845,37,1687,4],[1846,0,1688,4],[1846,14,1688,10,"lh"],[1846,16,1688,12],[1846,19,1688,15],[1846,24,1688,20,"lookahead"],[1846,33,1688,15],[1846,35,1688,4],[1848,0,1690,4],[1848,14,1690,8,"lh"],[1848,16,1690,10],[1848,17,1690,11,"type"],[1848,21,1690,8],[1848,26,1690,20,"types"],[1848,31,1690,25],[1848,32,1690,26,"colon"],[1848,37,1690,8],[1848,41,1690,35,"lh"],[1848,43,1690,37],[1848,44,1690,38,"type"],[1848,48,1690,35],[1848,53,1690,47,"types"],[1848,58,1690,52],[1848,59,1690,53,"question"],[1848,67,1690,4],[1848,69,1690,63],[1849,0,1691,6,"name"],[1849,12,1691,6,"name"],[1849,16,1691,10],[1849,19,1691,13],[1849,24,1691,18,"parseIdentifier"],[1849,39,1691,13],[1849,41,1691,6],[1851,0,1693,6],[1851,16,1693,10],[1851,21,1693,15,"eat"],[1851,24,1693,10],[1851,25,1693,19,"types"],[1851,30,1693,24],[1851,31,1693,25,"question"],[1851,39,1693,10],[1851,40,1693,6],[1851,42,1693,36],[1852,0,1694,8,"optional"],[1852,14,1694,8,"optional"],[1852,22,1694,16],[1852,25,1694,19],[1852,29,1694,8],[1853,0,1695,7],[1855,0,1697,6,"typeAnnotation"],[1855,12,1697,6,"typeAnnotation"],[1855,26,1697,20],[1855,29,1697,23],[1855,34,1697,28,"flowParseTypeInitialiser"],[1855,58,1697,23],[1855,60,1697,6],[1856,0,1698,5],[1856,11,1690,4],[1856,17,1698,11],[1857,0,1699,6,"typeAnnotation"],[1857,12,1699,6,"typeAnnotation"],[1857,26,1699,20],[1857,29,1699,23],[1857,34,1699,28,"flowParseType"],[1857,47,1699,23],[1857,49,1699,6],[1858,0,1700,5],[1860,0,1702,4,"node"],[1860,10,1702,4,"node"],[1860,14,1702,8],[1860,15,1702,9,"name"],[1860,19,1702,4],[1860,22,1702,16,"name"],[1860,26,1702,4],[1861,0,1703,4,"node"],[1861,10,1703,4,"node"],[1861,14,1703,8],[1861,15,1703,9,"optional"],[1861,23,1703,4],[1861,26,1703,20,"optional"],[1861,34,1703,4],[1862,0,1704,4,"node"],[1862,10,1704,4,"node"],[1862,14,1704,8],[1862,15,1704,9,"typeAnnotation"],[1862,29,1704,4],[1862,32,1704,26,"typeAnnotation"],[1862,46,1704,4],[1863,0,1705,4],[1863,17,1705,11],[1863,22,1705,16,"finishNode"],[1863,32,1705,11],[1863,33,1705,27,"node"],[1863,37,1705,11],[1863,39,1705,33],[1863,58,1705,11],[1863,59,1705,4],[1864,0,1706,3],[1865,0,805,22],[1866,0,805,22],[1867,0,805,22],[1867,59,1708,37,"type"],[1867,63,805,22],[1867,65,1708,43],[1868,0,1709,4],[1868,14,1709,10,"node"],[1868,18,1709,14],[1868,21,1709,17],[1868,26,1709,22,"startNodeAt"],[1868,37,1709,17],[1868,38,1709,34,"type"],[1868,42,1709,38],[1868,43,1709,39,"start"],[1868,48,1709,17],[1868,50,1709,46,"type"],[1868,54,1709,50],[1868,55,1709,51,"loc"],[1868,58,1709,46],[1868,59,1709,55,"start"],[1868,64,1709,17],[1868,65,1709,4],[1869,0,1710,4,"node"],[1869,10,1710,4,"node"],[1869,14,1710,8],[1869,15,1710,9,"name"],[1869,19,1710,4],[1869,22,1710,16],[1869,26,1710,4],[1870,0,1711,4,"node"],[1870,10,1711,4,"node"],[1870,14,1711,8],[1870,15,1711,9,"optional"],[1870,23,1711,4],[1870,26,1711,20],[1870,31,1711,4],[1871,0,1712,4,"node"],[1871,10,1712,4,"node"],[1871,14,1712,8],[1871,15,1712,9,"typeAnnotation"],[1871,29,1712,4],[1871,32,1712,26,"type"],[1871,36,1712,4],[1872,0,1713,4],[1872,17,1713,11],[1872,22,1713,16,"finishNode"],[1872,32,1713,11],[1872,33,1713,27,"node"],[1872,37,1713,11],[1872,39,1713,33],[1872,58,1713,11],[1872,59,1713,4],[1873,0,1714,3],[1874,0,805,22],[1875,0,805,22],[1876,0,805,22],[1876,54,1716,43],[1877,0,1716,43],[1877,14,1716,30,"params"],[1877,20,1716,43],[1877,91,1716,39],[1877,93,1716,43],[1878,0,1717,4],[1878,14,1717,8,"rest"],[1878,18,1717,12],[1878,21,1717,15],[1878,25,1717,4],[1880,0,1719,4],[1880,17,1719,11],[1880,18,1719,12],[1880,23,1719,17,"match"],[1880,28,1719,12],[1880,29,1719,23,"types"],[1880,34,1719,28],[1880,35,1719,29,"parenR"],[1880,41,1719,12],[1880,42,1719,11],[1880,46,1719,40],[1880,47,1719,41],[1880,52,1719,46,"match"],[1880,57,1719,41],[1880,58,1719,52,"types"],[1880,63,1719,57],[1880,64,1719,58,"ellipsis"],[1880,72,1719,41],[1880,73,1719,4],[1880,75,1719,69],[1881,0,1720,6,"params"],[1881,12,1720,6,"params"],[1881,18,1720,12],[1881,19,1720,13,"push"],[1881,23,1720,6],[1881,24,1720,18],[1881,29,1720,23,"flowParseFunctionTypeParam"],[1881,55,1720,18],[1881,57,1720,6],[1883,0,1722,6],[1883,16,1722,10],[1883,17,1722,11],[1883,22,1722,16,"match"],[1883,27,1722,11],[1883,28,1722,22,"types"],[1883,33,1722,27],[1883,34,1722,28,"parenR"],[1883,40,1722,11],[1883,41,1722,6],[1883,43,1722,37],[1884,0,1723,8],[1884,19,1723,13,"expect"],[1884,25,1723,8],[1884,26,1723,20,"types"],[1884,31,1723,25],[1884,32,1723,26,"comma"],[1884,37,1723,8],[1885,0,1724,7],[1886,0,1725,5],[1888,0,1727,4],[1888,14,1727,8],[1888,19,1727,13,"eat"],[1888,22,1727,8],[1888,23,1727,17,"types"],[1888,28,1727,22],[1888,29,1727,23,"ellipsis"],[1888,37,1727,8],[1888,38,1727,4],[1888,40,1727,34],[1889,0,1728,6,"rest"],[1889,12,1728,6,"rest"],[1889,16,1728,10],[1889,19,1728,13],[1889,24,1728,18,"flowParseFunctionTypeParam"],[1889,50,1728,13],[1889,52,1728,6],[1890,0,1729,5],[1892,0,1731,4],[1892,17,1731,11],[1893,0,1732,6,"params"],[1893,12,1732,6,"params"],[1893,18,1732,12],[1893,20,1732,6,"params"],[1893,26,1731,11],[1894,0,1733,6,"rest"],[1894,12,1733,6,"rest"],[1894,16,1733,10],[1894,18,1733,6,"rest"],[1895,0,1731,11],[1895,11,1731,4],[1896,0,1735,3],[1897,0,805,22],[1898,0,805,22],[1899,0,805,22],[1899,50,1737,28,"startPos"],[1899,58,805,22],[1899,60,1737,38,"startLoc"],[1899,68,805,22],[1899,70,1737,48,"node"],[1899,74,805,22],[1899,76,1737,54,"id"],[1899,78,805,22],[1899,80,1737,58],[1900,0,1738,4],[1900,18,1738,12,"id"],[1900,20,1738,14],[1900,21,1738,15,"name"],[1900,25,1738,4],[1901,0,1739,6],[1901,17,1739,11],[1901,22,1739,6],[1902,0,1740,8],[1902,21,1740,15],[1902,26,1740,20,"finishNode"],[1902,36,1740,15],[1902,37,1740,31,"node"],[1902,41,1740,15],[1902,43,1740,37],[1902,62,1740,15],[1902,63,1740,8],[1904,0,1742,6],[1904,17,1742,11],[1904,23,1742,6],[1905,0,1743,6],[1905,17,1743,11],[1905,26,1743,6],[1906,0,1744,8],[1906,21,1744,15],[1906,26,1744,20,"finishNode"],[1906,36,1744,15],[1906,37,1744,31,"node"],[1906,41,1744,15],[1906,43,1744,37],[1906,66,1744,15],[1906,67,1744,8],[1908,0,1746,6],[1908,17,1746,11],[1908,24,1746,6],[1909,0,1747,8],[1909,21,1747,15],[1909,26,1747,20,"finishNode"],[1909,36,1747,15],[1909,37,1747,31,"node"],[1909,41,1747,15],[1909,43,1747,37],[1909,64,1747,15],[1909,65,1747,8],[1911,0,1749,6],[1911,17,1749,11],[1911,24,1749,6],[1912,0,1750,8],[1912,21,1750,15],[1912,26,1750,20,"finishNode"],[1912,36,1750,15],[1912,37,1750,31,"node"],[1912,41,1750,15],[1912,43,1750,37],[1912,64,1750,15],[1912,65,1750,8],[1914,0,1752,6],[1914,17,1752,11],[1914,25,1752,6],[1915,0,1753,8],[1915,21,1753,15],[1915,26,1753,20,"finishNode"],[1915,36,1753,15],[1915,37,1753,31,"node"],[1915,41,1753,15],[1915,43,1753,37],[1915,65,1753,15],[1915,66,1753,8],[1917,0,1755,6],[1917,17,1755,11],[1917,25,1755,6],[1918,0,1756,8],[1918,21,1756,15],[1918,26,1756,20,"finishNode"],[1918,36,1756,15],[1918,37,1756,31,"node"],[1918,41,1756,15],[1918,43,1756,37],[1918,65,1756,15],[1918,66,1756,8],[1920,0,1758,6],[1921,0,1759,8],[1921,19,1759,13,"checkNotUnderscore"],[1921,37,1759,8],[1921,38,1759,32,"id"],[1921,40,1759,34],[1921,41,1759,35,"name"],[1921,45,1759,8],[1922,0,1760,8],[1922,21,1760,15],[1922,26,1760,20,"flowParseGenericType"],[1922,46,1760,15],[1922,47,1760,41,"startPos"],[1922,55,1760,15],[1922,57,1760,51,"startLoc"],[1922,65,1760,15],[1922,67,1760,61,"id"],[1922,69,1760,15],[1922,70,1760,8],[1923,0,1738,4],[1924,0,1762,3],[1925,0,805,22],[1926,0,805,22],[1927,0,805,22],[1927,47,1764,25],[1928,0,1765,4],[1928,14,1765,10,"startPos"],[1928,22,1765,18],[1928,25,1765,21],[1928,30,1765,26,"state"],[1928,35,1765,21],[1928,36,1765,32,"start"],[1928,41,1765,4],[1929,0,1766,4],[1929,14,1766,10,"startLoc"],[1929,22,1766,18],[1929,25,1766,21],[1929,30,1766,26,"state"],[1929,35,1766,21],[1929,36,1766,32,"startLoc"],[1929,44,1766,4],[1930,0,1767,4],[1930,14,1767,10,"node"],[1930,18,1767,14],[1930,21,1767,17],[1930,26,1767,22,"startNode"],[1930,35,1767,17],[1930,37,1767,4],[1931,0,1768,4],[1931,14,1768,8,"tmp"],[1931,17,1768,4],[1932,0,1769,4],[1932,14,1769,8,"type"],[1932,18,1769,4],[1933,0,1770,4],[1933,14,1770,8,"isGroupedType"],[1933,27,1770,21],[1933,30,1770,24],[1933,35,1770,4],[1934,0,1771,4],[1934,14,1771,10,"oldNoAnonFunctionType"],[1934,35,1771,31],[1934,38,1771,34],[1934,43,1771,39,"state"],[1934,48,1771,34],[1934,49,1771,45,"noAnonFunctionType"],[1934,67,1771,4],[1936,0,1773,4],[1936,18,1773,12],[1936,23,1773,17,"state"],[1936,28,1773,12],[1936,29,1773,23,"type"],[1936,33,1773,4],[1937,0,1774,6],[1937,17,1774,11,"types"],[1937,22,1774,16],[1937,23,1774,17,"name"],[1937,27,1774,6],[1938,0,1775,8],[1938,18,1775,12],[1938,23,1775,17,"isContextual"],[1938,35,1775,12],[1938,36,1775,30],[1938,47,1775,12],[1938,48,1775,8],[1938,50,1775,44],[1939,0,1776,10],[1939,23,1776,17],[1939,28,1776,22,"flowParseInterfaceType"],[1939,50,1776,17],[1939,52,1776,10],[1940,0,1777,9],[1942,0,1779,8],[1942,21,1779,15],[1942,26,1779,20,"flowIdentToTypeAnnotation"],[1942,51,1779,15],[1942,52,1779,46,"startPos"],[1942,60,1779,15],[1942,62,1779,56,"startLoc"],[1942,70,1779,15],[1942,72,1779,66,"node"],[1942,76,1779,15],[1942,78,1779,72],[1942,83,1779,77,"parseIdentifier"],[1942,98,1779,72],[1942,100,1779,15],[1942,101,1779,8],[1944,0,1781,6],[1944,17,1781,11,"types"],[1944,22,1781,16],[1944,23,1781,17,"braceL"],[1944,29,1781,6],[1945,0,1782,8],[1945,21,1782,15],[1945,26,1782,20,"flowParseObjectType"],[1945,45,1782,15],[1945,46,1782,40],[1946,0,1783,10,"allowStatic"],[1946,16,1783,10,"allowStatic"],[1946,27,1783,21],[1946,29,1783,23],[1946,34,1782,40],[1947,0,1784,10,"allowExact"],[1947,16,1784,10,"allowExact"],[1947,26,1784,20],[1947,28,1784,22],[1947,33,1782,40],[1948,0,1785,10,"allowSpread"],[1948,16,1785,10,"allowSpread"],[1948,27,1785,21],[1948,29,1785,23],[1948,33,1782,40],[1949,0,1786,10,"allowProto"],[1949,16,1786,10,"allowProto"],[1949,26,1786,20],[1949,28,1786,22],[1949,33,1782,40],[1950,0,1787,10,"allowInexact"],[1950,16,1787,10,"allowInexact"],[1950,28,1787,22],[1950,30,1787,24],[1951,0,1782,40],[1951,15,1782,15],[1951,16,1782,8],[1953,0,1790,6],[1953,17,1790,11,"types"],[1953,22,1790,16],[1953,23,1790,17,"braceBarL"],[1953,32,1790,6],[1954,0,1791,8],[1954,21,1791,15],[1954,26,1791,20,"flowParseObjectType"],[1954,45,1791,15],[1954,46,1791,40],[1955,0,1792,10,"allowStatic"],[1955,16,1792,10,"allowStatic"],[1955,27,1792,21],[1955,29,1792,23],[1955,34,1791,40],[1956,0,1793,10,"allowExact"],[1956,16,1793,10,"allowExact"],[1956,26,1793,20],[1956,28,1793,22],[1956,32,1791,40],[1957,0,1794,10,"allowSpread"],[1957,16,1794,10,"allowSpread"],[1957,27,1794,21],[1957,29,1794,23],[1957,33,1791,40],[1958,0,1795,10,"allowProto"],[1958,16,1795,10,"allowProto"],[1958,26,1795,20],[1958,28,1795,22],[1958,33,1791,40],[1959,0,1796,10,"allowInexact"],[1959,16,1796,10,"allowInexact"],[1959,28,1796,22],[1959,30,1796,24],[1960,0,1791,40],[1960,15,1791,15],[1960,16,1791,8],[1962,0,1799,6],[1962,17,1799,11,"types"],[1962,22,1799,16],[1962,23,1799,17,"bracketL"],[1962,31,1799,6],[1963,0,1800,8],[1963,19,1800,13,"state"],[1963,24,1800,8],[1963,25,1800,19,"noAnonFunctionType"],[1963,43,1800,8],[1963,46,1800,40],[1963,51,1800,8],[1964,0,1801,8,"type"],[1964,14,1801,8,"type"],[1964,18,1801,12],[1964,21,1801,15],[1964,26,1801,20,"flowParseTupleType"],[1964,44,1801,15],[1964,46,1801,8],[1965,0,1802,8],[1965,19,1802,13,"state"],[1965,24,1802,8],[1965,25,1802,19,"noAnonFunctionType"],[1965,43,1802,8],[1965,46,1802,40,"oldNoAnonFunctionType"],[1965,67,1802,8],[1966,0,1803,8],[1966,21,1803,15,"type"],[1966,25,1803,8],[1968,0,1805,6],[1968,17,1805,11,"types"],[1968,22,1805,16],[1968,23,1805,17,"relational"],[1968,33,1805,6],[1969,0,1806,8],[1969,18,1806,12],[1969,23,1806,17,"state"],[1969,28,1806,12],[1969,29,1806,23,"value"],[1969,34,1806,12],[1969,39,1806,33],[1969,42,1806,8],[1969,44,1806,38],[1970,0,1807,10,"node"],[1970,16,1807,10,"node"],[1970,20,1807,14],[1970,21,1807,15,"typeParameters"],[1970,35,1807,10],[1970,38,1807,32],[1970,43,1807,37,"flowParseTypeParameterDeclaration"],[1970,76,1807,32],[1970,78,1807,10],[1971,0,1808,10],[1971,21,1808,15,"expect"],[1971,27,1808,10],[1971,28,1808,22,"types"],[1971,33,1808,27],[1971,34,1808,28,"parenL"],[1971,40,1808,10],[1972,0,1809,10,"tmp"],[1972,16,1809,10,"tmp"],[1972,19,1809,13],[1972,22,1809,16],[1972,27,1809,21,"flowParseFunctionTypeParams"],[1972,54,1809,16],[1972,56,1809,10],[1973,0,1810,10,"node"],[1973,16,1810,10,"node"],[1973,20,1810,14],[1973,21,1810,15,"params"],[1973,27,1810,10],[1973,30,1810,24,"tmp"],[1973,33,1810,27],[1973,34,1810,28,"params"],[1973,40,1810,10],[1974,0,1811,10,"node"],[1974,16,1811,10,"node"],[1974,20,1811,14],[1974,21,1811,15,"rest"],[1974,25,1811,10],[1974,28,1811,22,"tmp"],[1974,31,1811,25],[1974,32,1811,26,"rest"],[1974,36,1811,10],[1975,0,1812,10],[1975,21,1812,15,"expect"],[1975,27,1812,10],[1975,28,1812,22,"types"],[1975,33,1812,27],[1975,34,1812,28,"parenR"],[1975,40,1812,10],[1976,0,1813,10],[1976,21,1813,15,"expect"],[1976,27,1813,10],[1976,28,1813,22,"types"],[1976,33,1813,27],[1976,34,1813,28,"arrow"],[1976,39,1813,10],[1977,0,1814,10,"node"],[1977,16,1814,10,"node"],[1977,20,1814,14],[1977,21,1814,15,"returnType"],[1977,31,1814,10],[1977,34,1814,28],[1977,39,1814,33,"flowParseType"],[1977,52,1814,28],[1977,54,1814,10],[1978,0,1815,10],[1978,23,1815,17],[1978,28,1815,22,"finishNode"],[1978,38,1815,17],[1978,39,1815,33,"node"],[1978,43,1815,17],[1978,45,1815,39],[1978,69,1815,17],[1978,70,1815,10],[1979,0,1816,9],[1981,0,1818,8],[1983,0,1820,6],[1983,17,1820,11,"types"],[1983,22,1820,16],[1983,23,1820,17,"parenL"],[1983,29,1820,6],[1984,0,1821,8],[1984,19,1821,13,"next"],[1984,23,1821,8],[1986,0,1823,8],[1986,18,1823,12],[1986,19,1823,13],[1986,24,1823,18,"match"],[1986,29,1823,13],[1986,30,1823,24,"types"],[1986,35,1823,29],[1986,36,1823,30,"parenR"],[1986,42,1823,13],[1986,43,1823,12],[1986,47,1823,41],[1986,48,1823,42],[1986,53,1823,47,"match"],[1986,58,1823,42],[1986,59,1823,53,"types"],[1986,64,1823,58],[1986,65,1823,59,"ellipsis"],[1986,73,1823,42],[1986,74,1823,8],[1986,76,1823,70],[1987,0,1824,10],[1987,20,1824,14],[1987,25,1824,19,"match"],[1987,30,1824,14],[1987,31,1824,25,"types"],[1987,36,1824,30],[1987,37,1824,31,"name"],[1987,41,1824,14],[1987,42,1824,10],[1987,44,1824,38],[1988,0,1825,12],[1988,22,1825,18,"token"],[1988,27,1825,23],[1988,30,1825,26],[1988,35,1825,31,"lookahead"],[1988,44,1825,26],[1988,47,1825,43,"type"],[1988,51,1825,12],[1989,0,1826,12,"isGroupedType"],[1989,18,1826,12,"isGroupedType"],[1989,31,1826,25],[1989,34,1826,28,"token"],[1989,39,1826,33],[1989,44,1826,38,"types"],[1989,49,1826,43],[1989,50,1826,44,"question"],[1989,58,1826,28],[1989,62,1826,56,"token"],[1989,67,1826,61],[1989,72,1826,66,"types"],[1989,77,1826,71],[1989,78,1826,72,"colon"],[1989,83,1826,12],[1990,0,1827,11],[1990,17,1824,10],[1990,23,1827,17],[1991,0,1828,12,"isGroupedType"],[1991,18,1828,12,"isGroupedType"],[1991,31,1828,25],[1991,34,1828,28],[1991,38,1828,12],[1992,0,1829,11],[1993,0,1830,9],[1995,0,1832,8],[1995,18,1832,12,"isGroupedType"],[1995,31,1832,8],[1995,33,1832,27],[1996,0,1833,10],[1996,21,1833,15,"state"],[1996,26,1833,10],[1996,27,1833,21,"noAnonFunctionType"],[1996,45,1833,10],[1996,48,1833,42],[1996,53,1833,10],[1997,0,1834,10,"type"],[1997,16,1834,10,"type"],[1997,20,1834,14],[1997,23,1834,17],[1997,28,1834,22,"flowParseType"],[1997,41,1834,17],[1997,43,1834,10],[1998,0,1835,10],[1998,21,1835,15,"state"],[1998,26,1835,10],[1998,27,1835,21,"noAnonFunctionType"],[1998,45,1835,10],[1998,48,1835,42,"oldNoAnonFunctionType"],[1998,69,1835,10],[2000,0,1837,10],[2000,20,1837,14],[2000,25,1837,19,"state"],[2000,30,1837,14],[2000,31,1837,25,"noAnonFunctionType"],[2000,49,1837,14],[2000,53,1837,47],[2000,55,1837,49],[2000,60,1837,54,"match"],[2000,65,1837,49],[2000,66,1837,60,"types"],[2000,71,1837,65],[2000,72,1837,66,"comma"],[2000,77,1837,49],[2000,82,1837,76],[2000,87,1837,81,"match"],[2000,92,1837,76],[2000,93,1837,87,"types"],[2000,98,1837,92],[2000,99,1837,93,"parenR"],[2000,105,1837,76],[2000,110,1837,104],[2000,115,1837,109,"lookahead"],[2000,124,1837,104],[2000,127,1837,121,"type"],[2000,131,1837,104],[2000,136,1837,130,"types"],[2000,141,1837,135],[2000,142,1837,136,"arrow"],[2000,147,1837,47],[2000,148,1837,10],[2000,150,1837,144],[2001,0,1838,12],[2001,23,1838,17,"expect"],[2001,29,1838,12],[2001,30,1838,24,"types"],[2001,35,1838,29],[2001,36,1838,30,"parenR"],[2001,42,1838,12],[2002,0,1839,12],[2002,25,1839,19,"type"],[2002,29,1839,12],[2003,0,1840,11],[2003,17,1837,10],[2003,23,1840,17],[2004,0,1841,12],[2004,23,1841,17,"eat"],[2004,26,1841,12],[2004,27,1841,21,"types"],[2004,32,1841,26],[2004,33,1841,27,"comma"],[2004,38,1841,12],[2005,0,1842,11],[2006,0,1843,9],[2008,0,1845,8],[2008,18,1845,12,"type"],[2008,22,1845,8],[2008,24,1845,18],[2009,0,1846,10,"tmp"],[2009,16,1846,10,"tmp"],[2009,19,1846,13],[2009,22,1846,16],[2009,27,1846,21,"flowParseFunctionTypeParams"],[2009,54,1846,16],[2009,55,1846,49],[2009,56,1846,50],[2009,61,1846,55,"reinterpretTypeAsFunctionTypeParam"],[2009,95,1846,50],[2009,96,1846,90,"type"],[2009,100,1846,50],[2009,101,1846,49],[2009,102,1846,16],[2009,103,1846,10],[2010,0,1847,9],[2010,15,1845,8],[2010,21,1847,15],[2011,0,1848,10,"tmp"],[2011,16,1848,10,"tmp"],[2011,19,1848,13],[2011,22,1848,16],[2011,27,1848,21,"flowParseFunctionTypeParams"],[2011,54,1848,16],[2011,56,1848,10],[2012,0,1849,9],[2014,0,1851,8,"node"],[2014,14,1851,8,"node"],[2014,18,1851,12],[2014,19,1851,13,"params"],[2014,25,1851,8],[2014,28,1851,22,"tmp"],[2014,31,1851,25],[2014,32,1851,26,"params"],[2014,38,1851,8],[2015,0,1852,8,"node"],[2015,14,1852,8,"node"],[2015,18,1852,12],[2015,19,1852,13,"rest"],[2015,23,1852,8],[2015,26,1852,20,"tmp"],[2015,29,1852,23],[2015,30,1852,24,"rest"],[2015,34,1852,8],[2016,0,1853,8],[2016,19,1853,13,"expect"],[2016,25,1853,8],[2016,26,1853,20,"types"],[2016,31,1853,25],[2016,32,1853,26,"parenR"],[2016,38,1853,8],[2017,0,1854,8],[2017,19,1854,13,"expect"],[2017,25,1854,8],[2017,26,1854,20,"types"],[2017,31,1854,25],[2017,32,1854,26,"arrow"],[2017,37,1854,8],[2018,0,1855,8,"node"],[2018,14,1855,8,"node"],[2018,18,1855,12],[2018,19,1855,13,"returnType"],[2018,29,1855,8],[2018,32,1855,26],[2018,37,1855,31,"flowParseType"],[2018,50,1855,26],[2018,52,1855,8],[2019,0,1856,8,"node"],[2019,14,1856,8,"node"],[2019,18,1856,12],[2019,19,1856,13,"typeParameters"],[2019,33,1856,8],[2019,36,1856,30],[2019,40,1856,8],[2020,0,1857,8],[2020,21,1857,15],[2020,26,1857,20,"finishNode"],[2020,36,1857,15],[2020,37,1857,31,"node"],[2020,41,1857,15],[2020,43,1857,37],[2020,67,1857,15],[2020,68,1857,8],[2022,0,1859,6],[2022,17,1859,11,"types"],[2022,22,1859,16],[2022,23,1859,17,"string"],[2022,29,1859,6],[2023,0,1860,8],[2023,21,1860,15],[2023,26,1860,20,"parseLiteral"],[2023,38,1860,15],[2023,39,1860,33],[2023,44,1860,38,"state"],[2023,49,1860,33],[2023,50,1860,44,"value"],[2023,55,1860,15],[2023,57,1860,51],[2023,86,1860,15],[2023,87,1860,8],[2025,0,1862,6],[2025,17,1862,11,"types"],[2025,22,1862,16],[2025,23,1862,17,"_true"],[2025,28,1862,6],[2026,0,1863,6],[2026,17,1863,11,"types"],[2026,22,1863,16],[2026,23,1863,17,"_false"],[2026,29,1863,6],[2027,0,1864,8,"node"],[2027,14,1864,8,"node"],[2027,18,1864,12],[2027,19,1864,13,"value"],[2027,24,1864,8],[2027,27,1864,21],[2027,32,1864,26,"match"],[2027,37,1864,21],[2027,38,1864,32,"types"],[2027,43,1864,37],[2027,44,1864,38,"_true"],[2027,49,1864,21],[2027,50,1864,8],[2028,0,1865,8],[2028,19,1865,13,"next"],[2028,23,1865,8],[2029,0,1866,8],[2029,21,1866,15],[2029,26,1866,20,"finishNode"],[2029,36,1866,15],[2029,37,1866,31,"node"],[2029,41,1866,15],[2029,43,1866,37],[2029,73,1866,15],[2029,74,1866,8],[2031,0,1868,6],[2031,17,1868,11,"types"],[2031,22,1868,16],[2031,23,1868,17,"plusMin"],[2031,30,1868,6],[2032,0,1869,8],[2032,18,1869,12],[2032,23,1869,17,"state"],[2032,28,1869,12],[2032,29,1869,23,"value"],[2032,34,1869,12],[2032,39,1869,33],[2032,42,1869,8],[2032,44,1869,38],[2033,0,1870,10],[2033,21,1870,15,"next"],[2033,25,1870,10],[2035,0,1872,10],[2035,20,1872,14],[2035,25,1872,19,"match"],[2035,30,1872,14],[2035,31,1872,25,"types"],[2035,36,1872,30],[2035,37,1872,31,"num"],[2035,40,1872,14],[2035,41,1872,10],[2035,43,1872,37],[2036,0,1873,12],[2036,25,1873,19],[2036,30,1873,24,"parseLiteral"],[2036,42,1873,19],[2036,43,1873,37],[2036,44,1873,38],[2036,49,1873,43,"state"],[2036,54,1873,38],[2036,55,1873,49,"value"],[2036,60,1873,19],[2036,62,1873,56],[2036,91,1873,19],[2036,93,1873,87,"node"],[2036,97,1873,91],[2036,98,1873,92,"start"],[2036,103,1873,19],[2036,105,1873,99,"node"],[2036,109,1873,103],[2036,110,1873,104,"loc"],[2036,113,1873,99],[2036,114,1873,108,"start"],[2036,119,1873,19],[2036,120,1873,12],[2037,0,1874,11],[2039,0,1876,10],[2039,20,1876,14],[2039,25,1876,19,"match"],[2039,30,1876,14],[2039,31,1876,25,"types"],[2039,36,1876,30],[2039,37,1876,31,"bigint"],[2039,43,1876,14],[2039,44,1876,10],[2039,46,1876,40],[2040,0,1877,12],[2040,25,1877,19],[2040,30,1877,24,"parseLiteral"],[2040,42,1877,19],[2040,43,1877,37],[2040,44,1877,38],[2040,49,1877,43,"state"],[2040,54,1877,38],[2040,55,1877,49,"value"],[2040,60,1877,19],[2040,62,1877,56],[2040,91,1877,19],[2040,93,1877,87,"node"],[2040,97,1877,91],[2040,98,1877,92,"start"],[2040,103,1877,19],[2040,105,1877,99,"node"],[2040,109,1877,103],[2040,110,1877,104,"loc"],[2040,113,1877,99],[2040,114,1877,108,"start"],[2040,119,1877,19],[2040,120,1877,12],[2041,0,1878,11],[2043,0,1880,10],[2043,22,1880,16],[2043,27,1880,21,"raise"],[2043,32,1880,16],[2043,33,1880,27],[2043,38,1880,32,"state"],[2043,43,1880,27],[2043,44,1880,38,"start"],[2043,49,1880,16],[2043,105,1880,10],[2044,0,1881,9],[2046,0,1883,8],[2046,19,1883,13,"unexpected"],[2046,29,1883,8],[2048,0,1885,6],[2048,17,1885,11,"types"],[2048,22,1885,16],[2048,23,1885,17,"num"],[2048,26,1885,6],[2049,0,1886,8],[2049,21,1886,15],[2049,26,1886,20,"parseLiteral"],[2049,38,1886,15],[2049,39,1886,33],[2049,44,1886,38,"state"],[2049,49,1886,33],[2049,50,1886,44,"value"],[2049,55,1886,15],[2049,57,1886,51],[2049,86,1886,15],[2049,87,1886,8],[2051,0,1888,6],[2051,17,1888,11,"types"],[2051,22,1888,16],[2051,23,1888,17,"bigint"],[2051,29,1888,6],[2052,0,1889,8],[2052,21,1889,15],[2052,26,1889,20,"parseLiteral"],[2052,38,1889,15],[2052,39,1889,33],[2052,44,1889,38,"state"],[2052,49,1889,33],[2052,50,1889,44,"value"],[2052,55,1889,15],[2052,57,1889,51],[2052,86,1889,15],[2052,87,1889,8],[2054,0,1891,6],[2054,17,1891,11,"types"],[2054,22,1891,16],[2054,23,1891,17,"_void"],[2054,28,1891,6],[2055,0,1892,8],[2055,19,1892,13,"next"],[2055,23,1892,8],[2056,0,1893,8],[2056,21,1893,15],[2056,26,1893,20,"finishNode"],[2056,36,1893,15],[2056,37,1893,31,"node"],[2056,41,1893,15],[2056,43,1893,37],[2056,63,1893,15],[2056,64,1893,8],[2058,0,1895,6],[2058,17,1895,11,"types"],[2058,22,1895,16],[2058,23,1895,17,"_null"],[2058,28,1895,6],[2059,0,1896,8],[2059,19,1896,13,"next"],[2059,23,1896,8],[2060,0,1897,8],[2060,21,1897,15],[2060,26,1897,20,"finishNode"],[2060,36,1897,15],[2060,37,1897,31,"node"],[2060,41,1897,15],[2060,43,1897,37],[2060,70,1897,15],[2060,71,1897,8],[2062,0,1899,6],[2062,17,1899,11,"types"],[2062,22,1899,16],[2062,23,1899,17,"_this"],[2062,28,1899,6],[2063,0,1900,8],[2063,19,1900,13,"next"],[2063,23,1900,8],[2064,0,1901,8],[2064,21,1901,15],[2064,26,1901,20,"finishNode"],[2064,36,1901,15],[2064,37,1901,31,"node"],[2064,41,1901,15],[2064,43,1901,37],[2064,63,1901,15],[2064,64,1901,8],[2066,0,1903,6],[2066,17,1903,11,"types"],[2066,22,1903,16],[2066,23,1903,17,"star"],[2066,27,1903,6],[2067,0,1904,8],[2067,19,1904,13,"next"],[2067,23,1904,8],[2068,0,1905,8],[2068,21,1905,15],[2068,26,1905,20,"finishNode"],[2068,36,1905,15],[2068,37,1905,31,"node"],[2068,41,1905,15],[2068,43,1905,37],[2068,65,1905,15],[2068,66,1905,8],[2070,0,1907,6],[2071,0,1908,8],[2071,18,1908,12],[2071,23,1908,17,"state"],[2071,28,1908,12],[2071,29,1908,23,"type"],[2071,33,1908,12],[2071,34,1908,28,"keyword"],[2071,41,1908,12],[2071,46,1908,40],[2071,54,1908,8],[2071,56,1908,50],[2072,0,1909,10],[2072,23,1909,17],[2072,28,1909,22,"flowParseTypeofType"],[2072,47,1909,17],[2072,49,1909,10],[2073,0,1910,9],[2073,15,1908,8],[2073,21,1910,15],[2073,25,1910,19],[2073,30,1910,24,"state"],[2073,35,1910,19],[2073,36,1910,30,"type"],[2073,40,1910,19],[2073,41,1910,35,"keyword"],[2073,48,1910,15],[2073,50,1910,44],[2074,0,1911,10],[2074,20,1911,16,"label"],[2074,25,1911,21],[2074,28,1911,24],[2074,33,1911,29,"state"],[2074,38,1911,24],[2074,39,1911,35,"type"],[2074,43,1911,24],[2074,44,1911,40,"label"],[2074,49,1911,10],[2075,0,1912,10],[2075,21,1912,15,"next"],[2075,25,1912,10],[2076,0,1913,10],[2076,101,1913,40,"node"],[2076,105,1913,10],[2076,107,1913,46,"label"],[2076,112,1913,10],[2077,0,1914,9],[2079,0,1773,4],[2081,0,1918,4],[2081,16,1918,10],[2081,21,1918,15,"unexpected"],[2081,31,1918,10],[2081,33,1918,4],[2082,0,1919,3],[2083,0,805,22],[2084,0,805,22],[2085,0,805,22],[2085,47,1921,25],[2086,0,1922,4],[2086,14,1922,10,"startPos"],[2086,22,1922,18],[2086,25,1922,21],[2086,30,1922,26,"state"],[2086,35,1922,21],[2086,36,1922,32,"start"],[2086,41,1922,4],[2087,0,1922,4],[2087,14,1923,10,"startLoc"],[2087,22,1923,18],[2087,25,1923,21],[2087,30,1923,26,"state"],[2087,35,1923,21],[2087,36,1923,32,"startLoc"],[2087,44,1922,4],[2088,0,1924,4],[2088,14,1924,8,"type"],[2088,18,1924,12],[2088,21,1924,15],[2088,26,1924,20,"flowParsePrimaryType"],[2088,46,1924,15],[2088,48,1924,4],[2090,0,1926,4],[2090,17,1926,11],[2090,22,1926,16,"match"],[2090,27,1926,11],[2090,28,1926,22,"types"],[2090,33,1926,27],[2090,34,1926,28,"bracketL"],[2090,42,1926,11],[2090,47,1926,41],[2090,48,1926,42],[2090,53,1926,47,"canInsertSemicolon"],[2090,71,1926,42],[2090,73,1926,4],[2090,75,1926,69],[2091,0,1927,6],[2091,16,1927,12,"node"],[2091,20,1927,16],[2091,23,1927,19],[2091,28,1927,24,"startNodeAt"],[2091,39,1927,19],[2091,40,1927,36,"startPos"],[2091,48,1927,19],[2091,50,1927,46,"startLoc"],[2091,58,1927,19],[2091,59,1927,6],[2092,0,1928,6,"node"],[2092,12,1928,6,"node"],[2092,16,1928,10],[2092,17,1928,11,"elementType"],[2092,28,1928,6],[2092,31,1928,25,"type"],[2092,35,1928,6],[2093,0,1929,6],[2093,17,1929,11,"expect"],[2093,23,1929,6],[2093,24,1929,18,"types"],[2093,29,1929,23],[2093,30,1929,24,"bracketL"],[2093,38,1929,6],[2094,0,1930,6],[2094,17,1930,11,"expect"],[2094,23,1930,6],[2094,24,1930,18,"types"],[2094,29,1930,23],[2094,30,1930,24,"bracketR"],[2094,38,1930,6],[2095,0,1931,6,"type"],[2095,12,1931,6,"type"],[2095,16,1931,10],[2095,19,1931,13],[2095,24,1931,18,"finishNode"],[2095,34,1931,13],[2095,35,1931,29,"node"],[2095,39,1931,13],[2095,41,1931,35],[2095,62,1931,13],[2095,63,1931,6],[2096,0,1932,5],[2098,0,1934,4],[2098,17,1934,11,"type"],[2098,21,1934,4],[2099,0,1935,3],[2100,0,805,22],[2101,0,805,22],[2102,0,805,22],[2102,46,1937,24],[2103,0,1938,4],[2103,14,1938,10,"node"],[2103,18,1938,14],[2103,21,1938,17],[2103,26,1938,22,"startNode"],[2103,35,1938,17],[2103,37,1938,4],[2105,0,1940,4],[2105,14,1940,8],[2105,19,1940,13,"eat"],[2105,22,1940,8],[2105,23,1940,17,"types"],[2105,28,1940,22],[2105,29,1940,23,"question"],[2105,37,1940,8],[2105,38,1940,4],[2105,40,1940,34],[2106,0,1941,6,"node"],[2106,12,1941,6,"node"],[2106,16,1941,10],[2106,17,1941,11,"typeAnnotation"],[2106,31,1941,6],[2106,34,1941,28],[2106,39,1941,33,"flowParsePrefixType"],[2106,58,1941,28],[2106,60,1941,6],[2107,0,1942,6],[2107,19,1942,13],[2107,24,1942,18,"finishNode"],[2107,34,1942,13],[2107,35,1942,29,"node"],[2107,39,1942,13],[2107,41,1942,35],[2107,65,1942,13],[2107,66,1942,6],[2108,0,1943,5],[2108,11,1940,4],[2108,17,1943,11],[2109,0,1944,6],[2109,19,1944,13],[2109,24,1944,18,"flowParsePostfixType"],[2109,44,1944,13],[2109,46,1944,6],[2110,0,1945,5],[2111,0,1946,3],[2112,0,805,22],[2113,0,805,22],[2114,0,805,22],[2114,61,1948,39],[2115,0,1949,4],[2115,14,1949,10,"param"],[2115,19,1949,15],[2115,22,1949,18],[2115,27,1949,23,"flowParsePrefixType"],[2115,46,1949,18],[2115,48,1949,4],[2117,0,1951,4],[2117,14,1951,8],[2117,15,1951,9],[2117,20,1951,14,"state"],[2117,25,1951,9],[2117,26,1951,20,"noAnonFunctionType"],[2117,44,1951,8],[2117,48,1951,42],[2117,53,1951,47,"eat"],[2117,56,1951,42],[2117,57,1951,51,"types"],[2117,62,1951,56],[2117,63,1951,57,"arrow"],[2117,68,1951,42],[2117,69,1951,4],[2117,71,1951,65],[2118,0,1952,6],[2118,16,1952,12,"node"],[2118,20,1952,16],[2118,23,1952,19],[2118,28,1952,24,"startNodeAt"],[2118,39,1952,19],[2118,40,1952,36,"param"],[2118,45,1952,41],[2118,46,1952,42,"start"],[2118,51,1952,19],[2118,53,1952,49,"param"],[2118,58,1952,54],[2118,59,1952,55,"loc"],[2118,62,1952,49],[2118,63,1952,59,"start"],[2118,68,1952,19],[2118,69,1952,6],[2119,0,1953,6,"node"],[2119,12,1953,6,"node"],[2119,16,1953,10],[2119,17,1953,11,"params"],[2119,23,1953,6],[2119,26,1953,20],[2119,27,1953,21],[2119,32,1953,26,"reinterpretTypeAsFunctionTypeParam"],[2119,66,1953,21],[2119,67,1953,61,"param"],[2119,72,1953,21],[2119,73,1953,20],[2119,74,1953,6],[2120,0,1954,6,"node"],[2120,12,1954,6,"node"],[2120,16,1954,10],[2120,17,1954,11,"rest"],[2120,21,1954,6],[2120,24,1954,18],[2120,28,1954,6],[2121,0,1955,6,"node"],[2121,12,1955,6,"node"],[2121,16,1955,10],[2121,17,1955,11,"returnType"],[2121,27,1955,6],[2121,30,1955,24],[2121,35,1955,29,"flowParseType"],[2121,48,1955,24],[2121,50,1955,6],[2122,0,1956,6,"node"],[2122,12,1956,6,"node"],[2122,16,1956,10],[2122,17,1956,11,"typeParameters"],[2122,31,1956,6],[2122,34,1956,28],[2122,38,1956,6],[2123,0,1957,6],[2123,19,1957,13],[2123,24,1957,18,"finishNode"],[2123,34,1957,13],[2123,35,1957,29,"node"],[2123,39,1957,13],[2123,41,1957,35],[2123,65,1957,13],[2123,66,1957,6],[2124,0,1958,5],[2126,0,1960,4],[2126,17,1960,11,"param"],[2126,22,1960,4],[2127,0,1961,3],[2128,0,805,22],[2129,0,805,22],[2130,0,805,22],[2130,52,1963,30],[2131,0,1964,4],[2131,14,1964,10,"node"],[2131,18,1964,14],[2131,21,1964,17],[2131,26,1964,22,"startNode"],[2131,35,1964,17],[2131,37,1964,4],[2132,0,1965,4],[2132,15,1965,9,"eat"],[2132,18,1965,4],[2132,19,1965,13,"types"],[2132,24,1965,18],[2132,25,1965,19,"bitwiseAND"],[2132,35,1965,4],[2133,0,1966,4],[2133,14,1966,10,"type"],[2133,18,1966,14],[2133,21,1966,17],[2133,26,1966,22,"flowParseAnonFunctionWithoutParens"],[2133,60,1966,17],[2133,62,1966,4],[2134,0,1967,4,"node"],[2134,10,1967,4,"node"],[2134,14,1967,8],[2134,15,1967,9,"types"],[2134,20,1967,4],[2134,23,1967,17],[2134,24,1967,18,"type"],[2134,28,1967,17],[2134,29,1967,4],[2136,0,1969,4],[2136,17,1969,11],[2136,22,1969,16,"eat"],[2136,25,1969,11],[2136,26,1969,20,"types"],[2136,31,1969,25],[2136,32,1969,26,"bitwiseAND"],[2136,42,1969,11],[2136,43,1969,4],[2136,45,1969,39],[2137,0,1970,6,"node"],[2137,12,1970,6,"node"],[2137,16,1970,10],[2137,17,1970,11,"types"],[2137,22,1970,6],[2137,23,1970,17,"push"],[2137,27,1970,6],[2137,28,1970,22],[2137,33,1970,27,"flowParseAnonFunctionWithoutParens"],[2137,67,1970,22],[2137,69,1970,6],[2138,0,1971,5],[2140,0,1973,4],[2140,17,1973,11,"node"],[2140,21,1973,15],[2140,22,1973,16,"types"],[2140,27,1973,11],[2140,28,1973,22,"length"],[2140,34,1973,11],[2140,39,1973,33],[2140,40,1973,11],[2140,43,1973,37,"type"],[2140,47,1973,11],[2140,50,1973,44],[2140,55,1973,49,"finishNode"],[2140,65,1973,44],[2140,66,1973,60,"node"],[2140,70,1973,44],[2140,72,1973,66],[2140,100,1973,44],[2140,101,1973,4],[2141,0,1974,3],[2142,0,805,22],[2143,0,805,22],[2144,0,805,22],[2144,45,1976,23],[2145,0,1977,4],[2145,14,1977,10,"node"],[2145,18,1977,14],[2145,21,1977,17],[2145,26,1977,22,"startNode"],[2145,35,1977,17],[2145,37,1977,4],[2146,0,1978,4],[2146,15,1978,9,"eat"],[2146,18,1978,4],[2146,19,1978,13,"types"],[2146,24,1978,18],[2146,25,1978,19,"bitwiseOR"],[2146,34,1978,4],[2147,0,1979,4],[2147,14,1979,10,"type"],[2147,18,1979,14],[2147,21,1979,17],[2147,26,1979,22,"flowParseIntersectionType"],[2147,51,1979,17],[2147,53,1979,4],[2148,0,1980,4,"node"],[2148,10,1980,4,"node"],[2148,14,1980,8],[2148,15,1980,9,"types"],[2148,20,1980,4],[2148,23,1980,17],[2148,24,1980,18,"type"],[2148,28,1980,17],[2148,29,1980,4],[2150,0,1982,4],[2150,17,1982,11],[2150,22,1982,16,"eat"],[2150,25,1982,11],[2150,26,1982,20,"types"],[2150,31,1982,25],[2150,32,1982,26,"bitwiseOR"],[2150,41,1982,11],[2150,42,1982,4],[2150,44,1982,38],[2151,0,1983,6,"node"],[2151,12,1983,6,"node"],[2151,16,1983,10],[2151,17,1983,11,"types"],[2151,22,1983,6],[2151,23,1983,17,"push"],[2151,27,1983,6],[2151,28,1983,22],[2151,33,1983,27,"flowParseIntersectionType"],[2151,58,1983,22],[2151,60,1983,6],[2152,0,1984,5],[2154,0,1986,4],[2154,17,1986,11,"node"],[2154,21,1986,15],[2154,22,1986,16,"types"],[2154,27,1986,11],[2154,28,1986,22,"length"],[2154,34,1986,11],[2154,39,1986,33],[2154,40,1986,11],[2154,43,1986,37,"type"],[2154,47,1986,11],[2154,50,1986,44],[2154,55,1986,49,"finishNode"],[2154,65,1986,44],[2154,66,1986,60,"node"],[2154,70,1986,44],[2154,72,1986,66],[2154,93,1986,44],[2154,94,1986,4],[2155,0,1987,3],[2156,0,805,22],[2157,0,805,22],[2158,0,805,22],[2158,40,1989,18],[2159,0,1990,4],[2159,14,1990,10,"oldInType"],[2159,23,1990,19],[2159,26,1990,22],[2159,31,1990,27,"state"],[2159,36,1990,22],[2159,37,1990,33,"inType"],[2159,43,1990,4],[2160,0,1991,4],[2160,15,1991,9,"state"],[2160,20,1991,4],[2160,21,1991,15,"inType"],[2160,27,1991,4],[2160,30,1991,24],[2160,34,1991,4],[2161,0,1992,4],[2161,14,1992,10,"type"],[2161,18,1992,14],[2161,21,1992,17],[2161,26,1992,22,"flowParseUnionType"],[2161,44,1992,17],[2161,46,1992,4],[2162,0,1993,4],[2162,15,1993,9,"state"],[2162,20,1993,4],[2162,21,1993,15,"inType"],[2162,27,1993,4],[2162,30,1993,24,"oldInType"],[2162,39,1993,4],[2163,0,1994,4],[2163,15,1994,9,"state"],[2163,20,1994,4],[2163,21,1994,15,"exprAllowed"],[2163,32,1994,4],[2163,35,1994,29],[2163,40,1994,34,"state"],[2163,45,1994,29],[2163,46,1994,40,"exprAllowed"],[2163,57,1994,29],[2163,61,1994,55],[2163,66,1994,60,"state"],[2163,71,1994,55],[2163,72,1994,66,"noAnonFunctionType"],[2163,90,1994,4],[2164,0,1995,4],[2164,17,1995,11,"type"],[2164,21,1995,4],[2165,0,1996,3],[2166,0,805,22],[2167,0,805,22],[2168,0,805,22],[2168,63,1998,41],[2169,0,1999,4],[2169,14,1999,8],[2169,19,1999,13,"state"],[2169,24,1999,8],[2169,25,1999,19,"type"],[2169,29,1999,8],[2169,34,1999,28,"types"],[2169,39,1999,33],[2169,40,1999,34,"name"],[2169,44,1999,8],[2169,48,1999,42],[2169,53,1999,47,"state"],[2169,58,1999,42],[2169,59,1999,53,"value"],[2169,64,1999,42],[2169,69,1999,63],[2169,72,1999,4],[2169,74,1999,68],[2170,0,2000,6],[2170,16,2000,12,"startPos"],[2170,24,2000,20],[2170,27,2000,23],[2170,32,2000,28,"state"],[2170,37,2000,23],[2170,38,2000,34,"start"],[2170,43,2000,6],[2171,0,2001,6],[2171,16,2001,12,"startLoc"],[2171,24,2001,20],[2171,27,2001,23],[2171,32,2001,28,"state"],[2171,37,2001,23],[2171,38,2001,34,"startLoc"],[2171,46,2001,6],[2172,0,2002,6],[2172,16,2002,12,"node"],[2172,20,2002,16],[2172,23,2002,19],[2172,28,2002,24,"parseIdentifier"],[2172,43,2002,19],[2172,45,2002,6],[2173,0,2003,6],[2173,19,2003,13],[2173,24,2003,18,"flowParseGenericType"],[2173,44,2003,13],[2173,45,2003,39,"startPos"],[2173,53,2003,13],[2173,55,2003,49,"startLoc"],[2173,63,2003,13],[2173,65,2003,59,"node"],[2173,69,2003,13],[2173,70,2003,6],[2174,0,2004,5],[2174,11,1999,4],[2174,17,2004,11],[2175,0,2005,6],[2175,19,2005,13],[2175,24,2005,18,"flowParseType"],[2175,37,2005,13],[2175,39,2005,6],[2176,0,2006,5],[2177,0,2007,3],[2178,0,805,22],[2179,0,805,22],[2180,0,805,22],[2180,50,2009,28],[2181,0,2010,4],[2181,14,2010,10,"node"],[2181,18,2010,14],[2181,21,2010,17],[2181,26,2010,22,"startNode"],[2181,35,2010,17],[2181,37,2010,4],[2182,0,2011,4,"node"],[2182,10,2011,4,"node"],[2182,14,2011,8],[2182,15,2011,9,"typeAnnotation"],[2182,29,2011,4],[2182,32,2011,26],[2182,37,2011,31,"flowParseTypeInitialiser"],[2182,61,2011,26],[2182,63,2011,4],[2183,0,2012,4],[2183,17,2012,11],[2183,22,2012,16,"finishNode"],[2183,32,2012,11],[2183,33,2012,27,"node"],[2183,37,2012,11],[2183,39,2012,33],[2183,55,2012,11],[2183,56,2012,4],[2184,0,2013,3],[2185,0,805,22],[2186,0,805,22],[2187,0,805,22],[2187,59,2015,37,"allowPrimitiveOverride"],[2187,81,805,22],[2187,83,2015,61],[2188,0,2016,4],[2188,14,2016,10,"ident"],[2188,19,2016,15],[2188,22,2016,18,"allowPrimitiveOverride"],[2188,44,2016,40],[2188,47,2016,43],[2188,52,2016,48,"parseIdentifier"],[2188,67,2016,43],[2188,69,2016,40],[2188,72,2016,68],[2188,77,2016,73,"flowParseRestrictedIdentifier"],[2188,106,2016,68],[2188,108,2016,4],[2190,0,2018,4],[2190,14,2018,8],[2190,19,2018,13,"match"],[2190,24,2018,8],[2190,25,2018,19,"types"],[2190,30,2018,24],[2190,31,2018,25,"colon"],[2190,36,2018,8],[2190,37,2018,4],[2190,39,2018,33],[2191,0,2019,6,"ident"],[2191,12,2019,6,"ident"],[2191,17,2019,11],[2191,18,2019,12,"typeAnnotation"],[2191,32,2019,6],[2191,35,2019,29],[2191,40,2019,34,"flowParseTypeAnnotation"],[2191,63,2019,29],[2191,65,2019,6],[2192,0,2020,6],[2192,17,2020,11,"resetEndLocation"],[2192,33,2020,6],[2192,34,2020,28,"ident"],[2192,39,2020,6],[2193,0,2021,5],[2195,0,2023,4],[2195,17,2023,11,"ident"],[2195,22,2023,4],[2196,0,2024,3],[2197,0,805,22],[2198,0,805,22],[2199,0,805,22],[2199,44,2026,22,"node"],[2199,48,805,22],[2199,50,2026,28],[2200,0,2027,4,"node"],[2200,10,2027,4,"node"],[2200,14,2027,8],[2200,15,2027,9,"expression"],[2200,25,2027,4],[2200,26,2027,20,"typeAnnotation"],[2200,40,2027,4],[2200,43,2027,37,"node"],[2200,47,2027,41],[2200,48,2027,42,"typeAnnotation"],[2200,62,2027,4],[2201,0,2028,4],[2201,15,2028,9,"resetEndLocation"],[2201,31,2028,4],[2201,32,2028,26,"node"],[2201,36,2028,30],[2201,37,2028,31,"expression"],[2201,47,2028,4],[2201,49,2028,43,"node"],[2201,53,2028,47],[2201,54,2028,48,"typeAnnotation"],[2201,68,2028,43],[2201,69,2028,63,"end"],[2201,72,2028,4],[2201,74,2028,68,"node"],[2201,78,2028,72],[2201,79,2028,73,"typeAnnotation"],[2201,93,2028,68],[2201,94,2028,88,"loc"],[2201,97,2028,68],[2201,98,2028,92,"end"],[2201,101,2028,4],[2202,0,2029,4],[2202,17,2029,11,"node"],[2202,21,2029,15],[2202,22,2029,16,"expression"],[2202,32,2029,4],[2203,0,2030,3],[2204,0,805,22],[2205,0,805,22],[2206,0,805,22],[2206,44,2032,22],[2207,0,2033,4],[2207,14,2033,8,"variance"],[2207,22,2033,16],[2207,25,2033,19],[2207,29,2033,4],[2209,0,2035,4],[2209,14,2035,8],[2209,19,2035,13,"match"],[2209,24,2035,8],[2209,25,2035,19,"types"],[2209,30,2035,24],[2209,31,2035,25,"plusMin"],[2209,38,2035,8],[2209,39,2035,4],[2209,41,2035,35],[2210,0,2036,6,"variance"],[2210,12,2036,6,"variance"],[2210,20,2036,14],[2210,23,2036,17],[2210,28,2036,22,"startNode"],[2210,37,2036,17],[2210,39,2036,6],[2212,0,2038,6],[2212,16,2038,10],[2212,21,2038,15,"state"],[2212,26,2038,10],[2212,27,2038,21,"value"],[2212,32,2038,10],[2212,37,2038,31],[2212,40,2038,6],[2212,42,2038,36],[2213,0,2039,8,"variance"],[2213,14,2039,8,"variance"],[2213,22,2039,16],[2213,23,2039,17,"kind"],[2213,27,2039,8],[2213,30,2039,24],[2213,36,2039,8],[2214,0,2040,7],[2214,13,2038,6],[2214,19,2040,13],[2215,0,2041,8,"variance"],[2215,14,2041,8,"variance"],[2215,22,2041,16],[2215,23,2041,17,"kind"],[2215,27,2041,8],[2215,30,2041,24],[2215,37,2041,8],[2216,0,2042,7],[2218,0,2044,6],[2218,17,2044,11,"next"],[2218,21,2044,6],[2219,0,2045,6],[2219,17,2045,11,"finishNode"],[2219,27,2045,6],[2219,28,2045,22,"variance"],[2219,36,2045,6],[2219,38,2045,32],[2219,48,2045,6],[2220,0,2046,5],[2222,0,2048,4],[2222,17,2048,11,"variance"],[2222,25,2048,4],[2223,0,2049,3],[2224,0,805,22],[2225,0,805,22],[2226,0,805,22],[2226,42,2051,20,"node"],[2226,46,805,22],[2226,48,2051,26,"allowExpressionBody"],[2226,67,805,22],[2226,69,2051,65],[2227,0,2051,65],[2229,0,2051,65],[2229,14,2051,47,"isMethod"],[2229,22,2051,65],[2229,93,2051,58],[2229,98,2051,65],[2231,0,2052,4],[2231,14,2052,8,"allowExpressionBody"],[2231,33,2052,4],[2231,35,2052,29],[2232,0,2053,6],[2232,19,2053,13],[2232,24,2053,18,"forwardNoArrowParamsConversionAt"],[2232,56,2053,13],[2232,57,2053,51,"node"],[2232,61,2053,13],[2232,63,2053,57],[2233,0,2053,57],[2233,104,2053,87,"node"],[2233,108,2053,57],[2233,110,2053,93],[2233,114,2053,57],[2233,116,2053,99,"isMethod"],[2233,124,2053,57],[2234,0,2053,57],[2234,13,2053,13],[2234,14,2053,6],[2235,0,2054,5],[2237,0,2056,4],[2237,96,2056,35,"node"],[2237,100,2056,4],[2237,102,2056,41],[2237,107,2056,4],[2237,109,2056,48,"isMethod"],[2237,117,2056,4],[2238,0,2057,3],[2239,0,805,22],[2240,0,805,22],[2241,0,805,22],[2241,51,2059,29,"node"],[2241,55,805,22],[2241,57,2059,35,"type"],[2241,61,805,22],[2241,63,2059,59],[2242,0,2059,59],[2242,14,2059,41,"isMethod"],[2242,22,2059,59],[2242,93,2059,52],[2242,98,2059,59],[2244,0,2060,4],[2244,14,2060,8],[2244,19,2060,13,"match"],[2244,24,2060,8],[2244,25,2060,19,"types"],[2244,30,2060,24],[2244,31,2060,25,"colon"],[2244,36,2060,8],[2244,37,2060,4],[2244,39,2060,33],[2245,0,2061,6],[2245,16,2061,12,"typeNode"],[2245,24,2061,20],[2245,27,2061,23],[2245,32,2061,28,"startNode"],[2245,41,2061,23],[2245,43,2061,6],[2247,0,2060,33],[2247,41,2062,50],[2247,46,2062,55,"flowParseTypeAndPredicateInitialiser"],[2247,82,2062,50],[2247,84,2060,33],[2249,0,2060,33],[2251,0,2062,7,"typeNode"],[2251,12,2062,7,"typeNode"],[2251,20,2062,15],[2251,21,2062,16,"typeAnnotation"],[2251,35,2060,33],[2252,0,2062,32,"node"],[2252,12,2062,32,"node"],[2252,16,2062,36],[2252,17,2062,37,"predicate"],[2252,26,2060,33],[2253,0,2063,6,"node"],[2253,12,2063,6,"node"],[2253,16,2063,10],[2253,17,2063,11,"returnType"],[2253,27,2063,6],[2253,30,2063,24,"typeNode"],[2253,38,2063,32],[2253,39,2063,33,"typeAnnotation"],[2253,53,2063,24],[2253,56,2063,50],[2253,61,2063,55,"finishNode"],[2253,71,2063,50],[2253,72,2063,66,"typeNode"],[2253,80,2063,50],[2253,82,2063,76],[2253,98,2063,50],[2253,99,2063,24],[2253,102,2063,96],[2253,106,2063,6],[2254,0,2064,5],[2256,0,2066,4],[2256,98,2066,37,"node"],[2256,102,2066,4],[2256,104,2066,43,"type"],[2256,108,2066,4],[2256,110,2066,49,"isMethod"],[2256,118,2066,4],[2257,0,2067,3],[2258,0,805,22],[2259,0,805,22],[2260,0,805,22],[2260,39,2069,17,"context"],[2260,46,805,22],[2260,48,2069,26,"topLevel"],[2260,56,805,22],[2260,58,2069,36],[2261,0,2070,4],[2261,14,2070,8],[2261,19,2070,13,"state"],[2261,24,2070,8],[2261,25,2070,19,"strict"],[2261,31,2070,8],[2261,35,2070,29],[2261,40,2070,34,"match"],[2261,45,2070,29],[2261,46,2070,40,"types"],[2261,51,2070,45],[2261,52,2070,46,"name"],[2261,56,2070,29],[2261,57,2070,8],[2261,61,2070,55],[2261,66,2070,60,"state"],[2261,71,2070,55],[2261,72,2070,66,"value"],[2261,77,2070,55],[2261,82,2070,76],[2261,93,2070,4],[2261,95,2070,89],[2262,0,2071,6],[2262,16,2071,12,"node"],[2262,20,2071,16],[2262,23,2071,19],[2262,28,2071,24,"startNode"],[2262,37,2071,19],[2262,39,2071,6],[2263,0,2072,6],[2263,17,2072,11,"next"],[2263,21,2072,6],[2264,0,2073,6],[2264,19,2073,13],[2264,24,2073,18,"flowParseInterface"],[2264,42,2073,13],[2264,43,2073,37,"node"],[2264,47,2073,13],[2264,48,2073,6],[2265,0,2074,5],[2265,11,2070,4],[2265,17,2074,11],[2265,21,2074,15],[2265,26,2074,20,"shouldParseEnums"],[2265,42,2074,15],[2265,48,2074,42],[2265,53,2074,47,"isContextual"],[2265,65,2074,42],[2265,66,2074,60],[2265,72,2074,42],[2265,73,2074,11],[2265,75,2074,69],[2266,0,2075,6],[2266,16,2075,12,"node"],[2266,21,2075,16],[2266,24,2075,19],[2266,29,2075,24,"startNode"],[2266,38,2075,19],[2266,40,2075,6],[2268,0,2076,6],[2268,17,2076,11,"next"],[2268,21,2076,6],[2269,0,2077,6],[2269,19,2077,13],[2269,24,2077,18,"flowParseEnumDeclaration"],[2269,48,2077,13],[2269,49,2077,43,"node"],[2269,54,2077,13],[2269,55,2077,6],[2270,0,2078,5],[2270,11,2074,11],[2270,17,2078,11],[2271,0,2079,6],[2271,16,2079,12,"stmt"],[2271,20,2079,16],[2271,99,2079,40,"context"],[2271,106,2079,16],[2271,108,2079,49,"topLevel"],[2271,116,2079,16],[2271,117,2079,6],[2273,0,2081,6],[2273,16,2081,10],[2273,21,2081,15,"flowPragma"],[2273,31,2081,10],[2273,36,2081,30,"undefined"],[2273,45,2081,10],[2273,49,2081,43],[2273,50,2081,44],[2273,55,2081,49,"isValidDirective"],[2273,71,2081,44],[2273,72,2081,66,"stmt"],[2273,76,2081,44],[2273,77,2081,6],[2273,79,2081,73],[2274,0,2082,8],[2274,19,2082,13,"flowPragma"],[2274,29,2082,8],[2274,32,2082,26],[2274,36,2082,8],[2275,0,2083,7],[2277,0,2085,6],[2277,19,2085,13,"stmt"],[2277,23,2085,6],[2278,0,2086,5],[2279,0,2087,3],[2280,0,805,22],[2281,0,805,22],[2282,0,805,22],[2282,49,2089,27,"node"],[2282,53,805,22],[2282,55,2089,33,"expr"],[2282,59,805,22],[2282,61,2089,39],[2283,0,2090,4],[2283,14,2090,8,"expr"],[2283,18,2090,12],[2283,19,2090,13,"type"],[2283,23,2090,8],[2283,28,2090,22],[2283,40,2090,4],[2283,42,2090,36],[2284,0,2091,6],[2284,16,2091,10,"expr"],[2284,20,2091,14],[2284,21,2091,15,"name"],[2284,25,2091,10],[2284,30,2091,24],[2284,39,2091,6],[2284,41,2091,35],[2285,0,2092,8],[2285,18,2092,12],[2285,23,2092,17,"match"],[2285,28,2092,12],[2285,29,2092,23,"types"],[2285,34,2092,28],[2285,35,2092,29,"_class"],[2285,41,2092,12],[2285,46,2092,40],[2285,51,2092,45,"match"],[2285,56,2092,40],[2285,57,2092,51,"types"],[2285,62,2092,56],[2285,63,2092,57,"name"],[2285,67,2092,40],[2285,68,2092,12],[2285,72,2092,66],[2285,77,2092,71,"match"],[2285,82,2092,66],[2285,83,2092,77,"types"],[2285,88,2092,82],[2285,89,2092,83,"_function"],[2285,98,2092,66],[2285,99,2092,12],[2285,103,2092,97],[2285,108,2092,102,"match"],[2285,113,2092,97],[2285,114,2092,108,"types"],[2285,119,2092,113],[2285,120,2092,114,"_var"],[2285,124,2092,97],[2285,125,2092,12],[2285,129,2092,123],[2285,134,2092,128,"match"],[2285,139,2092,123],[2285,140,2092,134,"types"],[2285,145,2092,139],[2285,146,2092,140,"_export"],[2285,153,2092,123],[2285,154,2092,8],[2285,156,2092,150],[2286,0,2093,10],[2286,23,2093,17],[2286,28,2093,22,"flowParseDeclare"],[2286,44,2093,17],[2286,45,2093,39,"node"],[2286,49,2093,17],[2286,50,2093,10],[2287,0,2094,9],[2288,0,2095,7],[2288,13,2091,6],[2288,19,2095,13],[2288,23,2095,17],[2288,28,2095,22,"match"],[2288,33,2095,17],[2288,34,2095,28,"types"],[2288,39,2095,33],[2288,40,2095,34,"name"],[2288,44,2095,17],[2288,45,2095,13],[2288,47,2095,41],[2289,0,2096,8],[2289,18,2096,12,"expr"],[2289,22,2096,16],[2289,23,2096,17,"name"],[2289,27,2096,12],[2289,32,2096,26],[2289,43,2096,8],[2289,45,2096,39],[2290,0,2097,10],[2290,23,2097,17],[2290,28,2097,22,"flowParseInterface"],[2290,46,2097,17],[2290,47,2097,41,"node"],[2290,51,2097,17],[2290,52,2097,10],[2291,0,2098,9],[2291,15,2096,8],[2291,21,2098,15],[2291,25,2098,19,"expr"],[2291,29,2098,23],[2291,30,2098,24,"name"],[2291,34,2098,19],[2291,39,2098,33],[2291,45,2098,15],[2291,47,2098,41],[2292,0,2099,10],[2292,23,2099,17],[2292,28,2099,22,"flowParseTypeAlias"],[2292,46,2099,17],[2292,47,2099,41,"node"],[2292,51,2099,17],[2292,52,2099,10],[2293,0,2100,9],[2293,15,2098,15],[2293,21,2100,15],[2293,25,2100,19,"expr"],[2293,29,2100,23],[2293,30,2100,24,"name"],[2293,34,2100,19],[2293,39,2100,33],[2293,47,2100,15],[2293,49,2100,43],[2294,0,2101,10],[2294,23,2101,17],[2294,28,2101,22,"flowParseOpaqueType"],[2294,47,2101,17],[2294,48,2101,42,"node"],[2294,52,2101,17],[2294,54,2101,48],[2294,59,2101,17],[2294,60,2101,10],[2295,0,2102,9],[2296,0,2103,7],[2297,0,2104,5],[2299,0,2106,4],[2299,103,2106,42,"node"],[2299,107,2106,4],[2299,109,2106,48,"expr"],[2299,113,2106,4],[2300,0,2107,3],[2301,0,805,22],[2302,0,805,22],[2303,0,805,22],[2303,55,2109,33],[2304,0,2110,4],[2304,17,2110,11],[2304,22,2110,16,"isContextual"],[2304,34,2110,11],[2304,35,2110,29],[2304,41,2110,11],[2304,46,2110,40],[2304,51,2110,45,"isContextual"],[2304,63,2110,40],[2304,64,2110,58],[2304,75,2110,40],[2304,76,2110,11],[2304,80,2110,74],[2304,85,2110,79,"isContextual"],[2304,97,2110,74],[2304,98,2110,92],[2304,106,2110,74],[2304,107,2110,11],[2304,111,2110,105],[2304,116,2110,110,"shouldParseEnums"],[2304,132,2110,105],[2304,138,2110,132],[2304,143,2110,137,"isContextual"],[2304,155,2110,132],[2304,156,2110,150],[2304,162,2110,132],[2304,163,2110,11],[2304,256,2110,4],[2305,0,2111,3],[2306,0,805,22],[2307,0,805,22],[2308,0,805,22],[2308,51,2113,29],[2309,0,2114,4],[2309,14,2114,8],[2309,19,2114,13,"match"],[2309,24,2114,8],[2309,25,2114,19,"types"],[2309,30,2114,24],[2309,31,2114,25,"name"],[2309,35,2114,8],[2309,41,2114,35],[2309,46,2114,40,"state"],[2309,51,2114,35],[2309,52,2114,46,"value"],[2309,57,2114,35],[2309,62,2114,56],[2309,68,2114,35],[2309,72,2114,66],[2309,77,2114,71,"state"],[2309,82,2114,66],[2309,83,2114,77,"value"],[2309,88,2114,66],[2309,93,2114,87],[2309,104,2114,35],[2309,108,2114,102],[2309,113,2114,107,"state"],[2309,118,2114,102],[2309,119,2114,113,"value"],[2309,124,2114,102],[2309,129,2114,123],[2309,137,2114,35],[2309,141,2114,135],[2309,146,2114,140,"shouldParseEnums"],[2309,162,2114,135],[2309,168,2114,162],[2309,173,2114,167,"state"],[2309,178,2114,162],[2309,179,2114,173,"value"],[2309,184,2114,162],[2309,189,2114,183],[2309,195,2114,8],[2309,196,2114,4],[2309,198,2114,192],[2310,0,2115,6],[2310,19,2115,13],[2310,24,2115,6],[2311,0,2116,5],[2313,0,2118,4],[2314,0,2119,3],[2315,0,805,22],[2316,0,805,22],[2317,0,805,22],[2317,55,2121,33],[2318,0,2122,4],[2318,14,2122,8],[2318,19,2122,13,"shouldParseEnums"],[2318,35,2122,8],[2318,41,2122,35],[2318,46,2122,40,"isContextual"],[2318,58,2122,35],[2318,59,2122,53],[2318,65,2122,35],[2318,66,2122,4],[2318,68,2122,62],[2319,0,2123,6],[2319,16,2123,12,"node"],[2319,20,2123,16],[2319,23,2123,19],[2319,28,2123,24,"startNode"],[2319,37,2123,19],[2319,39,2123,6],[2320,0,2124,6],[2320,17,2124,11,"next"],[2320,21,2124,6],[2321,0,2125,6],[2321,19,2125,13],[2321,24,2125,18,"flowParseEnumDeclaration"],[2321,48,2125,13],[2321,49,2125,43,"node"],[2321,53,2125,13],[2321,54,2125,6],[2322,0,2126,5],[2324,0,2128,4],[2325,0,2129,3],[2326,0,805,22],[2327,0,805,22],[2328,0,805,22],[2328,41,2131,19,"expr"],[2328,45,805,22],[2328,47,2131,25,"noIn"],[2328,51,805,22],[2328,53,2131,31,"startPos"],[2328,61,805,22],[2328,63,2131,41,"startLoc"],[2328,71,805,22],[2328,73,2131,51,"refNeedsArrowPos"],[2328,89,805,22],[2328,91,2131,69],[2329,0,2131,69],[2331,0,2132,4],[2331,14,2132,8],[2331,15,2132,9],[2331,20,2132,14,"match"],[2331,25,2132,9],[2331,26,2132,20,"types"],[2331,31,2132,25],[2331,32,2132,26,"question"],[2331,40,2132,9],[2331,41,2132,4],[2331,43,2132,37],[2331,50,2132,44,"expr"],[2331,54,2132,37],[2333,0,2134,4],[2333,14,2134,8,"refNeedsArrowPos"],[2333,30,2134,4],[2333,32,2134,26],[2334,0,2135,6],[2334,16,2135,12,"result"],[2334,22,2135,18],[2334,25,2135,21],[2334,30,2135,26,"tryParse"],[2334,38,2135,21],[2334,39,2135,35],[2335,0,2135,35],[2335,103,2135,64,"expr"],[2335,107,2135,35],[2335,109,2135,70,"noIn"],[2335,113,2135,35],[2335,115,2135,76,"startPos"],[2335,123,2135,35],[2335,125,2135,86,"startLoc"],[2335,133,2135,35],[2336,0,2135,35],[2336,13,2135,21],[2336,14,2135,6],[2338,0,2137,6],[2338,16,2137,10],[2338,17,2137,11,"result"],[2338,23,2137,17],[2338,24,2137,18,"node"],[2338,28,2137,6],[2338,30,2137,24],[2339,0,2138,8,"refNeedsArrowPos"],[2339,14,2138,8,"refNeedsArrowPos"],[2339,30,2138,24],[2339,31,2138,25,"start"],[2339,36,2138,8],[2339,39,2138,33,"result"],[2339,45,2138,39],[2339,46,2138,40,"error"],[2339,51,2138,33],[2339,52,2138,46,"pos"],[2339,55,2138,33],[2339,59,2138,53],[2339,64,2138,58,"state"],[2339,69,2138,53],[2339,70,2138,64,"start"],[2339,75,2138,8],[2340,0,2139,8],[2340,21,2139,15,"expr"],[2340,25,2139,8],[2341,0,2140,7],[2343,0,2142,6],[2343,16,2142,10,"result"],[2343,22,2142,16],[2343,23,2142,17,"error"],[2343,28,2142,6],[2343,30,2142,24],[2343,35,2142,29,"state"],[2343,40,2142,24],[2343,43,2142,37,"result"],[2343,49,2142,43],[2343,50,2142,44,"failState"],[2343,59,2142,24],[2344,0,2143,6],[2344,19,2143,13,"result"],[2344,25,2143,19],[2344,26,2143,20,"node"],[2344,30,2143,6],[2345,0,2144,5],[2347,0,2146,4],[2347,15,2146,9,"expect"],[2347,21,2146,4],[2347,22,2146,16,"types"],[2347,27,2146,21],[2347,28,2146,22,"question"],[2347,36,2146,4],[2348,0,2147,4],[2348,14,2147,10,"state"],[2348,19,2147,15],[2348,22,2147,18],[2348,27,2147,23,"state"],[2348,32,2147,18],[2348,33,2147,29,"clone"],[2348,38,2147,18],[2348,40,2147,4],[2349,0,2148,4],[2349,14,2148,10,"originalNoArrowAt"],[2349,31,2148,27],[2349,34,2148,30],[2349,39,2148,35,"state"],[2349,44,2148,30],[2349,45,2148,41,"noArrowAt"],[2349,54,2148,4],[2350,0,2149,4],[2350,14,2149,10,"node"],[2350,18,2149,14],[2350,21,2149,17],[2350,26,2149,22,"startNodeAt"],[2350,37,2149,17],[2350,38,2149,34,"startPos"],[2350,46,2149,17],[2350,48,2149,44,"startLoc"],[2350,56,2149,17],[2350,57,2149,4],[2352,0,2131,69],[2352,38,2153,8],[2352,43,2153,13,"tryParseConditionalConsequent"],[2352,72,2153,8],[2352,74,2131,69],[2353,0,2131,69],[2353,14,2151,6,"consequent"],[2353,24,2131,69],[2353,49,2151,6,"consequent"],[2353,59,2131,69],[2354,0,2131,69],[2354,14,2152,6,"failed"],[2354,20,2131,69],[2354,45,2152,6,"failed"],[2354,51,2131,69],[2356,0,2131,69],[2356,38,2154,27],[2356,43,2154,32,"getArrowLikeExpressions"],[2356,66,2154,27],[2356,67,2154,56,"consequent"],[2356,77,2154,27],[2356,78,2131,69],[2357,0,2131,69],[2358,0,2131,69],[2358,14,2154,9,"valid"],[2358,19,2131,69],[2359,0,2131,69],[2359,14,2154,16,"invalid"],[2359,21,2131,69],[2361,0,2156,4],[2361,14,2156,8,"failed"],[2361,20,2156,14],[2361,24,2156,18,"invalid"],[2361,31,2156,25],[2361,32,2156,26,"length"],[2361,38,2156,18],[2361,41,2156,35],[2361,42,2156,4],[2361,44,2156,38],[2362,0,2157,6],[2362,16,2157,12,"noArrowAt"],[2362,25,2157,21],[2362,47,2157,28,"originalNoArrowAt"],[2362,64,2157,21],[2362,65,2157,6],[2364,0,2159,6],[2364,16,2159,10,"invalid"],[2364,23,2159,17],[2364,24,2159,18,"length"],[2364,30,2159,10],[2364,33,2159,27],[2364,34,2159,6],[2364,36,2159,30],[2365,0,2160,8],[2365,19,2160,13,"state"],[2365,24,2160,8],[2365,27,2160,21,"state"],[2365,32,2160,8],[2366,0,2161,8],[2366,19,2161,13,"state"],[2366,24,2161,8],[2366,25,2161,19,"noArrowAt"],[2366,34,2161,8],[2366,37,2161,31,"noArrowAt"],[2366,46,2161,8],[2368,0,2163,8],[2368,19,2163,13],[2368,23,2163,17,"i"],[2368,24,2163,18],[2368,27,2163,21],[2368,28,2163,8],[2368,30,2163,24,"i"],[2368,31,2163,25],[2368,34,2163,28,"invalid"],[2368,41,2163,35],[2368,42,2163,36,"length"],[2368,48,2163,8],[2368,50,2163,44,"i"],[2368,51,2163,45],[2368,53,2163,8],[2368,55,2163,49],[2369,0,2164,10,"noArrowAt"],[2369,16,2164,10,"noArrowAt"],[2369,25,2164,19],[2369,26,2164,20,"push"],[2369,30,2164,10],[2369,31,2164,25,"invalid"],[2369,38,2164,32],[2369,39,2164,33,"i"],[2369,40,2164,32],[2369,41,2164,25],[2369,42,2164,36,"start"],[2369,47,2164,10],[2370,0,2165,9],[2372,0,2159,30],[2372,43,2170,12],[2372,48,2170,17,"tryParseConditionalConsequent"],[2372,77,2170,12],[2372,79,2159,30],[2374,0,2168,10,"consequent"],[2374,14,2168,10,"consequent"],[2374,24,2159,30],[2374,50,2168,10,"consequent"],[2374,60,2159,30],[2375,0,2169,10,"failed"],[2375,14,2169,10,"failed"],[2375,20,2159,30],[2375,46,2169,10,"failed"],[2375,52,2159,30],[2377,0,2159,30],[2377,43,2171,27],[2377,48,2171,32,"getArrowLikeExpressions"],[2377,71,2171,27],[2377,72,2171,56,"consequent"],[2377,82,2171,27],[2377,83,2159,30],[2379,0,2159,30],[2381,0,2171,9,"valid"],[2381,14,2171,9,"valid"],[2381,19,2159,30],[2382,0,2171,16,"invalid"],[2382,14,2171,16,"invalid"],[2382,21,2159,30],[2383,0,2172,7],[2385,0,2174,6],[2385,16,2174,10,"failed"],[2385,22,2174,16],[2385,26,2174,20,"valid"],[2385,31,2174,25],[2385,32,2174,26,"length"],[2385,38,2174,20],[2385,41,2174,35],[2385,42,2174,6],[2385,44,2174,38],[2386,0,2175,8],[2386,19,2175,13,"raise"],[2386,24,2175,8],[2386,25,2175,19,"state"],[2386,30,2175,24],[2386,31,2175,25,"start"],[2386,36,2175,8],[2386,38,2175,32],[2386,118,2175,8],[2387,0,2176,7],[2389,0,2178,6],[2389,16,2178,10,"failed"],[2389,22,2178,16],[2389,26,2178,20,"valid"],[2389,31,2178,25],[2389,32,2178,26,"length"],[2389,38,2178,20],[2389,43,2178,37],[2389,44,2178,6],[2389,46,2178,40],[2390,0,2179,8],[2390,19,2179,13,"state"],[2390,24,2179,8],[2390,27,2179,21,"state"],[2390,32,2179,8],[2391,0,2180,8],[2391,19,2180,13,"state"],[2391,24,2180,8],[2391,25,2180,19,"noArrowAt"],[2391,34,2180,8],[2391,37,2180,31,"noArrowAt"],[2391,46,2180,40],[2391,47,2180,41,"concat"],[2391,53,2180,31],[2391,54,2180,48,"valid"],[2391,59,2180,53],[2391,60,2180,54],[2391,61,2180,53],[2391,62,2180,48],[2391,63,2180,57,"start"],[2391,68,2180,31],[2391,69,2180,8],[2393,0,2178,40],[2393,43,2184,12],[2393,48,2184,17,"tryParseConditionalConsequent"],[2393,77,2184,12],[2393,79,2178,40],[2395,0,2182,10,"consequent"],[2395,14,2182,10,"consequent"],[2395,24,2178,40],[2395,50,2182,10,"consequent"],[2395,60,2178,40],[2396,0,2183,10,"failed"],[2396,14,2183,10,"failed"],[2396,20,2178,40],[2396,46,2183,10,"failed"],[2396,52,2178,40],[2397,0,2185,7],[2398,0,2186,5],[2400,0,2188,4],[2400,15,2188,9,"getArrowLikeExpressions"],[2400,38,2188,4],[2400,39,2188,33,"consequent"],[2400,49,2188,4],[2400,51,2188,45],[2400,55,2188,4],[2401,0,2189,4],[2401,15,2189,9,"state"],[2401,20,2189,4],[2401,21,2189,15,"noArrowAt"],[2401,30,2189,4],[2401,33,2189,27,"originalNoArrowAt"],[2401,50,2189,4],[2402,0,2190,4],[2402,15,2190,9,"expect"],[2402,21,2190,4],[2402,22,2190,16,"types"],[2402,27,2190,21],[2402,28,2190,22,"colon"],[2402,33,2190,4],[2403,0,2191,4,"node"],[2403,10,2191,4,"node"],[2403,14,2191,8],[2403,15,2191,9,"test"],[2403,19,2191,4],[2403,22,2191,16,"expr"],[2403,26,2191,4],[2404,0,2192,4,"node"],[2404,10,2192,4,"node"],[2404,14,2192,8],[2404,15,2192,9,"consequent"],[2404,25,2192,4],[2404,28,2192,22,"consequent"],[2404,38,2192,4],[2405,0,2193,4,"node"],[2405,10,2193,4,"node"],[2405,14,2193,8],[2405,15,2193,9,"alternate"],[2405,24,2193,4],[2405,27,2193,21],[2405,32,2193,26,"forwardNoArrowParamsConversionAt"],[2405,64,2193,21],[2405,65,2193,59,"node"],[2405,69,2193,21],[2405,71,2193,65],[2406,0,2193,65],[2406,19,2193,71],[2406,25,2193,75],[2406,26,2193,76,"parseMaybeAssign"],[2406,42,2193,71],[2406,43,2193,93,"noIn"],[2406,47,2193,71],[2406,49,2193,99,"undefined"],[2406,58,2193,71],[2406,60,2193,110,"undefined"],[2406,69,2193,71],[2406,71,2193,121,"undefined"],[2406,80,2193,71],[2406,81,2193,65],[2407,0,2193,65],[2407,11,2193,21],[2407,12,2193,4],[2408,0,2194,4],[2408,17,2194,11],[2408,22,2194,16,"finishNode"],[2408,32,2194,11],[2408,33,2194,27,"node"],[2408,37,2194,11],[2408,39,2194,33],[2408,62,2194,11],[2408,63,2194,4],[2409,0,2195,3],[2410,0,805,22],[2411,0,805,22],[2412,0,805,22],[2412,56,2197,34],[2413,0,2198,4],[2413,15,2198,9,"state"],[2413,20,2198,4],[2413,21,2198,15,"noArrowParamsConversionAt"],[2413,46,2198,4],[2413,47,2198,41,"push"],[2413,51,2198,4],[2413,52,2198,46],[2413,57,2198,51,"state"],[2413,62,2198,46],[2413,63,2198,57,"start"],[2413,68,2198,4],[2414,0,2199,4],[2414,14,2199,10,"consequent"],[2414,24,2199,20],[2414,27,2199,23],[2414,32,2199,28,"parseMaybeAssign"],[2414,48,2199,23],[2414,50,2199,4],[2415,0,2200,4],[2415,14,2200,10,"failed"],[2415,20,2200,16],[2415,23,2200,19],[2415,24,2200,20],[2415,29,2200,25,"match"],[2415,34,2200,20],[2415,35,2200,31,"types"],[2415,40,2200,36],[2415,41,2200,37,"colon"],[2415,46,2200,20],[2415,47,2200,4],[2416,0,2201,4],[2416,15,2201,9,"state"],[2416,20,2201,4],[2416,21,2201,15,"noArrowParamsConversionAt"],[2416,46,2201,4],[2416,47,2201,41,"pop"],[2416,50,2201,4],[2417,0,2202,4],[2417,17,2202,11],[2418,0,2203,6,"consequent"],[2418,12,2203,6,"consequent"],[2418,22,2203,16],[2418,24,2203,6,"consequent"],[2418,34,2202,11],[2419,0,2204,6,"failed"],[2419,12,2204,6,"failed"],[2419,18,2204,12],[2419,20,2204,6,"failed"],[2420,0,2202,11],[2420,11,2202,4],[2421,0,2206,3],[2422,0,805,22],[2423,0,805,22],[2424,0,805,22],[2424,48,2208,26,"node"],[2424,52,805,22],[2424,54,2208,32,"disallowInvalid"],[2424,69,805,22],[2424,71,2208,49],[2425,0,2208,49],[2427,0,2209,4],[2427,14,2209,10,"stack"],[2427,19,2209,15],[2427,22,2209,18],[2427,23,2209,19,"node"],[2427,27,2209,18],[2427,28,2209,4],[2428,0,2210,4],[2428,14,2210,10,"arrows"],[2428,20,2210,16],[2428,23,2210,19],[2428,25,2210,4],[2430,0,2212,4],[2430,17,2212,11,"stack"],[2430,22,2212,16],[2430,23,2212,17,"length"],[2430,29,2212,11],[2430,34,2212,28],[2430,35,2212,4],[2430,37,2212,31],[2431,0,2213,6],[2431,16,2213,12,"node"],[2431,22,2213,16],[2431,25,2213,19,"stack"],[2431,30,2213,24],[2431,31,2213,25,"pop"],[2431,34,2213,19],[2431,36,2213,6],[2433,0,2215,6],[2433,16,2215,10,"node"],[2433,22,2215,14],[2433,23,2215,15,"type"],[2433,27,2215,10],[2433,32,2215,24],[2433,57,2215,6],[2433,59,2215,51],[2434,0,2216,8],[2434,18,2216,12,"node"],[2434,24,2216,16],[2434,25,2216,17,"typeParameters"],[2434,39,2216,12],[2434,43,2216,35],[2434,44,2216,36,"node"],[2434,50,2216,40],[2434,51,2216,41,"returnType"],[2434,61,2216,8],[2434,63,2216,53],[2435,0,2217,10],[2435,21,2217,15,"finishArrowValidation"],[2435,42,2217,10],[2435,43,2217,37,"node"],[2435,49,2217,10],[2436,0,2218,9],[2436,15,2216,8],[2436,21,2218,15],[2437,0,2219,10,"arrows"],[2437,16,2219,10,"arrows"],[2437,22,2219,16],[2437,23,2219,17,"push"],[2437,27,2219,10],[2437,28,2219,22,"node"],[2437,34,2219,10],[2438,0,2220,9],[2440,0,2222,8,"stack"],[2440,14,2222,8,"stack"],[2440,19,2222,13],[2440,20,2222,14,"push"],[2440,24,2222,8],[2440,25,2222,19,"node"],[2440,31,2222,23],[2440,32,2222,24,"body"],[2440,36,2222,8],[2441,0,2223,7],[2441,13,2215,6],[2441,19,2223,13],[2441,23,2223,17,"node"],[2441,29,2223,21],[2441,30,2223,22,"type"],[2441,34,2223,17],[2441,39,2223,31],[2441,62,2223,13],[2441,64,2223,56],[2442,0,2224,8,"stack"],[2442,14,2224,8,"stack"],[2442,19,2224,13],[2442,20,2224,14,"push"],[2442,24,2224,8],[2442,25,2224,19,"node"],[2442,31,2224,23],[2442,32,2224,24,"consequent"],[2442,42,2224,8],[2443,0,2225,8,"stack"],[2443,14,2225,8,"stack"],[2443,19,2225,13],[2443,20,2225,14,"push"],[2443,24,2225,8],[2443,25,2225,19,"node"],[2443,31,2225,23],[2443,32,2225,24,"alternate"],[2443,41,2225,8],[2444,0,2226,7],[2445,0,2227,5],[2447,0,2229,4],[2447,14,2229,8,"disallowInvalid"],[2447,29,2229,4],[2447,31,2229,25],[2448,0,2230,6,"arrows"],[2448,12,2230,6,"arrows"],[2448,18,2230,12],[2448,19,2230,13,"forEach"],[2448,26,2230,6],[2448,27,2230,21],[2448,37,2230,21,"node"],[2448,41,2230,25],[2449,0,2230,25],[2449,21,2230,29],[2449,27,2230,33],[2449,28,2230,34,"finishArrowValidation"],[2449,49,2230,29],[2449,50,2230,56,"node"],[2449,54,2230,29],[2449,55,2230,25],[2450,0,2230,25],[2450,13,2230,6],[2451,0,2231,6],[2451,19,2231,13],[2451,20,2231,14,"arrows"],[2451,26,2231,13],[2451,28,2231,22],[2451,30,2231,13],[2451,31,2231,6],[2452,0,2232,5],[2454,0,2234,4],[2454,17,2234,11,"partition"],[2454,26,2234,20],[2454,27,2234,21,"arrows"],[2454,33,2234,20],[2454,35,2234,29],[2454,45,2234,29,"node"],[2454,49,2234,33],[2455,0,2234,33],[2455,19,2234,37,"node"],[2455,23,2234,41],[2455,24,2234,42,"params"],[2455,30,2234,37],[2455,31,2234,49,"every"],[2455,36,2234,37],[2455,37,2234,55],[2455,47,2234,55,"param"],[2455,52,2234,60],[2456,0,2234,60],[2456,21,2234,64],[2456,27,2234,68],[2456,28,2234,69,"isAssignable"],[2456,40,2234,64],[2456,41,2234,82,"param"],[2456,46,2234,64],[2456,48,2234,89],[2456,52,2234,64],[2456,53,2234,60],[2457,0,2234,60],[2457,13,2234,37],[2457,14,2234,33],[2458,0,2234,33],[2458,11,2234,20],[2458,12,2234,4],[2459,0,2235,3],[2460,0,805,22],[2461,0,805,22],[2462,0,805,22],[2462,46,2237,24,"node"],[2462,50,805,22],[2462,52,2237,30],[2463,0,2238,4],[2463,14,2238,8,"_node$extra"],[2463,25,2238,4],[2465,0,2240,4],[2465,15,2240,9,"toAssignableList"],[2465,31,2240,4],[2465,32,2240,26,"node"],[2465,36,2240,30],[2465,37,2240,31,"params"],[2465,43,2240,4],[2465,45,2240,39],[2465,49,2240,4],[2465,51,2240,45],[2465,78,2240,4],[2465,80,2240,74],[2465,81,2240,75,"_node$extra"],[2465,92,2240,86],[2465,95,2240,89,"node"],[2465,99,2240,93],[2465,100,2240,94,"extra"],[2465,105,2240,74],[2465,110,2240,104],[2465,114,2240,74],[2465,117,2240,111],[2465,122,2240,116],[2465,123,2240,74],[2465,126,2240,120,"_node$extra"],[2465,137,2240,131],[2465,138,2240,132,"trailingComma"],[2465,151,2240,4],[2466,0,2241,4],[2466,15,2241,9,"scope"],[2466,20,2241,4],[2466,21,2241,15,"enter"],[2466,26,2241,4],[2466,27,2241,21,"functionFlags"],[2466,40,2241,34],[2466,41,2241,35],[2466,46,2241,34],[2466,48,2241,42],[2466,53,2241,34],[2466,54,2241,21],[2466,57,2241,51,"SCOPE_ARROW"],[2466,68,2241,4],[2468,0,2242,4],[2468,83,2242,22,"node"],[2468,87,2242,4],[2468,89,2242,28],[2468,94,2242,4],[2468,96,2242,35],[2468,100,2242,4],[2470,0,2243,4],[2470,15,2243,9,"scope"],[2470,20,2243,4],[2470,21,2243,15,"exit"],[2470,25,2243,4],[2471,0,2244,3],[2472,0,805,22],[2473,0,805,22],[2474,0,805,22],[2474,57,2246,35,"node"],[2474,61,805,22],[2474,63,2246,41,"parse"],[2474,68,805,22],[2474,70,2246,48],[2475,0,2247,4],[2475,14,2247,8,"result"],[2475,20,2247,4],[2477,0,2249,4],[2477,14,2249,8],[2477,19,2249,13,"state"],[2477,24,2249,8],[2477,25,2249,19,"noArrowParamsConversionAt"],[2477,50,2249,8],[2477,51,2249,45,"indexOf"],[2477,58,2249,8],[2477,59,2249,53,"node"],[2477,63,2249,57],[2477,64,2249,58,"start"],[2477,69,2249,8],[2477,75,2249,69],[2477,76,2249,70],[2477,77,2249,4],[2477,79,2249,73],[2478,0,2250,6],[2478,17,2250,11,"state"],[2478,22,2250,6],[2478,23,2250,17,"noArrowParamsConversionAt"],[2478,48,2250,6],[2478,49,2250,43,"push"],[2478,53,2250,6],[2478,54,2250,48],[2478,59,2250,53,"state"],[2478,64,2250,48],[2478,65,2250,59,"start"],[2478,70,2250,6],[2479,0,2251,6,"result"],[2479,12,2251,6,"result"],[2479,18,2251,12],[2479,21,2251,15,"parse"],[2479,26,2251,20],[2479,28,2251,6],[2480,0,2252,6],[2480,17,2252,11,"state"],[2480,22,2252,6],[2480,23,2252,17,"noArrowParamsConversionAt"],[2480,48,2252,6],[2480,49,2252,43,"pop"],[2480,52,2252,6],[2481,0,2253,5],[2481,11,2249,4],[2481,17,2253,11],[2482,0,2254,6,"result"],[2482,12,2254,6,"result"],[2482,18,2254,12],[2482,21,2254,15,"parse"],[2482,26,2254,20],[2482,28,2254,6],[2483,0,2255,5],[2485,0,2257,4],[2485,17,2257,11,"result"],[2485,23,2257,4],[2486,0,2258,3],[2487,0,805,22],[2488,0,805,22],[2489,0,805,22],[2489,39,2260,17,"node"],[2489,43,805,22],[2489,45,2260,23,"startPos"],[2489,53,805,22],[2489,55,2260,33,"startLoc"],[2489,63,805,22],[2489,65,2260,43],[2490,0,2261,4,"node"],[2490,10,2261,4,"node"],[2490,14,2261,8],[2490,93,2261,32,"node"],[2490,97,2261,8],[2490,99,2261,38,"startPos"],[2490,107,2261,8],[2490,109,2261,48,"startLoc"],[2490,117,2261,8],[2490,118,2261,4],[2492,0,2263,4],[2492,14,2263,8],[2492,19,2263,13,"eat"],[2492,22,2263,8],[2492,23,2263,17,"types"],[2492,28,2263,22],[2492,29,2263,23,"question"],[2492,37,2263,8],[2492,38,2263,4],[2492,40,2263,34],[2493,0,2264,6,"node"],[2493,12,2264,6,"node"],[2493,16,2264,10],[2493,17,2264,11,"optional"],[2493,25,2264,6],[2493,28,2264,22],[2493,32,2264,6],[2494,0,2265,6],[2494,17,2265,11,"resetEndLocation"],[2494,33,2265,6],[2494,34,2265,28,"node"],[2494,38,2265,6],[2495,0,2266,5],[2497,0,2268,4],[2497,14,2268,8],[2497,19,2268,13,"match"],[2497,24,2268,8],[2497,25,2268,19,"types"],[2497,30,2268,24],[2497,31,2268,25,"colon"],[2497,36,2268,8],[2497,37,2268,4],[2497,39,2268,33],[2498,0,2269,6],[2498,16,2269,12,"typeCastNode"],[2498,28,2269,24],[2498,31,2269,27],[2498,36,2269,32,"startNodeAt"],[2498,47,2269,27],[2498,48,2269,44,"startPos"],[2498,56,2269,27],[2498,58,2269,54,"startLoc"],[2498,66,2269,27],[2498,67,2269,6],[2499,0,2270,6,"typeCastNode"],[2499,12,2270,6,"typeCastNode"],[2499,24,2270,18],[2499,25,2270,19,"expression"],[2499,35,2270,6],[2499,38,2270,32,"node"],[2499,42,2270,6],[2500,0,2271,6,"typeCastNode"],[2500,12,2271,6,"typeCastNode"],[2500,24,2271,18],[2500,25,2271,19,"typeAnnotation"],[2500,39,2271,6],[2500,42,2271,36],[2500,47,2271,41,"flowParseTypeAnnotation"],[2500,70,2271,36],[2500,72,2271,6],[2501,0,2272,6],[2501,19,2272,13],[2501,24,2272,18,"finishNode"],[2501,34,2272,13],[2501,35,2272,29,"typeCastNode"],[2501,47,2272,13],[2501,49,2272,43],[2501,69,2272,13],[2501,70,2272,6],[2502,0,2273,5],[2504,0,2275,4],[2504,17,2275,11,"node"],[2504,21,2275,4],[2505,0,2276,3],[2506,0,805,22],[2507,0,805,22],[2508,0,805,22],[2508,48,2278,26,"node"],[2508,52,805,22],[2508,54,2278,32],[2509,0,2279,4],[2509,14,2279,8,"node"],[2509,18,2279,12],[2509,19,2279,13,"type"],[2509,23,2279,8],[2509,28,2279,22],[2509,47,2279,8],[2509,52,2279,46,"node"],[2509,56,2279,50],[2509,57,2279,51,"importKind"],[2509,67,2279,46],[2509,72,2279,66],[2509,78,2279,46],[2509,82,2279,76,"node"],[2509,86,2279,80],[2509,87,2279,81,"importKind"],[2509,97,2279,76],[2509,102,2279,96],[2509,110,2279,8],[2509,115,2279,109,"node"],[2509,119,2279,113],[2509,120,2279,114,"type"],[2509,124,2279,109],[2509,129,2279,123],[2509,153,2279,109],[2509,157,2279,151,"node"],[2509,161,2279,155],[2509,162,2279,156,"exportKind"],[2509,172,2279,151],[2509,177,2279,171],[2509,183,2279,8],[2509,187,2279,181,"node"],[2509,191,2279,185],[2509,192,2279,186,"type"],[2509,196,2279,181],[2509,201,2279,195],[2509,223,2279,181],[2509,227,2279,221,"node"],[2509,231,2279,225],[2509,232,2279,226,"exportKind"],[2509,242,2279,221],[2509,247,2279,241],[2509,253,2279,4],[2509,255,2279,249],[2510,0,2280,6],[2511,0,2281,5],[2513,0,2283,4],[2513,95,2283,34,"node"],[2513,99,2283,4],[2514,0,2284,3],[2515,0,805,22],[2516,0,805,22],[2517,0,805,22],[2517,36,2286,14,"node"],[2517,40,805,22],[2517,42,2286,20],[2518,0,2287,4],[2518,14,2287,10,"decl"],[2518,18,2287,14],[2518,94,2287,35,"node"],[2518,98,2287,14],[2518,99,2287,4],[2520,0,2289,4],[2520,14,2289,8,"decl"],[2520,18,2289,12],[2520,19,2289,13,"type"],[2520,23,2289,8],[2520,28,2289,22],[2520,52,2289,8],[2520,56,2289,50,"decl"],[2520,60,2289,54],[2520,61,2289,55,"type"],[2520,65,2289,50],[2520,70,2289,64],[2520,92,2289,4],[2520,94,2289,88],[2521,0,2290,6,"decl"],[2521,12,2290,6,"decl"],[2521,16,2290,10],[2521,17,2290,11,"exportKind"],[2521,27,2290,6],[2521,30,2290,24,"decl"],[2521,34,2290,28],[2521,35,2290,29,"exportKind"],[2521,45,2290,24],[2521,49,2290,43],[2521,56,2290,6],[2522,0,2291,5],[2524,0,2293,4],[2524,17,2293,11,"decl"],[2524,21,2293,4],[2525,0,2294,3],[2526,0,805,22],[2527,0,805,22],[2528,0,805,22],[2528,47,2296,25,"node"],[2528,51,805,22],[2528,53,2296,31],[2529,0,2297,4],[2529,14,2297,8],[2529,19,2297,13,"isContextual"],[2529,31,2297,8],[2529,32,2297,26],[2529,38,2297,8],[2529,39,2297,4],[2529,41,2297,35],[2530,0,2298,6,"node"],[2530,12,2298,6,"node"],[2530,16,2298,10],[2530,17,2298,11,"exportKind"],[2530,27,2298,6],[2530,30,2298,24],[2530,36,2298,6],[2531,0,2299,6],[2531,16,2299,12,"declarationNode"],[2531,31,2299,27],[2531,34,2299,30],[2531,39,2299,35,"startNode"],[2531,48,2299,30],[2531,50,2299,6],[2532,0,2300,6],[2532,17,2300,11,"next"],[2532,21,2300,6],[2534,0,2302,6],[2534,16,2302,10],[2534,21,2302,15,"match"],[2534,26,2302,10],[2534,27,2302,21,"types"],[2534,32,2302,26],[2534,33,2302,27,"braceL"],[2534,39,2302,10],[2534,40,2302,6],[2534,42,2302,36],[2535,0,2303,8,"node"],[2535,14,2303,8,"node"],[2535,18,2303,12],[2535,19,2303,13,"specifiers"],[2535,29,2303,8],[2535,32,2303,26],[2535,37,2303,31,"parseExportSpecifiers"],[2535,58,2303,26],[2535,60,2303,8],[2536,0,2304,8],[2536,19,2304,13,"parseExportFrom"],[2536,34,2304,8],[2536,35,2304,29,"node"],[2536,39,2304,8],[2537,0,2305,8],[2537,21,2305,15],[2537,25,2305,8],[2538,0,2306,7],[2538,13,2302,6],[2538,19,2306,13],[2539,0,2307,8],[2539,21,2307,15],[2539,26,2307,20,"flowParseTypeAlias"],[2539,44,2307,15],[2539,45,2307,39,"declarationNode"],[2539,60,2307,15],[2539,61,2307,8],[2540,0,2308,7],[2541,0,2309,5],[2541,11,2297,4],[2541,17,2309,11],[2541,21,2309,15],[2541,26,2309,20,"isContextual"],[2541,38,2309,15],[2541,39,2309,33],[2541,47,2309,15],[2541,48,2309,11],[2541,50,2309,44],[2542,0,2310,6,"node"],[2542,12,2310,6,"node"],[2542,16,2310,10],[2542,17,2310,11,"exportKind"],[2542,27,2310,6],[2542,30,2310,24],[2542,36,2310,6],[2544,0,2311,6],[2544,16,2311,12,"declarationNode"],[2544,32,2311,27],[2544,35,2311,30],[2544,40,2311,35,"startNode"],[2544,49,2311,30],[2544,51,2311,6],[2546,0,2312,6],[2546,17,2312,11,"next"],[2546,21,2312,6],[2547,0,2313,6],[2547,19,2313,13],[2547,24,2313,18,"flowParseOpaqueType"],[2547,43,2313,13],[2547,44,2313,38,"declarationNode"],[2547,60,2313,13],[2547,62,2313,55],[2547,67,2313,13],[2547,68,2313,6],[2548,0,2314,5],[2548,11,2309,11],[2548,17,2314,11],[2548,21,2314,15],[2548,26,2314,20,"isContextual"],[2548,38,2314,15],[2548,39,2314,33],[2548,50,2314,15],[2548,51,2314,11],[2548,53,2314,47],[2549,0,2315,6,"node"],[2549,12,2315,6,"node"],[2549,16,2315,10],[2549,17,2315,11,"exportKind"],[2549,27,2315,6],[2549,30,2315,24],[2549,36,2315,6],[2551,0,2316,6],[2551,16,2316,12,"declarationNode"],[2551,33,2316,27],[2551,36,2316,30],[2551,41,2316,35,"startNode"],[2551,50,2316,30],[2551,52,2316,6],[2553,0,2317,6],[2553,17,2317,11,"next"],[2553,21,2317,6],[2554,0,2318,6],[2554,19,2318,13],[2554,24,2318,18,"flowParseInterface"],[2554,42,2318,13],[2554,43,2318,37,"declarationNode"],[2554,60,2318,13],[2554,61,2318,6],[2555,0,2319,5],[2555,11,2314,11],[2555,17,2319,11],[2555,21,2319,15],[2555,26,2319,20,"shouldParseEnums"],[2555,42,2319,15],[2555,48,2319,42],[2555,53,2319,47,"isContextual"],[2555,65,2319,42],[2555,66,2319,60],[2555,72,2319,42],[2555,73,2319,11],[2555,75,2319,69],[2556,0,2320,6,"node"],[2556,12,2320,6,"node"],[2556,16,2320,10],[2556,17,2320,11,"exportKind"],[2556,27,2320,6],[2556,30,2320,24],[2556,37,2320,6],[2558,0,2321,6],[2558,16,2321,12,"declarationNode"],[2558,33,2321,27],[2558,36,2321,30],[2558,41,2321,35,"startNode"],[2558,50,2321,30],[2558,52,2321,6],[2560,0,2322,6],[2560,17,2322,11,"next"],[2560,21,2322,6],[2561,0,2323,6],[2561,19,2323,13],[2561,24,2323,18,"flowParseEnumDeclaration"],[2561,48,2323,13],[2561,49,2323,43,"declarationNode"],[2561,66,2323,13],[2561,67,2323,6],[2562,0,2324,5],[2562,11,2319,11],[2562,17,2324,11],[2563,0,2325,6],[2563,103,2325,42,"node"],[2563,107,2325,6],[2564,0,2326,5],[2565,0,2327,3],[2566,0,805,22],[2567,0,805,22],[2568,0,805,22],[2568,38,2329,16,"node"],[2568,42,805,22],[2568,44,2329,22],[2569,0,2330,4],[2569,90,2330,31,"arguments"],[2569,99,2330,4],[2569,102,2330,43],[2569,109,2330,50],[2569,113,2330,43],[2571,0,2332,4],[2571,14,2332,8],[2571,19,2332,13,"isContextual"],[2571,31,2332,8],[2571,32,2332,26],[2571,38,2332,8],[2571,43,2332,37],[2571,48,2332,42,"lookahead"],[2571,57,2332,37],[2571,60,2332,54,"type"],[2571,64,2332,37],[2571,69,2332,63,"types"],[2571,74,2332,68],[2571,75,2332,69,"star"],[2571,79,2332,4],[2571,81,2332,75],[2572,0,2333,6,"node"],[2572,12,2333,6,"node"],[2572,16,2333,10],[2572,17,2333,11,"exportKind"],[2572,27,2333,6],[2572,30,2333,24],[2572,36,2333,6],[2573,0,2334,6],[2573,17,2334,11,"next"],[2573,21,2334,6],[2574,0,2335,6],[2574,17,2335,11,"next"],[2574,21,2335,6],[2575,0,2336,6],[2575,19,2336,13],[2575,23,2336,6],[2576,0,2337,5],[2578,0,2339,4],[2578,17,2339,11],[2578,22,2339,4],[2579,0,2340,3],[2580,0,805,22],[2581,0,805,22],[2582,0,805,22],[2582,59,2342,37,"node"],[2582,63,805,22],[2582,65,2342,43],[2583,0,2343,4],[2583,14,2343,10,"pos"],[2583,17,2343,13],[2583,20,2343,16],[2583,25,2343,21,"state"],[2583,30,2343,16],[2583,31,2343,27,"start"],[2583,36,2343,4],[2585,0,2344,4],[2585,14,2344,10,"hasNamespace"],[2585,26,2344,22],[2585,125,2344,66,"node"],[2585,129,2344,22],[2585,130,2344,4],[2587,0,2346,4],[2587,14,2346,8,"hasNamespace"],[2587,26,2346,20],[2587,30,2346,24,"node"],[2587,34,2346,28],[2587,35,2346,29,"exportKind"],[2587,45,2346,24],[2587,50,2346,44],[2587,56,2346,4],[2587,58,2346,52],[2588,0,2347,6],[2588,17,2347,11,"unexpected"],[2588,27,2347,6],[2588,28,2347,22,"pos"],[2588,31,2347,6],[2589,0,2348,5],[2591,0,2350,4],[2591,17,2350,11,"hasNamespace"],[2591,29,2350,4],[2592,0,2351,3],[2593,0,805,22],[2594,0,805,22],[2595,0,805,22],[2595,37,2353,15,"node"],[2595,41,805,22],[2595,43,2353,21,"isStatement"],[2595,54,805,22],[2595,56,2353,34,"optionalId"],[2595,66,805,22],[2595,68,2353,46],[2596,0,2354,4],[2596,84,2354,23,"node"],[2596,88,2354,4],[2596,90,2354,29,"isStatement"],[2596,101,2354,4],[2596,103,2354,42,"optionalId"],[2596,113,2354,4],[2598,0,2356,4],[2598,14,2356,8],[2598,19,2356,13,"isRelational"],[2598,31,2356,8],[2598,32,2356,26],[2598,35,2356,8],[2598,36,2356,4],[2598,38,2356,32],[2599,0,2357,6,"node"],[2599,12,2357,6,"node"],[2599,16,2357,10],[2599,17,2357,11,"typeParameters"],[2599,31,2357,6],[2599,34,2357,28],[2599,39,2357,33,"flowParseTypeParameterDeclaration"],[2599,72,2357,28],[2599,74,2357,6],[2600,0,2358,5],[2601,0,2359,3],[2602,0,805,22],[2603,0,805,22],[2604,0,805,22],[2604,41,2361,19,"code"],[2604,45,805,22],[2604,47,2361,25],[2605,0,2362,4],[2605,14,2362,10,"next"],[2605,18,2362,14],[2605,21,2362,17],[2605,26,2362,22,"input"],[2605,31,2362,17],[2605,32,2362,28,"charCodeAt"],[2605,42,2362,17],[2605,43,2362,39],[2605,48,2362,44,"state"],[2605,53,2362,39],[2605,54,2362,50,"pos"],[2605,57,2362,39],[2605,60,2362,56],[2605,61,2362,17],[2605,62,2362,4],[2607,0,2364,4],[2607,14,2364,8,"code"],[2607,18,2364,12],[2607,23,2364,17],[2607,26,2364,8],[2607,30,2364,24,"next"],[2607,34,2364,28],[2607,39,2364,33],[2607,42,2364,4],[2607,44,2364,38],[2608,0,2365,6],[2608,19,2365,13],[2608,24,2365,18,"finishOp"],[2608,32,2365,13],[2608,33,2365,27,"types"],[2608,38,2365,32],[2608,39,2365,33,"braceBarL"],[2608,48,2365,13],[2608,50,2365,44],[2608,51,2365,13],[2608,52,2365,6],[2609,0,2366,5],[2609,11,2364,4],[2609,17,2366,11],[2609,21,2366,15],[2609,26,2366,20,"state"],[2609,31,2366,15],[2609,32,2366,26,"inType"],[2609,38,2366,15],[2609,43,2366,37,"code"],[2609,47,2366,41],[2609,52,2366,46],[2609,54,2366,37],[2609,58,2366,52,"code"],[2609,62,2366,56],[2609,67,2366,61],[2609,69,2366,15],[2609,70,2366,11],[2609,72,2366,66],[2610,0,2367,6],[2610,19,2367,13],[2610,24,2367,18,"finishOp"],[2610,32,2367,13],[2610,33,2367,27,"types"],[2610,38,2367,32],[2610,39,2367,33,"relational"],[2610,49,2367,13],[2610,51,2367,45],[2610,52,2367,13],[2610,53,2367,6],[2611,0,2368,5],[2611,11,2366,11],[2611,17,2368,11],[2611,21,2368,15,"isIteratorStart"],[2611,36,2368,30],[2611,37,2368,31,"code"],[2611,41,2368,30],[2611,43,2368,37,"next"],[2611,47,2368,30],[2611,48,2368,11],[2611,50,2368,44],[2612,0,2369,6],[2612,17,2369,11,"state"],[2612,22,2369,6],[2612,23,2369,17,"isIterator"],[2612,33,2369,6],[2612,36,2369,30],[2612,40,2369,6],[2613,0,2370,6],[2614,0,2371,5],[2614,11,2368,11],[2614,17,2371,11],[2615,0,2372,6],[2615,97,2372,36,"code"],[2615,101,2372,6],[2616,0,2373,5],[2617,0,2374,3],[2618,0,805,22],[2619,0,805,22],[2620,0,805,22],[2620,37,2376,15,"node"],[2620,41,805,22],[2620,43,2376,21,"isBinding"],[2620,52,805,22],[2620,54,2376,32],[2621,0,2376,32],[2623,0,2377,4],[2623,18,2377,12,"node"],[2623,22,2377,16],[2623,23,2377,17,"type"],[2623,27,2377,4],[2624,0,2378,6],[2624,17,2378,11],[2624,29,2378,6],[2625,0,2379,6],[2625,17,2379,11],[2625,32,2379,6],[2626,0,2380,6],[2626,17,2380,11],[2626,31,2380,6],[2627,0,2381,6],[2627,17,2381,11],[2627,36,2381,6],[2628,0,2382,8],[2628,21,2382,15],[2628,25,2382,8],[2630,0,2384,6],[2630,17,2384,11],[2630,35,2384,6],[2631,0,2385,8],[2632,0,2386,10],[2632,20,2386,16,"last"],[2632,25,2386,20],[2632,28,2386,23,"node"],[2632,32,2386,27],[2632,33,2386,28,"properties"],[2632,43,2386,23],[2632,44,2386,39,"length"],[2632,50,2386,23],[2632,53,2386,48],[2632,54,2386,10],[2634,0,2387,10],[2634,23,2387,17,"node"],[2634,27,2387,21],[2634,28,2387,22,"properties"],[2634,38,2387,17],[2634,39,2387,33,"every"],[2634,44,2387,17],[2634,45,2387,39],[2634,55,2387,40,"prop"],[2634,59,2387,39],[2634,61,2387,46,"i"],[2634,62,2387,39],[2634,64,2387,52],[2635,0,2388,12],[2635,25,2388,19,"prop"],[2635,29,2388,23],[2635,30,2388,24,"type"],[2635,34,2388,19],[2635,39,2388,33],[2635,53,2388,19],[2635,58,2388,52,"i"],[2635,59,2388,53],[2635,64,2388,58,"last"],[2635,69,2388,52],[2635,73,2388,66,"prop"],[2635,77,2388,70],[2635,78,2388,71,"type"],[2635,82,2388,66],[2635,87,2388,80],[2635,102,2388,19],[2635,107,2388,100],[2635,113,2388,104],[2635,114,2388,105,"isAssignable"],[2635,126,2388,100],[2635,127,2388,118,"prop"],[2635,131,2388,100],[2635,132,2388,12],[2636,0,2389,11],[2636,17,2387,17],[2636,18,2387,10],[2637,0,2390,9],[2639,0,2392,6],[2639,17,2392,11],[2639,33,2392,6],[2640,0,2393,8],[2640,21,2393,15],[2640,26,2393,20,"isAssignable"],[2640,38,2393,15],[2640,39,2393,33,"node"],[2640,43,2393,37],[2640,44,2393,38,"value"],[2640,49,2393,15],[2640,50,2393,8],[2642,0,2395,6],[2642,17,2395,11],[2642,32,2395,6],[2643,0,2396,8],[2643,21,2396,15],[2643,26,2396,20,"isAssignable"],[2643,38,2396,15],[2643,39,2396,33,"node"],[2643,43,2396,37],[2643,44,2396,38,"argument"],[2643,52,2396,15],[2643,53,2396,8],[2645,0,2398,6],[2645,17,2398,11],[2645,34,2398,6],[2646,0,2399,8],[2646,21,2399,15,"node"],[2646,25,2399,19],[2646,26,2399,20,"elements"],[2646,34,2399,15],[2646,35,2399,29,"every"],[2646,40,2399,15],[2646,41,2399,35],[2646,51,2399,35,"element"],[2646,58,2399,42],[2647,0,2399,42],[2647,23,2399,46],[2647,29,2399,50],[2647,30,2399,51,"isAssignable"],[2647,42,2399,46],[2647,43,2399,64,"element"],[2647,50,2399,46],[2647,51,2399,42],[2648,0,2399,42],[2648,15,2399,15],[2648,16,2399,8],[2650,0,2401,6],[2650,17,2401,11],[2650,39,2401,6],[2651,0,2402,8],[2651,21,2402,15,"node"],[2651,25,2402,19],[2651,26,2402,20,"operator"],[2651,34,2402,15],[2651,39,2402,33],[2651,42,2402,8],[2653,0,2404,6],[2653,17,2404,11],[2653,42,2404,6],[2654,0,2405,6],[2654,17,2405,11],[2654,37,2405,6],[2655,0,2406,8],[2655,21,2406,15],[2655,26,2406,20,"isAssignable"],[2655,38,2406,15],[2655,39,2406,33,"node"],[2655,43,2406,37],[2655,44,2406,38,"expression"],[2655,54,2406,15],[2655,55,2406,8],[2657,0,2408,6],[2657,17,2408,11],[2657,35,2408,6],[2658,0,2409,6],[2658,17,2409,11],[2658,43,2409,6],[2659,0,2410,8],[2659,21,2410,15],[2659,22,2410,16,"isBinding"],[2659,31,2410,8],[2661,0,2412,6],[2662,0,2413,8],[2662,21,2413,15],[2662,26,2413,8],[2663,0,2377,4],[2664,0,2415,3],[2665,0,805,22],[2666,0,805,22],[2667,0,805,22],[2667,37,2417,15,"node"],[2667,41,805,22],[2667,43,2417,21,"isBinding"],[2667,52,805,22],[2667,54,2417,32,"contextDescription"],[2667,72,805,22],[2667,74,2417,52],[2668,0,2418,4],[2668,14,2418,8,"node"],[2668,18,2418,12],[2668,19,2418,13,"type"],[2668,23,2418,8],[2668,28,2418,22],[2668,48,2418,4],[2668,50,2418,44],[2669,0,2419,6],[2669,93,2419,32],[2669,98,2419,37,"typeCastToParameter"],[2669,117,2419,32],[2669,118,2419,57,"node"],[2669,122,2419,32],[2669,123,2419,6],[2669,125,2419,64,"isBinding"],[2669,134,2419,6],[2669,136,2419,75,"contextDescription"],[2669,154,2419,6],[2670,0,2420,5],[2670,11,2418,4],[2670,17,2420,11],[2671,0,2421,6],[2671,93,2421,32,"node"],[2671,97,2421,6],[2671,99,2421,38,"isBinding"],[2671,108,2421,6],[2671,110,2421,49,"contextDescription"],[2671,128,2421,6],[2672,0,2422,5],[2673,0,2423,3],[2674,0,805,22],[2675,0,805,22],[2676,0,805,22],[2676,41,2425,19,"exprList"],[2676,49,805,22],[2676,51,2425,29,"isBinding"],[2676,60,805,22],[2676,62,2425,40,"contextDescription"],[2676,80,805,22],[2676,82,2425,60,"trailingCommaPos"],[2676,98,805,22],[2676,100,2425,78],[2677,0,2426,4],[2677,15,2426,9],[2677,19,2426,13,"i"],[2677,20,2426,14],[2677,23,2426,17],[2677,24,2426,4],[2677,26,2426,20,"i"],[2677,27,2426,21],[2677,30,2426,24,"exprList"],[2677,38,2426,32],[2677,39,2426,33,"length"],[2677,45,2426,4],[2677,47,2426,41,"i"],[2677,48,2426,42],[2677,50,2426,4],[2677,52,2426,46],[2678,0,2427,6],[2678,16,2427,12,"expr"],[2678,20,2427,16],[2678,23,2427,19,"exprList"],[2678,31,2427,27],[2678,32,2427,28,"i"],[2678,33,2427,27],[2678,34,2427,6],[2680,0,2429,6],[2680,16,2429,10,"expr"],[2680,20,2429,14],[2680,24,2429,18,"expr"],[2680,28,2429,22],[2680,29,2429,23,"type"],[2680,33,2429,18],[2680,38,2429,32],[2680,58,2429,6],[2680,60,2429,54],[2681,0,2430,8,"exprList"],[2681,14,2430,8,"exprList"],[2681,22,2430,16],[2681,23,2430,17,"i"],[2681,24,2430,16],[2681,25,2430,8],[2681,28,2430,22],[2681,33,2430,27,"typeCastToParameter"],[2681,52,2430,22],[2681,53,2430,47,"expr"],[2681,57,2430,22],[2681,58,2430,8],[2682,0,2431,7],[2683,0,2432,5],[2685,0,2434,4],[2685,95,2434,34,"exprList"],[2685,103,2434,4],[2685,105,2434,44,"isBinding"],[2685,114,2434,4],[2685,116,2434,55,"contextDescription"],[2685,134,2434,4],[2685,136,2434,75,"trailingCommaPos"],[2685,152,2434,4],[2686,0,2435,3],[2687,0,805,22],[2688,0,805,22],[2689,0,805,22],[2689,41,2437,19,"exprList"],[2689,49,805,22],[2689,51,2437,29,"isParenthesizedExpr"],[2689,70,805,22],[2689,72,2437,50],[2690,0,2438,4],[2690,15,2438,9],[2690,19,2438,13,"i"],[2690,20,2438,14],[2690,23,2438,17],[2690,24,2438,4],[2690,26,2438,20,"i"],[2690,27,2438,21],[2690,30,2438,24,"exprList"],[2690,38,2438,32],[2690,39,2438,33,"length"],[2690,45,2438,4],[2690,47,2438,41,"i"],[2690,48,2438,42],[2690,50,2438,4],[2690,52,2438,46],[2691,0,2439,6],[2691,16,2439,12,"expr"],[2691,20,2439,16],[2691,23,2439,19,"exprList"],[2691,31,2439,27],[2691,32,2439,28,"i"],[2691,33,2439,27],[2691,34,2439,6],[2693,0,2441,6],[2693,16,2441,10,"expr"],[2693,20,2441,14],[2693,24,2441,18,"expr"],[2693,28,2441,22],[2693,29,2441,23,"type"],[2693,33,2441,18],[2693,38,2441,32],[2693,58,2441,10],[2693,63,2441,57],[2693,64,2441,58,"expr"],[2693,68,2441,62],[2693,69,2441,63,"extra"],[2693,74,2441,57],[2693,78,2441,72],[2693,79,2441,73,"expr"],[2693,83,2441,77],[2693,84,2441,78,"extra"],[2693,89,2441,73],[2693,90,2441,84,"parenthesized"],[2693,103,2441,10],[2693,109,2441,103,"exprList"],[2693,117,2441,111],[2693,118,2441,112,"length"],[2693,124,2441,103],[2693,127,2441,121],[2693,128,2441,103],[2693,132,2441,126],[2693,133,2441,127,"isParenthesizedExpr"],[2693,152,2441,10],[2693,153,2441,6],[2693,155,2441,149],[2694,0,2442,8],[2694,19,2442,13,"raise"],[2694,24,2442,8],[2694,25,2442,19,"expr"],[2694,29,2442,23],[2694,30,2442,24,"typeAnnotation"],[2694,44,2442,19],[2694,45,2442,39,"start"],[2694,50,2442,8],[2694,52,2442,46],[2694,121,2442,8],[2695,0,2443,7],[2696,0,2444,5],[2698,0,2446,4],[2698,17,2446,11,"exprList"],[2698,25,2446,4],[2699,0,2447,3],[2700,0,805,22],[2701,0,805,22],[2702,0,805,22],[2702,34,2449,12,"expr"],[2702,38,805,22],[2702,40,2449,77],[2703,0,2449,77],[2703,14,2449,18,"bindingType"],[2703,25,2449,77],[2703,96,2449,32,"BIND_NONE"],[2703,105,2449,77],[2704,0,2449,77],[2704,14,2449,43,"checkClashes"],[2704,26,2449,77],[2705,0,2449,77],[2705,14,2449,57,"contextDescription"],[2705,32,2449,77],[2707,0,2450,4],[2707,14,2450,8,"expr"],[2707,18,2450,12],[2707,19,2450,13,"type"],[2707,23,2450,8],[2707,28,2450,22],[2707,48,2450,4],[2707,50,2450,44],[2708,0,2451,6],[2708,90,2451,29,"expr"],[2708,94,2451,6],[2708,96,2451,35,"bindingType"],[2708,107,2451,6],[2708,109,2451,48,"checkClashes"],[2708,121,2451,6],[2708,123,2451,62,"contextDescription"],[2708,141,2451,6],[2709,0,2452,5],[2710,0,2453,3],[2711,0,805,22],[2712,0,805,22],[2713,0,805,22],[2713,43,2455,21,"node"],[2713,47,805,22],[2713,49,2455,27],[2714,0,2456,4],[2714,14,2456,8],[2714,19,2456,13,"match"],[2714,24,2456,8],[2714,25,2456,19,"types"],[2714,30,2456,24],[2714,31,2456,25,"colon"],[2714,36,2456,8],[2714,37,2456,4],[2714,39,2456,33],[2715,0,2457,6,"node"],[2715,12,2457,6,"node"],[2715,16,2457,10],[2715,17,2457,11,"typeAnnotation"],[2715,31,2457,6],[2715,34,2457,28],[2715,39,2457,33,"flowParseTypeAnnotation"],[2715,62,2457,28],[2715,64,2457,6],[2716,0,2458,5],[2718,0,2460,4],[2718,97,2460,36,"node"],[2718,101,2460,4],[2719,0,2461,3],[2720,0,805,22],[2721,0,805,22],[2722,0,805,22],[2722,50,2463,28,"node"],[2722,54,805,22],[2722,56,2463,34],[2723,0,2464,4],[2723,14,2464,8],[2723,19,2464,13,"match"],[2723,24,2464,8],[2723,25,2464,19,"types"],[2723,30,2464,24],[2723,31,2464,25,"colon"],[2723,36,2464,8],[2723,37,2464,4],[2723,39,2464,33],[2724,0,2465,6,"node"],[2724,12,2465,6,"node"],[2724,16,2465,10],[2724,17,2465,11,"typeAnnotation"],[2724,31,2465,6],[2724,34,2465,28],[2724,39,2465,33,"flowParseTypeAnnotation"],[2724,62,2465,28],[2724,64,2465,6],[2725,0,2466,5],[2727,0,2468,4],[2727,104,2468,43,"node"],[2727,108,2468,4],[2728,0,2469,3],[2729,0,805,22],[2730,0,805,22],[2731,0,805,22],[2731,40,2471,18],[2732,0,2472,4],[2732,17,2472,11],[2732,22,2472,16,"isRelational"],[2732,34,2472,11],[2732,35,2472,29],[2732,38,2472,11],[2732,117,2472,4],[2733,0,2473,3],[2734,0,805,22],[2735,0,805,22],[2736,0,805,22],[2736,42,2475,20],[2737,0,2476,4],[2737,17,2476,11],[2737,22,2476,16,"match"],[2737,27,2476,11],[2737,28,2476,22,"types"],[2737,33,2476,27],[2737,34,2476,28,"colon"],[2737,39,2476,11],[2737,120,2476,4],[2738,0,2477,3],[2739,0,805,22],[2740,0,805,22],[2741,0,805,22],[2741,47,2479,25,"method"],[2741,53,805,22],[2741,55,2479,33],[2742,0,2480,4],[2742,17,2480,11],[2742,18,2480,12],[2742,23,2480,17,"match"],[2742,28,2480,12],[2742,29,2480,23,"types"],[2742,34,2480,28],[2742,35,2480,29,"colon"],[2742,40,2480,12],[2742,41,2480,11],[2742,129,2480,68,"method"],[2742,135,2480,11],[2742,136,2480,4],[2743,0,2481,3],[2744,0,805,22],[2745,0,805,22],[2746,0,805,22],[2746,40,2483,18,"classBody"],[2746,49,805,22],[2746,51,2483,29,"method"],[2746,57,805,22],[2746,59,2483,37,"isGenerator"],[2746,70,805,22],[2746,72,2483,50,"isAsync"],[2746,79,805,22],[2746,81,2483,59,"isConstructor"],[2746,94,805,22],[2746,96,2483,74,"allowsDirectSuper"],[2746,113,805,22],[2746,115,2483,93],[2747,0,2484,4],[2747,14,2484,8,"method"],[2747,20,2484,14],[2747,21,2484,15,"variance"],[2747,29,2484,4],[2747,31,2484,25],[2748,0,2485,6],[2748,17,2485,11,"unexpected"],[2748,27,2485,6],[2748,28,2485,22,"method"],[2748,34,2485,28],[2748,35,2485,29,"variance"],[2748,43,2485,22],[2748,44,2485,38,"start"],[2748,49,2485,6],[2749,0,2486,5],[2751,0,2488,4],[2751,17,2488,11,"method"],[2751,23,2488,17],[2751,24,2488,18,"variance"],[2751,32,2488,4],[2753,0,2490,4],[2753,14,2490,8],[2753,19,2490,13,"isRelational"],[2753,31,2490,8],[2753,32,2490,26],[2753,35,2490,8],[2753,36,2490,4],[2753,38,2490,32],[2754,0,2491,6,"method"],[2754,12,2491,6,"method"],[2754,18,2491,12],[2754,19,2491,13,"typeParameters"],[2754,33,2491,6],[2754,36,2491,30],[2754,41,2491,35,"flowParseTypeParameterDeclaration"],[2754,74,2491,30],[2754,76,2491,6],[2755,0,2492,5],[2757,0,2494,4],[2757,87,2494,26,"classBody"],[2757,96,2494,4],[2757,98,2494,37,"method"],[2757,104,2494,4],[2757,106,2494,45,"isGenerator"],[2757,117,2494,4],[2757,119,2494,58,"isAsync"],[2757,126,2494,4],[2757,128,2494,67,"isConstructor"],[2757,141,2494,4],[2757,143,2494,82,"allowsDirectSuper"],[2757,160,2494,4],[2758,0,2495,3],[2759,0,805,22],[2760,0,805,22],[2761,0,805,22],[2761,47,2497,25,"classBody"],[2761,56,805,22],[2761,58,2497,36,"method"],[2761,64,805,22],[2761,66,2497,44,"isGenerator"],[2761,77,805,22],[2761,79,2497,57,"isAsync"],[2761,86,805,22],[2761,88,2497,66],[2762,0,2498,4],[2762,14,2498,8,"method"],[2762,20,2498,14],[2762,21,2498,15,"variance"],[2762,29,2498,4],[2762,31,2498,25],[2763,0,2499,6],[2763,17,2499,11,"unexpected"],[2763,27,2499,6],[2763,28,2499,22,"method"],[2763,34,2499,28],[2763,35,2499,29,"variance"],[2763,43,2499,22],[2763,44,2499,38,"start"],[2763,49,2499,6],[2764,0,2500,5],[2766,0,2502,4],[2766,17,2502,11,"method"],[2766,23,2502,17],[2766,24,2502,18,"variance"],[2766,32,2502,4],[2768,0,2504,4],[2768,14,2504,8],[2768,19,2504,13,"isRelational"],[2768,31,2504,8],[2768,32,2504,26],[2768,35,2504,8],[2768,36,2504,4],[2768,38,2504,32],[2769,0,2505,6,"method"],[2769,12,2505,6,"method"],[2769,18,2505,12],[2769,19,2505,13,"typeParameters"],[2769,33,2505,6],[2769,36,2505,30],[2769,41,2505,35,"flowParseTypeParameterDeclaration"],[2769,74,2505,30],[2769,76,2505,6],[2770,0,2506,5],[2772,0,2508,4],[2772,94,2508,33,"classBody"],[2772,103,2508,4],[2772,105,2508,44,"method"],[2772,111,2508,4],[2772,113,2508,52,"isGenerator"],[2772,124,2508,4],[2772,126,2508,65,"isAsync"],[2772,133,2508,4],[2773,0,2509,3],[2774,0,805,22],[2775,0,805,22],[2776,0,805,22],[2776,40,2511,18,"node"],[2776,44,805,22],[2776,46,2511,24],[2777,0,2512,4],[2777,87,2512,26,"node"],[2777,91,2512,4],[2779,0,2514,4],[2779,14,2514,8,"node"],[2779,18,2514,12],[2779,19,2514,13,"superClass"],[2779,29,2514,8],[2779,33,2514,27],[2779,38,2514,32,"isRelational"],[2779,50,2514,27],[2779,51,2514,45],[2779,54,2514,27],[2779,55,2514,4],[2779,57,2514,51],[2780,0,2515,6,"node"],[2780,12,2515,6,"node"],[2780,16,2515,10],[2780,17,2515,11,"superTypeParameters"],[2780,36,2515,6],[2780,39,2515,33],[2780,44,2515,38,"flowParseTypeParameterInstantiation"],[2780,79,2515,33],[2780,81,2515,6],[2781,0,2516,5],[2783,0,2518,4],[2783,14,2518,8],[2783,19,2518,13,"isContextual"],[2783,31,2518,8],[2783,32,2518,26],[2783,44,2518,8],[2783,45,2518,4],[2783,47,2518,41],[2784,0,2519,6],[2784,17,2519,11,"next"],[2784,21,2519,6],[2785,0,2520,6],[2785,16,2520,12,"implemented"],[2785,27,2520,23],[2785,30,2520,26,"node"],[2785,34,2520,30],[2785,35,2520,31,"implements"],[2785,45,2520,26],[2785,48,2520,44],[2785,50,2520,6],[2787,0,2522,6],[2787,15,2522,9],[2788,0,2523,8],[2788,18,2523,14,"node"],[2788,24,2523,18],[2788,27,2523,21],[2788,32,2523,26,"startNode"],[2788,41,2523,21],[2788,43,2523,8],[2790,0,2524,8,"node"],[2790,14,2524,8,"node"],[2790,20,2524,12],[2790,21,2524,13,"id"],[2790,23,2524,8],[2790,26,2524,18],[2790,31,2524,23,"flowParseRestrictedIdentifier"],[2790,60,2524,18],[2790,61,2524,53],[2790,65,2524,18],[2790,66,2524,8],[2792,0,2526,8],[2792,18,2526,12],[2792,23,2526,17,"isRelational"],[2792,35,2526,12],[2792,36,2526,30],[2792,39,2526,12],[2792,40,2526,8],[2792,42,2526,36],[2793,0,2527,10,"node"],[2793,16,2527,10,"node"],[2793,22,2527,14],[2793,23,2527,15,"typeParameters"],[2793,37,2527,10],[2793,40,2527,32],[2793,45,2527,37,"flowParseTypeParameterInstantiation"],[2793,80,2527,32],[2793,82,2527,10],[2794,0,2528,9],[2794,15,2526,8],[2794,21,2528,15],[2795,0,2529,10,"node"],[2795,16,2529,10,"node"],[2795,22,2529,14],[2795,23,2529,15,"typeParameters"],[2795,37,2529,10],[2795,40,2529,32],[2795,44,2529,10],[2796,0,2530,9],[2798,0,2532,8,"implemented"],[2798,14,2532,8,"implemented"],[2798,25,2532,19],[2798,26,2532,20,"push"],[2798,30,2532,8],[2798,31,2532,25],[2798,36,2532,30,"finishNode"],[2798,46,2532,25],[2798,47,2532,41,"node"],[2798,53,2532,25],[2798,55,2532,47],[2798,72,2532,25],[2798,73,2532,8],[2799,0,2533,7],[2799,13,2522,6],[2799,21,2533,15],[2799,26,2533,20,"eat"],[2799,29,2533,15],[2799,30,2533,24,"types"],[2799,35,2533,29],[2799,36,2533,30,"comma"],[2799,41,2533,15],[2799,42,2522,6],[2800,0,2534,5],[2801,0,2535,3],[2802,0,805,22],[2803,0,805,22],[2804,0,805,22],[2804,42,2537,20,"node"],[2804,46,805,22],[2804,48,2537,26],[2805,0,2538,4],[2805,14,2538,10,"variance"],[2805,22,2538,18],[2805,25,2538,21],[2805,30,2538,26,"flowParseVariance"],[2805,47,2538,21],[2805,49,2538,4],[2807,0,2539,4],[2807,14,2539,10,"key"],[2807,17,2539,13],[2807,99,2539,40,"node"],[2807,103,2539,13],[2807,104,2539,4],[2809,0,2540,4,"node"],[2809,10,2540,4,"node"],[2809,14,2540,8],[2809,15,2540,9,"variance"],[2809,23,2540,4],[2809,26,2540,20,"variance"],[2809,34,2540,4],[2810,0,2541,4],[2810,17,2541,11,"key"],[2810,20,2541,4],[2811,0,2542,3],[2812,0,805,22],[2813,0,805,22],[2814,0,805,22],[2814,42,2544,20,"prop"],[2814,46,805,22],[2814,48,2544,26,"startPos"],[2814,56,805,22],[2814,58,2544,36,"startLoc"],[2814,66,805,22],[2814,68,2544,46,"isGenerator"],[2814,79,805,22],[2814,81,2544,59,"isAsync"],[2814,88,805,22],[2814,90,2544,68,"isPattern"],[2814,99,805,22],[2814,101,2544,79,"refShorthandDefaultPos"],[2814,123,805,22],[2814,125,2544,103,"containsEsc"],[2814,136,805,22],[2814,138,2544,116],[2815,0,2545,4],[2815,14,2545,8,"prop"],[2815,18,2545,12],[2815,19,2545,13,"variance"],[2815,27,2545,4],[2815,29,2545,23],[2816,0,2546,6],[2816,17,2546,11,"unexpected"],[2816,27,2546,6],[2816,28,2546,22,"prop"],[2816,32,2546,26],[2816,33,2546,27,"variance"],[2816,41,2546,22],[2816,42,2546,36,"start"],[2816,47,2546,6],[2817,0,2547,5],[2819,0,2549,4],[2819,17,2549,11,"prop"],[2819,21,2549,15],[2819,22,2549,16,"variance"],[2819,30,2549,4],[2820,0,2550,4],[2820,14,2550,8,"typeParameters"],[2820,28,2550,4],[2822,0,2552,4],[2822,14,2552,8],[2822,19,2552,13,"isRelational"],[2822,31,2552,8],[2822,32,2552,26],[2822,35,2552,8],[2822,36,2552,4],[2822,38,2552,32],[2823,0,2553,6,"typeParameters"],[2823,12,2553,6,"typeParameters"],[2823,26,2553,20],[2823,29,2553,23],[2823,34,2553,28,"flowParseTypeParameterDeclaration"],[2823,67,2553,23],[2823,69,2553,6],[2824,0,2554,6],[2824,16,2554,10],[2824,17,2554,11],[2824,22,2554,16,"match"],[2824,27,2554,11],[2824,28,2554,22,"types"],[2824,33,2554,27],[2824,34,2554,28,"parenL"],[2824,40,2554,11],[2824,41,2554,6],[2824,43,2554,37],[2824,48,2554,42,"unexpected"],[2824,58,2554,37],[2825,0,2555,5],[2827,0,2557,4],[2827,89,2557,28,"prop"],[2827,93,2557,4],[2827,95,2557,34,"startPos"],[2827,103,2557,4],[2827,105,2557,44,"startLoc"],[2827,113,2557,4],[2827,115,2557,54,"isGenerator"],[2827,126,2557,4],[2827,128,2557,67,"isAsync"],[2827,135,2557,4],[2827,137,2557,76,"isPattern"],[2827,146,2557,4],[2827,148,2557,87,"refShorthandDefaultPos"],[2827,170,2557,4],[2827,172,2557,111,"containsEsc"],[2827,183,2557,4],[2829,0,2559,4],[2829,14,2559,8,"typeParameters"],[2829,28,2559,4],[2829,30,2559,24],[2830,0,2560,6],[2830,13,2560,7,"prop"],[2830,17,2560,11],[2830,18,2560,12,"value"],[2830,23,2560,7],[2830,27,2560,21,"prop"],[2830,31,2560,6],[2830,33,2560,27,"typeParameters"],[2830,47,2560,6],[2830,50,2560,44,"typeParameters"],[2830,64,2560,6],[2831,0,2561,5],[2832,0,2562,3],[2833,0,805,22],[2834,0,805,22],[2835,0,805,22],[2835,53,2564,31,"param"],[2835,58,805,22],[2835,60,2564,38],[2836,0,2565,4],[2836,14,2565,8],[2836,19,2565,13,"eat"],[2836,22,2565,8],[2836,23,2565,17,"types"],[2836,28,2565,22],[2836,29,2565,23,"question"],[2836,37,2565,8],[2836,38,2565,4],[2836,40,2565,34],[2837,0,2566,6],[2837,16,2566,10,"param"],[2837,21,2566,15],[2837,22,2566,16,"type"],[2837,26,2566,10],[2837,31,2566,25],[2837,43,2566,6],[2837,45,2566,39],[2838,0,2567,8],[2838,19,2567,13,"raise"],[2838,24,2567,8],[2838,25,2567,19,"param"],[2838,30,2567,24],[2838,31,2567,25,"start"],[2838,36,2567,8],[2838,38,2567,32],[2838,118,2567,8],[2839,0,2568,7],[2841,0,2570,6,"param"],[2841,12,2570,6,"param"],[2841,17,2570,11],[2841,18,2570,12,"optional"],[2841,26,2570,6],[2841,29,2570,23],[2841,33,2570,6],[2842,0,2571,5],[2844,0,2573,4],[2844,14,2573,8],[2844,19,2573,13,"match"],[2844,24,2573,8],[2844,25,2573,19,"types"],[2844,30,2573,24],[2844,31,2573,25,"colon"],[2844,36,2573,8],[2844,37,2573,4],[2844,39,2573,33],[2845,0,2574,6,"param"],[2845,12,2574,6,"param"],[2845,17,2574,11],[2845,18,2574,12,"typeAnnotation"],[2845,32,2574,6],[2845,35,2574,29],[2845,40,2574,34,"flowParseTypeAnnotation"],[2845,63,2574,29],[2845,65,2574,6],[2846,0,2575,5],[2848,0,2577,4],[2848,15,2577,9,"resetEndLocation"],[2848,31,2577,4],[2848,32,2577,26,"param"],[2848,37,2577,4],[2849,0,2578,4],[2849,17,2578,11,"param"],[2849,22,2578,4],[2850,0,2579,3],[2851,0,805,22],[2852,0,805,22],[2853,0,805,22],[2853,42,2581,20,"startPos"],[2853,50,805,22],[2853,52,2581,30,"startLoc"],[2853,60,805,22],[2853,62,2581,40,"left"],[2853,66,805,22],[2853,68,2581,46],[2854,0,2582,4],[2854,14,2582,10,"node"],[2854,18,2582,14],[2854,100,2582,41,"startPos"],[2854,108,2582,14],[2854,110,2582,51,"startLoc"],[2854,118,2582,14],[2854,120,2582,61,"left"],[2854,124,2582,14],[2854,125,2582,4],[2856,0,2584,4],[2856,14,2584,8,"node"],[2856,18,2584,12],[2856,19,2584,13,"type"],[2856,23,2584,8],[2856,28,2584,22],[2856,47,2584,8],[2856,51,2584,45,"node"],[2856,55,2584,49],[2856,56,2584,50,"typeAnnotation"],[2856,70,2584,8],[2856,74,2584,68,"node"],[2856,78,2584,72],[2856,79,2584,73,"right"],[2856,84,2584,68],[2856,85,2584,79,"start"],[2856,90,2584,68],[2856,93,2584,87,"node"],[2856,97,2584,91],[2856,98,2584,92,"typeAnnotation"],[2856,112,2584,87],[2856,113,2584,107,"start"],[2856,118,2584,4],[2856,120,2584,114],[2857,0,2585,6],[2857,17,2585,11,"raise"],[2857,22,2585,6],[2857,23,2585,17,"node"],[2857,27,2585,21],[2857,28,2585,22,"typeAnnotation"],[2857,42,2585,17],[2857,43,2585,37,"start"],[2857,48,2585,6],[2857,50,2585,44],[2857,110,2585,104],[2857,169,2585,6],[2858,0,2586,5],[2860,0,2588,4],[2860,17,2588,11,"node"],[2860,21,2588,4],[2861,0,2589,3],[2862,0,805,22],[2863,0,805,22],[2864,0,805,22],[2864,49,2591,27,"node"],[2864,53,805,22],[2864,55,2591,33],[2865,0,2592,4],[2865,14,2592,8],[2865,15,2592,9,"hasTypeImportKind"],[2865,32,2592,26],[2865,33,2592,27,"node"],[2865,37,2592,26],[2865,38,2592,4],[2865,40,2592,34],[2866,0,2593,6],[2866,105,2593,44,"node"],[2866,109,2593,6],[2867,0,2594,5],[2869,0,2596,4],[2869,17,2596,11,"isMaybeDefaultImport"],[2869,37,2596,31],[2869,38,2596,32],[2869,43,2596,37,"state"],[2869,48,2596,31],[2869,49,2596,4],[2870,0,2597,3],[2871,0,805,22],[2872,0,805,22],[2873,0,805,22],[2873,50,2599,28,"node"],[2873,54,805,22],[2873,56,2599,34,"specifier"],[2873,65,805,22],[2873,67,2599,45,"type"],[2873,71,805,22],[2873,73,2599,51,"contextDescription"],[2873,91,805,22],[2873,93,2599,71],[2874,0,2600,4,"specifier"],[2874,10,2600,4,"specifier"],[2874,19,2600,13],[2874,20,2600,14,"local"],[2874,25,2600,4],[2874,28,2600,22,"hasTypeImportKind"],[2874,45,2600,39],[2874,46,2600,40,"node"],[2874,50,2600,39],[2874,51,2600,22],[2874,54,2600,48],[2874,59,2600,53,"flowParseRestrictedIdentifier"],[2874,88,2600,48],[2874,89,2600,83],[2874,93,2600,48],[2874,95,2600,89],[2874,99,2600,48],[2874,100,2600,22],[2874,103,2600,97],[2874,108,2600,102,"parseIdentifier"],[2874,123,2600,97],[2874,125,2600,4],[2875,0,2601,4],[2875,15,2601,9,"checkLVal"],[2875,24,2601,4],[2875,25,2601,19,"specifier"],[2875,34,2601,28],[2875,35,2601,29,"local"],[2875,40,2601,4],[2875,42,2601,36,"BIND_LEXICAL"],[2875,54,2601,4],[2875,56,2601,50,"undefined"],[2875,65,2601,4],[2875,67,2601,61,"contextDescription"],[2875,85,2601,4],[2876,0,2602,4,"node"],[2876,10,2602,4,"node"],[2876,14,2602,8],[2876,15,2602,9,"specifiers"],[2876,25,2602,4],[2876,26,2602,20,"push"],[2876,30,2602,4],[2876,31,2602,25],[2876,36,2602,30,"finishNode"],[2876,46,2602,25],[2876,47,2602,41,"specifier"],[2876,56,2602,25],[2876,58,2602,52,"type"],[2876,62,2602,25],[2876,63,2602,4],[2877,0,2603,3],[2878,0,805,22],[2879,0,805,22],[2880,0,805,22],[2880,57,2605,35,"node"],[2880,61,805,22],[2880,63,2605,41],[2881,0,2606,4,"node"],[2881,10,2606,4,"node"],[2881,14,2606,8],[2881,15,2606,9,"importKind"],[2881,25,2606,4],[2881,28,2606,22],[2881,35,2606,4],[2882,0,2607,4],[2882,14,2607,8,"kind"],[2882,18,2607,12],[2882,21,2607,15],[2882,25,2607,4],[2884,0,2609,4],[2884,14,2609,8],[2884,19,2609,13,"match"],[2884,24,2609,8],[2884,25,2609,19,"types"],[2884,30,2609,24],[2884,31,2609,25,"_typeof"],[2884,38,2609,8],[2884,39,2609,4],[2884,41,2609,35],[2885,0,2610,6,"kind"],[2885,12,2610,6,"kind"],[2885,16,2610,10],[2885,19,2610,13],[2885,27,2610,6],[2886,0,2611,5],[2886,11,2609,4],[2886,17,2611,11],[2886,21,2611,15],[2886,26,2611,20,"isContextual"],[2886,38,2611,15],[2886,39,2611,33],[2886,45,2611,15],[2886,46,2611,11],[2886,48,2611,42],[2887,0,2612,6,"kind"],[2887,12,2612,6,"kind"],[2887,16,2612,10],[2887,19,2612,13],[2887,25,2612,6],[2888,0,2613,5],[2890,0,2615,4],[2890,14,2615,8,"kind"],[2890,18,2615,4],[2890,20,2615,14],[2891,0,2616,6],[2891,16,2616,12,"lh"],[2891,18,2616,14],[2891,21,2616,17],[2891,26,2616,22,"lookahead"],[2891,35,2616,17],[2891,37,2616,6],[2893,0,2618,6],[2893,16,2618,10,"kind"],[2893,20,2618,14],[2893,25,2618,19],[2893,31,2618,10],[2893,35,2618,29,"lh"],[2893,37,2618,31],[2893,38,2618,32,"type"],[2893,42,2618,29],[2893,47,2618,41,"types"],[2893,52,2618,46],[2893,53,2618,47,"star"],[2893,57,2618,6],[2893,59,2618,53],[2894,0,2619,8],[2894,19,2619,13,"unexpected"],[2894,29,2619,8],[2894,30,2619,24,"lh"],[2894,32,2619,26],[2894,33,2619,27,"start"],[2894,38,2619,8],[2895,0,2620,7],[2897,0,2622,6],[2897,16,2622,10,"isMaybeDefaultImport"],[2897,36,2622,30],[2897,37,2622,31,"lh"],[2897,39,2622,30],[2897,40,2622,10],[2897,44,2622,38,"lh"],[2897,46,2622,40],[2897,47,2622,41,"type"],[2897,51,2622,38],[2897,56,2622,50,"types"],[2897,61,2622,55],[2897,62,2622,56,"braceL"],[2897,68,2622,10],[2897,72,2622,66,"lh"],[2897,74,2622,68],[2897,75,2622,69,"type"],[2897,79,2622,66],[2897,84,2622,78,"types"],[2897,89,2622,83],[2897,90,2622,84,"star"],[2897,94,2622,6],[2897,96,2622,90],[2898,0,2623,8],[2898,19,2623,13,"next"],[2898,23,2623,8],[2899,0,2624,8,"node"],[2899,14,2624,8,"node"],[2899,18,2624,12],[2899,19,2624,13,"importKind"],[2899,29,2624,8],[2899,32,2624,26,"kind"],[2899,36,2624,8],[2900,0,2625,7],[2901,0,2626,5],[2903,0,2628,4],[2903,111,2628,50,"node"],[2903,115,2628,4],[2904,0,2629,3],[2905,0,805,22],[2906,0,805,22],[2907,0,805,22],[2907,45,2631,23,"node"],[2907,49,805,22],[2907,51,2631,29],[2908,0,2632,4],[2908,14,2632,10,"specifier"],[2908,23,2632,19],[2908,26,2632,22],[2908,31,2632,27,"startNode"],[2908,40,2632,22],[2908,42,2632,4],[2909,0,2633,4],[2909,14,2633,10,"firstIdentLoc"],[2909,27,2633,23],[2909,30,2633,26],[2909,35,2633,31,"state"],[2909,40,2633,26],[2909,41,2633,37,"start"],[2909,46,2633,4],[2910,0,2634,4],[2910,14,2634,10,"firstIdent"],[2910,24,2634,20],[2910,27,2634,23],[2910,32,2634,28,"parseIdentifier"],[2910,47,2634,23],[2910,48,2634,44],[2910,52,2634,23],[2910,53,2634,4],[2911,0,2635,4],[2911,14,2635,8,"specifierTypeKind"],[2911,31,2635,25],[2911,34,2635,28],[2911,38,2635,4],[2913,0,2637,4],[2913,14,2637,8,"firstIdent"],[2913,24,2637,18],[2913,25,2637,19,"name"],[2913,29,2637,8],[2913,34,2637,28],[2913,40,2637,4],[2913,42,2637,36],[2914,0,2638,6,"specifierTypeKind"],[2914,12,2638,6,"specifierTypeKind"],[2914,29,2638,23],[2914,32,2638,26],[2914,38,2638,6],[2915,0,2639,5],[2915,11,2637,4],[2915,17,2639,11],[2915,21,2639,15,"firstIdent"],[2915,31,2639,25],[2915,32,2639,26,"name"],[2915,36,2639,15],[2915,41,2639,35],[2915,49,2639,11],[2915,51,2639,45],[2916,0,2640,6,"specifierTypeKind"],[2916,12,2640,6,"specifierTypeKind"],[2916,29,2640,23],[2916,32,2640,26],[2916,40,2640,6],[2917,0,2641,5],[2919,0,2643,4],[2919,14,2643,8,"isBinding"],[2919,23,2643,17],[2919,26,2643,20],[2919,31,2643,4],[2921,0,2645,4],[2921,14,2645,8],[2921,19,2645,13,"isContextual"],[2921,31,2645,8],[2921,32,2645,26],[2921,36,2645,8],[2921,41,2645,35],[2921,42,2645,36],[2921,47,2645,41,"isLookaheadContextual"],[2921,68,2645,36],[2921,69,2645,63],[2921,73,2645,36],[2921,74,2645,4],[2921,76,2645,70],[2922,0,2646,6],[2922,16,2646,12,"as_ident"],[2922,24,2646,20],[2922,27,2646,23],[2922,32,2646,28,"parseIdentifier"],[2922,47,2646,23],[2922,48,2646,44],[2922,52,2646,23],[2922,53,2646,6],[2924,0,2648,6],[2924,16,2648,10,"specifierTypeKind"],[2924,33,2648,27],[2924,38,2648,32],[2924,42,2648,10],[2924,46,2648,40],[2924,47,2648,41],[2924,52,2648,46,"match"],[2924,57,2648,41],[2924,58,2648,52,"types"],[2924,63,2648,57],[2924,64,2648,58,"name"],[2924,68,2648,41],[2924,69,2648,10],[2924,73,2648,67],[2924,74,2648,68],[2924,79,2648,73,"state"],[2924,84,2648,68],[2924,85,2648,79,"type"],[2924,89,2648,68],[2924,90,2648,84,"keyword"],[2924,97,2648,6],[2924,99,2648,93],[2925,0,2649,8,"specifier"],[2925,14,2649,8,"specifier"],[2925,23,2649,17],[2925,24,2649,18,"imported"],[2925,32,2649,8],[2925,35,2649,29,"as_ident"],[2925,43,2649,8],[2926,0,2650,8,"specifier"],[2926,14,2650,8,"specifier"],[2926,23,2650,17],[2926,24,2650,18,"importKind"],[2926,34,2650,8],[2926,37,2650,31,"specifierTypeKind"],[2926,54,2650,8],[2927,0,2651,8,"specifier"],[2927,14,2651,8,"specifier"],[2927,23,2651,17],[2927,24,2651,18,"local"],[2927,29,2651,8],[2927,32,2651,26,"as_ident"],[2927,40,2651,34],[2927,41,2651,35,"__clone"],[2927,48,2651,26],[2927,50,2651,8],[2928,0,2652,7],[2928,13,2648,6],[2928,19,2652,13],[2929,0,2653,8,"specifier"],[2929,14,2653,8,"specifier"],[2929,23,2653,17],[2929,24,2653,18,"imported"],[2929,32,2653,8],[2929,35,2653,29,"firstIdent"],[2929,45,2653,8],[2930,0,2654,8,"specifier"],[2930,14,2654,8,"specifier"],[2930,23,2654,17],[2930,24,2654,18,"importKind"],[2930,34,2654,8],[2930,37,2654,31],[2930,41,2654,8],[2931,0,2655,8,"specifier"],[2931,14,2655,8,"specifier"],[2931,23,2655,17],[2931,24,2655,18,"local"],[2931,29,2655,8],[2931,32,2655,26],[2931,37,2655,31,"parseIdentifier"],[2931,52,2655,26],[2931,54,2655,8],[2932,0,2656,7],[2933,0,2657,5],[2933,11,2645,4],[2933,17,2657,11],[2933,21,2657,15,"specifierTypeKind"],[2933,38,2657,32],[2933,43,2657,37],[2933,47,2657,15],[2933,52,2657,46],[2933,57,2657,51,"match"],[2933,62,2657,46],[2933,63,2657,57,"types"],[2933,68,2657,62],[2933,69,2657,63,"name"],[2933,73,2657,46],[2933,78,2657,72],[2933,83,2657,77,"state"],[2933,88,2657,72],[2933,89,2657,83,"type"],[2933,93,2657,72],[2933,94,2657,88,"keyword"],[2933,101,2657,15],[2933,102,2657,11],[2933,104,2657,98],[2934,0,2658,6,"specifier"],[2934,12,2658,6,"specifier"],[2934,21,2658,15],[2934,22,2658,16,"imported"],[2934,30,2658,6],[2934,33,2658,27],[2934,38,2658,32,"parseIdentifier"],[2934,53,2658,27],[2934,54,2658,48],[2934,58,2658,27],[2934,59,2658,6],[2935,0,2659,6,"specifier"],[2935,12,2659,6,"specifier"],[2935,21,2659,15],[2935,22,2659,16,"importKind"],[2935,32,2659,6],[2935,35,2659,29,"specifierTypeKind"],[2935,52,2659,6],[2937,0,2661,6],[2937,16,2661,10],[2937,21,2661,15,"eatContextual"],[2937,34,2661,10],[2937,35,2661,29],[2937,39,2661,10],[2937,40,2661,6],[2937,42,2661,36],[2938,0,2662,8,"specifier"],[2938,14,2662,8,"specifier"],[2938,23,2662,17],[2938,24,2662,18,"local"],[2938,29,2662,8],[2938,32,2662,26],[2938,37,2662,31,"parseIdentifier"],[2938,52,2662,26],[2938,54,2662,8],[2939,0,2663,7],[2939,13,2661,6],[2939,19,2663,13],[2940,0,2664,8,"isBinding"],[2940,14,2664,8,"isBinding"],[2940,23,2664,17],[2940,26,2664,20],[2940,30,2664,8],[2941,0,2665,8,"specifier"],[2941,14,2665,8,"specifier"],[2941,23,2665,17],[2941,24,2665,18,"local"],[2941,29,2665,8],[2941,32,2665,26,"specifier"],[2941,41,2665,35],[2941,42,2665,36,"imported"],[2941,50,2665,26],[2941,51,2665,45,"__clone"],[2941,58,2665,26],[2941,60,2665,8],[2942,0,2666,7],[2943,0,2667,5],[2943,11,2657,11],[2943,17,2667,11],[2944,0,2668,6,"isBinding"],[2944,12,2668,6,"isBinding"],[2944,21,2668,15],[2944,24,2668,18],[2944,28,2668,6],[2945,0,2669,6,"specifier"],[2945,12,2669,6,"specifier"],[2945,21,2669,15],[2945,22,2669,16,"imported"],[2945,30,2669,6],[2945,33,2669,27,"firstIdent"],[2945,43,2669,6],[2946,0,2670,6,"specifier"],[2946,12,2670,6,"specifier"],[2946,21,2670,15],[2946,22,2670,16,"importKind"],[2946,32,2670,6],[2946,35,2670,29],[2946,39,2670,6],[2947,0,2671,6,"specifier"],[2947,12,2671,6,"specifier"],[2947,21,2671,15],[2947,22,2671,16,"local"],[2947,27,2671,6],[2947,30,2671,24,"specifier"],[2947,39,2671,33],[2947,40,2671,34,"imported"],[2947,48,2671,24],[2947,49,2671,43,"__clone"],[2947,56,2671,24],[2947,58,2671,6],[2948,0,2672,5],[2950,0,2674,4],[2950,14,2674,10,"nodeIsTypeImport"],[2950,30,2674,26],[2950,33,2674,29,"hasTypeImportKind"],[2950,50,2674,46],[2950,51,2674,47,"node"],[2950,55,2674,46],[2950,56,2674,4],[2951,0,2675,4],[2951,14,2675,10,"specifierIsTypeImport"],[2951,35,2675,31],[2951,38,2675,34,"hasTypeImportKind"],[2951,55,2675,51],[2951,56,2675,52,"specifier"],[2951,65,2675,51],[2951,66,2675,4],[2953,0,2677,4],[2953,14,2677,8,"nodeIsTypeImport"],[2953,30,2677,24],[2953,34,2677,28,"specifierIsTypeImport"],[2953,55,2677,4],[2953,57,2677,51],[2954,0,2678,6],[2954,17,2678,11,"raise"],[2954,22,2678,6],[2954,23,2678,17,"firstIdentLoc"],[2954,36,2678,6],[2954,38,2678,32],[2954,121,2678,115],[2954,210,2678,6],[2955,0,2679,5],[2957,0,2681,4],[2957,14,2681,8,"nodeIsTypeImport"],[2957,30,2681,24],[2957,34,2681,28,"specifierIsTypeImport"],[2957,55,2681,4],[2957,57,2681,51],[2958,0,2682,6],[2958,17,2682,11,"checkReservedType"],[2958,34,2682,6],[2958,35,2682,29,"specifier"],[2958,44,2682,38],[2958,45,2682,39,"local"],[2958,50,2682,29],[2958,51,2682,45,"name"],[2958,55,2682,6],[2958,57,2682,51,"specifier"],[2958,66,2682,60],[2958,67,2682,61,"local"],[2958,72,2682,51],[2958,73,2682,67,"start"],[2958,78,2682,6],[2958,80,2682,74],[2958,84,2682,6],[2959,0,2683,5],[2961,0,2685,4],[2961,14,2685,8,"isBinding"],[2961,23,2685,17],[2961,27,2685,21],[2961,28,2685,22,"nodeIsTypeImport"],[2961,44,2685,8],[2961,48,2685,42],[2961,49,2685,43,"specifierIsTypeImport"],[2961,70,2685,4],[2961,72,2685,66],[2962,0,2686,6],[2962,17,2686,11,"checkReservedWord"],[2962,34,2686,6],[2962,35,2686,29,"specifier"],[2962,44,2686,38],[2962,45,2686,39,"local"],[2962,50,2686,29],[2962,51,2686,45,"name"],[2962,55,2686,6],[2962,57,2686,51,"specifier"],[2962,66,2686,60],[2962,67,2686,61,"start"],[2962,72,2686,6],[2962,74,2686,68],[2962,78,2686,6],[2962,80,2686,74],[2962,84,2686,6],[2963,0,2687,5],[2965,0,2689,4],[2965,15,2689,9,"checkLVal"],[2965,24,2689,4],[2965,25,2689,19,"specifier"],[2965,34,2689,28],[2965,35,2689,29,"local"],[2965,40,2689,4],[2965,42,2689,36,"BIND_LEXICAL"],[2965,54,2689,4],[2965,56,2689,50,"undefined"],[2965,65,2689,4],[2965,67,2689,61],[2965,85,2689,4],[2966,0,2690,4,"node"],[2966,10,2690,4,"node"],[2966,14,2690,8],[2966,15,2690,9,"specifiers"],[2966,25,2690,4],[2966,26,2690,20,"push"],[2966,30,2690,4],[2966,31,2690,25],[2966,36,2690,30,"finishNode"],[2966,46,2690,25],[2966,47,2690,41,"specifier"],[2966,56,2690,25],[2966,58,2690,52],[2966,75,2690,25],[2966,76,2690,4],[2967,0,2691,3],[2968,0,805,22],[2969,0,805,22],[2970,0,805,22],[2970,44,2693,22,"node"],[2970,48,805,22],[2970,50,2693,28,"allowModifiers"],[2970,64,805,22],[2970,66,2693,44],[2971,0,2694,4],[2971,14,2694,10,"kind"],[2971,18,2694,14],[2971,21,2694,17,"node"],[2971,25,2694,21],[2971,26,2694,22,"kind"],[2971,30,2694,4],[2973,0,2696,4],[2973,14,2696,8,"kind"],[2973,18,2696,12],[2973,23,2696,17],[2973,28,2696,8],[2973,32,2696,26,"kind"],[2973,36,2696,30],[2973,41,2696,35],[2973,46,2696,8],[2973,50,2696,44],[2973,55,2696,49,"isRelational"],[2973,67,2696,44],[2973,68,2696,62],[2973,71,2696,44],[2973,72,2696,4],[2973,74,2696,68],[2974,0,2697,6,"node"],[2974,12,2697,6,"node"],[2974,16,2697,10],[2974,17,2697,11,"typeParameters"],[2974,31,2697,6],[2974,34,2697,28],[2974,39,2697,33,"flowParseTypeParameterDeclaration"],[2974,72,2697,28],[2974,74,2697,6],[2975,0,2698,5],[2977,0,2700,4],[2977,91,2700,30,"node"],[2977,95,2700,4],[2977,97,2700,36,"allowModifiers"],[2977,111,2700,4],[2978,0,2701,3],[2979,0,805,22],[2980,0,805,22],[2981,0,805,22],[2981,35,2703,13,"decl"],[2981,39,805,22],[2981,41,2703,19,"kind"],[2981,45,805,22],[2981,47,2703,25],[2982,0,2704,4],[2982,82,2704,21,"decl"],[2982,86,2704,4],[2982,88,2704,27,"kind"],[2982,92,2704,4],[2984,0,2706,4],[2984,14,2706,8],[2984,19,2706,13,"match"],[2984,24,2706,8],[2984,25,2706,19,"types"],[2984,30,2706,24],[2984,31,2706,25,"colon"],[2984,36,2706,8],[2984,37,2706,4],[2984,39,2706,33],[2985,0,2707,6,"decl"],[2985,12,2707,6,"decl"],[2985,16,2707,10],[2985,17,2707,11,"id"],[2985,19,2707,6],[2985,20,2707,14,"typeAnnotation"],[2985,34,2707,6],[2985,37,2707,31],[2985,42,2707,36,"flowParseTypeAnnotation"],[2985,65,2707,31],[2985,67,2707,6],[2986,0,2708,6],[2986,17,2708,11,"resetEndLocation"],[2986,33,2708,6],[2986,34,2708,28,"decl"],[2986,38,2708,32],[2986,39,2708,33,"id"],[2986,41,2708,6],[2987,0,2709,5],[2988,0,2710,3],[2989,0,805,22],[2990,0,805,22],[2991,0,805,22],[2991,58,2712,36,"node"],[2991,62,805,22],[2991,64,2712,42,"call"],[2991,68,805,22],[2991,70,2712,48],[2992,0,2713,4],[2992,14,2713,8],[2992,19,2713,13,"match"],[2992,24,2713,8],[2992,25,2713,19,"types"],[2992,30,2713,24],[2992,31,2713,25,"colon"],[2992,36,2713,8],[2992,37,2713,4],[2992,39,2713,33],[2993,0,2714,6],[2993,16,2714,12,"oldNoAnonFunctionType"],[2993,37,2714,33],[2993,40,2714,36],[2993,45,2714,41,"state"],[2993,50,2714,36],[2993,51,2714,47,"noAnonFunctionType"],[2993,69,2714,6],[2994,0,2715,6],[2994,17,2715,11,"state"],[2994,22,2715,6],[2994,23,2715,17,"noAnonFunctionType"],[2994,41,2715,6],[2994,44,2715,38],[2994,48,2715,6],[2995,0,2716,6,"node"],[2995,12,2716,6,"node"],[2995,16,2716,10],[2995,17,2716,11,"returnType"],[2995,27,2716,6],[2995,30,2716,24],[2995,35,2716,29,"flowParseTypeAnnotation"],[2995,58,2716,24],[2995,60,2716,6],[2996,0,2717,6],[2996,17,2717,11,"state"],[2996,22,2717,6],[2996,23,2717,17,"noAnonFunctionType"],[2996,41,2717,6],[2996,44,2717,38,"oldNoAnonFunctionType"],[2996,65,2717,6],[2997,0,2718,5],[2999,0,2720,4],[2999,112,2720,51,"node"],[2999,116,2720,4],[2999,118,2720,57,"call"],[2999,122,2720,4],[3000,0,2721,3],[3001,0,805,22],[3002,0,805,22],[3003,0,805,22],[3003,48,2723,26],[3004,0,2724,4],[3004,17,2724,11],[3004,22,2724,16,"match"],[3004,27,2724,11],[3004,28,2724,22,"types"],[3004,33,2724,27],[3004,34,2724,28,"colon"],[3004,39,2724,11],[3004,126,2724,4],[3005,0,2725,3],[3006,0,805,22],[3007,0,805,22],[3008,0,805,22],[3008,41,2727,19,"noIn"],[3008,45,805,22],[3008,47,2727,25,"refShorthandDefaultPos"],[3008,69,805,22],[3008,71,2727,49,"afterLeftParse"],[3008,85,805,22],[3008,87,2727,65,"refNeedsArrowPos"],[3008,103,805,22],[3008,105,2727,83],[3009,0,2727,83],[3011,0,2728,4],[3011,14,2728,8,"state"],[3011,19,2728,13],[3011,22,2728,16],[3011,26,2728,4],[3012,0,2729,4],[3012,14,2729,8,"jsx"],[3012,17,2729,4],[3014,0,2731,4],[3014,14,2731,8],[3014,19,2731,13,"hasPlugin"],[3014,28,2731,8],[3014,29,2731,23],[3014,34,2731,8],[3014,40,2731,34],[3014,45,2731,39,"match"],[3014,50,2731,34],[3014,51,2731,45,"types"],[3014,56,2731,50],[3014,57,2731,51,"jsxTagStart"],[3014,68,2731,34],[3014,73,2731,67],[3014,78,2731,72,"isRelational"],[3014,90,2731,67],[3014,91,2731,85],[3014,94,2731,67],[3014,95,2731,8],[3014,96,2731,4],[3014,98,2731,92],[3015,0,2732,6,"state"],[3015,12,2732,6,"state"],[3015,17,2732,11],[3015,20,2732,14],[3015,25,2732,19,"state"],[3015,30,2732,14],[3015,31,2732,25,"clone"],[3015,36,2732,14],[3015,38,2732,6],[3016,0,2733,6,"jsx"],[3016,12,2733,6,"jsx"],[3016,15,2733,9],[3016,18,2733,12],[3016,23,2733,17,"tryParse"],[3016,31,2733,12],[3016,32,2733,26],[3017,0,2733,26],[3017,103,2733,55,"noIn"],[3017,107,2733,26],[3017,109,2733,61,"refShorthandDefaultPos"],[3017,131,2733,26],[3017,133,2733,85,"afterLeftParse"],[3017,147,2733,26],[3017,149,2733,101,"refNeedsArrowPos"],[3017,165,2733,26],[3018,0,2733,26],[3018,13,2733,12],[3018,15,2733,120,"state"],[3018,20,2733,12],[3018,21,2733,6],[3019,0,2734,6],[3019,16,2734,10],[3019,17,2734,11,"jsx"],[3019,20,2734,14],[3019,21,2734,15,"error"],[3019,26,2734,6],[3019,28,2734,22],[3019,35,2734,29,"jsx"],[3019,38,2734,32],[3019,39,2734,33,"node"],[3019,43,2734,22],[3020,0,2731,92],[3020,16,2736,8,"context"],[3020,23,2731,92],[3020,26,2737,10],[3020,31,2737,15,"state"],[3020,36,2731,92],[3020,37,2736,8,"context"],[3020,44,2731,92],[3022,0,2739,6],[3022,16,2739,10,"context"],[3022,23,2739,17],[3022,24,2739,18,"context"],[3022,31,2739,25],[3022,32,2739,26,"length"],[3022,38,2739,18],[3022,41,2739,35],[3022,42,2739,17],[3022,43,2739,10],[3022,48,2739,42,"types$1"],[3022,55,2739,49],[3022,56,2739,50,"j_oTag"],[3022,62,2739,6],[3022,64,2739,58],[3023,0,2740,8,"context"],[3023,14,2740,8,"context"],[3023,21,2740,15],[3023,22,2740,16,"length"],[3023,28,2740,8],[3023,32,2740,26],[3023,33,2740,8],[3024,0,2741,7],[3024,13,2739,6],[3024,19,2741,13],[3024,23,2741,17,"context"],[3024,30,2741,24],[3024,31,2741,25,"context"],[3024,38,2741,32],[3024,39,2741,33,"length"],[3024,45,2741,25],[3024,48,2741,42],[3024,49,2741,24],[3024,50,2741,17],[3024,55,2741,49,"types$1"],[3024,62,2741,56],[3024,63,2741,57,"j_expr"],[3024,69,2741,13],[3024,71,2741,65],[3025,0,2742,8,"context"],[3025,14,2742,8,"context"],[3025,21,2742,15],[3025,22,2742,16,"length"],[3025,28,2742,8],[3025,32,2742,26],[3025,33,2742,8],[3026,0,2743,7],[3027,0,2744,5],[3029,0,2746,4],[3029,14,2746,8,"jsx"],[3029,17,2746,11],[3029,21,2746,15,"jsx"],[3029,24,2746,18],[3029,25,2746,19,"error"],[3029,30,2746,8],[3029,34,2746,28],[3029,39,2746,33,"isRelational"],[3029,51,2746,28],[3029,52,2746,46],[3029,55,2746,28],[3029,56,2746,4],[3029,58,2746,52],[3030,0,2747,6,"state"],[3030,12,2747,6,"state"],[3030,17,2747,11],[3030,20,2747,14,"state"],[3030,25,2747,19],[3030,29,2747,23],[3030,34,2747,28,"state"],[3030,39,2747,23],[3030,40,2747,34,"clone"],[3030,45,2747,23],[3030,47,2747,6],[3031,0,2748,6],[3031,16,2748,10,"typeParameters"],[3031,30,2748,6],[3032,0,2749,6],[3032,16,2749,12,"arrow"],[3032,21,2749,17],[3032,24,2749,20],[3032,29,2749,25,"tryParse"],[3032,37,2749,20],[3032,38,2749,34],[3032,50,2749,40],[3033,0,2750,8,"typeParameters"],[3033,14,2750,8,"typeParameters"],[3033,28,2750,22],[3033,31,2750,25],[3033,37,2750,29],[3033,38,2750,30,"flowParseTypeParameterDeclaration"],[3033,71,2750,25],[3033,73,2750,8],[3035,0,2751,8],[3035,18,2751,14,"arrowExpression"],[3035,33,2751,29],[3035,36,2751,32],[3035,42,2751,36],[3035,43,2751,37,"forwardNoArrowParamsConversionAt"],[3035,75,2751,32],[3035,76,2751,70,"typeParameters"],[3035,90,2751,32],[3035,92,2751,86],[3036,0,2751,86],[3036,105,2751,115,"noIn"],[3036,109,2751,86],[3036,111,2751,121,"refShorthandDefaultPos"],[3036,133,2751,86],[3036,135,2751,145,"afterLeftParse"],[3036,149,2751,86],[3036,151,2751,161,"refNeedsArrowPos"],[3036,167,2751,86],[3037,0,2751,86],[3037,15,2751,32],[3037,16,2751,8],[3039,0,2752,8,"arrowExpression"],[3039,14,2752,8,"arrowExpression"],[3039,29,2752,23],[3039,30,2752,24,"typeParameters"],[3039,44,2752,8],[3039,47,2752,41,"typeParameters"],[3039,61,2752,8],[3041,0,2753,8],[3041,14,2753,8],[3041,20,2753,12],[3041,21,2753,13,"resetStartLocationFromNode"],[3041,47,2753,8],[3041,48,2753,40,"arrowExpression"],[3041,63,2753,8],[3041,65,2753,57,"typeParameters"],[3041,79,2753,8],[3043,0,2754,8],[3043,21,2754,15,"arrowExpression"],[3043,36,2754,8],[3044,0,2755,7],[3044,13,2749,20],[3044,15,2755,9,"state"],[3044,20,2749,20],[3044,21,2749,6],[3045,0,2756,6],[3045,16,2756,12,"arrowExpression"],[3045,31,2756,27],[3045,34,2756,30,"arrow"],[3045,39,2756,35],[3045,40,2756,36,"node"],[3045,44,2756,30],[3045,48,2756,44,"arrow"],[3045,53,2756,49],[3045,54,2756,50,"node"],[3045,58,2756,44],[3045,59,2756,55,"type"],[3045,63,2756,44],[3045,68,2756,64],[3045,93,2756,30],[3045,96,2756,92,"arrow"],[3045,101,2756,97],[3045,102,2756,98,"node"],[3045,106,2756,30],[3045,109,2756,105],[3045,113,2756,6],[3046,0,2757,6],[3046,16,2757,10],[3046,17,2757,11,"arrow"],[3046,22,2757,16],[3046,23,2757,17,"error"],[3046,28,2757,10],[3046,32,2757,26,"arrowExpression"],[3046,47,2757,6],[3046,49,2757,43],[3046,56,2757,50,"arrowExpression"],[3046,71,2757,43],[3048,0,2759,6],[3048,16,2759,10,"jsx"],[3048,19,2759,13],[3048,23,2759,17,"jsx"],[3048,26,2759,20],[3048,27,2759,21,"node"],[3048,31,2759,6],[3048,33,2759,27],[3049,0,2760,8],[3049,19,2760,13,"state"],[3049,24,2760,8],[3049,27,2760,21,"jsx"],[3049,30,2760,24],[3049,31,2760,25,"failState"],[3049,40,2760,8],[3050,0,2761,8],[3050,21,2761,15,"jsx"],[3050,24,2761,18],[3050,25,2761,19,"node"],[3050,29,2761,8],[3051,0,2762,7],[3053,0,2764,6],[3053,16,2764,10,"arrowExpression"],[3053,31,2764,6],[3053,33,2764,27],[3054,0,2765,8],[3054,19,2765,13,"state"],[3054,24,2765,8],[3054,27,2765,21,"arrow"],[3054,32,2765,26],[3054,33,2765,27,"failState"],[3054,42,2765,8],[3055,0,2766,8],[3055,21,2766,15,"arrowExpression"],[3055,36,2766,8],[3056,0,2767,7],[3058,0,2769,6],[3058,16,2769,10,"jsx"],[3058,19,2769,13],[3058,23,2769,17,"jsx"],[3058,26,2769,20],[3058,27,2769,21,"thrown"],[3058,33,2769,6],[3058,35,2769,29],[3058,41,2769,35,"jsx"],[3058,44,2769,38],[3058,45,2769,39,"error"],[3058,50,2769,29],[3059,0,2770,6],[3059,16,2770,10,"arrow"],[3059,21,2770,15],[3059,22,2770,16,"thrown"],[3059,28,2770,6],[3059,30,2770,24],[3059,36,2770,30,"arrow"],[3059,41,2770,35],[3059,42,2770,36,"error"],[3059,47,2770,24],[3060,0,2771,6],[3060,18,2771,12],[3060,23,2771,17,"raise"],[3060,28,2771,12],[3060,29,2771,23,"typeParameters"],[3060,43,2771,37],[3060,44,2771,38,"start"],[3060,49,2771,12],[3060,51,2771,45],[3060,117,2771,12],[3060,118,2771,6],[3061,0,2772,5],[3063,0,2774,4],[3063,95,2774,34,"noIn"],[3063,99,2774,4],[3063,101,2774,40,"refShorthandDefaultPos"],[3063,123,2774,4],[3063,125,2774,64,"afterLeftParse"],[3063,139,2774,4],[3063,141,2774,80,"refNeedsArrowPos"],[3063,157,2774,4],[3064,0,2775,3],[3065,0,805,22],[3066,0,805,22],[3067,0,805,22],[3067,35,2777,13,"node"],[3067,39,805,22],[3067,41,2777,19],[3068,0,2777,19],[3070,0,2778,4],[3070,14,2778,8],[3070,19,2778,13,"match"],[3070,24,2778,8],[3070,25,2778,19,"types"],[3070,30,2778,24],[3070,31,2778,25,"colon"],[3070,36,2778,8],[3070,37,2778,4],[3070,39,2778,33],[3071,0,2779,6],[3071,16,2779,12,"result"],[3071,22,2779,18],[3071,25,2779,21],[3071,30,2779,26,"tryParse"],[3071,38,2779,21],[3071,39,2779,35],[3071,51,2779,41],[3072,0,2780,8],[3072,18,2780,14,"oldNoAnonFunctionType"],[3072,39,2780,35],[3072,42,2780,38],[3072,49,2780,42],[3072,50,2780,43,"state"],[3072,55,2780,38],[3072,56,2780,49,"noAnonFunctionType"],[3072,74,2780,8],[3073,0,2781,8],[3073,14,2781,8],[3073,21,2781,12],[3073,22,2781,13,"state"],[3073,27,2781,8],[3073,28,2781,19,"noAnonFunctionType"],[3073,46,2781,8],[3073,49,2781,40],[3073,53,2781,8],[3075,0,2782,8],[3075,18,2782,14,"typeNode"],[3075,26,2782,22],[3075,29,2782,25],[3075,36,2782,29],[3075,37,2782,30,"startNode"],[3075,46,2782,25],[3075,48,2782,8],[3077,0,2779,41],[3077,42,2783,52],[3077,49,2783,56],[3077,50,2783,57,"flowParseTypeAndPredicateInitialiser"],[3077,86,2783,52],[3077,88,2779,41],[3079,0,2779,41],[3081,0,2783,9,"typeNode"],[3081,14,2783,9,"typeNode"],[3081,22,2783,17],[3081,23,2783,18,"typeAnnotation"],[3081,37,2779,41],[3082,0,2783,34,"node"],[3082,14,2783,34,"node"],[3082,18,2783,38],[3082,19,2783,39,"predicate"],[3082,28,2779,41],[3083,0,2784,8],[3083,14,2784,8],[3083,21,2784,12],[3083,22,2784,13,"state"],[3083,27,2784,8],[3083,28,2784,19,"noAnonFunctionType"],[3083,46,2784,8],[3083,49,2784,40,"oldNoAnonFunctionType"],[3083,70,2784,8],[3084,0,2785,8],[3084,18,2785,12],[3084,25,2785,16],[3084,26,2785,17,"canInsertSemicolon"],[3084,44,2785,12],[3084,46,2785,8],[3084,48,2785,39],[3084,55,2785,43],[3084,56,2785,44,"unexpected"],[3084,66,2785,39],[3085,0,2786,8],[3085,18,2786,12],[3085,19,2786,13],[3085,26,2786,17],[3085,27,2786,18,"match"],[3085,32,2786,13],[3085,33,2786,24,"types"],[3085,38,2786,29],[3085,39,2786,30,"arrow"],[3085,44,2786,13],[3085,45,2786,8],[3085,47,2786,38],[3085,54,2786,42],[3085,55,2786,43,"unexpected"],[3085,65,2786,38],[3086,0,2787,8],[3086,21,2787,15,"typeNode"],[3086,29,2787,8],[3087,0,2788,7],[3087,13,2779,21],[3087,14,2779,6],[3088,0,2789,6],[3088,16,2789,10,"result"],[3088,22,2789,16],[3088,23,2789,17,"thrown"],[3088,29,2789,6],[3088,31,2789,25],[3088,38,2789,32],[3088,42,2789,25],[3089,0,2790,6],[3089,16,2790,10,"result"],[3089,22,2790,16],[3089,23,2790,17,"error"],[3089,28,2790,6],[3089,30,2790,24],[3089,35,2790,29,"state"],[3089,40,2790,24],[3089,43,2790,37,"result"],[3089,49,2790,43],[3089,50,2790,44,"failState"],[3089,59,2790,24],[3090,0,2791,6,"node"],[3090,12,2791,6,"node"],[3090,16,2791,10],[3090,17,2791,11,"returnType"],[3090,27,2791,6],[3090,30,2791,24,"result"],[3090,36,2791,30],[3090,37,2791,31,"node"],[3090,41,2791,24],[3090,42,2791,36,"typeAnnotation"],[3090,56,2791,24],[3090,59,2791,53],[3090,64,2791,58,"finishNode"],[3090,74,2791,53],[3090,75,2791,69,"result"],[3090,81,2791,75],[3090,82,2791,76,"node"],[3090,86,2791,53],[3090,88,2791,82],[3090,104,2791,53],[3090,105,2791,24],[3090,108,2791,102],[3090,112,2791,6],[3091,0,2792,5],[3093,0,2794,4],[3093,89,2794,28,"node"],[3093,93,2794,4],[3094,0,2795,3],[3095,0,805,22],[3096,0,805,22],[3097,0,805,22],[3097,43,2797,21],[3098,0,2798,4],[3098,17,2798,11],[3098,22,2798,16,"match"],[3098,27,2798,11],[3098,28,2798,22,"types"],[3098,33,2798,27],[3098,34,2798,28,"colon"],[3098,39,2798,11],[3098,121,2798,4],[3099,0,2799,3],[3100,0,805,22],[3101,0,805,22],[3102,0,805,22],[3102,51,2801,29,"node"],[3102,55,805,22],[3102,57,2801,35,"params"],[3102,63,805,22],[3102,65,2801,43],[3103,0,2802,4],[3103,14,2802,8],[3103,19,2802,13,"state"],[3103,24,2802,8],[3103,25,2802,19,"noArrowParamsConversionAt"],[3103,50,2802,8],[3103,51,2802,45,"indexOf"],[3103,58,2802,8],[3103,59,2802,53,"node"],[3103,63,2802,57],[3103,64,2802,58,"start"],[3103,69,2802,8],[3103,75,2802,69],[3103,76,2802,70],[3103,77,2802,4],[3103,79,2802,73],[3104,0,2803,6,"node"],[3104,12,2803,6,"node"],[3104,16,2803,10],[3104,17,2803,11,"params"],[3104,23,2803,6],[3104,26,2803,20,"params"],[3104,32,2803,6],[3105,0,2804,5],[3105,11,2802,4],[3105,17,2804,11],[3106,0,2805,6],[3106,100,2805,39,"node"],[3106,104,2805,6],[3106,106,2805,45,"params"],[3106,112,2805,6],[3107,0,2806,5],[3108,0,2807,3],[3109,0,805,22],[3110,0,805,22],[3111,0,805,22],[3111,36,2809,14,"node"],[3111,40,805,22],[3111,42,2809,20,"allowDuplicates"],[3111,57,805,22],[3111,59,2809,37,"isArrowFunction"],[3111,74,805,22],[3111,76,2809,54],[3112,0,2810,4],[3112,14,2810,8,"isArrowFunction"],[3112,29,2810,23],[3112,33,2810,27],[3112,38,2810,32,"state"],[3112,43,2810,27],[3112,44,2810,38,"noArrowParamsConversionAt"],[3112,69,2810,27],[3112,70,2810,64,"indexOf"],[3112,77,2810,27],[3112,78,2810,72,"node"],[3112,82,2810,76],[3112,83,2810,77,"start"],[3112,88,2810,27],[3112,94,2810,88],[3112,95,2810,89],[3112,96,2810,4],[3112,98,2810,92],[3113,0,2811,6],[3114,0,2812,5],[3116,0,2814,4],[3116,91,2814,32,"arguments"],[3116,100,2814,4],[3117,0,2815,3],[3118,0,805,22],[3119,0,805,22],[3120,0,805,22],[3120,59,2817,37,"canBeArrow"],[3120,69,805,22],[3120,71,2817,49],[3121,0,2818,4],[3121,113,2818,52,"canBeArrow"],[3121,123,2818,62],[3121,127,2818,66],[3121,132,2818,71,"state"],[3121,137,2818,66],[3121,138,2818,77,"noArrowAt"],[3121,147,2818,66],[3121,148,2818,87,"indexOf"],[3121,155,2818,66],[3121,156,2818,95],[3121,161,2818,100,"state"],[3121,166,2818,95],[3121,167,2818,106,"start"],[3121,172,2818,66],[3121,178,2818,117],[3121,179,2818,118],[3121,180,2818,4],[3122,0,2819,3],[3123,0,805,22],[3124,0,805,22],[3125,0,805,22],[3125,40,2821,18,"base"],[3125,44,805,22],[3125,46,2821,24,"startPos"],[3125,54,805,22],[3125,56,2821,34,"startLoc"],[3125,64,805,22],[3125,66,2821,44,"noCalls"],[3125,73,805,22],[3125,75,2821,53],[3126,0,2821,53],[3128,0,2822,4],[3128,14,2822,8,"base"],[3128,18,2822,12],[3128,19,2822,13,"type"],[3128,23,2822,8],[3128,28,2822,22],[3128,40,2822,8],[3128,44,2822,38,"base"],[3128,48,2822,42],[3128,49,2822,43,"name"],[3128,53,2822,38],[3128,58,2822,52],[3128,65,2822,8],[3128,69,2822,63],[3128,74,2822,68,"state"],[3128,79,2822,63],[3128,80,2822,74,"noArrowAt"],[3128,89,2822,63],[3128,90,2822,84,"indexOf"],[3128,97,2822,63],[3128,98,2822,92,"startPos"],[3128,106,2822,63],[3128,112,2822,106],[3128,113,2822,107],[3128,114,2822,4],[3128,116,2822,110],[3129,0,2823,6],[3129,17,2823,11,"next"],[3129,21,2823,6],[3130,0,2824,6],[3130,16,2824,12,"node"],[3130,20,2824,16],[3130,23,2824,19],[3130,28,2824,24,"startNodeAt"],[3130,39,2824,19],[3130,40,2824,36,"startPos"],[3130,48,2824,19],[3130,50,2824,46,"startLoc"],[3130,58,2824,19],[3130,59,2824,6],[3131,0,2825,6,"node"],[3131,12,2825,6,"node"],[3131,16,2825,10],[3131,17,2825,11,"callee"],[3131,23,2825,6],[3131,26,2825,20,"base"],[3131,30,2825,6],[3132,0,2826,6,"node"],[3132,12,2826,6,"node"],[3132,16,2826,10],[3132,17,2826,11,"arguments"],[3132,26,2826,6],[3132,29,2826,23],[3132,34,2826,28,"parseCallExpressionArguments"],[3132,62,2826,23],[3132,63,2826,57,"types"],[3132,68,2826,62],[3132,69,2826,63,"parenR"],[3132,75,2826,23],[3132,77,2826,71],[3132,82,2826,23],[3132,83,2826,6],[3133,0,2827,6,"base"],[3133,12,2827,6,"base"],[3133,16,2827,10],[3133,19,2827,13],[3133,24,2827,18,"finishNode"],[3133,34,2827,13],[3133,35,2827,29,"node"],[3133,39,2827,13],[3133,41,2827,35],[3133,57,2827,13],[3133,58,2827,6],[3134,0,2828,5],[3134,11,2822,4],[3134,17,2828,11],[3134,21,2828,15,"base"],[3134,25,2828,19],[3134,26,2828,20,"type"],[3134,30,2828,15],[3134,35,2828,29],[3134,47,2828,15],[3134,51,2828,45,"base"],[3134,55,2828,49],[3134,56,2828,50,"name"],[3134,60,2828,45],[3134,65,2828,59],[3134,72,2828,15],[3134,76,2828,70],[3134,81,2828,75,"isRelational"],[3134,93,2828,70],[3134,94,2828,88],[3134,97,2828,70],[3134,98,2828,11],[3134,100,2828,94],[3135,0,2829,6],[3135,16,2829,12,"state"],[3135,21,2829,17],[3135,24,2829,20],[3135,29,2829,25,"state"],[3135,34,2829,20],[3135,35,2829,31,"clone"],[3135,40,2829,20],[3135,42,2829,6],[3136,0,2830,6],[3136,16,2830,12,"arrow"],[3136,21,2830,17],[3136,24,2830,20],[3136,29,2830,25,"tryParse"],[3136,37,2830,20],[3136,38,2830,34],[3136,48,2830,34,"abort"],[3136,53,2830,39],[3137,0,2830,39],[3137,21,2830,43],[3137,28,2830,47],[3137,29,2830,48,"parseAsyncArrowWithTypeParameters"],[3137,62,2830,43],[3137,63,2830,82,"startPos"],[3137,71,2830,43],[3137,73,2830,92,"startLoc"],[3137,81,2830,43],[3137,86,2830,105,"abort"],[3137,91,2830,110],[3137,93,2830,39],[3138,0,2830,39],[3138,13,2830,20],[3138,15,2830,114,"state"],[3138,20,2830,20],[3138,21,2830,6],[3139,0,2831,6],[3139,16,2831,10],[3139,17,2831,11,"arrow"],[3139,22,2831,16],[3139,23,2831,17,"error"],[3139,28,2831,10],[3139,32,2831,26],[3139,33,2831,27,"arrow"],[3139,38,2831,32],[3139,39,2831,33,"aborted"],[3139,46,2831,6],[3139,48,2831,42],[3139,55,2831,49,"arrow"],[3139,60,2831,54],[3139,61,2831,55,"node"],[3139,65,2831,42],[3140,0,2832,6],[3140,16,2832,12,"result"],[3140,22,2832,18],[3140,25,2832,21],[3140,30,2832,26,"tryParse"],[3140,38,2832,21],[3140,39,2832,35],[3141,0,2832,35],[3141,104,2832,63,"base"],[3141,108,2832,35],[3141,110,2832,69,"startPos"],[3141,118,2832,35],[3141,120,2832,79,"startLoc"],[3141,128,2832,35],[3141,130,2832,89,"noCalls"],[3141,137,2832,35],[3142,0,2832,35],[3142,13,2832,21],[3142,15,2832,99,"state"],[3142,20,2832,21],[3142,21,2832,6],[3143,0,2833,6],[3143,16,2833,10,"result"],[3143,22,2833,16],[3143,23,2833,17,"node"],[3143,27,2833,10],[3143,31,2833,25],[3143,32,2833,26,"result"],[3143,38,2833,32],[3143,39,2833,33,"error"],[3143,44,2833,6],[3143,46,2833,40],[3143,53,2833,47,"result"],[3143,59,2833,53],[3143,60,2833,54,"node"],[3143,64,2833,40],[3145,0,2835,6],[3145,16,2835,10,"arrow"],[3145,21,2835,15],[3145,22,2835,16,"node"],[3145,26,2835,6],[3145,28,2835,22],[3146,0,2836,8],[3146,19,2836,13,"state"],[3146,24,2836,8],[3146,27,2836,21,"arrow"],[3146,32,2836,26],[3146,33,2836,27,"failState"],[3146,42,2836,8],[3147,0,2837,8],[3147,21,2837,15,"arrow"],[3147,26,2837,20],[3147,27,2837,21,"node"],[3147,31,2837,8],[3148,0,2838,7],[3150,0,2840,6],[3150,16,2840,10,"result"],[3150,22,2840,16],[3150,23,2840,17,"node"],[3150,27,2840,6],[3150,29,2840,23],[3151,0,2841,8],[3151,19,2841,13,"state"],[3151,24,2841,8],[3151,27,2841,21,"result"],[3151,33,2841,27],[3151,34,2841,28,"failState"],[3151,43,2841,8],[3152,0,2842,8],[3152,21,2842,15,"result"],[3152,27,2842,21],[3152,28,2842,22,"node"],[3152,32,2842,8],[3153,0,2843,7],[3155,0,2845,6],[3155,18,2845,12,"arrow"],[3155,23,2845,17],[3155,24,2845,18,"error"],[3155,29,2845,12],[3155,33,2845,27,"result"],[3155,39,2845,33],[3155,40,2845,34,"error"],[3155,45,2845,6],[3156,0,2846,5],[3158,0,2848,4],[3158,94,2848,33,"base"],[3158,98,2848,4],[3158,100,2848,39,"startPos"],[3158,108,2848,4],[3158,110,2848,49,"startLoc"],[3158,118,2848,4],[3158,120,2848,59,"noCalls"],[3158,127,2848,4],[3159,0,2849,3],[3160,0,805,22],[3161,0,805,22],[3162,0,805,22],[3162,39,2851,17,"base"],[3162,43,805,22],[3162,45,2851,23,"startPos"],[3162,53,805,22],[3162,55,2851,33,"startLoc"],[3162,63,805,22],[3162,65,2851,43,"noCalls"],[3162,72,805,22],[3162,74,2851,52,"subscriptState"],[3162,88,805,22],[3162,90,2851,68],[3163,0,2851,68],[3165,0,2852,4],[3165,14,2852,8],[3165,19,2852,13,"match"],[3165,24,2852,8],[3165,25,2852,19,"types"],[3165,30,2852,24],[3165,31,2852,25,"questionDot"],[3165,42,2852,8],[3165,47,2852,41],[3165,52,2852,46,"isLookaheadRelational"],[3165,73,2852,41],[3165,74,2852,68],[3165,77,2852,41],[3165,78,2852,4],[3165,80,2852,74],[3166,0,2853,6],[3166,17,2853,11,"expectPlugin"],[3166,29,2853,6],[3166,30,2853,24],[3166,48,2853,6],[3167,0,2854,6,"subscriptState"],[3167,12,2854,6,"subscriptState"],[3167,26,2854,20],[3167,27,2854,21,"optionalChainMember"],[3167,46,2854,6],[3167,49,2854,43],[3167,53,2854,6],[3169,0,2856,6],[3169,16,2856,10,"noCalls"],[3169,23,2856,6],[3169,25,2856,19],[3170,0,2857,8,"subscriptState"],[3170,14,2857,8,"subscriptState"],[3170,28,2857,22],[3170,29,2857,23,"stop"],[3170,33,2857,8],[3170,36,2857,30],[3170,40,2857,8],[3171,0,2858,8],[3171,21,2858,15,"base"],[3171,25,2858,8],[3172,0,2859,7],[3174,0,2861,6],[3174,17,2861,11,"next"],[3174,21,2861,6],[3175,0,2862,6],[3175,16,2862,12,"node"],[3175,20,2862,16],[3175,23,2862,19],[3175,28,2862,24,"startNodeAt"],[3175,39,2862,19],[3175,40,2862,36,"startPos"],[3175,48,2862,19],[3175,50,2862,46,"startLoc"],[3175,58,2862,19],[3175,59,2862,6],[3176,0,2863,6,"node"],[3176,12,2863,6,"node"],[3176,16,2863,10],[3176,17,2863,11,"callee"],[3176,23,2863,6],[3176,26,2863,20,"base"],[3176,30,2863,6],[3177,0,2864,6,"node"],[3177,12,2864,6,"node"],[3177,16,2864,10],[3177,17,2864,11,"typeArguments"],[3177,30,2864,6],[3177,33,2864,27],[3177,38,2864,32,"flowParseTypeParameterInstantiation"],[3177,73,2864,27],[3177,75,2864,6],[3178,0,2865,6],[3178,17,2865,11,"expect"],[3178,23,2865,6],[3178,24,2865,18,"types"],[3178,29,2865,23],[3178,30,2865,24,"parenL"],[3178,36,2865,6],[3179,0,2866,6,"node"],[3179,12,2866,6,"node"],[3179,16,2866,10],[3179,17,2866,11,"arguments"],[3179,26,2866,6],[3179,29,2866,23],[3179,34,2866,28,"parseCallExpressionArguments"],[3179,62,2866,23],[3179,63,2866,57,"types"],[3179,68,2866,62],[3179,69,2866,63,"parenR"],[3179,75,2866,23],[3179,77,2866,71],[3179,82,2866,23],[3179,83,2866,6],[3180,0,2867,6,"node"],[3180,12,2867,6,"node"],[3180,16,2867,10],[3180,17,2867,11,"optional"],[3180,25,2867,6],[3180,28,2867,22],[3180,32,2867,6],[3181,0,2868,6],[3181,19,2868,13],[3181,24,2868,18,"finishCallExpression"],[3181,44,2868,13],[3181,45,2868,39,"node"],[3181,49,2868,13],[3181,51,2868,45],[3181,55,2868,13],[3181,56,2868,6],[3182,0,2869,5],[3182,11,2852,4],[3182,17,2869,11],[3182,21,2869,15],[3182,22,2869,16,"noCalls"],[3182,29,2869,15],[3182,33,2869,27],[3182,38,2869,32,"shouldParseTypes"],[3182,54,2869,27],[3182,56,2869,15],[3182,60,2869,54],[3182,65,2869,59,"isRelational"],[3182,77,2869,54],[3182,78,2869,72],[3182,81,2869,54],[3182,82,2869,11],[3182,84,2869,78],[3183,0,2870,6],[3183,16,2870,12,"node"],[3183,22,2870,16],[3183,25,2870,19],[3183,30,2870,24,"startNodeAt"],[3183,41,2870,19],[3183,42,2870,36,"startPos"],[3183,50,2870,19],[3183,52,2870,46,"startLoc"],[3183,60,2870,19],[3183,61,2870,6],[3185,0,2871,6,"node"],[3185,12,2871,6,"node"],[3185,18,2871,10],[3185,19,2871,11,"callee"],[3185,25,2871,6],[3185,28,2871,20,"base"],[3185,32,2871,6],[3186,0,2872,6],[3186,16,2872,12,"result"],[3186,22,2872,18],[3186,25,2872,21],[3186,30,2872,26,"tryParse"],[3186,38,2872,21],[3186,39,2872,35],[3186,51,2872,41],[3187,0,2873,8,"node"],[3187,14,2873,8,"node"],[3187,20,2873,12],[3187,21,2873,13,"typeArguments"],[3187,34,2873,8],[3187,37,2873,29],[3187,44,2873,33],[3187,45,2873,34,"flowParseTypeParameterInstantiationCallOrNew"],[3187,89,2873,29],[3187,91,2873,8],[3189,0,2874,8],[3189,14,2874,8],[3189,21,2874,12],[3189,22,2874,13,"expect"],[3189,28,2874,8],[3189,29,2874,20,"types"],[3189,34,2874,25],[3189,35,2874,26,"parenL"],[3189,41,2874,8],[3191,0,2875,8,"node"],[3191,14,2875,8,"node"],[3191,20,2875,12],[3191,21,2875,13,"arguments"],[3191,30,2875,8],[3191,33,2875,25],[3191,40,2875,29],[3191,41,2875,30,"parseCallExpressionArguments"],[3191,69,2875,25],[3191,70,2875,59,"types"],[3191,75,2875,64],[3191,76,2875,65,"parenR"],[3191,82,2875,25],[3191,84,2875,73],[3191,89,2875,25],[3191,90,2875,8],[3192,0,2876,8],[3192,18,2876,12,"subscriptState"],[3192,32,2876,26],[3192,33,2876,27,"optionalChainMember"],[3192,52,2876,8],[3192,54,2876,48,"node"],[3192,60,2876,52],[3192,61,2876,53,"optional"],[3192,69,2876,48],[3192,72,2876,64],[3192,77,2876,48],[3193,0,2877,8],[3193,21,2877,15],[3193,28,2877,19],[3193,29,2877,20,"finishCallExpression"],[3193,49,2877,15],[3193,50,2877,41,"node"],[3193,56,2877,15],[3193,58,2877,47,"subscriptState"],[3193,72,2877,61],[3193,73,2877,62,"optionalChainMember"],[3193,92,2877,15],[3193,93,2877,8],[3194,0,2878,7],[3194,13,2872,21],[3194,14,2872,6],[3196,0,2880,6],[3196,16,2880,10,"result"],[3196,22,2880,16],[3196,23,2880,17,"node"],[3196,27,2880,6],[3196,29,2880,23],[3197,0,2881,8],[3197,18,2881,12,"result"],[3197,24,2881,18],[3197,25,2881,19,"error"],[3197,30,2881,8],[3197,32,2881,26],[3197,37,2881,31,"state"],[3197,42,2881,26],[3197,45,2881,39,"result"],[3197,51,2881,45],[3197,52,2881,46,"failState"],[3197,61,2881,26],[3198,0,2882,8],[3198,21,2882,15,"result"],[3198,27,2882,21],[3198,28,2882,22,"node"],[3198,32,2882,8],[3199,0,2883,7],[3200,0,2884,5],[3202,0,2886,4],[3202,93,2886,32,"base"],[3202,97,2886,4],[3202,99,2886,38,"startPos"],[3202,107,2886,4],[3202,109,2886,48,"startLoc"],[3202,117,2886,4],[3202,119,2886,58,"noCalls"],[3202,126,2886,4],[3202,128,2886,67,"subscriptState"],[3202,142,2886,4],[3203,0,2887,3],[3204,0,805,22],[3205,0,805,22],[3206,0,805,22],[3206,42,2889,20,"node"],[3206,46,805,22],[3206,48,2889,26],[3207,0,2889,26],[3209,0,2890,4],[3209,14,2890,8,"targs"],[3209,19,2890,13],[3209,22,2890,16],[3209,26,2890,4],[3211,0,2892,4],[3211,14,2892,8],[3211,19,2892,13,"shouldParseTypes"],[3211,35,2892,8],[3211,41,2892,35],[3211,46,2892,40,"isRelational"],[3211,58,2892,35],[3211,59,2892,53],[3211,62,2892,35],[3211,63,2892,4],[3211,65,2892,59],[3212,0,2893,6,"targs"],[3212,12,2893,6,"targs"],[3212,17,2893,11],[3212,20,2893,14],[3212,25,2893,19,"tryParse"],[3212,33,2893,14],[3212,34,2893,28],[3213,0,2893,28],[3213,21,2893,34],[3213,28,2893,38],[3213,29,2893,39,"flowParseTypeParameterInstantiationCallOrNew"],[3213,73,2893,34],[3213,75,2893,28],[3214,0,2893,28],[3214,13,2893,14],[3214,15,2893,87,"node"],[3214,19,2893,6],[3215,0,2894,5],[3217,0,2896,4,"node"],[3217,10,2896,4,"node"],[3217,14,2896,8],[3217,15,2896,9,"typeArguments"],[3217,28,2896,4],[3217,31,2896,25,"targs"],[3217,36,2896,4],[3219,0,2897,4],[3219,89,2897,28,"node"],[3219,93,2897,4],[3220,0,2898,3],[3221,0,805,22],[3222,0,805,22],[3223,0,805,22],[3223,58,2900,36,"startPos"],[3223,66,805,22],[3223,68,2900,46,"startLoc"],[3223,76,805,22],[3223,78,2900,56],[3224,0,2901,4],[3224,14,2901,10,"node"],[3224,18,2901,14],[3224,21,2901,17],[3224,26,2901,22,"startNodeAt"],[3224,37,2901,17],[3224,38,2901,34,"startPos"],[3224,46,2901,17],[3224,48,2901,44,"startLoc"],[3224,56,2901,17],[3224,57,2901,4],[3225,0,2902,4],[3225,15,2902,9,"parseFunctionParams"],[3225,34,2902,4],[3225,35,2902,29,"node"],[3225,39,2902,4],[3226,0,2903,4],[3226,14,2903,8],[3226,15,2903,9],[3226,20,2903,14,"parseArrow"],[3226,30,2903,9],[3226,31,2903,25,"node"],[3226,35,2903,9],[3226,36,2903,4],[3226,38,2903,32],[3227,0,2904,4],[3227,17,2904,11],[3227,22,2904,16,"parseArrowExpression"],[3227,42,2904,11],[3227,43,2904,37,"node"],[3227,47,2904,11],[3227,49,2904,43,"undefined"],[3227,58,2904,11],[3227,60,2904,54],[3227,64,2904,11],[3227,65,2904,4],[3228,0,2905,3],[3229,0,805,22],[3230,0,805,22],[3231,0,805,22],[3231,46,2907,24,"code"],[3231,50,805,22],[3231,52,2907,30],[3232,0,2908,4],[3232,14,2908,10,"next"],[3232,18,2908,14],[3232,21,2908,17],[3232,26,2908,22,"input"],[3232,31,2908,17],[3232,32,2908,28,"charCodeAt"],[3232,42,2908,17],[3232,43,2908,39],[3232,48,2908,44,"state"],[3232,53,2908,39],[3232,54,2908,50,"pos"],[3232,57,2908,39],[3232,60,2908,56],[3232,61,2908,17],[3232,62,2908,4],[3234,0,2910,4],[3234,14,2910,8,"code"],[3234,18,2910,12],[3234,23,2910,17],[3234,25,2910,8],[3234,29,2910,23,"next"],[3234,33,2910,27],[3234,38,2910,32],[3234,40,2910,8],[3234,44,2910,38],[3234,49,2910,43,"state"],[3234,54,2910,38],[3234,55,2910,49,"hasFlowComment"],[3234,69,2910,4],[3234,71,2910,65],[3235,0,2911,6],[3235,17,2911,11,"state"],[3235,22,2911,6],[3235,23,2911,17,"hasFlowComment"],[3235,37,2911,6],[3235,40,2911,34],[3235,45,2911,6],[3236,0,2912,6],[3236,17,2912,11,"state"],[3236,22,2912,6],[3236,23,2912,17,"pos"],[3236,26,2912,6],[3236,30,2912,24],[3236,31,2912,6],[3237,0,2913,6],[3237,17,2913,11,"nextToken"],[3237,26,2913,6],[3238,0,2914,6],[3239,0,2915,5],[3241,0,2917,4],[3241,93,2917,32,"code"],[3241,97,2917,4],[3242,0,2918,3],[3243,0,805,22],[3244,0,805,22],[3245,0,805,22],[3245,43,2920,21,"code"],[3245,47,805,22],[3245,49,2920,27],[3246,0,2921,4],[3246,14,2921,10,"next"],[3246,18,2921,14],[3246,21,2921,17],[3246,26,2921,22,"input"],[3246,31,2921,17],[3246,32,2921,28,"charCodeAt"],[3246,42,2921,17],[3246,43,2921,39],[3246,48,2921,44,"state"],[3246,53,2921,39],[3246,54,2921,50,"pos"],[3246,57,2921,39],[3246,60,2921,56],[3246,61,2921,17],[3246,62,2921,4],[3248,0,2923,4],[3248,14,2923,8,"code"],[3248,18,2923,12],[3248,23,2923,17],[3248,26,2923,8],[3248,30,2923,24,"next"],[3248,34,2923,28],[3248,39,2923,33],[3248,42,2923,4],[3248,44,2923,38],[3249,0,2924,6],[3249,17,2924,11,"finishOp"],[3249,25,2924,6],[3249,26,2924,20,"types"],[3249,31,2924,25],[3249,32,2924,26,"braceBarR"],[3249,41,2924,6],[3249,43,2924,37],[3249,44,2924,6],[3250,0,2925,6],[3251,0,2926,5],[3253,0,2928,4],[3253,90,2928,29,"code"],[3253,94,2928,4],[3254,0,2929,3],[3255,0,805,22],[3256,0,805,22],[3257,0,805,22],[3257,38,2931,16,"file"],[3257,42,805,22],[3257,44,2931,22,"program"],[3257,51,805,22],[3257,53,2931,31],[3258,0,2932,4],[3258,14,2932,10,"fileNode"],[3258,22,2932,18],[3258,100,2932,41,"file"],[3258,104,2932,18],[3258,106,2932,47,"program"],[3258,113,2932,18],[3258,114,2932,4],[3260,0,2934,4],[3260,14,2934,8],[3260,19,2934,13,"state"],[3260,24,2934,8],[3260,25,2934,19,"hasFlowComment"],[3260,39,2934,4],[3260,41,2934,35],[3261,0,2935,6],[3261,17,2935,11,"raise"],[3261,22,2935,6],[3261,23,2935,17],[3261,28,2935,22,"state"],[3261,33,2935,17],[3261,34,2935,28,"pos"],[3261,37,2935,6],[3261,39,2935,33],[3261,66,2935,6],[3262,0,2936,5],[3264,0,2938,4],[3264,17,2938,11,"fileNode"],[3264,25,2938,4],[3265,0,2939,3],[3266,0,805,22],[3267,0,805,22],[3268,0,805,22],[3268,43,2941,21],[3269,0,2942,4],[3269,14,2942,8],[3269,19,2942,13,"hasPlugin"],[3269,28,2942,8],[3269,29,2942,23],[3269,43,2942,8],[3269,48,2942,42],[3269,53,2942,47,"skipFlowComment"],[3269,68,2942,42],[3269,70,2942,4],[3269,72,2942,66],[3270,0,2943,6],[3270,16,2943,10],[3270,21,2943,15,"state"],[3270,26,2943,10],[3270,27,2943,21,"hasFlowComment"],[3270,41,2943,6],[3270,43,2943,37],[3271,0,2944,8],[3271,19,2944,13,"unexpected"],[3271,29,2944,8],[3271,30,2944,24],[3271,34,2944,8],[3271,36,2944,30],[3271,92,2944,8],[3272,0,2945,7],[3274,0,2947,6],[3274,17,2947,11,"hasFlowCommentCompletion"],[3274,41,2947,6],[3275,0,2948,6],[3275,17,2948,11,"state"],[3275,22,2948,6],[3275,23,2948,17,"pos"],[3275,26,2948,6],[3275,30,2948,24],[3275,35,2948,29,"skipFlowComment"],[3275,50,2948,24],[3275,52,2948,6],[3276,0,2949,6],[3276,17,2949,11,"state"],[3276,22,2949,6],[3276,23,2949,17,"hasFlowComment"],[3276,37,2949,6],[3276,40,2949,34],[3276,44,2949,6],[3277,0,2950,6],[3278,0,2951,5],[3280,0,2953,4],[3280,14,2953,8],[3280,19,2953,13,"state"],[3280,24,2953,8],[3280,25,2953,19,"hasFlowComment"],[3280,39,2953,4],[3280,41,2953,35],[3281,0,2954,6],[3281,16,2954,12,"end"],[3281,19,2954,15],[3281,22,2954,18],[3281,27,2954,23,"input"],[3281,32,2954,18],[3281,33,2954,29,"indexOf"],[3281,40,2954,18],[3281,41,2954,37],[3281,46,2954,18],[3281,48,2954,44],[3281,53,2954,49,"state"],[3281,58,2954,44],[3281,59,2954,55,"pos"],[3281,62,2954,44],[3281,66,2954,62],[3281,67,2954,18],[3281,68,2954,6],[3283,0,2956,6],[3283,16,2956,10,"end"],[3283,19,2956,13],[3283,24,2956,18],[3283,25,2956,19],[3283,26,2956,6],[3283,28,2956,22],[3284,0,2957,8],[3284,20,2957,14],[3284,25,2957,19,"raise"],[3284,30,2957,14],[3284,31,2957,25],[3284,36,2957,30,"state"],[3284,41,2957,25],[3284,42,2957,36,"pos"],[3284,45,2957,25],[3284,48,2957,42],[3284,49,2957,14],[3284,51,2957,45],[3284,73,2957,14],[3284,74,2957,8],[3285,0,2958,7],[3287,0,2960,6],[3287,17,2960,11,"state"],[3287,22,2960,6],[3287,23,2960,17,"pos"],[3287,26,2960,6],[3287,29,2960,23,"end"],[3287,32,2960,26],[3287,35,2960,29],[3287,36,2960,6],[3288,0,2961,6],[3289,0,2962,5],[3291,0,2964,4],[3292,0,2965,3],[3293,0,805,22],[3294,0,805,22],[3295,0,805,22],[3295,42,2967,20],[3296,0,2967,20],[3296,14,2969,6,"pos"],[3296,17,2967,20],[3296,20,2970,8],[3296,25,2970,13,"state"],[3296,30,2967,20],[3296,31,2969,6,"pos"],[3296,34,2967,20],[3297,0,2971,4],[3297,14,2971,8,"shiftToFirstNonWhiteSpace"],[3297,39,2971,33],[3297,42,2971,36],[3297,43,2971,4],[3299,0,2973,4],[3299,17,2973,11],[3299,18,2973,12],[3299,20,2973,11],[3299,22,2973,16],[3299,23,2973,11],[3299,25,2973,19,"includes"],[3299,33,2973,11],[3299,34,2973,28],[3299,39,2973,33,"input"],[3299,44,2973,28],[3299,45,2973,39,"charCodeAt"],[3299,55,2973,28],[3299,56,2973,50,"pos"],[3299,59,2973,53],[3299,62,2973,56,"shiftToFirstNonWhiteSpace"],[3299,87,2973,28],[3299,88,2973,11],[3299,89,2973,4],[3299,91,2973,85],[3300,0,2974,6,"shiftToFirstNonWhiteSpace"],[3300,12,2974,6,"shiftToFirstNonWhiteSpace"],[3300,37,2974,31],[3301,0,2975,5],[3303,0,2977,4],[3303,14,2977,10,"ch2"],[3303,17,2977,13],[3303,20,2977,16],[3303,25,2977,21,"input"],[3303,30,2977,16],[3303,31,2977,27,"charCodeAt"],[3303,41,2977,16],[3303,42,2977,38,"shiftToFirstNonWhiteSpace"],[3303,67,2977,63],[3303,70,2977,66,"pos"],[3303,73,2977,16],[3303,74,2977,4],[3304,0,2978,4],[3304,14,2978,10,"ch3"],[3304,17,2978,13],[3304,20,2978,16],[3304,25,2978,21,"input"],[3304,30,2978,16],[3304,31,2978,27,"charCodeAt"],[3304,41,2978,16],[3304,42,2978,38,"shiftToFirstNonWhiteSpace"],[3304,67,2978,63],[3304,70,2978,66,"pos"],[3304,73,2978,38],[3304,76,2978,72],[3304,77,2978,16],[3304,78,2978,4],[3306,0,2980,4],[3306,14,2980,8,"ch2"],[3306,17,2980,11],[3306,22,2980,16],[3306,24,2980,8],[3306,28,2980,22,"ch3"],[3306,31,2980,25],[3306,36,2980,30],[3306,38,2980,4],[3306,40,2980,34],[3307,0,2981,6],[3307,19,2981,13,"shiftToFirstNonWhiteSpace"],[3307,44,2981,38],[3307,47,2981,41],[3307,48,2981,6],[3308,0,2982,5],[3310,0,2984,4],[3310,14,2984,8],[3310,19,2984,13,"input"],[3310,24,2984,8],[3310,25,2984,19,"slice"],[3310,30,2984,8],[3310,31,2984,25,"shiftToFirstNonWhiteSpace"],[3310,56,2984,50],[3310,59,2984,53,"pos"],[3310,62,2984,8],[3310,64,2984,58,"shiftToFirstNonWhiteSpace"],[3310,89,2984,83],[3310,92,2984,86,"pos"],[3310,95,2984,58],[3310,98,2984,92],[3310,100,2984,8],[3310,106,2984,100],[3310,120,2984,4],[3310,122,2984,116],[3311,0,2985,6],[3311,19,2985,13,"shiftToFirstNonWhiteSpace"],[3311,44,2985,38],[3311,47,2985,41],[3311,49,2985,6],[3312,0,2986,5],[3314,0,2988,4],[3314,14,2988,8,"ch2"],[3314,17,2988,11],[3314,22,2988,16],[3314,24,2988,8],[3314,28,2988,22,"ch3"],[3314,31,2988,25],[3314,36,2988,30],[3314,38,2988,4],[3314,40,2988,34],[3315,0,2989,6],[3315,19,2989,13,"shiftToFirstNonWhiteSpace"],[3315,44,2989,6],[3316,0,2990,5],[3318,0,2992,4],[3318,17,2992,11],[3318,22,2992,4],[3319,0,2993,3],[3320,0,805,22],[3321,0,805,22],[3322,0,805,22],[3322,51,2995,29],[3323,0,2996,4],[3323,14,2996,10,"end"],[3323,17,2996,13],[3323,20,2996,16],[3323,25,2996,21,"input"],[3323,30,2996,16],[3323,31,2996,27,"indexOf"],[3323,38,2996,16],[3323,39,2996,35],[3323,43,2996,16],[3323,45,2996,41],[3323,50,2996,46,"state"],[3323,55,2996,41],[3323,56,2996,52,"pos"],[3323,59,2996,16],[3323,60,2996,4],[3325,0,2998,4],[3325,14,2998,8,"end"],[3325,17,2998,11],[3325,22,2998,16],[3325,23,2998,17],[3325,24,2998,4],[3325,26,2998,20],[3326,0,2999,6],[3326,18,2999,12],[3326,23,2999,17,"raise"],[3326,28,2999,12],[3326,29,2999,23],[3326,34,2999,28,"state"],[3326,39,2999,23],[3326,40,2999,34,"pos"],[3326,43,2999,12],[3326,45,2999,39],[3326,67,2999,12],[3326,68,2999,6],[3327,0,3000,5],[3328,0,3001,3],[3329,0,805,22],[3330,0,805,22],[3331,0,805,22],[3331,65,3003,43,"pos"],[3331,68,805,22],[3331,77,3006,5],[3332,0,3006,5],[3332,14,3004,4,"enumName"],[3332,22,3006,5],[3332,31,3004,4,"enumName"],[3332,39,3006,5],[3333,0,3006,5],[3333,14,3005,4,"memberName"],[3333,24,3006,5],[3333,33,3005,4,"memberName"],[3333,43,3006,5],[3334,0,3007,4],[3334,15,3007,9,"raise"],[3334,20,3007,4],[3334,21,3007,15,"pos"],[3334,24,3007,4],[3334,26,3007,20],[3334,88,3007,81,"memberName"],[3334,98,3007,20],[3334,126,3007,115,"memberName"],[3334,136,3007,20],[3334,164,3007,150,"enumName"],[3334,172,3007,20],[3334,180,3007,4],[3335,0,3008,3],[3336,0,805,22],[3337,0,805,22],[3338,0,805,22],[3338,55,3010,33,"pos"],[3338,58,805,22],[3338,67,3013,5],[3339,0,3013,5],[3339,14,3011,4,"enumName"],[3339,22,3013,5],[3339,31,3011,4,"enumName"],[3339,39,3013,5],[3340,0,3013,5],[3340,14,3012,4,"memberName"],[3340,24,3013,5],[3340,33,3012,4,"memberName"],[3340,43,3013,5],[3341,0,3014,4],[3341,14,3014,10,"suggestion"],[3341,24,3014,20],[3341,27,3014,23,"memberName"],[3341,37,3014,33],[3341,38,3014,34],[3341,39,3014,33],[3341,40,3014,23],[3341,41,3014,37,"toUpperCase"],[3341,52,3014,23],[3341,57,3014,53,"memberName"],[3341,67,3014,63],[3341,68,3014,64,"slice"],[3341,73,3014,53],[3341,74,3014,70],[3341,75,3014,53],[3341,76,3014,4],[3342,0,3015,4],[3342,15,3015,9,"raise"],[3342,20,3015,4],[3342,21,3015,15,"pos"],[3342,24,3015,4],[3342,26,3015,20],[3342,118,3015,110,"memberName"],[3342,128,3015,20],[3342,155,3015,144,"suggestion"],[3342,165,3015,20],[3342,185,3015,171,"enumName"],[3342,193,3015,20],[3342,201,3015,4],[3343,0,3016,3],[3344,0,805,22],[3345,0,805,22],[3346,0,805,22],[3346,57,3018,35,"pos"],[3346,60,805,22],[3346,69,3021,5],[3347,0,3021,5],[3347,14,3019,4,"enumName"],[3347,22,3021,5],[3347,31,3019,4,"enumName"],[3347,39,3021,5],[3348,0,3021,5],[3348,14,3020,4,"memberName"],[3348,24,3021,5],[3348,33,3020,4,"memberName"],[3348,43,3021,5],[3349,0,3022,4],[3349,15,3022,9,"raise"],[3349,20,3022,4],[3349,21,3022,15,"pos"],[3349,24,3022,4],[3349,26,3022,20],[3349,82,3022,75,"memberName"],[3349,92,3022,20],[3349,146,3022,135,"enumName"],[3349,154,3022,20],[3349,162,3022,4],[3350,0,3023,3],[3351,0,805,22],[3352,0,805,22],[3353,0,805,22],[3353,62,3025,40,"pos"],[3353,65,805,22],[3353,74,3027,5],[3354,0,3027,5],[3354,14,3026,4,"enumName"],[3354,22,3027,5],[3354,31,3026,4,"enumName"],[3354,39,3027,5],[3355,0,3028,4],[3355,15,3028,9,"raise"],[3355,20,3028,4],[3355,21,3028,15,"pos"],[3355,24,3028,4],[3355,26,3028,20],[3355,37,3028,30,"enumName"],[3355,45,3028,20],[3355,219,3028,4],[3356,0,3029,3],[3357,0,805,22],[3358,0,805,22],[3359,0,805,22],[3359,57,3031,35,"pos"],[3359,60,805,22],[3359,69,3034,5],[3360,0,3034,5],[3360,14,3032,4,"enumName"],[3360,22,3034,5],[3360,31,3032,4,"enumName"],[3360,39,3034,5],[3361,0,3034,5],[3361,14,3033,4,"suppliedType"],[3361,26,3034,5],[3361,35,3033,4,"suppliedType"],[3361,47,3034,5],[3362,0,3035,4],[3362,14,3035,10,"suggestion"],[3362,24,3035,20],[3362,27,3035,23],[3362,101,3035,103,"enumName"],[3362,109,3035,23],[3362,117,3035,4],[3363,0,3036,4],[3363,14,3036,10,"message"],[3363,21,3036,17],[3363,24,3036,20,"suppliedType"],[3363,36,3036,32],[3363,41,3036,37],[3363,45,3036,20],[3363,86,3036,80,"suggestion"],[3363,96,3036,20],[3363,115,3036,110,"suppliedType"],[3363,127,3036,20],[3363,151,3036,142,"suggestion"],[3363,161,3036,4],[3364,0,3037,4],[3364,17,3037,11],[3364,22,3037,16,"raise"],[3364,27,3037,11],[3364,28,3037,22,"pos"],[3364,31,3037,11],[3364,33,3037,27,"message"],[3364,40,3037,11],[3364,41,3037,4],[3365,0,3038,3],[3366,0,805,22],[3367,0,805,22],[3368,0,805,22],[3368,62,3040,40,"pos"],[3368,65,805,22],[3368,74,3044,5],[3369,0,3044,5],[3369,14,3041,4,"enumName"],[3369,22,3044,5],[3369,31,3041,4,"enumName"],[3369,39,3044,5],[3370,0,3044,5],[3370,14,3042,4,"explicitType"],[3370,26,3044,5],[3370,35,3042,4,"explicitType"],[3370,47,3044,5],[3371,0,3044,5],[3371,14,3043,4,"memberName"],[3371,24,3044,5],[3371,33,3043,4,"memberName"],[3371,43,3044,5],[3372,0,3045,4],[3372,14,3045,8,"message"],[3372,21,3045,15],[3372,24,3045,18],[3372,28,3045,4],[3374,0,3047,4],[3374,18,3047,12,"explicitType"],[3374,30,3047,4],[3375,0,3048,6],[3375,17,3048,11],[3375,26,3048,6],[3376,0,3049,6],[3376,17,3049,11],[3376,25,3049,6],[3377,0,3050,6],[3377,17,3050,11],[3377,25,3050,6],[3378,0,3051,8,"message"],[3378,14,3051,8,"message"],[3378,21,3051,15],[3378,24,3051,18],[3378,35,3051,28,"enumName"],[3378,43,3051,18],[3378,63,3051,53,"explicitType"],[3378,75,3051,18],[3378,115,3051,101,"memberName"],[3378,125,3051,18],[3378,149,3051,131,"explicitType"],[3378,161,3051,18],[3378,176,3051,8],[3379,0,3052,8],[3381,0,3054,6],[3381,17,3054,11],[3381,25,3054,6],[3382,0,3055,8,"message"],[3382,14,3055,8,"message"],[3382,21,3055,15],[3382,24,3055,18],[3382,77,3055,70,"memberName"],[3382,87,3055,18],[3382,113,3055,102,"enumName"],[3382,121,3055,18],[3382,129,3055,8],[3383,0,3056,8],[3385,0,3058,6],[3386,0,3059,8,"message"],[3386,14,3059,8,"message"],[3386,21,3059,15],[3386,24,3059,18],[3386,62,3059,55,"memberName"],[3386,72,3059,18],[3386,157,3059,146,"enumName"],[3386,165,3059,18],[3386,173,3059,8],[3387,0,3047,4],[3389,0,3062,4],[3389,17,3062,11],[3389,22,3062,16,"raise"],[3389,27,3062,11],[3389,28,3062,22,"pos"],[3389,31,3062,11],[3389,33,3062,27,"message"],[3389,40,3062,11],[3389,41,3062,4],[3390,0,3063,3],[3391,0,805,22],[3392,0,805,22],[3393,0,805,22],[3393,64,3065,42,"pos"],[3393,67,805,22],[3393,76,3068,5],[3394,0,3068,5],[3394,14,3066,4,"enumName"],[3394,22,3068,5],[3394,31,3066,4,"enumName"],[3394,39,3068,5],[3395,0,3068,5],[3395,14,3067,4,"memberName"],[3395,24,3068,5],[3395,33,3067,4,"memberName"],[3395,43,3068,5],[3396,0,3069,4],[3396,15,3069,9,"raise"],[3396,20,3069,4],[3396,21,3069,15,"pos"],[3396,24,3069,4],[3396,81,3069,74,"memberName"],[3396,91,3069,4],[3396,114,3069,104,"enumName"],[3396,122,3069,4],[3397,0,3070,3],[3398,0,805,22],[3399,0,805,22],[3400,0,805,22],[3400,75,3072,53,"pos"],[3400,78,805,22],[3400,88,3074,5],[3401,0,3074,5],[3401,14,3073,4,"enumName"],[3401,22,3074,5],[3401,32,3073,4,"enumName"],[3401,40,3074,5],[3402,0,3075,4],[3402,15,3075,9,"raise"],[3402,20,3075,4],[3402,21,3075,15,"pos"],[3402,24,3075,4],[3402,26,3075,20],[3402,140,3075,132,"enumName"],[3402,148,3075,20],[3402,156,3075,4],[3403,0,3076,3],[3404,0,805,22],[3405,0,805,22],[3406,0,805,22],[3406,45,3078,23],[3407,0,3078,23],[3409,0,3079,4],[3409,14,3079,10,"startPos"],[3409,22,3079,18],[3409,25,3079,21],[3409,30,3079,26,"state"],[3409,35,3079,21],[3409,36,3079,32,"start"],[3409,41,3079,4],[3411,0,3081,4],[3411,14,3081,10,"endOfInit"],[3411,23,3081,19],[3411,26,3081,22],[3411,35,3081,10,"endOfInit"],[3411,44,3081,22],[3412,0,3081,22],[3412,19,3081,28],[3412,26,3081,32],[3412,27,3081,33,"match"],[3412,32,3081,28],[3412,33,3081,39,"types"],[3412,38,3081,44],[3412,39,3081,45,"comma"],[3412,44,3081,28],[3412,49,3081,55],[3412,56,3081,59],[3412,57,3081,60,"match"],[3412,62,3081,55],[3412,63,3081,66,"types"],[3412,68,3081,71],[3412,69,3081,72,"braceR"],[3412,75,3081,55],[3412,76,3081,22],[3413,0,3081,22],[3413,11,3081,4],[3415,0,3083,4],[3415,18,3083,12],[3415,23,3083,17,"state"],[3415,28,3083,12],[3415,29,3083,23,"type"],[3415,33,3083,4],[3416,0,3084,6],[3416,17,3084,11,"types"],[3416,22,3084,16],[3416,23,3084,17,"num"],[3416,26,3084,6],[3417,0,3085,8],[3418,0,3086,10],[3418,20,3086,16,"literal"],[3418,28,3086,23],[3418,31,3086,26],[3418,36,3086,31,"parseLiteral"],[3418,48,3086,26],[3418,49,3086,44],[3418,54,3086,49,"state"],[3418,59,3086,44],[3418,60,3086,55,"value"],[3418,65,3086,26],[3418,67,3086,62],[3418,83,3086,26],[3418,84,3086,10],[3420,0,3088,10],[3420,20,3088,14,"endOfInit"],[3420,29,3088,23],[3420,31,3088,10],[3420,33,3088,27],[3421,0,3089,12],[3421,25,3089,19],[3422,0,3090,14,"type"],[3422,20,3090,14,"type"],[3422,24,3090,18],[3422,26,3090,20],[3422,34,3089,19],[3423,0,3091,14,"pos"],[3423,20,3091,14,"pos"],[3423,23,3091,17],[3423,25,3091,19,"literal"],[3423,33,3091,26],[3423,34,3091,27,"start"],[3423,39,3089,19],[3424,0,3092,14,"value"],[3424,20,3092,14,"value"],[3424,25,3092,19],[3424,27,3092,21,"literal"],[3425,0,3089,19],[3425,19,3089,12],[3426,0,3094,11],[3428,0,3096,10],[3428,23,3096,17],[3429,0,3097,12,"type"],[3429,18,3097,12,"type"],[3429,22,3097,16],[3429,24,3097,18],[3429,33,3096,17],[3430,0,3098,12,"pos"],[3430,18,3098,12,"pos"],[3430,21,3098,15],[3430,23,3098,17,"startPos"],[3431,0,3096,17],[3431,17,3096,10],[3432,0,3100,9],[3434,0,3102,6],[3434,17,3102,11,"types"],[3434,22,3102,16],[3434,23,3102,17,"string"],[3434,29,3102,6],[3435,0,3103,8],[3436,0,3104,10],[3436,20,3104,16,"literal"],[3436,29,3104,23],[3436,32,3104,26],[3436,37,3104,31,"parseLiteral"],[3436,49,3104,26],[3436,50,3104,44],[3436,55,3104,49,"state"],[3436,60,3104,44],[3436,61,3104,55,"value"],[3436,66,3104,26],[3436,68,3104,62],[3436,83,3104,26],[3436,84,3104,10],[3438,0,3106,10],[3438,20,3106,14,"endOfInit"],[3438,29,3106,23],[3438,31,3106,10],[3438,33,3106,27],[3439,0,3107,12],[3439,25,3107,19],[3440,0,3108,14,"type"],[3440,20,3108,14,"type"],[3440,24,3108,18],[3440,26,3108,20],[3440,34,3107,19],[3441,0,3109,14,"pos"],[3441,20,3109,14,"pos"],[3441,23,3109,17],[3441,25,3109,19,"literal"],[3441,34,3109,26],[3441,35,3109,27,"start"],[3441,40,3107,19],[3442,0,3110,14,"value"],[3442,20,3110,14,"value"],[3442,25,3110,19],[3442,27,3110,21,"literal"],[3443,0,3107,19],[3443,19,3107,12],[3444,0,3112,11],[3446,0,3114,10],[3446,23,3114,17],[3447,0,3115,12,"type"],[3447,18,3115,12,"type"],[3447,22,3115,16],[3447,24,3115,18],[3447,33,3114,17],[3448,0,3116,12,"pos"],[3448,18,3116,12,"pos"],[3448,21,3116,15],[3448,23,3116,17,"startPos"],[3449,0,3114,17],[3449,17,3114,10],[3450,0,3118,9],[3452,0,3120,6],[3452,17,3120,11,"types"],[3452,22,3120,16],[3452,23,3120,17,"_true"],[3452,28,3120,6],[3453,0,3121,6],[3453,17,3121,11,"types"],[3453,22,3121,16],[3453,23,3121,17,"_false"],[3453,29,3121,6],[3454,0,3122,8],[3455,0,3123,10],[3455,20,3123,16,"literal"],[3455,29,3123,23],[3455,32,3123,26],[3455,37,3123,31,"parseBooleanLiteral"],[3455,56,3123,26],[3455,58,3123,10],[3457,0,3125,10],[3457,20,3125,14,"endOfInit"],[3457,29,3125,23],[3457,31,3125,10],[3457,33,3125,27],[3458,0,3126,12],[3458,25,3126,19],[3459,0,3127,14,"type"],[3459,20,3127,14,"type"],[3459,24,3127,18],[3459,26,3127,20],[3459,35,3126,19],[3460,0,3128,14,"pos"],[3460,20,3128,14,"pos"],[3460,23,3128,17],[3460,25,3128,19,"literal"],[3460,34,3128,26],[3460,35,3128,27,"start"],[3460,40,3126,19],[3461,0,3129,14,"value"],[3461,20,3129,14,"value"],[3461,25,3129,19],[3461,27,3129,21,"literal"],[3462,0,3126,19],[3462,19,3126,12],[3463,0,3131,11],[3465,0,3133,10],[3465,23,3133,17],[3466,0,3134,12,"type"],[3466,18,3134,12,"type"],[3466,22,3134,16],[3466,24,3134,18],[3466,33,3133,17],[3467,0,3135,12,"pos"],[3467,18,3135,12,"pos"],[3467,21,3135,15],[3467,23,3135,17,"startPos"],[3468,0,3133,17],[3468,17,3133,10],[3469,0,3137,9],[3471,0,3139,6],[3472,0,3140,8],[3472,21,3140,15],[3473,0,3141,10,"type"],[3473,16,3141,10,"type"],[3473,20,3141,14],[3473,22,3141,16],[3473,31,3140,15],[3474,0,3142,10,"pos"],[3474,16,3142,10,"pos"],[3474,19,3142,13],[3474,21,3142,15,"startPos"],[3475,0,3140,15],[3475,15,3140,8],[3476,0,3083,4],[3477,0,3145,3],[3478,0,805,22],[3479,0,805,22],[3480,0,805,22],[3480,44,3147,22],[3481,0,3148,4],[3481,14,3148,10,"pos"],[3481,17,3148,13],[3481,20,3148,16],[3481,25,3148,21,"state"],[3481,30,3148,16],[3481,31,3148,27,"start"],[3481,36,3148,4],[3482,0,3149,4],[3482,14,3149,10,"id"],[3482,16,3149,12],[3482,19,3149,15],[3482,24,3149,20,"parseIdentifier"],[3482,39,3149,15],[3482,40,3149,36],[3482,44,3149,15],[3482,45,3149,4],[3483,0,3150,4],[3483,14,3150,10,"init"],[3483,18,3150,14],[3483,21,3150,17],[3483,26,3150,22,"eat"],[3483,29,3150,17],[3483,30,3150,26,"types"],[3483,35,3150,31],[3483,36,3150,32,"eq"],[3483,38,3150,17],[3483,42,3150,38],[3483,47,3150,43,"flowEnumMemberInit"],[3483,65,3150,38],[3483,67,3150,17],[3483,70,3150,66],[3484,0,3151,6,"type"],[3484,12,3151,6,"type"],[3484,16,3151,10],[3484,18,3151,12],[3484,24,3150,66],[3485,0,3152,6,"pos"],[3485,12,3152,6,"pos"],[3485,15,3152,9],[3485,17,3152,6,"pos"],[3486,0,3150,66],[3486,11,3150,4],[3487,0,3154,4],[3487,17,3154,11],[3488,0,3155,6,"id"],[3488,12,3155,6,"id"],[3488,14,3155,8],[3488,16,3155,6,"id"],[3488,18,3154,11],[3489,0,3156,6,"init"],[3489,12,3156,6,"init"],[3489,16,3156,10],[3489,18,3156,6,"init"],[3490,0,3154,11],[3490,11,3154,4],[3491,0,3158,3],[3492,0,805,22],[3493,0,805,22],[3494,0,805,22],[3494,58,3160,36,"pos"],[3494,61,805,22],[3494,63,3160,41,"context"],[3494,70,805,22],[3494,72,3160,50,"expectedType"],[3494,84,805,22],[3494,86,3160,64],[3495,0,3160,64],[3495,14,3162,6,"explicitType"],[3495,26,3160,64],[3495,29,3163,8,"context"],[3495,36,3160,64],[3495,37,3162,6,"explicitType"],[3495,49,3160,64],[3497,0,3165,4],[3497,14,3165,8,"explicitType"],[3497,26,3165,20],[3497,31,3165,25],[3497,35,3165,4],[3497,37,3165,31],[3498,0,3166,6],[3499,0,3167,5],[3501,0,3169,4],[3501,14,3169,8,"explicitType"],[3501,26,3169,20],[3501,31,3169,25,"expectedType"],[3501,43,3169,4],[3501,45,3169,39],[3502,0,3170,6],[3502,17,3170,11,"flowEnumErrorInvalidMemberInitializer"],[3502,54,3170,6],[3502,55,3170,49,"pos"],[3502,58,3170,6],[3502,60,3170,54,"context"],[3502,67,3170,6],[3503,0,3171,5],[3504,0,3172,3],[3505,0,805,22],[3506,0,805,22],[3507,0,805,22],[3507,48,3177,5],[3508,0,3177,5],[3508,14,3175,4,"enumName"],[3508,22,3177,5],[3508,32,3175,4,"enumName"],[3508,40,3177,5],[3509,0,3177,5],[3509,14,3176,4,"explicitType"],[3509,26,3177,5],[3509,36,3176,4,"explicitType"],[3509,48,3177,5],[3510,0,3178,4],[3510,14,3178,10,"seenNames"],[3510,23,3178,19],[3510,26,3178,22],[3510,30,3178,26,"Set"],[3510,33,3178,22],[3510,35,3178,4],[3511,0,3179,4],[3511,14,3179,10,"members"],[3511,21,3179,17],[3511,24,3179,20],[3512,0,3180,6,"booleanMembers"],[3512,12,3180,6,"booleanMembers"],[3512,26,3180,20],[3512,28,3180,22],[3512,30,3179,20],[3513,0,3181,6,"numberMembers"],[3513,12,3181,6,"numberMembers"],[3513,25,3181,19],[3513,27,3181,21],[3513,29,3179,20],[3514,0,3182,6,"stringMembers"],[3514,12,3182,6,"stringMembers"],[3514,25,3182,19],[3514,27,3182,21],[3514,29,3179,20],[3515,0,3183,6,"defaultedMembers"],[3515,12,3183,6,"defaultedMembers"],[3515,28,3183,22],[3515,30,3183,24],[3516,0,3179,20],[3516,11,3179,4],[3518,0,3186,4],[3518,17,3186,11],[3518,18,3186,12],[3518,23,3186,17,"match"],[3518,28,3186,12],[3518,29,3186,23,"types"],[3518,34,3186,28],[3518,35,3186,29,"braceR"],[3518,41,3186,12],[3518,42,3186,4],[3518,44,3186,38],[3519,0,3187,6],[3519,16,3187,12,"memberNode"],[3519,26,3187,22],[3519,29,3187,25],[3519,34,3187,30,"startNode"],[3519,43,3187,25],[3519,45,3187,6],[3521,0,3186,38],[3521,40,3191,10],[3521,45,3191,15,"flowEnumMemberRaw"],[3521,62,3191,10],[3521,64,3186,38],[3522,0,3186,38],[3522,16,3189,8,"id"],[3522,18,3186,38],[3522,43,3189,8,"id"],[3522,45,3186,38],[3523,0,3186,38],[3523,16,3190,8,"init"],[3523,20,3186,38],[3523,45,3190,8,"init"],[3523,49,3186,38],[3525,0,3192,6],[3525,16,3192,12,"memberName"],[3525,26,3192,22],[3525,29,3192,25,"id"],[3525,31,3192,27],[3525,32,3192,28,"name"],[3525,36,3192,6],[3527,0,3194,6],[3527,16,3194,10,"memberName"],[3527,26,3194,20],[3527,31,3194,25],[3527,33,3194,6],[3527,35,3194,29],[3528,0,3195,8],[3529,0,3196,7],[3531,0,3198,6],[3531,16,3198,10],[3531,25,3198,19,"test"],[3531,29,3198,10],[3531,30,3198,24,"memberName"],[3531,40,3198,10],[3531,41,3198,6],[3531,43,3198,37],[3532,0,3199,8],[3532,19,3199,13,"flowEnumErrorInvalidMemberName"],[3532,49,3199,8],[3532,50,3199,44,"id"],[3532,52,3199,46],[3532,53,3199,47,"start"],[3532,58,3199,8],[3532,60,3199,54],[3533,0,3200,10,"enumName"],[3533,16,3200,10,"enumName"],[3533,24,3200,18],[3533,26,3200,10,"enumName"],[3533,34,3199,54],[3534,0,3201,10,"memberName"],[3534,16,3201,10,"memberName"],[3534,26,3201,20],[3534,28,3201,10,"memberName"],[3535,0,3199,54],[3535,15,3199,8],[3536,0,3203,7],[3538,0,3205,6],[3538,16,3205,10,"seenNames"],[3538,25,3205,19],[3538,26,3205,20,"has"],[3538,29,3205,10],[3538,30,3205,24,"memberName"],[3538,40,3205,10],[3538,41,3205,6],[3538,43,3205,37],[3539,0,3206,8],[3539,19,3206,13,"flowEnumErrorDuplicateMemberName"],[3539,51,3206,8],[3539,52,3206,46,"id"],[3539,54,3206,48],[3539,55,3206,49,"start"],[3539,60,3206,8],[3539,62,3206,56],[3540,0,3207,10,"enumName"],[3540,16,3207,10,"enumName"],[3540,24,3207,18],[3540,26,3207,10,"enumName"],[3540,34,3206,56],[3541,0,3208,10,"memberName"],[3541,16,3208,10,"memberName"],[3541,26,3208,20],[3541,28,3208,10,"memberName"],[3542,0,3206,56],[3542,15,3206,8],[3543,0,3210,7],[3545,0,3212,6,"seenNames"],[3545,12,3212,6,"seenNames"],[3545,21,3212,15],[3545,22,3212,16,"add"],[3545,25,3212,6],[3545,26,3212,20,"memberName"],[3545,36,3212,6],[3546,0,3213,6],[3546,16,3213,12,"context"],[3546,23,3213,19],[3546,26,3213,22],[3547,0,3214,8,"enumName"],[3547,14,3214,8,"enumName"],[3547,22,3214,16],[3547,24,3214,8,"enumName"],[3547,32,3213,22],[3548,0,3215,8,"explicitType"],[3548,14,3215,8,"explicitType"],[3548,26,3215,20],[3548,28,3215,8,"explicitType"],[3548,40,3213,22],[3549,0,3216,8,"memberName"],[3549,14,3216,8,"memberName"],[3549,24,3216,18],[3549,26,3216,8,"memberName"],[3550,0,3213,22],[3550,13,3213,6],[3551,0,3218,6,"memberNode"],[3551,12,3218,6,"memberNode"],[3551,22,3218,16],[3551,23,3218,17,"id"],[3551,25,3218,6],[3551,28,3218,22,"id"],[3551,30,3218,6],[3553,0,3220,6],[3553,20,3220,14,"init"],[3553,24,3220,18],[3553,25,3220,19,"type"],[3553,29,3220,6],[3554,0,3221,8],[3554,19,3221,13],[3554,28,3221,8],[3555,0,3222,10],[3556,0,3223,12],[3556,23,3223,17,"flowEnumCheckExplicitTypeMismatch"],[3556,56,3223,12],[3556,57,3223,51,"init"],[3556,61,3223,55],[3556,62,3223,56,"pos"],[3556,65,3223,12],[3556,67,3223,61,"context"],[3556,74,3223,12],[3556,76,3223,70],[3556,85,3223,12],[3557,0,3224,12,"memberNode"],[3557,18,3224,12,"memberNode"],[3557,28,3224,22],[3557,29,3224,23,"init"],[3557,33,3224,12],[3557,36,3224,30,"init"],[3557,40,3224,34],[3557,41,3224,35,"value"],[3557,46,3224,12],[3558,0,3225,12,"members"],[3558,18,3225,12,"members"],[3558,25,3225,19],[3558,26,3225,20,"booleanMembers"],[3558,40,3225,12],[3558,41,3225,35,"push"],[3558,45,3225,12],[3558,46,3225,40],[3558,51,3225,45,"finishNode"],[3558,61,3225,40],[3558,62,3225,56,"memberNode"],[3558,72,3225,40],[3558,74,3225,68],[3558,93,3225,40],[3558,94,3225,12],[3559,0,3226,12],[3560,0,3227,11],[3562,0,3229,8],[3562,19,3229,13],[3562,27,3229,8],[3563,0,3230,10],[3564,0,3231,12],[3564,23,3231,17,"flowEnumCheckExplicitTypeMismatch"],[3564,56,3231,12],[3564,57,3231,51,"init"],[3564,61,3231,55],[3564,62,3231,56,"pos"],[3564,65,3231,12],[3564,67,3231,61,"context"],[3564,74,3231,12],[3564,76,3231,70],[3564,84,3231,12],[3565,0,3232,12,"memberNode"],[3565,18,3232,12,"memberNode"],[3565,28,3232,22],[3565,29,3232,23,"init"],[3565,33,3232,12],[3565,36,3232,30,"init"],[3565,40,3232,34],[3565,41,3232,35,"value"],[3565,46,3232,12],[3566,0,3233,12,"members"],[3566,18,3233,12,"members"],[3566,25,3233,19],[3566,26,3233,20,"numberMembers"],[3566,39,3233,12],[3566,40,3233,34,"push"],[3566,44,3233,12],[3566,45,3233,39],[3566,50,3233,44,"finishNode"],[3566,60,3233,39],[3566,61,3233,55,"memberNode"],[3566,71,3233,39],[3566,73,3233,67],[3566,91,3233,39],[3566,92,3233,12],[3567,0,3234,12],[3568,0,3235,11],[3570,0,3237,8],[3570,19,3237,13],[3570,27,3237,8],[3571,0,3238,10],[3572,0,3239,12],[3572,23,3239,17,"flowEnumCheckExplicitTypeMismatch"],[3572,56,3239,12],[3572,57,3239,51,"init"],[3572,61,3239,55],[3572,62,3239,56,"pos"],[3572,65,3239,12],[3572,67,3239,61,"context"],[3572,74,3239,12],[3572,76,3239,70],[3572,84,3239,12],[3573,0,3240,12,"memberNode"],[3573,18,3240,12,"memberNode"],[3573,28,3240,22],[3573,29,3240,23,"init"],[3573,33,3240,12],[3573,36,3240,30,"init"],[3573,40,3240,34],[3573,41,3240,35,"value"],[3573,46,3240,12],[3574,0,3241,12,"members"],[3574,18,3241,12,"members"],[3574,25,3241,19],[3574,26,3241,20,"stringMembers"],[3574,39,3241,12],[3574,40,3241,34,"push"],[3574,44,3241,12],[3574,45,3241,39],[3574,50,3241,44,"finishNode"],[3574,60,3241,39],[3574,61,3241,55,"memberNode"],[3574,71,3241,39],[3574,73,3241,67],[3574,91,3241,39],[3574,92,3241,12],[3575,0,3242,12],[3576,0,3243,11],[3578,0,3245,8],[3578,19,3245,13],[3578,28,3245,8],[3579,0,3246,10],[3580,0,3247,12],[3580,24,3247,18],[3580,29,3247,23,"flowEnumErrorInvalidMemberInitializer"],[3580,66,3247,18],[3580,67,3247,61,"init"],[3580,71,3247,65],[3580,72,3247,66,"pos"],[3580,75,3247,18],[3580,77,3247,71,"context"],[3580,84,3247,18],[3580,85,3247,12],[3581,0,3248,11],[3583,0,3250,8],[3583,19,3250,13],[3583,25,3250,8],[3584,0,3251,10],[3585,0,3252,12],[3585,26,3252,20,"explicitType"],[3585,38,3252,12],[3586,0,3253,14],[3586,25,3253,19],[3586,34,3253,14],[3587,0,3254,16],[3587,27,3254,21,"flowEnumErrorBooleanMemberNotInitialized"],[3587,67,3254,16],[3587,68,3254,62,"init"],[3587,72,3254,66],[3587,73,3254,67,"pos"],[3587,76,3254,16],[3587,78,3254,72,"context"],[3587,85,3254,16],[3588,0,3255,16],[3590,0,3257,14],[3590,25,3257,19],[3590,33,3257,14],[3591,0,3258,16],[3591,27,3258,21,"flowEnumErrorNumberMemberNotInitialized"],[3591,66,3258,16],[3591,67,3258,61,"init"],[3591,71,3258,65],[3591,72,3258,66,"pos"],[3591,75,3258,16],[3591,77,3258,71,"context"],[3591,84,3258,16],[3592,0,3259,16],[3594,0,3261,14],[3595,0,3262,16,"members"],[3595,22,3262,16,"members"],[3595,29,3262,23],[3595,30,3262,24,"defaultedMembers"],[3595,46,3262,16],[3595,47,3262,41,"push"],[3595,51,3262,16],[3595,52,3262,46],[3595,57,3262,51,"finishNode"],[3595,67,3262,46],[3595,68,3262,62,"memberNode"],[3595,78,3262,46],[3595,80,3262,74],[3595,101,3262,46],[3595,102,3262,16],[3596,0,3252,12],[3597,0,3264,11],[3598,0,3220,6],[3600,0,3267,6],[3600,16,3267,10],[3600,17,3267,11],[3600,22,3267,16,"match"],[3600,27,3267,11],[3600,28,3267,22,"types"],[3600,33,3267,27],[3600,34,3267,28,"braceR"],[3600,40,3267,11],[3600,41,3267,6],[3600,43,3267,37],[3601,0,3268,8],[3601,19,3268,13,"expect"],[3601,25,3268,8],[3601,26,3268,20,"types"],[3601,31,3268,25],[3601,32,3268,26,"comma"],[3601,37,3268,8],[3602,0,3269,7],[3603,0,3270,5],[3605,0,3272,4],[3605,17,3272,11,"members"],[3605,24,3272,4],[3606,0,3273,3],[3607,0,805,22],[3608,0,805,22],[3609,0,805,22],[3609,46,3275,24,"initializedMembers"],[3609,64,805,22],[3609,66,3275,44,"defaultedMembers"],[3609,82,805,22],[3609,92,3277,5],[3610,0,3277,5],[3610,14,3276,4,"enumName"],[3610,22,3277,5],[3610,32,3276,4,"enumName"],[3610,40,3277,5],[3612,0,3278,4],[3612,14,3278,8,"initializedMembers"],[3612,32,3278,26],[3612,33,3278,27,"length"],[3612,39,3278,8],[3612,44,3278,38],[3612,45,3278,4],[3612,47,3278,41],[3613,0,3279,6],[3613,19,3279,13,"defaultedMembers"],[3613,35,3279,6],[3614,0,3280,5],[3614,11,3278,4],[3614,17,3280,11],[3614,21,3280,15,"defaultedMembers"],[3614,37,3280,31],[3614,38,3280,32,"length"],[3614,44,3280,15],[3614,49,3280,43],[3614,50,3280,11],[3614,52,3280,46],[3615,0,3281,6],[3615,19,3281,13,"initializedMembers"],[3615,37,3281,6],[3616,0,3282,5],[3616,11,3280,11],[3616,17,3282,11],[3616,21,3282,15,"defaultedMembers"],[3616,37,3282,31],[3616,38,3282,32,"length"],[3616,44,3282,15],[3616,47,3282,41,"initializedMembers"],[3616,65,3282,59],[3616,66,3282,60,"length"],[3616,72,3282,11],[3616,74,3282,68],[3617,0,3283,6],[3617,17,3283,11],[3617,21,3283,15,"_i"],[3617,23,3283,17],[3617,26,3283,20],[3617,27,3283,6],[3617,29,3283,23,"_i"],[3617,31,3283,25],[3617,34,3283,28,"initializedMembers"],[3617,52,3283,46],[3617,53,3283,47,"length"],[3617,59,3283,6],[3617,61,3283,55,"_i"],[3617,63,3283,57],[3617,65,3283,6],[3617,67,3283,61],[3618,0,3284,8],[3618,18,3284,14,"member"],[3618,24,3284,20],[3618,27,3284,23,"initializedMembers"],[3618,45,3284,41],[3618,46,3284,42,"_i"],[3618,48,3284,41],[3618,49,3284,8],[3619,0,3285,8],[3619,19,3285,13,"flowEnumErrorStringMemberInconsistentlyInitailized"],[3619,69,3285,8],[3619,70,3285,64,"member"],[3619,76,3285,70],[3619,77,3285,71,"start"],[3619,82,3285,8],[3619,84,3285,78],[3620,0,3286,10,"enumName"],[3620,16,3286,10,"enumName"],[3620,24,3286,18],[3620,26,3286,10,"enumName"],[3621,0,3285,78],[3621,15,3285,8],[3622,0,3288,7],[3624,0,3290,6],[3624,19,3290,13,"defaultedMembers"],[3624,35,3290,6],[3625,0,3291,5],[3625,11,3282,11],[3625,17,3291,11],[3626,0,3292,6],[3626,17,3292,11],[3626,21,3292,15,"_i2"],[3626,24,3292,18],[3626,27,3292,21],[3626,28,3292,6],[3626,30,3292,24,"_i2"],[3626,33,3292,27],[3626,36,3292,30,"defaultedMembers"],[3626,52,3292,46],[3626,53,3292,47,"length"],[3626,59,3292,6],[3626,61,3292,55,"_i2"],[3626,64,3292,58],[3626,66,3292,6],[3626,68,3292,62],[3627,0,3293,8],[3627,18,3293,14,"member"],[3627,25,3293,20],[3627,28,3293,23,"defaultedMembers"],[3627,44,3293,39],[3627,45,3293,40,"_i2"],[3627,48,3293,39],[3627,49,3293,8],[3628,0,3294,8],[3628,19,3294,13,"flowEnumErrorStringMemberInconsistentlyInitailized"],[3628,69,3294,8],[3628,70,3294,64,"member"],[3628,77,3294,70],[3628,78,3294,71,"start"],[3628,83,3294,8],[3628,85,3294,78],[3629,0,3295,10,"enumName"],[3629,16,3295,10,"enumName"],[3629,24,3295,18],[3629,26,3295,10,"enumName"],[3630,0,3294,78],[3630,15,3294,8],[3631,0,3297,7],[3633,0,3299,6],[3633,19,3299,13,"initializedMembers"],[3633,37,3299,6],[3634,0,3300,5],[3635,0,3301,3],[3636,0,805,22],[3637,0,805,22],[3638,0,805,22],[3638,58,3305,5],[3639,0,3305,5],[3639,14,3304,4,"enumName"],[3639,22,3305,5],[3639,32,3304,4,"enumName"],[3639,40,3305,5],[3641,0,3306,4],[3641,14,3306,8],[3641,19,3306,13,"eatContextual"],[3641,32,3306,8],[3641,33,3306,27],[3641,37,3306,8],[3641,38,3306,4],[3641,40,3306,34],[3642,0,3307,6],[3642,16,3307,10],[3642,17,3307,11],[3642,22,3307,16,"match"],[3642,27,3307,11],[3642,28,3307,22,"types"],[3642,33,3307,27],[3642,34,3307,28,"name"],[3642,38,3307,11],[3642,39,3307,6],[3642,41,3307,35],[3643,0,3308,8],[3643,20,3308,14],[3643,25,3308,19,"flowEnumErrorInvalidExplicitType"],[3643,57,3308,14],[3643,58,3308,52],[3643,63,3308,57,"state"],[3643,68,3308,52],[3643,69,3308,63,"start"],[3643,74,3308,14],[3643,76,3308,70],[3644,0,3309,10,"enumName"],[3644,16,3309,10,"enumName"],[3644,24,3309,18],[3644,26,3309,10,"enumName"],[3644,34,3308,70],[3645,0,3310,10,"suppliedType"],[3645,16,3310,10,"suppliedType"],[3645,28,3310,22],[3645,30,3310,24],[3646,0,3308,70],[3646,15,3308,14],[3646,16,3308,8],[3647,0,3312,7],[3649,0,3306,34],[3649,16,3315,8,"value"],[3649,21,3306,34],[3649,24,3316,10],[3649,29,3316,15,"state"],[3649,34,3306,34],[3649,35,3315,8,"value"],[3649,40,3306,34],[3650,0,3317,6],[3650,17,3317,11,"next"],[3650,21,3317,6],[3652,0,3319,6],[3652,16,3319,10,"value"],[3652,21,3319,15],[3652,26,3319,20],[3652,35,3319,10],[3652,39,3319,33,"value"],[3652,44,3319,38],[3652,49,3319,43],[3652,57,3319,10],[3652,61,3319,55,"value"],[3652,66,3319,60],[3652,71,3319,65],[3652,79,3319,10],[3652,83,3319,77,"value"],[3652,88,3319,82],[3652,93,3319,87],[3652,101,3319,6],[3652,103,3319,97],[3653,0,3320,8],[3653,19,3320,13,"flowEnumErrorInvalidExplicitType"],[3653,51,3320,8],[3653,52,3320,46],[3653,57,3320,51,"state"],[3653,62,3320,46],[3653,63,3320,57,"start"],[3653,68,3320,8],[3653,70,3320,64],[3654,0,3321,10,"enumName"],[3654,16,3321,10,"enumName"],[3654,24,3321,18],[3654,26,3321,10,"enumName"],[3654,34,3320,64],[3655,0,3322,10,"suppliedType"],[3655,16,3322,10,"suppliedType"],[3655,28,3322,22],[3655,30,3322,24,"value"],[3656,0,3320,64],[3656,15,3320,8],[3657,0,3324,7],[3659,0,3326,6],[3659,19,3326,13,"value"],[3659,24,3326,6],[3660,0,3327,5],[3662,0,3329,4],[3662,17,3329,11],[3662,21,3329,4],[3663,0,3330,3],[3664,0,805,22],[3665,0,805,22],[3666,0,805,22],[3666,37,3332,15,"node"],[3666,41,805,22],[3666,51,3335,5],[3667,0,3335,5],[3669,0,3335,5],[3669,14,3333,4,"enumName"],[3669,22,3335,5],[3669,32,3333,4,"enumName"],[3669,40,3335,5],[3670,0,3335,5],[3670,14,3334,4,"nameLoc"],[3670,21,3335,5],[3670,31,3334,4,"nameLoc"],[3670,38,3335,5],[3671,0,3336,4],[3671,14,3336,10,"explicitType"],[3671,26,3336,22],[3671,29,3336,25],[3671,34,3336,30,"flowEnumParseExplicitType"],[3671,59,3336,25],[3671,60,3336,56],[3672,0,3337,6,"enumName"],[3672,12,3337,6,"enumName"],[3672,20,3337,14],[3672,22,3337,6,"enumName"],[3673,0,3336,56],[3673,11,3336,25],[3673,12,3336,4],[3674,0,3339,4],[3674,15,3339,9,"expect"],[3674,21,3339,4],[3674,22,3339,16,"types"],[3674,27,3339,21],[3674,28,3339,22,"braceL"],[3674,34,3339,4],[3675,0,3340,4],[3675,14,3340,10,"members"],[3675,21,3340,17],[3675,24,3340,20],[3675,29,3340,25,"flowEnumMembers"],[3675,44,3340,20],[3675,45,3340,41],[3676,0,3341,6,"enumName"],[3676,12,3341,6,"enumName"],[3676,20,3341,14],[3676,22,3341,6,"enumName"],[3676,30,3340,41],[3677,0,3342,6,"explicitType"],[3677,12,3342,6,"explicitType"],[3677,24,3342,18],[3677,26,3342,6,"explicitType"],[3678,0,3340,41],[3678,11,3340,20],[3678,12,3340,4],[3680,0,3345,4],[3680,18,3345,12,"explicitType"],[3680,30,3345,4],[3681,0,3346,6],[3681,17,3346,11],[3681,26,3346,6],[3682,0,3347,8,"node"],[3682,14,3347,8,"node"],[3682,18,3347,12],[3682,19,3347,13,"explicitType"],[3682,31,3347,8],[3682,34,3347,28],[3682,38,3347,8],[3683,0,3348,8,"node"],[3683,14,3348,8,"node"],[3683,18,3348,12],[3683,19,3348,13,"members"],[3683,26,3348,8],[3683,29,3348,23,"members"],[3683,36,3348,30],[3683,37,3348,31,"booleanMembers"],[3683,51,3348,8],[3684,0,3349,8],[3684,19,3349,13,"expect"],[3684,25,3349,8],[3684,26,3349,20,"types"],[3684,31,3349,25],[3684,32,3349,26,"braceR"],[3684,38,3349,8],[3685,0,3350,8],[3685,21,3350,15],[3685,26,3350,20,"finishNode"],[3685,36,3350,15],[3685,37,3350,31,"node"],[3685,41,3350,15],[3685,43,3350,37],[3685,60,3350,15],[3685,61,3350,8],[3687,0,3352,6],[3687,17,3352,11],[3687,25,3352,6],[3688,0,3353,8,"node"],[3688,14,3353,8,"node"],[3688,18,3353,12],[3688,19,3353,13,"explicitType"],[3688,31,3353,8],[3688,34,3353,28],[3688,38,3353,8],[3689,0,3354,8,"node"],[3689,14,3354,8,"node"],[3689,18,3354,12],[3689,19,3354,13,"members"],[3689,26,3354,8],[3689,29,3354,23,"members"],[3689,36,3354,30],[3689,37,3354,31,"numberMembers"],[3689,50,3354,8],[3690,0,3355,8],[3690,19,3355,13,"expect"],[3690,25,3355,8],[3690,26,3355,20,"types"],[3690,31,3355,25],[3690,32,3355,26,"braceR"],[3690,38,3355,8],[3691,0,3356,8],[3691,21,3356,15],[3691,26,3356,20,"finishNode"],[3691,36,3356,15],[3691,37,3356,31,"node"],[3691,41,3356,15],[3691,43,3356,37],[3691,59,3356,15],[3691,60,3356,8],[3693,0,3358,6],[3693,17,3358,11],[3693,25,3358,6],[3694,0,3359,8,"node"],[3694,14,3359,8,"node"],[3694,18,3359,12],[3694,19,3359,13,"explicitType"],[3694,31,3359,8],[3694,34,3359,28],[3694,38,3359,8],[3695,0,3360,8,"node"],[3695,14,3360,8,"node"],[3695,18,3360,12],[3695,19,3360,13,"members"],[3695,26,3360,8],[3695,29,3360,23],[3695,34,3360,28,"flowEnumStringMembers"],[3695,55,3360,23],[3695,56,3360,50,"members"],[3695,63,3360,57],[3695,64,3360,58,"stringMembers"],[3695,77,3360,23],[3695,79,3360,73,"members"],[3695,86,3360,80],[3695,87,3360,81,"defaultedMembers"],[3695,103,3360,23],[3695,105,3360,99],[3696,0,3361,10,"enumName"],[3696,16,3361,10,"enumName"],[3696,24,3361,18],[3696,26,3361,10,"enumName"],[3697,0,3360,99],[3697,15,3360,23],[3697,16,3360,8],[3698,0,3363,8],[3698,19,3363,13,"expect"],[3698,25,3363,8],[3698,26,3363,20,"types"],[3698,31,3363,25],[3698,32,3363,26,"braceR"],[3698,38,3363,8],[3699,0,3364,8],[3699,21,3364,15],[3699,26,3364,20,"finishNode"],[3699,36,3364,15],[3699,37,3364,31,"node"],[3699,41,3364,15],[3699,43,3364,37],[3699,59,3364,15],[3699,60,3364,8],[3701,0,3366,6],[3701,17,3366,11],[3701,25,3366,6],[3702,0,3367,8,"node"],[3702,14,3367,8,"node"],[3702,18,3367,12],[3702,19,3367,13,"members"],[3702,26,3367,8],[3702,29,3367,23,"members"],[3702,36,3367,30],[3702,37,3367,31,"defaultedMembers"],[3702,53,3367,8],[3703,0,3368,8],[3703,19,3368,13,"expect"],[3703,25,3368,8],[3703,26,3368,20,"types"],[3703,31,3368,25],[3703,32,3368,26,"braceR"],[3703,38,3368,8],[3704,0,3369,8],[3704,21,3369,15],[3704,26,3369,20,"finishNode"],[3704,36,3369,15],[3704,37,3369,31,"node"],[3704,41,3369,15],[3704,43,3369,37],[3704,59,3369,15],[3704,60,3369,8],[3706,0,3371,6],[3707,0,3372,8],[3708,0,3373,10],[3708,20,3373,16,"empty"],[3708,25,3373,21],[3708,28,3373,24],[3708,37,3373,16,"empty"],[3708,42,3373,24],[3708,45,3373,30],[3709,0,3374,12,"node"],[3709,18,3374,12,"node"],[3709,22,3374,16],[3709,23,3374,17,"members"],[3709,30,3374,12],[3709,33,3374,27],[3709,35,3374,12],[3711,0,3375,12],[3711,18,3375,12],[3711,25,3375,16],[3711,26,3375,17,"expect"],[3711,32,3375,12],[3711,33,3375,24,"types"],[3711,38,3375,29],[3711,39,3375,30,"braceR"],[3711,45,3375,12],[3713,0,3376,12],[3713,25,3376,19],[3713,32,3376,23],[3713,33,3376,24,"finishNode"],[3713,43,3376,19],[3713,44,3376,35,"node"],[3713,48,3376,19],[3713,50,3376,41],[3713,66,3376,19],[3713,67,3376,12],[3714,0,3377,11],[3714,17,3373,10],[3716,0,3379,10,"node"],[3716,16,3379,10,"node"],[3716,20,3379,14],[3716,21,3379,15,"explicitType"],[3716,33,3379,10],[3716,36,3379,30],[3716,41,3379,10],[3717,0,3380,10],[3717,20,3380,16,"boolsLen"],[3717,28,3380,24],[3717,31,3380,27,"members"],[3717,38,3380,34],[3717,39,3380,35,"booleanMembers"],[3717,53,3380,27],[3717,54,3380,50,"length"],[3717,60,3380,10],[3718,0,3381,10],[3718,20,3381,16,"numsLen"],[3718,27,3381,23],[3718,30,3381,26,"members"],[3718,37,3381,33],[3718,38,3381,34,"numberMembers"],[3718,51,3381,26],[3718,52,3381,48,"length"],[3718,58,3381,10],[3719,0,3382,10],[3719,20,3382,16,"strsLen"],[3719,27,3382,23],[3719,30,3382,26,"members"],[3719,37,3382,33],[3719,38,3382,34,"stringMembers"],[3719,51,3382,26],[3719,52,3382,48,"length"],[3719,58,3382,10],[3720,0,3383,10],[3720,20,3383,16,"defaultedLen"],[3720,32,3383,28],[3720,35,3383,31,"members"],[3720,42,3383,38],[3720,43,3383,39,"defaultedMembers"],[3720,59,3383,31],[3720,60,3383,56,"length"],[3720,66,3383,10],[3722,0,3385,10],[3722,20,3385,14],[3722,21,3385,15,"boolsLen"],[3722,29,3385,14],[3722,33,3385,27],[3722,34,3385,28,"numsLen"],[3722,41,3385,14],[3722,45,3385,39],[3722,46,3385,40,"strsLen"],[3722,53,3385,14],[3722,57,3385,51],[3722,58,3385,52,"defaultedLen"],[3722,70,3385,10],[3722,72,3385,66],[3723,0,3386,12],[3723,25,3386,19,"empty"],[3723,30,3386,24],[3723,32,3386,12],[3724,0,3387,11],[3724,17,3385,10],[3724,23,3387,17],[3724,27,3387,21],[3724,28,3387,22,"boolsLen"],[3724,36,3387,21],[3724,40,3387,34],[3724,41,3387,35,"numsLen"],[3724,48,3387,17],[3724,50,3387,44],[3725,0,3388,12,"node"],[3725,18,3388,12,"node"],[3725,22,3388,16],[3725,23,3388,17,"members"],[3725,30,3388,12],[3725,33,3388,27],[3725,38,3388,32,"flowEnumStringMembers"],[3725,59,3388,27],[3725,60,3388,54,"members"],[3725,67,3388,61],[3725,68,3388,62,"stringMembers"],[3725,81,3388,27],[3725,83,3388,77,"members"],[3725,90,3388,84],[3725,91,3388,85,"defaultedMembers"],[3725,107,3388,27],[3725,109,3388,103],[3726,0,3389,14,"enumName"],[3726,20,3389,14,"enumName"],[3726,28,3389,22],[3726,30,3389,14,"enumName"],[3727,0,3388,103],[3727,19,3388,27],[3727,20,3388,12],[3728,0,3391,12],[3728,23,3391,17,"expect"],[3728,29,3391,12],[3728,30,3391,24,"types"],[3728,35,3391,29],[3728,36,3391,30,"braceR"],[3728,42,3391,12],[3729,0,3392,12],[3729,25,3392,19],[3729,30,3392,24,"finishNode"],[3729,40,3392,19],[3729,41,3392,35,"node"],[3729,45,3392,19],[3729,47,3392,41],[3729,63,3392,19],[3729,64,3392,12],[3730,0,3393,11],[3730,17,3387,17],[3730,23,3393,17],[3730,27,3393,21],[3730,28,3393,22,"numsLen"],[3730,35,3393,21],[3730,39,3393,33],[3730,40,3393,34,"strsLen"],[3730,47,3393,21],[3730,51,3393,45,"boolsLen"],[3730,59,3393,53],[3730,63,3393,57,"defaultedLen"],[3730,75,3393,17],[3730,77,3393,71],[3731,0,3394,12],[3731,23,3394,17],[3731,27,3394,21,"_i3"],[3731,30,3394,24],[3731,33,3394,27],[3731,34,3394,17],[3731,36,3394,30,"_members$defaultedMem"],[3731,57,3394,51],[3731,60,3394,54,"members"],[3731,67,3394,61],[3731,68,3394,62,"defaultedMembers"],[3731,84,3394,12],[3731,86,3394,80,"_i3"],[3731,89,3394,83],[3731,92,3394,86,"_members$defaultedMem"],[3731,113,3394,107],[3731,114,3394,108,"length"],[3731,120,3394,12],[3731,122,3394,116,"_i3"],[3731,125,3394,119],[3731,127,3394,12],[3731,129,3394,123],[3732,0,3395,14],[3732,24,3395,20,"member"],[3732,30,3395,26],[3732,33,3395,29,"_members$defaultedMem"],[3732,54,3395,50],[3732,55,3395,51,"_i3"],[3732,58,3395,50],[3732,59,3395,14],[3733,0,3396,14],[3733,25,3396,19,"flowEnumErrorBooleanMemberNotInitialized"],[3733,65,3396,14],[3733,66,3396,60,"member"],[3733,72,3396,66],[3733,73,3396,67,"start"],[3733,78,3396,14],[3733,80,3396,74],[3734,0,3397,16,"enumName"],[3734,22,3397,16,"enumName"],[3734,30,3397,24],[3734,32,3397,16,"enumName"],[3734,40,3396,74],[3735,0,3398,16,"memberName"],[3735,22,3398,16,"memberName"],[3735,32,3398,26],[3735,34,3398,28,"member"],[3735,40,3398,34],[3735,41,3398,35,"id"],[3735,43,3398,28],[3735,44,3398,38,"name"],[3736,0,3396,74],[3736,21,3396,14],[3737,0,3400,13],[3739,0,3402,12,"node"],[3739,18,3402,12,"node"],[3739,22,3402,16],[3739,23,3402,17,"members"],[3739,30,3402,12],[3739,33,3402,27,"members"],[3739,40,3402,34],[3739,41,3402,35,"booleanMembers"],[3739,55,3402,12],[3740,0,3403,12],[3740,23,3403,17,"expect"],[3740,29,3403,12],[3740,30,3403,24,"types"],[3740,35,3403,29],[3740,36,3403,30,"braceR"],[3740,42,3403,12],[3741,0,3404,12],[3741,25,3404,19],[3741,30,3404,24,"finishNode"],[3741,40,3404,19],[3741,41,3404,35,"node"],[3741,45,3404,19],[3741,47,3404,41],[3741,64,3404,19],[3741,65,3404,12],[3742,0,3405,11],[3742,17,3393,17],[3742,23,3405,17],[3742,27,3405,21],[3742,28,3405,22,"boolsLen"],[3742,36,3405,21],[3742,40,3405,34],[3742,41,3405,35,"strsLen"],[3742,48,3405,21],[3742,52,3405,46,"numsLen"],[3742,59,3405,53],[3742,63,3405,57,"defaultedLen"],[3742,75,3405,17],[3742,77,3405,71],[3743,0,3406,12],[3743,23,3406,17],[3743,27,3406,21,"_i4"],[3743,30,3406,24],[3743,33,3406,27],[3743,34,3406,17],[3743,36,3406,30,"_members$defaultedMem2"],[3743,58,3406,52],[3743,61,3406,55,"members"],[3743,68,3406,62],[3743,69,3406,63,"defaultedMembers"],[3743,85,3406,12],[3743,87,3406,81,"_i4"],[3743,90,3406,84],[3743,93,3406,87,"_members$defaultedMem2"],[3743,115,3406,109],[3743,116,3406,110,"length"],[3743,122,3406,12],[3743,124,3406,118,"_i4"],[3743,127,3406,121],[3743,129,3406,12],[3743,131,3406,125],[3744,0,3407,14],[3744,24,3407,20,"member"],[3744,32,3407,26],[3744,35,3407,29,"_members$defaultedMem2"],[3744,57,3407,51],[3744,58,3407,52,"_i4"],[3744,61,3407,51],[3744,62,3407,14],[3745,0,3408,14],[3745,25,3408,19,"flowEnumErrorNumberMemberNotInitialized"],[3745,64,3408,14],[3745,65,3408,59,"member"],[3745,73,3408,65],[3745,74,3408,66,"start"],[3745,79,3408,14],[3745,81,3408,73],[3746,0,3409,16,"enumName"],[3746,22,3409,16,"enumName"],[3746,30,3409,24],[3746,32,3409,16,"enumName"],[3746,40,3408,73],[3747,0,3410,16,"memberName"],[3747,22,3410,16,"memberName"],[3747,32,3410,26],[3747,34,3410,28,"member"],[3747,42,3410,34],[3747,43,3410,35,"id"],[3747,45,3410,28],[3747,46,3410,38,"name"],[3748,0,3408,73],[3748,21,3408,14],[3749,0,3412,13],[3751,0,3414,12,"node"],[3751,18,3414,12,"node"],[3751,22,3414,16],[3751,23,3414,17,"members"],[3751,30,3414,12],[3751,33,3414,27,"members"],[3751,40,3414,34],[3751,41,3414,35,"numberMembers"],[3751,54,3414,12],[3752,0,3415,12],[3752,23,3415,17,"expect"],[3752,29,3415,12],[3752,30,3415,24,"types"],[3752,35,3415,29],[3752,36,3415,30,"braceR"],[3752,42,3415,12],[3753,0,3416,12],[3753,25,3416,19],[3753,30,3416,24,"finishNode"],[3753,40,3416,19],[3753,41,3416,35,"node"],[3753,45,3416,19],[3753,47,3416,41],[3753,63,3416,19],[3753,64,3416,12],[3754,0,3417,11],[3754,17,3405,17],[3754,23,3417,17],[3755,0,3418,12],[3755,23,3418,17,"flowEnumErrorInconsistentMemberValues"],[3755,60,3418,12],[3755,61,3418,55,"nameLoc"],[3755,68,3418,12],[3755,70,3418,64],[3756,0,3419,14,"enumName"],[3756,20,3419,14,"enumName"],[3756,28,3419,22],[3756,30,3419,14,"enumName"],[3757,0,3418,64],[3757,19,3418,12],[3758,0,3421,12],[3758,25,3421,19,"empty"],[3758,30,3421,24],[3758,32,3421,12],[3759,0,3422,11],[3760,0,3423,9],[3761,0,3345,4],[3762,0,3425,3],[3763,0,805,22],[3764,0,805,22],[3765,0,805,22],[3765,49,3427,27,"node"],[3765,53,805,22],[3765,55,3427,33],[3766,0,3428,4],[3766,14,3428,10,"id"],[3766,16,3428,12],[3766,19,3428,15],[3766,24,3428,20,"parseIdentifier"],[3766,39,3428,15],[3766,41,3428,4],[3767,0,3429,4,"node"],[3767,10,3429,4,"node"],[3767,14,3429,8],[3767,15,3429,9,"id"],[3767,17,3429,4],[3767,20,3429,14,"id"],[3767,22,3429,4],[3768,0,3430,4,"node"],[3768,10,3430,4,"node"],[3768,14,3430,8],[3768,15,3430,9,"body"],[3768,19,3430,4],[3768,22,3430,16],[3768,27,3430,21,"flowEnumBody"],[3768,39,3430,16],[3768,40,3430,34],[3768,45,3430,39,"startNode"],[3768,54,3430,34],[3768,56,3430,16],[3768,58,3430,52],[3769,0,3431,6,"enumName"],[3769,12,3431,6,"enumName"],[3769,20,3431,14],[3769,22,3431,16,"id"],[3769,24,3431,18],[3769,25,3431,19,"name"],[3769,29,3430,52],[3770,0,3432,6,"nameLoc"],[3770,12,3432,6,"nameLoc"],[3770,19,3432,13],[3770,21,3432,15,"id"],[3770,23,3432,17],[3770,24,3432,18,"start"],[3771,0,3430,52],[3771,11,3430,16],[3771,12,3430,4],[3772,0,3434,4],[3772,17,3434,11],[3772,22,3434,16,"finishNode"],[3772,32,3434,11],[3772,33,3434,27,"node"],[3772,37,3434,11],[3772,39,3434,33],[3772,56,3434,11],[3772,57,3434,4],[3773,0,3435,3],[3774,0,805,22],[3776,0,805,22],[3777,0,805,22],[3777,6,805,40,"superClass"],[3777,16,805,22],[3778,0,805,22],[3778,3,805,0],[3780,0,3439,0],[3780,6,3439,6,"entities"],[3780,14,3439,14],[3780,17,3439,17],[3781,0,3440,2,"quot"],[3781,4,3440,2,"quot"],[3781,8,3440,6],[3781,10,3440,8],[3781,14,3439,17],[3782,0,3441,2,"amp"],[3782,4,3441,2,"amp"],[3782,7,3441,5],[3782,9,3441,7],[3782,12,3439,17],[3783,0,3442,2,"apos"],[3783,4,3442,2,"apos"],[3783,8,3442,6],[3783,10,3442,8],[3783,13,3439,17],[3784,0,3443,2,"lt"],[3784,4,3443,2,"lt"],[3784,6,3443,4],[3784,8,3443,6],[3784,11,3439,17],[3785,0,3444,2,"gt"],[3785,4,3444,2,"gt"],[3785,6,3444,4],[3785,8,3444,6],[3785,11,3439,17],[3786,0,3445,2,"nbsp"],[3786,4,3445,2,"nbsp"],[3786,8,3445,6],[3786,10,3445,8],[3786,16,3439,17],[3787,0,3446,2,"iexcl"],[3787,4,3446,2,"iexcl"],[3787,9,3446,7],[3787,11,3446,9],[3787,17,3439,17],[3788,0,3447,2,"cent"],[3788,4,3447,2,"cent"],[3788,8,3447,6],[3788,10,3447,8],[3788,16,3439,17],[3789,0,3448,2,"pound"],[3789,4,3448,2,"pound"],[3789,9,3448,7],[3789,11,3448,9],[3789,17,3439,17],[3790,0,3449,2,"curren"],[3790,4,3449,2,"curren"],[3790,10,3449,8],[3790,12,3449,10],[3790,18,3439,17],[3791,0,3450,2,"yen"],[3791,4,3450,2,"yen"],[3791,7,3450,5],[3791,9,3450,7],[3791,15,3439,17],[3792,0,3451,2,"brvbar"],[3792,4,3451,2,"brvbar"],[3792,10,3451,8],[3792,12,3451,10],[3792,18,3439,17],[3793,0,3452,2,"sect"],[3793,4,3452,2,"sect"],[3793,8,3452,6],[3793,10,3452,8],[3793,16,3439,17],[3794,0,3453,2,"uml"],[3794,4,3453,2,"uml"],[3794,7,3453,5],[3794,9,3453,7],[3794,15,3439,17],[3795,0,3454,2,"copy"],[3795,4,3454,2,"copy"],[3795,8,3454,6],[3795,10,3454,8],[3795,16,3439,17],[3796,0,3455,2,"ordf"],[3796,4,3455,2,"ordf"],[3796,8,3455,6],[3796,10,3455,8],[3796,16,3439,17],[3797,0,3456,2,"laquo"],[3797,4,3456,2,"laquo"],[3797,9,3456,7],[3797,11,3456,9],[3797,17,3439,17],[3798,0,3457,2,"not"],[3798,4,3457,2,"not"],[3798,7,3457,5],[3798,9,3457,7],[3798,15,3439,17],[3799,0,3458,2,"shy"],[3799,4,3458,2,"shy"],[3799,7,3458,5],[3799,9,3458,7],[3799,15,3439,17],[3800,0,3459,2,"reg"],[3800,4,3459,2,"reg"],[3800,7,3459,5],[3800,9,3459,7],[3800,15,3439,17],[3801,0,3460,2,"macr"],[3801,4,3460,2,"macr"],[3801,8,3460,6],[3801,10,3460,8],[3801,16,3439,17],[3802,0,3461,2,"deg"],[3802,4,3461,2,"deg"],[3802,7,3461,5],[3802,9,3461,7],[3802,15,3439,17],[3803,0,3462,2,"plusmn"],[3803,4,3462,2,"plusmn"],[3803,10,3462,8],[3803,12,3462,10],[3803,18,3439,17],[3804,0,3463,2,"sup2"],[3804,4,3463,2,"sup2"],[3804,8,3463,6],[3804,10,3463,8],[3804,16,3439,17],[3805,0,3464,2,"sup3"],[3805,4,3464,2,"sup3"],[3805,8,3464,6],[3805,10,3464,8],[3805,16,3439,17],[3806,0,3465,2,"acute"],[3806,4,3465,2,"acute"],[3806,9,3465,7],[3806,11,3465,9],[3806,17,3439,17],[3807,0,3466,2,"micro"],[3807,4,3466,2,"micro"],[3807,9,3466,7],[3807,11,3466,9],[3807,17,3439,17],[3808,0,3467,2,"para"],[3808,4,3467,2,"para"],[3808,8,3467,6],[3808,10,3467,8],[3808,16,3439,17],[3809,0,3468,2,"middot"],[3809,4,3468,2,"middot"],[3809,10,3468,8],[3809,12,3468,10],[3809,18,3439,17],[3810,0,3469,2,"cedil"],[3810,4,3469,2,"cedil"],[3810,9,3469,7],[3810,11,3469,9],[3810,17,3439,17],[3811,0,3470,2,"sup1"],[3811,4,3470,2,"sup1"],[3811,8,3470,6],[3811,10,3470,8],[3811,16,3439,17],[3812,0,3471,2,"ordm"],[3812,4,3471,2,"ordm"],[3812,8,3471,6],[3812,10,3471,8],[3812,16,3439,17],[3813,0,3472,2,"raquo"],[3813,4,3472,2,"raquo"],[3813,9,3472,7],[3813,11,3472,9],[3813,17,3439,17],[3814,0,3473,2,"frac14"],[3814,4,3473,2,"frac14"],[3814,10,3473,8],[3814,12,3473,10],[3814,18,3439,17],[3815,0,3474,2,"frac12"],[3815,4,3474,2,"frac12"],[3815,10,3474,8],[3815,12,3474,10],[3815,18,3439,17],[3816,0,3475,2,"frac34"],[3816,4,3475,2,"frac34"],[3816,10,3475,8],[3816,12,3475,10],[3816,18,3439,17],[3817,0,3476,2,"iquest"],[3817,4,3476,2,"iquest"],[3817,10,3476,8],[3817,12,3476,10],[3817,18,3439,17],[3818,0,3477,2,"Agrave"],[3818,4,3477,2,"Agrave"],[3818,10,3477,8],[3818,12,3477,10],[3818,18,3439,17],[3819,0,3478,2,"Aacute"],[3819,4,3478,2,"Aacute"],[3819,10,3478,8],[3819,12,3478,10],[3819,18,3439,17],[3820,0,3479,2,"Acirc"],[3820,4,3479,2,"Acirc"],[3820,9,3479,7],[3820,11,3479,9],[3820,17,3439,17],[3821,0,3480,2,"Atilde"],[3821,4,3480,2,"Atilde"],[3821,10,3480,8],[3821,12,3480,10],[3821,18,3439,17],[3822,0,3481,2,"Auml"],[3822,4,3481,2,"Auml"],[3822,8,3481,6],[3822,10,3481,8],[3822,16,3439,17],[3823,0,3482,2,"Aring"],[3823,4,3482,2,"Aring"],[3823,9,3482,7],[3823,11,3482,9],[3823,17,3439,17],[3824,0,3483,2,"AElig"],[3824,4,3483,2,"AElig"],[3824,9,3483,7],[3824,11,3483,9],[3824,17,3439,17],[3825,0,3484,2,"Ccedil"],[3825,4,3484,2,"Ccedil"],[3825,10,3484,8],[3825,12,3484,10],[3825,18,3439,17],[3826,0,3485,2,"Egrave"],[3826,4,3485,2,"Egrave"],[3826,10,3485,8],[3826,12,3485,10],[3826,18,3439,17],[3827,0,3486,2,"Eacute"],[3827,4,3486,2,"Eacute"],[3827,10,3486,8],[3827,12,3486,10],[3827,18,3439,17],[3828,0,3487,2,"Ecirc"],[3828,4,3487,2,"Ecirc"],[3828,9,3487,7],[3828,11,3487,9],[3828,17,3439,17],[3829,0,3488,2,"Euml"],[3829,4,3488,2,"Euml"],[3829,8,3488,6],[3829,10,3488,8],[3829,16,3439,17],[3830,0,3489,2,"Igrave"],[3830,4,3489,2,"Igrave"],[3830,10,3489,8],[3830,12,3489,10],[3830,18,3439,17],[3831,0,3490,2,"Iacute"],[3831,4,3490,2,"Iacute"],[3831,10,3490,8],[3831,12,3490,10],[3831,18,3439,17],[3832,0,3491,2,"Icirc"],[3832,4,3491,2,"Icirc"],[3832,9,3491,7],[3832,11,3491,9],[3832,17,3439,17],[3833,0,3492,2,"Iuml"],[3833,4,3492,2,"Iuml"],[3833,8,3492,6],[3833,10,3492,8],[3833,16,3439,17],[3834,0,3493,2,"ETH"],[3834,4,3493,2,"ETH"],[3834,7,3493,5],[3834,9,3493,7],[3834,15,3439,17],[3835,0,3494,2,"Ntilde"],[3835,4,3494,2,"Ntilde"],[3835,10,3494,8],[3835,12,3494,10],[3835,18,3439,17],[3836,0,3495,2,"Ograve"],[3836,4,3495,2,"Ograve"],[3836,10,3495,8],[3836,12,3495,10],[3836,18,3439,17],[3837,0,3496,2,"Oacute"],[3837,4,3496,2,"Oacute"],[3837,10,3496,8],[3837,12,3496,10],[3837,18,3439,17],[3838,0,3497,2,"Ocirc"],[3838,4,3497,2,"Ocirc"],[3838,9,3497,7],[3838,11,3497,9],[3838,17,3439,17],[3839,0,3498,2,"Otilde"],[3839,4,3498,2,"Otilde"],[3839,10,3498,8],[3839,12,3498,10],[3839,18,3439,17],[3840,0,3499,2,"Ouml"],[3840,4,3499,2,"Ouml"],[3840,8,3499,6],[3840,10,3499,8],[3840,16,3439,17],[3841,0,3500,2,"times"],[3841,4,3500,2,"times"],[3841,9,3500,7],[3841,11,3500,9],[3841,17,3439,17],[3842,0,3501,2,"Oslash"],[3842,4,3501,2,"Oslash"],[3842,10,3501,8],[3842,12,3501,10],[3842,18,3439,17],[3843,0,3502,2,"Ugrave"],[3843,4,3502,2,"Ugrave"],[3843,10,3502,8],[3843,12,3502,10],[3843,18,3439,17],[3844,0,3503,2,"Uacute"],[3844,4,3503,2,"Uacute"],[3844,10,3503,8],[3844,12,3503,10],[3844,18,3439,17],[3845,0,3504,2,"Ucirc"],[3845,4,3504,2,"Ucirc"],[3845,9,3504,7],[3845,11,3504,9],[3845,17,3439,17],[3846,0,3505,2,"Uuml"],[3846,4,3505,2,"Uuml"],[3846,8,3505,6],[3846,10,3505,8],[3846,16,3439,17],[3847,0,3506,2,"Yacute"],[3847,4,3506,2,"Yacute"],[3847,10,3506,8],[3847,12,3506,10],[3847,18,3439,17],[3848,0,3507,2,"THORN"],[3848,4,3507,2,"THORN"],[3848,9,3507,7],[3848,11,3507,9],[3848,17,3439,17],[3849,0,3508,2,"szlig"],[3849,4,3508,2,"szlig"],[3849,9,3508,7],[3849,11,3508,9],[3849,17,3439,17],[3850,0,3509,2,"agrave"],[3850,4,3509,2,"agrave"],[3850,10,3509,8],[3850,12,3509,10],[3850,18,3439,17],[3851,0,3510,2,"aacute"],[3851,4,3510,2,"aacute"],[3851,10,3510,8],[3851,12,3510,10],[3851,18,3439,17],[3852,0,3511,2,"acirc"],[3852,4,3511,2,"acirc"],[3852,9,3511,7],[3852,11,3511,9],[3852,17,3439,17],[3853,0,3512,2,"atilde"],[3853,4,3512,2,"atilde"],[3853,10,3512,8],[3853,12,3512,10],[3853,18,3439,17],[3854,0,3513,2,"auml"],[3854,4,3513,2,"auml"],[3854,8,3513,6],[3854,10,3513,8],[3854,16,3439,17],[3855,0,3514,2,"aring"],[3855,4,3514,2,"aring"],[3855,9,3514,7],[3855,11,3514,9],[3855,17,3439,17],[3856,0,3515,2,"aelig"],[3856,4,3515,2,"aelig"],[3856,9,3515,7],[3856,11,3515,9],[3856,17,3439,17],[3857,0,3516,2,"ccedil"],[3857,4,3516,2,"ccedil"],[3857,10,3516,8],[3857,12,3516,10],[3857,18,3439,17],[3858,0,3517,2,"egrave"],[3858,4,3517,2,"egrave"],[3858,10,3517,8],[3858,12,3517,10],[3858,18,3439,17],[3859,0,3518,2,"eacute"],[3859,4,3518,2,"eacute"],[3859,10,3518,8],[3859,12,3518,10],[3859,18,3439,17],[3860,0,3519,2,"ecirc"],[3860,4,3519,2,"ecirc"],[3860,9,3519,7],[3860,11,3519,9],[3860,17,3439,17],[3861,0,3520,2,"euml"],[3861,4,3520,2,"euml"],[3861,8,3520,6],[3861,10,3520,8],[3861,16,3439,17],[3862,0,3521,2,"igrave"],[3862,4,3521,2,"igrave"],[3862,10,3521,8],[3862,12,3521,10],[3862,18,3439,17],[3863,0,3522,2,"iacute"],[3863,4,3522,2,"iacute"],[3863,10,3522,8],[3863,12,3522,10],[3863,18,3439,17],[3864,0,3523,2,"icirc"],[3864,4,3523,2,"icirc"],[3864,9,3523,7],[3864,11,3523,9],[3864,17,3439,17],[3865,0,3524,2,"iuml"],[3865,4,3524,2,"iuml"],[3865,8,3524,6],[3865,10,3524,8],[3865,16,3439,17],[3866,0,3525,2,"eth"],[3866,4,3525,2,"eth"],[3866,7,3525,5],[3866,9,3525,7],[3866,15,3439,17],[3867,0,3526,2,"ntilde"],[3867,4,3526,2,"ntilde"],[3867,10,3526,8],[3867,12,3526,10],[3867,18,3439,17],[3868,0,3527,2,"ograve"],[3868,4,3527,2,"ograve"],[3868,10,3527,8],[3868,12,3527,10],[3868,18,3439,17],[3869,0,3528,2,"oacute"],[3869,4,3528,2,"oacute"],[3869,10,3528,8],[3869,12,3528,10],[3869,18,3439,17],[3870,0,3529,2,"ocirc"],[3870,4,3529,2,"ocirc"],[3870,9,3529,7],[3870,11,3529,9],[3870,17,3439,17],[3871,0,3530,2,"otilde"],[3871,4,3530,2,"otilde"],[3871,10,3530,8],[3871,12,3530,10],[3871,18,3439,17],[3872,0,3531,2,"ouml"],[3872,4,3531,2,"ouml"],[3872,8,3531,6],[3872,10,3531,8],[3872,16,3439,17],[3873,0,3532,2,"divide"],[3873,4,3532,2,"divide"],[3873,10,3532,8],[3873,12,3532,10],[3873,18,3439,17],[3874,0,3533,2,"oslash"],[3874,4,3533,2,"oslash"],[3874,10,3533,8],[3874,12,3533,10],[3874,18,3439,17],[3875,0,3534,2,"ugrave"],[3875,4,3534,2,"ugrave"],[3875,10,3534,8],[3875,12,3534,10],[3875,18,3439,17],[3876,0,3535,2,"uacute"],[3876,4,3535,2,"uacute"],[3876,10,3535,8],[3876,12,3535,10],[3876,18,3439,17],[3877,0,3536,2,"ucirc"],[3877,4,3536,2,"ucirc"],[3877,9,3536,7],[3877,11,3536,9],[3877,17,3439,17],[3878,0,3537,2,"uuml"],[3878,4,3537,2,"uuml"],[3878,8,3537,6],[3878,10,3537,8],[3878,16,3439,17],[3879,0,3538,2,"yacute"],[3879,4,3538,2,"yacute"],[3879,10,3538,8],[3879,12,3538,10],[3879,18,3439,17],[3880,0,3539,2,"thorn"],[3880,4,3539,2,"thorn"],[3880,9,3539,7],[3880,11,3539,9],[3880,17,3439,17],[3881,0,3540,2,"yuml"],[3881,4,3540,2,"yuml"],[3881,8,3540,6],[3881,10,3540,8],[3881,16,3439,17],[3882,0,3541,2,"OElig"],[3882,4,3541,2,"OElig"],[3882,9,3541,7],[3882,11,3541,9],[3882,19,3439,17],[3883,0,3542,2,"oelig"],[3883,4,3542,2,"oelig"],[3883,9,3542,7],[3883,11,3542,9],[3883,19,3439,17],[3884,0,3543,2,"Scaron"],[3884,4,3543,2,"Scaron"],[3884,10,3543,8],[3884,12,3543,10],[3884,20,3439,17],[3885,0,3544,2,"scaron"],[3885,4,3544,2,"scaron"],[3885,10,3544,8],[3885,12,3544,10],[3885,20,3439,17],[3886,0,3545,2,"Yuml"],[3886,4,3545,2,"Yuml"],[3886,8,3545,6],[3886,10,3545,8],[3886,18,3439,17],[3887,0,3546,2,"fnof"],[3887,4,3546,2,"fnof"],[3887,8,3546,6],[3887,10,3546,8],[3887,18,3439,17],[3888,0,3547,2,"circ"],[3888,4,3547,2,"circ"],[3888,8,3547,6],[3888,10,3547,8],[3888,18,3439,17],[3889,0,3548,2,"tilde"],[3889,4,3548,2,"tilde"],[3889,9,3548,7],[3889,11,3548,9],[3889,19,3439,17],[3890,0,3549,2,"Alpha"],[3890,4,3549,2,"Alpha"],[3890,9,3549,7],[3890,11,3549,9],[3890,19,3439,17],[3891,0,3550,2,"Beta"],[3891,4,3550,2,"Beta"],[3891,8,3550,6],[3891,10,3550,8],[3891,18,3439,17],[3892,0,3551,2,"Gamma"],[3892,4,3551,2,"Gamma"],[3892,9,3551,7],[3892,11,3551,9],[3892,19,3439,17],[3893,0,3552,2,"Delta"],[3893,4,3552,2,"Delta"],[3893,9,3552,7],[3893,11,3552,9],[3893,19,3439,17],[3894,0,3553,2,"Epsilon"],[3894,4,3553,2,"Epsilon"],[3894,11,3553,9],[3894,13,3553,11],[3894,21,3439,17],[3895,0,3554,2,"Zeta"],[3895,4,3554,2,"Zeta"],[3895,8,3554,6],[3895,10,3554,8],[3895,18,3439,17],[3896,0,3555,2,"Eta"],[3896,4,3555,2,"Eta"],[3896,7,3555,5],[3896,9,3555,7],[3896,17,3439,17],[3897,0,3556,2,"Theta"],[3897,4,3556,2,"Theta"],[3897,9,3556,7],[3897,11,3556,9],[3897,19,3439,17],[3898,0,3557,2,"Iota"],[3898,4,3557,2,"Iota"],[3898,8,3557,6],[3898,10,3557,8],[3898,18,3439,17],[3899,0,3558,2,"Kappa"],[3899,4,3558,2,"Kappa"],[3899,9,3558,7],[3899,11,3558,9],[3899,19,3439,17],[3900,0,3559,2,"Lambda"],[3900,4,3559,2,"Lambda"],[3900,10,3559,8],[3900,12,3559,10],[3900,20,3439,17],[3901,0,3560,2,"Mu"],[3901,4,3560,2,"Mu"],[3901,6,3560,4],[3901,8,3560,6],[3901,16,3439,17],[3902,0,3561,2,"Nu"],[3902,4,3561,2,"Nu"],[3902,6,3561,4],[3902,8,3561,6],[3902,16,3439,17],[3903,0,3562,2,"Xi"],[3903,4,3562,2,"Xi"],[3903,6,3562,4],[3903,8,3562,6],[3903,16,3439,17],[3904,0,3563,2,"Omicron"],[3904,4,3563,2,"Omicron"],[3904,11,3563,9],[3904,13,3563,11],[3904,21,3439,17],[3905,0,3564,2,"Pi"],[3905,4,3564,2,"Pi"],[3905,6,3564,4],[3905,8,3564,6],[3905,16,3439,17],[3906,0,3565,2,"Rho"],[3906,4,3565,2,"Rho"],[3906,7,3565,5],[3906,9,3565,7],[3906,17,3439,17],[3907,0,3566,2,"Sigma"],[3907,4,3566,2,"Sigma"],[3907,9,3566,7],[3907,11,3566,9],[3907,19,3439,17],[3908,0,3567,2,"Tau"],[3908,4,3567,2,"Tau"],[3908,7,3567,5],[3908,9,3567,7],[3908,17,3439,17],[3909,0,3568,2,"Upsilon"],[3909,4,3568,2,"Upsilon"],[3909,11,3568,9],[3909,13,3568,11],[3909,21,3439,17],[3910,0,3569,2,"Phi"],[3910,4,3569,2,"Phi"],[3910,7,3569,5],[3910,9,3569,7],[3910,17,3439,17],[3911,0,3570,2,"Chi"],[3911,4,3570,2,"Chi"],[3911,7,3570,5],[3911,9,3570,7],[3911,17,3439,17],[3912,0,3571,2,"Psi"],[3912,4,3571,2,"Psi"],[3912,7,3571,5],[3912,9,3571,7],[3912,17,3439,17],[3913,0,3572,2,"Omega"],[3913,4,3572,2,"Omega"],[3913,9,3572,7],[3913,11,3572,9],[3913,19,3439,17],[3914,0,3573,2,"alpha"],[3914,4,3573,2,"alpha"],[3914,9,3573,7],[3914,11,3573,9],[3914,19,3439,17],[3915,0,3574,2,"beta"],[3915,4,3574,2,"beta"],[3915,8,3574,6],[3915,10,3574,8],[3915,18,3439,17],[3916,0,3575,2,"gamma"],[3916,4,3575,2,"gamma"],[3916,9,3575,7],[3916,11,3575,9],[3916,19,3439,17],[3917,0,3576,2,"delta"],[3917,4,3576,2,"delta"],[3917,9,3576,7],[3917,11,3576,9],[3917,19,3439,17],[3918,0,3577,2,"epsilon"],[3918,4,3577,2,"epsilon"],[3918,11,3577,9],[3918,13,3577,11],[3918,21,3439,17],[3919,0,3578,2,"zeta"],[3919,4,3578,2,"zeta"],[3919,8,3578,6],[3919,10,3578,8],[3919,18,3439,17],[3920,0,3579,2,"eta"],[3920,4,3579,2,"eta"],[3920,7,3579,5],[3920,9,3579,7],[3920,17,3439,17],[3921,0,3580,2,"theta"],[3921,4,3580,2,"theta"],[3921,9,3580,7],[3921,11,3580,9],[3921,19,3439,17],[3922,0,3581,2,"iota"],[3922,4,3581,2,"iota"],[3922,8,3581,6],[3922,10,3581,8],[3922,18,3439,17],[3923,0,3582,2,"kappa"],[3923,4,3582,2,"kappa"],[3923,9,3582,7],[3923,11,3582,9],[3923,19,3439,17],[3924,0,3583,2,"lambda"],[3924,4,3583,2,"lambda"],[3924,10,3583,8],[3924,12,3583,10],[3924,20,3439,17],[3925,0,3584,2,"mu"],[3925,4,3584,2,"mu"],[3925,6,3584,4],[3925,8,3584,6],[3925,16,3439,17],[3926,0,3585,2,"nu"],[3926,4,3585,2,"nu"],[3926,6,3585,4],[3926,8,3585,6],[3926,16,3439,17],[3927,0,3586,2,"xi"],[3927,4,3586,2,"xi"],[3927,6,3586,4],[3927,8,3586,6],[3927,16,3439,17],[3928,0,3587,2,"omicron"],[3928,4,3587,2,"omicron"],[3928,11,3587,9],[3928,13,3587,11],[3928,21,3439,17],[3929,0,3588,2,"pi"],[3929,4,3588,2,"pi"],[3929,6,3588,4],[3929,8,3588,6],[3929,16,3439,17],[3930,0,3589,2,"rho"],[3930,4,3589,2,"rho"],[3930,7,3589,5],[3930,9,3589,7],[3930,17,3439,17],[3931,0,3590,2,"sigmaf"],[3931,4,3590,2,"sigmaf"],[3931,10,3590,8],[3931,12,3590,10],[3931,20,3439,17],[3932,0,3591,2,"sigma"],[3932,4,3591,2,"sigma"],[3932,9,3591,7],[3932,11,3591,9],[3932,19,3439,17],[3933,0,3592,2,"tau"],[3933,4,3592,2,"tau"],[3933,7,3592,5],[3933,9,3592,7],[3933,17,3439,17],[3934,0,3593,2,"upsilon"],[3934,4,3593,2,"upsilon"],[3934,11,3593,9],[3934,13,3593,11],[3934,21,3439,17],[3935,0,3594,2,"phi"],[3935,4,3594,2,"phi"],[3935,7,3594,5],[3935,9,3594,7],[3935,17,3439,17],[3936,0,3595,2,"chi"],[3936,4,3595,2,"chi"],[3936,7,3595,5],[3936,9,3595,7],[3936,17,3439,17],[3937,0,3596,2,"psi"],[3937,4,3596,2,"psi"],[3937,7,3596,5],[3937,9,3596,7],[3937,17,3439,17],[3938,0,3597,2,"omega"],[3938,4,3597,2,"omega"],[3938,9,3597,7],[3938,11,3597,9],[3938,19,3439,17],[3939,0,3598,2,"thetasym"],[3939,4,3598,2,"thetasym"],[3939,12,3598,10],[3939,14,3598,12],[3939,22,3439,17],[3940,0,3599,2,"upsih"],[3940,4,3599,2,"upsih"],[3940,9,3599,7],[3940,11,3599,9],[3940,19,3439,17],[3941,0,3600,2,"piv"],[3941,4,3600,2,"piv"],[3941,7,3600,5],[3941,9,3600,7],[3941,17,3439,17],[3942,0,3601,2,"ensp"],[3942,4,3601,2,"ensp"],[3942,8,3601,6],[3942,10,3601,8],[3942,18,3439,17],[3943,0,3602,2,"emsp"],[3943,4,3602,2,"emsp"],[3943,8,3602,6],[3943,10,3602,8],[3943,18,3439,17],[3944,0,3603,2,"thinsp"],[3944,4,3603,2,"thinsp"],[3944,10,3603,8],[3944,12,3603,10],[3944,20,3439,17],[3945,0,3604,2,"zwnj"],[3945,4,3604,2,"zwnj"],[3945,8,3604,6],[3945,10,3604,8],[3945,18,3439,17],[3946,0,3605,2,"zwj"],[3946,4,3605,2,"zwj"],[3946,7,3605,5],[3946,9,3605,7],[3946,17,3439,17],[3947,0,3606,2,"lrm"],[3947,4,3606,2,"lrm"],[3947,7,3606,5],[3947,9,3606,7],[3947,17,3439,17],[3948,0,3607,2,"rlm"],[3948,4,3607,2,"rlm"],[3948,7,3607,5],[3948,9,3607,7],[3948,17,3439,17],[3949,0,3608,2,"ndash"],[3949,4,3608,2,"ndash"],[3949,9,3608,7],[3949,11,3608,9],[3949,19,3439,17],[3950,0,3609,2,"mdash"],[3950,4,3609,2,"mdash"],[3950,9,3609,7],[3950,11,3609,9],[3950,19,3439,17],[3951,0,3610,2,"lsquo"],[3951,4,3610,2,"lsquo"],[3951,9,3610,7],[3951,11,3610,9],[3951,19,3439,17],[3952,0,3611,2,"rsquo"],[3952,4,3611,2,"rsquo"],[3952,9,3611,7],[3952,11,3611,9],[3952,19,3439,17],[3953,0,3612,2,"sbquo"],[3953,4,3612,2,"sbquo"],[3953,9,3612,7],[3953,11,3612,9],[3953,19,3439,17],[3954,0,3613,2,"ldquo"],[3954,4,3613,2,"ldquo"],[3954,9,3613,7],[3954,11,3613,9],[3954,19,3439,17],[3955,0,3614,2,"rdquo"],[3955,4,3614,2,"rdquo"],[3955,9,3614,7],[3955,11,3614,9],[3955,19,3439,17],[3956,0,3615,2,"bdquo"],[3956,4,3615,2,"bdquo"],[3956,9,3615,7],[3956,11,3615,9],[3956,19,3439,17],[3957,0,3616,2,"dagger"],[3957,4,3616,2,"dagger"],[3957,10,3616,8],[3957,12,3616,10],[3957,20,3439,17],[3958,0,3617,2,"Dagger"],[3958,4,3617,2,"Dagger"],[3958,10,3617,8],[3958,12,3617,10],[3958,20,3439,17],[3959,0,3618,2,"bull"],[3959,4,3618,2,"bull"],[3959,8,3618,6],[3959,10,3618,8],[3959,18,3439,17],[3960,0,3619,2,"hellip"],[3960,4,3619,2,"hellip"],[3960,10,3619,8],[3960,12,3619,10],[3960,20,3439,17],[3961,0,3620,2,"permil"],[3961,4,3620,2,"permil"],[3961,10,3620,8],[3961,12,3620,10],[3961,20,3439,17],[3962,0,3621,2,"prime"],[3962,4,3621,2,"prime"],[3962,9,3621,7],[3962,11,3621,9],[3962,19,3439,17],[3963,0,3622,2,"Prime"],[3963,4,3622,2,"Prime"],[3963,9,3622,7],[3963,11,3622,9],[3963,19,3439,17],[3964,0,3623,2,"lsaquo"],[3964,4,3623,2,"lsaquo"],[3964,10,3623,8],[3964,12,3623,10],[3964,20,3439,17],[3965,0,3624,2,"rsaquo"],[3965,4,3624,2,"rsaquo"],[3965,10,3624,8],[3965,12,3624,10],[3965,20,3439,17],[3966,0,3625,2,"oline"],[3966,4,3625,2,"oline"],[3966,9,3625,7],[3966,11,3625,9],[3966,19,3439,17],[3967,0,3626,2,"frasl"],[3967,4,3626,2,"frasl"],[3967,9,3626,7],[3967,11,3626,9],[3967,19,3439,17],[3968,0,3627,2,"euro"],[3968,4,3627,2,"euro"],[3968,8,3627,6],[3968,10,3627,8],[3968,18,3439,17],[3969,0,3628,2,"image"],[3969,4,3628,2,"image"],[3969,9,3628,7],[3969,11,3628,9],[3969,19,3439,17],[3970,0,3629,2,"weierp"],[3970,4,3629,2,"weierp"],[3970,10,3629,8],[3970,12,3629,10],[3970,20,3439,17],[3971,0,3630,2,"real"],[3971,4,3630,2,"real"],[3971,8,3630,6],[3971,10,3630,8],[3971,18,3439,17],[3972,0,3631,2,"trade"],[3972,4,3631,2,"trade"],[3972,9,3631,7],[3972,11,3631,9],[3972,19,3439,17],[3973,0,3632,2,"alefsym"],[3973,4,3632,2,"alefsym"],[3973,11,3632,9],[3973,13,3632,11],[3973,21,3439,17],[3974,0,3633,2,"larr"],[3974,4,3633,2,"larr"],[3974,8,3633,6],[3974,10,3633,8],[3974,18,3439,17],[3975,0,3634,2,"uarr"],[3975,4,3634,2,"uarr"],[3975,8,3634,6],[3975,10,3634,8],[3975,18,3439,17],[3976,0,3635,2,"rarr"],[3976,4,3635,2,"rarr"],[3976,8,3635,6],[3976,10,3635,8],[3976,18,3439,17],[3977,0,3636,2,"darr"],[3977,4,3636,2,"darr"],[3977,8,3636,6],[3977,10,3636,8],[3977,18,3439,17],[3978,0,3637,2,"harr"],[3978,4,3637,2,"harr"],[3978,8,3637,6],[3978,10,3637,8],[3978,18,3439,17],[3979,0,3638,2,"crarr"],[3979,4,3638,2,"crarr"],[3979,9,3638,7],[3979,11,3638,9],[3979,19,3439,17],[3980,0,3639,2,"lArr"],[3980,4,3639,2,"lArr"],[3980,8,3639,6],[3980,10,3639,8],[3980,18,3439,17],[3981,0,3640,2,"uArr"],[3981,4,3640,2,"uArr"],[3981,8,3640,6],[3981,10,3640,8],[3981,18,3439,17],[3982,0,3641,2,"rArr"],[3982,4,3641,2,"rArr"],[3982,8,3641,6],[3982,10,3641,8],[3982,18,3439,17],[3983,0,3642,2,"dArr"],[3983,4,3642,2,"dArr"],[3983,8,3642,6],[3983,10,3642,8],[3983,18,3439,17],[3984,0,3643,2,"hArr"],[3984,4,3643,2,"hArr"],[3984,8,3643,6],[3984,10,3643,8],[3984,18,3439,17],[3985,0,3644,2,"forall"],[3985,4,3644,2,"forall"],[3985,10,3644,8],[3985,12,3644,10],[3985,20,3439,17],[3986,0,3645,2,"part"],[3986,4,3645,2,"part"],[3986,8,3645,6],[3986,10,3645,8],[3986,18,3439,17],[3987,0,3646,2,"exist"],[3987,4,3646,2,"exist"],[3987,9,3646,7],[3987,11,3646,9],[3987,19,3439,17],[3988,0,3647,2,"empty"],[3988,4,3647,2,"empty"],[3988,9,3647,7],[3988,11,3647,9],[3988,19,3439,17],[3989,0,3648,2,"nabla"],[3989,4,3648,2,"nabla"],[3989,9,3648,7],[3989,11,3648,9],[3989,19,3439,17],[3990,0,3649,2,"isin"],[3990,4,3649,2,"isin"],[3990,8,3649,6],[3990,10,3649,8],[3990,18,3439,17],[3991,0,3650,2,"notin"],[3991,4,3650,2,"notin"],[3991,9,3650,7],[3991,11,3650,9],[3991,19,3439,17],[3992,0,3651,2,"ni"],[3992,4,3651,2,"ni"],[3992,6,3651,4],[3992,8,3651,6],[3992,16,3439,17],[3993,0,3652,2,"prod"],[3993,4,3652,2,"prod"],[3993,8,3652,6],[3993,10,3652,8],[3993,18,3439,17],[3994,0,3653,2,"sum"],[3994,4,3653,2,"sum"],[3994,7,3653,5],[3994,9,3653,7],[3994,17,3439,17],[3995,0,3654,2,"minus"],[3995,4,3654,2,"minus"],[3995,9,3654,7],[3995,11,3654,9],[3995,19,3439,17],[3996,0,3655,2,"lowast"],[3996,4,3655,2,"lowast"],[3996,10,3655,8],[3996,12,3655,10],[3996,20,3439,17],[3997,0,3656,2,"radic"],[3997,4,3656,2,"radic"],[3997,9,3656,7],[3997,11,3656,9],[3997,19,3439,17],[3998,0,3657,2,"prop"],[3998,4,3657,2,"prop"],[3998,8,3657,6],[3998,10,3657,8],[3998,18,3439,17],[3999,0,3658,2,"infin"],[3999,4,3658,2,"infin"],[3999,9,3658,7],[3999,11,3658,9],[3999,19,3439,17],[4000,0,3659,2,"ang"],[4000,4,3659,2,"ang"],[4000,7,3659,5],[4000,9,3659,7],[4000,17,3439,17],[4001,0,3660,2,"and"],[4001,4,3660,2,"and"],[4001,7,3660,5],[4001,9,3660,7],[4001,17,3439,17],[4002,0,3661,2,"or"],[4002,4,3661,2,"or"],[4002,6,3661,4],[4002,8,3661,6],[4002,16,3439,17],[4003,0,3662,2,"cap"],[4003,4,3662,2,"cap"],[4003,7,3662,5],[4003,9,3662,7],[4003,17,3439,17],[4004,0,3663,2,"cup"],[4004,4,3663,2,"cup"],[4004,7,3663,5],[4004,9,3663,7],[4004,17,3439,17],[4005,0,3664,2,"int"],[4005,4,3664,2,"int"],[4005,7,3664,5],[4005,9,3664,7],[4005,17,3439,17],[4006,0,3665,2,"there4"],[4006,4,3665,2,"there4"],[4006,10,3665,8],[4006,12,3665,10],[4006,20,3439,17],[4007,0,3666,2,"sim"],[4007,4,3666,2,"sim"],[4007,7,3666,5],[4007,9,3666,7],[4007,17,3439,17],[4008,0,3667,2,"cong"],[4008,4,3667,2,"cong"],[4008,8,3667,6],[4008,10,3667,8],[4008,18,3439,17],[4009,0,3668,2,"asymp"],[4009,4,3668,2,"asymp"],[4009,9,3668,7],[4009,11,3668,9],[4009,19,3439,17],[4010,0,3669,2,"ne"],[4010,4,3669,2,"ne"],[4010,6,3669,4],[4010,8,3669,6],[4010,16,3439,17],[4011,0,3670,2,"equiv"],[4011,4,3670,2,"equiv"],[4011,9,3670,7],[4011,11,3670,9],[4011,19,3439,17],[4012,0,3671,2,"le"],[4012,4,3671,2,"le"],[4012,6,3671,4],[4012,8,3671,6],[4012,16,3439,17],[4013,0,3672,2,"ge"],[4013,4,3672,2,"ge"],[4013,6,3672,4],[4013,8,3672,6],[4013,16,3439,17],[4014,0,3673,2,"sub"],[4014,4,3673,2,"sub"],[4014,7,3673,5],[4014,9,3673,7],[4014,17,3439,17],[4015,0,3674,2,"sup"],[4015,4,3674,2,"sup"],[4015,7,3674,5],[4015,9,3674,7],[4015,17,3439,17],[4016,0,3675,2,"nsub"],[4016,4,3675,2,"nsub"],[4016,8,3675,6],[4016,10,3675,8],[4016,18,3439,17],[4017,0,3676,2,"sube"],[4017,4,3676,2,"sube"],[4017,8,3676,6],[4017,10,3676,8],[4017,18,3439,17],[4018,0,3677,2,"supe"],[4018,4,3677,2,"supe"],[4018,8,3677,6],[4018,10,3677,8],[4018,18,3439,17],[4019,0,3678,2,"oplus"],[4019,4,3678,2,"oplus"],[4019,9,3678,7],[4019,11,3678,9],[4019,19,3439,17],[4020,0,3679,2,"otimes"],[4020,4,3679,2,"otimes"],[4020,10,3679,8],[4020,12,3679,10],[4020,20,3439,17],[4021,0,3680,2,"perp"],[4021,4,3680,2,"perp"],[4021,8,3680,6],[4021,10,3680,8],[4021,18,3439,17],[4022,0,3681,2,"sdot"],[4022,4,3681,2,"sdot"],[4022,8,3681,6],[4022,10,3681,8],[4022,18,3439,17],[4023,0,3682,2,"lceil"],[4023,4,3682,2,"lceil"],[4023,9,3682,7],[4023,11,3682,9],[4023,19,3439,17],[4024,0,3683,2,"rceil"],[4024,4,3683,2,"rceil"],[4024,9,3683,7],[4024,11,3683,9],[4024,19,3439,17],[4025,0,3684,2,"lfloor"],[4025,4,3684,2,"lfloor"],[4025,10,3684,8],[4025,12,3684,10],[4025,20,3439,17],[4026,0,3685,2,"rfloor"],[4026,4,3685,2,"rfloor"],[4026,10,3685,8],[4026,12,3685,10],[4026,20,3439,17],[4027,0,3686,2,"lang"],[4027,4,3686,2,"lang"],[4027,8,3686,6],[4027,10,3686,8],[4027,18,3439,17],[4028,0,3687,2,"rang"],[4028,4,3687,2,"rang"],[4028,8,3687,6],[4028,10,3687,8],[4028,18,3439,17],[4029,0,3688,2,"loz"],[4029,4,3688,2,"loz"],[4029,7,3688,5],[4029,9,3688,7],[4029,17,3439,17],[4030,0,3689,2,"spades"],[4030,4,3689,2,"spades"],[4030,10,3689,8],[4030,12,3689,10],[4030,20,3439,17],[4031,0,3690,2,"clubs"],[4031,4,3690,2,"clubs"],[4031,9,3690,7],[4031,11,3690,9],[4031,19,3439,17],[4032,0,3691,2,"hearts"],[4032,4,3691,2,"hearts"],[4032,10,3691,8],[4032,12,3691,10],[4032,20,3439,17],[4033,0,3692,2,"diams"],[4033,4,3692,2,"diams"],[4033,9,3692,7],[4033,11,3692,9],[4034,0,3439,17],[4034,3,3439,0],[4035,0,3695,0],[4035,6,3695,6,"HEX_NUMBER"],[4035,16,3695,16],[4035,19,3695,19],[4035,34,3695,0],[4036,0,3696,0],[4036,6,3696,6,"DECIMAL_NUMBER"],[4036,20,3696,20],[4036,23,3696,23],[4036,30,3696,0],[4037,0,3697,0,"types$1"],[4037,2,3697,0,"types$1"],[4037,9,3697,7],[4037,10,3697,8,"j_oTag"],[4037,16,3697,0],[4037,19,3697,17],[4037,23,3697,21,"TokContext"],[4037,33,3697,17],[4037,34,3697,32],[4037,40,3697,17],[4037,42,3697,40],[4037,47,3697,17],[4037,48,3697,0],[4038,0,3698,0,"types$1"],[4038,2,3698,0,"types$1"],[4038,9,3698,7],[4038,10,3698,8,"j_cTag"],[4038,16,3698,0],[4038,19,3698,17],[4038,23,3698,21,"TokContext"],[4038,33,3698,17],[4038,34,3698,32],[4038,41,3698,17],[4038,43,3698,41],[4038,48,3698,17],[4038,49,3698,0],[4039,0,3699,0,"types$1"],[4039,2,3699,0,"types$1"],[4039,9,3699,7],[4039,10,3699,8,"j_expr"],[4039,16,3699,0],[4039,19,3699,17],[4039,23,3699,21,"TokContext"],[4039,33,3699,17],[4039,34,3699,32],[4039,50,3699,17],[4039,52,3699,50],[4039,56,3699,17],[4039,58,3699,56],[4039,62,3699,17],[4039,63,3699,0],[4040,0,3700,0,"types"],[4040,2,3700,0,"types"],[4040,7,3700,5],[4040,8,3700,6,"jsxName"],[4040,15,3700,0],[4040,18,3700,16],[4040,22,3700,20,"TokenType"],[4040,31,3700,16],[4040,32,3700,30],[4040,41,3700,16],[4040,42,3700,0],[4041,0,3701,0,"types"],[4041,2,3701,0,"types"],[4041,7,3701,5],[4041,8,3701,6,"jsxText"],[4041,15,3701,0],[4041,18,3701,16],[4041,22,3701,20,"TokenType"],[4041,31,3701,16],[4041,32,3701,30],[4041,41,3701,16],[4041,43,3701,41],[4042,0,3702,2,"beforeExpr"],[4042,4,3702,2,"beforeExpr"],[4042,14,3702,12],[4042,16,3702,14],[4043,0,3701,41],[4043,3,3701,16],[4043,4,3701,0],[4044,0,3704,0,"types"],[4044,2,3704,0,"types"],[4044,7,3704,5],[4044,8,3704,6,"jsxTagStart"],[4044,19,3704,0],[4044,22,3704,20],[4044,26,3704,24,"TokenType"],[4044,35,3704,20],[4044,36,3704,34],[4044,49,3704,20],[4044,51,3704,49],[4045,0,3705,2,"startsExpr"],[4045,4,3705,2,"startsExpr"],[4045,14,3705,12],[4045,16,3705,14],[4046,0,3704,49],[4046,3,3704,20],[4046,4,3704,0],[4047,0,3707,0,"types"],[4047,2,3707,0,"types"],[4047,7,3707,5],[4047,8,3707,6,"jsxTagEnd"],[4047,17,3707,0],[4047,20,3707,18],[4047,24,3707,22,"TokenType"],[4047,33,3707,18],[4047,34,3707,32],[4047,45,3707,18],[4047,46,3707,0],[4049,0,3709,0,"types"],[4049,2,3709,0,"types"],[4049,7,3709,5],[4049,8,3709,6,"jsxTagStart"],[4049,19,3709,0],[4049,20,3709,18,"updateContext"],[4049,33,3709,0],[4049,36,3709,34],[4049,48,3709,46],[4050,0,3710,2],[4050,9,3710,7,"state"],[4050,14,3710,2],[4050,15,3710,13,"context"],[4050,22,3710,2],[4050,23,3710,21,"push"],[4050,27,3710,2],[4050,28,3710,26,"types$1"],[4050,35,3710,33],[4050,36,3710,34,"j_expr"],[4050,42,3710,2],[4051,0,3711,2],[4051,9,3711,7,"state"],[4051,14,3711,2],[4051,15,3711,13,"context"],[4051,22,3711,2],[4051,23,3711,21,"push"],[4051,27,3711,2],[4051,28,3711,26,"types$1"],[4051,35,3711,33],[4051,36,3711,34,"j_oTag"],[4051,42,3711,2],[4052,0,3712,2],[4052,9,3712,7,"state"],[4052,14,3712,2],[4052,15,3712,13,"exprAllowed"],[4052,26,3712,2],[4052,29,3712,27],[4052,34,3712,2],[4053,0,3713,1],[4053,3,3709,0],[4055,0,3715,0,"types"],[4055,2,3715,0,"types"],[4055,7,3715,5],[4055,8,3715,6,"jsxTagEnd"],[4055,17,3715,0],[4055,18,3715,16,"updateContext"],[4055,31,3715,0],[4055,34,3715,32],[4055,44,3715,42,"prevType"],[4055,52,3715,32],[4055,54,3715,52],[4056,0,3716,2],[4056,8,3716,8,"out"],[4056,11,3716,11],[4056,14,3716,14],[4056,19,3716,19,"state"],[4056,24,3716,14],[4056,25,3716,25,"context"],[4056,32,3716,14],[4056,33,3716,33,"pop"],[4056,36,3716,14],[4056,38,3716,2],[4058,0,3718,2],[4058,8,3718,6,"out"],[4058,11,3718,9],[4058,16,3718,14,"types$1"],[4058,23,3718,21],[4058,24,3718,22,"j_oTag"],[4058,30,3718,6],[4058,34,3718,32,"prevType"],[4058,42,3718,40],[4058,47,3718,45,"types"],[4058,52,3718,50],[4058,53,3718,51,"slash"],[4058,58,3718,6],[4058,62,3718,60,"out"],[4058,65,3718,63],[4058,70,3718,68,"types$1"],[4058,77,3718,75],[4058,78,3718,76,"j_cTag"],[4058,84,3718,2],[4058,86,3718,84],[4059,0,3719,4],[4059,11,3719,9,"state"],[4059,16,3719,4],[4059,17,3719,15,"context"],[4059,24,3719,4],[4059,25,3719,23,"pop"],[4059,28,3719,4],[4060,0,3720,4],[4060,11,3720,9,"state"],[4060,16,3720,4],[4060,17,3720,15,"exprAllowed"],[4060,28,3720,4],[4060,31,3720,29],[4060,36,3720,34,"curContext"],[4060,46,3720,29],[4060,53,3720,51,"types$1"],[4060,60,3720,58],[4060,61,3720,59,"j_expr"],[4060,67,3720,4],[4061,0,3721,3],[4061,5,3718,2],[4061,11,3721,9],[4062,0,3722,4],[4062,11,3722,9,"state"],[4062,16,3722,4],[4062,17,3722,15,"exprAllowed"],[4062,28,3722,4],[4062,31,3722,29],[4062,35,3722,4],[4063,0,3723,3],[4064,0,3724,1],[4064,3,3715,0],[4066,0,3726,0],[4066,11,3726,9,"isFragment"],[4066,21,3726,0],[4066,22,3726,20,"object"],[4066,28,3726,0],[4066,30,3726,28],[4067,0,3727,2],[4067,11,3727,9,"object"],[4067,17,3727,15],[4067,20,3727,18,"object"],[4067,26,3727,24],[4067,27,3727,25,"type"],[4067,31,3727,18],[4067,36,3727,34],[4067,56,3727,18],[4067,60,3727,58,"object"],[4067,66,3727,64],[4067,67,3727,65,"type"],[4067,71,3727,58],[4067,76,3727,74],[4067,96,3727,15],[4067,99,3727,97],[4067,104,3727,2],[4068,0,3728,1],[4070,0,3730,0],[4070,11,3730,9,"getQualifiedJSXName"],[4070,30,3730,0],[4070,31,3730,29,"object"],[4070,37,3730,0],[4070,39,3730,37],[4071,0,3731,2],[4071,8,3731,6,"object"],[4071,14,3731,12],[4071,15,3731,13,"type"],[4071,19,3731,6],[4071,24,3731,22],[4071,39,3731,2],[4071,41,3731,39],[4072,0,3732,4],[4072,13,3732,11,"object"],[4072,19,3732,17],[4072,20,3732,18,"name"],[4072,24,3732,4],[4073,0,3733,3],[4075,0,3735,2],[4075,8,3735,6,"object"],[4075,14,3735,12],[4075,15,3735,13,"type"],[4075,19,3735,6],[4075,24,3735,22],[4075,43,3735,2],[4075,45,3735,43],[4076,0,3736,4],[4076,13,3736,11,"object"],[4076,19,3736,17],[4076,20,3736,18,"namespace"],[4076,29,3736,11],[4076,30,3736,28,"name"],[4076,34,3736,11],[4076,37,3736,35],[4076,40,3736,11],[4076,43,3736,41,"object"],[4076,49,3736,47],[4076,50,3736,48,"name"],[4076,54,3736,41],[4076,55,3736,53,"name"],[4076,59,3736,4],[4077,0,3737,3],[4079,0,3739,2],[4079,8,3739,6,"object"],[4079,14,3739,12],[4079,15,3739,13,"type"],[4079,19,3739,6],[4079,24,3739,22],[4079,45,3739,2],[4079,47,3739,45],[4080,0,3740,4],[4080,13,3740,11,"getQualifiedJSXName"],[4080,32,3740,30],[4080,33,3740,31,"object"],[4080,39,3740,37],[4080,40,3740,38,"object"],[4080,46,3740,30],[4080,47,3740,11],[4080,50,3740,48],[4080,53,3740,11],[4080,56,3740,54,"getQualifiedJSXName"],[4080,75,3740,73],[4080,76,3740,74,"object"],[4080,82,3740,80],[4080,83,3740,81,"property"],[4080,91,3740,73],[4080,92,3740,4],[4081,0,3741,3],[4083,0,3743,2],[4083,10,3743,8],[4083,14,3743,12,"Error"],[4083,19,3743,8],[4083,20,3743,18],[4083,51,3743,49,"object"],[4083,57,3743,55],[4083,58,3743,56,"type"],[4083,62,3743,8],[4083,63,3743,2],[4084,0,3744,1],[4086,0,3746,0],[4086,6,3746,4,"jsx"],[4086,9,3746,7],[4086,12,3746,11],[4086,21,3746,4,"jsx"],[4086,24,3746,11],[4086,25,3746,11,"superClass"],[4086,35,3746,21],[4087,0,3746,21],[4088,0,3746,21],[4090,0,3746,21],[4091,0,3746,21],[4093,0,3746,21],[4094,0,3746,21],[4096,0,3746,21],[4097,0,3746,21],[4098,0,3746,21],[4098,39,3747,17],[4099,0,3748,4],[4099,14,3748,8,"out"],[4099,17,3748,11],[4099,20,3748,14],[4099,22,3748,4],[4100,0,3749,4],[4100,14,3749,8,"chunkStart"],[4100,24,3749,18],[4100,27,3749,21],[4100,32,3749,26,"state"],[4100,37,3749,21],[4100,38,3749,32,"pos"],[4100,41,3749,4],[4102,0,3751,4],[4102,19,3751,13],[4103,0,3752,6],[4103,16,3752,10],[4103,21,3752,15,"state"],[4103,26,3752,10],[4103,27,3752,21,"pos"],[4103,30,3752,10],[4103,34,3752,28],[4103,39,3752,33,"length"],[4103,45,3752,6],[4103,47,3752,41],[4104,0,3753,8],[4104,20,3753,14],[4104,25,3753,19,"raise"],[4104,30,3753,14],[4104,31,3753,25],[4104,36,3753,30,"state"],[4104,41,3753,25],[4104,42,3753,36,"start"],[4104,47,3753,14],[4104,49,3753,43],[4104,76,3753,14],[4104,77,3753,8],[4105,0,3754,7],[4107,0,3756,6],[4107,16,3756,12,"ch"],[4107,18,3756,14],[4107,21,3756,17],[4107,26,3756,22,"input"],[4107,31,3756,17],[4107,32,3756,28,"charCodeAt"],[4107,42,3756,17],[4107,43,3756,39],[4107,48,3756,44,"state"],[4107,53,3756,39],[4107,54,3756,50,"pos"],[4107,57,3756,17],[4107,58,3756,6],[4109,0,3758,6],[4109,20,3758,14,"ch"],[4109,22,3758,6],[4110,0,3759,8],[4110,19,3759,13],[4110,21,3759,8],[4111,0,3760,8],[4111,19,3760,13],[4111,22,3760,8],[4112,0,3761,10],[4112,20,3761,14],[4112,25,3761,19,"state"],[4112,30,3761,14],[4112,31,3761,25,"pos"],[4112,34,3761,14],[4112,39,3761,33],[4112,44,3761,38,"state"],[4112,49,3761,33],[4112,50,3761,44,"start"],[4112,55,3761,10],[4112,57,3761,51],[4113,0,3762,12],[4113,22,3762,16,"ch"],[4113,24,3762,18],[4113,29,3762,23],[4113,31,3762,16],[4113,35,3762,29],[4113,40,3762,34,"state"],[4113,45,3762,29],[4113,46,3762,40,"exprAllowed"],[4113,57,3762,12],[4113,59,3762,53],[4114,0,3763,14],[4114,22,3763,16],[4114,27,3763,21,"state"],[4114,32,3763,16],[4114,33,3763,27,"pos"],[4114,36,3763,14],[4115,0,3764,14],[4115,27,3764,21],[4115,32,3764,26,"finishToken"],[4115,43,3764,21],[4115,44,3764,38,"types"],[4115,49,3764,43],[4115,50,3764,44,"jsxTagStart"],[4115,61,3764,21],[4115,62,3764,14],[4116,0,3765,13],[4118,0,3767,12],[4118,103,3767,42,"ch"],[4118,105,3767,12],[4119,0,3768,11],[4121,0,3770,10,"out"],[4121,16,3770,10,"out"],[4121,19,3770,13],[4121,23,3770,17],[4121,28,3770,22,"input"],[4121,33,3770,17],[4121,34,3770,28,"slice"],[4121,39,3770,17],[4121,40,3770,34,"chunkStart"],[4121,50,3770,17],[4121,52,3770,46],[4121,57,3770,51,"state"],[4121,62,3770,46],[4121,63,3770,57,"pos"],[4121,66,3770,17],[4121,67,3770,10],[4122,0,3771,10],[4122,23,3771,17],[4122,28,3771,22,"finishToken"],[4122,39,3771,17],[4122,40,3771,34,"types"],[4122,45,3771,39],[4122,46,3771,40,"jsxText"],[4122,53,3771,17],[4122,55,3771,49,"out"],[4122,58,3771,17],[4122,59,3771,10],[4124,0,3773,8],[4124,19,3773,13],[4124,21,3773,8],[4125,0,3774,10,"out"],[4125,16,3774,10,"out"],[4125,19,3774,13],[4125,23,3774,17],[4125,28,3774,22,"input"],[4125,33,3774,17],[4125,34,3774,28,"slice"],[4125,39,3774,17],[4125,40,3774,34,"chunkStart"],[4125,50,3774,17],[4125,52,3774,46],[4125,57,3774,51,"state"],[4125,62,3774,46],[4125,63,3774,57,"pos"],[4125,66,3774,17],[4125,67,3774,10],[4126,0,3775,10,"out"],[4126,16,3775,10,"out"],[4126,19,3775,13],[4126,23,3775,17],[4126,28,3775,22,"jsxReadEntity"],[4126,41,3775,17],[4126,43,3775,10],[4127,0,3776,10,"chunkStart"],[4127,16,3776,10,"chunkStart"],[4127,26,3776,20],[4127,29,3776,23],[4127,34,3776,28,"state"],[4127,39,3776,23],[4127,40,3776,34,"pos"],[4127,43,3776,10],[4128,0,3777,10],[4130,0,3779,8],[4131,0,3780,10],[4131,20,3780,14,"isNewLine"],[4131,29,3780,23],[4131,30,3780,24,"ch"],[4131,32,3780,23],[4131,33,3780,10],[4131,35,3780,29],[4132,0,3781,12,"out"],[4132,18,3781,12,"out"],[4132,21,3781,15],[4132,25,3781,19],[4132,30,3781,24,"input"],[4132,35,3781,19],[4132,36,3781,30,"slice"],[4132,41,3781,19],[4132,42,3781,36,"chunkStart"],[4132,52,3781,19],[4132,54,3781,48],[4132,59,3781,53,"state"],[4132,64,3781,48],[4132,65,3781,59,"pos"],[4132,68,3781,19],[4132,69,3781,12],[4133,0,3782,12,"out"],[4133,18,3782,12,"out"],[4133,21,3782,15],[4133,25,3782,19],[4133,30,3782,24,"jsxReadNewLine"],[4133,44,3782,19],[4133,45,3782,39],[4133,49,3782,19],[4133,50,3782,12],[4134,0,3783,12,"chunkStart"],[4134,18,3783,12,"chunkStart"],[4134,28,3783,22],[4134,31,3783,25],[4134,36,3783,30,"state"],[4134,41,3783,25],[4134,42,3783,36,"pos"],[4134,45,3783,12],[4135,0,3784,11],[4135,17,3780,10],[4135,23,3784,17],[4136,0,3785,12],[4136,20,3785,14],[4136,25,3785,19,"state"],[4136,30,3785,14],[4136,31,3785,25,"pos"],[4136,34,3785,12],[4137,0,3786,11],[4139,0,3758,6],[4140,0,3789,5],[4141,0,3790,3],[4142,0,3746,21],[4143,0,3746,21],[4144,0,3746,21],[4144,39,3792,17,"normalizeCRLF"],[4144,52,3746,21],[4144,54,3792,32],[4145,0,3793,4],[4145,14,3793,10,"ch"],[4145,16,3793,12],[4145,19,3793,15],[4145,24,3793,20,"input"],[4145,29,3793,15],[4145,30,3793,26,"charCodeAt"],[4145,40,3793,15],[4145,41,3793,37],[4145,46,3793,42,"state"],[4145,51,3793,37],[4145,52,3793,48,"pos"],[4145,55,3793,15],[4145,56,3793,4],[4146,0,3794,4],[4146,14,3794,8,"out"],[4146,17,3794,4],[4147,0,3795,4],[4147,12,3795,6],[4147,17,3795,11,"state"],[4147,22,3795,6],[4147,23,3795,17,"pos"],[4147,26,3795,4],[4149,0,3797,4],[4149,14,3797,8,"ch"],[4149,16,3797,10],[4149,21,3797,15],[4149,23,3797,8],[4149,27,3797,21],[4149,32,3797,26,"input"],[4149,37,3797,21],[4149,38,3797,32,"charCodeAt"],[4149,48,3797,21],[4149,49,3797,43],[4149,54,3797,48,"state"],[4149,59,3797,43],[4149,60,3797,54,"pos"],[4149,63,3797,21],[4149,69,3797,63],[4149,71,3797,4],[4149,73,3797,67],[4150,0,3798,6],[4150,14,3798,8],[4150,19,3798,13,"state"],[4150,24,3798,8],[4150,25,3798,19,"pos"],[4150,28,3798,6],[4151,0,3799,6,"out"],[4151,12,3799,6,"out"],[4151,15,3799,9],[4151,18,3799,12,"normalizeCRLF"],[4151,31,3799,25],[4151,34,3799,28],[4151,38,3799,25],[4151,41,3799,35],[4151,47,3799,6],[4152,0,3800,5],[4152,11,3797,4],[4152,17,3800,11],[4153,0,3801,6,"out"],[4153,12,3801,6,"out"],[4153,15,3801,9],[4153,18,3801,12,"String"],[4153,24,3801,18],[4153,25,3801,19,"fromCharCode"],[4153,37,3801,12],[4153,38,3801,32,"ch"],[4153,40,3801,12],[4153,41,3801,6],[4154,0,3802,5],[4156,0,3804,4],[4156,12,3804,6],[4156,17,3804,11,"state"],[4156,22,3804,6],[4156,23,3804,17,"curLine"],[4156,30,3804,4],[4157,0,3805,4],[4157,15,3805,9,"state"],[4157,20,3805,4],[4157,21,3805,15,"lineStart"],[4157,30,3805,4],[4157,33,3805,27],[4157,38,3805,32,"state"],[4157,43,3805,27],[4157,44,3805,38,"pos"],[4157,47,3805,4],[4158,0,3806,4],[4158,17,3806,11,"out"],[4158,20,3806,4],[4159,0,3807,3],[4160,0,3746,21],[4161,0,3746,21],[4162,0,3746,21],[4162,38,3809,16,"quote"],[4162,43,3746,21],[4162,45,3809,23],[4163,0,3810,4],[4163,14,3810,8,"out"],[4163,17,3810,11],[4163,20,3810,14],[4163,22,3810,4],[4164,0,3811,4],[4164,14,3811,8,"chunkStart"],[4164,24,3811,18],[4164,27,3811,21],[4164,29,3811,23],[4164,34,3811,28,"state"],[4164,39,3811,23],[4164,40,3811,34,"pos"],[4164,43,3811,4],[4166,0,3813,4],[4166,19,3813,13],[4167,0,3814,6],[4167,16,3814,10],[4167,21,3814,15,"state"],[4167,26,3814,10],[4167,27,3814,21,"pos"],[4167,30,3814,10],[4167,34,3814,28],[4167,39,3814,33,"length"],[4167,45,3814,6],[4167,47,3814,41],[4168,0,3815,8],[4168,20,3815,14],[4168,25,3815,19,"raise"],[4168,30,3815,14],[4168,31,3815,25],[4168,36,3815,30,"state"],[4168,41,3815,25],[4168,42,3815,36,"start"],[4168,47,3815,14],[4168,49,3815,43],[4168,79,3815,14],[4168,80,3815,8],[4169,0,3816,7],[4171,0,3818,6],[4171,16,3818,12,"ch"],[4171,18,3818,14],[4171,21,3818,17],[4171,26,3818,22,"input"],[4171,31,3818,17],[4171,32,3818,28,"charCodeAt"],[4171,42,3818,17],[4171,43,3818,39],[4171,48,3818,44,"state"],[4171,53,3818,39],[4171,54,3818,50,"pos"],[4171,57,3818,17],[4171,58,3818,6],[4172,0,3819,6],[4172,16,3819,10,"ch"],[4172,18,3819,12],[4172,23,3819,17,"quote"],[4172,28,3819,6],[4172,30,3819,24],[4174,0,3821,6],[4174,16,3821,10,"ch"],[4174,18,3821,12],[4174,23,3821,17],[4174,25,3821,6],[4174,27,3821,21],[4175,0,3822,8,"out"],[4175,14,3822,8,"out"],[4175,17,3822,11],[4175,21,3822,15],[4175,26,3822,20,"input"],[4175,31,3822,15],[4175,32,3822,26,"slice"],[4175,37,3822,15],[4175,38,3822,32,"chunkStart"],[4175,48,3822,15],[4175,50,3822,44],[4175,55,3822,49,"state"],[4175,60,3822,44],[4175,61,3822,55,"pos"],[4175,64,3822,15],[4175,65,3822,8],[4176,0,3823,8,"out"],[4176,14,3823,8,"out"],[4176,17,3823,11],[4176,21,3823,15],[4176,26,3823,20,"jsxReadEntity"],[4176,39,3823,15],[4176,41,3823,8],[4177,0,3824,8,"chunkStart"],[4177,14,3824,8,"chunkStart"],[4177,24,3824,18],[4177,27,3824,21],[4177,32,3824,26,"state"],[4177,37,3824,21],[4177,38,3824,32,"pos"],[4177,41,3824,8],[4178,0,3825,7],[4178,13,3821,6],[4178,19,3825,13],[4178,23,3825,17,"isNewLine"],[4178,32,3825,26],[4178,33,3825,27,"ch"],[4178,35,3825,26],[4178,36,3825,13],[4178,38,3825,32],[4179,0,3826,8,"out"],[4179,14,3826,8,"out"],[4179,17,3826,11],[4179,21,3826,15],[4179,26,3826,20,"input"],[4179,31,3826,15],[4179,32,3826,26,"slice"],[4179,37,3826,15],[4179,38,3826,32,"chunkStart"],[4179,48,3826,15],[4179,50,3826,44],[4179,55,3826,49,"state"],[4179,60,3826,44],[4179,61,3826,55,"pos"],[4179,64,3826,15],[4179,65,3826,8],[4180,0,3827,8,"out"],[4180,14,3827,8,"out"],[4180,17,3827,11],[4180,21,3827,15],[4180,26,3827,20,"jsxReadNewLine"],[4180,40,3827,15],[4180,41,3827,35],[4180,46,3827,15],[4180,47,3827,8],[4181,0,3828,8,"chunkStart"],[4181,14,3828,8,"chunkStart"],[4181,24,3828,18],[4181,27,3828,21],[4181,32,3828,26,"state"],[4181,37,3828,21],[4181,38,3828,32,"pos"],[4181,41,3828,8],[4182,0,3829,7],[4182,13,3825,13],[4182,19,3829,13],[4183,0,3830,8],[4183,16,3830,10],[4183,21,3830,15,"state"],[4183,26,3830,10],[4183,27,3830,21,"pos"],[4183,30,3830,8],[4184,0,3831,7],[4185,0,3832,5],[4187,0,3834,4,"out"],[4187,10,3834,4,"out"],[4187,13,3834,7],[4187,17,3834,11],[4187,22,3834,16,"input"],[4187,27,3834,11],[4187,28,3834,22,"slice"],[4187,33,3834,11],[4187,34,3834,28,"chunkStart"],[4187,44,3834,11],[4187,46,3834,40],[4187,51,3834,45,"state"],[4187,56,3834,40],[4187,57,3834,51,"pos"],[4187,60,3834,40],[4187,62,3834,11],[4187,63,3834,4],[4188,0,3835,4],[4188,17,3835,11],[4188,22,3835,16,"finishToken"],[4188,33,3835,11],[4188,34,3835,28,"types"],[4188,39,3835,33],[4188,40,3835,34,"string"],[4188,46,3835,11],[4188,48,3835,42,"out"],[4188,51,3835,11],[4188,52,3835,4],[4189,0,3836,3],[4190,0,3746,21],[4191,0,3746,21],[4192,0,3746,21],[4192,40,3838,18],[4193,0,3839,4],[4193,14,3839,8,"str"],[4193,17,3839,11],[4193,20,3839,14],[4193,22,3839,4],[4194,0,3840,4],[4194,14,3840,8,"count"],[4194,19,3840,13],[4194,22,3840,16],[4194,23,3840,4],[4195,0,3841,4],[4195,14,3841,8,"entity"],[4195,20,3841,4],[4196,0,3842,4],[4196,14,3842,8,"ch"],[4196,16,3842,10],[4196,19,3842,13],[4196,24,3842,18,"input"],[4196,29,3842,13],[4196,30,3842,24],[4196,35,3842,29,"state"],[4196,40,3842,24],[4196,41,3842,35,"pos"],[4196,44,3842,13],[4196,45,3842,4],[4197,0,3843,4],[4197,14,3843,10,"startPos"],[4197,22,3843,18],[4197,25,3843,21],[4197,27,3843,23],[4197,32,3843,28,"state"],[4197,37,3843,23],[4197,38,3843,34,"pos"],[4197,41,3843,4],[4199,0,3845,4],[4199,17,3845,11],[4199,22,3845,16,"state"],[4199,27,3845,11],[4199,28,3845,22,"pos"],[4199,31,3845,11],[4199,34,3845,28],[4199,39,3845,33,"length"],[4199,45,3845,11],[4199,49,3845,43,"count"],[4199,54,3845,48],[4199,59,3845,53],[4199,61,3845,4],[4199,63,3845,57],[4200,0,3846,6,"ch"],[4200,12,3846,6,"ch"],[4200,14,3846,8],[4200,17,3846,11],[4200,22,3846,16,"input"],[4200,27,3846,11],[4200,28,3846,22],[4200,33,3846,27,"state"],[4200,38,3846,22],[4200,39,3846,33,"pos"],[4200,42,3846,22],[4200,44,3846,11],[4200,45,3846,6],[4202,0,3848,6],[4202,16,3848,10,"ch"],[4202,18,3848,12],[4202,23,3848,17],[4202,26,3848,6],[4202,28,3848,22],[4203,0,3849,8],[4203,18,3849,12,"str"],[4203,21,3849,15],[4203,22,3849,16],[4203,23,3849,15],[4203,24,3849,12],[4203,29,3849,23],[4203,32,3849,8],[4203,34,3849,28],[4204,0,3850,10],[4204,20,3850,14,"str"],[4204,23,3850,17],[4204,24,3850,18],[4204,25,3850,17],[4204,26,3850,14],[4204,31,3850,25],[4204,34,3850,10],[4204,36,3850,30],[4205,0,3851,12,"str"],[4205,18,3851,12,"str"],[4205,21,3851,15],[4205,24,3851,18,"str"],[4205,27,3851,21],[4205,28,3851,22,"substr"],[4205,34,3851,18],[4205,35,3851,29],[4205,36,3851,18],[4205,37,3851,12],[4207,0,3853,12],[4207,22,3853,16,"HEX_NUMBER"],[4207,32,3853,26],[4207,33,3853,27,"test"],[4207,37,3853,16],[4207,38,3853,32,"str"],[4207,41,3853,16],[4207,42,3853,12],[4207,44,3853,38],[4208,0,3854,14,"entity"],[4208,20,3854,14,"entity"],[4208,26,3854,20],[4208,29,3854,23,"String"],[4208,35,3854,29],[4208,36,3854,30,"fromCodePoint"],[4208,49,3854,23],[4208,50,3854,44,"parseInt"],[4208,58,3854,52],[4208,59,3854,53,"str"],[4208,62,3854,52],[4208,64,3854,58],[4208,66,3854,52],[4208,67,3854,23],[4208,68,3854,14],[4209,0,3855,13],[4210,0,3856,11],[4210,17,3850,10],[4210,23,3856,17],[4211,0,3857,12,"str"],[4211,18,3857,12,"str"],[4211,21,3857,15],[4211,24,3857,18,"str"],[4211,27,3857,21],[4211,28,3857,22,"substr"],[4211,34,3857,18],[4211,35,3857,29],[4211,36,3857,18],[4211,37,3857,12],[4213,0,3859,12],[4213,22,3859,16,"DECIMAL_NUMBER"],[4213,36,3859,30],[4213,37,3859,31,"test"],[4213,41,3859,16],[4213,42,3859,36,"str"],[4213,45,3859,16],[4213,46,3859,12],[4213,48,3859,42],[4214,0,3860,14,"entity"],[4214,20,3860,14,"entity"],[4214,26,3860,20],[4214,29,3860,23,"String"],[4214,35,3860,29],[4214,36,3860,30,"fromCodePoint"],[4214,49,3860,23],[4214,50,3860,44,"parseInt"],[4214,58,3860,52],[4214,59,3860,53,"str"],[4214,62,3860,52],[4214,64,3860,58],[4214,66,3860,52],[4214,67,3860,23],[4214,68,3860,14],[4215,0,3861,13],[4216,0,3862,11],[4217,0,3863,9],[4217,15,3849,8],[4217,21,3863,15],[4218,0,3864,10,"entity"],[4218,16,3864,10,"entity"],[4218,22,3864,16],[4218,25,3864,19,"entities"],[4218,33,3864,27],[4218,34,3864,28,"str"],[4218,37,3864,27],[4218,38,3864,10],[4219,0,3865,9],[4221,0,3867,8],[4222,0,3868,7],[4224,0,3870,6,"str"],[4224,12,3870,6,"str"],[4224,15,3870,9],[4224,19,3870,13,"ch"],[4224,21,3870,6],[4225,0,3871,5],[4227,0,3873,4],[4227,14,3873,8],[4227,15,3873,9,"entity"],[4227,21,3873,4],[4227,23,3873,17],[4228,0,3874,6],[4228,17,3874,11,"state"],[4228,22,3874,6],[4228,23,3874,17,"pos"],[4228,26,3874,6],[4228,29,3874,23,"startPos"],[4228,37,3874,6],[4229,0,3875,6],[4229,19,3875,13],[4229,22,3875,6],[4230,0,3876,5],[4232,0,3878,4],[4232,17,3878,11,"entity"],[4232,23,3878,4],[4233,0,3879,3],[4234,0,3746,21],[4235,0,3746,21],[4236,0,3746,21],[4236,38,3881,16],[4237,0,3882,4],[4237,14,3882,8,"ch"],[4237,16,3882,4],[4238,0,3883,4],[4238,14,3883,10,"start"],[4238,19,3883,15],[4238,22,3883,18],[4238,27,3883,23,"state"],[4238,32,3883,18],[4238,33,3883,29,"pos"],[4238,36,3883,4],[4240,0,3885,4],[4240,13,3885,7],[4241,0,3886,6,"ch"],[4241,12,3886,6,"ch"],[4241,14,3886,8],[4241,17,3886,11],[4241,22,3886,16,"input"],[4241,27,3886,11],[4241,28,3886,22,"charCodeAt"],[4241,38,3886,11],[4241,39,3886,33],[4241,41,3886,35],[4241,46,3886,40,"state"],[4241,51,3886,35],[4241,52,3886,46,"pos"],[4241,55,3886,11],[4241,56,3886,6],[4242,0,3887,5],[4242,11,3885,4],[4242,19,3887,13,"isIdentifierChar"],[4242,35,3887,29],[4242,36,3887,30,"ch"],[4242,38,3887,29],[4242,39,3887,13],[4242,43,3887,37,"ch"],[4242,45,3887,39],[4242,50,3887,44],[4242,52,3885,4],[4244,0,3889,4],[4244,17,3889,11],[4244,22,3889,16,"finishToken"],[4244,33,3889,11],[4244,34,3889,28,"types"],[4244,39,3889,33],[4244,40,3889,34,"jsxName"],[4244,47,3889,11],[4244,49,3889,43],[4244,54,3889,48,"input"],[4244,59,3889,43],[4244,60,3889,54,"slice"],[4244,65,3889,43],[4244,66,3889,60,"start"],[4244,71,3889,43],[4244,73,3889,67],[4244,78,3889,72,"state"],[4244,83,3889,67],[4244,84,3889,78,"pos"],[4244,87,3889,43],[4244,88,3889,11],[4244,89,3889,4],[4245,0,3890,3],[4246,0,3746,21],[4247,0,3746,21],[4248,0,3746,21],[4248,45,3892,23],[4249,0,3893,4],[4249,14,3893,10,"node"],[4249,18,3893,14],[4249,21,3893,17],[4249,26,3893,22,"startNode"],[4249,35,3893,17],[4249,37,3893,4],[4251,0,3895,4],[4251,14,3895,8],[4251,19,3895,13,"match"],[4251,24,3895,8],[4251,25,3895,19,"types"],[4251,30,3895,24],[4251,31,3895,25,"jsxName"],[4251,38,3895,8],[4251,39,3895,4],[4251,41,3895,35],[4252,0,3896,6,"node"],[4252,12,3896,6,"node"],[4252,16,3896,10],[4252,17,3896,11,"name"],[4252,21,3896,6],[4252,24,3896,18],[4252,29,3896,23,"state"],[4252,34,3896,18],[4252,35,3896,29,"value"],[4252,40,3896,6],[4253,0,3897,5],[4253,11,3895,4],[4253,17,3897,11],[4253,21,3897,15],[4253,26,3897,20,"state"],[4253,31,3897,15],[4253,32,3897,26,"type"],[4253,36,3897,15],[4253,37,3897,31,"keyword"],[4253,44,3897,11],[4253,46,3897,40],[4254,0,3898,6,"node"],[4254,12,3898,6,"node"],[4254,16,3898,10],[4254,17,3898,11,"name"],[4254,21,3898,6],[4254,24,3898,18],[4254,29,3898,23,"state"],[4254,34,3898,18],[4254,35,3898,29,"type"],[4254,39,3898,18],[4254,40,3898,34,"keyword"],[4254,47,3898,6],[4255,0,3899,5],[4255,11,3897,11],[4255,17,3899,11],[4256,0,3900,6],[4256,17,3900,11,"unexpected"],[4256,27,3900,6],[4257,0,3901,5],[4259,0,3903,4],[4259,15,3903,9,"next"],[4259,19,3903,4],[4260,0,3904,4],[4260,17,3904,11],[4260,22,3904,16,"finishNode"],[4260,32,3904,11],[4260,33,3904,27,"node"],[4260,37,3904,11],[4260,39,3904,33],[4260,54,3904,11],[4260,55,3904,4],[4261,0,3905,3],[4262,0,3746,21],[4263,0,3746,21],[4264,0,3746,21],[4264,49,3907,27],[4265,0,3908,4],[4265,14,3908,10,"startPos"],[4265,22,3908,18],[4265,25,3908,21],[4265,30,3908,26,"state"],[4265,35,3908,21],[4265,36,3908,32,"start"],[4265,41,3908,4],[4266,0,3909,4],[4266,14,3909,10,"startLoc"],[4266,22,3909,18],[4266,25,3909,21],[4266,30,3909,26,"state"],[4266,35,3909,21],[4266,36,3909,32,"startLoc"],[4266,44,3909,4],[4267,0,3910,4],[4267,14,3910,10,"name"],[4267,18,3910,14],[4267,21,3910,17],[4267,26,3910,22,"jsxParseIdentifier"],[4267,44,3910,17],[4267,46,3910,4],[4268,0,3911,4],[4268,14,3911,8],[4268,15,3911,9],[4268,20,3911,14,"eat"],[4268,23,3911,9],[4268,24,3911,18,"types"],[4268,29,3911,23],[4268,30,3911,24,"colon"],[4268,35,3911,9],[4268,36,3911,4],[4268,38,3911,32],[4268,45,3911,39,"name"],[4268,49,3911,32],[4269,0,3912,4],[4269,14,3912,10,"node"],[4269,18,3912,14],[4269,21,3912,17],[4269,26,3912,22,"startNodeAt"],[4269,37,3912,17],[4269,38,3912,34,"startPos"],[4269,46,3912,17],[4269,48,3912,44,"startLoc"],[4269,56,3912,17],[4269,57,3912,4],[4270,0,3913,4,"node"],[4270,10,3913,4,"node"],[4270,14,3913,8],[4270,15,3913,9,"namespace"],[4270,24,3913,4],[4270,27,3913,21,"name"],[4270,31,3913,4],[4271,0,3914,4,"node"],[4271,10,3914,4,"node"],[4271,14,3914,8],[4271,15,3914,9,"name"],[4271,19,3914,4],[4271,22,3914,16],[4271,27,3914,21,"jsxParseIdentifier"],[4271,45,3914,16],[4271,47,3914,4],[4272,0,3915,4],[4272,17,3915,11],[4272,22,3915,16,"finishNode"],[4272,32,3915,11],[4272,33,3915,27,"node"],[4272,37,3915,11],[4272,39,3915,33],[4272,58,3915,11],[4272,59,3915,4],[4273,0,3916,3],[4274,0,3746,21],[4275,0,3746,21],[4276,0,3746,21],[4276,46,3918,24],[4277,0,3919,4],[4277,14,3919,10,"startPos"],[4277,22,3919,18],[4277,25,3919,21],[4277,30,3919,26,"state"],[4277,35,3919,21],[4277,36,3919,32,"start"],[4277,41,3919,4],[4278,0,3920,4],[4278,14,3920,10,"startLoc"],[4278,22,3920,18],[4278,25,3920,21],[4278,30,3920,26,"state"],[4278,35,3920,21],[4278,36,3920,32,"startLoc"],[4278,44,3920,4],[4279,0,3921,4],[4279,14,3921,8,"node"],[4279,18,3921,12],[4279,21,3921,15],[4279,26,3921,20,"jsxParseNamespacedName"],[4279,48,3921,15],[4279,50,3921,4],[4281,0,3923,4],[4281,14,3923,8,"node"],[4281,18,3923,12],[4281,19,3923,13,"type"],[4281,23,3923,8],[4281,28,3923,22],[4281,47,3923,4],[4281,49,3923,43],[4282,0,3924,6],[4282,19,3924,13,"node"],[4282,23,3924,6],[4283,0,3925,5],[4285,0,3927,4],[4285,17,3927,11],[4285,22,3927,16,"eat"],[4285,25,3927,11],[4285,26,3927,20,"types"],[4285,31,3927,25],[4285,32,3927,26,"dot"],[4285,35,3927,11],[4285,36,3927,4],[4285,38,3927,32],[4286,0,3928,6],[4286,16,3928,12,"newNode"],[4286,23,3928,19],[4286,26,3928,22],[4286,31,3928,27,"startNodeAt"],[4286,42,3928,22],[4286,43,3928,39,"startPos"],[4286,51,3928,22],[4286,53,3928,49,"startLoc"],[4286,61,3928,22],[4286,62,3928,6],[4287,0,3929,6,"newNode"],[4287,12,3929,6,"newNode"],[4287,19,3929,13],[4287,20,3929,14,"object"],[4287,26,3929,6],[4287,29,3929,23,"node"],[4287,33,3929,6],[4288,0,3930,6,"newNode"],[4288,12,3930,6,"newNode"],[4288,19,3930,13],[4288,20,3930,14,"property"],[4288,28,3930,6],[4288,31,3930,25],[4288,36,3930,30,"jsxParseIdentifier"],[4288,54,3930,25],[4288,56,3930,6],[4289,0,3931,6,"node"],[4289,12,3931,6,"node"],[4289,16,3931,10],[4289,19,3931,13],[4289,24,3931,18,"finishNode"],[4289,34,3931,13],[4289,35,3931,29,"newNode"],[4289,42,3931,13],[4289,44,3931,38],[4289,65,3931,13],[4289,66,3931,6],[4290,0,3932,5],[4292,0,3934,4],[4292,17,3934,11,"node"],[4292,21,3934,4],[4293,0,3935,3],[4294,0,3746,21],[4295,0,3746,21],[4296,0,3746,21],[4296,49,3937,27],[4297,0,3938,4],[4297,14,3938,8,"node"],[4297,18,3938,4],[4299,0,3940,4],[4299,18,3940,12],[4299,23,3940,17,"state"],[4299,28,3940,12],[4299,29,3940,23,"type"],[4299,33,3940,4],[4300,0,3941,6],[4300,17,3941,11,"types"],[4300,22,3941,16],[4300,23,3941,17,"braceL"],[4300,29,3941,6],[4301,0,3942,8,"node"],[4301,14,3942,8,"node"],[4301,18,3942,12],[4301,21,3942,15],[4301,26,3942,20,"startNode"],[4301,35,3942,15],[4301,37,3942,8],[4302,0,3943,8],[4302,19,3943,13,"next"],[4302,23,3943,8],[4303,0,3944,8,"node"],[4303,14,3944,8,"node"],[4303,18,3944,12],[4303,21,3944,15],[4303,26,3944,20,"jsxParseExpressionContainer"],[4303,53,3944,15],[4303,54,3944,48,"node"],[4303,58,3944,15],[4303,59,3944,8],[4305,0,3946,8],[4305,18,3946,12,"node"],[4305,22,3946,16],[4305,23,3946,17,"expression"],[4305,33,3946,12],[4305,34,3946,28,"type"],[4305,38,3946,12],[4305,43,3946,37],[4305,63,3946,8],[4305,65,3946,59],[4306,0,3947,10],[4306,21,3947,15,"raise"],[4306,26,3947,10],[4306,27,3947,21,"node"],[4306,31,3947,25],[4306,32,3947,26,"start"],[4306,37,3947,10],[4306,39,3947,33],[4306,100,3947,10],[4307,0,3948,9],[4309,0,3950,8],[4309,21,3950,15,"node"],[4309,25,3950,8],[4311,0,3952,6],[4311,17,3952,11,"types"],[4311,22,3952,16],[4311,23,3952,17,"jsxTagStart"],[4311,34,3952,6],[4312,0,3953,6],[4312,17,3953,11,"types"],[4312,22,3953,16],[4312,23,3953,17,"string"],[4312,29,3953,6],[4313,0,3954,8],[4313,21,3954,15],[4313,26,3954,20,"parseExprAtom"],[4313,39,3954,15],[4313,41,3954,8],[4315,0,3956,6],[4316,0,3957,8],[4316,20,3957,14],[4316,25,3957,19,"raise"],[4316,30,3957,14],[4316,31,3957,25],[4316,36,3957,30,"state"],[4316,41,3957,25],[4316,42,3957,36,"start"],[4316,47,3957,14],[4316,49,3957,43],[4316,112,3957,14],[4316,113,3957,8],[4317,0,3940,4],[4318,0,3959,3],[4319,0,3746,21],[4320,0,3746,21],[4321,0,3746,21],[4321,50,3961,28],[4322,0,3962,4],[4322,14,3962,10,"node"],[4322,18,3962,14],[4322,21,3962,17],[4322,26,3962,22,"startNodeAt"],[4322,37,3962,17],[4322,38,3962,34],[4322,43,3962,39,"state"],[4322,48,3962,34],[4322,49,3962,45,"lastTokEnd"],[4322,59,3962,17],[4322,61,3962,57],[4322,66,3962,62,"state"],[4322,71,3962,57],[4322,72,3962,68,"lastTokEndLoc"],[4322,85,3962,17],[4322,86,3962,4],[4323,0,3963,4],[4323,17,3963,11],[4323,22,3963,16,"finishNodeAt"],[4323,34,3963,11],[4323,35,3963,29,"node"],[4323,39,3963,11],[4323,41,3963,35],[4323,61,3963,11],[4323,63,3963,57],[4323,68,3963,62,"state"],[4323,73,3963,57],[4323,74,3963,68,"start"],[4323,79,3963,11],[4323,81,3963,75],[4323,86,3963,80,"state"],[4323,91,3963,75],[4323,92,3963,86,"startLoc"],[4323,100,3963,11],[4323,101,3963,4],[4324,0,3964,3],[4325,0,3746,21],[4326,0,3746,21],[4327,0,3746,21],[4327,44,3966,22,"node"],[4327,48,3746,21],[4327,50,3966,28],[4328,0,3967,4],[4328,15,3967,9,"next"],[4328,19,3967,4],[4329,0,3968,4,"node"],[4329,10,3968,4,"node"],[4329,14,3968,8],[4329,15,3968,9,"expression"],[4329,25,3968,4],[4329,28,3968,22],[4329,33,3968,27,"parseExpression"],[4329,48,3968,22],[4329,50,3968,4],[4330,0,3969,4],[4330,15,3969,9,"expect"],[4330,21,3969,4],[4330,22,3969,16,"types"],[4330,27,3969,21],[4330,28,3969,22,"braceR"],[4330,34,3969,4],[4331,0,3970,4],[4331,17,3970,11],[4331,22,3970,16,"finishNode"],[4331,32,3970,11],[4331,33,3970,27,"node"],[4331,37,3970,11],[4331,39,3970,33],[4331,55,3970,11],[4331,56,3970,4],[4332,0,3971,3],[4333,0,3746,21],[4334,0,3746,21],[4335,0,3746,21],[4335,52,3973,30,"node"],[4335,56,3746,21],[4335,58,3973,36],[4336,0,3974,4],[4336,14,3974,8],[4336,19,3974,13,"match"],[4336,24,3974,8],[4336,25,3974,19,"types"],[4336,30,3974,24],[4336,31,3974,25,"braceR"],[4336,37,3974,8],[4336,38,3974,4],[4336,40,3974,34],[4337,0,3975,6,"node"],[4337,12,3975,6,"node"],[4337,16,3975,10],[4337,17,3975,11,"expression"],[4337,27,3975,6],[4337,30,3975,24],[4337,35,3975,29,"jsxParseEmptyExpression"],[4337,58,3975,24],[4337,60,3975,6],[4338,0,3976,5],[4338,11,3974,4],[4338,17,3976,11],[4339,0,3977,6,"node"],[4339,12,3977,6,"node"],[4339,16,3977,10],[4339,17,3977,11,"expression"],[4339,27,3977,6],[4339,30,3977,24],[4339,35,3977,29,"parseExpression"],[4339,50,3977,24],[4339,52,3977,6],[4340,0,3978,5],[4342,0,3980,4],[4342,15,3980,9,"expect"],[4342,21,3980,4],[4342,22,3980,16,"types"],[4342,27,3980,21],[4342,28,3980,22,"braceR"],[4342,34,3980,4],[4343,0,3981,4],[4343,17,3981,11],[4343,22,3981,16,"finishNode"],[4343,32,3981,11],[4343,33,3981,27,"node"],[4343,37,3981,11],[4343,39,3981,33],[4343,63,3981,11],[4343,64,3981,4],[4344,0,3982,3],[4345,0,3746,21],[4346,0,3746,21],[4347,0,3746,21],[4347,44,3984,22],[4348,0,3985,4],[4348,14,3985,10,"node"],[4348,18,3985,14],[4348,21,3985,17],[4348,26,3985,22,"startNode"],[4348,35,3985,17],[4348,37,3985,4],[4350,0,3987,4],[4350,14,3987,8],[4350,19,3987,13,"eat"],[4350,22,3987,8],[4350,23,3987,17,"types"],[4350,28,3987,22],[4350,29,3987,23,"braceL"],[4350,35,3987,8],[4350,36,3987,4],[4350,38,3987,32],[4351,0,3988,6],[4351,17,3988,11,"expect"],[4351,23,3988,6],[4351,24,3988,18,"types"],[4351,29,3988,23],[4351,30,3988,24,"ellipsis"],[4351,38,3988,6],[4352,0,3989,6,"node"],[4352,12,3989,6,"node"],[4352,16,3989,10],[4352,17,3989,11,"argument"],[4352,25,3989,6],[4352,28,3989,22],[4352,33,3989,27,"parseMaybeAssign"],[4352,49,3989,22],[4352,51,3989,6],[4353,0,3990,6],[4353,17,3990,11,"expect"],[4353,23,3990,6],[4353,24,3990,18,"types"],[4353,29,3990,23],[4353,30,3990,24,"braceR"],[4353,36,3990,6],[4354,0,3991,6],[4354,19,3991,13],[4354,24,3991,18,"finishNode"],[4354,34,3991,13],[4354,35,3991,29,"node"],[4354,39,3991,13],[4354,41,3991,35],[4354,61,3991,13],[4354,62,3991,6],[4355,0,3992,5],[4357,0,3994,4,"node"],[4357,10,3994,4,"node"],[4357,14,3994,8],[4357,15,3994,9,"name"],[4357,19,3994,4],[4357,22,3994,16],[4357,27,3994,21,"jsxParseNamespacedName"],[4357,49,3994,16],[4357,51,3994,4],[4358,0,3995,4,"node"],[4358,10,3995,4,"node"],[4358,14,3995,8],[4358,15,3995,9,"value"],[4358,20,3995,4],[4358,23,3995,17],[4358,28,3995,22,"eat"],[4358,31,3995,17],[4358,32,3995,26,"types"],[4358,37,3995,31],[4358,38,3995,32,"eq"],[4358,40,3995,17],[4358,44,3995,38],[4358,49,3995,43,"jsxParseAttributeValue"],[4358,71,3995,38],[4358,73,3995,17],[4358,76,3995,70],[4358,80,3995,4],[4359,0,3996,4],[4359,17,3996,11],[4359,22,3996,16,"finishNode"],[4359,32,3996,11],[4359,33,3996,27,"node"],[4359,37,3996,11],[4359,39,3996,33],[4359,53,3996,11],[4359,54,3996,4],[4360,0,3997,3],[4361,0,3746,21],[4362,0,3746,21],[4363,0,3746,21],[4363,49,3999,27,"startPos"],[4363,57,3746,21],[4363,59,3999,37,"startLoc"],[4363,67,3746,21],[4363,69,3999,47],[4364,0,4000,4],[4364,14,4000,10,"node"],[4364,18,4000,14],[4364,21,4000,17],[4364,26,4000,22,"startNodeAt"],[4364,37,4000,17],[4364,38,4000,34,"startPos"],[4364,46,4000,17],[4364,48,4000,44,"startLoc"],[4364,56,4000,17],[4364,57,4000,4],[4366,0,4002,4],[4366,14,4002,8],[4366,19,4002,13,"match"],[4366,24,4002,8],[4366,25,4002,19,"types"],[4366,30,4002,24],[4366,31,4002,25,"jsxTagEnd"],[4366,40,4002,8],[4366,41,4002,4],[4366,43,4002,37],[4367,0,4003,6],[4367,17,4003,11,"expect"],[4367,23,4003,6],[4367,24,4003,18,"types"],[4367,29,4003,23],[4367,30,4003,24,"jsxTagEnd"],[4367,39,4003,6],[4368,0,4004,6],[4368,19,4004,13],[4368,24,4004,18,"finishNode"],[4368,34,4004,13],[4368,35,4004,29,"node"],[4368,39,4004,13],[4368,41,4004,35],[4368,61,4004,13],[4368,62,4004,6],[4369,0,4005,5],[4371,0,4007,4,"node"],[4371,10,4007,4,"node"],[4371,14,4007,8],[4371,15,4007,9,"name"],[4371,19,4007,4],[4371,22,4007,16],[4371,27,4007,21,"jsxParseElementName"],[4371,46,4007,16],[4371,48,4007,4],[4372,0,4008,4],[4372,17,4008,11],[4372,22,4008,16,"jsxParseOpeningElementAfterName"],[4372,53,4008,11],[4372,54,4008,48,"node"],[4372,58,4008,11],[4372,59,4008,4],[4373,0,4009,3],[4374,0,3746,21],[4375,0,3746,21],[4376,0,3746,21],[4376,56,4011,34,"node"],[4376,60,3746,21],[4376,62,4011,40],[4377,0,4012,4],[4377,14,4012,10,"attributes"],[4377,24,4012,20],[4377,27,4012,23],[4377,29,4012,4],[4379,0,4014,4],[4379,17,4014,11],[4379,18,4014,12],[4379,23,4014,17,"match"],[4379,28,4014,12],[4379,29,4014,23,"types"],[4379,34,4014,28],[4379,35,4014,29,"slash"],[4379,40,4014,12],[4379,41,4014,11],[4379,45,4014,39],[4379,46,4014,40],[4379,51,4014,45,"match"],[4379,56,4014,40],[4379,57,4014,51,"types"],[4379,62,4014,56],[4379,63,4014,57,"jsxTagEnd"],[4379,72,4014,40],[4379,73,4014,4],[4379,75,4014,69],[4380,0,4015,6,"attributes"],[4380,12,4015,6,"attributes"],[4380,22,4015,16],[4380,23,4015,17,"push"],[4380,27,4015,6],[4380,28,4015,22],[4380,33,4015,27,"jsxParseAttribute"],[4380,50,4015,22],[4380,52,4015,6],[4381,0,4016,5],[4383,0,4018,4,"node"],[4383,10,4018,4,"node"],[4383,14,4018,8],[4383,15,4018,9,"attributes"],[4383,25,4018,4],[4383,28,4018,22,"attributes"],[4383,38,4018,4],[4384,0,4019,4,"node"],[4384,10,4019,4,"node"],[4384,14,4019,8],[4384,15,4019,9,"selfClosing"],[4384,26,4019,4],[4384,29,4019,23],[4384,34,4019,28,"eat"],[4384,37,4019,23],[4384,38,4019,32,"types"],[4384,43,4019,37],[4384,44,4019,38,"slash"],[4384,49,4019,23],[4384,50,4019,4],[4385,0,4020,4],[4385,15,4020,9,"expect"],[4385,21,4020,4],[4385,22,4020,16,"types"],[4385,27,4020,21],[4385,28,4020,22,"jsxTagEnd"],[4385,37,4020,4],[4386,0,4021,4],[4386,17,4021,11],[4386,22,4021,16,"finishNode"],[4386,32,4021,11],[4386,33,4021,27,"node"],[4386,37,4021,11],[4386,39,4021,33],[4386,58,4021,11],[4386,59,4021,4],[4387,0,4022,3],[4388,0,3746,21],[4389,0,3746,21],[4390,0,3746,21],[4390,49,4024,27,"startPos"],[4390,57,3746,21],[4390,59,4024,37,"startLoc"],[4390,67,3746,21],[4390,69,4024,47],[4391,0,4025,4],[4391,14,4025,10,"node"],[4391,18,4025,14],[4391,21,4025,17],[4391,26,4025,22,"startNodeAt"],[4391,37,4025,17],[4391,38,4025,34,"startPos"],[4391,46,4025,17],[4391,48,4025,44,"startLoc"],[4391,56,4025,17],[4391,57,4025,4],[4393,0,4027,4],[4393,14,4027,8],[4393,19,4027,13,"match"],[4393,24,4027,8],[4393,25,4027,19,"types"],[4393,30,4027,24],[4393,31,4027,25,"jsxTagEnd"],[4393,40,4027,8],[4393,41,4027,4],[4393,43,4027,37],[4394,0,4028,6],[4394,17,4028,11,"expect"],[4394,23,4028,6],[4394,24,4028,18,"types"],[4394,29,4028,23],[4394,30,4028,24,"jsxTagEnd"],[4394,39,4028,6],[4395,0,4029,6],[4395,19,4029,13],[4395,24,4029,18,"finishNode"],[4395,34,4029,13],[4395,35,4029,29,"node"],[4395,39,4029,13],[4395,41,4029,35],[4395,61,4029,13],[4395,62,4029,6],[4396,0,4030,5],[4398,0,4032,4,"node"],[4398,10,4032,4,"node"],[4398,14,4032,8],[4398,15,4032,9,"name"],[4398,19,4032,4],[4398,22,4032,16],[4398,27,4032,21,"jsxParseElementName"],[4398,46,4032,16],[4398,48,4032,4],[4399,0,4033,4],[4399,15,4033,9,"expect"],[4399,21,4033,4],[4399,22,4033,16,"types"],[4399,27,4033,21],[4399,28,4033,22,"jsxTagEnd"],[4399,37,4033,4],[4400,0,4034,4],[4400,17,4034,11],[4400,22,4034,16,"finishNode"],[4400,32,4034,11],[4400,33,4034,27,"node"],[4400,37,4034,11],[4400,39,4034,33],[4400,58,4034,11],[4400,59,4034,4],[4401,0,4035,3],[4402,0,3746,21],[4403,0,3746,21],[4404,0,3746,21],[4404,42,4037,20,"startPos"],[4404,50,3746,21],[4404,52,4037,30,"startLoc"],[4404,60,3746,21],[4404,62,4037,40],[4405,0,4038,4],[4405,14,4038,10,"node"],[4405,18,4038,14],[4405,21,4038,17],[4405,26,4038,22,"startNodeAt"],[4405,37,4038,17],[4405,38,4038,34,"startPos"],[4405,46,4038,17],[4405,48,4038,44,"startLoc"],[4405,56,4038,17],[4405,57,4038,4],[4406,0,4039,4],[4406,14,4039,10,"children"],[4406,22,4039,18],[4406,25,4039,21],[4406,27,4039,4],[4407,0,4040,4],[4407,14,4040,10,"openingElement"],[4407,28,4040,24],[4407,31,4040,27],[4407,36,4040,32,"jsxParseOpeningElementAt"],[4407,60,4040,27],[4407,61,4040,57,"startPos"],[4407,69,4040,27],[4407,71,4040,67,"startLoc"],[4407,79,4040,27],[4407,80,4040,4],[4408,0,4041,4],[4408,14,4041,8,"closingElement"],[4408,28,4041,22],[4408,31,4041,25],[4408,35,4041,4],[4410,0,4043,4],[4410,14,4043,8],[4410,15,4043,9,"openingElement"],[4410,29,4043,23],[4410,30,4043,24,"selfClosing"],[4410,41,4043,4],[4410,43,4043,37],[4411,0,4044,6,"contents"],[4411,12,4044,6,"contents"],[4411,20,4044,14],[4411,22,4044,16],[4411,31,4044,25],[4412,0,4045,8],[4412,22,4045,16],[4412,27,4045,21,"state"],[4412,32,4045,16],[4412,33,4045,27,"type"],[4412,37,4045,8],[4413,0,4046,10],[4413,21,4046,15,"types"],[4413,26,4046,20],[4413,27,4046,21,"jsxTagStart"],[4413,38,4046,10],[4414,0,4047,12,"startPos"],[4414,18,4047,12,"startPos"],[4414,26,4047,20],[4414,29,4047,23],[4414,34,4047,28,"state"],[4414,39,4047,23],[4414,40,4047,34,"start"],[4414,45,4047,12],[4415,0,4048,12,"startLoc"],[4415,18,4048,12,"startLoc"],[4415,26,4048,20],[4415,29,4048,23],[4415,34,4048,28,"state"],[4415,39,4048,23],[4415,40,4048,34,"startLoc"],[4415,48,4048,12],[4416,0,4049,12],[4416,23,4049,17,"next"],[4416,27,4049,12],[4418,0,4051,12],[4418,22,4051,16],[4418,27,4051,21,"eat"],[4418,30,4051,16],[4418,31,4051,25,"types"],[4418,36,4051,30],[4418,37,4051,31,"slash"],[4418,42,4051,16],[4418,43,4051,12],[4418,45,4051,39],[4419,0,4052,14,"closingElement"],[4419,20,4052,14,"closingElement"],[4419,34,4052,28],[4419,37,4052,31],[4419,42,4052,36,"jsxParseClosingElementAt"],[4419,66,4052,31],[4419,67,4052,61,"startPos"],[4419,75,4052,31],[4419,77,4052,71,"startLoc"],[4419,85,4052,31],[4419,86,4052,14],[4420,0,4053,14],[4420,26,4053,20,"contents"],[4420,34,4053,14],[4421,0,4054,13],[4423,0,4056,12,"children"],[4423,18,4056,12,"children"],[4423,26,4056,20],[4423,27,4056,21,"push"],[4423,31,4056,12],[4423,32,4056,26],[4423,37,4056,31,"jsxParseElementAt"],[4423,54,4056,26],[4423,55,4056,49,"startPos"],[4423,63,4056,26],[4423,65,4056,59,"startLoc"],[4423,73,4056,26],[4423,74,4056,12],[4424,0,4057,12],[4426,0,4059,10],[4426,21,4059,15,"types"],[4426,26,4059,20],[4426,27,4059,21,"jsxText"],[4426,34,4059,10],[4427,0,4060,12,"children"],[4427,18,4060,12,"children"],[4427,26,4060,20],[4427,27,4060,21,"push"],[4427,31,4060,12],[4427,32,4060,26],[4427,37,4060,31,"parseExprAtom"],[4427,50,4060,26],[4427,52,4060,12],[4428,0,4061,12],[4430,0,4063,10],[4430,21,4063,15,"types"],[4430,26,4063,20],[4430,27,4063,21,"braceL"],[4430,33,4063,10],[4431,0,4064,12],[4432,0,4065,14],[4432,24,4065,20,"node"],[4432,30,4065,24],[4432,33,4065,27],[4432,38,4065,32,"startNode"],[4432,47,4065,27],[4432,49,4065,14],[4434,0,4066,14],[4434,25,4066,19,"next"],[4434,29,4066,14],[4436,0,4068,14],[4436,24,4068,18],[4436,29,4068,23,"match"],[4436,34,4068,18],[4436,35,4068,29,"types"],[4436,40,4068,34],[4436,41,4068,35,"ellipsis"],[4436,49,4068,18],[4436,50,4068,14],[4436,52,4068,46],[4437,0,4069,16,"children"],[4437,22,4069,16,"children"],[4437,30,4069,24],[4437,31,4069,25,"push"],[4437,35,4069,16],[4437,36,4069,30],[4437,41,4069,35,"jsxParseSpreadChild"],[4437,60,4069,30],[4437,61,4069,55,"node"],[4437,67,4069,30],[4437,68,4069,16],[4438,0,4070,15],[4438,21,4068,14],[4438,27,4070,21],[4439,0,4071,16,"children"],[4439,22,4071,16,"children"],[4439,30,4071,24],[4439,31,4071,25,"push"],[4439,35,4071,16],[4439,36,4071,30],[4439,41,4071,35,"jsxParseExpressionContainer"],[4439,68,4071,30],[4439,69,4071,63,"node"],[4439,75,4071,30],[4439,76,4071,16],[4440,0,4072,15],[4442,0,4074,14],[4443,0,4075,13],[4445,0,4077,10],[4446,0,4078,12],[4446,24,4078,18],[4446,29,4078,23,"unexpected"],[4446,39,4078,18],[4446,41,4078,12],[4447,0,4045,8],[4448,0,4080,7],[4450,0,4082,6],[4450,16,4082,10,"isFragment"],[4450,26,4082,20],[4450,27,4082,21,"openingElement"],[4450,41,4082,20],[4450,42,4082,10],[4450,46,4082,40],[4450,47,4082,41,"isFragment"],[4450,57,4082,51],[4450,58,4082,52,"closingElement"],[4450,72,4082,51],[4450,73,4082,6],[4450,75,4082,69],[4451,0,4083,8],[4451,19,4083,13,"raise"],[4451,24,4083,8],[4451,25,4083,19,"closingElement"],[4451,39,4083,33],[4451,40,4083,34,"start"],[4451,45,4083,8],[4451,47,4083,41],[4451,94,4083,8],[4452,0,4084,7],[4452,13,4082,6],[4452,19,4084,13],[4452,23,4084,17],[4452,24,4084,18,"isFragment"],[4452,34,4084,28],[4452,35,4084,29,"openingElement"],[4452,49,4084,28],[4452,50,4084,17],[4452,54,4084,48,"isFragment"],[4452,64,4084,58],[4452,65,4084,59,"closingElement"],[4452,79,4084,58],[4452,80,4084,13],[4452,82,4084,76],[4453,0,4085,8],[4453,19,4085,13,"raise"],[4453,24,4085,8],[4453,25,4085,19,"closingElement"],[4453,39,4085,33],[4453,40,4085,34,"start"],[4453,45,4085,8],[4453,47,4085,41],[4453,96,4085,90,"getQualifiedJSXName"],[4453,115,4085,109],[4453,116,4085,110,"openingElement"],[4453,130,4085,124],[4453,131,4085,125,"name"],[4453,135,4085,109],[4453,136,4085,41],[4453,139,4085,133],[4453,142,4085,8],[4454,0,4086,7],[4454,13,4084,13],[4454,19,4086,13],[4454,23,4086,17],[4454,24,4086,18,"isFragment"],[4454,34,4086,28],[4454,35,4086,29,"openingElement"],[4454,49,4086,28],[4454,50,4086,17],[4454,54,4086,48],[4454,55,4086,49,"isFragment"],[4454,65,4086,59],[4454,66,4086,60,"closingElement"],[4454,80,4086,59],[4454,81,4086,13],[4454,83,4086,77],[4455,0,4087,8],[4455,18,4087,12,"getQualifiedJSXName"],[4455,37,4087,31],[4455,38,4087,32,"closingElement"],[4455,52,4087,46],[4455,53,4087,47,"name"],[4455,57,4087,31],[4455,58,4087,12],[4455,63,4087,57,"getQualifiedJSXName"],[4455,82,4087,76],[4455,83,4087,77,"openingElement"],[4455,97,4087,91],[4455,98,4087,92,"name"],[4455,102,4087,76],[4455,103,4087,8],[4455,105,4087,99],[4456,0,4088,10],[4456,21,4088,15,"raise"],[4456,26,4088,10],[4456,27,4088,21,"closingElement"],[4456,41,4088,35],[4456,42,4088,36,"start"],[4456,47,4088,10],[4456,49,4088,43],[4456,98,4088,92,"getQualifiedJSXName"],[4456,117,4088,111],[4456,118,4088,112,"openingElement"],[4456,132,4088,126],[4456,133,4088,127,"name"],[4456,137,4088,111],[4456,138,4088,43],[4456,141,4088,135],[4456,144,4088,10],[4457,0,4089,9],[4458,0,4090,7],[4459,0,4091,5],[4461,0,4093,4],[4461,14,4093,8,"isFragment"],[4461,24,4093,18],[4461,25,4093,19,"openingElement"],[4461,39,4093,18],[4461,40,4093,4],[4461,42,4093,36],[4462,0,4094,6,"node"],[4462,12,4094,6,"node"],[4462,16,4094,10],[4462,17,4094,11,"openingFragment"],[4462,32,4094,6],[4462,35,4094,29,"openingElement"],[4462,49,4094,6],[4463,0,4095,6,"node"],[4463,12,4095,6,"node"],[4463,16,4095,10],[4463,17,4095,11,"closingFragment"],[4463,32,4095,6],[4463,35,4095,29,"closingElement"],[4463,49,4095,6],[4464,0,4096,5],[4464,11,4093,4],[4464,17,4096,11],[4465,0,4097,6,"node"],[4465,12,4097,6,"node"],[4465,16,4097,10],[4465,17,4097,11,"openingElement"],[4465,31,4097,6],[4465,34,4097,28,"openingElement"],[4465,48,4097,6],[4466,0,4098,6,"node"],[4466,12,4098,6,"node"],[4466,16,4098,10],[4466,17,4098,11,"closingElement"],[4466,31,4098,6],[4466,34,4098,28,"closingElement"],[4466,48,4098,6],[4467,0,4099,5],[4469,0,4101,4,"node"],[4469,10,4101,4,"node"],[4469,14,4101,8],[4469,15,4101,9,"children"],[4469,23,4101,4],[4469,26,4101,20,"children"],[4469,34,4101,4],[4471,0,4103,4],[4471,14,4103,8],[4471,19,4103,13,"isRelational"],[4471,31,4103,8],[4471,32,4103,26],[4471,35,4103,8],[4471,36,4103,4],[4471,38,4103,32],[4472,0,4104,6],[4472,18,4104,12],[4472,23,4104,17,"raise"],[4472,28,4104,12],[4472,29,4104,23],[4472,34,4104,28,"state"],[4472,39,4104,23],[4472,40,4104,34,"start"],[4472,45,4104,12],[4472,47,4104,41],[4472,111,4104,105],[4472,150,4104,12],[4472,151,4104,6],[4473,0,4105,5],[4475,0,4107,4],[4475,17,4107,11,"isFragment"],[4475,27,4107,21],[4475,28,4107,22,"openingElement"],[4475,42,4107,21],[4475,43,4107,11],[4475,46,4107,40],[4475,51,4107,45,"finishNode"],[4475,61,4107,40],[4475,62,4107,56,"node"],[4475,66,4107,40],[4475,68,4107,62],[4475,81,4107,40],[4475,82,4107,11],[4475,85,4107,79],[4475,90,4107,84,"finishNode"],[4475,100,4107,79],[4475,101,4107,95,"node"],[4475,105,4107,79],[4475,107,4107,101],[4475,119,4107,79],[4475,120,4107,4],[4476,0,4108,3],[4477,0,3746,21],[4478,0,3746,21],[4479,0,3746,21],[4479,42,4110,20],[4480,0,4111,4],[4480,14,4111,10,"startPos"],[4480,22,4111,18],[4480,25,4111,21],[4480,30,4111,26,"state"],[4480,35,4111,21],[4480,36,4111,32,"start"],[4480,41,4111,4],[4481,0,4112,4],[4481,14,4112,10,"startLoc"],[4481,22,4112,18],[4481,25,4112,21],[4481,30,4112,26,"state"],[4481,35,4112,21],[4481,36,4112,32,"startLoc"],[4481,44,4112,4],[4482,0,4113,4],[4482,15,4113,9,"next"],[4482,19,4113,4],[4483,0,4114,4],[4483,17,4114,11],[4483,22,4114,16,"jsxParseElementAt"],[4483,39,4114,11],[4483,40,4114,34,"startPos"],[4483,48,4114,11],[4483,50,4114,44,"startLoc"],[4483,58,4114,11],[4483,59,4114,4],[4484,0,4115,3],[4485,0,3746,21],[4486,0,3746,21],[4487,0,3746,21],[4487,38,4117,16,"refShortHandDefaultPos"],[4487,60,3746,21],[4487,62,4117,40],[4488,0,4118,4],[4488,14,4118,8],[4488,19,4118,13,"match"],[4488,24,4118,8],[4488,25,4118,19,"types"],[4488,30,4118,24],[4488,31,4118,25,"jsxText"],[4488,38,4118,8],[4488,39,4118,4],[4488,41,4118,35],[4489,0,4119,6],[4489,19,4119,13],[4489,24,4119,18,"parseLiteral"],[4489,36,4119,13],[4489,37,4119,31],[4489,42,4119,36,"state"],[4489,47,4119,31],[4489,48,4119,42,"value"],[4489,53,4119,13],[4489,55,4119,49],[4489,64,4119,13],[4489,65,4119,6],[4490,0,4120,5],[4490,11,4118,4],[4490,17,4120,11],[4490,21,4120,15],[4490,26,4120,20,"match"],[4490,31,4120,15],[4490,32,4120,26,"types"],[4490,37,4120,31],[4490,38,4120,32,"jsxTagStart"],[4490,49,4120,15],[4490,50,4120,11],[4490,52,4120,46],[4491,0,4121,6],[4491,19,4121,13],[4491,24,4121,18,"jsxParseElement"],[4491,39,4121,13],[4491,41,4121,6],[4492,0,4122,5],[4492,11,4120,11],[4492,17,4122,11],[4492,21,4122,15],[4492,26,4122,20,"isRelational"],[4492,38,4122,15],[4492,39,4122,33],[4492,42,4122,15],[4492,47,4122,41],[4492,52,4122,46,"input"],[4492,57,4122,41],[4492,58,4122,52,"charCodeAt"],[4492,68,4122,41],[4492,69,4122,63],[4492,74,4122,68,"state"],[4492,79,4122,63],[4492,80,4122,74,"pos"],[4492,83,4122,41],[4492,89,4122,83],[4492,91,4122,11],[4492,93,4122,87],[4493,0,4123,6],[4493,17,4123,11,"finishToken"],[4493,28,4123,6],[4493,29,4123,23,"types"],[4493,34,4123,28],[4493,35,4123,29,"jsxTagStart"],[4493,46,4123,6],[4494,0,4124,6],[4494,19,4124,13],[4494,24,4124,18,"jsxParseElement"],[4494,39,4124,13],[4494,41,4124,6],[4495,0,4125,5],[4495,11,4122,11],[4495,17,4125,11],[4496,0,4126,6],[4496,94,4126,33,"refShortHandDefaultPos"],[4496,116,4126,6],[4497,0,4127,5],[4498,0,4128,3],[4499,0,3746,21],[4500,0,3746,21],[4501,0,3746,21],[4501,41,4130,19,"code"],[4501,45,3746,21],[4501,47,4130,25],[4502,0,4131,4],[4502,14,4131,8],[4502,19,4131,13,"state"],[4502,24,4131,8],[4502,25,4131,19,"inPropertyName"],[4502,39,4131,4],[4502,41,4131,35],[4502,126,4131,65,"code"],[4502,130,4131,35],[4503,0,4132,4],[4503,14,4132,10,"context"],[4503,21,4132,17],[4503,24,4132,20],[4503,29,4132,25,"curContext"],[4503,39,4132,20],[4503,41,4132,4],[4505,0,4134,4],[4505,14,4134,8,"context"],[4505,21,4134,15],[4505,26,4134,20,"types$1"],[4505,33,4134,27],[4505,34,4134,28,"j_expr"],[4505,40,4134,4],[4505,42,4134,36],[4506,0,4135,6],[4506,19,4135,13],[4506,24,4135,18,"jsxReadToken"],[4506,36,4135,13],[4506,38,4135,6],[4507,0,4136,5],[4509,0,4138,4],[4509,14,4138,8,"context"],[4509,21,4138,15],[4509,26,4138,20,"types$1"],[4509,33,4138,27],[4509,34,4138,28,"j_oTag"],[4509,40,4138,8],[4509,44,4138,38,"context"],[4509,51,4138,45],[4509,56,4138,50,"types$1"],[4509,63,4138,57],[4509,64,4138,58,"j_cTag"],[4509,70,4138,4],[4509,72,4138,66],[4510,0,4139,6],[4510,16,4139,10,"isIdentifierStart"],[4510,33,4139,27],[4510,34,4139,28,"code"],[4510,38,4139,27],[4510,39,4139,6],[4510,41,4139,35],[4511,0,4140,8],[4511,21,4140,15],[4511,26,4140,20,"jsxReadWord"],[4511,37,4140,15],[4511,39,4140,8],[4512,0,4141,7],[4514,0,4143,6],[4514,16,4143,10,"code"],[4514,20,4143,14],[4514,25,4143,19],[4514,27,4143,6],[4514,29,4143,23],[4515,0,4144,8],[4515,16,4144,10],[4515,21,4144,15,"state"],[4515,26,4144,10],[4515,27,4144,21,"pos"],[4515,30,4144,8],[4516,0,4145,8],[4516,21,4145,15],[4516,26,4145,20,"finishToken"],[4516,37,4145,15],[4516,38,4145,32,"types"],[4516,43,4145,37],[4516,44,4145,38,"jsxTagEnd"],[4516,53,4145,15],[4516,54,4145,8],[4517,0,4146,7],[4519,0,4148,6],[4519,16,4148,10],[4519,17,4148,11,"code"],[4519,21,4148,15],[4519,26,4148,20],[4519,28,4148,11],[4519,32,4148,26,"code"],[4519,36,4148,30],[4519,41,4148,35],[4519,43,4148,10],[4519,48,4148,42,"context"],[4519,55,4148,49],[4519,60,4148,54,"types$1"],[4519,67,4148,61],[4519,68,4148,62,"j_oTag"],[4519,74,4148,6],[4519,76,4148,70],[4520,0,4149,8],[4520,21,4149,15],[4520,26,4149,20,"jsxReadString"],[4520,39,4149,15],[4520,40,4149,34,"code"],[4520,44,4149,15],[4520,45,4149,8],[4521,0,4150,7],[4522,0,4151,5],[4524,0,4153,4],[4524,14,4153,8,"code"],[4524,18,4153,12],[4524,23,4153,17],[4524,25,4153,8],[4524,29,4153,23],[4524,34,4153,28,"state"],[4524,39,4153,23],[4524,40,4153,34,"exprAllowed"],[4524,51,4153,8],[4524,55,4153,49],[4524,60,4153,54,"input"],[4524,65,4153,49],[4524,66,4153,60,"charCodeAt"],[4524,76,4153,49],[4524,77,4153,71],[4524,82,4153,76,"state"],[4524,87,4153,71],[4524,88,4153,82,"pos"],[4524,91,4153,71],[4524,94,4153,88],[4524,95,4153,49],[4524,101,4153,95],[4524,103,4153,4],[4524,105,4153,99],[4525,0,4154,6],[4525,14,4154,8],[4525,19,4154,13,"state"],[4525,24,4154,8],[4525,25,4154,19,"pos"],[4525,28,4154,6],[4526,0,4155,6],[4526,19,4155,13],[4526,24,4155,18,"finishToken"],[4526,35,4155,13],[4526,36,4155,30,"types"],[4526,41,4155,35],[4526,42,4155,36,"jsxTagStart"],[4526,53,4155,13],[4526,54,4155,6],[4527,0,4156,5],[4529,0,4158,4],[4529,95,4158,34,"code"],[4529,99,4158,4],[4530,0,4159,3],[4531,0,3746,21],[4532,0,3746,21],[4533,0,3746,21],[4533,38,4161,16,"prevType"],[4533,46,3746,21],[4533,48,4161,26],[4534,0,4162,4],[4534,14,4162,8],[4534,19,4162,13,"match"],[4534,24,4162,8],[4534,25,4162,19,"types"],[4534,30,4162,24],[4534,31,4162,25,"braceL"],[4534,37,4162,8],[4534,38,4162,4],[4534,40,4162,34],[4535,0,4163,6],[4535,16,4163,12,"curContext"],[4535,26,4163,22],[4535,29,4163,25],[4535,34,4163,30,"curContext"],[4535,44,4163,25],[4535,46,4163,6],[4537,0,4165,6],[4537,16,4165,10,"curContext"],[4537,26,4165,20],[4537,31,4165,25,"types$1"],[4537,38,4165,32],[4537,39,4165,33,"j_oTag"],[4537,45,4165,6],[4537,47,4165,41],[4538,0,4166,8],[4538,19,4166,13,"state"],[4538,24,4166,8],[4538,25,4166,19,"context"],[4538,32,4166,8],[4538,33,4166,27,"push"],[4538,37,4166,8],[4538,38,4166,32,"types$1"],[4538,45,4166,39],[4538,46,4166,40,"braceExpression"],[4538,61,4166,8],[4539,0,4167,7],[4539,13,4165,6],[4539,19,4167,13],[4539,23,4167,17,"curContext"],[4539,33,4167,27],[4539,38,4167,32,"types$1"],[4539,45,4167,39],[4539,46,4167,40,"j_expr"],[4539,52,4167,13],[4539,54,4167,48],[4540,0,4168,8],[4540,19,4168,13,"state"],[4540,24,4168,8],[4540,25,4168,19,"context"],[4540,32,4168,8],[4540,33,4168,27,"push"],[4540,37,4168,8],[4540,38,4168,32,"types$1"],[4540,45,4168,39],[4540,46,4168,40,"templateQuasi"],[4540,59,4168,8],[4541,0,4169,7],[4541,13,4167,13],[4541,19,4169,13],[4542,0,4170,8],[4542,89,4170,28,"prevType"],[4542,97,4170,8],[4543,0,4171,7],[4545,0,4173,6],[4545,17,4173,11,"state"],[4545,22,4173,6],[4545,23,4173,17,"exprAllowed"],[4545,34,4173,6],[4545,37,4173,31],[4545,41,4173,6],[4546,0,4174,5],[4546,11,4162,4],[4546,17,4174,11],[4546,21,4174,15],[4546,26,4174,20,"match"],[4546,31,4174,15],[4546,32,4174,26,"types"],[4546,37,4174,31],[4546,38,4174,32,"slash"],[4546,43,4174,15],[4546,48,4174,42,"prevType"],[4546,56,4174,50],[4546,61,4174,55,"types"],[4546,66,4174,60],[4546,67,4174,61,"jsxTagStart"],[4546,78,4174,11],[4546,80,4174,74],[4547,0,4175,6],[4547,17,4175,11,"state"],[4547,22,4175,6],[4547,23,4175,17,"context"],[4547,30,4175,6],[4547,31,4175,25,"length"],[4547,37,4175,6],[4547,41,4175,35],[4547,42,4175,6],[4548,0,4176,6],[4548,17,4176,11,"state"],[4548,22,4176,6],[4548,23,4176,17,"context"],[4548,30,4176,6],[4548,31,4176,25,"push"],[4548,35,4176,6],[4548,36,4176,30,"types$1"],[4548,43,4176,37],[4548,44,4176,38,"j_cTag"],[4548,50,4176,6],[4549,0,4177,6],[4549,17,4177,11,"state"],[4549,22,4177,6],[4549,23,4177,17,"exprAllowed"],[4549,34,4177,6],[4549,37,4177,31],[4549,42,4177,6],[4550,0,4178,5],[4550,11,4174,11],[4550,17,4178,11],[4551,0,4179,6],[4551,94,4179,33,"prevType"],[4551,102,4179,6],[4552,0,4180,5],[4553,0,4181,3],[4554,0,3746,21],[4556,0,3746,21],[4557,0,3746,21],[4557,6,3746,39,"superClass"],[4557,16,3746,21],[4558,0,3746,21],[4558,3,3746,0],[4560,6,4185,6,"Scope"],[4560,11],[4560,14,4186,2],[4560,29,4186,14,"flags"],[4560,34,4186,2],[4560,36,4186,21],[4561,0,4186,21],[4563,0,4187,4],[4563,9,4187,9,"var"],[4563,12,4187,4],[4563,15,4187,15],[4563,17,4187,4],[4564,0,4188,4],[4564,9,4188,9,"lexical"],[4564,16,4188,4],[4564,19,4188,19],[4564,21,4188,4],[4565,0,4189,4],[4565,9,4189,9,"functions"],[4565,18,4189,4],[4565,21,4189,21],[4565,23,4189,4],[4566,0,4190,4],[4566,9,4190,9,"flags"],[4566,14,4190,4],[4566,17,4190,17,"flags"],[4566,22,4190,4],[4567,0,4191,3],[4567,3],[4569,6,4194,6,"ScopeHandler"],[4569,18],[4570,0,4195,2],[4570,26,4195,14,"raise"],[4570,31,4195,2],[4570,33,4195,21,"inModule"],[4570,41,4195,2],[4570,43,4195,31],[4571,0,4195,31],[4573,0,4196,4],[4573,11,4196,9,"scopeStack"],[4573,21,4196,4],[4573,24,4196,22],[4573,26,4196,4],[4574,0,4197,4],[4574,11,4197,9,"undefinedExports"],[4574,27,4197,4],[4574,30,4197,28],[4574,34,4197,32,"Map"],[4574,37,4197,28],[4574,39,4197,4],[4575,0,4198,4],[4575,11,4198,9,"raise"],[4575,16,4198,4],[4575,19,4198,17,"raise"],[4575,24,4198,4],[4576,0,4199,4],[4576,11,4199,9,"inModule"],[4576,19,4199,4],[4576,22,4199,20,"inModule"],[4576,30,4199,4],[4577,0,4200,3],[4581,34,4234,14,"flags"],[4581,39],[4581,41,4234,21],[4582,0,4235,4],[4582,15,4235,11],[4582,19,4235,15,"Scope"],[4582,24,4235,11],[4582,25,4235,21,"flags"],[4582,30,4235,11],[4582,31,4235,4],[4583,0,4236,3],[4586,28,4238,8,"flags"],[4586,33],[4586,35,4238,15],[4587,0,4239,4],[4587,13,4239,9,"scopeStack"],[4587,23,4239,4],[4587,24,4239,20,"push"],[4587,28,4239,4],[4587,29,4239,25],[4587,34,4239,30,"createScope"],[4587,45,4239,25],[4587,46,4239,42,"flags"],[4587,51,4239,25],[4587,52,4239,4],[4588,0,4240,3],[4591,29,4242,9],[4592,0,4243,4],[4592,13,4243,9,"scopeStack"],[4592,23,4243,4],[4592,24,4243,20,"pop"],[4592,27,4243,4],[4593,0,4244,3],[4596,49,4246,29,"scope"],[4596,54],[4596,56,4246,36],[4597,0,4247,4],[4597,15,4247,11],[4597,16,4247,12],[4597,18,4247,14,"scope"],[4597,23,4247,19],[4597,24,4247,20,"flags"],[4597,29,4247,14],[4597,32,4247,28,"SCOPE_FUNCTION"],[4597,46,4247,14],[4597,50,4247,46],[4597,51,4247,47],[4597,56,4247,52,"inModule"],[4597,64,4247,46],[4597,68,4247,64,"scope"],[4597,73,4247,69],[4597,74,4247,70,"flags"],[4597,79,4247,64],[4597,82,4247,78,"SCOPE_PROGRAM"],[4597,95,4247,12],[4597,96,4247,4],[4598,0,4248,3],[4601,34,4250,14,"name"],[4601,38],[4601,40,4250,20,"bindingType"],[4601,51],[4601,53,4250,33,"pos"],[4601,56],[4601,58,4250,38],[4602,0,4251,4],[4602,12,4251,8,"scope"],[4602,17,4251,13],[4602,20,4251,16],[4602,25,4251,21,"currentScope"],[4602,37,4251,16],[4602,39,4251,4],[4604,0,4253,4],[4604,12,4253,8,"bindingType"],[4604,23,4253,19],[4604,26,4253,22,"BIND_SCOPE_LEXICAL"],[4604,44,4253,8],[4604,48,4253,44,"bindingType"],[4604,59,4253,55],[4604,62,4253,58,"BIND_SCOPE_FUNCTION"],[4604,81,4253,4],[4604,83,4253,79],[4605,0,4254,6],[4605,15,4254,11,"checkRedeclarationInScope"],[4605,40,4254,6],[4605,41,4254,37,"scope"],[4605,46,4254,6],[4605,48,4254,44,"name"],[4605,52,4254,6],[4605,54,4254,50,"bindingType"],[4605,65,4254,6],[4605,67,4254,63,"pos"],[4605,70,4254,6],[4607,0,4256,6],[4607,14,4256,10,"bindingType"],[4607,25,4256,21],[4607,28,4256,24,"BIND_SCOPE_FUNCTION"],[4607,47,4256,6],[4607,49,4256,45],[4608,0,4257,8,"scope"],[4608,12,4257,8,"scope"],[4608,17,4257,13],[4608,18,4257,14,"functions"],[4608,27,4257,8],[4608,28,4257,24,"push"],[4608,32,4257,8],[4608,33,4257,29,"name"],[4608,37,4257,8],[4609,0,4258,7],[4609,11,4256,6],[4609,17,4258,13],[4610,0,4259,8,"scope"],[4610,12,4259,8,"scope"],[4610,17,4259,13],[4610,18,4259,14,"lexical"],[4610,25,4259,8],[4610,26,4259,22,"push"],[4610,30,4259,8],[4610,31,4259,27,"name"],[4610,35,4259,8],[4611,0,4260,7],[4613,0,4262,6],[4613,14,4262,10,"bindingType"],[4613,25,4262,21],[4613,28,4262,24,"BIND_SCOPE_LEXICAL"],[4613,46,4262,6],[4613,48,4262,44],[4614,0,4263,8],[4614,17,4263,13,"maybeExportDefined"],[4614,35,4263,8],[4614,36,4263,32,"scope"],[4614,41,4263,8],[4614,43,4263,39,"name"],[4614,47,4263,8],[4615,0,4264,7],[4616,0,4265,5],[4616,9,4253,4],[4616,15,4265,11],[4616,19,4265,15,"bindingType"],[4616,30,4265,26],[4616,33,4265,29,"BIND_SCOPE_VAR"],[4616,47,4265,11],[4616,49,4265,45],[4617,0,4266,6],[4617,15,4266,11],[4617,19,4266,15,"i"],[4617,20,4266,16],[4617,23,4266,19],[4617,28,4266,24,"scopeStack"],[4617,38,4266,19],[4617,39,4266,35,"length"],[4617,45,4266,19],[4617,48,4266,44],[4617,49,4266,6],[4617,51,4266,47,"i"],[4617,52,4266,48],[4617,56,4266,52],[4617,57,4266,6],[4617,59,4266,55],[4617,61,4266,57,"i"],[4617,62,4266,6],[4617,64,4266,60],[4618,0,4267,8,"scope"],[4618,12,4267,8,"scope"],[4618,17,4267,13],[4618,20,4267,16],[4618,25,4267,21,"scopeStack"],[4618,35,4267,16],[4618,36,4267,32,"i"],[4618,37,4267,16],[4618,38,4267,8],[4619,0,4268,8],[4619,17,4268,13,"checkRedeclarationInScope"],[4619,42,4268,8],[4619,43,4268,39,"scope"],[4619,48,4268,8],[4619,50,4268,46,"name"],[4619,54,4268,8],[4619,56,4268,52,"bindingType"],[4619,67,4268,8],[4619,69,4268,65,"pos"],[4619,72,4268,8],[4620,0,4269,8,"scope"],[4620,12,4269,8,"scope"],[4620,17,4269,13],[4620,18,4269,14,"var"],[4620,21,4269,8],[4620,22,4269,18,"push"],[4620,26,4269,8],[4620,27,4269,23,"name"],[4620,31,4269,8],[4621,0,4270,8],[4621,17,4270,13,"maybeExportDefined"],[4621,35,4270,8],[4621,36,4270,32,"scope"],[4621,41,4270,8],[4621,43,4270,39,"name"],[4621,47,4270,8],[4622,0,4271,8],[4622,16,4271,12,"scope"],[4622,21,4271,17],[4622,22,4271,18,"flags"],[4622,27,4271,12],[4622,30,4271,26,"SCOPE_VAR"],[4622,39,4271,8],[4622,41,4271,37],[4623,0,4272,7],[4624,0,4273,5],[4626,0,4275,4],[4626,12,4275,8],[4626,17,4275,13,"inModule"],[4626,25,4275,8],[4626,29,4275,25,"scope"],[4626,34,4275,30],[4626,35,4275,31,"flags"],[4626,40,4275,25],[4626,43,4275,39,"SCOPE_PROGRAM"],[4626,56,4275,4],[4626,58,4275,54],[4627,0,4276,6],[4627,15,4276,11,"undefinedExports"],[4627,31,4276,6],[4627,32,4276,28,"delete"],[4627,38,4276,6],[4627,39,4276,35,"name"],[4627,43,4276,6],[4628,0,4277,5],[4629,0,4278,3],[4632,41,4280,21,"scope"],[4632,46],[4632,48,4280,28,"name"],[4632,52],[4632,54,4280,34],[4633,0,4281,4],[4633,12,4281,8],[4633,17,4281,13,"inModule"],[4633,25,4281,8],[4633,29,4281,25,"scope"],[4633,34,4281,30],[4633,35,4281,31,"flags"],[4633,40,4281,25],[4633,43,4281,39,"SCOPE_PROGRAM"],[4633,56,4281,4],[4633,58,4281,54],[4634,0,4282,6],[4634,15,4282,11,"undefinedExports"],[4634,31,4282,6],[4634,32,4282,28,"delete"],[4634,38,4282,6],[4634,39,4282,35,"name"],[4634,43,4282,6],[4635,0,4283,5],[4636,0,4284,3],[4639,48,4286,28,"scope"],[4639,53],[4639,55,4286,35,"name"],[4639,59],[4639,61,4286,41,"bindingType"],[4639,72],[4639,74,4286,54,"pos"],[4639,77],[4639,79,4286,59],[4640,0,4287,4],[4640,12,4287,8],[4640,17,4287,13,"isRedeclaredInScope"],[4640,36,4287,8],[4640,37,4287,33,"scope"],[4640,42,4287,8],[4640,44,4287,40,"name"],[4640,48,4287,8],[4640,50,4287,46,"bindingType"],[4640,61,4287,8],[4640,62,4287,4],[4640,64,4287,60],[4641,0,4288,6],[4641,15,4288,11,"raise"],[4641,20,4288,6],[4641,21,4288,17,"pos"],[4641,24,4288,6],[4641,43,4288,37,"name"],[4641,47,4288,6],[4642,0,4289,5],[4643,0,4290,3],[4646,42,4292,22,"scope"],[4646,47],[4646,49,4292,29,"name"],[4646,53],[4646,55,4292,35,"bindingType"],[4646,66],[4646,68,4292,48],[4647,0,4293,4],[4647,12,4293,8],[4647,14,4293,10,"bindingType"],[4647,25,4293,21],[4647,28,4293,24,"BIND_KIND_VALUE"],[4647,43,4293,8],[4647,44,4293,4],[4647,46,4293,42],[4647,53,4293,49],[4647,58,4293,42],[4649,0,4295,4],[4649,12,4295,8,"bindingType"],[4649,23,4295,19],[4649,26,4295,22,"BIND_SCOPE_LEXICAL"],[4649,44,4295,4],[4649,46,4295,42],[4650,0,4296,6],[4650,17,4296,13,"scope"],[4650,22,4296,18],[4650,23,4296,19,"lexical"],[4650,30,4296,13],[4650,31,4296,27,"indexOf"],[4650,38,4296,13],[4650,39,4296,35,"name"],[4650,43,4296,13],[4650,47,4296,43],[4650,48,4296,44],[4650,49,4296,13],[4650,53,4296,49,"scope"],[4650,58,4296,54],[4650,59,4296,55,"functions"],[4650,68,4296,49],[4650,69,4296,65,"indexOf"],[4650,76,4296,49],[4650,77,4296,73,"name"],[4650,81,4296,49],[4650,85,4296,81],[4650,86,4296,82],[4650,87,4296,13],[4650,91,4296,87,"scope"],[4650,96,4296,92],[4650,97,4296,93,"var"],[4650,100,4296,87],[4650,101,4296,97,"indexOf"],[4650,108,4296,87],[4650,109,4296,105,"name"],[4650,113,4296,87],[4650,117,4296,113],[4650,118,4296,114],[4650,119,4296,6],[4651,0,4297,5],[4653,0,4299,4],[4653,12,4299,8,"bindingType"],[4653,23,4299,19],[4653,26,4299,22,"BIND_SCOPE_FUNCTION"],[4653,45,4299,4],[4653,47,4299,43],[4654,0,4300,6],[4654,17,4300,13,"scope"],[4654,22,4300,18],[4654,23,4300,19,"lexical"],[4654,30,4300,13],[4654,31,4300,27,"indexOf"],[4654,38,4300,13],[4654,39,4300,35,"name"],[4654,43,4300,13],[4654,47,4300,43],[4654,48,4300,44],[4654,49,4300,13],[4654,53,4300,49],[4654,54,4300,50],[4654,59,4300,55,"treatFunctionsAsVarInScope"],[4654,85,4300,50],[4654,86,4300,82,"scope"],[4654,91,4300,50],[4654,92,4300,49],[4654,96,4300,92,"scope"],[4654,101,4300,97],[4654,102,4300,98,"var"],[4654,105,4300,92],[4654,106,4300,102,"indexOf"],[4654,113,4300,92],[4654,114,4300,110,"name"],[4654,118,4300,92],[4654,122,4300,118],[4654,123,4300,119],[4654,124,4300,6],[4655,0,4301,5],[4657,0,4303,4],[4657,15,4303,11,"scope"],[4657,20,4303,16],[4657,21,4303,17,"lexical"],[4657,28,4303,11],[4657,29,4303,25,"indexOf"],[4657,36,4303,11],[4657,37,4303,33,"name"],[4657,41,4303,11],[4657,45,4303,41],[4657,46,4303,42],[4657,47,4303,11],[4657,51,4303,47],[4657,53,4303,49,"scope"],[4657,58,4303,54],[4657,59,4303,55,"flags"],[4657,64,4303,49],[4657,67,4303,63,"SCOPE_SIMPLE_CATCH"],[4657,85,4303,49],[4657,89,4303,85,"scope"],[4657,94,4303,90],[4657,95,4303,91,"lexical"],[4657,102,4303,85],[4657,103,4303,99],[4657,104,4303,85],[4657,110,4303,106,"name"],[4657,114,4303,47],[4657,115,4303,11],[4657,119,4303,115],[4657,120,4303,116],[4657,125,4303,121,"treatFunctionsAsVarInScope"],[4657,151,4303,116],[4657,152,4303,148,"scope"],[4657,157,4303,116],[4657,158,4303,115],[4657,162,4303,158,"scope"],[4657,167,4303,163],[4657,168,4303,164,"functions"],[4657,177,4303,158],[4657,178,4303,174,"indexOf"],[4657,185,4303,158],[4657,186,4303,182,"name"],[4657,190,4303,158],[4657,194,4303,190],[4657,195,4303,191],[4657,196,4303,4],[4658,0,4304,3],[4661,39,4306,19,"id"],[4661,41],[4661,43,4306,23],[4662,0,4307,4],[4662,12,4307,8],[4662,17,4307,13,"scopeStack"],[4662,27,4307,8],[4662,28,4307,24],[4662,29,4307,8],[4662,31,4307,27,"lexical"],[4662,38,4307,8],[4662,39,4307,35,"indexOf"],[4662,46,4307,8],[4662,47,4307,43,"id"],[4662,49,4307,45],[4662,50,4307,46,"name"],[4662,54,4307,8],[4662,60,4307,56],[4662,61,4307,57],[4662,62,4307,8],[4662,66,4307,62],[4662,71,4307,67,"scopeStack"],[4662,81,4307,62],[4662,82,4307,78],[4662,83,4307,62],[4662,85,4307,81,"var"],[4662,88,4307,62],[4662,89,4307,85,"indexOf"],[4662,96,4307,62],[4662,97,4307,93,"id"],[4662,99,4307,95],[4662,100,4307,96,"name"],[4662,104,4307,62],[4662,110,4307,106],[4662,111,4307,107],[4662,112,4307,8],[4662,116,4307,112],[4662,121,4307,117,"scopeStack"],[4662,131,4307,112],[4662,132,4307,128],[4662,133,4307,112],[4662,135,4307,131,"functions"],[4662,144,4307,112],[4662,145,4307,141,"indexOf"],[4662,152,4307,112],[4662,153,4307,149,"id"],[4662,155,4307,151],[4662,156,4307,152,"name"],[4662,160,4307,112],[4662,166,4307,162],[4662,167,4307,163],[4662,168,4307,4],[4662,170,4307,166],[4663,0,4308,6],[4663,15,4308,11,"undefinedExports"],[4663,31,4308,6],[4663,32,4308,28,"set"],[4663,35,4308,6],[4663,36,4308,32,"id"],[4663,38,4308,34],[4663,39,4308,35,"name"],[4663,43,4308,6],[4663,45,4308,41,"id"],[4663,47,4308,43],[4663,48,4308,44,"start"],[4663,53,4308,6],[4664,0,4309,5],[4665,0,4310,3],[4668,37,4312,17],[4669,0,4313,4],[4669,15,4313,11],[4669,20,4313,16,"scopeStack"],[4669,30,4313,11],[4669,31,4313,27],[4669,36,4313,32,"scopeStack"],[4669,46,4313,27],[4669,47,4313,43,"length"],[4669,53,4313,27],[4669,56,4313,52],[4669,57,4313,11],[4669,58,4313,4],[4670,0,4314,3],[4673,40,4316,20],[4674,0,4317,4],[4674,13,4317,9],[4674,17,4317,13,"i"],[4674,18,4317,14],[4674,21,4317,17],[4674,26,4317,22,"scopeStack"],[4674,36,4317,17],[4674,37,4317,33,"length"],[4674,43,4317,17],[4674,46,4317,42],[4674,47,4317,4],[4674,50,4317,46,"i"],[4674,51,4317,47],[4674,53,4317,4],[4674,55,4317,51],[4675,0,4318,6],[4675,14,4318,12,"scope"],[4675,19,4318,17],[4675,22,4318,20],[4675,27,4318,25,"scopeStack"],[4675,37,4318,20],[4675,38,4318,36,"i"],[4675,39,4318,20],[4675,40,4318,6],[4677,0,4320,6],[4677,14,4320,10,"scope"],[4677,19,4320,15],[4677,20,4320,16,"flags"],[4677,25,4320,10],[4677,28,4320,24,"SCOPE_VAR"],[4677,37,4320,6],[4677,39,4320,35],[4678,0,4321,8],[4678,19,4321,15,"scope"],[4678,24,4321,8],[4679,0,4322,7],[4680,0,4323,5],[4681,0,4324,3],[4684,41,4326,21],[4685,0,4327,4],[4685,13,4327,9],[4685,17,4327,13,"i"],[4685,18,4327,14],[4685,21,4327,17],[4685,26,4327,22,"scopeStack"],[4685,36,4327,17],[4685,37,4327,33,"length"],[4685,43,4327,17],[4685,46,4327,42],[4685,47,4327,4],[4685,50,4327,46,"i"],[4685,51,4327,47],[4685,53,4327,4],[4685,55,4327,51],[4686,0,4328,6],[4686,14,4328,12,"scope"],[4686,19,4328,17],[4686,22,4328,20],[4686,27,4328,25,"scopeStack"],[4686,37,4328,20],[4686,38,4328,36,"i"],[4686,39,4328,20],[4686,40,4328,6],[4688,0,4330,6],[4688,14,4330,10],[4688,15,4330,11,"scope"],[4688,20,4330,16],[4688,21,4330,17,"flags"],[4688,26,4330,11],[4688,29,4330,25,"SCOPE_VAR"],[4688,38,4330,11],[4688,42,4330,38,"scope"],[4688,47,4330,43],[4688,48,4330,44,"flags"],[4688,53,4330,38],[4688,56,4330,52,"SCOPE_CLASS"],[4688,67,4330,10],[4688,72,4330,68],[4688,74,4330,70,"scope"],[4688,79,4330,75],[4688,80,4330,76,"flags"],[4688,85,4330,70],[4688,88,4330,84,"SCOPE_ARROW"],[4688,99,4330,68],[4688,100,4330,6],[4688,102,4330,98],[4689,0,4331,8],[4689,19,4331,15,"scope"],[4689,24,4331,8],[4690,0,4332,7],[4691,0,4333,5],[4692,0,4334,3],[4695,26,4202,19],[4696,0,4203,4],[4696,15,4203,11],[4696,16,4203,12],[4696,21,4203,17,"currentVarScope"],[4696,36,4203,12],[4696,39,4203,35,"flags"],[4696,44,4203,12],[4696,47,4203,43,"SCOPE_FUNCTION"],[4696,61,4203,11],[4696,65,4203,61],[4696,66,4203,4],[4697,0,4204,3],[4700,26,4206,20],[4701,0,4207,4],[4701,15,4207,11],[4701,16,4207,12],[4701,21,4207,17,"currentVarScope"],[4701,36,4207,12],[4701,39,4207,35,"flags"],[4701,44,4207,12],[4701,47,4207,43,"SCOPE_GENERATOR"],[4701,62,4207,11],[4701,66,4207,62],[4701,67,4207,4],[4702,0,4208,3],[4705,26,4210,16],[4706,0,4211,4],[4706,15,4211,11],[4706,16,4211,12],[4706,21,4211,17,"currentVarScope"],[4706,36,4211,12],[4706,39,4211,35,"flags"],[4706,44,4211,12],[4706,47,4211,43,"SCOPE_ASYNC"],[4706,58,4211,11],[4706,62,4211,58],[4706,63,4211,4],[4707,0,4212,3],[4710,26,4214,19],[4711,0,4215,4],[4711,15,4215,11],[4711,16,4215,12],[4711,21,4215,17,"currentThisScope"],[4711,37,4215,12],[4711,40,4215,36,"flags"],[4711,45,4215,12],[4711,48,4215,44,"SCOPE_SUPER"],[4711,59,4215,11],[4711,63,4215,59],[4711,64,4215,4],[4712,0,4216,3],[4715,26,4218,25],[4716,0,4219,4],[4716,15,4219,11],[4716,16,4219,12],[4716,21,4219,17,"currentThisScope"],[4716,37,4219,12],[4716,40,4219,36,"flags"],[4716,45,4219,12],[4716,48,4219,44,"SCOPE_DIRECT_SUPER"],[4716,66,4219,11],[4716,70,4219,66],[4716,71,4219,4],[4717,0,4220,3],[4720,26,4222,16],[4721,0,4223,4],[4721,15,4223,11],[4721,16,4223,12],[4721,21,4223,17,"currentThisScope"],[4721,37,4223,12],[4721,40,4223,36,"flags"],[4721,45,4223,12],[4721,48,4223,44,"SCOPE_CLASS"],[4721,59,4223,11],[4721,63,4223,59],[4721,64,4223,4],[4722,0,4224,3],[4725,26,4226,27],[4726,0,4227,4],[4726,15,4227,11],[4726,16,4227,12],[4726,21,4227,17,"currentThisScope"],[4726,37,4227,12],[4726,40,4227,36,"flags"],[4726,45,4227,12],[4726,48,4227,44,"SCOPE_FUNCTION"],[4726,62,4227,11],[4726,66,4227,62],[4726,67,4227,4],[4727,0,4228,3],[4730,26,4230,28],[4731,0,4231,4],[4731,15,4231,11],[4731,20,4231,16,"treatFunctionsAsVarInScope"],[4731,46,4231,11],[4731,47,4231,43],[4731,52,4231,48,"currentScope"],[4731,64,4231,43],[4731,66,4231,11],[4731,67,4231,4],[4732,0,4232,3],[4738,6,4338,6,"TypeScriptScope"],[4738,21],[4741,0,4339,2],[4741,31,4339,23],[4742,0,4339,23],[4744,0,4339,23],[4746,0,4339,23],[4748,0,4339,23],[4748,40,4339,17,"args"],[4748,44,4339,23],[4749,0,4339,17,"args"],[4749,8,4339,17,"args"],[4749,12,4339,23],[4750,0,4339,23],[4752,0,4340,4],[4752,146,4340,13,"args"],[4752,150,4340,4],[4753,0,4341,4],[4753,14,4341,9,"types"],[4753,19,4341,4],[4753,22,4341,17],[4753,24,4341,4],[4754,0,4342,4],[4754,14,4342,9,"enums"],[4754,19,4342,4],[4754,22,4342,17],[4754,24,4342,4],[4755,0,4343,4],[4755,14,4343,9,"constEnums"],[4755,24,4343,4],[4755,27,4343,22],[4755,29,4343,4],[4756,0,4344,4],[4756,14,4344,9,"classes"],[4756,21,4344,4],[4756,24,4344,19],[4756,26,4344,4],[4757,0,4345,4],[4757,14,4345,9,"exportOnlyBindings"],[4757,32,4345,4],[4757,35,4345,30],[4757,37,4345,4],[4758,0,4339,23],[4759,0,4346,3],[4762,4,4338,30,"Scope"],[4762,9],[4764,6,4350,6,"TypeScriptScopeHandler"],[4764,28],[4775,34,4351,14,"flags"],[4775,39],[4775,41,4351,21],[4776,0,4352,4],[4776,15,4352,11],[4776,19,4352,15,"TypeScriptScope"],[4776,34,4352,11],[4776,35,4352,31,"flags"],[4776,40,4352,11],[4776,41,4352,4],[4777,0,4353,3],[4780,34,4355,14,"name"],[4780,38],[4780,40,4355,20,"bindingType"],[4780,51],[4780,53,4355,33,"pos"],[4780,56],[4780,58,4355,38],[4781,0,4356,4],[4781,12,4356,10,"scope"],[4781,17,4356,15],[4781,20,4356,18],[4781,25,4356,23,"currentScope"],[4781,37,4356,18],[4781,39,4356,4],[4783,0,4358,4],[4783,12,4358,8,"bindingType"],[4783,23,4358,19],[4783,26,4358,22,"BIND_FLAGS_TS_EXPORT_ONLY"],[4783,51,4358,4],[4783,53,4358,49],[4784,0,4359,6],[4784,15,4359,11,"maybeExportDefined"],[4784,33,4359,6],[4784,34,4359,30,"scope"],[4784,39,4359,6],[4784,41,4359,37,"name"],[4784,45,4359,6],[4785,0,4360,6,"scope"],[4785,10,4360,6,"scope"],[4785,15,4360,11],[4785,16,4360,12,"exportOnlyBindings"],[4785,34,4360,6],[4785,35,4360,31,"push"],[4785,39,4360,6],[4785,40,4360,36,"name"],[4785,44,4360,6],[4786,0,4361,6],[4787,0,4362,5],[4789,0,4364,4],[4789,97,4364,25,"arguments"],[4789,106,4364,4],[4791,0,4366,4],[4791,12,4366,8,"bindingType"],[4791,23,4366,19],[4791,26,4366,22,"BIND_KIND_TYPE"],[4791,40,4366,4],[4791,42,4366,38],[4792,0,4367,6],[4792,14,4367,10],[4792,16,4367,12,"bindingType"],[4792,27,4367,23],[4792,30,4367,26,"BIND_KIND_VALUE"],[4792,45,4367,10],[4792,46,4367,6],[4792,48,4367,44],[4793,0,4368,8],[4793,17,4368,13,"checkRedeclarationInScope"],[4793,42,4368,8],[4793,43,4368,39,"scope"],[4793,48,4368,8],[4793,50,4368,46,"name"],[4793,54,4368,8],[4793,56,4368,52,"bindingType"],[4793,67,4368,8],[4793,69,4368,65,"pos"],[4793,72,4368,8],[4794,0,4369,8],[4794,17,4369,13,"maybeExportDefined"],[4794,35,4369,8],[4794,36,4369,32,"scope"],[4794,41,4369,8],[4794,43,4369,39,"name"],[4794,47,4369,8],[4795,0,4370,7],[4797,0,4372,6,"scope"],[4797,10,4372,6,"scope"],[4797,15,4372,11],[4797,16,4372,12,"types"],[4797,21,4372,6],[4797,22,4372,18,"push"],[4797,26,4372,6],[4797,27,4372,23,"name"],[4797,31,4372,6],[4798,0,4373,5],[4800,0,4375,4],[4800,12,4375,8,"bindingType"],[4800,23,4375,19],[4800,26,4375,22,"BIND_FLAGS_TS_ENUM"],[4800,44,4375,4],[4800,46,4375,42,"scope"],[4800,51,4375,47],[4800,52,4375,48,"enums"],[4800,57,4375,42],[4800,58,4375,54,"push"],[4800,62,4375,42],[4800,63,4375,59,"name"],[4800,67,4375,42],[4801,0,4376,4],[4801,12,4376,8,"bindingType"],[4801,23,4376,19],[4801,26,4376,22,"BIND_FLAGS_TS_CONST_ENUM"],[4801,50,4376,4],[4801,52,4376,48,"scope"],[4801,57,4376,53],[4801,58,4376,54,"constEnums"],[4801,68,4376,48],[4801,69,4376,65,"push"],[4801,73,4376,48],[4801,74,4376,70,"name"],[4801,78,4376,48],[4802,0,4377,4],[4802,12,4377,8,"bindingType"],[4802,23,4377,19],[4802,26,4377,22,"BIND_FLAGS_CLASS"],[4802,42,4377,4],[4802,44,4377,40,"scope"],[4802,49,4377,45],[4802,50,4377,46,"classes"],[4802,57,4377,40],[4802,58,4377,54,"push"],[4802,62,4377,40],[4802,63,4377,59,"name"],[4802,67,4377,40],[4803,0,4378,3],[4806,42,4380,22,"scope"],[4806,47],[4806,49,4380,29,"name"],[4806,53],[4806,55,4380,35,"bindingType"],[4806,66],[4806,68,4380,48],[4807,0,4381,4],[4807,12,4381,8,"scope"],[4807,17,4381,13],[4807,18,4381,14,"enums"],[4807,23,4381,8],[4807,24,4381,20,"indexOf"],[4807,31,4381,8],[4807,32,4381,28,"name"],[4807,36,4381,8],[4807,40,4381,36],[4807,41,4381,37],[4807,42,4381,4],[4807,44,4381,40],[4808,0,4382,6],[4808,14,4382,10,"bindingType"],[4808,25,4382,21],[4808,28,4382,24,"BIND_FLAGS_TS_ENUM"],[4808,46,4382,6],[4808,48,4382,44],[4809,0,4383,8],[4809,16,4383,14,"isConst"],[4809,23,4383,21],[4809,26,4383,24],[4809,27,4383,25],[4809,29,4383,27,"bindingType"],[4809,40,4383,38],[4809,43,4383,41,"BIND_FLAGS_TS_CONST_ENUM"],[4809,67,4383,25],[4809,68,4383,8],[4810,0,4384,8],[4810,16,4384,14,"wasConst"],[4810,24,4384,22],[4810,27,4384,25,"scope"],[4810,32,4384,30],[4810,33,4384,31,"constEnums"],[4810,43,4384,25],[4810,44,4384,42,"indexOf"],[4810,51,4384,25],[4810,52,4384,50,"name"],[4810,56,4384,25],[4810,60,4384,58],[4810,61,4384,59],[4810,62,4384,8],[4811,0,4385,8],[4811,19,4385,15,"isConst"],[4811,26,4385,22],[4811,31,4385,27,"wasConst"],[4811,39,4385,8],[4812,0,4386,7],[4814,0,4388,6],[4814,17,4388,13],[4814,21,4388,6],[4815,0,4389,5],[4817,0,4391,4],[4817,12,4391,8,"bindingType"],[4817,23,4391,19],[4817,26,4391,22,"BIND_FLAGS_CLASS"],[4817,42,4391,8],[4817,46,4391,42,"scope"],[4817,51,4391,47],[4817,52,4391,48,"classes"],[4817,59,4391,42],[4817,60,4391,56,"indexOf"],[4817,67,4391,42],[4817,68,4391,64,"name"],[4817,72,4391,42],[4817,76,4391,72],[4817,77,4391,73],[4817,78,4391,4],[4817,80,4391,76],[4818,0,4392,6],[4818,14,4392,10,"scope"],[4818,19,4392,15],[4818,20,4392,16,"lexical"],[4818,27,4392,10],[4818,28,4392,24,"indexOf"],[4818,35,4392,10],[4818,36,4392,32,"name"],[4818,40,4392,10],[4818,44,4392,40],[4818,45,4392,41],[4818,46,4392,6],[4818,48,4392,44],[4819,0,4393,8],[4819,19,4393,15],[4819,20,4393,16],[4819,22,4393,18,"bindingType"],[4819,33,4393,29],[4819,36,4393,32,"BIND_KIND_VALUE"],[4819,51,4393,16],[4819,52,4393,8],[4820,0,4394,7],[4820,11,4392,6],[4820,17,4394,13],[4821,0,4395,8],[4821,19,4395,15],[4821,24,4395,8],[4822,0,4396,7],[4823,0,4397,5],[4825,0,4399,4],[4825,12,4399,8,"bindingType"],[4825,23,4399,19],[4825,26,4399,22,"BIND_KIND_TYPE"],[4825,40,4399,8],[4825,44,4399,40,"scope"],[4825,49,4399,45],[4825,50,4399,46,"types"],[4825,55,4399,40],[4825,56,4399,52,"indexOf"],[4825,63,4399,40],[4825,64,4399,60,"name"],[4825,68,4399,40],[4825,72,4399,68],[4825,73,4399,69],[4825,74,4399,4],[4825,76,4399,72],[4826,0,4400,6],[4826,17,4400,13],[4826,21,4400,6],[4827,0,4401,5],[4829,0,4403,4],[4829,112,4403,40,"arguments"],[4829,121,4403,4],[4830,0,4404,3],[4833,39,4406,19,"id"],[4833,41],[4833,43,4406,23],[4834,0,4407,4],[4834,12,4407,8],[4834,17,4407,13,"scopeStack"],[4834,27,4407,8],[4834,28,4407,24],[4834,29,4407,8],[4834,31,4407,27,"types"],[4834,36,4407,8],[4834,37,4407,33,"indexOf"],[4834,44,4407,8],[4834,45,4407,41,"id"],[4834,47,4407,43],[4834,48,4407,44,"name"],[4834,52,4407,8],[4834,58,4407,54],[4834,59,4407,55],[4834,60,4407,8],[4834,64,4407,60],[4834,69,4407,65,"scopeStack"],[4834,79,4407,60],[4834,80,4407,76],[4834,81,4407,60],[4834,83,4407,79,"exportOnlyBindings"],[4834,101,4407,60],[4834,102,4407,98,"indexOf"],[4834,109,4407,60],[4834,110,4407,106,"id"],[4834,112,4407,108],[4834,113,4407,109,"name"],[4834,117,4407,60],[4834,123,4407,119],[4834,124,4407,120],[4834,125,4407,4],[4834,127,4407,123],[4835,0,4408,6],[4835,103,4408,29,"id"],[4835,105,4408,6],[4836,0,4409,5],[4837,0,4410,3],[4841,4,4350,37,"ScopeHandler"],[4841,16],[4843,0,4414,0],[4843,11,4414,9,"nonNull"],[4843,18,4414,0],[4843,19,4414,17,"x"],[4843,20,4414,0],[4843,22,4414,20],[4844,0,4415,2],[4844,8,4415,6,"x"],[4844,9,4415,7],[4844,13,4415,11],[4844,17,4415,2],[4844,19,4415,17],[4845,0,4416,4],[4845,12,4416,10],[4845,16,4416,14,"Error"],[4845,21,4416,10],[4845,38,4416,34,"x"],[4845,39,4416,10],[4845,52,4416,4],[4846,0,4417,3],[4848,0,4419,2],[4848,11,4419,9,"x"],[4848,12,4419,2],[4849,0,4420,1],[4851,0,4422,0],[4851,11,4422,9,"assert"],[4851,17,4422,0],[4851,18,4422,16,"x"],[4851,19,4422,0],[4851,21,4422,19],[4852,0,4423,2],[4852,8,4423,6],[4852,9,4423,7,"x"],[4852,10,4423,2],[4852,12,4423,10],[4853,0,4424,4],[4853,12,4424,10],[4853,16,4424,14,"Error"],[4853,21,4424,10],[4853,22,4424,20],[4853,35,4424,10],[4853,36,4424,4],[4854,0,4425,3],[4855,0,4426,1],[4857,0,4428,0],[4857,11,4428,9,"keywordTypeFromName"],[4857,30,4428,0],[4857,31,4428,29,"value"],[4857,36,4428,0],[4857,38,4428,36],[4858,0,4429,2],[4858,12,4429,10,"value"],[4858,17,4429,2],[4859,0,4430,4],[4859,11,4430,9],[4859,16,4430,4],[4860,0,4431,6],[4860,15,4431,13],[4860,29,4431,6],[4862,0,4433,4],[4862,11,4433,9],[4862,20,4433,4],[4863,0,4434,6],[4863,15,4434,13],[4863,33,4434,6],[4865,0,4436,4],[4865,11,4436,9],[4865,19,4436,4],[4866,0,4437,6],[4866,15,4437,13],[4866,32,4437,6],[4868,0,4439,4],[4868,11,4439,9],[4868,18,4439,4],[4869,0,4440,6],[4869,15,4440,13],[4869,31,4440,6],[4871,0,4442,4],[4871,11,4442,9],[4871,19,4442,4],[4872,0,4443,6],[4872,15,4443,13],[4872,32,4443,6],[4874,0,4445,4],[4874,11,4445,9],[4874,19,4445,4],[4875,0,4446,6],[4875,15,4446,13],[4875,32,4446,6],[4877,0,4448,4],[4877,11,4448,9],[4877,19,4448,4],[4878,0,4449,6],[4878,15,4449,13],[4878,32,4449,6],[4880,0,4451,4],[4880,11,4451,9],[4880,19,4451,4],[4881,0,4452,6],[4881,15,4452,13],[4881,32,4452,6],[4883,0,4454,4],[4883,11,4454,9],[4883,22,4454,4],[4884,0,4455,6],[4884,15,4455,13],[4884,35,4455,6],[4886,0,4457,4],[4886,11,4457,9],[4886,20,4457,4],[4887,0,4458,6],[4887,15,4458,13],[4887,33,4458,6],[4889,0,4460,4],[4890,0,4461,6],[4890,15,4461,13,"undefined"],[4890,24,4461,6],[4891,0,4429,2],[4892,0,4463,1],[4894,0,4465,0],[4894,6,4465,4,"typescript"],[4894,16,4465,14],[4894,19,4465,18],[4894,28,4465,4,"typescript"],[4894,38,4465,18],[4894,39,4465,18,"superClass"],[4894,49,4465,28],[4895,0,4465,28],[4896,0,4465,28],[4898,0,4465,28],[4899,0,4465,28],[4901,0,4465,28],[4902,0,4465,28],[4904,0,4465,28],[4905,0,4465,28],[4906,0,4465,28],[4906,42,4466,20],[4907,0,4467,4],[4907,17,4467,11,"TypeScriptScopeHandler"],[4907,39,4467,4],[4908,0,4468,3],[4909,0,4465,28],[4910,0,4465,28],[4911,0,4465,28],[4911,41,4470,19],[4912,0,4471,4],[4912,17,4471,11],[4912,22,4471,16,"match"],[4912,27,4471,11],[4912,28,4471,22,"types"],[4912,33,4471,27],[4912,34,4471,28,"name"],[4912,38,4471,11],[4912,39,4471,4],[4913,0,4472,3],[4914,0,4465,28],[4915,0,4465,28],[4916,0,4465,28],[4916,55,4474,33],[4917,0,4475,4],[4917,15,4475,9,"next"],[4917,19,4475,4],[4918,0,4476,4],[4918,17,4476,11],[4918,18,4476,12],[4918,23,4476,17,"hasPrecedingLineBreak"],[4918,44,4476,12],[4918,46,4476,11],[4918,50,4476,44],[4918,51,4476,45],[4918,56,4476,50,"match"],[4918,61,4476,45],[4918,62,4476,56,"types"],[4918,67,4476,61],[4918,68,4476,62,"parenL"],[4918,74,4476,45],[4918,75,4476,11],[4918,79,4476,73],[4918,80,4476,74],[4918,85,4476,79,"match"],[4918,90,4476,74],[4918,91,4476,85,"types"],[4918,96,4476,90],[4918,97,4476,91,"parenR"],[4918,103,4476,74],[4918,104,4476,11],[4918,108,4476,102],[4918,109,4476,103],[4918,114,4476,108,"match"],[4918,119,4476,103],[4918,120,4476,114,"types"],[4918,125,4476,119],[4918,126,4476,120,"colon"],[4918,131,4476,103],[4918,132,4476,11],[4918,136,4476,130],[4918,137,4476,131],[4918,142,4476,136,"match"],[4918,147,4476,131],[4918,148,4476,142,"types"],[4918,153,4476,147],[4918,154,4476,148,"eq"],[4918,156,4476,131],[4918,157,4476,11],[4918,161,4476,155],[4918,162,4476,156],[4918,167,4476,161,"match"],[4918,172,4476,156],[4918,173,4476,167,"types"],[4918,178,4476,172],[4918,179,4476,173,"question"],[4918,187,4476,156],[4918,188,4476,11],[4918,192,4476,186],[4918,193,4476,187],[4918,198,4476,192,"match"],[4918,203,4476,187],[4918,204,4476,198,"types"],[4918,209,4476,203],[4918,210,4476,204,"bang"],[4918,214,4476,187],[4918,215,4476,4],[4919,0,4477,3],[4920,0,4465,28],[4921,0,4465,28],[4922,0,4465,28],[4922,40,4479,18,"allowedModifiers"],[4922,56,4465,28],[4922,58,4479,36],[4923,0,4480,4],[4923,14,4480,8],[4923,15,4480,9],[4923,20,4480,14,"match"],[4923,25,4480,9],[4923,26,4480,20,"types"],[4923,31,4480,25],[4923,32,4480,26,"name"],[4923,36,4480,9],[4923,37,4480,4],[4923,39,4480,33],[4924,0,4481,6],[4924,19,4481,13,"undefined"],[4924,28,4481,6],[4925,0,4482,5],[4927,0,4484,4],[4927,14,4484,10,"modifier"],[4927,22,4484,18],[4927,25,4484,21],[4927,30,4484,26,"state"],[4927,35,4484,21],[4927,36,4484,32,"value"],[4927,41,4484,4],[4929,0,4486,4],[4929,14,4486,8,"allowedModifiers"],[4929,30,4486,24],[4929,31,4486,25,"indexOf"],[4929,38,4486,8],[4929,39,4486,33,"modifier"],[4929,47,4486,8],[4929,53,4486,47],[4929,54,4486,48],[4929,55,4486,8],[4929,59,4486,53],[4929,64,4486,58,"tsTryParse"],[4929,74,4486,53],[4929,75,4486,69],[4929,80,4486,74,"tsNextTokenCanFollowModifier"],[4929,108,4486,69],[4929,109,4486,103,"bind"],[4929,113,4486,69],[4929,114,4486,108],[4929,118,4486,69],[4929,119,4486,53],[4929,120,4486,4],[4929,122,4486,116],[4930,0,4487,6],[4930,19,4487,13,"modifier"],[4930,27,4487,6],[4931,0,4488,5],[4933,0,4490,4],[4933,17,4490,11,"undefined"],[4933,26,4490,4],[4934,0,4491,3],[4935,0,4465,28],[4936,0,4465,28],[4937,0,4465,28],[4937,41,4493,19,"allowedModifiers"],[4937,57,4465,28],[4937,59,4493,37],[4938,0,4494,4],[4938,14,4494,10,"modifiers"],[4938,23,4494,19],[4938,26,4494,22,"Object"],[4938,32,4494,28],[4938,33,4494,29,"create"],[4938,39,4494,22],[4938,40,4494,36],[4938,44,4494,22],[4938,45,4494,4],[4940,0,4496,4],[4940,17,4496,11],[4940,21,4496,4],[4940,23,4496,17],[4941,0,4497,6],[4941,16,4497,12,"startPos"],[4941,24,4497,20],[4941,27,4497,23],[4941,32,4497,28,"state"],[4941,37,4497,23],[4941,38,4497,34,"start"],[4941,43,4497,6],[4942,0,4498,6],[4942,16,4498,12,"modifier"],[4942,24,4498,20],[4942,27,4498,23],[4942,32,4498,28,"tsParseModifier"],[4942,47,4498,23],[4942,48,4498,44,"allowedModifiers"],[4942,64,4498,23],[4942,65,4498,6],[4943,0,4499,6],[4943,16,4499,10],[4943,17,4499,11,"modifier"],[4943,25,4499,6],[4943,27,4499,21],[4945,0,4501,6],[4945,16,4501,10,"Object"],[4945,22,4501,16],[4945,23,4501,17,"hasOwnProperty"],[4945,37,4501,10],[4945,38,4501,32,"call"],[4945,42,4501,10],[4945,43,4501,37,"modifiers"],[4945,52,4501,10],[4945,54,4501,48,"modifier"],[4945,62,4501,10],[4945,63,4501,6],[4945,65,4501,59],[4946,0,4502,8],[4946,19,4502,13,"raise"],[4946,24,4502,8],[4946,25,4502,19,"startPos"],[4946,33,4502,8],[4946,61,4502,53,"modifier"],[4946,69,4502,8],[4947,0,4503,7],[4949,0,4505,6,"modifiers"],[4949,12,4505,6,"modifiers"],[4949,21,4505,15],[4949,22,4505,16,"modifier"],[4949,30,4505,15],[4949,31,4505,6],[4949,34,4505,28],[4949,38,4505,6],[4950,0,4506,5],[4952,0,4508,4],[4952,17,4508,11,"modifiers"],[4952,26,4508,4],[4953,0,4509,3],[4954,0,4465,28],[4955,0,4465,28],[4956,0,4465,28],[4956,43,4511,21,"kind"],[4956,47,4465,28],[4956,49,4511,27],[4957,0,4512,4],[4957,18,4512,12,"kind"],[4957,22,4512,4],[4958,0,4513,6],[4958,17,4513,11],[4958,30,4513,6],[4959,0,4514,6],[4959,17,4514,11],[4959,30,4514,6],[4960,0,4515,8],[4960,21,4515,15],[4960,26,4515,20,"match"],[4960,31,4515,15],[4960,32,4515,26,"types"],[4960,37,4515,31],[4960,38,4515,32,"braceR"],[4960,44,4515,15],[4960,45,4515,8],[4962,0,4517,6],[4962,17,4517,11],[4962,40,4517,6],[4963,0,4518,8],[4963,21,4518,15],[4963,26,4518,20,"match"],[4963,31,4518,15],[4963,32,4518,26,"types"],[4963,37,4518,31],[4963,38,4518,32,"braceL"],[4963,44,4518,15],[4963,45,4518,8],[4965,0,4520,6],[4965,17,4520,11],[4965,36,4520,6],[4966,0,4521,8],[4966,21,4521,15],[4966,26,4521,20,"match"],[4966,31,4521,15],[4966,32,4521,26,"types"],[4966,37,4521,31],[4966,38,4521,32,"bracketR"],[4966,46,4521,15],[4966,47,4521,8],[4968,0,4523,6],[4968,17,4523,11],[4968,44,4523,6],[4969,0,4524,8],[4969,21,4524,15],[4969,26,4524,20,"isRelational"],[4969,38,4524,15],[4969,39,4524,33],[4969,42,4524,15],[4969,43,4524,8],[4970,0,4512,4],[4972,0,4527,4],[4972,16,4527,10],[4972,20,4527,14,"Error"],[4972,25,4527,10],[4972,26,4527,20],[4972,39,4527,10],[4972,40,4527,4],[4973,0,4528,3],[4974,0,4465,28],[4975,0,4465,28],[4976,0,4465,28],[4976,36,4530,14,"kind"],[4976,40,4465,28],[4976,42,4530,20,"parseElement"],[4976,54,4465,28],[4976,56,4530,34],[4977,0,4531,4],[4977,14,4531,10,"result"],[4977,20,4531,16],[4977,23,4531,19],[4977,25,4531,4],[4979,0,4533,4],[4979,17,4533,11],[4979,18,4533,12],[4979,23,4533,17,"tsIsListTerminator"],[4979,41,4533,12],[4979,42,4533,36,"kind"],[4979,46,4533,12],[4979,47,4533,4],[4979,49,4533,43],[4980,0,4534,6,"result"],[4980,12,4534,6,"result"],[4980,18,4534,12],[4980,19,4534,13,"push"],[4980,23,4534,6],[4980,24,4534,18,"parseElement"],[4980,36,4534,30],[4980,38,4534,6],[4981,0,4535,5],[4983,0,4537,4],[4983,17,4537,11,"result"],[4983,23,4537,4],[4984,0,4538,3],[4985,0,4465,28],[4986,0,4465,28],[4987,0,4465,28],[4987,45,4540,23,"kind"],[4987,49,4465,28],[4987,51,4540,29,"parseElement"],[4987,63,4465,28],[4987,65,4540,43],[4988,0,4541,4],[4988,17,4541,11,"nonNull"],[4988,24,4541,18],[4988,25,4541,19],[4988,30,4541,24,"tsParseDelimitedListWorker"],[4988,56,4541,19],[4988,57,4541,51,"kind"],[4988,61,4541,19],[4988,63,4541,57,"parseElement"],[4988,75,4541,19],[4988,77,4541,71],[4988,81,4541,19],[4988,82,4541,18],[4988,83,4541,4],[4989,0,4542,3],[4990,0,4465,28],[4991,0,4465,28],[4992,0,4465,28],[4992,51,4544,29,"kind"],[4992,55,4465,28],[4992,57,4544,35,"parseElement"],[4992,69,4465,28],[4992,71,4544,49,"expectSuccess"],[4992,84,4465,28],[4992,86,4544,64],[4993,0,4545,4],[4993,14,4545,10,"result"],[4993,20,4545,16],[4993,23,4545,19],[4993,25,4545,4],[4995,0,4547,4],[4995,17,4547,11],[4995,21,4547,4],[4995,23,4547,17],[4996,0,4548,6],[4996,16,4548,10],[4996,21,4548,15,"tsIsListTerminator"],[4996,39,4548,10],[4996,40,4548,34,"kind"],[4996,44,4548,10],[4996,45,4548,6],[4996,47,4548,41],[4997,0,4549,8],[4998,0,4550,7],[5000,0,4552,6],[5000,16,4552,12,"element"],[5000,23,4552,19],[5000,26,4552,22,"parseElement"],[5000,38,4552,34],[5000,40,4552,6],[5002,0,4554,6],[5002,16,4554,10,"element"],[5002,23,4554,17],[5002,27,4554,21],[5002,31,4554,6],[5002,33,4554,27],[5003,0,4555,8],[5003,21,4555,15,"undefined"],[5003,30,4555,8],[5004,0,4556,7],[5006,0,4558,6,"result"],[5006,12,4558,6,"result"],[5006,18,4558,12],[5006,19,4558,13,"push"],[5006,23,4558,6],[5006,24,4558,18,"element"],[5006,31,4558,6],[5008,0,4560,6],[5008,16,4560,10],[5008,21,4560,15,"eat"],[5008,24,4560,10],[5008,25,4560,19,"types"],[5008,30,4560,24],[5008,31,4560,25,"comma"],[5008,36,4560,10],[5008,37,4560,6],[5008,39,4560,33],[5009,0,4561,8],[5010,0,4562,7],[5012,0,4564,6],[5012,16,4564,10],[5012,21,4564,15,"tsIsListTerminator"],[5012,39,4564,10],[5012,40,4564,34,"kind"],[5012,44,4564,10],[5012,45,4564,6],[5012,47,4564,41],[5013,0,4565,8],[5014,0,4566,7],[5016,0,4568,6],[5016,16,4568,10,"expectSuccess"],[5016,29,4568,6],[5016,31,4568,25],[5017,0,4569,8],[5017,19,4569,13,"expect"],[5017,25,4569,8],[5017,26,4569,20,"types"],[5017,31,4569,25],[5017,32,4569,26,"comma"],[5017,37,4569,8],[5018,0,4570,7],[5020,0,4572,6],[5020,19,4572,13,"undefined"],[5020,28,4572,6],[5021,0,4573,5],[5023,0,4575,4],[5023,17,4575,11,"result"],[5023,23,4575,4],[5024,0,4576,3],[5025,0,4465,28],[5026,0,4465,28],[5027,0,4465,28],[5027,45,4578,23,"kind"],[5027,49,4465,28],[5027,51,4578,29,"parseElement"],[5027,63,4465,28],[5027,65,4578,43,"bracket"],[5027,72,4465,28],[5027,74,4578,52,"skipFirstToken"],[5027,88,4465,28],[5027,90,4578,68],[5028,0,4579,4],[5028,14,4579,8],[5028,15,4579,9,"skipFirstToken"],[5028,29,4579,4],[5028,31,4579,25],[5029,0,4580,6],[5029,16,4580,10,"bracket"],[5029,23,4580,6],[5029,25,4580,19],[5030,0,4581,8],[5030,19,4581,13,"expect"],[5030,25,4581,8],[5030,26,4581,20,"types"],[5030,31,4581,25],[5030,32,4581,26,"bracketL"],[5030,40,4581,8],[5031,0,4582,7],[5031,13,4580,6],[5031,19,4582,13],[5032,0,4583,8],[5032,19,4583,13,"expectRelational"],[5032,35,4583,8],[5032,36,4583,30],[5032,39,4583,8],[5033,0,4584,7],[5034,0,4585,5],[5036,0,4587,4],[5036,14,4587,10,"result"],[5036,20,4587,16],[5036,23,4587,19],[5036,28,4587,24,"tsParseDelimitedList"],[5036,48,4587,19],[5036,49,4587,45,"kind"],[5036,53,4587,19],[5036,55,4587,51,"parseElement"],[5036,67,4587,19],[5036,68,4587,4],[5038,0,4589,4],[5038,14,4589,8,"bracket"],[5038,21,4589,4],[5038,23,4589,17],[5039,0,4590,6],[5039,17,4590,11,"expect"],[5039,23,4590,6],[5039,24,4590,18,"types"],[5039,29,4590,23],[5039,30,4590,24,"bracketR"],[5039,38,4590,6],[5040,0,4591,5],[5040,11,4589,4],[5040,17,4591,11],[5041,0,4592,6],[5041,17,4592,11,"expectRelational"],[5041,33,4592,6],[5041,34,4592,28],[5041,37,4592,6],[5042,0,4593,5],[5044,0,4595,4],[5044,17,4595,11,"result"],[5044,23,4595,4],[5045,0,4596,3],[5046,0,4465,28],[5047,0,4465,28],[5048,0,4465,28],[5048,44,4598,22],[5049,0,4599,4],[5049,14,4599,10,"node"],[5049,18,4599,14],[5049,21,4599,17],[5049,26,4599,22,"startNode"],[5049,35,4599,17],[5049,37,4599,4],[5050,0,4600,4],[5050,15,4600,9,"expect"],[5050,21,4600,4],[5050,22,4600,16,"types"],[5050,27,4600,21],[5050,28,4600,22,"_import"],[5050,35,4600,4],[5051,0,4601,4],[5051,15,4601,9,"expect"],[5051,21,4601,4],[5051,22,4601,16,"types"],[5051,27,4601,21],[5051,28,4601,22,"parenL"],[5051,34,4601,4],[5053,0,4603,4],[5053,14,4603,8],[5053,15,4603,9],[5053,20,4603,14,"match"],[5053,25,4603,9],[5053,26,4603,20,"types"],[5053,31,4603,25],[5053,32,4603,26,"string"],[5053,38,4603,9],[5053,39,4603,4],[5053,41,4603,35],[5054,0,4604,6],[5054,17,4604,11,"raise"],[5054,22,4604,6],[5054,23,4604,17],[5054,28,4604,22,"state"],[5054,33,4604,17],[5054,34,4604,28,"start"],[5054,39,4604,6],[5054,41,4604,35],[5054,93,4604,6],[5055,0,4605,5],[5057,0,4607,4,"node"],[5057,10,4607,4,"node"],[5057,14,4607,8],[5057,15,4607,9,"argument"],[5057,23,4607,4],[5057,26,4607,20],[5057,31,4607,25,"parseExprAtom"],[5057,44,4607,20],[5057,46,4607,4],[5058,0,4608,4],[5058,15,4608,9,"expect"],[5058,21,4608,4],[5058,22,4608,16,"types"],[5058,27,4608,21],[5058,28,4608,22,"parenR"],[5058,34,4608,4],[5060,0,4610,4],[5060,14,4610,8],[5060,19,4610,13,"eat"],[5060,22,4610,8],[5060,23,4610,17,"types"],[5060,28,4610,22],[5060,29,4610,23,"dot"],[5060,32,4610,8],[5060,33,4610,4],[5060,35,4610,29],[5061,0,4611,6,"node"],[5061,12,4611,6,"node"],[5061,16,4611,10],[5061,17,4611,11,"qualifier"],[5061,26,4611,6],[5061,29,4611,23],[5061,34,4611,28,"tsParseEntityName"],[5061,51,4611,23],[5061,52,4611,46],[5061,56,4611,23],[5061,57,4611,6],[5062,0,4612,5],[5064,0,4614,4],[5064,14,4614,8],[5064,19,4614,13,"isRelational"],[5064,31,4614,8],[5064,32,4614,26],[5064,35,4614,8],[5064,36,4614,4],[5064,38,4614,32],[5065,0,4615,6,"node"],[5065,12,4615,6,"node"],[5065,16,4615,10],[5065,17,4615,11,"typeParameters"],[5065,31,4615,6],[5065,34,4615,28],[5065,39,4615,33,"tsParseTypeArguments"],[5065,59,4615,28],[5065,61,4615,6],[5066,0,4616,5],[5068,0,4618,4],[5068,17,4618,11],[5068,22,4618,16,"finishNode"],[5068,32,4618,11],[5068,33,4618,27,"node"],[5068,37,4618,11],[5068,39,4618,33],[5068,53,4618,11],[5068,54,4618,4],[5069,0,4619,3],[5070,0,4465,28],[5071,0,4465,28],[5072,0,4465,28],[5072,42,4621,20,"allowReservedWords"],[5072,60,4465,28],[5072,62,4621,40],[5073,0,4622,4],[5073,14,4622,8,"entity"],[5073,20,4622,14],[5073,23,4622,17],[5073,28,4622,22,"parseIdentifier"],[5073,43,4622,17],[5073,45,4622,4],[5075,0,4624,4],[5075,17,4624,11],[5075,22,4624,16,"eat"],[5075,25,4624,11],[5075,26,4624,20,"types"],[5075,31,4624,25],[5075,32,4624,26,"dot"],[5075,35,4624,11],[5075,36,4624,4],[5075,38,4624,32],[5076,0,4625,6],[5076,16,4625,12,"node"],[5076,20,4625,16],[5076,23,4625,19],[5076,28,4625,24,"startNodeAtNode"],[5076,43,4625,19],[5076,44,4625,40,"entity"],[5076,50,4625,19],[5076,51,4625,6],[5077,0,4626,6,"node"],[5077,12,4626,6,"node"],[5077,16,4626,10],[5077,17,4626,11,"left"],[5077,21,4626,6],[5077,24,4626,18,"entity"],[5077,30,4626,6],[5078,0,4627,6,"node"],[5078,12,4627,6,"node"],[5078,16,4627,10],[5078,17,4627,11,"right"],[5078,22,4627,6],[5078,25,4627,19],[5078,30,4627,24,"parseIdentifier"],[5078,45,4627,19],[5078,46,4627,40,"allowReservedWords"],[5078,64,4627,19],[5078,65,4627,6],[5079,0,4628,6,"entity"],[5079,12,4628,6,"entity"],[5079,18,4628,12],[5079,21,4628,15],[5079,26,4628,20,"finishNode"],[5079,36,4628,15],[5079,37,4628,31,"node"],[5079,41,4628,15],[5079,43,4628,37],[5079,60,4628,15],[5079,61,4628,6],[5080,0,4629,5],[5082,0,4631,4],[5082,17,4631,11,"entity"],[5082,23,4631,4],[5083,0,4632,3],[5084,0,4465,28],[5085,0,4465,28],[5086,0,4465,28],[5086,47,4634,25],[5087,0,4635,4],[5087,14,4635,10,"node"],[5087,18,4635,14],[5087,21,4635,17],[5087,26,4635,22,"startNode"],[5087,35,4635,17],[5087,37,4635,4],[5088,0,4636,4,"node"],[5088,10,4636,4,"node"],[5088,14,4636,8],[5088,15,4636,9,"typeName"],[5088,23,4636,4],[5088,26,4636,20],[5088,31,4636,25,"tsParseEntityName"],[5088,48,4636,20],[5088,49,4636,43],[5088,54,4636,20],[5088,55,4636,4],[5090,0,4638,4],[5090,14,4638,8],[5090,15,4638,9],[5090,20,4638,14,"hasPrecedingLineBreak"],[5090,41,4638,9],[5090,43,4638,8],[5090,47,4638,41],[5090,52,4638,46,"isRelational"],[5090,64,4638,41],[5090,65,4638,59],[5090,68,4638,41],[5090,69,4638,4],[5090,71,4638,65],[5091,0,4639,6,"node"],[5091,12,4639,6,"node"],[5091,16,4639,10],[5091,17,4639,11,"typeParameters"],[5091,31,4639,6],[5091,34,4639,28],[5091,39,4639,33,"tsParseTypeArguments"],[5091,59,4639,28],[5091,61,4639,6],[5092,0,4640,5],[5094,0,4642,4],[5094,17,4642,11],[5094,22,4642,16,"finishNode"],[5094,32,4642,11],[5094,33,4642,27,"node"],[5094,37,4642,11],[5094,39,4642,33],[5094,56,4642,11],[5094,57,4642,4],[5095,0,4643,3],[5096,0,4465,28],[5097,0,4465,28],[5098,0,4465,28],[5098,49,4645,27,"lhs"],[5098,52,4465,28],[5098,54,4645,32],[5099,0,4646,4],[5099,15,4646,9,"next"],[5099,19,4646,4],[5100,0,4647,4],[5100,14,4647,10,"node"],[5100,18,4647,14],[5100,21,4647,17],[5100,26,4647,22,"startNodeAtNode"],[5100,41,4647,17],[5100,42,4647,38,"lhs"],[5100,45,4647,17],[5100,46,4647,4],[5101,0,4648,4,"node"],[5101,10,4648,4,"node"],[5101,14,4648,8],[5101,15,4648,9,"parameterName"],[5101,28,4648,4],[5101,31,4648,25,"lhs"],[5101,34,4648,4],[5102,0,4649,4,"node"],[5102,10,4649,4,"node"],[5102,14,4649,8],[5102,15,4649,9,"typeAnnotation"],[5102,29,4649,4],[5102,32,4649,26],[5102,37,4649,31,"tsParseTypeAnnotation"],[5102,58,4649,26],[5102,59,4649,53],[5102,64,4649,26],[5102,65,4649,4],[5103,0,4650,4],[5103,17,4650,11],[5103,22,4650,16,"finishNode"],[5103,32,4650,11],[5103,33,4650,27,"node"],[5103,37,4650,11],[5103,39,4650,33],[5103,56,4650,11],[5103,57,4650,4],[5104,0,4651,3],[5105,0,4465,28],[5106,0,4465,28],[5107,0,4465,28],[5107,46,4653,24],[5108,0,4654,4],[5108,14,4654,10,"node"],[5108,18,4654,14],[5108,21,4654,17],[5108,26,4654,22,"startNode"],[5108,35,4654,17],[5108,37,4654,4],[5109,0,4655,4],[5109,15,4655,9,"next"],[5109,19,4655,4],[5110,0,4656,4],[5110,17,4656,11],[5110,22,4656,16,"finishNode"],[5110,32,4656,11],[5110,33,4656,27,"node"],[5110,37,4656,11],[5110,39,4656,33],[5110,51,4656,11],[5110,52,4656,4],[5111,0,4657,3],[5112,0,4465,28],[5113,0,4465,28],[5114,0,4465,28],[5114,43,4659,21],[5115,0,4660,4],[5115,14,4660,10,"node"],[5115,18,4660,14],[5115,21,4660,17],[5115,26,4660,22,"startNode"],[5115,35,4660,17],[5115,37,4660,4],[5116,0,4661,4],[5116,15,4661,9,"expect"],[5116,21,4661,4],[5116,22,4661,16,"types"],[5116,27,4661,21],[5116,28,4661,22,"_typeof"],[5116,35,4661,4],[5118,0,4663,4],[5118,14,4663,8],[5118,19,4663,13,"match"],[5118,24,4663,8],[5118,25,4663,19,"types"],[5118,30,4663,24],[5118,31,4663,25,"_import"],[5118,38,4663,8],[5118,39,4663,4],[5118,41,4663,35],[5119,0,4664,6,"node"],[5119,12,4664,6,"node"],[5119,16,4664,10],[5119,17,4664,11,"exprName"],[5119,25,4664,6],[5119,28,4664,22],[5119,33,4664,27,"tsParseImportType"],[5119,50,4664,22],[5119,52,4664,6],[5120,0,4665,5],[5120,11,4663,4],[5120,17,4665,11],[5121,0,4666,6,"node"],[5121,12,4666,6,"node"],[5121,16,4666,10],[5121,17,4666,11,"exprName"],[5121,25,4666,6],[5121,28,4666,22],[5121,33,4666,27,"tsParseEntityName"],[5121,50,4666,22],[5121,51,4666,45],[5121,55,4666,22],[5121,56,4666,6],[5122,0,4667,5],[5124,0,4669,4],[5124,17,4669,11],[5124,22,4669,16,"finishNode"],[5124,32,4669,11],[5124,33,4669,27,"node"],[5124,37,4669,11],[5124,39,4669,33],[5124,52,4669,11],[5124,53,4669,4],[5125,0,4670,3],[5126,0,4465,28],[5127,0,4465,28],[5128,0,4465,28],[5128,47,4672,25],[5129,0,4673,4],[5129,14,4673,10,"node"],[5129,18,4673,14],[5129,21,4673,17],[5129,26,4673,22,"startNode"],[5129,35,4673,17],[5129,37,4673,4],[5130,0,4674,4,"node"],[5130,10,4674,4,"node"],[5130,14,4674,8],[5130,15,4674,9,"name"],[5130,19,4674,4],[5130,22,4674,16],[5130,27,4674,21,"parseIdentifierName"],[5130,46,4674,16],[5130,47,4674,41,"node"],[5130,51,4674,45],[5130,52,4674,46,"start"],[5130,57,4674,16],[5130,58,4674,4],[5131,0,4675,4,"node"],[5131,10,4675,4,"node"],[5131,14,4675,8],[5131,15,4675,9,"constraint"],[5131,25,4675,4],[5131,28,4675,22],[5131,33,4675,27,"tsEatThenParseType"],[5131,51,4675,22],[5131,52,4675,46,"types"],[5131,57,4675,51],[5131,58,4675,52,"_extends"],[5131,66,4675,22],[5131,67,4675,4],[5132,0,4676,4,"node"],[5132,10,4676,4,"node"],[5132,14,4676,8],[5132,15,4676,9,"default"],[5132,22,4676,4],[5132,25,4676,19],[5132,30,4676,24,"tsEatThenParseType"],[5132,48,4676,19],[5132,49,4676,43,"types"],[5132,54,4676,48],[5132,55,4676,49,"eq"],[5132,57,4676,19],[5132,58,4676,4],[5133,0,4677,4],[5133,17,4677,11],[5133,22,4677,16,"finishNode"],[5133,32,4677,11],[5133,33,4677,27,"node"],[5133,37,4677,11],[5133,39,4677,33],[5133,56,4677,11],[5133,57,4677,4],[5134,0,4678,3],[5135,0,4465,28],[5136,0,4465,28],[5137,0,4465,28],[5137,51,4680,29],[5138,0,4681,4],[5138,14,4681,8],[5138,19,4681,13,"isRelational"],[5138,31,4681,8],[5138,32,4681,26],[5138,35,4681,8],[5138,36,4681,4],[5138,38,4681,32],[5139,0,4682,6],[5139,19,4682,13],[5139,24,4682,18,"tsParseTypeParameters"],[5139,45,4682,13],[5139,47,4682,6],[5140,0,4683,5],[5141,0,4684,3],[5142,0,4465,28],[5143,0,4465,28],[5144,0,4465,28],[5144,48,4686,26],[5145,0,4687,4],[5145,14,4687,10,"node"],[5145,18,4687,14],[5145,21,4687,17],[5145,26,4687,22,"startNode"],[5145,35,4687,17],[5145,37,4687,4],[5147,0,4689,4],[5147,14,4689,8],[5147,19,4689,13,"isRelational"],[5147,31,4689,8],[5147,32,4689,26],[5147,35,4689,8],[5147,40,4689,34],[5147,45,4689,39,"match"],[5147,50,4689,34],[5147,51,4689,45,"types"],[5147,56,4689,50],[5147,57,4689,51,"jsxTagStart"],[5147,68,4689,34],[5147,69,4689,4],[5147,71,4689,65],[5148,0,4690,6],[5148,17,4690,11,"next"],[5148,21,4690,6],[5149,0,4691,5],[5149,11,4689,4],[5149,17,4691,11],[5150,0,4692,6],[5150,17,4692,11,"unexpected"],[5150,27,4692,6],[5151,0,4693,5],[5153,0,4695,4,"node"],[5153,10,4695,4,"node"],[5153,14,4695,8],[5153,15,4695,9,"params"],[5153,21,4695,4],[5153,24,4695,18],[5153,29,4695,23,"tsParseBracketedList"],[5153,49,4695,18],[5153,50,4695,44],[5153,77,4695,18],[5153,79,4695,73],[5153,84,4695,78,"tsParseTypeParameter"],[5153,104,4695,73],[5153,105,4695,99,"bind"],[5153,109,4695,73],[5153,110,4695,104],[5153,114,4695,73],[5153,115,4695,18],[5153,117,4695,111],[5153,122,4695,18],[5153,124,4695,118],[5153,128,4695,18],[5153,129,4695,4],[5154,0,4696,4],[5154,17,4696,11],[5154,22,4696,16,"finishNode"],[5154,32,4696,11],[5154,33,4696,27,"node"],[5154,37,4696,11],[5154,39,4696,33],[5154,67,4696,11],[5154,68,4696,4],[5155,0,4697,3],[5156,0,4465,28],[5157,0,4465,28],[5158,0,4465,28],[5158,56,4699,34],[5159,0,4700,4],[5159,14,4700,8],[5159,19,4700,13,"lookahead"],[5159,28,4700,8],[5159,31,4700,25,"type"],[5159,35,4700,8],[5159,40,4700,34,"types"],[5159,45,4700,39],[5159,46,4700,40,"_const"],[5159,52,4700,4],[5159,54,4700,48],[5160,0,4701,6],[5160,17,4701,11,"next"],[5160,21,4701,6],[5161,0,4702,6],[5161,19,4702,13],[5161,24,4702,18,"tsParseTypeReference"],[5161,44,4702,13],[5161,46,4702,6],[5162,0,4703,5],[5164,0,4705,4],[5164,17,4705,11],[5164,21,4705,4],[5165,0,4706,3],[5166,0,4465,28],[5167,0,4465,28],[5168,0,4465,28],[5168,40,4708,18,"returnToken"],[5168,51,4465,28],[5168,53,4708,31,"signature"],[5168,62,4465,28],[5168,64,4708,42],[5169,0,4709,4],[5169,14,4709,10,"returnTokenRequired"],[5169,33,4709,29],[5169,36,4709,32,"returnToken"],[5169,47,4709,43],[5169,52,4709,48,"types"],[5169,57,4709,53],[5169,58,4709,54,"arrow"],[5169,63,4709,4],[5170,0,4710,4,"signature"],[5170,10,4710,4,"signature"],[5170,19,4710,13],[5170,20,4710,14,"typeParameters"],[5170,34,4710,4],[5170,37,4710,31],[5170,42,4710,36,"tsTryParseTypeParameters"],[5170,66,4710,31],[5170,68,4710,4],[5171,0,4711,4],[5171,15,4711,9,"expect"],[5171,21,4711,4],[5171,22,4711,16,"types"],[5171,27,4711,21],[5171,28,4711,22,"parenL"],[5171,34,4711,4],[5172,0,4712,4,"signature"],[5172,10,4712,4,"signature"],[5172,19,4712,13],[5172,20,4712,14,"parameters"],[5172,30,4712,4],[5172,33,4712,27],[5172,38,4712,32,"tsParseBindingListForSignature"],[5172,68,4712,27],[5172,70,4712,4],[5174,0,4714,4],[5174,14,4714,8,"returnTokenRequired"],[5174,33,4714,4],[5174,35,4714,29],[5175,0,4715,6,"signature"],[5175,12,4715,6,"signature"],[5175,21,4715,15],[5175,22,4715,16,"typeAnnotation"],[5175,36,4715,6],[5175,39,4715,33],[5175,44,4715,38,"tsParseTypeOrTypePredicateAnnotation"],[5175,80,4715,33],[5175,81,4715,75,"returnToken"],[5175,92,4715,33],[5175,93,4715,6],[5176,0,4716,5],[5176,11,4714,4],[5176,17,4716,11],[5176,21,4716,15],[5176,26,4716,20,"match"],[5176,31,4716,15],[5176,32,4716,26,"returnToken"],[5176,43,4716,15],[5176,44,4716,11],[5176,46,4716,40],[5177,0,4717,6,"signature"],[5177,12,4717,6,"signature"],[5177,21,4717,15],[5177,22,4717,16,"typeAnnotation"],[5177,36,4717,6],[5177,39,4717,33],[5177,44,4717,38,"tsParseTypeOrTypePredicateAnnotation"],[5177,80,4717,33],[5177,81,4717,75,"returnToken"],[5177,92,4717,33],[5177,93,4717,6],[5178,0,4718,5],[5179,0,4719,3],[5180,0,4465,28],[5181,0,4465,28],[5182,0,4465,28],[5182,57,4721,35],[5183,0,4721,35],[5185,0,4722,4],[5185,17,4722,11],[5185,22,4722,16,"parseBindingList"],[5185,38,4722,11],[5185,39,4722,33,"types"],[5185,44,4722,38],[5185,45,4722,39,"parenR"],[5185,51,4722,11],[5185,53,4722,47],[5185,55,4722,11],[5185,57,4722,51,"map"],[5185,60,4722,11],[5185,61,4722,55],[5185,71,4722,55,"pattern"],[5185,78,4722,62],[5185,80,4722,66],[5186,0,4723,6],[5186,16,4723,10,"pattern"],[5186,23,4723,17],[5186,24,4723,18,"type"],[5186,28,4723,10],[5186,33,4723,27],[5186,45,4723,10],[5186,49,4723,43,"pattern"],[5186,56,4723,50],[5186,57,4723,51,"type"],[5186,61,4723,43],[5186,66,4723,60],[5186,79,4723,10],[5186,83,4723,77,"pattern"],[5186,90,4723,84],[5186,91,4723,85,"type"],[5186,95,4723,77],[5186,100,4723,94],[5186,115,4723,10],[5186,119,4723,113,"pattern"],[5186,126,4723,120],[5186,127,4723,121,"type"],[5186,131,4723,113],[5186,136,4723,130],[5186,150,4723,6],[5186,152,4723,146],[5187,0,4724,8],[5187,14,4724,8],[5187,21,4724,12],[5187,22,4724,13,"raise"],[5187,27,4724,8],[5187,28,4724,19,"pattern"],[5187,35,4724,26],[5187,36,4724,27,"start"],[5187,41,4724,8],[5187,43,4724,34],[5187,139,4724,127,"pattern"],[5187,146,4724,134],[5187,147,4724,135,"type"],[5187,151,4724,34],[5187,152,4724,8],[5188,0,4725,7],[5190,0,4727,6],[5190,19,4727,13,"pattern"],[5190,26,4727,6],[5191,0,4728,5],[5191,11,4722,11],[5191,12,4722,4],[5192,0,4729,3],[5193,0,4465,28],[5194,0,4465,28],[5195,0,4465,28],[5195,53,4731,31],[5196,0,4732,4],[5196,14,4732,8],[5196,15,4732,9],[5196,20,4732,14,"eat"],[5196,23,4732,9],[5196,24,4732,18,"types"],[5196,29,4732,23],[5196,30,4732,24,"comma"],[5196,35,4732,9],[5196,36,4732,4],[5196,38,4732,32],[5197,0,4733,6],[5197,17,4733,11,"semicolon"],[5197,26,4733,6],[5198,0,4734,5],[5199,0,4735,3],[5200,0,4465,28],[5201,0,4465,28],[5202,0,4465,28],[5202,47,4737,25,"kind"],[5202,51,4465,28],[5202,53,4737,31,"node"],[5202,57,4465,28],[5202,59,4737,37],[5203,0,4738,4],[5203,15,4738,9,"tsFillSignature"],[5203,30,4738,4],[5203,31,4738,25,"types"],[5203,36,4738,30],[5203,37,4738,31,"colon"],[5203,42,4738,4],[5203,44,4738,38,"node"],[5203,48,4738,4],[5204,0,4739,4],[5204,15,4739,9,"tsParseTypeMemberSemicolon"],[5204,41,4739,4],[5205,0,4740,4],[5205,17,4740,11],[5205,22,4740,16,"finishNode"],[5205,32,4740,11],[5205,33,4740,27,"node"],[5205,37,4740,11],[5205,39,4740,33,"kind"],[5205,43,4740,11],[5205,44,4740,4],[5206,0,4741,3],[5207,0,4465,28],[5208,0,4465,28],[5209,0,4465,28],[5209,58,4743,36],[5210,0,4744,4],[5210,15,4744,9,"next"],[5210,19,4744,4],[5211,0,4745,4],[5211,17,4745,11],[5211,22,4745,16,"eat"],[5211,25,4745,11],[5211,26,4745,20,"types"],[5211,31,4745,25],[5211,32,4745,26,"name"],[5211,36,4745,11],[5211,41,4745,35],[5211,46,4745,40,"match"],[5211,51,4745,35],[5211,52,4745,46,"types"],[5211,57,4745,51],[5211,58,4745,52,"colon"],[5211,63,4745,35],[5211,64,4745,4],[5212,0,4746,3],[5213,0,4465,28],[5214,0,4465,28],[5215,0,4465,28],[5215,49,4748,27,"node"],[5215,53,4465,28],[5215,55,4748,33],[5216,0,4749,4],[5216,14,4749,8],[5216,16,4749,10],[5216,21,4749,15,"match"],[5216,26,4749,10],[5216,27,4749,21,"types"],[5216,32,4749,26],[5216,33,4749,27,"bracketL"],[5216,41,4749,10],[5216,46,4749,40],[5216,51,4749,45,"tsLookAhead"],[5216,62,4749,40],[5216,63,4749,57],[5216,68,4749,62,"tsIsUnambiguouslyIndexSignature"],[5216,99,4749,57],[5216,100,4749,94,"bind"],[5216,104,4749,57],[5216,105,4749,99],[5216,109,4749,57],[5216,110,4749,40],[5216,111,4749,8],[5216,112,4749,4],[5216,114,4749,108],[5217,0,4750,6],[5217,19,4750,13,"undefined"],[5217,28,4750,6],[5218,0,4751,5],[5220,0,4753,4],[5220,15,4753,9,"expect"],[5220,21,4753,4],[5220,22,4753,16,"types"],[5220,27,4753,21],[5220,28,4753,22,"bracketL"],[5220,36,4753,4],[5221,0,4754,4],[5221,14,4754,10,"id"],[5221,16,4754,12],[5221,19,4754,15],[5221,24,4754,20,"parseIdentifier"],[5221,39,4754,15],[5221,41,4754,4],[5222,0,4755,4,"id"],[5222,10,4755,4,"id"],[5222,12,4755,6],[5222,13,4755,7,"typeAnnotation"],[5222,27,4755,4],[5222,30,4755,24],[5222,35,4755,29,"tsParseTypeAnnotation"],[5222,56,4755,24],[5222,58,4755,4],[5223,0,4756,4],[5223,15,4756,9,"resetEndLocation"],[5223,31,4756,4],[5223,32,4756,26,"id"],[5223,34,4756,4],[5224,0,4757,4],[5224,15,4757,9,"expect"],[5224,21,4757,4],[5224,22,4757,16,"types"],[5224,27,4757,21],[5224,28,4757,22,"bracketR"],[5224,36,4757,4],[5225,0,4758,4,"node"],[5225,10,4758,4,"node"],[5225,14,4758,8],[5225,15,4758,9,"parameters"],[5225,25,4758,4],[5225,28,4758,22],[5225,29,4758,23,"id"],[5225,31,4758,22],[5225,32,4758,4],[5226,0,4759,4],[5226,14,4759,10,"type"],[5226,18,4759,14],[5226,21,4759,17],[5226,26,4759,22,"tsTryParseTypeAnnotation"],[5226,50,4759,17],[5226,52,4759,4],[5227,0,4760,4],[5227,14,4760,8,"type"],[5227,18,4760,4],[5227,20,4760,14,"node"],[5227,24,4760,18],[5227,25,4760,19,"typeAnnotation"],[5227,39,4760,14],[5227,42,4760,36,"type"],[5227,46,4760,14],[5228,0,4761,4],[5228,15,4761,9,"tsParseTypeMemberSemicolon"],[5228,41,4761,4],[5229,0,4762,4],[5229,17,4762,11],[5229,22,4762,16,"finishNode"],[5229,32,4762,11],[5229,33,4762,27,"node"],[5229,37,4762,11],[5229,39,4762,33],[5229,57,4762,11],[5229,58,4762,4],[5230,0,4763,3],[5231,0,4465,28],[5232,0,4465,28],[5233,0,4465,28],[5233,57,4765,35,"node"],[5233,61,4465,28],[5233,63,4765,41,"readonly"],[5233,71,4465,28],[5233,73,4765,51],[5234,0,4766,4],[5234,14,4766,8],[5234,19,4766,13,"eat"],[5234,22,4766,8],[5234,23,4766,17,"types"],[5234,28,4766,22],[5234,29,4766,23,"question"],[5234,37,4766,8],[5234,38,4766,4],[5234,40,4766,34,"node"],[5234,44,4766,38],[5234,45,4766,39,"optional"],[5234,53,4766,34],[5234,56,4766,50],[5234,60,4766,34],[5235,0,4767,4],[5235,14,4767,10,"nodeAny"],[5235,21,4767,17],[5235,24,4767,20,"node"],[5235,28,4767,4],[5237,0,4769,4],[5237,14,4769,8],[5237,15,4769,9,"readonly"],[5237,23,4769,8],[5237,28,4769,22],[5237,33,4769,27,"match"],[5237,38,4769,22],[5237,39,4769,33,"types"],[5237,44,4769,38],[5237,45,4769,39,"parenL"],[5237,51,4769,22],[5237,56,4769,50],[5237,61,4769,55,"isRelational"],[5237,73,4769,50],[5237,74,4769,68],[5237,77,4769,50],[5237,78,4769,8],[5237,79,4769,4],[5237,81,4769,75],[5238,0,4770,6],[5238,16,4770,12,"method"],[5238,22,4770,18],[5238,25,4770,21,"nodeAny"],[5238,32,4770,6],[5239,0,4771,6],[5239,17,4771,11,"tsFillSignature"],[5239,32,4771,6],[5239,33,4771,27,"types"],[5239,38,4771,32],[5239,39,4771,33,"colon"],[5239,44,4771,6],[5239,46,4771,40,"method"],[5239,52,4771,6],[5240,0,4772,6],[5240,17,4772,11,"tsParseTypeMemberSemicolon"],[5240,43,4772,6],[5241,0,4773,6],[5241,19,4773,13],[5241,24,4773,18,"finishNode"],[5241,34,4773,13],[5241,35,4773,29,"method"],[5241,41,4773,13],[5241,43,4773,37],[5241,62,4773,13],[5241,63,4773,6],[5242,0,4774,5],[5242,11,4769,4],[5242,17,4774,11],[5243,0,4775,6],[5243,16,4775,12,"property"],[5243,24,4775,20],[5243,27,4775,23,"nodeAny"],[5243,34,4775,6],[5244,0,4776,6],[5244,16,4776,10,"readonly"],[5244,24,4776,6],[5244,26,4776,20,"property"],[5244,34,4776,28],[5244,35,4776,29,"readonly"],[5244,43,4776,20],[5244,46,4776,40],[5244,50,4776,20],[5245,0,4777,6],[5245,16,4777,12,"type"],[5245,20,4777,16],[5245,23,4777,19],[5245,28,4777,24,"tsTryParseTypeAnnotation"],[5245,52,4777,19],[5245,54,4777,6],[5246,0,4778,6],[5246,16,4778,10,"type"],[5246,20,4778,6],[5246,22,4778,16,"property"],[5246,30,4778,24],[5246,31,4778,25,"typeAnnotation"],[5246,45,4778,16],[5246,48,4778,42,"type"],[5246,52,4778,16],[5247,0,4779,6],[5247,17,4779,11,"tsParseTypeMemberSemicolon"],[5247,43,4779,6],[5248,0,4780,6],[5248,19,4780,13],[5248,24,4780,18,"finishNode"],[5248,34,4780,13],[5248,35,4780,29,"property"],[5248,43,4780,13],[5248,45,4780,39],[5248,66,4780,13],[5248,67,4780,6],[5249,0,4781,5],[5250,0,4782,3],[5251,0,4465,28],[5252,0,4465,28],[5253,0,4465,28],[5253,44,4784,22],[5254,0,4785,4],[5254,14,4785,10,"node"],[5254,18,4785,14],[5254,21,4785,17],[5254,26,4785,22,"startNode"],[5254,35,4785,17],[5254,37,4785,4],[5256,0,4787,4],[5256,14,4787,8],[5256,19,4787,13,"match"],[5256,24,4787,8],[5256,25,4787,19,"types"],[5256,30,4787,24],[5256,31,4787,25,"parenL"],[5256,37,4787,8],[5256,42,4787,36],[5256,47,4787,41,"isRelational"],[5256,59,4787,36],[5256,60,4787,54],[5256,63,4787,36],[5256,64,4787,4],[5256,66,4787,60],[5257,0,4788,6],[5257,19,4788,13],[5257,24,4788,18,"tsParseSignatureMember"],[5257,46,4788,13],[5257,47,4788,41],[5257,75,4788,13],[5257,77,4788,71,"node"],[5257,81,4788,13],[5257,82,4788,6],[5258,0,4789,5],[5260,0,4791,4],[5260,14,4791,8],[5260,19,4791,13,"match"],[5260,24,4791,8],[5260,25,4791,19,"types"],[5260,30,4791,24],[5260,31,4791,25,"_new"],[5260,35,4791,8],[5260,36,4791,4],[5260,38,4791,32],[5261,0,4792,6],[5261,16,4792,12,"id"],[5261,18,4792,14],[5261,21,4792,17],[5261,26,4792,22,"startNode"],[5261,35,4792,17],[5261,37,4792,6],[5262,0,4793,6],[5262,17,4793,11,"next"],[5262,21,4793,6],[5264,0,4795,6],[5264,16,4795,10],[5264,21,4795,15,"match"],[5264,26,4795,10],[5264,27,4795,21,"types"],[5264,32,4795,26],[5264,33,4795,27,"parenL"],[5264,39,4795,10],[5264,44,4795,38],[5264,49,4795,43,"isRelational"],[5264,61,4795,38],[5264,62,4795,56],[5264,65,4795,38],[5264,66,4795,6],[5264,68,4795,62],[5265,0,4796,8],[5265,21,4796,15],[5265,26,4796,20,"tsParseSignatureMember"],[5265,48,4796,15],[5265,49,4796,43],[5265,82,4796,15],[5265,84,4796,78,"node"],[5265,88,4796,15],[5265,89,4796,8],[5266,0,4797,7],[5266,13,4795,6],[5266,19,4797,13],[5267,0,4798,8,"node"],[5267,14,4798,8,"node"],[5267,18,4798,12],[5267,19,4798,13,"key"],[5267,22,4798,8],[5267,25,4798,19],[5267,30,4798,24,"createIdentifier"],[5267,46,4798,19],[5267,47,4798,41,"id"],[5267,49,4798,19],[5267,51,4798,45],[5267,56,4798,19],[5267,57,4798,8],[5268,0,4799,8],[5268,21,4799,15],[5268,26,4799,20,"tsParsePropertyOrMethodSignature"],[5268,58,4799,15],[5268,59,4799,53,"node"],[5268,63,4799,15],[5268,65,4799,59],[5268,70,4799,15],[5268,71,4799,8],[5269,0,4800,7],[5270,0,4801,5],[5272,0,4803,4],[5272,14,4803,10,"readonly"],[5272,22,4803,18],[5272,25,4803,21],[5272,26,4803,22],[5272,27,4803,23],[5272,32,4803,28,"tsParseModifier"],[5272,47,4803,23],[5272,48,4803,44],[5272,49,4803,45],[5272,59,4803,44],[5272,60,4803,23],[5272,61,4803,4],[5273,0,4804,4],[5273,14,4804,10,"idx"],[5273,17,4804,13],[5273,20,4804,16],[5273,25,4804,21,"tsTryParseIndexSignature"],[5273,49,4804,16],[5273,50,4804,46,"node"],[5273,54,4804,16],[5273,55,4804,4],[5275,0,4806,4],[5275,14,4806,8,"idx"],[5275,17,4806,4],[5275,19,4806,13],[5276,0,4807,6],[5276,16,4807,10,"readonly"],[5276,24,4807,6],[5276,26,4807,20,"node"],[5276,30,4807,24],[5276,31,4807,25,"readonly"],[5276,39,4807,20],[5276,42,4807,36],[5276,46,4807,20],[5277,0,4808,6],[5277,19,4808,13,"idx"],[5277,22,4808,6],[5278,0,4809,5],[5280,0,4811,4],[5280,15,4811,9,"parsePropertyName"],[5280,32,4811,4],[5280,33,4811,27,"node"],[5280,37,4811,4],[5281,0,4812,4],[5281,17,4812,11],[5281,22,4812,16,"tsParsePropertyOrMethodSignature"],[5281,54,4812,11],[5281,55,4812,49,"node"],[5281,59,4812,11],[5281,61,4812,55,"readonly"],[5281,69,4812,11],[5281,70,4812,4],[5282,0,4813,3],[5283,0,4465,28],[5284,0,4465,28],[5285,0,4465,28],[5285,45,4815,23],[5286,0,4816,4],[5286,14,4816,10,"node"],[5286,18,4816,14],[5286,21,4816,17],[5286,26,4816,22,"startNode"],[5286,35,4816,17],[5286,37,4816,4],[5287,0,4817,4,"node"],[5287,10,4817,4,"node"],[5287,14,4817,8],[5287,15,4817,9,"members"],[5287,22,4817,4],[5287,25,4817,19],[5287,30,4817,24,"tsParseObjectTypeMembers"],[5287,54,4817,19],[5287,56,4817,4],[5288,0,4818,4],[5288,17,4818,11],[5288,22,4818,16,"finishNode"],[5288,32,4818,11],[5288,33,4818,27,"node"],[5288,37,4818,11],[5288,39,4818,33],[5288,54,4818,11],[5288,55,4818,4],[5289,0,4819,3],[5290,0,4465,28],[5291,0,4465,28],[5292,0,4465,28],[5292,51,4821,29],[5293,0,4822,4],[5293,15,4822,9,"expect"],[5293,21,4822,4],[5293,22,4822,16,"types"],[5293,27,4822,21],[5293,28,4822,22,"braceL"],[5293,34,4822,4],[5294,0,4823,4],[5294,14,4823,10,"members"],[5294,21,4823,17],[5294,24,4823,20],[5294,29,4823,25,"tsParseList"],[5294,40,4823,20],[5294,41,4823,37],[5294,54,4823,20],[5294,56,4823,52],[5294,61,4823,57,"tsParseTypeMember"],[5294,78,4823,52],[5294,79,4823,75,"bind"],[5294,83,4823,52],[5294,84,4823,80],[5294,88,4823,52],[5294,89,4823,20],[5294,90,4823,4],[5295,0,4824,4],[5295,15,4824,9,"expect"],[5295,21,4824,4],[5295,22,4824,16,"types"],[5295,27,4824,21],[5295,28,4824,22,"braceR"],[5295,34,4824,4],[5296,0,4825,4],[5296,17,4825,11,"members"],[5296,24,4825,4],[5297,0,4826,3],[5298,0,4465,28],[5299,0,4465,28],[5300,0,4465,28],[5300,48,4828,26],[5301,0,4829,4],[5301,15,4829,9,"next"],[5301,19,4829,4],[5303,0,4831,4],[5303,14,4831,8],[5303,19,4831,13,"eat"],[5303,22,4831,8],[5303,23,4831,17,"types"],[5303,28,4831,22],[5303,29,4831,23,"plusMin"],[5303,36,4831,8],[5303,37,4831,4],[5303,39,4831,33],[5304,0,4832,6],[5304,19,4832,13],[5304,24,4832,18,"isContextual"],[5304,36,4832,13],[5304,37,4832,31],[5304,47,4832,13],[5304,48,4832,6],[5305,0,4833,5],[5307,0,4835,4],[5307,14,4835,8],[5307,19,4835,13,"isContextual"],[5307,31,4835,8],[5307,32,4835,26],[5307,42,4835,8],[5307,43,4835,4],[5307,45,4835,39],[5308,0,4836,6],[5308,17,4836,11,"next"],[5308,21,4836,6],[5309,0,4837,5],[5311,0,4839,4],[5311,14,4839,8],[5311,15,4839,9],[5311,20,4839,14,"match"],[5311,25,4839,9],[5311,26,4839,20,"types"],[5311,31,4839,25],[5311,32,4839,26,"bracketL"],[5311,40,4839,9],[5311,41,4839,4],[5311,43,4839,37],[5312,0,4840,6],[5312,19,4840,13],[5312,24,4840,6],[5313,0,4841,5],[5315,0,4843,4],[5315,15,4843,9,"next"],[5315,19,4843,4],[5317,0,4845,4],[5317,14,4845,8],[5317,15,4845,9],[5317,20,4845,14,"tsIsIdentifier"],[5317,34,4845,9],[5317,36,4845,4],[5317,38,4845,32],[5318,0,4846,6],[5318,19,4846,13],[5318,24,4846,6],[5319,0,4847,5],[5321,0,4849,4],[5321,15,4849,9,"next"],[5321,19,4849,4],[5322,0,4850,4],[5322,17,4850,11],[5322,22,4850,16,"match"],[5322,27,4850,11],[5322,28,4850,22,"types"],[5322,33,4850,27],[5322,34,4850,28,"_in"],[5322,37,4850,11],[5322,38,4850,4],[5323,0,4851,3],[5324,0,4465,28],[5325,0,4465,28],[5326,0,4465,28],[5326,53,4853,31],[5327,0,4854,4],[5327,14,4854,10,"node"],[5327,18,4854,14],[5327,21,4854,17],[5327,26,4854,22,"startNode"],[5327,35,4854,17],[5327,37,4854,4],[5328,0,4855,4,"node"],[5328,10,4855,4,"node"],[5328,14,4855,8],[5328,15,4855,9,"name"],[5328,19,4855,4],[5328,22,4855,16],[5328,27,4855,21,"parseIdentifierName"],[5328,46,4855,16],[5328,47,4855,41,"node"],[5328,51,4855,45],[5328,52,4855,46,"start"],[5328,57,4855,16],[5328,58,4855,4],[5329,0,4856,4,"node"],[5329,10,4856,4,"node"],[5329,14,4856,8],[5329,15,4856,9,"constraint"],[5329,25,4856,4],[5329,28,4856,22],[5329,33,4856,27,"tsExpectThenParseType"],[5329,54,4856,22],[5329,55,4856,49,"types"],[5329,60,4856,54],[5329,61,4856,55,"_in"],[5329,64,4856,22],[5329,65,4856,4],[5330,0,4857,4],[5330,17,4857,11],[5330,22,4857,16,"finishNode"],[5330,32,4857,11],[5330,33,4857,27,"node"],[5330,37,4857,11],[5330,39,4857,33],[5330,56,4857,11],[5330,57,4857,4],[5331,0,4858,3],[5332,0,4465,28],[5333,0,4465,28],[5334,0,4465,28],[5334,44,4860,22],[5335,0,4861,4],[5335,14,4861,10,"node"],[5335,18,4861,14],[5335,21,4861,17],[5335,26,4861,22,"startNode"],[5335,35,4861,17],[5335,37,4861,4],[5336,0,4862,4],[5336,15,4862,9,"expect"],[5336,21,4862,4],[5336,22,4862,16,"types"],[5336,27,4862,21],[5336,28,4862,22,"braceL"],[5336,34,4862,4],[5338,0,4864,4],[5338,14,4864,8],[5338,19,4864,13,"match"],[5338,24,4864,8],[5338,25,4864,19,"types"],[5338,30,4864,24],[5338,31,4864,25,"plusMin"],[5338,38,4864,8],[5338,39,4864,4],[5338,41,4864,35],[5339,0,4865,6,"node"],[5339,12,4865,6,"node"],[5339,16,4865,10],[5339,17,4865,11,"readonly"],[5339,25,4865,6],[5339,28,4865,22],[5339,33,4865,27,"state"],[5339,38,4865,22],[5339,39,4865,33,"value"],[5339,44,4865,6],[5340,0,4866,6],[5340,17,4866,11,"next"],[5340,21,4866,6],[5341,0,4867,6],[5341,17,4867,11,"expectContextual"],[5341,33,4867,6],[5341,34,4867,28],[5341,44,4867,6],[5342,0,4868,5],[5342,11,4864,4],[5342,17,4868,11],[5342,21,4868,15],[5342,26,4868,20,"eatContextual"],[5342,39,4868,15],[5342,40,4868,34],[5342,50,4868,15],[5342,51,4868,11],[5342,53,4868,47],[5343,0,4869,6,"node"],[5343,12,4869,6,"node"],[5343,16,4869,10],[5343,17,4869,11,"readonly"],[5343,25,4869,6],[5343,28,4869,22],[5343,32,4869,6],[5344,0,4870,5],[5346,0,4872,4],[5346,15,4872,9,"expect"],[5346,21,4872,4],[5346,22,4872,16,"types"],[5346,27,4872,21],[5346,28,4872,22,"bracketL"],[5346,36,4872,4],[5347,0,4873,4,"node"],[5347,10,4873,4,"node"],[5347,14,4873,8],[5347,15,4873,9,"typeParameter"],[5347,28,4873,4],[5347,31,4873,25],[5347,36,4873,30,"tsParseMappedTypeParameter"],[5347,62,4873,25],[5347,64,4873,4],[5348,0,4874,4],[5348,15,4874,9,"expect"],[5348,21,4874,4],[5348,22,4874,16,"types"],[5348,27,4874,21],[5348,28,4874,22,"bracketR"],[5348,36,4874,4],[5350,0,4876,4],[5350,14,4876,8],[5350,19,4876,13,"match"],[5350,24,4876,8],[5350,25,4876,19,"types"],[5350,30,4876,24],[5350,31,4876,25,"plusMin"],[5350,38,4876,8],[5350,39,4876,4],[5350,41,4876,35],[5351,0,4877,6,"node"],[5351,12,4877,6,"node"],[5351,16,4877,10],[5351,17,4877,11,"optional"],[5351,25,4877,6],[5351,28,4877,22],[5351,33,4877,27,"state"],[5351,38,4877,22],[5351,39,4877,33,"value"],[5351,44,4877,6],[5352,0,4878,6],[5352,17,4878,11,"next"],[5352,21,4878,6],[5353,0,4879,6],[5353,17,4879,11,"expect"],[5353,23,4879,6],[5353,24,4879,18,"types"],[5353,29,4879,23],[5353,30,4879,24,"question"],[5353,38,4879,6],[5354,0,4880,5],[5354,11,4876,4],[5354,17,4880,11],[5354,21,4880,15],[5354,26,4880,20,"eat"],[5354,29,4880,15],[5354,30,4880,24,"types"],[5354,35,4880,29],[5354,36,4880,30,"question"],[5354,44,4880,15],[5354,45,4880,11],[5354,47,4880,41],[5355,0,4881,6,"node"],[5355,12,4881,6,"node"],[5355,16,4881,10],[5355,17,4881,11,"optional"],[5355,25,4881,6],[5355,28,4881,22],[5355,32,4881,6],[5356,0,4882,5],[5358,0,4884,4,"node"],[5358,10,4884,4,"node"],[5358,14,4884,8],[5358,15,4884,9,"typeAnnotation"],[5358,29,4884,4],[5358,32,4884,26],[5358,37,4884,31,"tsTryParseType"],[5358,51,4884,26],[5358,53,4884,4],[5359,0,4885,4],[5359,15,4885,9,"semicolon"],[5359,24,4885,4],[5360,0,4886,4],[5360,15,4886,9,"expect"],[5360,21,4886,4],[5360,22,4886,16,"types"],[5360,27,4886,21],[5360,28,4886,22,"braceR"],[5360,34,4886,4],[5361,0,4887,4],[5361,17,4887,11],[5361,22,4887,16,"finishNode"],[5361,32,4887,11],[5361,33,4887,27,"node"],[5361,37,4887,11],[5361,39,4887,33],[5361,53,4887,11],[5361,54,4887,4],[5362,0,4888,3],[5363,0,4465,28],[5364,0,4465,28],[5365,0,4465,28],[5365,43,4890,21],[5366,0,4890,21],[5368,0,4891,4],[5368,14,4891,10,"node"],[5368,18,4891,14],[5368,21,4891,17],[5368,26,4891,22,"startNode"],[5368,35,4891,17],[5368,37,4891,4],[5369,0,4892,4,"node"],[5369,10,4892,4,"node"],[5369,14,4892,8],[5369,15,4892,9,"elementTypes"],[5369,27,4892,4],[5369,30,4892,24],[5369,35,4892,29,"tsParseBracketedList"],[5369,55,4892,24],[5369,56,4892,50],[5369,75,4892,24],[5369,77,4892,71],[5369,82,4892,76,"tsParseTupleElementType"],[5369,105,4892,71],[5369,106,4892,100,"bind"],[5369,110,4892,71],[5369,111,4892,105],[5369,115,4892,71],[5369,116,4892,24],[5369,118,4892,112],[5369,122,4892,24],[5369,124,4892,118],[5369,129,4892,24],[5369,130,4892,4],[5370,0,4893,4],[5370,14,4893,8,"seenOptionalElement"],[5370,33,4893,27],[5370,36,4893,30],[5370,41,4893,4],[5371,0,4894,4,"node"],[5371,10,4894,4,"node"],[5371,14,4894,8],[5371,15,4894,9,"elementTypes"],[5371,27,4894,4],[5371,28,4894,22,"forEach"],[5371,35,4894,4],[5371,36,4894,30],[5371,46,4894,30,"elementNode"],[5371,57,4894,41],[5371,59,4894,45],[5372,0,4895,6],[5372,16,4895,10,"elementNode"],[5372,27,4895,21],[5372,28,4895,22,"type"],[5372,32,4895,10],[5372,37,4895,31],[5372,53,4895,6],[5372,55,4895,49],[5373,0,4896,8,"seenOptionalElement"],[5373,14,4896,8,"seenOptionalElement"],[5373,33,4896,27],[5373,36,4896,30],[5373,40,4896,8],[5374,0,4897,7],[5374,13,4895,6],[5374,19,4897,13],[5374,23,4897,17,"seenOptionalElement"],[5374,42,4897,36],[5374,46,4897,40,"elementNode"],[5374,57,4897,51],[5374,58,4897,52,"type"],[5374,62,4897,40],[5374,67,4897,61],[5374,79,4897,13],[5374,81,4897,75],[5375,0,4898,8],[5375,14,4898,8],[5375,21,4898,12],[5375,22,4898,13,"raise"],[5375,27,4898,8],[5375,28,4898,19,"elementNode"],[5375,39,4898,30],[5375,40,4898,31,"start"],[5375,45,4898,8],[5375,47,4898,38],[5375,102,4898,8],[5376,0,4899,7],[5377,0,4900,5],[5377,11,4894,4],[5378,0,4901,4],[5378,17,4901,11],[5378,22,4901,16,"finishNode"],[5378,32,4901,11],[5378,33,4901,27,"node"],[5378,37,4901,11],[5378,39,4901,33],[5378,52,4901,11],[5378,53,4901,4],[5379,0,4902,3],[5380,0,4465,28],[5381,0,4465,28],[5382,0,4465,28],[5382,50,4904,28],[5383,0,4905,4],[5383,14,4905,8],[5383,19,4905,13,"match"],[5383,24,4905,8],[5383,25,4905,19,"types"],[5383,30,4905,24],[5383,31,4905,25,"ellipsis"],[5383,39,4905,8],[5383,40,4905,4],[5383,42,4905,36],[5384,0,4906,6],[5384,16,4906,12,"restNode"],[5384,24,4906,20],[5384,27,4906,23],[5384,32,4906,28,"startNode"],[5384,41,4906,23],[5384,43,4906,6],[5385,0,4907,6],[5385,17,4907,11,"next"],[5385,21,4907,6],[5386,0,4908,6,"restNode"],[5386,12,4908,6,"restNode"],[5386,20,4908,14],[5386,21,4908,15,"typeAnnotation"],[5386,35,4908,6],[5386,38,4908,32],[5386,43,4908,37,"tsParseType"],[5386,54,4908,32],[5386,56,4908,6],[5388,0,4910,6],[5388,16,4910,10],[5388,21,4910,15,"match"],[5388,26,4910,10],[5388,27,4910,21,"types"],[5388,32,4910,26],[5388,33,4910,27,"comma"],[5388,38,4910,10],[5388,43,4910,37],[5388,48,4910,42,"lookaheadCharCode"],[5388,65,4910,37],[5388,72,4910,66],[5388,74,4910,6],[5388,76,4910,70],[5389,0,4911,8],[5389,19,4911,13,"raiseRestNotLast"],[5389,35,4911,8],[5389,36,4911,30],[5389,41,4911,35,"state"],[5389,46,4911,30],[5389,47,4911,41,"start"],[5389,52,4911,8],[5390,0,4912,7],[5392,0,4914,6],[5392,19,4914,13],[5392,24,4914,18,"finishNode"],[5392,34,4914,13],[5392,35,4914,29,"restNode"],[5392,43,4914,13],[5392,45,4914,39],[5392,57,4914,13],[5392,58,4914,6],[5393,0,4915,5],[5395,0,4917,4],[5395,14,4917,10,"type"],[5395,18,4917,14],[5395,21,4917,17],[5395,26,4917,22,"tsParseType"],[5395,37,4917,17],[5395,39,4917,4],[5397,0,4919,4],[5397,14,4919,8],[5397,19,4919,13,"eat"],[5397,22,4919,8],[5397,23,4919,17,"types"],[5397,28,4919,22],[5397,29,4919,23,"question"],[5397,37,4919,8],[5397,38,4919,4],[5397,40,4919,34],[5398,0,4920,6],[5398,16,4920,12,"optionalTypeNode"],[5398,32,4920,28],[5398,35,4920,31],[5398,40,4920,36,"startNodeAtNode"],[5398,55,4920,31],[5398,56,4920,52,"type"],[5398,60,4920,31],[5398,61,4920,6],[5399,0,4921,6,"optionalTypeNode"],[5399,12,4921,6,"optionalTypeNode"],[5399,28,4921,22],[5399,29,4921,23,"typeAnnotation"],[5399,43,4921,6],[5399,46,4921,40,"type"],[5399,50,4921,6],[5400,0,4922,6],[5400,19,4922,13],[5400,24,4922,18,"finishNode"],[5400,34,4922,13],[5400,35,4922,29,"optionalTypeNode"],[5400,51,4922,13],[5400,53,4922,47],[5400,69,4922,13],[5400,70,4922,6],[5401,0,4923,5],[5403,0,4925,4],[5403,17,4925,11,"type"],[5403,21,4925,4],[5404,0,4926,3],[5405,0,4465,28],[5406,0,4465,28],[5407,0,4465,28],[5407,51,4928,29],[5408,0,4929,4],[5408,14,4929,10,"node"],[5408,18,4929,14],[5408,21,4929,17],[5408,26,4929,22,"startNode"],[5408,35,4929,17],[5408,37,4929,4],[5409,0,4930,4],[5409,15,4930,9,"expect"],[5409,21,4930,4],[5409,22,4930,16,"types"],[5409,27,4930,21],[5409,28,4930,22,"parenL"],[5409,34,4930,4],[5410,0,4931,4,"node"],[5410,10,4931,4,"node"],[5410,14,4931,8],[5410,15,4931,9,"typeAnnotation"],[5410,29,4931,4],[5410,32,4931,26],[5410,37,4931,31,"tsParseType"],[5410,48,4931,26],[5410,50,4931,4],[5411,0,4932,4],[5411,15,4932,9,"expect"],[5411,21,4932,4],[5411,22,4932,16,"types"],[5411,27,4932,21],[5411,28,4932,22,"parenR"],[5411,34,4932,4],[5412,0,4933,4],[5412,17,4933,11],[5412,22,4933,16,"finishNode"],[5412,32,4933,11],[5412,33,4933,27,"node"],[5412,37,4933,11],[5412,39,4933,33],[5412,60,4933,11],[5412,61,4933,4],[5413,0,4934,3],[5414,0,4465,28],[5415,0,4465,28],[5416,0,4465,28],[5416,57,4936,35,"type"],[5416,61,4465,28],[5416,63,4936,41],[5417,0,4937,4],[5417,14,4937,10,"node"],[5417,18,4937,14],[5417,21,4937,17],[5417,26,4937,22,"startNode"],[5417,35,4937,17],[5417,37,4937,4],[5419,0,4939,4],[5419,14,4939,8,"type"],[5419,18,4939,12],[5419,23,4939,17],[5419,42,4939,4],[5419,44,4939,38],[5420,0,4940,6],[5420,17,4940,11,"expect"],[5420,23,4940,6],[5420,24,4940,18,"types"],[5420,29,4940,23],[5420,30,4940,24,"_new"],[5420,34,4940,6],[5421,0,4941,5],[5423,0,4943,4],[5423,15,4943,9,"tsFillSignature"],[5423,30,4943,4],[5423,31,4943,25,"types"],[5423,36,4943,30],[5423,37,4943,31,"arrow"],[5423,42,4943,4],[5423,44,4943,38,"node"],[5423,48,4943,4],[5424,0,4944,4],[5424,17,4944,11],[5424,22,4944,16,"finishNode"],[5424,32,4944,11],[5424,33,4944,27,"node"],[5424,37,4944,11],[5424,39,4944,33,"type"],[5424,43,4944,11],[5424,44,4944,4],[5425,0,4945,3],[5426,0,4465,28],[5427,0,4465,28],[5428,0,4465,28],[5428,49,4947,27],[5429,0,4947,27],[5431,0,4948,4],[5431,14,4948,10,"node"],[5431,18,4948,14],[5431,21,4948,17],[5431,26,4948,22,"startNode"],[5431,35,4948,17],[5431,37,4948,4],[5433,0,4950,4,"node"],[5433,10,4950,4,"node"],[5433,14,4950,8],[5433,15,4950,9,"literal"],[5433,22,4950,4],[5433,25,4950,20],[5433,37,4950,26],[5434,0,4951,6],[5434,20,4951,14],[5434,27,4951,18],[5434,28,4951,19,"state"],[5434,33,4951,14],[5434,34,4951,25,"type"],[5434,38,4951,6],[5435,0,4952,8],[5435,19,4952,13,"types"],[5435,24,4952,18],[5435,25,4952,19,"num"],[5435,28,4952,8],[5436,0,4953,8],[5436,19,4953,13,"types"],[5436,24,4953,18],[5436,25,4953,19,"string"],[5436,31,4953,8],[5437,0,4954,8],[5437,19,4954,13,"types"],[5437,24,4954,18],[5437,25,4954,19,"_true"],[5437,30,4954,8],[5438,0,4955,8],[5438,19,4955,13,"types"],[5438,24,4955,18],[5438,25,4955,19,"_false"],[5438,31,4955,8],[5439,0,4956,10],[5439,23,4956,17],[5439,30,4956,21],[5439,31,4956,22,"parseExprAtom"],[5439,44,4956,17],[5439,46,4956,10],[5441,0,4958,8],[5442,0,4959,10],[5442,22,4959,16],[5442,29,4959,20],[5442,30,4959,21,"unexpected"],[5442,40,4959,16],[5442,42,4959,10],[5443,0,4951,6],[5444,0,4961,5],[5444,11,4950,19],[5444,13,4950,4],[5446,0,4963,4],[5446,17,4963,11],[5446,22,4963,16,"finishNode"],[5446,32,4963,11],[5446,33,4963,27,"node"],[5446,37,4963,11],[5446,39,4963,33],[5446,54,4963,11],[5446,55,4963,4],[5447,0,4964,3],[5448,0,4465,28],[5449,0,4465,28],[5450,0,4465,28],[5450,53,4966,31],[5451,0,4967,4],[5451,14,4967,10,"node"],[5451,18,4967,14],[5451,21,4967,17],[5451,26,4967,22,"startNode"],[5451,35,4967,17],[5451,37,4967,4],[5452,0,4968,4],[5452,14,4968,10,"templateNode"],[5452,26,4968,22],[5452,29,4968,25],[5452,34,4968,30,"parseTemplate"],[5452,47,4968,25],[5452,48,4968,44],[5452,53,4968,25],[5452,54,4968,4],[5454,0,4970,4],[5454,14,4970,8,"templateNode"],[5454,26,4970,20],[5454,27,4970,21,"expressions"],[5454,38,4970,8],[5454,39,4970,33,"length"],[5454,45,4970,8],[5454,48,4970,42],[5454,49,4970,4],[5454,51,4970,45],[5455,0,4971,6],[5455,17,4971,11,"raise"],[5455,22,4971,6],[5455,23,4971,17,"templateNode"],[5455,35,4971,29],[5455,36,4971,30,"expressions"],[5455,47,4971,17],[5455,48,4971,42],[5455,49,4971,17],[5455,51,4971,45,"start"],[5455,56,4971,6],[5455,58,4971,52],[5455,111,4971,6],[5456,0,4972,5],[5458,0,4974,4,"node"],[5458,10,4974,4,"node"],[5458,14,4974,8],[5458,15,4974,9,"literal"],[5458,22,4974,4],[5458,25,4974,19,"templateNode"],[5458,37,4974,4],[5459,0,4975,4],[5459,17,4975,11],[5459,22,4975,16,"finishNode"],[5459,32,4975,11],[5459,33,4975,27,"node"],[5459,37,4975,11],[5459,39,4975,33],[5459,54,4975,11],[5459,55,4975,4],[5460,0,4976,3],[5461,0,4465,28],[5462,0,4465,28],[5463,0,4465,28],[5463,61,4978,39],[5464,0,4979,4],[5464,14,4979,10,"thisKeyword"],[5464,25,4979,21],[5464,28,4979,24],[5464,33,4979,29,"tsParseThisTypeNode"],[5464,52,4979,24],[5464,54,4979,4],[5466,0,4981,4],[5466,14,4981,8],[5466,19,4981,13,"isContextual"],[5466,31,4981,8],[5466,32,4981,26],[5466,36,4981,8],[5466,41,4981,35],[5466,42,4981,36],[5466,47,4981,41,"hasPrecedingLineBreak"],[5466,68,4981,36],[5466,70,4981,4],[5466,72,4981,66],[5467,0,4982,6],[5467,19,4982,13],[5467,24,4982,18,"tsParseThisTypePredicate"],[5467,48,4982,13],[5467,49,4982,43,"thisKeyword"],[5467,60,4982,13],[5467,61,4982,6],[5468,0,4983,5],[5468,11,4981,4],[5468,17,4983,11],[5469,0,4984,6],[5469,19,4984,13,"thisKeyword"],[5469,30,4984,6],[5470,0,4985,5],[5471,0,4986,3],[5472,0,4465,28],[5473,0,4465,28],[5474,0,4465,28],[5474,46,4988,24],[5475,0,4989,4],[5475,18,4989,12],[5475,23,4989,17,"state"],[5475,28,4989,12],[5475,29,4989,23,"type"],[5475,33,4989,4],[5476,0,4990,6],[5476,17,4990,11,"types"],[5476,22,4990,16],[5476,23,4990,17,"name"],[5476,27,4990,6],[5477,0,4991,6],[5477,17,4991,11,"types"],[5477,22,4991,16],[5477,23,4991,17,"_void"],[5477,28,4991,6],[5478,0,4992,6],[5478,17,4992,11,"types"],[5478,22,4992,16],[5478,23,4992,17,"_null"],[5478,28,4992,6],[5479,0,4993,8],[5480,0,4994,10],[5480,20,4994,16,"type"],[5480,24,4994,20],[5480,27,4994,23],[5480,32,4994,28,"match"],[5480,37,4994,23],[5480,38,4994,34,"types"],[5480,43,4994,39],[5480,44,4994,40,"_void"],[5480,49,4994,23],[5480,53,4994,49],[5480,68,4994,23],[5480,71,4994,67],[5480,76,4994,72,"match"],[5480,81,4994,67],[5480,82,4994,78,"types"],[5480,87,4994,83],[5480,88,4994,84,"_null"],[5480,93,4994,67],[5480,97,4994,93],[5480,112,4994,67],[5480,115,4994,111,"keywordTypeFromName"],[5480,134,4994,130],[5480,135,4994,131],[5480,140,4994,136,"state"],[5480,145,4994,131],[5480,146,4994,142,"value"],[5480,151,4994,130],[5480,152,4994,10],[5482,0,4996,10],[5482,20,4996,14,"type"],[5482,24,4996,18],[5482,29,4996,23,"undefined"],[5482,38,4996,14],[5482,42,4996,36],[5482,47,4996,41,"lookaheadCharCode"],[5482,64,4996,36],[5482,71,4996,65],[5482,73,4996,10],[5482,75,4996,69],[5483,0,4997,12],[5483,22,4997,18,"node"],[5483,26,4997,22],[5483,29,4997,25],[5483,34,4997,30,"startNode"],[5483,43,4997,25],[5483,45,4997,12],[5484,0,4998,12],[5484,23,4998,17,"next"],[5484,27,4998,12],[5485,0,4999,12],[5485,25,4999,19],[5485,30,4999,24,"finishNode"],[5485,40,4999,19],[5485,41,4999,35,"node"],[5485,45,4999,19],[5485,47,4999,41,"type"],[5485,51,4999,19],[5485,52,4999,12],[5486,0,5000,11],[5488,0,5002,10],[5488,23,5002,17],[5488,28,5002,22,"tsParseTypeReference"],[5488,48,5002,17],[5488,50,5002,10],[5489,0,5003,9],[5491,0,5005,6],[5491,17,5005,11,"types"],[5491,22,5005,16],[5491,23,5005,17,"string"],[5491,29,5005,6],[5492,0,5006,6],[5492,17,5006,11,"types"],[5492,22,5006,16],[5492,23,5006,17,"num"],[5492,26,5006,6],[5493,0,5007,6],[5493,17,5007,11,"types"],[5493,22,5007,16],[5493,23,5007,17,"_true"],[5493,28,5007,6],[5494,0,5008,6],[5494,17,5008,11,"types"],[5494,22,5008,16],[5494,23,5008,17,"_false"],[5494,29,5008,6],[5495,0,5009,8],[5495,21,5009,15],[5495,26,5009,20,"tsParseLiteralTypeNode"],[5495,48,5009,15],[5495,50,5009,8],[5497,0,5011,6],[5497,17,5011,11,"types"],[5497,22,5011,16],[5497,23,5011,17,"plusMin"],[5497,30,5011,6],[5498,0,5012,8],[5498,18,5012,12],[5498,23,5012,17,"state"],[5498,28,5012,12],[5498,29,5012,23,"value"],[5498,34,5012,12],[5498,39,5012,33],[5498,42,5012,8],[5498,44,5012,38],[5499,0,5013,10],[5499,20,5013,16,"node"],[5499,26,5013,20],[5499,29,5013,23],[5499,34,5013,28,"startNode"],[5499,43,5013,23],[5499,45,5013,10],[5501,0,5015,10],[5501,20,5015,14],[5501,25,5015,19,"lookahead"],[5501,34,5015,14],[5501,37,5015,31,"type"],[5501,41,5015,14],[5501,46,5015,40,"types"],[5501,51,5015,45],[5501,52,5015,46,"num"],[5501,55,5015,10],[5501,57,5015,51],[5502,0,5016,12],[5502,24,5016,18],[5502,29,5016,23,"unexpected"],[5502,39,5016,18],[5502,41,5016,12],[5503,0,5017,11],[5505,0,5019,10,"node"],[5505,16,5019,10,"node"],[5505,22,5019,14],[5505,23,5019,15,"literal"],[5505,30,5019,10],[5505,33,5019,25],[5505,38,5019,30,"parseMaybeUnary"],[5505,53,5019,25],[5505,55,5019,10],[5506,0,5020,10],[5506,23,5020,17],[5506,28,5020,22,"finishNode"],[5506,38,5020,17],[5506,39,5020,33,"node"],[5506,45,5020,17],[5506,47,5020,39],[5506,62,5020,17],[5506,63,5020,10],[5507,0,5021,9],[5509,0,5023,8],[5511,0,5025,6],[5511,17,5025,11,"types"],[5511,22,5025,16],[5511,23,5025,17,"_this"],[5511,28,5025,6],[5512,0,5026,8],[5512,21,5026,15],[5512,26,5026,20,"tsParseThisTypeOrThisTypePredicate"],[5512,60,5026,15],[5512,62,5026,8],[5514,0,5028,6],[5514,17,5028,11,"types"],[5514,22,5028,16],[5514,23,5028,17,"_typeof"],[5514,30,5028,6],[5515,0,5029,8],[5515,21,5029,15],[5515,26,5029,20,"tsParseTypeQuery"],[5515,42,5029,15],[5515,44,5029,8],[5517,0,5031,6],[5517,17,5031,11,"types"],[5517,22,5031,16],[5517,23,5031,17,"_import"],[5517,30,5031,6],[5518,0,5032,8],[5518,21,5032,15],[5518,26,5032,20,"tsParseImportType"],[5518,43,5032,15],[5518,45,5032,8],[5520,0,5034,6],[5520,17,5034,11,"types"],[5520,22,5034,16],[5520,23,5034,17,"braceL"],[5520,29,5034,6],[5521,0,5035,8],[5521,21,5035,15],[5521,26,5035,20,"tsLookAhead"],[5521,37,5035,15],[5521,38,5035,32],[5521,43,5035,37,"tsIsStartOfMappedType"],[5521,64,5035,32],[5521,65,5035,59,"bind"],[5521,69,5035,32],[5521,70,5035,64],[5521,74,5035,32],[5521,75,5035,15],[5521,79,5035,73],[5521,84,5035,78,"tsParseMappedType"],[5521,101,5035,73],[5521,103,5035,15],[5521,106,5035,100],[5521,111,5035,105,"tsParseTypeLiteral"],[5521,129,5035,100],[5521,131,5035,8],[5523,0,5037,6],[5523,17,5037,11,"types"],[5523,22,5037,16],[5523,23,5037,17,"bracketL"],[5523,31,5037,6],[5524,0,5038,8],[5524,21,5038,15],[5524,26,5038,20,"tsParseTupleType"],[5524,42,5038,15],[5524,44,5038,8],[5526,0,5040,6],[5526,17,5040,11,"types"],[5526,22,5040,16],[5526,23,5040,17,"parenL"],[5526,29,5040,6],[5527,0,5041,8],[5527,21,5041,15],[5527,26,5041,20,"tsParseParenthesizedType"],[5527,50,5041,15],[5527,52,5041,8],[5529,0,5043,6],[5529,17,5043,11,"types"],[5529,22,5043,16],[5529,23,5043,17,"backQuote"],[5529,32,5043,6],[5530,0,5044,8],[5530,21,5044,15],[5530,26,5044,20,"tsParseTemplateLiteralType"],[5530,52,5044,15],[5530,54,5044,8],[5531,0,4989,4],[5533,0,5047,4],[5533,16,5047,10],[5533,21,5047,15,"unexpected"],[5533,31,5047,10],[5533,33,5047,4],[5534,0,5048,3],[5535,0,4465,28],[5536,0,4465,28],[5537,0,4465,28],[5537,51,5050,29],[5538,0,5051,4],[5538,14,5051,8,"type"],[5538,18,5051,12],[5538,21,5051,15],[5538,26,5051,20,"tsParseNonArrayType"],[5538,45,5051,15],[5538,47,5051,4],[5540,0,5053,4],[5540,17,5053,11],[5540,18,5053,12],[5540,23,5053,17,"hasPrecedingLineBreak"],[5540,44,5053,12],[5540,46,5053,11],[5540,50,5053,44],[5540,55,5053,49,"eat"],[5540,58,5053,44],[5540,59,5053,53,"types"],[5540,64,5053,58],[5540,65,5053,59,"bracketL"],[5540,73,5053,44],[5540,74,5053,4],[5540,76,5053,70],[5541,0,5054,6],[5541,16,5054,10],[5541,21,5054,15,"match"],[5541,26,5054,10],[5541,27,5054,21,"types"],[5541,32,5054,26],[5541,33,5054,27,"bracketR"],[5541,41,5054,10],[5541,42,5054,6],[5541,44,5054,38],[5542,0,5055,8],[5542,18,5055,14,"node"],[5542,22,5055,18],[5542,25,5055,21],[5542,30,5055,26,"startNodeAtNode"],[5542,45,5055,21],[5542,46,5055,42,"type"],[5542,50,5055,21],[5542,51,5055,8],[5543,0,5056,8,"node"],[5543,14,5056,8,"node"],[5543,18,5056,12],[5543,19,5056,13,"elementType"],[5543,30,5056,8],[5543,33,5056,27,"type"],[5543,37,5056,8],[5544,0,5057,8],[5544,19,5057,13,"expect"],[5544,25,5057,8],[5544,26,5057,20,"types"],[5544,31,5057,25],[5544,32,5057,26,"bracketR"],[5544,40,5057,8],[5545,0,5058,8,"type"],[5545,14,5058,8,"type"],[5545,18,5058,12],[5545,21,5058,15],[5545,26,5058,20,"finishNode"],[5545,36,5058,15],[5545,37,5058,31,"node"],[5545,41,5058,15],[5545,43,5058,37],[5545,56,5058,15],[5545,57,5058,8],[5546,0,5059,7],[5546,13,5054,6],[5546,19,5059,13],[5547,0,5060,8],[5547,18,5060,14,"node"],[5547,24,5060,18],[5547,27,5060,21],[5547,32,5060,26,"startNodeAtNode"],[5547,47,5060,21],[5547,48,5060,42,"type"],[5547,52,5060,21],[5547,53,5060,8],[5549,0,5061,8,"node"],[5549,14,5061,8,"node"],[5549,20,5061,12],[5549,21,5061,13,"objectType"],[5549,31,5061,8],[5549,34,5061,26,"type"],[5549,38,5061,8],[5550,0,5062,8,"node"],[5550,14,5062,8,"node"],[5550,20,5062,12],[5550,21,5062,13,"indexType"],[5550,30,5062,8],[5550,33,5062,25],[5550,38,5062,30,"tsParseType"],[5550,49,5062,25],[5550,51,5062,8],[5551,0,5063,8],[5551,19,5063,13,"expect"],[5551,25,5063,8],[5551,26,5063,20,"types"],[5551,31,5063,25],[5551,32,5063,26,"bracketR"],[5551,40,5063,8],[5552,0,5064,8,"type"],[5552,14,5064,8,"type"],[5552,18,5064,12],[5552,21,5064,15],[5552,26,5064,20,"finishNode"],[5552,36,5064,15],[5552,37,5064,31,"node"],[5552,43,5064,15],[5552,45,5064,37],[5552,66,5064,15],[5552,67,5064,8],[5553,0,5065,7],[5554,0,5066,5],[5556,0,5068,4],[5556,17,5068,11,"type"],[5556,21,5068,4],[5557,0,5069,3],[5558,0,4465,28],[5559,0,4465,28],[5560,0,4465,28],[5560,44,5071,22,"operator"],[5560,52,4465,28],[5560,54,5071,32],[5561,0,5072,4],[5561,14,5072,10,"node"],[5561,18,5072,14],[5561,21,5072,17],[5561,26,5072,22,"startNode"],[5561,35,5072,17],[5561,37,5072,4],[5562,0,5073,4],[5562,15,5073,9,"expectContextual"],[5562,31,5073,4],[5562,32,5073,26,"operator"],[5562,40,5073,4],[5563,0,5074,4,"node"],[5563,10,5074,4,"node"],[5563,14,5074,8],[5563,15,5074,9,"operator"],[5563,23,5074,4],[5563,26,5074,20,"operator"],[5563,34,5074,4],[5564,0,5075,4,"node"],[5564,10,5075,4,"node"],[5564,14,5075,8],[5564,15,5075,9,"typeAnnotation"],[5564,29,5075,4],[5564,32,5075,26],[5564,37,5075,31,"tsParseTypeOperatorOrHigher"],[5564,64,5075,26],[5564,66,5075,4],[5566,0,5077,4],[5566,14,5077,8,"operator"],[5566,22,5077,16],[5566,27,5077,21],[5566,37,5077,4],[5566,39,5077,33],[5567,0,5078,6],[5567,17,5078,11,"tsCheckTypeAnnotationForReadOnly"],[5567,49,5078,6],[5567,50,5078,44,"node"],[5567,54,5078,6],[5568,0,5079,5],[5570,0,5081,4],[5570,17,5081,11],[5570,22,5081,16,"finishNode"],[5570,32,5081,11],[5570,33,5081,27,"node"],[5570,37,5081,11],[5570,39,5081,33],[5570,55,5081,11],[5570,56,5081,4],[5571,0,5082,3],[5572,0,4465,28],[5573,0,4465,28],[5574,0,4465,28],[5574,57,5084,35,"node"],[5574,61,4465,28],[5574,63,5084,41],[5575,0,5085,4],[5575,18,5085,12,"node"],[5575,22,5085,16],[5575,23,5085,17,"typeAnnotation"],[5575,37,5085,12],[5575,38,5085,32,"type"],[5575,42,5085,4],[5576,0,5086,6],[5576,17,5086,11],[5576,30,5086,6],[5577,0,5087,6],[5577,17,5087,11],[5577,30,5087,6],[5578,0,5088,8],[5580,0,5090,6],[5581,0,5091,8],[5581,19,5091,13,"raise"],[5581,24,5091,8],[5581,25,5091,19,"node"],[5581,29,5091,23],[5581,30,5091,24,"start"],[5581,35,5091,8],[5581,37,5091,31],[5581,115,5091,8],[5582,0,5085,4],[5583,0,5093,3],[5584,0,4465,28],[5585,0,4465,28],[5586,0,4465,28],[5586,43,5095,21],[5587,0,5096,4],[5587,14,5096,10,"node"],[5587,18,5096,14],[5587,21,5096,17],[5587,26,5096,22,"startNode"],[5587,35,5096,17],[5587,37,5096,4],[5588,0,5097,4],[5588,15,5097,9,"expectContextual"],[5588,31,5097,4],[5588,32,5097,26],[5588,39,5097,4],[5589,0,5098,4],[5589,14,5098,10,"typeParameter"],[5589,27,5098,23],[5589,30,5098,26],[5589,35,5098,31,"startNode"],[5589,44,5098,26],[5589,46,5098,4],[5590,0,5099,4,"typeParameter"],[5590,10,5099,4,"typeParameter"],[5590,23,5099,17],[5590,24,5099,18,"name"],[5590,28,5099,4],[5590,31,5099,25],[5590,36,5099,30,"parseIdentifierName"],[5590,55,5099,25],[5590,56,5099,50,"typeParameter"],[5590,69,5099,63],[5590,70,5099,64,"start"],[5590,75,5099,25],[5590,76,5099,4],[5591,0,5100,4,"node"],[5591,10,5100,4,"node"],[5591,14,5100,8],[5591,15,5100,9,"typeParameter"],[5591,28,5100,4],[5591,31,5100,25],[5591,36,5100,30,"finishNode"],[5591,46,5100,25],[5591,47,5100,41,"typeParameter"],[5591,60,5100,25],[5591,62,5100,56],[5591,79,5100,25],[5591,80,5100,4],[5592,0,5101,4],[5592,17,5101,11],[5592,22,5101,16,"finishNode"],[5592,32,5101,11],[5592,33,5101,27,"node"],[5592,37,5101,11],[5592,39,5101,33],[5592,52,5101,11],[5592,53,5101,4],[5593,0,5102,3],[5594,0,4465,28],[5595,0,4465,28],[5596,0,4465,28],[5596,54,5104,32],[5597,0,5104,32],[5599,0,5105,4],[5599,14,5105,10,"operator"],[5599,22,5105,18],[5599,25,5105,21],[5599,26,5105,22],[5599,33,5105,21],[5599,35,5105,31],[5599,43,5105,21],[5599,45,5105,41],[5599,55,5105,21],[5599,57,5105,53,"find"],[5599,61,5105,21],[5599,62,5105,58],[5599,72,5105,58,"kw"],[5599,74,5105,60],[5600,0,5105,60],[5600,19,5105,64],[5600,26,5105,68],[5600,27,5105,69,"isContextual"],[5600,39,5105,64],[5600,40,5105,82,"kw"],[5600,42,5105,64],[5600,43,5105,60],[5601,0,5105,60],[5601,11,5105,21],[5601,12,5105,4],[5602,0,5106,4],[5602,17,5106,11,"operator"],[5602,25,5106,19],[5602,28,5106,22],[5602,33,5106,27,"tsParseTypeOperator"],[5602,52,5106,22],[5602,53,5106,47,"operator"],[5602,61,5106,22],[5602,62,5106,19],[5602,65,5106,59],[5602,70,5106,64,"isContextual"],[5602,82,5106,59],[5602,83,5106,77],[5602,90,5106,59],[5602,94,5106,88],[5602,99,5106,93,"tsParseInferType"],[5602,115,5106,88],[5602,117,5106,59],[5602,120,5106,114],[5602,125,5106,119,"tsParseArrayTypeOrHigher"],[5602,149,5106,114],[5602,151,5106,4],[5603,0,5107,3],[5604,0,4465,28],[5605,0,4465,28],[5606,0,4465,28],[5606,55,5109,33,"kind"],[5606,59,4465,28],[5606,61,5109,39,"parseConstituentType"],[5606,81,4465,28],[5606,83,5109,61,"operator"],[5606,91,4465,28],[5606,93,5109,71],[5607,0,5110,4],[5607,15,5110,9,"eat"],[5607,18,5110,4],[5607,19,5110,13,"operator"],[5607,27,5110,4],[5608,0,5111,4],[5608,14,5111,8,"type"],[5608,18,5111,12],[5608,21,5111,15,"parseConstituentType"],[5608,41,5111,35],[5608,43,5111,4],[5610,0,5113,4],[5610,14,5113,8],[5610,19,5113,13,"match"],[5610,24,5113,8],[5610,25,5113,19,"operator"],[5610,33,5113,8],[5610,34,5113,4],[5610,36,5113,30],[5611,0,5114,6],[5611,16,5114,12,"types"],[5611,22,5114,17],[5611,25,5114,20],[5611,26,5114,21,"type"],[5611,30,5114,20],[5611,31,5114,6],[5613,0,5116,6],[5613,19,5116,13],[5613,24,5116,18,"eat"],[5613,27,5116,13],[5613,28,5116,22,"operator"],[5613,36,5116,13],[5613,37,5116,6],[5613,39,5116,33],[5614,0,5117,8,"types"],[5614,14,5117,8,"types"],[5614,20,5117,13],[5614,21,5117,14,"push"],[5614,25,5117,8],[5614,26,5117,19,"parseConstituentType"],[5614,46,5117,39],[5614,48,5117,8],[5615,0,5118,7],[5617,0,5120,6],[5617,16,5120,12,"node"],[5617,20,5120,16],[5617,23,5120,19],[5617,28,5120,24,"startNodeAtNode"],[5617,43,5120,19],[5617,44,5120,40,"type"],[5617,48,5120,19],[5617,49,5120,6],[5618,0,5121,6,"node"],[5618,12,5121,6,"node"],[5618,16,5121,10],[5618,17,5121,11,"types"],[5618,22,5121,6],[5618,25,5121,19,"types"],[5618,31,5121,6],[5619,0,5122,6,"type"],[5619,12,5122,6,"type"],[5619,16,5122,10],[5619,19,5122,13],[5619,24,5122,18,"finishNode"],[5619,34,5122,13],[5619,35,5122,29,"node"],[5619,39,5122,13],[5619,41,5122,35,"kind"],[5619,45,5122,13],[5619,46,5122,6],[5620,0,5123,5],[5622,0,5125,4],[5622,17,5125,11,"type"],[5622,21,5125,4],[5623,0,5126,3],[5624,0,4465,28],[5625,0,4465,28],[5626,0,4465,28],[5626,58,5128,36],[5627,0,5129,4],[5627,17,5129,11],[5627,22,5129,16,"tsParseUnionOrIntersectionType"],[5627,52,5129,11],[5627,53,5129,47],[5627,73,5129,11],[5627,75,5129,69],[5627,80,5129,74,"tsParseTypeOperatorOrHigher"],[5627,107,5129,69],[5627,108,5129,102,"bind"],[5627,112,5129,69],[5627,113,5129,107],[5627,117,5129,69],[5627,118,5129,11],[5627,120,5129,114,"types"],[5627,125,5129,119],[5627,126,5129,120,"bitwiseAND"],[5627,136,5129,11],[5627,137,5129,4],[5628,0,5130,3],[5629,0,4465,28],[5630,0,4465,28],[5631,0,4465,28],[5631,51,5132,29],[5632,0,5133,4],[5632,17,5133,11],[5632,22,5133,16,"tsParseUnionOrIntersectionType"],[5632,52,5133,11],[5632,53,5133,47],[5632,66,5133,11],[5632,68,5133,62],[5632,73,5133,67,"tsParseIntersectionTypeOrHigher"],[5632,104,5133,62],[5632,105,5133,99,"bind"],[5632,109,5133,62],[5632,110,5133,104],[5632,114,5133,62],[5632,115,5133,11],[5632,117,5133,111,"types"],[5632,122,5133,116],[5632,123,5133,117,"bitwiseOR"],[5632,132,5133,11],[5632,133,5133,4],[5633,0,5134,3],[5634,0,4465,28],[5635,0,4465,28],[5636,0,4465,28],[5636,50,5136,28],[5637,0,5137,4],[5637,14,5137,8],[5637,19,5137,13,"isRelational"],[5637,31,5137,8],[5637,32,5137,26],[5637,35,5137,8],[5637,36,5137,4],[5637,38,5137,32],[5638,0,5138,6],[5638,19,5138,13],[5638,23,5138,6],[5639,0,5139,5],[5641,0,5141,4],[5641,17,5141,11],[5641,22,5141,16,"match"],[5641,27,5141,11],[5641,28,5141,22,"types"],[5641,33,5141,27],[5641,34,5141,28,"parenL"],[5641,40,5141,11],[5641,45,5141,39],[5641,50,5141,44,"tsLookAhead"],[5641,61,5141,39],[5641,62,5141,56],[5641,67,5141,61,"tsIsUnambiguouslyStartOfFunctionType"],[5641,103,5141,56],[5641,104,5141,98,"bind"],[5641,108,5141,56],[5641,109,5141,103],[5641,113,5141,56],[5641,114,5141,39],[5641,115,5141,4],[5642,0,5142,3],[5643,0,4465,28],[5644,0,4465,28],[5645,0,4465,28],[5645,47,5144,25],[5646,0,5145,4],[5646,14,5145,8],[5646,19,5145,13,"match"],[5646,24,5145,8],[5646,25,5145,19,"types"],[5646,30,5145,24],[5646,31,5145,25,"name"],[5646,35,5145,8],[5646,40,5145,34],[5646,45,5145,39,"match"],[5646,50,5145,34],[5646,51,5145,45,"types"],[5646,56,5145,50],[5646,57,5145,51,"_this"],[5646,62,5145,34],[5646,63,5145,4],[5646,65,5145,59],[5647,0,5146,6],[5647,17,5146,11,"next"],[5647,21,5146,6],[5648,0,5147,6],[5648,19,5147,13],[5648,23,5147,6],[5649,0,5148,5],[5651,0,5150,4],[5651,14,5150,8],[5651,19,5150,13,"match"],[5651,24,5150,8],[5651,25,5150,19,"types"],[5651,30,5150,24],[5651,31,5150,25,"braceL"],[5651,37,5150,8],[5651,38,5150,4],[5651,40,5150,34],[5652,0,5151,6],[5652,16,5151,10,"braceStackCounter"],[5652,33,5151,27],[5652,36,5151,30],[5652,37,5151,6],[5653,0,5152,6],[5653,17,5152,11,"next"],[5653,21,5152,6],[5655,0,5154,6],[5655,19,5154,13,"braceStackCounter"],[5655,36,5154,30],[5655,39,5154,33],[5655,40,5154,6],[5655,42,5154,36],[5656,0,5155,8],[5656,18,5155,12],[5656,23,5155,17,"match"],[5656,28,5155,12],[5656,29,5155,23,"types"],[5656,34,5155,28],[5656,35,5155,29,"braceL"],[5656,41,5155,12],[5656,42,5155,8],[5656,44,5155,38],[5657,0,5156,10],[5657,18,5156,12,"braceStackCounter"],[5657,35,5156,10],[5658,0,5157,9],[5658,15,5155,8],[5658,21,5157,15],[5658,25,5157,19],[5658,30,5157,24,"match"],[5658,35,5157,19],[5658,36,5157,30,"types"],[5658,41,5157,35],[5658,42,5157,36,"braceR"],[5658,48,5157,19],[5658,49,5157,15],[5658,51,5157,45],[5659,0,5158,10],[5659,18,5158,12,"braceStackCounter"],[5659,35,5158,10],[5660,0,5159,9],[5662,0,5161,8],[5662,19,5161,13,"next"],[5662,23,5161,8],[5663,0,5162,7],[5665,0,5164,6],[5665,19,5164,13],[5665,23,5164,6],[5666,0,5165,5],[5668,0,5167,4],[5668,14,5167,8],[5668,19,5167,13,"match"],[5668,24,5167,8],[5668,25,5167,19,"types"],[5668,30,5167,24],[5668,31,5167,25,"bracketL"],[5668,39,5167,8],[5668,40,5167,4],[5668,42,5167,36],[5669,0,5168,6],[5669,16,5168,10,"braceStackCounter"],[5669,34,5168,27],[5669,37,5168,30],[5669,38,5168,6],[5670,0,5169,6],[5670,17,5169,11,"next"],[5670,21,5169,6],[5672,0,5171,6],[5672,19,5171,13,"braceStackCounter"],[5672,37,5171,30],[5672,40,5171,33],[5672,41,5171,6],[5672,43,5171,36],[5673,0,5172,8],[5673,18,5172,12],[5673,23,5172,17,"match"],[5673,28,5172,12],[5673,29,5172,23,"types"],[5673,34,5172,28],[5673,35,5172,29,"bracketL"],[5673,43,5172,12],[5673,44,5172,8],[5673,46,5172,40],[5674,0,5173,10],[5674,18,5173,12,"braceStackCounter"],[5674,36,5173,10],[5675,0,5174,9],[5675,15,5172,8],[5675,21,5174,15],[5675,25,5174,19],[5675,30,5174,24,"match"],[5675,35,5174,19],[5675,36,5174,30,"types"],[5675,41,5174,35],[5675,42,5174,36,"bracketR"],[5675,50,5174,19],[5675,51,5174,15],[5675,53,5174,47],[5676,0,5175,10],[5676,18,5175,12,"braceStackCounter"],[5676,36,5175,10],[5677,0,5176,9],[5679,0,5178,8],[5679,19,5178,13,"next"],[5679,23,5178,8],[5680,0,5179,7],[5682,0,5181,6],[5682,19,5181,13],[5682,23,5181,6],[5683,0,5182,5],[5685,0,5184,4],[5685,17,5184,11],[5685,22,5184,4],[5686,0,5185,3],[5687,0,4465,28],[5688,0,4465,28],[5689,0,4465,28],[5689,63,5187,41],[5690,0,5188,4],[5690,15,5188,9,"next"],[5690,19,5188,4],[5692,0,5190,4],[5692,14,5190,8],[5692,19,5190,13,"match"],[5692,24,5190,8],[5692,25,5190,19,"types"],[5692,30,5190,24],[5692,31,5190,25,"parenR"],[5692,37,5190,8],[5692,42,5190,36],[5692,47,5190,41,"match"],[5692,52,5190,36],[5692,53,5190,47,"types"],[5692,58,5190,52],[5692,59,5190,53,"ellipsis"],[5692,67,5190,36],[5692,68,5190,4],[5692,70,5190,64],[5693,0,5191,6],[5693,19,5191,13],[5693,23,5191,6],[5694,0,5192,5],[5696,0,5194,4],[5696,14,5194,8],[5696,19,5194,13,"tsSkipParameterStart"],[5696,39,5194,8],[5696,41,5194,4],[5696,43,5194,37],[5697,0,5195,6],[5697,16,5195,10],[5697,21,5195,15,"match"],[5697,26,5195,10],[5697,27,5195,21,"types"],[5697,32,5195,26],[5697,33,5195,27,"colon"],[5697,38,5195,10],[5697,43,5195,37],[5697,48,5195,42,"match"],[5697,53,5195,37],[5697,54,5195,48,"types"],[5697,59,5195,53],[5697,60,5195,54,"comma"],[5697,65,5195,37],[5697,66,5195,10],[5697,70,5195,64],[5697,75,5195,69,"match"],[5697,80,5195,64],[5697,81,5195,75,"types"],[5697,86,5195,80],[5697,87,5195,81,"question"],[5697,95,5195,64],[5697,96,5195,10],[5697,100,5195,94],[5697,105,5195,99,"match"],[5697,110,5195,94],[5697,111,5195,105,"types"],[5697,116,5195,110],[5697,117,5195,111,"eq"],[5697,119,5195,94],[5697,120,5195,6],[5697,122,5195,116],[5698,0,5196,8],[5698,21,5196,15],[5698,25,5196,8],[5699,0,5197,7],[5701,0,5199,6],[5701,16,5199,10],[5701,21,5199,15,"match"],[5701,26,5199,10],[5701,27,5199,21,"types"],[5701,32,5199,26],[5701,33,5199,27,"parenR"],[5701,39,5199,10],[5701,40,5199,6],[5701,42,5199,36],[5702,0,5200,8],[5702,19,5200,13,"next"],[5702,23,5200,8],[5704,0,5202,8],[5704,18,5202,12],[5704,23,5202,17,"match"],[5704,28,5202,12],[5704,29,5202,23,"types"],[5704,34,5202,28],[5704,35,5202,29,"arrow"],[5704,40,5202,12],[5704,41,5202,8],[5704,43,5202,37],[5705,0,5203,10],[5705,23,5203,17],[5705,27,5203,10],[5706,0,5204,9],[5707,0,5205,7],[5708,0,5206,5],[5710,0,5208,4],[5710,17,5208,11],[5710,22,5208,4],[5711,0,5209,3],[5712,0,4465,28],[5713,0,4465,28],[5714,0,4465,28],[5714,61,5211,39,"returnToken"],[5714,72,4465,28],[5714,74,5211,52],[5715,0,5211,52],[5717,0,5212,4],[5717,17,5212,11],[5717,22,5212,16,"tsInType"],[5717,30,5212,11],[5717,31,5212,25],[5717,43,5212,31],[5718,0,5213,6],[5718,16,5213,12,"t"],[5718,17,5213,13],[5718,20,5213,16],[5718,27,5213,20],[5718,28,5213,21,"startNode"],[5718,37,5213,16],[5718,39,5213,6],[5720,0,5214,6],[5720,12,5214,6],[5720,19,5214,10],[5720,20,5214,11,"expect"],[5720,26,5214,6],[5720,27,5214,18,"returnToken"],[5720,38,5214,6],[5722,0,5215,6],[5722,16,5215,12,"asserts"],[5722,23,5215,19],[5722,26,5215,22],[5722,33,5215,26],[5722,34,5215,27,"tsTryParse"],[5722,44,5215,22],[5722,45,5215,38],[5722,52,5215,42],[5722,53,5215,43,"tsParseTypePredicateAsserts"],[5722,80,5215,38],[5722,81,5215,71,"bind"],[5722,85,5215,38],[5722,86,5215,76],[5722,93,5215,38],[5722,94,5215,22],[5722,95,5215,6],[5724,0,5217,6],[5724,16,5217,10,"asserts"],[5724,23,5217,17],[5724,27,5217,21],[5724,34,5217,25],[5724,35,5217,26,"match"],[5724,40,5217,21],[5724,41,5217,32,"types"],[5724,46,5217,37],[5724,47,5217,38,"_this"],[5724,52,5217,21],[5724,53,5217,6],[5724,55,5217,46],[5725,0,5218,8],[5725,18,5218,12,"thisTypePredicate"],[5725,35,5218,29],[5725,38,5218,32],[5725,45,5218,36],[5725,46,5218,37,"tsParseThisTypeOrThisTypePredicate"],[5725,80,5218,32],[5725,82,5218,8],[5727,0,5220,8],[5727,18,5220,12,"thisTypePredicate"],[5727,35,5220,29],[5727,36,5220,30,"type"],[5727,40,5220,12],[5727,45,5220,39],[5727,57,5220,8],[5727,59,5220,53],[5728,0,5221,10],[5728,20,5221,16,"node"],[5728,26,5221,20],[5728,29,5221,23],[5728,36,5221,27],[5728,37,5221,28,"startNodeAtNode"],[5728,52,5221,23],[5728,53,5221,44,"t"],[5728,54,5221,23],[5728,55,5221,10],[5730,0,5222,10,"node"],[5730,16,5222,10,"node"],[5730,22,5222,14],[5730,23,5222,15,"parameterName"],[5730,36,5222,10],[5730,39,5222,31,"thisTypePredicate"],[5730,56,5222,10],[5731,0,5223,10,"node"],[5731,16,5223,10,"node"],[5731,22,5223,14],[5731,23,5223,15,"asserts"],[5731,30,5223,10],[5731,33,5223,25],[5731,37,5223,10],[5732,0,5224,10,"thisTypePredicate"],[5732,16,5224,10,"thisTypePredicate"],[5732,33,5224,27],[5732,36,5224,30],[5732,43,5224,34],[5732,44,5224,35,"finishNode"],[5732,54,5224,30],[5732,55,5224,46,"node"],[5732,61,5224,30],[5732,63,5224,52],[5732,80,5224,30],[5732,81,5224,10],[5733,0,5225,9],[5733,15,5220,8],[5733,21,5225,15],[5734,0,5226,10,"thisTypePredicate"],[5734,16,5226,10,"thisTypePredicate"],[5734,33,5226,27],[5734,34,5226,28,"asserts"],[5734,41,5226,10],[5734,44,5226,38],[5734,48,5226,10],[5735,0,5227,9],[5737,0,5229,8,"t"],[5737,14,5229,8,"t"],[5737,15,5229,9],[5737,16,5229,10,"typeAnnotation"],[5737,30,5229,8],[5737,33,5229,27,"thisTypePredicate"],[5737,50,5229,8],[5738,0,5230,8],[5738,21,5230,15],[5738,28,5230,19],[5738,29,5230,20,"finishNode"],[5738,39,5230,15],[5738,40,5230,31,"t"],[5738,41,5230,15],[5738,43,5230,34],[5738,61,5230,15],[5738,62,5230,8],[5739,0,5231,7],[5741,0,5233,6],[5741,16,5233,12,"typePredicateVariable"],[5741,37,5233,33],[5741,40,5233,36],[5741,47,5233,40],[5741,48,5233,41,"tsIsIdentifier"],[5741,62,5233,36],[5741,68,5233,61],[5741,75,5233,65],[5741,76,5233,66,"tsTryParse"],[5741,86,5233,61],[5741,87,5233,77],[5741,94,5233,81],[5741,95,5233,82,"tsParseTypePredicatePrefix"],[5741,121,5233,77],[5741,122,5233,109,"bind"],[5741,126,5233,77],[5741,127,5233,114],[5741,134,5233,77],[5741,135,5233,61],[5741,136,5233,6],[5743,0,5235,6],[5743,16,5235,10],[5743,17,5235,11,"typePredicateVariable"],[5743,38,5235,6],[5743,40,5235,34],[5744,0,5236,8],[5744,18,5236,12],[5744,19,5236,13,"asserts"],[5744,26,5236,8],[5744,28,5236,22],[5745,0,5237,10],[5745,23,5237,17],[5745,30,5237,21],[5745,31,5237,22,"tsParseTypeAnnotation"],[5745,52,5237,17],[5745,53,5237,44],[5745,58,5237,17],[5745,60,5237,51,"t"],[5745,61,5237,17],[5745,62,5237,10],[5746,0,5238,9],[5748,0,5240,8],[5748,18,5240,14,"node"],[5748,24,5240,18],[5748,27,5240,21],[5748,34,5240,25],[5748,35,5240,26,"startNodeAtNode"],[5748,50,5240,21],[5748,51,5240,42,"t"],[5748,52,5240,21],[5748,53,5240,8],[5750,0,5241,8,"node"],[5750,14,5241,8,"node"],[5750,20,5241,12],[5750,21,5241,13,"parameterName"],[5750,34,5241,8],[5750,37,5241,29],[5750,44,5241,33],[5750,45,5241,34,"parseIdentifier"],[5750,60,5241,29],[5750,62,5241,8],[5751,0,5242,8,"node"],[5751,14,5242,8,"node"],[5751,20,5242,12],[5751,21,5242,13,"asserts"],[5751,28,5242,8],[5751,31,5242,23,"asserts"],[5751,38,5242,8],[5752,0,5243,8,"t"],[5752,14,5243,8,"t"],[5752,15,5243,9],[5752,16,5243,10,"typeAnnotation"],[5752,30,5243,8],[5752,33,5243,27],[5752,40,5243,31],[5752,41,5243,32,"finishNode"],[5752,51,5243,27],[5752,52,5243,43,"node"],[5752,58,5243,27],[5752,60,5243,49],[5752,77,5243,27],[5752,78,5243,8],[5753,0,5244,8],[5753,21,5244,15],[5753,28,5244,19],[5753,29,5244,20,"finishNode"],[5753,39,5244,15],[5753,40,5244,31,"t"],[5753,41,5244,15],[5753,43,5244,34],[5753,61,5244,15],[5753,62,5244,8],[5754,0,5245,7],[5756,0,5247,6],[5756,16,5247,12,"type"],[5756,20,5247,16],[5756,23,5247,19],[5756,30,5247,23],[5756,31,5247,24,"tsParseTypeAnnotation"],[5756,52,5247,19],[5756,53,5247,46],[5756,58,5247,19],[5756,59,5247,6],[5758,0,5248,6],[5758,16,5248,12,"node"],[5758,20,5248,16],[5758,23,5248,19],[5758,30,5248,23],[5758,31,5248,24,"startNodeAtNode"],[5758,46,5248,19],[5758,47,5248,40,"t"],[5758,48,5248,19],[5758,49,5248,6],[5760,0,5249,6,"node"],[5760,12,5249,6,"node"],[5760,16,5249,10],[5760,17,5249,11,"parameterName"],[5760,30,5249,6],[5760,33,5249,27,"typePredicateVariable"],[5760,54,5249,6],[5761,0,5250,6,"node"],[5761,12,5250,6,"node"],[5761,16,5250,10],[5761,17,5250,11,"typeAnnotation"],[5761,31,5250,6],[5761,34,5250,28,"type"],[5761,38,5250,6],[5762,0,5251,6,"node"],[5762,12,5251,6,"node"],[5762,16,5251,10],[5762,17,5251,11,"asserts"],[5762,24,5251,6],[5762,27,5251,21,"asserts"],[5762,34,5251,6],[5763,0,5252,6,"t"],[5763,12,5252,6,"t"],[5763,13,5252,7],[5763,14,5252,8,"typeAnnotation"],[5763,28,5252,6],[5763,31,5252,25],[5763,38,5252,29],[5763,39,5252,30,"finishNode"],[5763,49,5252,25],[5763,50,5252,41,"node"],[5763,54,5252,25],[5763,56,5252,47],[5763,73,5252,25],[5763,74,5252,6],[5764,0,5253,6],[5764,19,5253,13],[5764,26,5253,17],[5764,27,5253,18,"finishNode"],[5764,37,5253,13],[5764,38,5253,29,"t"],[5764,39,5253,13],[5764,41,5253,32],[5764,59,5253,13],[5764,60,5253,6],[5765,0,5254,5],[5765,11,5212,11],[5765,12,5212,4],[5766,0,5255,3],[5767,0,4465,28],[5768,0,4465,28],[5769,0,4465,28],[5769,66,5257,44],[5770,0,5258,4],[5770,17,5258,11],[5770,22,5258,16,"match"],[5770,27,5258,11],[5770,28,5258,22,"types"],[5770,33,5258,27],[5770,34,5258,28,"colon"],[5770,39,5258,11],[5770,43,5258,37],[5770,48,5258,42,"tsParseTypeOrTypePredicateAnnotation"],[5770,84,5258,37],[5770,85,5258,79,"types"],[5770,90,5258,84],[5770,91,5258,85,"colon"],[5770,96,5258,37],[5770,97,5258,11],[5770,100,5258,94,"undefined"],[5770,109,5258,4],[5771,0,5259,3],[5772,0,4465,28],[5773,0,4465,28],[5774,0,4465,28],[5774,51,5261,29],[5775,0,5262,4],[5775,17,5262,11],[5775,22,5262,16,"match"],[5775,27,5262,11],[5775,28,5262,22,"types"],[5775,33,5262,27],[5775,34,5262,28,"colon"],[5775,39,5262,11],[5775,43,5262,37],[5775,48,5262,42,"tsParseTypeAnnotation"],[5775,69,5262,37],[5775,71,5262,11],[5775,74,5262,68,"undefined"],[5775,83,5262,4],[5776,0,5263,3],[5777,0,4465,28],[5778,0,4465,28],[5779,0,4465,28],[5779,41,5265,19],[5780,0,5266,4],[5780,17,5266,11],[5780,22,5266,16,"tsEatThenParseType"],[5780,40,5266,11],[5780,41,5266,35,"types"],[5780,46,5266,40],[5780,47,5266,41,"colon"],[5780,52,5266,11],[5780,53,5266,4],[5781,0,5267,3],[5782,0,4465,28],[5783,0,4465,28],[5784,0,4465,28],[5784,53,5269,31],[5785,0,5270,4],[5785,14,5270,10,"id"],[5785,16,5270,12],[5785,19,5270,15],[5785,24,5270,20,"parseIdentifier"],[5785,39,5270,15],[5785,41,5270,4],[5787,0,5272,4],[5787,14,5272,8],[5787,19,5272,13,"isContextual"],[5787,31,5272,8],[5787,32,5272,26],[5787,36,5272,8],[5787,41,5272,35],[5787,42,5272,36],[5787,47,5272,41,"hasPrecedingLineBreak"],[5787,68,5272,36],[5787,70,5272,4],[5787,72,5272,66],[5788,0,5273,6],[5788,17,5273,11,"next"],[5788,21,5273,6],[5789,0,5274,6],[5789,19,5274,13,"id"],[5789,21,5274,6],[5790,0,5275,5],[5791,0,5276,3],[5792,0,4465,28],[5793,0,4465,28],[5794,0,4465,28],[5794,54,5278,32],[5795,0,5279,4],[5795,14,5279,8],[5795,15,5279,9],[5795,20,5279,14,"match"],[5795,25,5279,9],[5795,26,5279,20,"types"],[5795,31,5279,25],[5795,32,5279,26,"name"],[5795,36,5279,9],[5795,37,5279,8],[5795,41,5279,35],[5795,46,5279,40,"state"],[5795,51,5279,35],[5795,52,5279,46,"value"],[5795,57,5279,35],[5795,62,5279,56],[5795,71,5279,8],[5795,75,5279,69],[5795,80,5279,74,"hasPrecedingLineBreak"],[5795,101,5279,69],[5795,103,5279,4],[5795,105,5279,99],[5796,0,5280,6],[5796,19,5280,13],[5796,24,5280,6],[5797,0,5281,5],[5799,0,5283,4],[5799,14,5283,10,"containsEsc"],[5799,25,5283,21],[5799,28,5283,24],[5799,33,5283,29,"state"],[5799,38,5283,24],[5799,39,5283,35,"containsEsc"],[5799,50,5283,4],[5800,0,5284,4],[5800,15,5284,9,"next"],[5800,19,5284,4],[5802,0,5286,4],[5802,14,5286,8],[5802,15,5286,9],[5802,20,5286,14,"match"],[5802,25,5286,9],[5802,26,5286,20,"types"],[5802,31,5286,25],[5802,32,5286,26,"name"],[5802,36,5286,9],[5802,37,5286,8],[5802,41,5286,35],[5802,42,5286,36],[5802,47,5286,41,"match"],[5802,52,5286,36],[5802,53,5286,47,"types"],[5802,58,5286,52],[5802,59,5286,53,"_this"],[5802,64,5286,36],[5802,65,5286,4],[5802,67,5286,61],[5803,0,5287,6],[5803,19,5287,13],[5803,24,5287,6],[5804,0,5288,5],[5806,0,5290,4],[5806,14,5290,8,"containsEsc"],[5806,25,5290,4],[5806,27,5290,21],[5807,0,5291,6],[5807,17,5291,11,"raise"],[5807,22,5291,6],[5807,23,5291,17],[5807,28,5291,22,"state"],[5807,33,5291,17],[5807,34,5291,28,"lastTokStart"],[5807,46,5291,6],[5807,48,5291,42],[5807,84,5291,6],[5808,0,5292,5],[5810,0,5294,4],[5810,17,5294,11],[5810,21,5294,4],[5811,0,5295,3],[5812,0,4465,28],[5813,0,4465,28],[5814,0,4465,28],[5814,48,5297,63],[5815,0,5297,63],[5817,0,5297,63],[5817,14,5297,24,"eatColon"],[5817,22,5297,63],[5817,93,5297,35],[5817,97,5297,63],[5818,0,5297,63],[5818,14,5297,41,"t"],[5818,15,5297,63],[5818,86,5297,45],[5818,91,5297,50,"startNode"],[5818,100,5297,45],[5818,102,5297,63],[5819,0,5298,4],[5819,15,5298,9,"tsInType"],[5819,23,5298,4],[5819,24,5298,18],[5819,36,5298,24],[5820,0,5299,6],[5820,16,5299,10,"eatColon"],[5820,24,5299,6],[5820,26,5299,20],[5820,33,5299,24],[5820,34,5299,25,"expect"],[5820,40,5299,20],[5820,41,5299,32,"types"],[5820,46,5299,37],[5820,47,5299,38,"colon"],[5820,52,5299,20],[5821,0,5300,6,"t"],[5821,12,5300,6,"t"],[5821,13,5300,7],[5821,14,5300,8,"typeAnnotation"],[5821,28,5300,6],[5821,31,5300,25],[5821,38,5300,29],[5821,39,5300,30,"tsParseType"],[5821,50,5300,25],[5821,52,5300,6],[5822,0,5301,5],[5822,11,5298,4],[5823,0,5302,4],[5823,17,5302,11],[5823,22,5302,16,"finishNode"],[5823,32,5302,11],[5823,33,5302,27,"t"],[5823,34,5302,11],[5823,36,5302,30],[5823,54,5302,11],[5823,55,5302,4],[5824,0,5303,3],[5825,0,4465,28],[5826,0,4465,28],[5827,0,4465,28],[5827,38,5305,16],[5828,0,5306,4,"assert"],[5828,10,5306,4,"assert"],[5828,16,5306,10],[5828,17,5306,11],[5828,22,5306,16,"state"],[5828,27,5306,11],[5828,28,5306,22,"inType"],[5828,34,5306,10],[5828,35,5306,4],[5829,0,5307,4],[5829,14,5307,10,"type"],[5829,18,5307,14],[5829,21,5307,17],[5829,26,5307,22,"tsParseNonConditionalType"],[5829,51,5307,17],[5829,53,5307,4],[5831,0,5309,4],[5831,14,5309,8],[5831,19,5309,13,"hasPrecedingLineBreak"],[5831,40,5309,8],[5831,46,5309,40],[5831,47,5309,41],[5831,52,5309,46,"eat"],[5831,55,5309,41],[5831,56,5309,50,"types"],[5831,61,5309,55],[5831,62,5309,56,"_extends"],[5831,70,5309,41],[5831,71,5309,4],[5831,73,5309,67],[5832,0,5310,6],[5832,19,5310,13,"type"],[5832,23,5310,6],[5833,0,5311,5],[5835,0,5313,4],[5835,14,5313,10,"node"],[5835,18,5313,14],[5835,21,5313,17],[5835,26,5313,22,"startNodeAtNode"],[5835,41,5313,17],[5835,42,5313,38,"type"],[5835,46,5313,17],[5835,47,5313,4],[5836,0,5314,4,"node"],[5836,10,5314,4,"node"],[5836,14,5314,8],[5836,15,5314,9,"checkType"],[5836,24,5314,4],[5836,27,5314,21,"type"],[5836,31,5314,4],[5837,0,5315,4,"node"],[5837,10,5315,4,"node"],[5837,14,5315,8],[5837,15,5315,9,"extendsType"],[5837,26,5315,4],[5837,29,5315,23],[5837,34,5315,28,"tsParseNonConditionalType"],[5837,59,5315,23],[5837,61,5315,4],[5838,0,5316,4],[5838,15,5316,9,"expect"],[5838,21,5316,4],[5838,22,5316,16,"types"],[5838,27,5316,21],[5838,28,5316,22,"question"],[5838,36,5316,4],[5839,0,5317,4,"node"],[5839,10,5317,4,"node"],[5839,14,5317,8],[5839,15,5317,9,"trueType"],[5839,23,5317,4],[5839,26,5317,20],[5839,31,5317,25,"tsParseType"],[5839,42,5317,20],[5839,44,5317,4],[5840,0,5318,4],[5840,15,5318,9,"expect"],[5840,21,5318,4],[5840,22,5318,16,"types"],[5840,27,5318,21],[5840,28,5318,22,"colon"],[5840,33,5318,4],[5841,0,5319,4,"node"],[5841,10,5319,4,"node"],[5841,14,5319,8],[5841,15,5319,9,"falseType"],[5841,24,5319,4],[5841,27,5319,21],[5841,32,5319,26,"tsParseType"],[5841,43,5319,21],[5841,45,5319,4],[5842,0,5320,4],[5842,17,5320,11],[5842,22,5320,16,"finishNode"],[5842,32,5320,11],[5842,33,5320,27,"node"],[5842,37,5320,11],[5842,39,5320,33],[5842,58,5320,11],[5842,59,5320,4],[5843,0,5321,3],[5844,0,4465,28],[5845,0,4465,28],[5846,0,4465,28],[5846,52,5323,30],[5847,0,5324,4],[5847,14,5324,8],[5847,19,5324,13,"tsIsStartOfFunctionType"],[5847,42,5324,8],[5847,44,5324,4],[5847,46,5324,40],[5848,0,5325,6],[5848,19,5325,13],[5848,24,5325,18,"tsParseFunctionOrConstructorType"],[5848,56,5325,13],[5848,57,5325,51],[5848,73,5325,13],[5848,74,5325,6],[5849,0,5326,5],[5851,0,5328,4],[5851,14,5328,8],[5851,19,5328,13,"match"],[5851,24,5328,8],[5851,25,5328,19,"types"],[5851,30,5328,24],[5851,31,5328,25,"_new"],[5851,35,5328,8],[5851,36,5328,4],[5851,38,5328,32],[5852,0,5329,6],[5852,19,5329,13],[5852,24,5329,18,"tsParseFunctionOrConstructorType"],[5852,56,5329,13],[5852,57,5329,51],[5852,76,5329,13],[5852,77,5329,6],[5853,0,5330,5],[5855,0,5332,4],[5855,17,5332,11],[5855,22,5332,16,"tsParseUnionTypeOrHigher"],[5855,46,5332,11],[5855,48,5332,4],[5856,0,5333,3],[5857,0,4465,28],[5858,0,4465,28],[5859,0,4465,28],[5859,47,5335,25],[5860,0,5336,4],[5860,14,5336,10,"node"],[5860,18,5336,14],[5860,21,5336,17],[5860,26,5336,22,"startNode"],[5860,35,5336,17],[5860,37,5336,4],[5862,0,5338,4],[5862,14,5338,10,"_const"],[5862,20,5338,16],[5862,23,5338,19],[5862,28,5338,24,"tsTryNextParseConstantContext"],[5862,57,5338,19],[5862,59,5338,4],[5864,0,5340,4,"node"],[5864,10,5340,4,"node"],[5864,14,5340,8],[5864,15,5340,9,"typeAnnotation"],[5864,29,5340,4],[5864,32,5340,26,"_const"],[5864,38,5340,32],[5864,42,5340,36],[5864,47,5340,41,"tsNextThenParseType"],[5864,66,5340,36],[5864,68,5340,4],[5865,0,5341,4],[5865,15,5341,9,"expectRelational"],[5865,31,5341,4],[5865,32,5341,26],[5865,35,5341,4],[5866,0,5342,4,"node"],[5866,10,5342,4,"node"],[5866,14,5342,8],[5866,15,5342,9,"expression"],[5866,25,5342,4],[5866,28,5342,22],[5866,33,5342,27,"parseMaybeUnary"],[5866,48,5342,22],[5866,50,5342,4],[5867,0,5343,4],[5867,17,5343,11],[5867,22,5343,16,"finishNode"],[5867,32,5343,11],[5867,33,5343,27,"node"],[5867,37,5343,11],[5867,39,5343,33],[5867,56,5343,11],[5867,57,5343,4],[5868,0,5344,3],[5869,0,4465,28],[5870,0,4465,28],[5871,0,4465,28],[5871,46,5346,24,"descriptor"],[5871,56,4465,28],[5871,58,5346,36],[5872,0,5347,4],[5872,14,5347,10,"originalStart"],[5872,27,5347,23],[5872,30,5347,26],[5872,35,5347,31,"state"],[5872,40,5347,26],[5872,41,5347,37,"start"],[5872,46,5347,4],[5873,0,5348,4],[5873,14,5348,10,"delimitedList"],[5873,27,5348,23],[5873,30,5348,26],[5873,35,5348,31,"tsParseDelimitedList"],[5873,55,5348,26],[5873,56,5348,52],[5873,79,5348,26],[5873,81,5348,77],[5873,86,5348,82,"tsParseExpressionWithTypeArguments"],[5873,120,5348,77],[5873,121,5348,117,"bind"],[5873,125,5348,77],[5873,126,5348,122],[5873,130,5348,77],[5873,131,5348,26],[5873,132,5348,4],[5875,0,5350,4],[5875,14,5350,8],[5875,15,5350,9,"delimitedList"],[5875,28,5350,22],[5875,29,5350,23,"length"],[5875,35,5350,4],[5875,37,5350,31],[5876,0,5351,6],[5876,17,5351,11,"raise"],[5876,22,5351,6],[5876,23,5351,17,"originalStart"],[5876,36,5351,6],[5876,44,5351,36,"descriptor"],[5876,54,5351,6],[5877,0,5352,5],[5879,0,5354,4],[5879,17,5354,11,"delimitedList"],[5879,30,5354,4],[5880,0,5355,3],[5881,0,4465,28],[5882,0,4465,28],[5883,0,4465,28],[5883,61,5357,39],[5884,0,5358,4],[5884,14,5358,10,"node"],[5884,18,5358,14],[5884,21,5358,17],[5884,26,5358,22,"startNode"],[5884,35,5358,17],[5884,37,5358,4],[5885,0,5359,4,"node"],[5885,10,5359,4,"node"],[5885,14,5359,8],[5885,15,5359,9,"expression"],[5885,25,5359,4],[5885,28,5359,22],[5885,33,5359,27,"tsParseEntityName"],[5885,50,5359,22],[5885,51,5359,45],[5885,56,5359,22],[5885,57,5359,4],[5887,0,5361,4],[5887,14,5361,8],[5887,19,5361,13,"isRelational"],[5887,31,5361,8],[5887,32,5361,26],[5887,35,5361,8],[5887,36,5361,4],[5887,38,5361,32],[5888,0,5362,6,"node"],[5888,12,5362,6,"node"],[5888,16,5362,10],[5888,17,5362,11,"typeParameters"],[5888,31,5362,6],[5888,34,5362,28],[5888,39,5362,33,"tsParseTypeArguments"],[5888,59,5362,28],[5888,61,5362,6],[5889,0,5363,5],[5891,0,5365,4],[5891,17,5365,11],[5891,22,5365,16,"finishNode"],[5891,32,5365,11],[5891,33,5365,27,"node"],[5891,37,5365,11],[5891,39,5365,33],[5891,70,5365,11],[5891,71,5365,4],[5892,0,5366,3],[5893,0,4465,28],[5894,0,4465,28],[5895,0,4465,28],[5895,52,5368,30,"node"],[5895,56,4465,28],[5895,58,5368,36],[5896,0,5369,4,"node"],[5896,10,5369,4,"node"],[5896,14,5369,8],[5896,15,5369,9,"id"],[5896,17,5369,4],[5896,20,5369,14],[5896,25,5369,19,"parseIdentifier"],[5896,40,5369,14],[5896,42,5369,4],[5897,0,5370,4],[5897,15,5370,9,"checkLVal"],[5897,24,5370,4],[5897,25,5370,19,"node"],[5897,29,5370,23],[5897,30,5370,24,"id"],[5897,32,5370,4],[5897,34,5370,28,"BIND_TS_INTERFACE"],[5897,51,5370,4],[5897,53,5370,47,"undefined"],[5897,62,5370,4],[5897,64,5370,58],[5897,98,5370,4],[5898,0,5371,4,"node"],[5898,10,5371,4,"node"],[5898,14,5371,8],[5898,15,5371,9,"typeParameters"],[5898,29,5371,4],[5898,32,5371,26],[5898,37,5371,31,"tsTryParseTypeParameters"],[5898,61,5371,26],[5898,63,5371,4],[5900,0,5373,4],[5900,14,5373,8],[5900,19,5373,13,"eat"],[5900,22,5373,8],[5900,23,5373,17,"types"],[5900,28,5373,22],[5900,29,5373,23,"_extends"],[5900,37,5373,8],[5900,38,5373,4],[5900,40,5373,34],[5901,0,5374,6,"node"],[5901,12,5374,6,"node"],[5901,16,5374,10],[5901,17,5374,11,"extends"],[5901,24,5374,6],[5901,27,5374,21],[5901,32,5374,26,"tsParseHeritageClause"],[5901,53,5374,21],[5901,54,5374,48],[5901,63,5374,21],[5901,64,5374,6],[5902,0,5375,5],[5904,0,5377,4],[5904,14,5377,10,"body"],[5904,18,5377,14],[5904,21,5377,17],[5904,26,5377,22,"startNode"],[5904,35,5377,17],[5904,37,5377,4],[5905,0,5378,4,"body"],[5905,10,5378,4,"body"],[5905,14,5378,8],[5905,15,5378,9,"body"],[5905,19,5378,4],[5905,22,5378,16],[5905,27,5378,21,"tsInType"],[5905,35,5378,16],[5905,36,5378,30],[5905,41,5378,35,"tsParseObjectTypeMembers"],[5905,65,5378,30],[5905,66,5378,60,"bind"],[5905,70,5378,30],[5905,71,5378,65],[5905,75,5378,30],[5905,76,5378,16],[5905,77,5378,4],[5906,0,5379,4,"node"],[5906,10,5379,4,"node"],[5906,14,5379,8],[5906,15,5379,9,"body"],[5906,19,5379,4],[5906,22,5379,16],[5906,27,5379,21,"finishNode"],[5906,37,5379,16],[5906,38,5379,32,"body"],[5906,42,5379,16],[5906,44,5379,38],[5906,61,5379,16],[5906,62,5379,4],[5907,0,5380,4],[5907,17,5380,11],[5907,22,5380,16,"finishNode"],[5907,32,5380,11],[5907,33,5380,27,"node"],[5907,37,5380,11],[5907,39,5380,33],[5907,63,5380,11],[5907,64,5380,4],[5908,0,5381,3],[5909,0,4465,28],[5910,0,4465,28],[5911,0,4465,28],[5911,52,5383,30,"node"],[5911,56,4465,28],[5911,58,5383,36],[5912,0,5384,4,"node"],[5912,10,5384,4,"node"],[5912,14,5384,8],[5912,15,5384,9,"id"],[5912,17,5384,4],[5912,20,5384,14],[5912,25,5384,19,"parseIdentifier"],[5912,40,5384,14],[5912,42,5384,4],[5913,0,5385,4],[5913,15,5385,9,"checkLVal"],[5913,24,5385,4],[5913,25,5385,19,"node"],[5913,29,5385,23],[5913,30,5385,24,"id"],[5913,32,5385,4],[5913,34,5385,28,"BIND_TS_TYPE"],[5913,46,5385,4],[5913,48,5385,42,"undefined"],[5913,57,5385,4],[5913,59,5385,53],[5913,82,5385,4],[5914,0,5386,4,"node"],[5914,10,5386,4,"node"],[5914,14,5386,8],[5914,15,5386,9,"typeParameters"],[5914,29,5386,4],[5914,32,5386,26],[5914,37,5386,31,"tsTryParseTypeParameters"],[5914,61,5386,26],[5914,63,5386,4],[5915,0,5387,4,"node"],[5915,10,5387,4,"node"],[5915,14,5387,8],[5915,15,5387,9,"typeAnnotation"],[5915,29,5387,4],[5915,32,5387,26],[5915,37,5387,31,"tsExpectThenParseType"],[5915,58,5387,26],[5915,59,5387,53,"types"],[5915,64,5387,58],[5915,65,5387,59,"eq"],[5915,67,5387,26],[5915,68,5387,4],[5916,0,5388,4],[5916,15,5388,9,"semicolon"],[5916,24,5388,4],[5917,0,5389,4],[5917,17,5389,11],[5917,22,5389,16,"finishNode"],[5917,32,5389,11],[5917,33,5389,27,"node"],[5917,37,5389,11],[5917,39,5389,33],[5917,63,5389,11],[5917,64,5389,4],[5918,0,5390,3],[5919,0,4465,28],[5920,0,4465,28],[5921,0,4465,28],[5921,38,5392,16,"cb"],[5921,40,4465,28],[5921,42,5392,20],[5922,0,5393,4],[5922,14,5393,10,"oldContext"],[5922,24,5393,20],[5922,27,5393,23],[5922,32,5393,28,"state"],[5922,37,5393,23],[5922,38,5393,34,"context"],[5922,45,5393,4],[5923,0,5394,4],[5923,15,5394,9,"state"],[5923,20,5394,4],[5923,21,5394,15,"context"],[5923,28,5394,4],[5923,31,5394,25],[5923,32,5394,26,"oldContext"],[5923,42,5394,36],[5923,43,5394,37],[5923,44,5394,36],[5923,45,5394,25],[5923,46,5394,4],[5925,0,5396,4],[5925,14,5396,8],[5926,0,5397,6],[5926,19,5397,13,"cb"],[5926,21,5397,15],[5926,23,5397,6],[5927,0,5398,5],[5927,11,5396,4],[5927,20,5398,14],[5928,0,5399,6],[5928,17,5399,11,"state"],[5928,22,5399,6],[5928,23,5399,17,"context"],[5928,30,5399,6],[5928,33,5399,27,"oldContext"],[5928,43,5399,6],[5929,0,5400,5],[5930,0,5401,3],[5931,0,4465,28],[5932,0,4465,28],[5933,0,4465,28],[5933,33,5403,11,"cb"],[5933,35,4465,28],[5933,37,5403,15],[5934,0,5404,4],[5934,14,5404,10,"oldInType"],[5934,23,5404,19],[5934,26,5404,22],[5934,31,5404,27,"state"],[5934,36,5404,22],[5934,37,5404,33,"inType"],[5934,43,5404,4],[5935,0,5405,4],[5935,15,5405,9,"state"],[5935,20,5405,4],[5935,21,5405,15,"inType"],[5935,27,5405,4],[5935,30,5405,24],[5935,34,5405,4],[5937,0,5407,4],[5937,14,5407,8],[5938,0,5408,6],[5938,19,5408,13,"cb"],[5938,21,5408,15],[5938,23,5408,6],[5939,0,5409,5],[5939,11,5407,4],[5939,20,5409,14],[5940,0,5410,6],[5940,17,5410,11,"state"],[5940,22,5410,6],[5940,23,5410,17,"inType"],[5940,29,5410,6],[5940,32,5410,26,"oldInType"],[5940,41,5410,6],[5941,0,5411,5],[5942,0,5412,3],[5943,0,4465,28],[5944,0,4465,28],[5945,0,4465,28],[5945,43,5414,21,"token"],[5945,48,4465,28],[5945,50,5414,28],[5946,0,5415,4],[5946,17,5415,11],[5946,18,5415,12],[5946,23,5415,17,"match"],[5946,28,5415,12],[5946,29,5415,23,"token"],[5946,34,5415,12],[5946,35,5415,11],[5946,38,5415,32,"undefined"],[5946,47,5415,11],[5946,50,5415,44],[5946,55,5415,49,"tsNextThenParseType"],[5946,74,5415,44],[5946,76,5415,4],[5947,0,5416,3],[5948,0,4465,28],[5949,0,4465,28],[5950,0,4465,28],[5950,46,5418,24,"token"],[5950,51,4465,28],[5950,53,5418,31],[5951,0,5418,31],[5953,0,5419,4],[5953,17,5419,11],[5953,22,5419,16,"tsDoThenParseType"],[5953,39,5419,11],[5953,40,5419,34],[5954,0,5419,34],[5954,19,5419,40],[5954,26,5419,44],[5954,27,5419,45,"expect"],[5954,33,5419,40],[5954,34,5419,52,"token"],[5954,39,5419,40],[5954,40,5419,34],[5955,0,5419,34],[5955,11,5419,11],[5955,12,5419,4],[5956,0,5420,3],[5957,0,4465,28],[5958,0,4465,28],[5959,0,4465,28],[5959,46,5422,24],[5960,0,5422,24],[5962,0,5423,4],[5962,17,5423,11],[5962,22,5423,16,"tsDoThenParseType"],[5962,39,5423,11],[5962,40,5423,34],[5963,0,5423,34],[5963,19,5423,40],[5963,26,5423,44],[5963,27,5423,45,"next"],[5963,31,5423,40],[5963,33,5423,34],[5964,0,5423,34],[5964,11,5423,11],[5964,12,5423,4],[5965,0,5424,3],[5966,0,4465,28],[5967,0,4465,28],[5968,0,4465,28],[5968,42,5426,20,"cb"],[5968,44,4465,28],[5968,46,5426,24],[5969,0,5426,24],[5971,0,5427,4],[5971,17,5427,11],[5971,22,5427,16,"tsInType"],[5971,30,5427,11],[5971,31,5427,25],[5971,43,5427,31],[5972,0,5428,6,"cb"],[5972,12,5428,6,"cb"],[5972,14,5428,8],[5973,0,5429,6],[5973,19,5429,13],[5973,26,5429,17],[5973,27,5429,18,"tsParseType"],[5973,38,5429,13],[5973,40,5429,6],[5974,0,5430,5],[5974,11,5427,11],[5974,12,5427,4],[5975,0,5431,3],[5976,0,4465,28],[5977,0,4465,28],[5978,0,4465,28],[5978,44,5433,22],[5979,0,5434,4],[5979,14,5434,10,"node"],[5979,18,5434,14],[5979,21,5434,17],[5979,26,5434,22,"startNode"],[5979,35,5434,17],[5979,37,5434,4],[5980,0,5435,4,"node"],[5980,10,5435,4,"node"],[5980,14,5435,8],[5980,15,5435,9,"id"],[5980,17,5435,4],[5980,20,5435,14],[5980,25,5435,19,"match"],[5980,30,5435,14],[5980,31,5435,25,"types"],[5980,36,5435,30],[5980,37,5435,31,"string"],[5980,43,5435,14],[5980,47,5435,41],[5980,52,5435,46,"parseExprAtom"],[5980,65,5435,41],[5980,67,5435,14],[5980,70,5435,64],[5980,75,5435,69,"parseIdentifier"],[5980,90,5435,64],[5980,91,5435,85],[5980,95,5435,64],[5980,96,5435,4],[5982,0,5437,4],[5982,14,5437,8],[5982,19,5437,13,"eat"],[5982,22,5437,8],[5982,23,5437,17,"types"],[5982,28,5437,22],[5982,29,5437,23,"eq"],[5982,31,5437,8],[5982,32,5437,4],[5982,34,5437,28],[5983,0,5438,6,"node"],[5983,12,5438,6,"node"],[5983,16,5438,10],[5983,17,5438,11,"initializer"],[5983,28,5438,6],[5983,31,5438,25],[5983,36,5438,30,"parseMaybeAssign"],[5983,52,5438,25],[5983,54,5438,6],[5984,0,5439,5],[5986,0,5441,4],[5986,17,5441,11],[5986,22,5441,16,"finishNode"],[5986,32,5441,11],[5986,33,5441,27,"node"],[5986,37,5441,11],[5986,39,5441,33],[5986,53,5441,11],[5986,54,5441,4],[5987,0,5442,3],[5988,0,4465,28],[5989,0,4465,28],[5990,0,4465,28],[5990,47,5444,25,"node"],[5990,51,4465,28],[5990,53,5444,31,"isConst"],[5990,60,4465,28],[5990,62,5444,40],[5991,0,5445,4],[5991,14,5445,8,"isConst"],[5991,21,5445,4],[5991,23,5445,17,"node"],[5991,27,5445,21],[5991,28,5445,22,"const"],[5991,33,5445,17],[5991,36,5445,30],[5991,40,5445,17],[5992,0,5446,4,"node"],[5992,10,5446,4,"node"],[5992,14,5446,8],[5992,15,5446,9,"id"],[5992,17,5446,4],[5992,20,5446,14],[5992,25,5446,19,"parseIdentifier"],[5992,40,5446,14],[5992,42,5446,4],[5993,0,5447,4],[5993,15,5447,9,"checkLVal"],[5993,24,5447,4],[5993,25,5447,19,"node"],[5993,29,5447,23],[5993,30,5447,24,"id"],[5993,32,5447,4],[5993,34,5447,28,"isConst"],[5993,41,5447,35],[5993,44,5447,38,"BIND_TS_CONST_ENUM"],[5993,62,5447,35],[5993,65,5447,59,"BIND_TS_ENUM"],[5993,77,5447,4],[5993,79,5447,73,"undefined"],[5993,88,5447,4],[5993,90,5447,84],[5993,119,5447,4],[5994,0,5448,4],[5994,15,5448,9,"expect"],[5994,21,5448,4],[5994,22,5448,16,"types"],[5994,27,5448,21],[5994,28,5448,22,"braceL"],[5994,34,5448,4],[5995,0,5449,4,"node"],[5995,10,5449,4,"node"],[5995,14,5449,8],[5995,15,5449,9,"members"],[5995,22,5449,4],[5995,25,5449,19],[5995,30,5449,24,"tsParseDelimitedList"],[5995,50,5449,19],[5995,51,5449,45],[5995,64,5449,19],[5995,66,5449,60],[5995,71,5449,65,"tsParseEnumMember"],[5995,88,5449,60],[5995,89,5449,83,"bind"],[5995,93,5449,60],[5995,94,5449,88],[5995,98,5449,60],[5995,99,5449,19],[5995,100,5449,4],[5996,0,5450,4],[5996,15,5450,9,"expect"],[5996,21,5450,4],[5996,22,5450,16,"types"],[5996,27,5450,21],[5996,28,5450,22,"braceR"],[5996,34,5450,4],[5997,0,5451,4],[5997,17,5451,11],[5997,22,5451,16,"finishNode"],[5997,32,5451,11],[5997,33,5451,27,"node"],[5997,37,5451,11],[5997,39,5451,33],[5997,58,5451,11],[5997,59,5451,4],[5998,0,5452,3],[5999,0,4465,28],[6000,0,4465,28],[6001,0,4465,28],[6001,45,5454,23],[6002,0,5455,4],[6002,14,5455,10,"node"],[6002,18,5455,14],[6002,21,5455,17],[6002,26,5455,22,"startNode"],[6002,35,5455,17],[6002,37,5455,4],[6003,0,5456,4],[6003,15,5456,9,"scope"],[6003,20,5456,4],[6003,21,5456,15,"enter"],[6003,26,5456,4],[6003,27,5456,21,"SCOPE_OTHER"],[6003,38,5456,4],[6004,0,5457,4],[6004,15,5457,9,"expect"],[6004,21,5457,4],[6004,22,5457,16,"types"],[6004,27,5457,21],[6004,28,5457,22,"braceL"],[6004,34,5457,4],[6005,0,5458,4],[6005,15,5458,9,"parseBlockOrModuleBlockBody"],[6005,42,5458,4],[6005,43,5458,37,"node"],[6005,47,5458,41],[6005,48,5458,42,"body"],[6005,52,5458,37],[6005,55,5458,49],[6005,57,5458,4],[6005,59,5458,53,"undefined"],[6005,68,5458,4],[6005,70,5458,64],[6005,74,5458,4],[6005,76,5458,70,"types"],[6005,81,5458,75],[6005,82,5458,76,"braceR"],[6005,88,5458,4],[6006,0,5459,4],[6006,15,5459,9,"scope"],[6006,20,5459,4],[6006,21,5459,15,"exit"],[6006,25,5459,4],[6007,0,5460,4],[6007,17,5460,11],[6007,22,5460,16,"finishNode"],[6007,32,5460,11],[6007,33,5460,27,"node"],[6007,37,5460,11],[6007,39,5460,33],[6007,54,5460,11],[6007,55,5460,4],[6008,0,5461,3],[6009,0,4465,28],[6010,0,4465,28],[6011,0,4465,28],[6011,60,5463,38,"node"],[6011,64,4465,28],[6011,66,5463,60],[6012,0,5463,60],[6012,14,5463,44,"nested"],[6012,20,5463,60],[6012,91,5463,53],[6012,96,5463,60],[6013,0,5464,4,"node"],[6013,10,5464,4,"node"],[6013,14,5464,8],[6013,15,5464,9,"id"],[6013,17,5464,4],[6013,20,5464,14],[6013,25,5464,19,"parseIdentifier"],[6013,40,5464,14],[6013,42,5464,4],[6015,0,5466,4],[6015,14,5466,8],[6015,15,5466,9,"nested"],[6015,21,5466,4],[6015,23,5466,17],[6016,0,5467,6],[6016,17,5467,11,"checkLVal"],[6016,26,5467,6],[6016,27,5467,21,"node"],[6016,31,5467,25],[6016,32,5467,26,"id"],[6016,34,5467,6],[6016,36,5467,30,"BIND_TS_NAMESPACE"],[6016,53,5467,6],[6016,55,5467,49],[6016,59,5467,6],[6016,61,5467,55],[6016,94,5467,6],[6017,0,5468,5],[6019,0,5470,4],[6019,14,5470,8],[6019,19,5470,13,"eat"],[6019,22,5470,8],[6019,23,5470,17,"types"],[6019,28,5470,22],[6019,29,5470,23,"dot"],[6019,32,5470,8],[6019,33,5470,4],[6019,35,5470,29],[6020,0,5471,6],[6020,16,5471,12,"inner"],[6020,21,5471,17],[6020,24,5471,20],[6020,29,5471,25,"startNode"],[6020,38,5471,20],[6020,40,5471,6],[6021,0,5472,6],[6021,17,5472,11,"tsParseModuleOrNamespaceDeclaration"],[6021,52,5472,6],[6021,53,5472,47,"inner"],[6021,58,5472,6],[6021,60,5472,54],[6021,64,5472,6],[6022,0,5473,6,"node"],[6022,12,5473,6,"node"],[6022,16,5473,10],[6022,17,5473,11,"body"],[6022,21,5473,6],[6022,24,5473,18,"inner"],[6022,29,5473,6],[6023,0,5474,5],[6023,11,5470,4],[6023,17,5474,11],[6024,0,5475,6],[6024,17,5475,11,"scope"],[6024,22,5475,6],[6024,23,5475,17,"enter"],[6024,28,5475,6],[6024,29,5475,23,"SCOPE_TS_MODULE"],[6024,44,5475,6],[6025,0,5476,6,"node"],[6025,12,5476,6,"node"],[6025,16,5476,10],[6025,17,5476,11,"body"],[6025,21,5476,6],[6025,24,5476,18],[6025,29,5476,23,"tsParseModuleBlock"],[6025,47,5476,18],[6025,49,5476,6],[6026,0,5477,6],[6026,17,5477,11,"scope"],[6026,22,5477,6],[6026,23,5477,17,"exit"],[6026,27,5477,6],[6027,0,5478,5],[6029,0,5480,4],[6029,17,5480,11],[6029,22,5480,16,"finishNode"],[6029,32,5480,11],[6029,33,5480,27,"node"],[6029,37,5480,11],[6029,39,5480,33],[6029,60,5480,11],[6029,61,5480,4],[6030,0,5481,3],[6031,0,4465,28],[6032,0,4465,28],[6033,0,4465,28],[6033,64,5483,42,"node"],[6033,68,4465,28],[6033,70,5483,48],[6034,0,5484,4],[6034,14,5484,8],[6034,19,5484,13,"isContextual"],[6034,31,5484,8],[6034,32,5484,26],[6034,40,5484,8],[6034,41,5484,4],[6034,43,5484,37],[6035,0,5485,6,"node"],[6035,12,5485,6,"node"],[6035,16,5485,10],[6035,17,5485,11,"global"],[6035,23,5485,6],[6035,26,5485,20],[6035,30,5485,6],[6036,0,5486,6,"node"],[6036,12,5486,6,"node"],[6036,16,5486,10],[6036,17,5486,11,"id"],[6036,19,5486,6],[6036,22,5486,16],[6036,27,5486,21,"parseIdentifier"],[6036,42,5486,16],[6036,44,5486,6],[6037,0,5487,5],[6037,11,5484,4],[6037,17,5487,11],[6037,21,5487,15],[6037,26,5487,20,"match"],[6037,31,5487,15],[6037,32,5487,26,"types"],[6037,37,5487,31],[6037,38,5487,32,"string"],[6037,44,5487,15],[6037,45,5487,11],[6037,47,5487,41],[6038,0,5488,6,"node"],[6038,12,5488,6,"node"],[6038,16,5488,10],[6038,17,5488,11,"id"],[6038,19,5488,6],[6038,22,5488,16],[6038,27,5488,21,"parseExprAtom"],[6038,40,5488,16],[6038,42,5488,6],[6039,0,5489,5],[6039,11,5487,11],[6039,17,5489,11],[6040,0,5490,6],[6040,17,5490,11,"unexpected"],[6040,27,5490,6],[6041,0,5491,5],[6043,0,5493,4],[6043,14,5493,8],[6043,19,5493,13,"match"],[6043,24,5493,8],[6043,25,5493,19,"types"],[6043,30,5493,24],[6043,31,5493,25,"braceL"],[6043,37,5493,8],[6043,38,5493,4],[6043,40,5493,34],[6044,0,5494,6],[6044,17,5494,11,"scope"],[6044,22,5494,6],[6044,23,5494,17,"enter"],[6044,28,5494,6],[6044,29,5494,23,"SCOPE_TS_MODULE"],[6044,44,5494,6],[6045,0,5495,6,"node"],[6045,12,5495,6,"node"],[6045,16,5495,10],[6045,17,5495,11,"body"],[6045,21,5495,6],[6045,24,5495,18],[6045,29,5495,23,"tsParseModuleBlock"],[6045,47,5495,18],[6045,49,5495,6],[6046,0,5496,6],[6046,17,5496,11,"scope"],[6046,22,5496,6],[6046,23,5496,17,"exit"],[6046,27,5496,6],[6047,0,5497,5],[6047,11,5493,4],[6047,17,5497,11],[6048,0,5498,6],[6048,17,5498,11,"semicolon"],[6048,26,5498,6],[6049,0,5499,5],[6051,0,5501,4],[6051,17,5501,11],[6051,22,5501,16,"finishNode"],[6051,32,5501,11],[6051,33,5501,27,"node"],[6051,37,5501,11],[6051,39,5501,33],[6051,60,5501,11],[6051,61,5501,4],[6052,0,5502,3],[6053,0,4465,28],[6054,0,4465,28],[6055,0,4465,28],[6055,55,5504,33,"node"],[6055,59,4465,28],[6055,61,5504,39,"isExport"],[6055,69,4465,28],[6055,71,5504,49],[6056,0,5505,4,"node"],[6056,10,5505,4,"node"],[6056,14,5505,8],[6056,15,5505,9,"isExport"],[6056,23,5505,4],[6056,26,5505,20,"isExport"],[6056,34,5505,28],[6056,38,5505,32],[6056,43,5505,4],[6057,0,5506,4,"node"],[6057,10,5506,4,"node"],[6057,14,5506,8],[6057,15,5506,9,"id"],[6057,17,5506,4],[6057,20,5506,14],[6057,25,5506,19,"parseIdentifier"],[6057,40,5506,14],[6057,42,5506,4],[6058,0,5507,4],[6058,15,5507,9,"checkLVal"],[6058,24,5507,4],[6058,25,5507,19,"node"],[6058,29,5507,23],[6058,30,5507,24,"id"],[6058,32,5507,4],[6058,34,5507,28,"BIND_LEXICAL"],[6058,46,5507,4],[6058,48,5507,42,"undefined"],[6058,57,5507,4],[6058,59,5507,53],[6058,86,5507,4],[6059,0,5508,4],[6059,15,5508,9,"expect"],[6059,21,5508,4],[6059,22,5508,16,"types"],[6059,27,5508,21],[6059,28,5508,22,"eq"],[6059,30,5508,4],[6060,0,5509,4,"node"],[6060,10,5509,4,"node"],[6060,14,5509,8],[6060,15,5509,9,"moduleReference"],[6060,30,5509,4],[6060,33,5509,27],[6060,38,5509,32,"tsParseModuleReference"],[6060,60,5509,27],[6060,62,5509,4],[6061,0,5510,4],[6061,15,5510,9,"semicolon"],[6061,24,5510,4],[6062,0,5511,4],[6062,17,5511,11],[6062,22,5511,16,"finishNode"],[6062,32,5511,11],[6062,33,5511,27,"node"],[6062,37,5511,11],[6062,39,5511,33],[6062,66,5511,11],[6062,67,5511,4],[6063,0,5512,3],[6064,0,4465,28],[6065,0,4465,28],[6066,0,4465,28],[6066,54,5514,32],[6067,0,5515,4],[6067,17,5515,11],[6067,22,5515,16,"isContextual"],[6067,34,5515,11],[6067,35,5515,29],[6067,44,5515,11],[6067,49,5515,43],[6067,54,5515,48,"lookaheadCharCode"],[6067,71,5515,43],[6067,78,5515,72],[6067,80,5515,4],[6068,0,5516,3],[6069,0,4465,28],[6070,0,4465,28],[6071,0,4465,28],[6071,49,5518,27],[6072,0,5519,4],[6072,17,5519,11],[6072,22,5519,16,"tsIsExternalModuleReference"],[6072,49,5519,11],[6072,54,5519,48],[6072,59,5519,53,"tsParseExternalModuleReference"],[6072,89,5519,48],[6072,91,5519,11],[6072,94,5519,88],[6072,99,5519,93,"tsParseEntityName"],[6072,116,5519,88],[6072,117,5519,111],[6072,122,5519,88],[6072,123,5519,4],[6073,0,5520,3],[6074,0,4465,28],[6075,0,4465,28],[6076,0,4465,28],[6076,57,5522,35],[6077,0,5523,4],[6077,14,5523,10,"node"],[6077,18,5523,14],[6077,21,5523,17],[6077,26,5523,22,"startNode"],[6077,35,5523,17],[6077,37,5523,4],[6078,0,5524,4],[6078,15,5524,9,"expectContextual"],[6078,31,5524,4],[6078,32,5524,26],[6078,41,5524,4],[6079,0,5525,4],[6079,15,5525,9,"expect"],[6079,21,5525,4],[6079,22,5525,16,"types"],[6079,27,5525,21],[6079,28,5525,22,"parenL"],[6079,34,5525,4],[6081,0,5527,4],[6081,14,5527,8],[6081,15,5527,9],[6081,20,5527,14,"match"],[6081,25,5527,9],[6081,26,5527,20,"types"],[6081,31,5527,25],[6081,32,5527,26,"string"],[6081,38,5527,9],[6081,39,5527,4],[6081,41,5527,35],[6082,0,5528,6],[6082,18,5528,12],[6082,23,5528,17,"unexpected"],[6082,33,5528,12],[6082,35,5528,6],[6083,0,5529,5],[6085,0,5531,4,"node"],[6085,10,5531,4,"node"],[6085,14,5531,8],[6085,15,5531,9,"expression"],[6085,25,5531,4],[6085,28,5531,22],[6085,33,5531,27,"parseExprAtom"],[6085,46,5531,22],[6085,48,5531,4],[6086,0,5532,4],[6086,15,5532,9,"expect"],[6086,21,5532,4],[6086,22,5532,16,"types"],[6086,27,5532,21],[6086,28,5532,22,"parenR"],[6086,34,5532,4],[6087,0,5533,4],[6087,17,5533,11],[6087,22,5533,16,"finishNode"],[6087,32,5533,11],[6087,33,5533,27,"node"],[6087,37,5533,11],[6087,39,5533,33],[6087,66,5533,11],[6087,67,5533,4],[6088,0,5534,3],[6089,0,4465,28],[6090,0,4465,28],[6091,0,4465,28],[6091,36,5536,14,"f"],[6091,37,4465,28],[6091,39,5536,17],[6092,0,5537,4],[6092,14,5537,10,"state"],[6092,19,5537,15],[6092,22,5537,18],[6092,27,5537,23,"state"],[6092,32,5537,18],[6092,33,5537,29,"clone"],[6092,38,5537,18],[6092,40,5537,4],[6093,0,5538,4],[6093,14,5538,10,"res"],[6093,17,5538,13],[6093,20,5538,16,"f"],[6093,21,5538,17],[6093,23,5538,4],[6094,0,5539,4],[6094,15,5539,9,"state"],[6094,20,5539,4],[6094,23,5539,17,"state"],[6094,28,5539,4],[6095,0,5540,4],[6095,17,5540,11,"res"],[6095,20,5540,4],[6096,0,5541,3],[6097,0,4465,28],[6098,0,4465,28],[6099,0,4465,28],[6099,43,5543,21,"f"],[6099,44,4465,28],[6099,46,5543,24],[6100,0,5544,4],[6100,14,5544,10,"result"],[6100,20,5544,16],[6100,23,5544,19],[6100,28,5544,24,"tryParse"],[6100,36,5544,19],[6100,37,5544,33],[6100,47,5544,33,"abort"],[6100,52,5544,38],[6101,0,5544,38],[6101,19,5544,42,"f"],[6101,20,5544,43],[6101,26,5544,49,"abort"],[6101,31,5544,54],[6101,33,5544,38],[6102,0,5544,38],[6102,11,5544,19],[6102,12,5544,4],[6103,0,5545,4],[6103,14,5545,8,"result"],[6103,20,5545,14],[6103,21,5545,15,"aborted"],[6103,28,5545,8],[6103,32,5545,26],[6103,33,5545,27,"result"],[6103,39,5545,33],[6103,40,5545,34,"node"],[6103,44,5545,4],[6103,46,5545,40],[6103,53,5545,47,"undefined"],[6103,62,5545,40],[6104,0,5546,4],[6104,14,5546,8,"result"],[6104,20,5546,14],[6104,21,5546,15,"error"],[6104,26,5546,4],[6104,28,5546,22],[6104,33,5546,27,"state"],[6104,38,5546,22],[6104,41,5546,35,"result"],[6104,47,5546,41],[6104,48,5546,42,"failState"],[6104,57,5546,22],[6105,0,5547,4],[6105,17,5547,11,"result"],[6105,23,5547,17],[6105,24,5547,18,"node"],[6105,28,5547,4],[6106,0,5548,3],[6107,0,4465,28],[6108,0,4465,28],[6109,0,4465,28],[6109,35,5550,13,"f"],[6109,36,4465,28],[6109,38,5550,16],[6110,0,5551,4],[6110,14,5551,10,"state"],[6110,19,5551,15],[6110,22,5551,18],[6110,27,5551,23,"state"],[6110,32,5551,18],[6110,33,5551,29,"clone"],[6110,38,5551,18],[6110,40,5551,4],[6111,0,5552,4],[6111,14,5552,10,"result"],[6111,20,5552,16],[6111,23,5552,19,"f"],[6111,24,5552,20],[6111,26,5552,4],[6113,0,5554,4],[6113,14,5554,8,"result"],[6113,20,5554,14],[6113,25,5554,19,"undefined"],[6113,34,5554,8],[6113,38,5554,32,"result"],[6113,44,5554,38],[6113,49,5554,43],[6113,54,5554,4],[6113,56,5554,50],[6114,0,5555,6],[6114,19,5555,13,"result"],[6114,25,5555,6],[6115,0,5556,5],[6115,11,5554,4],[6115,17,5556,11],[6116,0,5557,6],[6116,17,5557,11,"state"],[6116,22,5557,6],[6116,25,5557,19,"state"],[6116,30,5557,6],[6117,0,5558,6],[6117,19,5558,13,"undefined"],[6117,28,5558,6],[6118,0,5559,5],[6119,0,5560,3],[6120,0,4465,28],[6121,0,4465,28],[6122,0,4465,28],[6122,42,5562,20,"nany"],[6122,46,4465,28],[6122,48,5562,26],[6123,0,5563,4],[6123,14,5563,8],[6123,19,5563,13,"isLineTerminator"],[6123,35,5563,8],[6123,37,5563,4],[6123,39,5563,33],[6124,0,5564,6],[6125,0,5565,5],[6127,0,5567,4],[6127,14,5567,8,"starttype"],[6127,23,5567,17],[6127,26,5567,20],[6127,31,5567,25,"state"],[6127,36,5567,20],[6127,37,5567,31,"type"],[6127,41,5567,4],[6128,0,5568,4],[6128,14,5568,8,"kind"],[6128,18,5568,4],[6130,0,5570,4],[6130,14,5570,8],[6130,19,5570,13,"isContextual"],[6130,31,5570,8],[6130,32,5570,26],[6130,37,5570,8],[6130,38,5570,4],[6130,40,5570,34],[6131,0,5571,6,"starttype"],[6131,12,5571,6,"starttype"],[6131,21,5571,15],[6131,24,5571,18,"types"],[6131,29,5571,23],[6131,30,5571,24,"_var"],[6131,34,5571,6],[6132,0,5572,6,"kind"],[6132,12,5572,6,"kind"],[6132,16,5572,10],[6132,19,5572,13],[6132,24,5572,6],[6133,0,5573,5],[6135,0,5575,4],[6135,18,5575,12,"starttype"],[6135,27,5575,4],[6136,0,5576,6],[6136,17,5576,11,"types"],[6136,22,5576,16],[6136,23,5576,17,"_function"],[6136,32,5576,6],[6137,0,5577,8],[6137,21,5577,15],[6137,26,5577,20,"parseFunctionStatement"],[6137,48,5577,15],[6137,49,5577,43,"nany"],[6137,53,5577,15],[6137,55,5577,49],[6137,60,5577,15],[6137,62,5577,56],[6137,66,5577,15],[6137,67,5577,8],[6139,0,5579,6],[6139,17,5579,11,"types"],[6139,22,5579,16],[6139,23,5579,17,"_class"],[6139,29,5579,6],[6140,0,5580,8,"nany"],[6140,14,5580,8,"nany"],[6140,18,5580,12],[6140,19,5580,13,"declare"],[6140,26,5580,8],[6140,29,5580,23],[6140,33,5580,8],[6141,0,5581,8],[6141,21,5581,15],[6141,26,5581,20,"parseClass"],[6141,36,5581,15],[6141,37,5581,31,"nany"],[6141,41,5581,15],[6141,43,5581,37],[6141,47,5581,15],[6141,49,5581,43],[6141,54,5581,15],[6141,55,5581,8],[6143,0,5583,6],[6143,17,5583,11,"types"],[6143,22,5583,16],[6143,23,5583,17,"_const"],[6143,29,5583,6],[6144,0,5584,8],[6144,18,5584,12],[6144,23,5584,17,"match"],[6144,28,5584,12],[6144,29,5584,23,"types"],[6144,34,5584,28],[6144,35,5584,29,"_const"],[6144,41,5584,12],[6144,46,5584,40],[6144,51,5584,45,"isLookaheadContextual"],[6144,72,5584,40],[6144,73,5584,67],[6144,79,5584,40],[6144,80,5584,8],[6144,82,5584,76],[6145,0,5585,10],[6145,21,5585,15,"expect"],[6145,27,5585,10],[6145,28,5585,22,"types"],[6145,33,5585,27],[6145,34,5585,28,"_const"],[6145,40,5585,10],[6146,0,5586,10],[6146,21,5586,15,"expectContextual"],[6146,37,5586,10],[6146,38,5586,32],[6146,44,5586,10],[6147,0,5587,10],[6147,23,5587,17],[6147,28,5587,22,"tsParseEnumDeclaration"],[6147,50,5587,17],[6147,51,5587,45,"nany"],[6147,55,5587,17],[6147,57,5587,51],[6147,61,5587,17],[6147,62,5587,10],[6148,0,5588,9],[6150,0,5590,6],[6150,17,5590,11,"types"],[6150,22,5590,16],[6150,23,5590,17,"_var"],[6150,27,5590,6],[6151,0,5591,8,"kind"],[6151,14,5591,8,"kind"],[6151,18,5591,12],[6151,21,5591,15,"kind"],[6151,25,5591,19],[6151,29,5591,23],[6151,34,5591,28,"state"],[6151,39,5591,23],[6151,40,5591,34,"value"],[6151,45,5591,8],[6152,0,5592,8],[6152,21,5592,15],[6152,26,5592,20,"parseVarStatement"],[6152,43,5592,15],[6152,44,5592,38,"nany"],[6152,48,5592,15],[6152,50,5592,44,"kind"],[6152,54,5592,15],[6152,55,5592,8],[6154,0,5594,6],[6154,17,5594,11,"types"],[6154,22,5594,16],[6154,23,5594,17,"name"],[6154,27,5594,6],[6155,0,5595,8],[6156,0,5596,10],[6156,20,5596,16,"value"],[6156,25,5596,21],[6156,28,5596,24],[6156,33,5596,29,"state"],[6156,38,5596,24],[6156,39,5596,35,"value"],[6156,44,5596,10],[6158,0,5598,10],[6158,20,5598,14,"value"],[6158,25,5598,19],[6158,30,5598,24],[6158,38,5598,10],[6158,40,5598,34],[6159,0,5599,12],[6159,25,5599,19],[6159,30,5599,24,"tsParseAmbientExternalModuleDeclaration"],[6159,69,5599,19],[6159,70,5599,64,"nany"],[6159,74,5599,19],[6159,75,5599,12],[6160,0,5600,11],[6160,17,5598,10],[6160,23,5600,17],[6161,0,5601,12],[6161,25,5601,19],[6161,30,5601,24,"tsParseDeclaration"],[6161,48,5601,19],[6161,49,5601,43,"nany"],[6161,53,5601,19],[6161,55,5601,49,"value"],[6161,60,5601,19],[6161,62,5601,56],[6161,66,5601,19],[6161,67,5601,12],[6162,0,5602,11],[6163,0,5603,9],[6164,0,5575,4],[6165,0,5605,3],[6166,0,4465,28],[6167,0,4465,28],[6168,0,4465,28],[6168,54,5607,32],[6169,0,5608,4],[6169,17,5608,11],[6169,22,5608,16,"tsParseDeclaration"],[6169,40,5608,11],[6169,41,5608,35],[6169,46,5608,40,"startNode"],[6169,55,5608,35],[6169,57,5608,11],[6169,59,5608,53],[6169,64,5608,58,"state"],[6169,69,5608,53],[6169,70,5608,64,"value"],[6169,75,5608,11],[6169,77,5608,71],[6169,81,5608,11],[6169,82,5608,4],[6170,0,5609,3],[6171,0,4465,28],[6172,0,4465,28],[6173,0,4465,28],[6173,51,5611,29,"node"],[6173,55,4465,28],[6173,57,5611,35,"expr"],[6173,61,4465,28],[6173,63,5611,41],[6174,0,5612,4],[6174,18,5612,12,"expr"],[6174,22,5612,16],[6174,23,5612,17,"name"],[6174,27,5612,4],[6175,0,5613,6],[6175,17,5613,11],[6175,26,5613,6],[6176,0,5614,8],[6177,0,5615,10],[6177,20,5615,16,"declaration"],[6177,31,5615,27],[6177,34,5615,30],[6177,39,5615,35,"tsTryParseDeclare"],[6177,56,5615,30],[6177,57,5615,53,"node"],[6177,61,5615,30],[6177,62,5615,10],[6179,0,5617,10],[6179,20,5617,14,"declaration"],[6179,31,5617,10],[6179,33,5617,27],[6180,0,5618,12,"declaration"],[6180,18,5618,12,"declaration"],[6180,29,5618,23],[6180,30,5618,24,"declare"],[6180,37,5618,12],[6180,40,5618,34],[6180,44,5618,12],[6181,0,5619,12],[6181,25,5619,19,"declaration"],[6181,36,5619,12],[6182,0,5620,11],[6184,0,5622,10],[6185,0,5623,9],[6187,0,5625,6],[6187,17,5625,11],[6187,25,5625,6],[6188,0,5626,8],[6188,18,5626,12],[6188,23,5626,17,"match"],[6188,28,5626,12],[6188,29,5626,23,"types"],[6188,34,5626,28],[6188,35,5626,29,"braceL"],[6188,41,5626,12],[6188,42,5626,8],[6188,44,5626,38],[6189,0,5627,10],[6189,21,5627,15,"scope"],[6189,26,5627,10],[6189,27,5627,21,"enter"],[6189,32,5627,10],[6189,33,5627,27,"SCOPE_TS_MODULE"],[6189,48,5627,10],[6190,0,5628,10],[6190,20,5628,16,"mod"],[6190,23,5628,19],[6190,26,5628,22,"node"],[6190,30,5628,10],[6191,0,5629,10,"mod"],[6191,16,5629,10,"mod"],[6191,19,5629,13],[6191,20,5629,14,"global"],[6191,26,5629,10],[6191,29,5629,23],[6191,33,5629,10],[6192,0,5630,10,"mod"],[6192,16,5630,10,"mod"],[6192,19,5630,13],[6192,20,5630,14,"id"],[6192,22,5630,10],[6192,25,5630,19,"expr"],[6192,29,5630,10],[6193,0,5631,10,"mod"],[6193,16,5631,10,"mod"],[6193,19,5631,13],[6193,20,5631,14,"body"],[6193,24,5631,10],[6193,27,5631,21],[6193,32,5631,26,"tsParseModuleBlock"],[6193,50,5631,21],[6193,52,5631,10],[6194,0,5632,10],[6194,21,5632,15,"scope"],[6194,26,5632,10],[6194,27,5632,21,"exit"],[6194,31,5632,10],[6195,0,5633,10],[6195,23,5633,17],[6195,28,5633,22,"finishNode"],[6195,38,5633,17],[6195,39,5633,33,"mod"],[6195,42,5633,17],[6195,44,5633,38],[6195,65,5633,17],[6195,66,5633,10],[6196,0,5634,9],[6198,0,5636,8],[6200,0,5638,6],[6201,0,5639,8],[6201,21,5639,15],[6201,26,5639,20,"tsParseDeclaration"],[6201,44,5639,15],[6201,45,5639,39,"node"],[6201,49,5639,15],[6201,51,5639,45,"expr"],[6201,55,5639,49],[6201,56,5639,50,"name"],[6201,60,5639,15],[6201,62,5639,56],[6201,67,5639,15],[6201,68,5639,8],[6202,0,5612,4],[6203,0,5641,3],[6204,0,4465,28],[6205,0,4465,28],[6206,0,4465,28],[6206,43,5643,21,"node"],[6206,47,4465,28],[6206,49,5643,27,"value"],[6206,54,4465,28],[6206,56,5643,34,"next"],[6206,60,4465,28],[6206,62,5643,40],[6207,0,5644,4],[6207,18,5644,12,"value"],[6207,23,5644,4],[6208,0,5645,6],[6208,17,5645,11],[6208,27,5645,6],[6209,0,5646,8],[6209,18,5646,12],[6209,23,5646,17,"tsCheckLineTerminatorAndMatch"],[6209,52,5646,12],[6209,53,5646,47,"types"],[6209,58,5646,52],[6209,59,5646,53,"_class"],[6209,65,5646,12],[6209,67,5646,61,"next"],[6209,71,5646,12],[6209,72,5646,8],[6209,74,5646,68],[6210,0,5647,10],[6210,20,5647,16,"cls"],[6210,23,5647,19],[6210,26,5647,22,"node"],[6210,30,5647,10],[6211,0,5648,10,"cls"],[6211,16,5648,10,"cls"],[6211,19,5648,13],[6211,20,5648,14,"abstract"],[6211,28,5648,10],[6211,31,5648,25],[6211,35,5648,10],[6213,0,5650,10],[6213,20,5650,14,"next"],[6213,24,5650,10],[6213,26,5650,20],[6214,0,5651,12],[6214,23,5651,17,"next"],[6214,27,5651,12],[6216,0,5653,12],[6216,22,5653,16],[6216,23,5653,17],[6216,28,5653,22,"match"],[6216,33,5653,17],[6216,34,5653,28,"types"],[6216,39,5653,33],[6216,40,5653,34,"_class"],[6216,46,5653,17],[6216,47,5653,12],[6216,49,5653,43],[6217,0,5654,14],[6217,25,5654,19,"unexpected"],[6217,35,5654,14],[6217,36,5654,30],[6217,40,5654,14],[6217,42,5654,36,"types"],[6217,47,5654,41],[6217,48,5654,42,"_class"],[6217,54,5654,14],[6218,0,5655,13],[6219,0,5656,11],[6221,0,5658,10],[6221,23,5658,17],[6221,28,5658,22,"parseClass"],[6221,38,5658,17],[6221,39,5658,33,"cls"],[6221,42,5658,17],[6221,44,5658,38],[6221,48,5658,17],[6221,50,5658,44],[6221,55,5658,17],[6221,56,5658,10],[6222,0,5659,9],[6224,0,5661,8],[6226,0,5663,6],[6226,17,5663,11],[6226,23,5663,6],[6227,0,5664,8],[6227,18,5664,12,"next"],[6227,22,5664,16],[6227,26,5664,20],[6227,31,5664,25,"match"],[6227,36,5664,20],[6227,37,5664,31,"types"],[6227,42,5664,36],[6227,43,5664,37,"name"],[6227,47,5664,20],[6227,48,5664,8],[6227,50,5664,44],[6228,0,5665,10],[6228,20,5665,14,"next"],[6228,24,5665,10],[6228,26,5665,20],[6228,31,5665,25,"next"],[6228,35,5665,20],[6229,0,5666,10],[6229,23,5666,17],[6229,28,5666,22,"tsParseEnumDeclaration"],[6229,50,5666,17],[6229,51,5666,45,"node"],[6229,55,5666,17],[6229,57,5666,51],[6229,62,5666,17],[6229,63,5666,10],[6230,0,5667,9],[6232,0,5669,8],[6234,0,5671,6],[6234,17,5671,11],[6234,28,5671,6],[6235,0,5672,8],[6235,18,5672,12],[6235,23,5672,17,"tsCheckLineTerminatorAndMatch"],[6235,52,5672,12],[6235,53,5672,47,"types"],[6235,58,5672,52],[6235,59,5672,53,"name"],[6235,63,5672,12],[6235,65,5672,59,"next"],[6235,69,5672,12],[6235,70,5672,8],[6235,72,5672,66],[6236,0,5673,10],[6236,20,5673,14,"next"],[6236,24,5673,10],[6236,26,5673,20],[6236,31,5673,25,"next"],[6236,35,5673,20],[6237,0,5674,10],[6237,23,5674,17],[6237,28,5674,22,"tsParseInterfaceDeclaration"],[6237,55,5674,17],[6237,56,5674,50,"node"],[6237,60,5674,17],[6237,61,5674,10],[6238,0,5675,9],[6240,0,5677,8],[6242,0,5679,6],[6242,17,5679,11],[6242,25,5679,6],[6243,0,5680,8],[6243,18,5680,12,"next"],[6243,22,5680,8],[6243,24,5680,18],[6243,29,5680,23,"next"],[6243,33,5680,18],[6245,0,5682,8],[6245,18,5682,12],[6245,23,5682,17,"match"],[6245,28,5682,12],[6245,29,5682,23,"types"],[6245,34,5682,28],[6245,35,5682,29,"string"],[6245,41,5682,12],[6245,42,5682,8],[6245,44,5682,38],[6246,0,5683,10],[6246,23,5683,17],[6246,28,5683,22,"tsParseAmbientExternalModuleDeclaration"],[6246,67,5683,17],[6246,68,5683,62,"node"],[6246,72,5683,17],[6246,73,5683,10],[6247,0,5684,9],[6247,15,5682,8],[6247,21,5684,15],[6247,25,5684,19],[6247,30,5684,24,"tsCheckLineTerminatorAndMatch"],[6247,59,5684,19],[6247,60,5684,54,"types"],[6247,65,5684,59],[6247,66,5684,60,"name"],[6247,70,5684,19],[6247,72,5684,66,"next"],[6247,76,5684,19],[6247,77,5684,15],[6247,79,5684,73],[6248,0,5685,10],[6248,23,5685,17],[6248,28,5685,22,"tsParseModuleOrNamespaceDeclaration"],[6248,63,5685,17],[6248,64,5685,58,"node"],[6248,68,5685,17],[6248,69,5685,10],[6249,0,5686,9],[6251,0,5688,8],[6253,0,5690,6],[6253,17,5690,11],[6253,28,5690,6],[6254,0,5691,8],[6254,18,5691,12],[6254,23,5691,17,"tsCheckLineTerminatorAndMatch"],[6254,52,5691,12],[6254,53,5691,47,"types"],[6254,58,5691,52],[6254,59,5691,53,"name"],[6254,63,5691,12],[6254,65,5691,59,"next"],[6254,69,5691,12],[6254,70,5691,8],[6254,72,5691,66],[6255,0,5692,10],[6255,20,5692,14,"next"],[6255,24,5692,10],[6255,26,5692,20],[6255,31,5692,25,"next"],[6255,35,5692,20],[6256,0,5693,10],[6256,23,5693,17],[6256,28,5693,22,"tsParseModuleOrNamespaceDeclaration"],[6256,63,5693,17],[6256,64,5693,58,"node"],[6256,68,5693,17],[6256,69,5693,10],[6257,0,5694,9],[6259,0,5696,8],[6261,0,5698,6],[6261,17,5698,11],[6261,23,5698,6],[6262,0,5699,8],[6262,18,5699,12],[6262,23,5699,17,"tsCheckLineTerminatorAndMatch"],[6262,52,5699,12],[6262,53,5699,47,"types"],[6262,58,5699,52],[6262,59,5699,53,"name"],[6262,63,5699,12],[6262,65,5699,59,"next"],[6262,69,5699,12],[6262,70,5699,8],[6262,72,5699,66],[6263,0,5700,10],[6263,20,5700,14,"next"],[6263,24,5700,10],[6263,26,5700,20],[6263,31,5700,25,"next"],[6263,35,5700,20],[6264,0,5701,10],[6264,23,5701,17],[6264,28,5701,22,"tsParseTypeAliasDeclaration"],[6264,55,5701,17],[6264,56,5701,50,"node"],[6264,60,5701,17],[6264,61,5701,10],[6265,0,5702,9],[6267,0,5704,8],[6268,0,5644,4],[6269,0,5706,3],[6270,0,4465,28],[6271,0,4465,28],[6272,0,4465,28],[6272,54,5708,32,"tokenType"],[6272,63,4465,28],[6272,65,5708,43,"next"],[6272,69,4465,28],[6272,71,5708,49],[6273,0,5709,4],[6273,17,5709,11],[6273,18,5709,12,"next"],[6273,22,5709,16],[6273,26,5709,20],[6273,31,5709,25,"match"],[6273,36,5709,20],[6273,37,5709,31,"tokenType"],[6273,46,5709,20],[6273,47,5709,11],[6273,52,5709,46],[6273,53,5709,47],[6273,58,5709,52,"isLineTerminator"],[6273,74,5709,47],[6273,76,5709,4],[6274,0,5710,3],[6275,0,4465,28],[6276,0,4465,28],[6277,0,4465,28],[6277,60,5712,38,"startPos"],[6277,68,4465,28],[6277,70,5712,48,"startLoc"],[6277,78,4465,28],[6277,80,5712,58],[6278,0,5712,58],[6280,0,5713,4],[6280,14,5713,8],[6280,15,5713,9],[6280,20,5713,14,"isRelational"],[6280,32,5713,9],[6280,33,5713,27],[6280,36,5713,9],[6280,37,5713,4],[6280,39,5713,33],[6281,0,5714,6],[6281,19,5714,13,"undefined"],[6281,28,5714,6],[6282,0,5715,5],[6284,0,5717,4],[6284,14,5717,10,"res"],[6284,17,5717,13],[6284,20,5717,16],[6284,25,5717,21,"tsTryParseAndCatch"],[6284,43,5717,16],[6284,44,5717,40],[6284,56,5717,46],[6285,0,5718,6],[6285,16,5718,12,"node"],[6285,20,5718,16],[6285,23,5718,19],[6285,30,5718,23],[6285,31,5718,24,"startNodeAt"],[6285,42,5718,19],[6285,43,5718,36,"startPos"],[6285,51,5718,19],[6285,53,5718,46,"startLoc"],[6285,61,5718,19],[6285,62,5718,6],[6287,0,5719,6,"node"],[6287,12,5719,6,"node"],[6287,16,5719,10],[6287,17,5719,11,"typeParameters"],[6287,31,5719,6],[6287,34,5719,28],[6287,41,5719,32],[6287,42,5719,33,"tsParseTypeParameters"],[6287,63,5719,28],[6287,65,5719,6],[6289,0,5720,6],[6289,99,5720,32,"node"],[6289,103,5720,6],[6291,0,5721,6,"node"],[6291,12,5721,6,"node"],[6291,16,5721,10],[6291,17,5721,11,"returnType"],[6291,27,5721,6],[6291,30,5721,24],[6291,37,5721,28],[6291,38,5721,29,"tsTryParseTypeOrTypePredicateAnnotation"],[6291,77,5721,24],[6291,79,5721,6],[6293,0,5722,6],[6293,12,5722,6],[6293,19,5722,10],[6293,20,5722,11,"expect"],[6293,26,5722,6],[6293,27,5722,18,"types"],[6293,32,5722,23],[6293,33,5722,24,"arrow"],[6293,38,5722,6],[6295,0,5723,6],[6295,19,5723,13,"node"],[6295,23,5723,6],[6296,0,5724,5],[6296,11,5717,16],[6296,12,5717,4],[6298,0,5726,4],[6298,14,5726,8],[6298,15,5726,9,"res"],[6298,18,5726,4],[6298,20,5726,14],[6299,0,5727,6],[6299,19,5727,13,"undefined"],[6299,28,5727,6],[6300,0,5728,5],[6302,0,5730,4],[6302,17,5730,11],[6302,22,5730,16,"parseArrowExpression"],[6302,42,5730,11],[6302,43,5730,37,"res"],[6302,46,5730,11],[6302,48,5730,42],[6302,52,5730,11],[6302,54,5730,48],[6302,58,5730,11],[6302,59,5730,4],[6303,0,5731,3],[6304,0,4465,28],[6305,0,4465,28],[6306,0,4465,28],[6306,47,5733,25],[6307,0,5733,25],[6309,0,5734,4],[6309,14,5734,10,"node"],[6309,18,5734,14],[6309,21,5734,17],[6309,26,5734,22,"startNode"],[6309,35,5734,17],[6309,37,5734,4],[6310,0,5735,4,"node"],[6310,10,5735,4,"node"],[6310,14,5735,8],[6310,15,5735,9,"params"],[6310,21,5735,4],[6310,24,5735,18],[6310,29,5735,23,"tsInType"],[6310,37,5735,18],[6310,38,5735,32],[6311,0,5735,32],[6311,19,5735,38],[6311,26,5735,42],[6311,27,5735,43,"tsInNoContext"],[6311,40,5735,38],[6311,41,5735,57],[6311,53,5735,63],[6312,0,5736,6],[6312,14,5736,6],[6312,21,5736,10],[6312,22,5736,11,"expectRelational"],[6312,38,5736,6],[6312,39,5736,28],[6312,42,5736,6],[6314,0,5737,6],[6314,21,5737,13],[6314,28,5737,17],[6314,29,5737,18,"tsParseDelimitedList"],[6314,49,5737,13],[6314,50,5737,39],[6314,77,5737,13],[6314,79,5737,68],[6314,86,5737,72],[6314,87,5737,73,"tsParseType"],[6314,98,5737,68],[6314,99,5737,85,"bind"],[6314,103,5737,68],[6314,104,5737,90],[6314,111,5737,68],[6314,112,5737,13],[6314,113,5737,6],[6315,0,5738,5],[6315,13,5735,38],[6315,14,5735,32],[6316,0,5735,32],[6316,11,5735,18],[6316,12,5735,4],[6317,0,5739,4],[6317,15,5739,9,"state"],[6317,20,5739,4],[6317,21,5739,15,"exprAllowed"],[6317,32,5739,4],[6317,35,5739,29],[6317,40,5739,4],[6318,0,5740,4],[6318,15,5740,9,"expectRelational"],[6318,31,5740,4],[6318,32,5740,26],[6318,35,5740,4],[6319,0,5741,4],[6319,17,5741,11],[6319,22,5741,16,"finishNode"],[6319,32,5741,11],[6319,33,5741,27,"node"],[6319,37,5741,11],[6319,39,5741,33],[6319,69,5741,11],[6319,70,5741,4],[6320,0,5742,3],[6321,0,4465,28],[6322,0,4465,28],[6323,0,4465,28],[6323,47,5744,25],[6324,0,5745,4],[6324,14,5745,8],[6324,19,5745,13,"match"],[6324,24,5745,8],[6324,25,5745,19,"types"],[6324,30,5745,24],[6324,31,5745,25,"name"],[6324,35,5745,8],[6324,36,5745,4],[6324,38,5745,32],[6325,0,5746,6],[6325,20,5746,14],[6325,25,5746,19,"state"],[6325,30,5746,14],[6325,31,5746,25,"value"],[6325,36,5746,6],[6326,0,5747,8],[6326,19,5747,13],[6326,29,5747,8],[6327,0,5748,8],[6327,19,5748,13],[6327,28,5748,8],[6328,0,5749,8],[6328,19,5749,13],[6328,25,5749,8],[6329,0,5750,8],[6329,19,5750,13],[6329,30,5750,8],[6330,0,5751,8],[6330,19,5751,13],[6330,27,5751,8],[6331,0,5752,8],[6331,19,5752,13],[6331,30,5752,8],[6332,0,5753,8],[6332,19,5753,13],[6332,25,5753,8],[6333,0,5754,10],[6333,23,5754,17],[6333,27,5754,10],[6334,0,5746,6],[6335,0,5756,5],[6337,0,5758,4],[6337,17,5758,11],[6337,22,5758,4],[6338,0,5759,3],[6339,0,4465,28],[6340,0,4465,28],[6341,0,4465,28],[6341,51,5761,29],[6342,0,5762,4],[6342,14,5762,8],[6342,19,5762,13,"tsIsDeclarationStart"],[6342,39,5762,8],[6342,41,5762,4],[6342,43,5762,37],[6342,50,5762,44],[6342,55,5762,37],[6343,0,5763,4],[6344,0,5764,3],[6345,0,4465,28],[6346,0,4465,28],[6347,0,4465,28],[6347,48,5766,26,"allowModifiers"],[6347,62,4465,28],[6347,64,5766,42,"decorators"],[6347,74,4465,28],[6347,76,5766,54],[6348,0,5767,4],[6348,14,5767,10,"startPos"],[6348,22,5767,18],[6348,25,5767,21],[6348,30,5767,26,"state"],[6348,35,5767,21],[6348,36,5767,32,"start"],[6348,41,5767,4],[6349,0,5768,4],[6349,14,5768,10,"startLoc"],[6349,22,5768,18],[6349,25,5768,21],[6349,30,5768,26,"state"],[6349,35,5768,21],[6349,36,5768,32,"startLoc"],[6349,44,5768,4],[6350,0,5769,4],[6350,14,5769,8,"accessibility"],[6350,27,5769,4],[6351,0,5770,4],[6351,14,5770,8,"readonly"],[6351,22,5770,16],[6351,25,5770,19],[6351,30,5770,4],[6353,0,5772,4],[6353,14,5772,8,"allowModifiers"],[6353,28,5772,4],[6353,30,5772,24],[6354,0,5773,6,"accessibility"],[6354,12,5773,6,"accessibility"],[6354,25,5773,19],[6354,28,5773,22],[6354,33,5773,27,"parseAccessModifier"],[6354,52,5773,22],[6354,54,5773,6],[6355,0,5774,6,"readonly"],[6355,12,5774,6,"readonly"],[6355,20,5774,14],[6355,23,5774,17],[6355,24,5774,18],[6355,25,5774,19],[6355,30,5774,24,"tsParseModifier"],[6355,45,5774,19],[6355,46,5774,40],[6355,47,5774,41],[6355,57,5774,40],[6355,58,5774,19],[6355,59,5774,6],[6356,0,5775,5],[6358,0,5777,4],[6358,14,5777,10,"left"],[6358,18,5777,14],[6358,21,5777,17],[6358,26,5777,22,"parseMaybeDefault"],[6358,43,5777,17],[6358,45,5777,4],[6359,0,5778,4],[6359,15,5778,9,"parseAssignableListItemTypes"],[6359,43,5778,4],[6359,44,5778,38,"left"],[6359,48,5778,4],[6360,0,5779,4],[6360,14,5779,10,"elt"],[6360,17,5779,13],[6360,20,5779,16],[6360,25,5779,21,"parseMaybeDefault"],[6360,42,5779,16],[6360,43,5779,39,"left"],[6360,47,5779,43],[6360,48,5779,44,"start"],[6360,53,5779,16],[6360,55,5779,51,"left"],[6360,59,5779,55],[6360,60,5779,56,"loc"],[6360,63,5779,51],[6360,64,5779,60,"start"],[6360,69,5779,16],[6360,71,5779,67,"left"],[6360,75,5779,16],[6360,76,5779,4],[6362,0,5781,4],[6362,14,5781,8,"accessibility"],[6362,27,5781,21],[6362,31,5781,25,"readonly"],[6362,39,5781,4],[6362,41,5781,35],[6363,0,5782,6],[6363,16,5782,12,"pp"],[6363,18,5782,14],[6363,21,5782,17],[6363,26,5782,22,"startNodeAt"],[6363,37,5782,17],[6363,38,5782,34,"startPos"],[6363,46,5782,17],[6363,48,5782,44,"startLoc"],[6363,56,5782,17],[6363,57,5782,6],[6365,0,5784,6],[6365,16,5784,10,"decorators"],[6365,26,5784,20],[6365,27,5784,21,"length"],[6365,33,5784,6],[6365,35,5784,29],[6366,0,5785,8,"pp"],[6366,14,5785,8,"pp"],[6366,16,5785,10],[6366,17,5785,11,"decorators"],[6366,27,5785,8],[6366,30,5785,24,"decorators"],[6366,40,5785,8],[6367,0,5786,7],[6369,0,5788,6],[6369,16,5788,10,"accessibility"],[6369,29,5788,6],[6369,31,5788,25,"pp"],[6369,33,5788,27],[6369,34,5788,28,"accessibility"],[6369,47,5788,25],[6369,50,5788,44,"accessibility"],[6369,63,5788,25],[6370,0,5789,6],[6370,16,5789,10,"readonly"],[6370,24,5789,6],[6370,26,5789,20,"pp"],[6370,28,5789,22],[6370,29,5789,23,"readonly"],[6370,37,5789,20],[6370,40,5789,34,"readonly"],[6370,48,5789,20],[6372,0,5791,6],[6372,16,5791,10,"elt"],[6372,19,5791,13],[6372,20,5791,14,"type"],[6372,24,5791,10],[6372,29,5791,23],[6372,41,5791,10],[6372,45,5791,39,"elt"],[6372,48,5791,42],[6372,49,5791,43,"type"],[6372,53,5791,39],[6372,58,5791,52],[6372,77,5791,6],[6372,79,5791,73],[6373,0,5792,8],[6373,19,5792,13,"raise"],[6373,24,5792,8],[6373,25,5792,19,"pp"],[6373,27,5792,21],[6373,28,5792,22,"start"],[6373,33,5792,8],[6373,35,5792,29],[6373,102,5792,8],[6374,0,5793,7],[6376,0,5795,6,"pp"],[6376,12,5795,6,"pp"],[6376,14,5795,8],[6376,15,5795,9,"parameter"],[6376,24,5795,6],[6376,27,5795,21,"elt"],[6376,30,5795,6],[6377,0,5796,6],[6377,19,5796,13],[6377,24,5796,18,"finishNode"],[6377,34,5796,13],[6377,35,5796,29,"pp"],[6377,37,5796,13],[6377,39,5796,33],[6377,60,5796,13],[6377,61,5796,6],[6378,0,5797,5],[6380,0,5799,4],[6380,14,5799,8,"decorators"],[6380,24,5799,18],[6380,25,5799,19,"length"],[6380,31,5799,4],[6380,33,5799,27],[6381,0,5800,6,"left"],[6381,12,5800,6,"left"],[6381,16,5800,10],[6381,17,5800,11,"decorators"],[6381,27,5800,6],[6381,30,5800,24,"decorators"],[6381,40,5800,6],[6382,0,5801,5],[6384,0,5803,4],[6384,17,5803,11,"elt"],[6384,20,5803,4],[6385,0,5804,3],[6386,0,4465,28],[6387,0,4465,28],[6388,0,4465,28],[6388,51,5806,29,"node"],[6388,55,4465,28],[6388,57,5806,35,"type"],[6388,61,4465,28],[6388,63,5806,59],[6389,0,5806,59],[6389,14,5806,41,"isMethod"],[6389,22,5806,59],[6389,93,5806,52],[6389,98,5806,59],[6391,0,5807,4],[6391,14,5807,8],[6391,19,5807,13,"match"],[6391,24,5807,8],[6391,25,5807,19,"types"],[6391,30,5807,24],[6391,31,5807,25,"colon"],[6391,36,5807,8],[6391,37,5807,4],[6391,39,5807,33],[6392,0,5808,6,"node"],[6392,12,5808,6,"node"],[6392,16,5808,10],[6392,17,5808,11,"returnType"],[6392,27,5808,6],[6392,30,5808,24],[6392,35,5808,29,"tsParseTypeOrTypePredicateAnnotation"],[6392,71,5808,24],[6392,72,5808,66,"types"],[6392,77,5808,71],[6392,78,5808,72,"colon"],[6392,83,5808,24],[6392,84,5808,6],[6393,0,5809,5],[6395,0,5811,4],[6395,14,5811,10,"bodilessType"],[6395,26,5811,22],[6395,29,5811,25,"type"],[6395,33,5811,29],[6395,38,5811,34],[6395,59,5811,25],[6395,62,5811,58],[6395,81,5811,25],[6395,84,5811,80,"type"],[6395,88,5811,84],[6395,93,5811,89],[6395,106,5811,80],[6395,109,5811,105],[6395,126,5811,80],[6395,129,5811,125,"undefined"],[6395,138,5811,4],[6397,0,5813,4],[6397,14,5813,8,"bodilessType"],[6397,26,5813,20],[6397,30,5813,24],[6397,31,5813,25],[6397,36,5813,30,"match"],[6397,41,5813,25],[6397,42,5813,36,"types"],[6397,47,5813,41],[6397,48,5813,42,"braceL"],[6397,54,5813,25],[6397,55,5813,8],[6397,59,5813,53],[6397,64,5813,58,"isLineTerminator"],[6397,80,5813,53],[6397,82,5813,4],[6397,84,5813,78],[6398,0,5814,6],[6398,17,5814,11,"finishNode"],[6398,27,5814,6],[6398,28,5814,22,"node"],[6398,32,5814,6],[6398,34,5814,28,"bodilessType"],[6398,46,5814,6],[6399,0,5815,6],[6400,0,5816,5],[6402,0,5818,4],[6402,98,5818,37,"node"],[6402,102,5818,4],[6402,104,5818,43,"type"],[6402,108,5818,4],[6402,110,5818,49,"isMethod"],[6402,118,5818,4],[6403,0,5819,3],[6404,0,4465,28],[6405,0,4465,28],[6406,0,4465,28],[6406,52,5821,30,"node"],[6406,56,4465,28],[6406,58,5821,36],[6407,0,5822,4],[6407,14,5822,8],[6407,15,5822,9,"node"],[6407,19,5822,13],[6407,20,5822,14,"body"],[6407,24,5822,8],[6407,28,5822,22,"node"],[6407,32,5822,26],[6407,33,5822,27,"id"],[6407,35,5822,4],[6407,37,5822,31],[6408,0,5823,6],[6408,17,5823,11,"checkLVal"],[6408,26,5823,6],[6408,27,5823,21,"node"],[6408,31,5823,25],[6408,32,5823,26,"id"],[6408,34,5823,6],[6408,36,5823,30,"BIND_TS_AMBIENT"],[6408,51,5823,6],[6408,53,5823,47],[6408,57,5823,6],[6408,59,5823,53],[6408,74,5823,6],[6409,0,5824,5],[6409,11,5822,4],[6409,17,5824,11],[6410,0,5825,6],[6410,102,5825,43,"arguments"],[6410,111,5825,6],[6411,0,5826,5],[6412,0,5827,3],[6413,0,4465,28],[6414,0,4465,28],[6415,0,4465,28],[6415,39,5829,17,"base"],[6415,43,4465,28],[6415,45,5829,23,"startPos"],[6415,53,4465,28],[6415,55,5829,33,"startLoc"],[6415,63,4465,28],[6415,65,5829,43,"noCalls"],[6415,72,4465,28],[6415,74,5829,52,"state"],[6415,79,4465,28],[6415,81,5829,59],[6416,0,5829,59],[6418,0,5830,4],[6418,14,5830,8],[6418,15,5830,9],[6418,20,5830,14,"hasPrecedingLineBreak"],[6418,41,5830,9],[6418,43,5830,8],[6418,47,5830,41],[6418,52,5830,46,"match"],[6418,57,5830,41],[6418,58,5830,52,"types"],[6418,63,5830,57],[6418,64,5830,58,"bang"],[6418,68,5830,41],[6418,69,5830,4],[6418,71,5830,65],[6419,0,5831,6],[6419,17,5831,11,"state"],[6419,22,5831,6],[6419,23,5831,17,"exprAllowed"],[6419,34,5831,6],[6419,37,5831,31],[6419,42,5831,6],[6420,0,5832,6],[6420,17,5832,11,"next"],[6420,21,5832,6],[6421,0,5833,6],[6421,16,5833,12,"nonNullExpression"],[6421,33,5833,29],[6421,36,5833,32],[6421,41,5833,37,"startNodeAt"],[6421,52,5833,32],[6421,53,5833,49,"startPos"],[6421,61,5833,32],[6421,63,5833,59,"startLoc"],[6421,71,5833,32],[6421,72,5833,6],[6422,0,5834,6,"nonNullExpression"],[6422,12,5834,6,"nonNullExpression"],[6422,29,5834,23],[6422,30,5834,24,"expression"],[6422,40,5834,6],[6422,43,5834,37,"base"],[6422,47,5834,6],[6423,0,5835,6],[6423,19,5835,13],[6423,24,5835,18,"finishNode"],[6423,34,5835,13],[6423,35,5835,29,"nonNullExpression"],[6423,52,5835,13],[6423,54,5835,48],[6423,75,5835,13],[6423,76,5835,6],[6424,0,5836,5],[6426,0,5838,4],[6426,14,5838,8],[6426,19,5838,13,"isRelational"],[6426,31,5838,8],[6426,32,5838,26],[6426,35,5838,8],[6426,36,5838,4],[6426,38,5838,32],[6427,0,5839,6],[6427,16,5839,12,"result"],[6427,22,5839,18],[6427,25,5839,21],[6427,30,5839,26,"tsTryParseAndCatch"],[6427,48,5839,21],[6427,49,5839,45],[6427,61,5839,51],[6428,0,5840,8],[6428,18,5840,12],[6428,19,5840,13,"noCalls"],[6428,26,5840,12],[6428,30,5840,24],[6428,37,5840,28],[6428,38,5840,29,"atPossibleAsync"],[6428,53,5840,24],[6428,54,5840,45,"base"],[6428,58,5840,24],[6428,59,5840,8],[6428,61,5840,52],[6429,0,5841,10],[6429,20,5841,16,"asyncArrowFn"],[6429,32,5841,28],[6429,35,5841,31],[6429,42,5841,35],[6429,43,5841,36,"tsTryParseGenericAsyncArrowFunction"],[6429,78,5841,31],[6429,79,5841,72,"startPos"],[6429,87,5841,31],[6429,89,5841,82,"startLoc"],[6429,97,5841,31],[6429,98,5841,10],[6431,0,5843,10],[6431,20,5843,14,"asyncArrowFn"],[6431,32,5843,10],[6431,34,5843,28],[6432,0,5844,12],[6432,25,5844,19,"asyncArrowFn"],[6432,37,5844,12],[6433,0,5845,11],[6434,0,5846,9],[6436,0,5848,8],[6436,18,5848,14,"node"],[6436,22,5848,18],[6436,25,5848,21],[6436,32,5848,25],[6436,33,5848,26,"startNodeAt"],[6436,44,5848,21],[6436,45,5848,38,"startPos"],[6436,53,5848,21],[6436,55,5848,48,"startLoc"],[6436,63,5848,21],[6436,64,5848,8],[6438,0,5849,8,"node"],[6438,14,5849,8,"node"],[6438,18,5849,12],[6438,19,5849,13,"callee"],[6438,25,5849,8],[6438,28,5849,22,"base"],[6438,32,5849,8],[6440,0,5850,8],[6440,18,5850,14,"typeArguments"],[6440,31,5850,27],[6440,34,5850,30],[6440,41,5850,34],[6440,42,5850,35,"tsParseTypeArguments"],[6440,62,5850,30],[6440,64,5850,8],[6442,0,5852,8],[6442,18,5852,12,"typeArguments"],[6442,31,5852,8],[6442,33,5852,27],[6443,0,5853,10],[6443,20,5853,14],[6443,21,5853,15,"noCalls"],[6443,28,5853,14],[6443,32,5853,26],[6443,39,5853,30],[6443,40,5853,31,"eat"],[6443,43,5853,26],[6443,44,5853,35,"types"],[6443,49,5853,40],[6443,50,5853,41,"parenL"],[6443,56,5853,26],[6443,57,5853,10],[6443,59,5853,50],[6444,0,5854,12,"node"],[6444,18,5854,12,"node"],[6444,22,5854,16],[6444,23,5854,17,"arguments"],[6444,32,5854,12],[6444,35,5854,29],[6444,42,5854,33],[6444,43,5854,34,"parseCallExpressionArguments"],[6444,71,5854,29],[6444,72,5854,63,"types"],[6444,77,5854,68],[6444,78,5854,69,"parenR"],[6444,84,5854,29],[6444,86,5854,77],[6444,91,5854,29],[6444,92,5854,12],[6445,0,5855,12,"node"],[6445,18,5855,12,"node"],[6445,22,5855,16],[6445,23,5855,17,"typeParameters"],[6445,37,5855,12],[6445,40,5855,34,"typeArguments"],[6445,53,5855,12],[6446,0,5856,12],[6446,25,5856,19],[6446,32,5856,23],[6446,33,5856,24,"finishCallExpression"],[6446,53,5856,19],[6446,54,5856,45,"node"],[6446,58,5856,19],[6446,60,5856,51,"state"],[6446,65,5856,56],[6446,66,5856,57,"optionalChainMember"],[6446,85,5856,19],[6446,86,5856,12],[6447,0,5857,11],[6447,17,5853,10],[6447,23,5857,17],[6447,27,5857,21],[6447,34,5857,25],[6447,35,5857,26,"match"],[6447,40,5857,21],[6447,41,5857,32,"types"],[6447,46,5857,37],[6447,47,5857,38,"backQuote"],[6447,56,5857,21],[6447,57,5857,17],[6447,59,5857,50],[6448,0,5858,12],[6448,25,5858,19],[6448,32,5858,23],[6448,33,5858,24,"parseTaggedTemplateExpression"],[6448,62,5858,19],[6448,63,5858,54,"startPos"],[6448,71,5858,19],[6448,73,5858,64,"startLoc"],[6448,81,5858,19],[6448,83,5858,74,"base"],[6448,87,5858,19],[6448,89,5858,80,"state"],[6448,94,5858,19],[6448,96,5858,87,"typeArguments"],[6448,109,5858,19],[6448,110,5858,12],[6449,0,5859,11],[6450,0,5860,9],[6452,0,5862,8],[6452,14,5862,8],[6452,21,5862,12],[6452,22,5862,13,"unexpected"],[6452,32,5862,8],[6453,0,5863,7],[6453,13,5839,21],[6453,14,5839,6],[6454,0,5864,6],[6454,16,5864,10,"result"],[6454,22,5864,6],[6454,24,5864,18],[6454,31,5864,25,"result"],[6454,37,5864,18],[6455,0,5865,5],[6457,0,5867,4],[6457,93,5867,32,"base"],[6457,97,5867,4],[6457,99,5867,38,"startPos"],[6457,107,5867,4],[6457,109,5867,48,"startLoc"],[6457,117,5867,4],[6457,119,5867,58,"noCalls"],[6457,126,5867,4],[6457,128,5867,67,"state"],[6457,133,5867,4],[6458,0,5868,3],[6459,0,4465,28],[6460,0,4465,28],[6461,0,4465,28],[6461,42,5870,20,"node"],[6461,46,4465,28],[6461,48,5870,26],[6462,0,5870,26],[6464,0,5871,4],[6464,14,5871,8],[6464,19,5871,13,"isRelational"],[6464,31,5871,8],[6464,32,5871,26],[6464,35,5871,8],[6464,36,5871,4],[6464,38,5871,32],[6465,0,5872,6],[6465,16,5872,12,"typeParameters"],[6465,30,5872,26],[6465,33,5872,29],[6465,38,5872,34,"tsTryParseAndCatch"],[6465,56,5872,29],[6465,57,5872,53],[6465,69,5872,59],[6466,0,5873,8],[6466,18,5873,14,"args"],[6466,22,5873,18],[6466,25,5873,21],[6466,32,5873,25],[6466,33,5873,26,"tsParseTypeArguments"],[6466,53,5873,21],[6466,55,5873,8],[6468,0,5874,8],[6468,18,5874,12],[6468,19,5874,13],[6468,26,5874,17],[6468,27,5874,18,"match"],[6468,32,5874,13],[6468,33,5874,24,"types"],[6468,38,5874,29],[6468,39,5874,30,"parenL"],[6468,45,5874,13],[6468,46,5874,8],[6468,48,5874,39],[6468,55,5874,43],[6468,56,5874,44,"unexpected"],[6468,66,5874,39],[6469,0,5875,8],[6469,21,5875,15,"args"],[6469,25,5875,8],[6470,0,5876,7],[6470,13,5872,29],[6470,14,5872,6],[6472,0,5878,6],[6472,16,5878,10,"typeParameters"],[6472,30,5878,6],[6472,32,5878,26],[6473,0,5879,8,"node"],[6473,14,5879,8,"node"],[6473,18,5879,12],[6473,19,5879,13,"typeParameters"],[6473,33,5879,8],[6473,36,5879,30,"typeParameters"],[6473,50,5879,8],[6474,0,5880,7],[6475,0,5881,5],[6477,0,5883,4],[6477,89,5883,28,"node"],[6477,93,5883,4],[6478,0,5884,3],[6479,0,4465,28],[6480,0,4465,28],[6481,0,4465,28],[6481,36,5886,14,"left"],[6481,40,4465,28],[6481,42,5886,20,"leftStartPos"],[6481,54,4465,28],[6481,56,5886,34,"leftStartLoc"],[6481,68,4465,28],[6481,70,5886,48,"minPrec"],[6481,77,4465,28],[6481,79,5886,57,"noIn"],[6481,83,4465,28],[6481,85,5886,63],[6482,0,5887,4],[6482,14,5887,8,"nonNull"],[6482,21,5887,15],[6482,22,5887,16,"types"],[6482,27,5887,21],[6482,28,5887,22,"_in"],[6482,31,5887,16],[6482,32,5887,26,"binop"],[6482,37,5887,15],[6482,38,5887,8],[6482,41,5887,35,"minPrec"],[6482,48,5887,8],[6482,52,5887,46],[6482,53,5887,47],[6482,58,5887,52,"hasPrecedingLineBreak"],[6482,79,5887,47],[6482,81,5887,8],[6482,85,5887,79],[6482,90,5887,84,"isContextual"],[6482,102,5887,79],[6482,103,5887,97],[6482,107,5887,79],[6482,108,5887,4],[6482,110,5887,104],[6483,0,5888,6],[6483,16,5888,12,"node"],[6483,20,5888,16],[6483,23,5888,19],[6483,28,5888,24,"startNodeAt"],[6483,39,5888,19],[6483,40,5888,36,"leftStartPos"],[6483,52,5888,19],[6483,54,5888,50,"leftStartLoc"],[6483,66,5888,19],[6483,67,5888,6],[6484,0,5889,6,"node"],[6484,12,5889,6,"node"],[6484,16,5889,10],[6484,17,5889,11,"expression"],[6484,27,5889,6],[6484,30,5889,24,"left"],[6484,34,5889,6],[6486,0,5891,6],[6486,16,5891,12,"_const"],[6486,22,5891,18],[6486,25,5891,21],[6486,30,5891,26,"tsTryNextParseConstantContext"],[6486,59,5891,21],[6486,61,5891,6],[6488,0,5893,6],[6488,16,5893,10,"_const"],[6488,22,5893,6],[6488,24,5893,18],[6489,0,5894,8,"node"],[6489,14,5894,8,"node"],[6489,18,5894,12],[6489,19,5894,13,"typeAnnotation"],[6489,33,5894,8],[6489,36,5894,30,"_const"],[6489,42,5894,8],[6490,0,5895,7],[6490,13,5893,6],[6490,19,5895,13],[6491,0,5896,8,"node"],[6491,14,5896,8,"node"],[6491,18,5896,12],[6491,19,5896,13,"typeAnnotation"],[6491,33,5896,8],[6491,36,5896,30],[6491,41,5896,35,"tsNextThenParseType"],[6491,60,5896,30],[6491,62,5896,8],[6492,0,5897,7],[6494,0,5899,6],[6494,17,5899,11,"finishNode"],[6494,27,5899,6],[6494,28,5899,22,"node"],[6494,32,5899,6],[6494,34,5899,28],[6494,50,5899,6],[6495,0,5900,6],[6495,19,5900,13],[6495,24,5900,18,"parseExprOp"],[6495,35,5900,13],[6495,36,5900,30,"node"],[6495,40,5900,13],[6495,42,5900,36,"leftStartPos"],[6495,54,5900,13],[6495,56,5900,50,"leftStartLoc"],[6495,68,5900,13],[6495,70,5900,64,"minPrec"],[6495,77,5900,13],[6495,79,5900,73,"noIn"],[6495,83,5900,13],[6495,84,5900,6],[6496,0,5901,5],[6498,0,5903,4],[6498,90,5903,29,"left"],[6498,94,5903,4],[6498,96,5903,35,"leftStartPos"],[6498,108,5903,4],[6498,110,5903,49,"leftStartLoc"],[6498,122,5903,4],[6498,124,5903,63,"minPrec"],[6498,131,5903,4],[6498,133,5903,72,"noIn"],[6498,137,5903,4],[6499,0,5904,3],[6500,0,4465,28],[6501,0,4465,28],[6502,0,4465,28],[6502,42,5906,20,"word"],[6502,46,4465,28],[6502,48,5906,26,"startLoc"],[6502,56,4465,28],[6502,58,5906,36,"checkKeywords"],[6502,71,4465,28],[6502,73,5906,51,"isBinding"],[6502,82,4465,28],[6502,84,5906,62],[6502,85,5906,64],[6503,0,4465,28],[6504,0,4465,28],[6505,0,4465,28],[6505,48,5908,26],[6505,49,5908,28],[6506,0,4465,28],[6507,0,4465,28],[6508,0,4465,28],[6508,36,5910,14,"node"],[6508,40,4465,28],[6508,42,5910,20],[6509,0,5911,4],[6509,14,5911,8],[6509,19,5911,13,"match"],[6509,24,5911,8],[6509,25,5911,19,"types"],[6509,30,5911,24],[6509,31,5911,25,"name"],[6509,35,5911,8],[6509,40,5911,34],[6509,45,5911,39,"lookahead"],[6509,54,5911,34],[6509,57,5911,51,"type"],[6509,61,5911,34],[6509,66,5911,60,"types"],[6509,71,5911,65],[6509,72,5911,66,"eq"],[6509,74,5911,4],[6509,76,5911,70],[6510,0,5912,6],[6510,19,5912,13],[6510,24,5912,18,"tsParseImportEqualsDeclaration"],[6510,54,5912,13],[6510,55,5912,49,"node"],[6510,59,5912,13],[6510,60,5912,6],[6511,0,5913,5],[6513,0,5915,4],[6513,90,5915,29,"node"],[6513,94,5915,4],[6514,0,5916,3],[6515,0,4465,28],[6516,0,4465,28],[6517,0,4465,28],[6517,36,5918,14,"node"],[6517,40,4465,28],[6517,42,5918,20],[6518,0,5919,4],[6518,14,5919,8],[6518,19,5919,13,"match"],[6518,24,5919,8],[6518,25,5919,19,"types"],[6518,30,5919,24],[6518,31,5919,25,"_import"],[6518,38,5919,8],[6518,39,5919,4],[6518,41,5919,35],[6519,0,5920,6],[6519,17,5920,11,"expect"],[6519,23,5920,6],[6519,24,5920,18,"types"],[6519,29,5920,23],[6519,30,5920,24,"_import"],[6519,37,5920,6],[6520,0,5921,6],[6520,19,5921,13],[6520,24,5921,18,"tsParseImportEqualsDeclaration"],[6520,54,5921,13],[6520,55,5921,49,"node"],[6520,59,5921,13],[6520,61,5921,55],[6520,65,5921,13],[6520,66,5921,6],[6521,0,5922,5],[6521,11,5919,4],[6521,17,5922,11],[6521,21,5922,15],[6521,26,5922,20,"eat"],[6521,29,5922,15],[6521,30,5922,24,"types"],[6521,35,5922,29],[6521,36,5922,30,"eq"],[6521,38,5922,15],[6521,39,5922,11],[6521,41,5922,35],[6522,0,5923,6],[6522,16,5923,12,"assign"],[6522,22,5923,18],[6522,25,5923,21,"node"],[6522,29,5923,6],[6523,0,5924,6,"assign"],[6523,12,5924,6,"assign"],[6523,18,5924,12],[6523,19,5924,13,"expression"],[6523,29,5924,6],[6523,32,5924,26],[6523,37,5924,31,"parseExpression"],[6523,52,5924,26],[6523,54,5924,6],[6524,0,5925,6],[6524,17,5925,11,"semicolon"],[6524,26,5925,6],[6525,0,5926,6],[6525,19,5926,13],[6525,24,5926,18,"finishNode"],[6525,34,5926,13],[6525,35,5926,29,"assign"],[6525,41,5926,13],[6525,43,5926,37],[6525,63,5926,13],[6525,64,5926,6],[6526,0,5927,5],[6526,11,5922,11],[6526,17,5927,11],[6526,21,5927,15],[6526,26,5927,20,"eatContextual"],[6526,39,5927,15],[6526,40,5927,34],[6526,44,5927,15],[6526,45,5927,11],[6526,47,5927,41],[6527,0,5928,6],[6527,16,5928,12,"decl"],[6527,20,5928,16],[6527,23,5928,19,"node"],[6527,27,5928,6],[6528,0,5929,6],[6528,17,5929,11,"expectContextual"],[6528,33,5929,6],[6528,34,5929,28],[6528,45,5929,6],[6529,0,5930,6,"decl"],[6529,12,5930,6,"decl"],[6529,16,5930,10],[6529,17,5930,11,"id"],[6529,19,5930,6],[6529,22,5930,16],[6529,27,5930,21,"parseIdentifier"],[6529,42,5930,16],[6529,44,5930,6],[6530,0,5931,6],[6530,17,5931,11,"semicolon"],[6530,26,5931,6],[6531,0,5932,6],[6531,19,5932,13],[6531,24,5932,18,"finishNode"],[6531,34,5932,13],[6531,35,5932,29,"decl"],[6531,39,5932,13],[6531,41,5932,35],[6531,71,5932,13],[6531,72,5932,6],[6532,0,5933,5],[6532,11,5927,11],[6532,17,5933,11],[6533,0,5934,6],[6533,92,5934,31,"node"],[6533,96,5934,6],[6534,0,5935,5],[6535,0,5936,3],[6536,0,4465,28],[6537,0,4465,28],[6538,0,4465,28],[6538,42,5938,20],[6539,0,5939,4],[6539,17,5939,11],[6539,22,5939,16,"isContextual"],[6539,34,5939,11],[6539,35,5939,29],[6539,45,5939,11],[6539,50,5939,44],[6539,55,5939,49,"lookahead"],[6539,64,5939,44],[6539,67,5939,61,"type"],[6539,71,5939,44],[6539,76,5939,70,"types"],[6539,81,5939,75],[6539,82,5939,76,"_class"],[6539,88,5939,4],[6540,0,5940,3],[6541,0,4465,28],[6542,0,4465,28],[6543,0,4465,28],[6543,55,5942,33],[6544,0,5943,4],[6544,14,5943,8],[6544,19,5943,13,"isAbstractClass"],[6544,34,5943,8],[6544,36,5943,4],[6544,38,5943,32],[6545,0,5944,6],[6545,16,5944,12,"cls"],[6545,19,5944,15],[6545,22,5944,18],[6545,27,5944,23,"startNode"],[6545,36,5944,18],[6545,38,5944,6],[6546,0,5945,6],[6546,17,5945,11,"next"],[6546,21,5945,6],[6547,0,5946,6],[6547,17,5946,11,"parseClass"],[6547,27,5946,6],[6547,28,5946,22,"cls"],[6547,31,5946,6],[6547,33,5946,27],[6547,37,5946,6],[6547,39,5946,33],[6547,43,5946,6],[6548,0,5947,6,"cls"],[6548,12,5947,6,"cls"],[6548,15,5947,9],[6548,16,5947,10,"abstract"],[6548,24,5947,6],[6548,27,5947,21],[6548,31,5947,6],[6549,0,5948,6],[6549,19,5948,13,"cls"],[6549,22,5948,6],[6550,0,5949,5],[6552,0,5951,4],[6552,14,5951,8],[6552,19,5951,13,"state"],[6552,24,5951,8],[6552,25,5951,19,"value"],[6552,30,5951,8],[6552,35,5951,29],[6552,46,5951,4],[6552,48,5951,42],[6553,0,5952,6],[6553,16,5952,12,"result"],[6553,22,5952,18],[6553,25,5952,21],[6553,30,5952,26,"tsParseDeclaration"],[6553,48,5952,21],[6553,49,5952,45],[6553,54,5952,50,"startNode"],[6553,63,5952,45],[6553,65,5952,21],[6553,67,5952,63],[6553,72,5952,68,"state"],[6553,77,5952,63],[6553,78,5952,74,"value"],[6553,83,5952,21],[6553,85,5952,81],[6553,89,5952,21],[6553,90,5952,6],[6554,0,5953,6],[6554,16,5953,10,"result"],[6554,22,5953,6],[6554,24,5953,18],[6554,31,5953,25,"result"],[6554,37,5953,18],[6555,0,5954,5],[6557,0,5956,4],[6558,0,5957,3],[6559,0,4465,28],[6560,0,4465,28],[6561,0,4465,28],[6561,46,5959,24,"context"],[6561,53,4465,28],[6561,55,5959,33,"topLevel"],[6561,63,4465,28],[6561,65,5959,43],[6562,0,5960,4],[6562,14,5960,8],[6562,19,5960,13,"state"],[6562,24,5960,8],[6562,25,5960,19,"type"],[6562,29,5960,8],[6562,34,5960,28,"types"],[6562,39,5960,33],[6562,40,5960,34,"_const"],[6562,46,5960,4],[6562,48,5960,42],[6563,0,5961,6],[6563,16,5961,12,"ahead"],[6563,21,5961,17],[6563,24,5961,20],[6563,29,5961,25,"lookahead"],[6563,38,5961,20],[6563,40,5961,6],[6565,0,5963,6],[6565,16,5963,10,"ahead"],[6565,21,5963,15],[6565,22,5963,16,"type"],[6565,26,5963,10],[6565,31,5963,25,"types"],[6565,36,5963,30],[6565,37,5963,31,"name"],[6565,41,5963,10],[6565,45,5963,39,"ahead"],[6565,50,5963,44],[6565,51,5963,45,"value"],[6565,56,5963,39],[6565,61,5963,55],[6565,67,5963,6],[6565,69,5963,63],[6566,0,5964,8],[6566,18,5964,14,"node"],[6566,22,5964,18],[6566,25,5964,21],[6566,30,5964,26,"startNode"],[6566,39,5964,21],[6566,41,5964,8],[6567,0,5965,8],[6567,19,5965,13,"expect"],[6567,25,5965,8],[6567,26,5965,20,"types"],[6567,31,5965,25],[6567,32,5965,26,"_const"],[6567,38,5965,8],[6568,0,5966,8],[6568,19,5966,13,"expectContextual"],[6568,35,5966,8],[6568,36,5966,30],[6568,42,5966,8],[6569,0,5967,8],[6569,21,5967,15],[6569,26,5967,20,"tsParseEnumDeclaration"],[6569,48,5967,15],[6569,49,5967,43,"node"],[6569,53,5967,15],[6569,55,5967,49],[6569,59,5967,15],[6569,60,5967,8],[6570,0,5968,7],[6571,0,5969,5],[6573,0,5971,4],[6573,100,5971,39,"context"],[6573,107,5971,4],[6573,109,5971,48,"topLevel"],[6573,117,5971,4],[6574,0,5972,3],[6575,0,4465,28],[6576,0,4465,28],[6577,0,4465,28],[6577,46,5974,24],[6578,0,5975,4],[6578,17,5975,11],[6578,22,5975,16,"tsParseModifier"],[6578,37,5975,11],[6578,38,5975,32],[6578,39,5975,33],[6578,47,5975,32],[6578,49,5975,43],[6578,60,5975,32],[6578,62,5975,56],[6578,71,5975,32],[6578,72,5975,11],[6578,73,5975,4],[6579,0,5976,3],[6580,0,4465,28],[6581,0,4465,28],[6582,0,4465,28],[6582,41,5978,19,"classBody"],[6582,50,4465,28],[6582,52,5978,30,"member"],[6582,58,4465,28],[6582,60,5978,38,"state"],[6582,65,4465,28],[6582,67,5978,45,"constructorAllowsSuper"],[6582,89,4465,28],[6582,91,5978,69],[6583,0,5979,4],[6583,14,5979,10,"accessibility"],[6583,27,5979,23],[6583,30,5979,26],[6583,35,5979,31,"parseAccessModifier"],[6583,54,5979,26],[6583,56,5979,4],[6584,0,5980,4],[6584,14,5980,8,"accessibility"],[6584,27,5980,4],[6584,29,5980,23,"member"],[6584,35,5980,29],[6584,36,5980,30,"accessibility"],[6584,49,5980,23],[6584,52,5980,46,"accessibility"],[6584,65,5980,23],[6586,0,5981,4],[6586,88,5981,27,"classBody"],[6586,97,5981,4],[6586,99,5981,38,"member"],[6586,105,5981,4],[6586,107,5981,46,"state"],[6586,112,5981,4],[6586,114,5981,53,"constructorAllowsSuper"],[6586,136,5981,4],[6587,0,5982,3],[6588,0,4465,28],[6589,0,4465,28],[6590,0,4465,28],[6590,53,5984,31,"classBody"],[6590,62,4465,28],[6590,64,5984,42,"member"],[6590,70,4465,28],[6590,72,5984,50,"state"],[6590,77,4465,28],[6590,79,5984,57,"isStatic"],[6590,87,4465,28],[6590,89,5984,67,"constructorAllowsSuper"],[6590,111,4465,28],[6590,113,5984,91],[6591,0,5985,4],[6591,14,5985,10,"modifiers"],[6591,23,5985,19],[6591,26,5985,22],[6591,31,5985,27,"tsParseModifiers"],[6591,47,5985,22],[6591,48,5985,44],[6591,49,5985,45],[6591,59,5985,44],[6591,61,5985,57],[6591,71,5985,44],[6591,73,5985,69],[6591,82,5985,44],[6591,83,5985,22],[6591,84,5985,4],[6593,0,5986,4],[6593,19,5986,18,"member"],[6593,25,5986,4],[6593,27,5986,26,"modifiers"],[6593,36,5986,4],[6595,0,5987,4],[6595,14,5987,10,"idx"],[6595,17,5987,13],[6595,20,5987,16],[6595,25,5987,21,"tsTryParseIndexSignature"],[6595,49,5987,16],[6595,50,5987,46,"member"],[6595,56,5987,16],[6595,57,5987,4],[6597,0,5989,4],[6597,14,5989,8,"idx"],[6597,17,5989,4],[6597,19,5989,13],[6598,0,5990,6,"classBody"],[6598,12,5990,6,"classBody"],[6598,21,5990,15],[6598,22,5990,16,"body"],[6598,26,5990,6],[6598,27,5990,21,"push"],[6598,31,5990,6],[6598,32,5990,26,"idx"],[6598,35,5990,6],[6600,0,5992,6],[6600,16,5992,10,"modifiers"],[6600,25,5992,19],[6600,26,5992,20,"abstract"],[6600,34,5992,6],[6600,36,5992,30],[6601,0,5993,8],[6601,19,5993,13,"raise"],[6601,24,5993,8],[6601,25,5993,19,"member"],[6601,31,5993,25],[6601,32,5993,26,"start"],[6601,37,5993,8],[6601,39,5993,33],[6601,93,5993,8],[6602,0,5994,7],[6604,0,5996,6],[6604,16,5996,10,"isStatic"],[6604,24,5996,6],[6604,26,5996,20],[6605,0,5997,8],[6605,19,5997,13,"raise"],[6605,24,5997,8],[6605,25,5997,19,"member"],[6605,31,5997,25],[6605,32,5997,26,"start"],[6605,37,5997,8],[6605,39,5997,33],[6605,91,5997,8],[6606,0,5998,7],[6608,0,6000,6],[6608,16,6000,10,"member"],[6608,22,6000,16],[6608,23,6000,17,"accessibility"],[6608,36,6000,6],[6608,38,6000,32],[6609,0,6001,8],[6609,19,6001,13,"raise"],[6609,24,6001,8],[6609,25,6001,19,"member"],[6609,31,6001,25],[6609,32,6001,26,"start"],[6609,37,6001,8],[6609,101,6001,93,"member"],[6609,107,6001,99],[6609,108,6001,100,"accessibility"],[6609,121,6001,8],[6610,0,6002,7],[6612,0,6004,6],[6613,0,6005,5],[6615,0,6007,4],[6615,100,6007,39,"classBody"],[6615,109,6007,4],[6615,111,6007,50,"member"],[6615,117,6007,4],[6615,119,6007,58,"state"],[6615,124,6007,4],[6615,126,6007,65,"isStatic"],[6615,134,6007,4],[6615,136,6007,75,"constructorAllowsSuper"],[6615,158,6007,4],[6616,0,6008,3],[6617,0,4465,28],[6618,0,4465,28],[6619,0,4465,28],[6619,53,6010,31,"methodOrProp"],[6619,65,4465,28],[6619,67,6010,45],[6620,0,6011,4],[6620,14,6011,10,"optional"],[6620,22,6011,18],[6620,25,6011,21],[6620,30,6011,26,"eat"],[6620,33,6011,21],[6620,34,6011,30,"types"],[6620,39,6011,35],[6620,40,6011,36,"question"],[6620,48,6011,21],[6620,49,6011,4],[6621,0,6012,4],[6621,14,6012,8,"optional"],[6621,22,6012,4],[6621,24,6012,18,"methodOrProp"],[6621,36,6012,30],[6621,37,6012,31,"optional"],[6621,45,6012,18],[6621,48,6012,42],[6621,52,6012,18],[6623,0,6014,4],[6623,14,6014,8,"methodOrProp"],[6623,26,6014,20],[6623,27,6014,21,"readonly"],[6623,35,6014,8],[6623,39,6014,33],[6623,44,6014,38,"match"],[6623,49,6014,33],[6623,50,6014,44,"types"],[6623,55,6014,49],[6623,56,6014,50,"parenL"],[6623,62,6014,33],[6623,63,6014,4],[6623,65,6014,59],[6624,0,6015,6],[6624,17,6015,11,"raise"],[6624,22,6015,6],[6624,23,6015,17,"methodOrProp"],[6624,35,6015,29],[6624,36,6015,30,"start"],[6624,41,6015,6],[6624,43,6015,37],[6624,94,6015,6],[6625,0,6016,5],[6627,0,6018,4],[6627,14,6018,8,"methodOrProp"],[6627,26,6018,20],[6627,27,6018,21,"declare"],[6627,34,6018,8],[6627,38,6018,32],[6627,43,6018,37,"match"],[6627,48,6018,32],[6627,49,6018,43,"types"],[6627,54,6018,48],[6627,55,6018,49,"parenL"],[6627,61,6018,32],[6627,62,6018,4],[6627,64,6018,58],[6628,0,6019,6],[6628,17,6019,11,"raise"],[6628,22,6019,6],[6628,23,6019,17,"methodOrProp"],[6628,35,6019,29],[6628,36,6019,30,"start"],[6628,41,6019,6],[6628,43,6019,37],[6628,93,6019,6],[6629,0,6020,5],[6630,0,6021,3],[6631,0,4465,28],[6632,0,4465,28],[6633,0,4465,28],[6633,49,6023,27,"node"],[6633,53,4465,28],[6633,55,6023,33,"expr"],[6633,59,4465,28],[6633,61,6023,39],[6634,0,6024,4],[6634,14,6024,10,"decl"],[6634,18,6024,14],[6634,21,6024,17,"expr"],[6634,25,6024,21],[6634,26,6024,22,"type"],[6634,30,6024,17],[6634,35,6024,31],[6634,47,6024,17],[6634,50,6024,46],[6634,55,6024,51,"tsParseExpressionStatement"],[6634,81,6024,46],[6634,82,6024,78,"node"],[6634,86,6024,46],[6634,88,6024,84,"expr"],[6634,92,6024,46],[6634,93,6024,17],[6634,96,6024,92,"undefined"],[6634,105,6024,4],[6635,0,6025,4],[6635,17,6025,11,"decl"],[6635,21,6025,15],[6635,111,6025,50,"node"],[6635,115,6025,15],[6635,117,6025,56,"expr"],[6635,121,6025,15],[6635,122,6025,4],[6636,0,6026,3],[6637,0,4465,28],[6638,0,4465,28],[6639,0,4465,28],[6639,55,6028,33],[6640,0,6029,4],[6640,14,6029,8],[6640,19,6029,13,"tsIsDeclarationStart"],[6640,39,6029,8],[6640,41,6029,4],[6640,43,6029,37],[6640,50,6029,44],[6640,54,6029,37],[6641,0,6030,4],[6642,0,6031,3],[6643,0,4465,28],[6644,0,4465,28],[6645,0,4465,28],[6645,41,6033,19,"expr"],[6645,45,4465,28],[6645,47,6033,25,"noIn"],[6645,51,4465,28],[6645,53,6033,31,"startPos"],[6645,61,4465,28],[6645,63,6033,41,"startLoc"],[6645,71,4465,28],[6645,73,6033,51,"refNeedsArrowPos"],[6645,89,4465,28],[6645,91,6033,69],[6646,0,6033,69],[6648,0,6034,4],[6648,14,6034,8],[6648,15,6034,9,"refNeedsArrowPos"],[6648,31,6034,8],[6648,35,6034,29],[6648,36,6034,30],[6648,41,6034,35,"match"],[6648,46,6034,30],[6648,47,6034,41,"types"],[6648,52,6034,46],[6648,53,6034,47,"question"],[6648,61,6034,30],[6648,62,6034,4],[6648,64,6034,58],[6649,0,6035,6],[6649,97,6035,36,"expr"],[6649,101,6035,6],[6649,103,6035,42,"noIn"],[6649,107,6035,6],[6649,109,6035,48,"startPos"],[6649,117,6035,6],[6649,119,6035,58,"startLoc"],[6649,127,6035,6],[6649,129,6035,68,"refNeedsArrowPos"],[6649,145,6035,6],[6650,0,6036,5],[6652,0,6038,4],[6652,14,6038,10,"result"],[6652,20,6038,16],[6652,23,6038,19],[6652,28,6038,24,"tryParse"],[6652,36,6038,19],[6652,37,6038,33],[6653,0,6038,33],[6653,103,6038,62,"expr"],[6653,107,6038,33],[6653,109,6038,68,"noIn"],[6653,113,6038,33],[6653,115,6038,74,"startPos"],[6653,123,6038,33],[6653,125,6038,84,"startLoc"],[6653,133,6038,33],[6654,0,6038,33],[6654,11,6038,19],[6654,12,6038,4],[6656,0,6040,4],[6656,14,6040,8],[6656,15,6040,9,"result"],[6656,21,6040,15],[6656,22,6040,16,"node"],[6656,26,6040,4],[6656,28,6040,22],[6657,0,6041,6,"refNeedsArrowPos"],[6657,12,6041,6,"refNeedsArrowPos"],[6657,28,6041,22],[6657,29,6041,23,"start"],[6657,34,6041,6],[6657,37,6041,31,"result"],[6657,43,6041,37],[6657,44,6041,38,"error"],[6657,49,6041,31],[6657,50,6041,44,"pos"],[6657,53,6041,31],[6657,57,6041,51],[6657,62,6041,56,"state"],[6657,67,6041,51],[6657,68,6041,62,"start"],[6657,73,6041,6],[6658,0,6042,6],[6658,19,6042,13,"expr"],[6658,23,6042,6],[6659,0,6043,5],[6661,0,6045,4],[6661,14,6045,8,"result"],[6661,20,6045,14],[6661,21,6045,15,"error"],[6661,26,6045,4],[6661,28,6045,22],[6661,33,6045,27,"state"],[6661,38,6045,22],[6661,41,6045,35,"result"],[6661,47,6045,41],[6661,48,6045,42,"failState"],[6661,57,6045,22],[6662,0,6046,4],[6662,17,6046,11,"result"],[6662,23,6046,17],[6662,24,6046,18,"node"],[6662,28,6046,4],[6663,0,6047,3],[6664,0,4465,28],[6665,0,4465,28],[6666,0,4465,28],[6666,39,6049,17,"node"],[6666,43,4465,28],[6666,45,6049,23,"startPos"],[6666,53,4465,28],[6666,55,6049,33,"startLoc"],[6666,63,4465,28],[6666,65,6049,43],[6667,0,6050,4,"node"],[6667,10,6050,4,"node"],[6667,14,6050,8],[6667,93,6050,32,"node"],[6667,97,6050,8],[6667,99,6050,38,"startPos"],[6667,107,6050,8],[6667,109,6050,48,"startLoc"],[6667,117,6050,8],[6667,118,6050,4],[6669,0,6052,4],[6669,14,6052,8],[6669,19,6052,13,"eat"],[6669,22,6052,8],[6669,23,6052,17,"types"],[6669,28,6052,22],[6669,29,6052,23,"question"],[6669,37,6052,8],[6669,38,6052,4],[6669,40,6052,34],[6670,0,6053,6,"node"],[6670,12,6053,6,"node"],[6670,16,6053,10],[6670,17,6053,11,"optional"],[6670,25,6053,6],[6670,28,6053,22],[6670,32,6053,6],[6671,0,6054,6],[6671,17,6054,11,"resetEndLocation"],[6671,33,6054,6],[6671,34,6054,28,"node"],[6671,38,6054,6],[6672,0,6055,5],[6674,0,6057,4],[6674,14,6057,8],[6674,19,6057,13,"match"],[6674,24,6057,8],[6674,25,6057,19,"types"],[6674,30,6057,24],[6674,31,6057,25,"colon"],[6674,36,6057,8],[6674,37,6057,4],[6674,39,6057,33],[6675,0,6058,6],[6675,16,6058,12,"typeCastNode"],[6675,28,6058,24],[6675,31,6058,27],[6675,36,6058,32,"startNodeAt"],[6675,47,6058,27],[6675,48,6058,44,"startPos"],[6675,56,6058,27],[6675,58,6058,54,"startLoc"],[6675,66,6058,27],[6675,67,6058,6],[6676,0,6059,6,"typeCastNode"],[6676,12,6059,6,"typeCastNode"],[6676,24,6059,18],[6676,25,6059,19,"expression"],[6676,35,6059,6],[6676,38,6059,32,"node"],[6676,42,6059,6],[6677,0,6060,6,"typeCastNode"],[6677,12,6060,6,"typeCastNode"],[6677,24,6060,18],[6677,25,6060,19,"typeAnnotation"],[6677,39,6060,6],[6677,42,6060,36],[6677,47,6060,41,"tsParseTypeAnnotation"],[6677,68,6060,36],[6677,70,6060,6],[6678,0,6061,6],[6678,19,6061,13],[6678,24,6061,18,"finishNode"],[6678,34,6061,13],[6678,35,6061,29,"typeCastNode"],[6678,47,6061,13],[6678,49,6061,43],[6678,71,6061,13],[6678,72,6061,6],[6679,0,6062,5],[6681,0,6064,4],[6681,17,6064,11,"node"],[6681,21,6064,4],[6682,0,6065,3],[6683,0,4465,28],[6684,0,4465,28],[6685,0,4465,28],[6685,47,6067,25,"node"],[6685,51,4465,28],[6685,53,6067,31],[6686,0,6068,4],[6686,14,6068,10,"startPos"],[6686,22,6068,18],[6686,25,6068,21],[6686,30,6068,26,"state"],[6686,35,6068,21],[6686,36,6068,32,"start"],[6686,41,6068,4],[6687,0,6069,4],[6687,14,6069,10,"startLoc"],[6687,22,6069,18],[6687,25,6069,21],[6687,30,6069,26,"state"],[6687,35,6069,21],[6687,36,6069,32,"startLoc"],[6687,44,6069,4],[6688,0,6070,4],[6688,14,6070,10,"isDeclare"],[6688,23,6070,19],[6688,26,6070,22],[6688,31,6070,27,"eatContextual"],[6688,44,6070,22],[6688,45,6070,41],[6688,54,6070,22],[6688,55,6070,4],[6689,0,6071,4],[6689,14,6071,8,"declaration"],[6689,25,6071,4],[6691,0,6073,4],[6691,14,6073,8],[6691,19,6073,13,"match"],[6691,24,6073,8],[6691,25,6073,19,"types"],[6691,30,6073,24],[6691,31,6073,25,"name"],[6691,35,6073,8],[6691,36,6073,4],[6691,38,6073,32],[6692,0,6074,6,"declaration"],[6692,12,6074,6,"declaration"],[6692,23,6074,17],[6692,26,6074,20],[6692,31,6074,25,"tsTryParseExportDeclaration"],[6692,58,6074,20],[6692,60,6074,6],[6693,0,6075,5],[6695,0,6077,4],[6695,14,6077,8],[6695,15,6077,9,"declaration"],[6695,26,6077,4],[6695,28,6077,22],[6696,0,6078,6,"declaration"],[6696,12,6078,6,"declaration"],[6696,23,6078,17],[6696,110,6078,49,"node"],[6696,114,6078,17],[6696,115,6078,6],[6697,0,6079,5],[6699,0,6081,4],[6699,14,6081,8,"declaration"],[6699,25,6081,19],[6699,29,6081,23,"isDeclare"],[6699,38,6081,4],[6699,40,6081,34],[6700,0,6082,6],[6700,17,6082,11,"resetStartLocation"],[6700,35,6082,6],[6700,36,6082,30,"declaration"],[6700,47,6082,6],[6700,49,6082,43,"startPos"],[6700,57,6082,6],[6700,59,6082,53,"startLoc"],[6700,67,6082,6],[6701,0,6083,6,"declaration"],[6701,12,6083,6,"declaration"],[6701,23,6083,17],[6701,24,6083,18,"declare"],[6701,31,6083,6],[6701,34,6083,28],[6701,38,6083,6],[6702,0,6084,5],[6704,0,6086,4],[6704,17,6086,11,"declaration"],[6704,28,6086,4],[6705,0,6087,3],[6706,0,4465,28],[6707,0,4465,28],[6708,0,4465,28],[6708,37,6089,15,"node"],[6708,41,4465,28],[6708,43,6089,21,"isStatement"],[6708,54,4465,28],[6708,56,6089,34,"optionalId"],[6708,66,4465,28],[6708,68,6089,46],[6709,0,6090,4],[6709,14,6090,8],[6709,15,6090,9],[6709,16,6090,10,"isStatement"],[6709,27,6090,9],[6709,31,6090,25,"optionalId"],[6709,41,6090,8],[6709,46,6090,40],[6709,51,6090,45,"isContextual"],[6709,63,6090,40],[6709,64,6090,58],[6709,76,6090,40],[6709,77,6090,4],[6709,79,6090,73],[6710,0,6091,6],[6711,0,6092,5],[6713,0,6094,4],[6713,84,6094,23,"node"],[6713,88,6094,4],[6713,90,6094,29,"isStatement"],[6713,101,6094,4],[6713,103,6094,42,"optionalId"],[6713,113,6094,4],[6713,115,6094,54,"node"],[6713,119,6094,58],[6713,120,6094,59,"declare"],[6713,127,6094,54],[6713,130,6094,69,"BIND_TS_AMBIENT"],[6713,145,6094,54],[6713,148,6094,87,"BIND_CLASS"],[6713,158,6094,4],[6715,0,6095,4],[6715,14,6095,10,"typeParameters"],[6715,28,6095,24],[6715,31,6095,27],[6715,36,6095,32,"tsTryParseTypeParameters"],[6715,60,6095,27],[6715,62,6095,4],[6716,0,6096,4],[6716,14,6096,8,"typeParameters"],[6716,28,6096,4],[6716,30,6096,24,"node"],[6716,34,6096,28],[6716,35,6096,29,"typeParameters"],[6716,49,6096,24],[6716,52,6096,46,"typeParameters"],[6716,66,6096,24],[6717,0,6097,3],[6718,0,4465,28],[6719,0,4465,28],[6720,0,4465,28],[6720,53,6099,31,"node"],[6720,57,4465,28],[6720,59,6099,37],[6721,0,6100,4],[6721,14,6100,8],[6721,15,6100,9,"node"],[6721,19,6100,13],[6721,20,6100,14,"optional"],[6721,28,6100,8],[6721,32,6100,26],[6721,37,6100,31,"eat"],[6721,40,6100,26],[6721,41,6100,35,"types"],[6721,46,6100,40],[6721,47,6100,41,"bang"],[6721,51,6100,26],[6721,52,6100,4],[6721,54,6100,48],[6722,0,6101,6,"node"],[6722,12,6101,6,"node"],[6722,16,6101,10],[6722,17,6101,11,"definite"],[6722,25,6101,6],[6722,28,6101,22],[6722,32,6101,6],[6723,0,6102,5],[6725,0,6104,4],[6725,14,6104,10,"type"],[6725,18,6104,14],[6725,21,6104,17],[6725,26,6104,22,"tsTryParseTypeAnnotation"],[6725,50,6104,17],[6725,52,6104,4],[6726,0,6105,4],[6726,14,6105,8,"type"],[6726,18,6105,4],[6726,20,6105,14,"node"],[6726,24,6105,18],[6726,25,6105,19,"typeAnnotation"],[6726,39,6105,14],[6726,42,6105,36,"type"],[6726,46,6105,14],[6727,0,6106,3],[6728,0,4465,28],[6729,0,4465,28],[6730,0,4465,28],[6730,43,6108,21,"node"],[6730,47,4465,28],[6730,49,6108,27],[6731,0,6109,4],[6731,15,6109,9,"parseClassPropertyAnnotation"],[6731,43,6109,4],[6731,44,6109,38,"node"],[6731,48,6109,4],[6733,0,6111,4],[6733,14,6111,8,"node"],[6733,18,6111,12],[6733,19,6111,13,"declare"],[6733,26,6111,8],[6733,30,6111,24],[6733,35,6111,29,"match"],[6733,40,6111,24],[6733,41,6111,35,"types"],[6733,46,6111,40],[6733,47,6111,41,"equal"],[6733,52,6111,24],[6733,53,6111,4],[6733,55,6111,49],[6734,0,6112,6],[6734,17,6112,11,"raise"],[6734,22,6112,6],[6734,23,6112,17],[6734,28,6112,22,"state"],[6734,33,6112,17],[6734,34,6112,28,"start"],[6734,39,6112,6],[6734,41,6112,35],[6734,92,6112,6],[6735,0,6113,5],[6737,0,6115,4],[6737,97,6115,36,"node"],[6737,101,6115,4],[6738,0,6116,3],[6739,0,4465,28],[6740,0,4465,28],[6741,0,4465,28],[6741,50,6118,28,"node"],[6741,54,4465,28],[6741,56,6118,34],[6742,0,6119,4],[6742,14,6119,8,"node"],[6742,18,6119,12],[6742,19,6119,13,"abstract"],[6742,27,6119,4],[6742,29,6119,23],[6743,0,6120,6],[6743,17,6120,11,"raise"],[6743,22,6120,6],[6743,23,6120,17,"node"],[6743,27,6120,21],[6743,28,6120,22,"start"],[6743,33,6120,6],[6743,35,6120,29],[6743,90,6120,6],[6744,0,6121,5],[6746,0,6123,4],[6746,14,6123,8,"node"],[6746,18,6123,12],[6746,19,6123,13,"accessibility"],[6746,32,6123,4],[6746,34,6123,28],[6747,0,6124,6],[6747,17,6124,11,"raise"],[6747,22,6124,6],[6747,23,6124,17,"node"],[6747,27,6124,21],[6747,28,6124,22,"start"],[6747,33,6124,6],[6747,97,6124,89,"node"],[6747,101,6124,93],[6747,102,6124,94,"accessibility"],[6747,115,6124,6],[6748,0,6125,5],[6750,0,6127,4],[6750,15,6127,9,"parseClassPropertyAnnotation"],[6750,43,6127,4],[6750,44,6127,38,"node"],[6750,48,6127,4],[6751,0,6128,4],[6751,104,6128,43,"node"],[6751,108,6128,4],[6752,0,6129,3],[6753,0,4465,28],[6754,0,4465,28],[6755,0,4465,28],[6755,40,6131,18,"classBody"],[6755,49,4465,28],[6755,51,6131,29,"method"],[6755,57,4465,28],[6755,59,6131,37,"isGenerator"],[6755,70,4465,28],[6755,72,6131,50,"isAsync"],[6755,79,4465,28],[6755,81,6131,59,"isConstructor"],[6755,94,4465,28],[6755,96,6131,74,"allowsDirectSuper"],[6755,113,4465,28],[6755,115,6131,93],[6756,0,6132,4],[6756,14,6132,10,"typeParameters"],[6756,28,6132,24],[6756,31,6132,27],[6756,36,6132,32,"tsTryParseTypeParameters"],[6756,60,6132,27],[6756,62,6132,4],[6757,0,6133,4],[6757,14,6133,8,"typeParameters"],[6757,28,6133,4],[6757,30,6133,24,"method"],[6757,36,6133,30],[6757,37,6133,31,"typeParameters"],[6757,51,6133,24],[6757,54,6133,48,"typeParameters"],[6757,68,6133,24],[6759,0,6134,4],[6759,87,6134,26,"classBody"],[6759,96,6134,4],[6759,98,6134,37,"method"],[6759,104,6134,4],[6759,106,6134,45,"isGenerator"],[6759,117,6134,4],[6759,119,6134,58,"isAsync"],[6759,126,6134,4],[6759,128,6134,67,"isConstructor"],[6759,141,6134,4],[6759,143,6134,82,"allowsDirectSuper"],[6759,160,6134,4],[6760,0,6135,3],[6761,0,4465,28],[6762,0,4465,28],[6763,0,4465,28],[6763,47,6137,25,"classBody"],[6763,56,4465,28],[6763,58,6137,36,"method"],[6763,64,4465,28],[6763,66,6137,44,"isGenerator"],[6763,77,4465,28],[6763,79,6137,57,"isAsync"],[6763,86,4465,28],[6763,88,6137,66],[6764,0,6138,4],[6764,14,6138,10,"typeParameters"],[6764,28,6138,24],[6764,31,6138,27],[6764,36,6138,32,"tsTryParseTypeParameters"],[6764,60,6138,27],[6764,62,6138,4],[6765,0,6139,4],[6765,14,6139,8,"typeParameters"],[6765,28,6139,4],[6765,30,6139,24,"method"],[6765,36,6139,30],[6765,37,6139,31,"typeParameters"],[6765,51,6139,24],[6765,54,6139,48,"typeParameters"],[6765,68,6139,24],[6767,0,6140,4],[6767,94,6140,33,"classBody"],[6767,103,6140,4],[6767,105,6140,44,"method"],[6767,111,6140,4],[6767,113,6140,52,"isGenerator"],[6767,124,6140,4],[6767,126,6140,65,"isAsync"],[6767,133,6140,4],[6768,0,6141,3],[6769,0,4465,28],[6770,0,4465,28],[6771,0,4465,28],[6771,40,6143,18,"node"],[6771,44,4465,28],[6771,46,6143,24],[6772,0,6144,4],[6772,87,6144,26,"node"],[6772,91,6144,4],[6774,0,6146,4],[6774,14,6146,8,"node"],[6774,18,6146,12],[6774,19,6146,13,"superClass"],[6774,29,6146,8],[6774,33,6146,27],[6774,38,6146,32,"isRelational"],[6774,50,6146,27],[6774,51,6146,45],[6774,54,6146,27],[6774,55,6146,4],[6774,57,6146,51],[6775,0,6147,6,"node"],[6775,12,6147,6,"node"],[6775,16,6147,10],[6775,17,6147,11,"superTypeParameters"],[6775,36,6147,6],[6775,39,6147,33],[6775,44,6147,38,"tsParseTypeArguments"],[6775,64,6147,33],[6775,66,6147,6],[6776,0,6148,5],[6778,0,6150,4],[6778,14,6150,8],[6778,19,6150,13,"eatContextual"],[6778,32,6150,8],[6778,33,6150,27],[6778,45,6150,8],[6778,46,6150,4],[6778,48,6150,42],[6779,0,6151,6,"node"],[6779,12,6151,6,"node"],[6779,16,6151,10],[6779,17,6151,11,"implements"],[6779,27,6151,6],[6779,30,6151,24],[6779,35,6151,29,"tsParseHeritageClause"],[6779,56,6151,24],[6779,57,6151,51],[6779,69,6151,24],[6779,70,6151,6],[6780,0,6152,5],[6781,0,6153,3],[6782,0,4465,28],[6783,0,4465,28],[6784,0,4465,28],[6784,42,6155,20,"prop"],[6784,46,4465,28],[6784,48,6155,35],[6785,0,6155,35],[6787,0,6156,4],[6787,14,6156,10,"typeParameters"],[6787,28,6156,24],[6787,31,6156,27],[6787,36,6156,32,"tsTryParseTypeParameters"],[6787,60,6156,27],[6787,62,6156,4],[6788,0,6157,4],[6788,14,6157,8,"typeParameters"],[6788,28,6157,4],[6788,30,6157,24,"prop"],[6788,34,6157,28],[6788,35,6157,29,"typeParameters"],[6788,49,6157,24],[6788,52,6157,46,"typeParameters"],[6788,66,6157,24],[6790,0,6155,35],[6790,45,6155,29,"args"],[6790,49,6155,35],[6791,0,6155,29,"args"],[6791,12,6155,29,"args"],[6791,16,6155,35],[6792,0,6155,35],[6794,0,6158,4],[6794,113,6158,28,"prop"],[6794,117,6158,4],[6794,126,6158,37,"args"],[6794,130,6158,4],[6795,0,6159,3],[6796,0,4465,28],[6797,0,4465,28],[6798,0,4465,28],[6798,44,6161,22,"node"],[6798,48,4465,28],[6798,50,6161,28,"allowModifiers"],[6798,64,4465,28],[6798,66,6161,44],[6799,0,6162,4],[6799,14,6162,10,"typeParameters"],[6799,28,6162,24],[6799,31,6162,27],[6799,36,6162,32,"tsTryParseTypeParameters"],[6799,60,6162,27],[6799,62,6162,4],[6800,0,6163,4],[6800,14,6163,8,"typeParameters"],[6800,28,6163,4],[6800,30,6163,24,"node"],[6800,34,6163,28],[6800,35,6163,29,"typeParameters"],[6800,49,6163,24],[6800,52,6163,46,"typeParameters"],[6800,66,6163,24],[6802,0,6164,4],[6802,91,6164,30,"node"],[6802,95,6164,4],[6802,97,6164,36,"allowModifiers"],[6802,111,6164,4],[6803,0,6165,3],[6804,0,4465,28],[6805,0,4465,28],[6806,0,4465,28],[6806,35,6167,13,"decl"],[6806,39,4465,28],[6806,41,6167,19,"kind"],[6806,45,4465,28],[6806,47,6167,25],[6807,0,6168,4],[6807,82,6168,21,"decl"],[6807,86,6168,4],[6807,88,6168,27,"kind"],[6807,92,6168,4],[6809,0,6170,4],[6809,14,6170,8,"decl"],[6809,18,6170,12],[6809,19,6170,13,"id"],[6809,21,6170,8],[6809,22,6170,16,"type"],[6809,26,6170,8],[6809,31,6170,25],[6809,43,6170,8],[6809,47,6170,41],[6809,52,6170,46,"eat"],[6809,55,6170,41],[6809,56,6170,50,"types"],[6809,61,6170,55],[6809,62,6170,56,"bang"],[6809,66,6170,41],[6809,67,6170,4],[6809,69,6170,63],[6810,0,6171,6,"decl"],[6810,12,6171,6,"decl"],[6810,16,6171,10],[6810,17,6171,11,"definite"],[6810,25,6171,6],[6810,28,6171,22],[6810,32,6171,6],[6811,0,6172,5],[6813,0,6174,4],[6813,14,6174,10,"type"],[6813,18,6174,14],[6813,21,6174,17],[6813,26,6174,22,"tsTryParseTypeAnnotation"],[6813,50,6174,17],[6813,52,6174,4],[6815,0,6176,4],[6815,14,6176,8,"type"],[6815,18,6176,4],[6815,20,6176,14],[6816,0,6177,6,"decl"],[6816,12,6177,6,"decl"],[6816,16,6177,10],[6816,17,6177,11,"id"],[6816,19,6177,6],[6816,20,6177,14,"typeAnnotation"],[6816,34,6177,6],[6816,37,6177,31,"type"],[6816,41,6177,6],[6817,0,6178,6],[6817,17,6178,11,"resetEndLocation"],[6817,33,6178,6],[6817,34,6178,28,"decl"],[6817,38,6178,32],[6817,39,6178,33,"id"],[6817,41,6178,6],[6818,0,6179,5],[6819,0,6180,3],[6820,0,4465,28],[6821,0,4465,28],[6822,0,4465,28],[6822,58,6182,36,"node"],[6822,62,4465,28],[6822,64,6182,42,"call"],[6822,68,4465,28],[6822,70,6182,48],[6823,0,6183,4],[6823,14,6183,8],[6823,19,6183,13,"match"],[6823,24,6183,8],[6823,25,6183,19,"types"],[6823,30,6183,24],[6823,31,6183,25,"colon"],[6823,36,6183,8],[6823,37,6183,4],[6823,39,6183,33],[6824,0,6184,6,"node"],[6824,12,6184,6,"node"],[6824,16,6184,10],[6824,17,6184,11,"returnType"],[6824,27,6184,6],[6824,30,6184,24],[6824,35,6184,29,"tsParseTypeAnnotation"],[6824,56,6184,24],[6824,58,6184,6],[6825,0,6185,5],[6827,0,6187,4],[6827,112,6187,51,"node"],[6827,116,6187,4],[6827,118,6187,57,"call"],[6827,122,6187,4],[6828,0,6188,3],[6829,0,4465,28],[6830,0,4465,28],[6831,0,4465,28],[6831,43,6190,28],[6832,0,6190,28],[6834,0,6190,28],[6834,45,6190,22,"args"],[6834,49,6190,28],[6835,0,6190,22,"args"],[6835,12,6190,22,"args"],[6835,16,6190,28],[6836,0,6190,28],[6838,0,6191,4],[6838,14,6191,8,"state"],[6838,19,6191,4],[6839,0,6192,4],[6839,14,6192,8,"jsx"],[6839,17,6192,4],[6840,0,6193,4],[6840,14,6193,8,"typeCast"],[6840,22,6193,4],[6842,0,6195,4],[6842,14,6195,8],[6842,19,6195,13,"match"],[6842,24,6195,8],[6842,25,6195,19,"types"],[6842,30,6195,24],[6842,31,6195,25,"jsxTagStart"],[6842,42,6195,8],[6842,43,6195,4],[6842,45,6195,39],[6843,0,6196,6,"state"],[6843,12,6196,6,"state"],[6843,17,6196,11],[6843,20,6196,14],[6843,25,6196,19,"state"],[6843,30,6196,14],[6843,31,6196,25,"clone"],[6843,36,6196,14],[6843,38,6196,6],[6844,0,6197,6,"jsx"],[6844,12,6197,6,"jsx"],[6844,15,6197,9],[6844,18,6197,12],[6844,23,6197,17,"tryParse"],[6844,31,6197,12],[6844,32,6197,26],[6845,0,6197,26],[6847,0,6197,26],[6847,136,6197,58,"args"],[6847,140,6197,26],[6848,0,6197,26],[6848,13,6197,12],[6848,15,6197,65,"state"],[6848,20,6197,12],[6848,21,6197,6],[6849,0,6198,6],[6849,16,6198,10],[6849,17,6198,11,"jsx"],[6849,20,6198,14],[6849,21,6198,15,"error"],[6849,26,6198,6],[6849,28,6198,22],[6849,35,6198,29,"jsx"],[6849,38,6198,32],[6849,39,6198,33,"node"],[6849,43,6198,22],[6850,0,6195,39],[6850,16,6200,8,"context"],[6850,23,6195,39],[6850,26,6201,10],[6850,31,6201,15,"state"],[6850,36,6195,39],[6850,37,6200,8,"context"],[6850,44,6195,39],[6852,0,6203,6],[6852,16,6203,10,"context"],[6852,23,6203,17],[6852,24,6203,18,"context"],[6852,31,6203,25],[6852,32,6203,26,"length"],[6852,38,6203,18],[6852,41,6203,35],[6852,42,6203,17],[6852,43,6203,10],[6852,48,6203,42,"types$1"],[6852,55,6203,49],[6852,56,6203,50,"j_oTag"],[6852,62,6203,6],[6852,64,6203,58],[6853,0,6204,8,"context"],[6853,14,6204,8,"context"],[6853,21,6204,15],[6853,22,6204,16,"length"],[6853,28,6204,8],[6853,32,6204,26],[6853,33,6204,8],[6854,0,6205,7],[6854,13,6203,6],[6854,19,6205,13],[6854,23,6205,17,"context"],[6854,30,6205,24],[6854,31,6205,25,"context"],[6854,38,6205,32],[6854,39,6205,33,"length"],[6854,45,6205,25],[6854,48,6205,42],[6854,49,6205,24],[6854,50,6205,17],[6854,55,6205,49,"types$1"],[6854,62,6205,56],[6854,63,6205,57,"j_expr"],[6854,69,6205,13],[6854,71,6205,65],[6855,0,6206,8,"context"],[6855,14,6206,8,"context"],[6855,21,6206,15],[6855,22,6206,16,"length"],[6855,28,6206,8],[6855,32,6206,26],[6855,33,6206,8],[6856,0,6207,7],[6857,0,6208,5],[6859,0,6210,4],[6859,14,6210,8],[6859,16,6210,10,"jsx"],[6859,19,6210,13],[6859,23,6210,17,"jsx"],[6859,26,6210,20],[6859,27,6210,21,"error"],[6859,32,6210,8],[6859,37,6210,31],[6859,38,6210,32],[6859,43,6210,37,"isRelational"],[6859,55,6210,32],[6859,56,6210,50],[6859,59,6210,32],[6859,60,6210,4],[6859,62,6210,56],[6860,0,6210,56],[6862,0,6211,6],[6862,128,6211,39,"args"],[6862,132,6211,6],[6863,0,6212,5],[6865,0,6214,4],[6865,14,6214,8,"typeParameters"],[6865,28,6214,4],[6866,0,6215,4,"state"],[6866,10,6215,4,"state"],[6866,15,6215,9],[6866,18,6215,12,"state"],[6866,23,6215,17],[6866,27,6215,21],[6866,32,6215,26,"state"],[6866,37,6215,21],[6866,38,6215,32,"clone"],[6866,43,6215,21],[6866,45,6215,4],[6867,0,6216,4],[6867,14,6216,10,"arrow"],[6867,19,6216,15],[6867,22,6216,18],[6867,27,6216,23,"tryParse"],[6867,35,6216,18],[6867,36,6216,32],[6867,46,6216,32,"abort"],[6867,51,6216,37],[6867,53,6216,41],[6868,0,6216,41],[6870,0,6217,6,"typeParameters"],[6870,12,6217,6,"typeParameters"],[6870,26,6217,20],[6870,29,6217,23],[6870,36,6217,27],[6870,37,6217,28,"tsParseTypeParameters"],[6870,58,6217,23],[6870,60,6217,6],[6872,0,6218,6],[6872,16,6218,12,"expr"],[6872,20,6218,16],[6872,138,6218,45,"args"],[6872,142,6218,16],[6872,144,6218,6],[6874,0,6220,6],[6874,16,6220,10,"expr"],[6874,20,6220,14],[6874,21,6220,15,"type"],[6874,25,6220,10],[6874,30,6220,24],[6874,55,6220,10],[6874,59,6220,53,"expr"],[6874,63,6220,57],[6874,64,6220,58,"extra"],[6874,69,6220,53],[6874,73,6220,67,"expr"],[6874,77,6220,71],[6874,78,6220,72,"extra"],[6874,83,6220,67],[6874,84,6220,78,"parenthesized"],[6874,97,6220,6],[6874,99,6220,93],[6875,0,6221,8,"abort"],[6875,14,6221,8,"abort"],[6875,19,6221,13],[6876,0,6222,7],[6878,0,6224,6],[6878,16,6224,10,"typeParameters"],[6878,30,6224,24],[6878,34,6224,28,"typeParameters"],[6878,48,6224,42],[6878,49,6224,43,"params"],[6878,55,6224,28],[6878,56,6224,50,"length"],[6878,62,6224,28],[6878,67,6224,61],[6878,68,6224,6],[6878,70,6224,64],[6879,0,6225,8],[6879,14,6225,8],[6879,21,6225,12],[6879,22,6225,13,"resetStartLocationFromNode"],[6879,48,6225,8],[6879,49,6225,40,"expr"],[6879,53,6225,8],[6879,55,6225,46,"typeParameters"],[6879,69,6225,8],[6880,0,6226,7],[6882,0,6228,6,"expr"],[6882,12,6228,6,"expr"],[6882,16,6228,10],[6882,17,6228,11,"typeParameters"],[6882,31,6228,6],[6882,34,6228,28,"typeParameters"],[6882,48,6228,6],[6883,0,6229,6],[6883,19,6229,13,"expr"],[6883,23,6229,6],[6884,0,6230,5],[6884,11,6216,18],[6884,13,6230,7,"state"],[6884,18,6216,18],[6884,19,6216,4],[6885,0,6231,4],[6885,14,6231,8],[6885,15,6231,9,"arrow"],[6885,20,6231,14],[6885,21,6231,15,"error"],[6885,26,6231,8],[6885,30,6231,24],[6885,31,6231,25,"arrow"],[6885,36,6231,30],[6885,37,6231,31,"aborted"],[6885,44,6231,4],[6885,46,6231,40],[6885,53,6231,47,"arrow"],[6885,58,6231,52],[6885,59,6231,53,"node"],[6885,63,6231,40],[6887,0,6233,4],[6887,14,6233,8],[6887,15,6233,9,"jsx"],[6887,18,6233,4],[6887,20,6233,14],[6888,0,6234,6,"assert"],[6888,12,6234,6,"assert"],[6888,18,6234,12],[6888,19,6234,13],[6888,20,6234,14],[6888,25,6234,19,"hasPlugin"],[6888,34,6234,14],[6888,35,6234,29],[6888,40,6234,14],[6888,41,6234,12],[6888,42,6234,6],[6889,0,6235,6,"typeCast"],[6889,12,6235,6,"typeCast"],[6889,20,6235,14],[6889,23,6235,17],[6889,28,6235,22,"tryParse"],[6889,36,6235,17],[6889,37,6235,31],[6890,0,6235,31],[6892,0,6235,31],[6892,136,6235,63,"args"],[6892,140,6235,31],[6893,0,6235,31],[6893,13,6235,17],[6893,15,6235,70,"state"],[6893,20,6235,17],[6893,21,6235,6],[6894,0,6236,6],[6894,16,6236,10],[6894,17,6236,11,"typeCast"],[6894,25,6236,19],[6894,26,6236,20,"error"],[6894,31,6236,6],[6894,33,6236,27],[6894,40,6236,34,"typeCast"],[6894,48,6236,42],[6894,49,6236,43,"node"],[6894,53,6236,27],[6895,0,6237,5],[6897,0,6239,4],[6897,14,6239,8,"jsx"],[6897,17,6239,11],[6897,21,6239,15,"jsx"],[6897,24,6239,18],[6897,25,6239,19,"node"],[6897,29,6239,4],[6897,31,6239,25],[6898,0,6240,6],[6898,17,6240,11,"state"],[6898,22,6240,6],[6898,25,6240,19,"jsx"],[6898,28,6240,22],[6898,29,6240,23,"failState"],[6898,38,6240,6],[6899,0,6241,6],[6899,19,6241,13,"jsx"],[6899,22,6241,16],[6899,23,6241,17,"node"],[6899,27,6241,6],[6900,0,6242,5],[6902,0,6244,4],[6902,14,6244,8,"arrow"],[6902,19,6244,13],[6902,20,6244,14,"node"],[6902,24,6244,4],[6902,26,6244,20],[6903,0,6245,6],[6903,17,6245,11,"state"],[6903,22,6245,6],[6903,25,6245,19,"arrow"],[6903,30,6245,24],[6903,31,6245,25,"failState"],[6903,40,6245,6],[6904,0,6246,6],[6904,19,6246,13,"arrow"],[6904,24,6246,18],[6904,25,6246,19,"node"],[6904,29,6246,6],[6905,0,6247,5],[6907,0,6249,4],[6907,14,6249,8,"typeCast"],[6907,22,6249,16],[6907,26,6249,20,"typeCast"],[6907,34,6249,28],[6907,35,6249,29,"node"],[6907,39,6249,4],[6907,41,6249,35],[6908,0,6250,6],[6908,17,6250,11,"state"],[6908,22,6250,6],[6908,25,6250,19,"typeCast"],[6908,33,6250,27],[6908,34,6250,28,"failState"],[6908,43,6250,6],[6909,0,6251,6],[6909,19,6251,13,"typeCast"],[6909,27,6251,21],[6909,28,6251,22,"node"],[6909,32,6251,6],[6910,0,6252,5],[6912,0,6254,4],[6912,14,6254,8,"jsx"],[6912,17,6254,11],[6912,21,6254,15,"jsx"],[6912,24,6254,18],[6912,25,6254,19,"thrown"],[6912,31,6254,4],[6912,33,6254,27],[6912,39,6254,33,"jsx"],[6912,42,6254,36],[6912,43,6254,37,"error"],[6912,48,6254,27],[6913,0,6255,4],[6913,14,6255,8,"arrow"],[6913,19,6255,13],[6913,20,6255,14,"thrown"],[6913,26,6255,4],[6913,28,6255,22],[6913,34,6255,28,"arrow"],[6913,39,6255,33],[6913,40,6255,34,"error"],[6913,45,6255,22],[6914,0,6256,4],[6914,14,6256,8,"typeCast"],[6914,22,6256,16],[6914,26,6256,20,"typeCast"],[6914,34,6256,28],[6914,35,6256,29,"thrown"],[6914,41,6256,4],[6914,43,6256,37],[6914,49,6256,43,"typeCast"],[6914,57,6256,51],[6914,58,6256,52,"error"],[6914,63,6256,37],[6915,0,6257,4],[6915,16,6257,10,"jsx"],[6915,19,6257,13],[6915,23,6257,17,"jsx"],[6915,26,6257,20],[6915,27,6257,21,"error"],[6915,32,6257,10],[6915,36,6257,30,"arrow"],[6915,41,6257,35],[6915,42,6257,36,"error"],[6915,47,6257,10],[6915,51,6257,45,"typeCast"],[6915,59,6257,53],[6915,63,6257,57,"typeCast"],[6915,71,6257,65],[6915,72,6257,66,"error"],[6915,77,6257,4],[6916,0,6258,3],[6917,0,4465,28],[6918,0,4465,28],[6919,0,4465,28],[6919,40,6260,18,"refShorthandDefaultPos"],[6919,62,4465,28],[6919,64,6260,42],[6920,0,6261,4],[6920,14,6261,8],[6920,15,6261,9],[6920,20,6261,14,"hasPlugin"],[6920,29,6261,9],[6920,30,6261,24],[6920,35,6261,9],[6920,36,6261,8],[6920,40,6261,34],[6920,45,6261,39,"isRelational"],[6920,57,6261,34],[6920,58,6261,52],[6920,61,6261,34],[6920,62,6261,4],[6920,64,6261,58],[6921,0,6262,6],[6921,19,6262,13],[6921,24,6262,18,"tsParseTypeAssertion"],[6921,44,6262,13],[6921,46,6262,6],[6922,0,6263,5],[6922,11,6261,4],[6922,17,6263,11],[6923,0,6264,6],[6923,96,6264,35,"refShorthandDefaultPos"],[6923,118,6264,6],[6924,0,6265,5],[6925,0,6266,3],[6926,0,4465,28],[6927,0,4465,28],[6928,0,4465,28],[6928,35,6268,13,"node"],[6928,39,4465,28],[6928,41,6268,19],[6929,0,6268,19],[6931,0,6269,4],[6931,14,6269,8],[6931,19,6269,13,"match"],[6931,24,6269,8],[6931,25,6269,19,"types"],[6931,30,6269,24],[6931,31,6269,25,"colon"],[6931,36,6269,8],[6931,37,6269,4],[6931,39,6269,33],[6932,0,6270,6],[6932,16,6270,12,"result"],[6932,22,6270,18],[6932,25,6270,21],[6932,30,6270,26,"tryParse"],[6932,38,6270,21],[6932,39,6270,35],[6932,49,6270,35,"abort"],[6932,54,6270,40],[6932,56,6270,44],[6933,0,6271,8],[6933,18,6271,14,"returnType"],[6933,28,6271,24],[6933,31,6271,27],[6933,38,6271,31],[6933,39,6271,32,"tsParseTypeOrTypePredicateAnnotation"],[6933,75,6271,27],[6933,76,6271,69,"types"],[6933,81,6271,74],[6933,82,6271,75,"colon"],[6933,87,6271,27],[6933,88,6271,8],[6935,0,6272,8],[6935,18,6272,12],[6935,25,6272,16],[6935,26,6272,17,"canInsertSemicolon"],[6935,44,6272,12],[6935,50,6272,41],[6935,51,6272,42],[6935,58,6272,46],[6935,59,6272,47,"match"],[6935,64,6272,42],[6935,65,6272,53,"types"],[6935,70,6272,58],[6935,71,6272,59,"arrow"],[6935,76,6272,42],[6935,77,6272,8],[6935,79,6272,67,"abort"],[6935,84,6272,72],[6936,0,6273,8],[6936,21,6273,15,"returnType"],[6936,31,6273,8],[6937,0,6274,7],[6937,13,6270,21],[6937,14,6270,6],[6938,0,6275,6],[6938,16,6275,10,"result"],[6938,22,6275,16],[6938,23,6275,17,"aborted"],[6938,30,6275,6],[6938,32,6275,26],[6940,0,6277,6],[6940,16,6277,10],[6940,17,6277,11,"result"],[6940,23,6277,17],[6940,24,6277,18,"thrown"],[6940,30,6277,6],[6940,32,6277,26],[6941,0,6278,8],[6941,18,6278,12,"result"],[6941,24,6278,18],[6941,25,6278,19,"error"],[6941,30,6278,8],[6941,32,6278,26],[6941,37,6278,31,"state"],[6941,42,6278,26],[6941,45,6278,39,"result"],[6941,51,6278,45],[6941,52,6278,46,"failState"],[6941,61,6278,26],[6942,0,6279,8,"node"],[6942,14,6279,8,"node"],[6942,18,6279,12],[6942,19,6279,13,"returnType"],[6942,29,6279,8],[6942,32,6279,26,"result"],[6942,38,6279,32],[6942,39,6279,33,"node"],[6942,43,6279,8],[6943,0,6280,7],[6944,0,6281,5],[6946,0,6283,4],[6946,89,6283,28,"node"],[6946,93,6283,4],[6947,0,6284,3],[6948,0,4465,28],[6949,0,4465,28],[6950,0,4465,28],[6950,53,6286,31,"param"],[6950,58,4465,28],[6950,60,6286,38],[6951,0,6287,4],[6951,14,6287,8],[6951,19,6287,13,"eat"],[6951,22,6287,8],[6951,23,6287,17,"types"],[6951,28,6287,22],[6951,29,6287,23,"question"],[6951,37,6287,8],[6951,38,6287,4],[6951,40,6287,34],[6952,0,6288,6],[6952,16,6288,10,"param"],[6952,21,6288,15],[6952,22,6288,16,"type"],[6952,26,6288,10],[6952,31,6288,25],[6952,43,6288,6],[6952,45,6288,39],[6953,0,6289,8],[6953,19,6289,13,"raise"],[6953,24,6289,8],[6953,25,6289,19,"param"],[6953,30,6289,24],[6953,31,6289,25,"start"],[6953,36,6289,8],[6953,38,6289,32],[6953,118,6289,8],[6954,0,6290,7],[6956,0,6292,6,"param"],[6956,12,6292,6,"param"],[6956,17,6292,11],[6956,18,6292,12,"optional"],[6956,26,6292,6],[6956,29,6292,23],[6956,33,6292,6],[6957,0,6293,5],[6959,0,6295,4],[6959,14,6295,10,"type"],[6959,18,6295,14],[6959,21,6295,17],[6959,26,6295,22,"tsTryParseTypeAnnotation"],[6959,50,6295,17],[6959,52,6295,4],[6960,0,6296,4],[6960,14,6296,8,"type"],[6960,18,6296,4],[6960,20,6296,14,"param"],[6960,25,6296,19],[6960,26,6296,20,"typeAnnotation"],[6960,40,6296,14],[6960,43,6296,37,"type"],[6960,47,6296,14],[6961,0,6297,4],[6961,15,6297,9,"resetEndLocation"],[6961,31,6297,4],[6961,32,6297,26,"param"],[6961,37,6297,4],[6962,0,6298,4],[6962,17,6298,11,"param"],[6962,22,6298,4],[6963,0,6299,3],[6964,0,4465,28],[6965,0,4465,28],[6966,0,4465,28],[6966,37,6301,15,"node"],[6966,41,4465,28],[6966,43,6301,21,"isBinding"],[6966,52,4465,28],[6966,54,6301,32,"contextDescription"],[6966,72,4465,28],[6966,74,6301,52],[6967,0,6302,4],[6967,18,6302,12,"node"],[6967,22,6302,16],[6967,23,6302,17,"type"],[6967,27,6302,4],[6968,0,6303,6],[6968,17,6303,11],[6968,39,6303,6],[6969,0,6304,8],[6969,95,6304,34],[6969,100,6304,39,"typeCastToParameter"],[6969,119,6304,34],[6969,120,6304,59,"node"],[6969,124,6304,34],[6969,125,6304,8],[6969,127,6304,66,"isBinding"],[6969,136,6304,8],[6969,138,6304,77,"contextDescription"],[6969,156,6304,8],[6971,0,6306,6],[6971,17,6306,11],[6971,38,6306,6],[6972,0,6307,8],[6972,95,6307,34,"node"],[6972,99,6307,8],[6972,101,6307,40,"isBinding"],[6972,110,6307,8],[6972,112,6307,51,"contextDescription"],[6972,130,6307,8],[6974,0,6309,6],[6974,17,6309,11],[6974,33,6309,6],[6975,0,6310,6],[6975,17,6310,11],[6975,38,6310,6],[6976,0,6311,6],[6976,17,6311,11],[6976,34,6311,6],[6977,0,6312,8,"node"],[6977,14,6312,8,"node"],[6977,18,6312,12],[6977,19,6312,13,"expression"],[6977,29,6312,8],[6977,32,6312,26],[6977,37,6312,31,"toAssignable"],[6977,49,6312,26],[6977,50,6312,44,"node"],[6977,54,6312,48],[6977,55,6312,49,"expression"],[6977,65,6312,26],[6977,67,6312,61,"isBinding"],[6977,76,6312,26],[6977,78,6312,72,"contextDescription"],[6977,96,6312,26],[6977,97,6312,8],[6978,0,6313,8],[6978,21,6313,15,"node"],[6978,25,6313,8],[6980,0,6315,6],[6981,0,6316,8],[6981,95,6316,34,"node"],[6981,99,6316,8],[6981,101,6316,40,"isBinding"],[6981,110,6316,8],[6981,112,6316,51,"contextDescription"],[6981,130,6316,8],[6982,0,6302,4],[6983,0,6318,3],[6984,0,4465,28],[6985,0,4465,28],[6986,0,4465,28],[6986,34,6320,12,"expr"],[6986,38,4465,28],[6986,40,6320,77],[6987,0,6320,77],[6987,14,6320,18,"bindingType"],[6987,25,6320,77],[6987,96,6320,32,"BIND_NONE"],[6987,105,6320,77],[6988,0,6320,77],[6988,14,6320,43,"checkClashes"],[6988,26,6320,77],[6989,0,6320,77],[6989,14,6320,57,"contextDescription"],[6989,32,6320,77],[6991,0,6321,4],[6991,18,6321,12,"expr"],[6991,22,6321,16],[6991,23,6321,17,"type"],[6991,27,6321,4],[6992,0,6322,6],[6992,17,6322,11],[6992,39,6322,6],[6993,0,6323,8],[6995,0,6325,6],[6995,17,6325,11],[6995,38,6325,6],[6996,0,6326,8],[6996,19,6326,13,"checkLVal"],[6996,28,6326,8],[6996,29,6326,23,"expr"],[6996,33,6326,27],[6996,34,6326,28,"parameter"],[6996,43,6326,8],[6996,45,6326,39,"bindingType"],[6996,56,6326,8],[6996,58,6326,52,"checkClashes"],[6996,70,6326,8],[6996,72,6326,66],[6996,92,6326,8],[6997,0,6327,8],[6999,0,6329,6],[6999,17,6329,11],[6999,33,6329,6],[7000,0,6330,6],[7000,17,6330,11],[7000,38,6330,6],[7001,0,6331,6],[7001,17,6331,11],[7001,34,6331,6],[7002,0,6332,8],[7002,19,6332,13,"checkLVal"],[7002,28,6332,8],[7002,29,6332,23,"expr"],[7002,33,6332,27],[7002,34,6332,28,"expression"],[7002,44,6332,8],[7002,46,6332,40,"bindingType"],[7002,57,6332,8],[7002,59,6332,53,"checkClashes"],[7002,71,6332,8],[7002,73,6332,67,"contextDescription"],[7002,91,6332,8],[7003,0,6333,8],[7005,0,6335,6],[7006,0,6336,8],[7006,85,6336,24,"expr"],[7006,89,6336,8],[7006,91,6336,30,"bindingType"],[7006,102,6336,8],[7006,104,6336,43,"checkClashes"],[7006,116,6336,8],[7006,118,6336,57,"contextDescription"],[7006,136,6336,8],[7008,0,6337,8],[7009,0,6321,4],[7010,0,6339,3],[7011,0,4465,28],[7012,0,4465,28],[7013,0,4465,28],[7013,43,6341,21],[7014,0,6342,4],[7014,18,6342,12],[7014,23,6342,17,"state"],[7014,28,6342,12],[7014,29,6342,23,"type"],[7014,33,6342,4],[7015,0,6343,6],[7015,17,6343,11,"types"],[7015,22,6343,16],[7015,23,6343,17,"_this"],[7015,28,6343,6],[7016,0,6344,8],[7016,21,6344,15],[7016,26,6344,20,"parseIdentifier"],[7016,41,6344,15],[7016,42,6344,36],[7016,46,6344,15],[7016,47,6344,8],[7018,0,6346,6],[7019,0,6347,8],[7020,0,6342,4],[7021,0,6349,3],[7022,0,4465,28],[7023,0,4465,28],[7024,0,4465,28],[7024,53,6351,31,"expr"],[7024,57,4465,28],[7024,59,6351,37],[7025,0,6352,4],[7025,14,6352,8],[7025,19,6352,13,"isRelational"],[7025,31,6352,8],[7025,32,6352,26],[7025,35,6352,8],[7025,36,6352,4],[7025,38,6352,32],[7026,0,6353,6],[7026,16,6353,12,"typeArguments"],[7026,29,6353,25],[7026,32,6353,28],[7026,37,6353,33,"tsParseTypeArguments"],[7026,57,6353,28],[7026,59,6353,6],[7028,0,6355,6],[7028,16,6355,10],[7028,21,6355,15,"match"],[7028,26,6355,10],[7028,27,6355,21,"types"],[7028,32,6355,26],[7028,33,6355,27,"parenL"],[7028,39,6355,10],[7028,40,6355,6],[7028,42,6355,36],[7029,0,6356,8],[7029,18,6356,14,"call"],[7029,22,6356,18],[7029,115,6356,56,"expr"],[7029,119,6356,18],[7029,120,6356,8],[7031,0,6357,8,"call"],[7031,14,6357,8,"call"],[7031,18,6357,12],[7031,19,6357,13,"typeParameters"],[7031,33,6357,8],[7031,36,6357,30,"typeArguments"],[7031,49,6357,8],[7032,0,6358,8],[7032,21,6358,15,"call"],[7032,25,6358,8],[7033,0,6359,7],[7035,0,6361,6],[7035,17,6361,11,"unexpected"],[7035,27,6361,6],[7035,28,6361,22],[7035,33,6361,27,"state"],[7035,38,6361,22],[7035,39,6361,33,"start"],[7035,44,6361,6],[7035,46,6361,40,"types"],[7035,51,6361,45],[7035,52,6361,46,"parenL"],[7035,58,6361,6],[7036,0,6362,5],[7038,0,6364,4],[7038,107,6364,46,"expr"],[7038,111,6364,4],[7039,0,6365,3],[7040,0,4465,28],[7041,0,4465,28],[7042,0,4465,28],[7042,40,6367,18],[7043,0,6368,4],[7043,17,6368,11],[7043,22,6368,16,"isRelational"],[7043,34,6368,11],[7043,35,6368,29],[7043,38,6368,11],[7043,117,6368,4],[7044,0,6369,3],[7045,0,4465,28],[7046,0,4465,28],[7047,0,4465,28],[7047,42,6371,20],[7048,0,6372,4],[7048,17,6372,11],[7048,22,6372,16,"match"],[7048,27,6372,11],[7048,28,6372,22,"types"],[7048,33,6372,27],[7048,34,6372,28,"bang"],[7048,38,6372,11],[7048,43,6372,37],[7048,48,6372,42,"match"],[7048,53,6372,37],[7048,54,6372,48,"types"],[7048,59,6372,53],[7048,60,6372,54,"colon"],[7048,65,6372,37],[7048,66,6372,11],[7048,146,6372,4],[7049,0,6373,3],[7050,0,4465,28],[7051,0,4465,28],[7052,0,4465,28],[7052,44,6375,29],[7053,0,6375,29],[7055,0,6375,29],[7055,45,6375,23,"args"],[7055,49,6375,29],[7056,0,6375,23,"args"],[7056,12,6375,23,"args"],[7056,16,6375,29],[7057,0,6375,29],[7059,0,6376,4],[7059,14,6376,10,"node"],[7059,18,6376,14],[7059,131,6376,44,"args"],[7059,135,6376,14],[7059,137,6376,4],[7061,0,6378,4],[7061,14,6378,8,"node"],[7061,18,6378,12],[7061,19,6378,13,"type"],[7061,23,6378,8],[7061,28,6378,22],[7061,47,6378,8],[7061,51,6378,45,"node"],[7061,55,6378,49],[7061,56,6378,50,"typeAnnotation"],[7061,70,6378,8],[7061,74,6378,68,"node"],[7061,78,6378,72],[7061,79,6378,73,"right"],[7061,84,6378,68],[7061,85,6378,79,"start"],[7061,90,6378,68],[7061,93,6378,87,"node"],[7061,97,6378,91],[7061,98,6378,92,"typeAnnotation"],[7061,112,6378,87],[7061,113,6378,107,"start"],[7061,118,6378,4],[7061,120,6378,114],[7062,0,6379,6],[7062,17,6379,11,"raise"],[7062,22,6379,6],[7062,23,6379,17,"node"],[7062,27,6379,21],[7062,28,6379,22,"typeAnnotation"],[7062,42,6379,17],[7062,43,6379,37,"start"],[7062,48,6379,6],[7062,50,6379,44],[7062,110,6379,104],[7062,169,6379,6],[7063,0,6380,5],[7065,0,6382,4],[7065,17,6382,11,"node"],[7065,21,6382,4],[7066,0,6383,3],[7067,0,4465,28],[7068,0,4465,28],[7069,0,4465,28],[7069,41,6385,19,"code"],[7069,45,4465,28],[7069,47,6385,25],[7070,0,6386,4],[7070,14,6386,8],[7070,19,6386,13,"state"],[7070,24,6386,8],[7070,25,6386,19,"inType"],[7070,31,6386,8],[7070,36,6386,30,"code"],[7070,40,6386,34],[7070,45,6386,39],[7070,47,6386,30],[7070,51,6386,45,"code"],[7070,55,6386,49],[7070,60,6386,54],[7070,62,6386,8],[7070,63,6386,4],[7070,65,6386,59],[7071,0,6387,6],[7071,19,6387,13],[7071,24,6387,18,"finishOp"],[7071,32,6387,13],[7071,33,6387,27,"types"],[7071,38,6387,32],[7071,39,6387,33,"relational"],[7071,49,6387,13],[7071,51,6387,45],[7071,52,6387,13],[7071,53,6387,6],[7072,0,6388,5],[7072,11,6386,4],[7072,17,6388,11],[7073,0,6389,6],[7073,97,6389,36,"code"],[7073,101,6389,6],[7074,0,6390,5],[7075,0,6391,3],[7076,0,4465,28],[7077,0,4465,28],[7078,0,4465,28],[7078,41,6393,19,"exprList"],[7078,49,4465,28],[7078,51,6393,29,"isBinding"],[7078,60,4465,28],[7078,62,6393,40],[7079,0,6394,4],[7079,15,6394,9],[7079,19,6394,13,"i"],[7079,20,6394,14],[7079,23,6394,17],[7079,24,6394,4],[7079,26,6394,20,"i"],[7079,27,6394,21],[7079,30,6394,24,"exprList"],[7079,38,6394,32],[7079,39,6394,33,"length"],[7079,45,6394,4],[7079,47,6394,41,"i"],[7079,48,6394,42],[7079,50,6394,4],[7079,52,6394,46],[7080,0,6395,6],[7080,16,6395,12,"expr"],[7080,20,6395,16],[7080,23,6395,19,"exprList"],[7080,31,6395,27],[7080,32,6395,28,"i"],[7080,33,6395,27],[7080,34,6395,6],[7081,0,6396,6],[7081,16,6396,10],[7081,17,6396,11,"expr"],[7081,21,6396,6],[7081,23,6396,17],[7083,0,6398,6],[7083,20,6398,14,"expr"],[7083,24,6398,18],[7083,25,6398,19,"type"],[7083,29,6398,6],[7084,0,6399,8],[7084,19,6399,13],[7084,41,6399,8],[7085,0,6400,10,"exprList"],[7085,16,6400,10,"exprList"],[7085,24,6400,18],[7085,25,6400,19,"i"],[7085,26,6400,18],[7085,27,6400,10],[7085,30,6400,24],[7085,35,6400,29,"typeCastToParameter"],[7085,54,6400,24],[7085,55,6400,49,"expr"],[7085,59,6400,24],[7085,60,6400,10],[7086,0,6401,10],[7088,0,6403,8],[7088,19,6403,13],[7088,35,6403,8],[7089,0,6404,8],[7089,19,6404,13],[7089,36,6404,8],[7090,0,6405,10],[7090,20,6405,14],[7090,21,6405,15,"isBinding"],[7090,30,6405,10],[7090,32,6405,26],[7091,0,6406,12,"exprList"],[7091,18,6406,12,"exprList"],[7091,26,6406,20],[7091,27,6406,21,"i"],[7091,28,6406,20],[7091,29,6406,12],[7091,32,6406,26],[7091,37,6406,31,"typeCastToParameter"],[7091,56,6406,26],[7091,57,6406,51,"expr"],[7091,61,6406,26],[7091,62,6406,12],[7092,0,6407,11],[7092,17,6405,10],[7092,23,6407,17],[7093,0,6408,12],[7093,23,6408,17,"raise"],[7093,28,6408,12],[7093,29,6408,23,"expr"],[7093,33,6408,27],[7093,34,6408,28,"start"],[7093,39,6408,12],[7093,41,6408,35],[7093,86,6408,12],[7094,0,6409,11],[7096,0,6411,10],[7097,0,6398,6],[7098,0,6413,5],[7100,0,6415,4],[7100,96,6415,37,"arguments"],[7100,105,6415,4],[7101,0,6416,3],[7102,0,4465,28],[7103,0,4465,28],[7104,0,4465,28],[7104,44,6418,22,"node"],[7104,48,4465,28],[7104,50,6418,28],[7105,0,6419,4,"node"],[7105,10,6419,4,"node"],[7105,14,6419,8],[7105,15,6419,9,"expression"],[7105,25,6419,4],[7105,26,6419,20,"typeAnnotation"],[7105,40,6419,4],[7105,43,6419,37,"node"],[7105,47,6419,41],[7105,48,6419,42,"typeAnnotation"],[7105,62,6419,4],[7106,0,6420,4],[7106,15,6420,9,"resetEndLocation"],[7106,31,6420,4],[7106,32,6420,26,"node"],[7106,36,6420,30],[7106,37,6420,31,"expression"],[7106,47,6420,4],[7106,49,6420,43,"node"],[7106,53,6420,47],[7106,54,6420,48,"typeAnnotation"],[7106,68,6420,43],[7106,69,6420,63,"end"],[7106,72,6420,4],[7106,74,6420,68,"node"],[7106,78,6420,72],[7106,79,6420,73,"typeAnnotation"],[7106,93,6420,68],[7106,94,6420,88,"loc"],[7106,97,6420,68],[7106,98,6420,92,"end"],[7106,101,6420,4],[7107,0,6421,4],[7107,17,6421,11,"node"],[7107,21,6421,15],[7107,22,6421,16,"expression"],[7107,32,6421,4],[7108,0,6422,3],[7109,0,4465,28],[7110,0,4465,28],[7111,0,4465,28],[7111,41,6424,19,"exprList"],[7111,49,4465,28],[7111,51,6424,29,"isInParens"],[7111,61,4465,28],[7111,63,6424,41],[7112,0,6425,4],[7112,15,6425,9],[7112,19,6425,13,"i"],[7112,20,6425,14],[7112,23,6425,17],[7112,24,6425,4],[7112,26,6425,20,"i"],[7112,27,6425,21],[7112,30,6425,24,"exprList"],[7112,38,6425,32],[7112,39,6425,33,"length"],[7112,45,6425,4],[7112,47,6425,41,"i"],[7112,48,6425,42],[7112,50,6425,4],[7112,52,6425,46],[7113,0,6426,6],[7113,16,6426,12,"expr"],[7113,20,6426,16],[7113,23,6426,19,"exprList"],[7113,31,6426,27],[7113,32,6426,28,"i"],[7113,33,6426,27],[7113,34,6426,6],[7115,0,6428,6],[7115,16,6428,10,"expr"],[7115,20,6428,14],[7115,24,6428,18,"expr"],[7115,28,6428,22],[7115,29,6428,23,"_exprListItem"],[7115,42,6428,10],[7115,46,6428,40,"expr"],[7115,50,6428,44],[7115,51,6428,45,"type"],[7115,55,6428,40],[7115,60,6428,54],[7115,82,6428,6],[7115,84,6428,78],[7116,0,6429,8],[7116,19,6429,13,"raise"],[7116,24,6429,8],[7116,25,6429,19,"expr"],[7116,29,6429,23],[7116,30,6429,24,"start"],[7116,35,6429,8],[7116,37,6429,31],[7116,77,6429,8],[7117,0,6430,7],[7118,0,6431,5],[7120,0,6433,4],[7120,17,6433,11,"exprList"],[7120,25,6433,4],[7121,0,6434,3],[7122,0,4465,28],[7123,0,4465,28],[7124,0,4465,28],[7124,43,6436,21],[7125,0,6437,4],[7125,17,6437,11],[7125,22,6437,16,"match"],[7125,27,6437,11],[7125,28,6437,22,"types"],[7125,33,6437,27],[7125,34,6437,28,"colon"],[7125,39,6437,11],[7125,121,6437,4],[7126,0,6438,3],[7127,0,4465,28],[7128,0,4465,28],[7129,0,4465,28],[7129,48,6440,26],[7130,0,6441,4],[7130,17,6441,11],[7130,22,6441,16,"match"],[7130,27,6441,11],[7130,28,6441,22,"types"],[7130,33,6441,27],[7130,34,6441,28,"colon"],[7130,39,6441,11],[7130,126,6441,4],[7131,0,6442,3],[7132,0,4465,28],[7133,0,4465,28],[7134,0,4465,28],[7134,50,6444,28],[7135,0,6445,4],[7135,17,6445,11],[7135,105,6445,46],[7135,110,6445,51,"isAbstractClass"],[7135,125,6445,46],[7135,127,6445,4],[7136,0,6446,3],[7137,0,4465,28],[7138,0,4465,28],[7139,0,4465,28],[7139,56,6448,34,"node"],[7139,60,4465,28],[7139,62,6448,40],[7140,0,6448,40],[7142,0,6449,4],[7142,14,6449,8],[7142,19,6449,13,"isRelational"],[7142,31,6449,8],[7142,32,6449,26],[7142,35,6449,8],[7142,36,6449,4],[7142,38,6449,32],[7143,0,6450,6],[7143,16,6450,12,"typeArguments"],[7143,29,6450,25],[7143,32,6450,28],[7143,37,6450,33,"tsTryParseAndCatch"],[7143,55,6450,28],[7143,56,6450,52],[7144,0,6450,52],[7144,21,6450,58],[7144,28,6450,62],[7144,29,6450,63,"tsParseTypeArguments"],[7144,49,6450,58],[7144,51,6450,52],[7145,0,6450,52],[7145,13,6450,28],[7145,14,6450,6],[7146,0,6451,6],[7146,16,6451,10,"typeArguments"],[7146,29,6451,6],[7146,31,6451,25,"node"],[7146,35,6451,29],[7146,36,6451,30,"typeParameters"],[7146,50,6451,25],[7146,53,6451,47,"typeArguments"],[7146,66,6451,25],[7147,0,6452,5],[7149,0,6454,4],[7149,110,6454,49,"node"],[7149,114,6454,4],[7150,0,6455,3],[7151,0,4465,28],[7152,0,4465,28],[7153,0,4465,28],[7153,58,6457,36,"method"],[7153,64,4465,28],[7153,66,6457,44],[7154,0,6458,4],[7154,14,6458,10,"baseCount"],[7154,23,6458,19],[7154,121,6458,62,"method"],[7154,127,6458,19],[7154,128,6458,4],[7156,0,6459,4],[7156,14,6459,10,"firstParam"],[7156,24,6459,20],[7156,27,6459,23,"method"],[7156,33,6459,29],[7156,34,6459,30,"params"],[7156,40,6459,23],[7156,41,6459,37],[7156,42,6459,23],[7156,43,6459,4],[7157,0,6460,4],[7157,14,6460,10,"hasContextParam"],[7157,29,6460,25],[7157,32,6460,28,"firstParam"],[7157,42,6460,38],[7157,46,6460,42,"firstParam"],[7157,56,6460,52],[7157,57,6460,53,"type"],[7157,61,6460,42],[7157,66,6460,62],[7157,78,6460,28],[7157,82,6460,78,"firstParam"],[7157,92,6460,88],[7157,93,6460,89,"name"],[7157,97,6460,78],[7157,102,6460,98],[7157,108,6460,4],[7158,0,6461,4],[7158,17,6461,11,"hasContextParam"],[7158,32,6461,26],[7158,35,6461,29,"baseCount"],[7158,44,6461,38],[7158,47,6461,41],[7158,48,6461,26],[7158,51,6461,45,"baseCount"],[7158,60,6461,4],[7159,0,6462,3],[7160,0,4465,28],[7162,0,4465,28],[7163,0,4465,28],[7163,6,4465,46,"superClass"],[7163,16,4465,28],[7164,0,4465,28],[7164,3,4465,0],[7166,0,6466,0,"types"],[7166,2,6466,0,"types"],[7166,7,6466,5],[7166,8,6466,6,"placeholder"],[7166,19,6466,0],[7166,22,6466,20],[7166,26,6466,24,"TokenType"],[7166,35,6466,20],[7166,36,6466,34],[7166,40,6466,20],[7166,42,6466,40],[7167,0,6467,2,"startsExpr"],[7167,4,6467,2,"startsExpr"],[7167,14,6467,12],[7167,16,6467,14],[7168,0,6466,40],[7168,3,6466,20],[7168,4,6466,0],[7170,0,6469,0],[7170,6,6469,4,"placeholders"],[7170,18,6469,16],[7170,21,6469,20],[7170,30,6469,4,"placeholders"],[7170,42,6469,20],[7170,43,6469,20,"superClass"],[7170,53,6469,30],[7171,0,6469,30],[7172,0,6469,30],[7174,0,6469,30],[7175,0,6469,30],[7177,0,6469,30],[7178,0,6469,30],[7180,0,6469,30],[7181,0,6469,30],[7182,0,6469,30],[7182,41,6470,19,"expectedNode"],[7182,53,6469,30],[7182,55,6470,33],[7183,0,6471,4],[7183,14,6471,8],[7183,19,6471,13,"match"],[7183,24,6471,8],[7183,25,6471,19,"types"],[7183,30,6471,24],[7183,31,6471,25,"placeholder"],[7183,42,6471,8],[7183,43,6471,4],[7183,45,6471,39],[7184,0,6472,6],[7184,16,6472,12,"node"],[7184,20,6472,16],[7184,23,6472,19],[7184,28,6472,24,"startNode"],[7184,37,6472,19],[7184,39,6472,6],[7185,0,6473,6],[7185,17,6473,11,"next"],[7185,21,6473,6],[7186,0,6474,6],[7186,17,6474,11,"assertNoSpace"],[7186,30,6474,6],[7186,31,6474,25],[7186,65,6474,6],[7187,0,6475,6,"node"],[7187,12,6475,6,"node"],[7187,16,6475,10],[7187,17,6475,11,"name"],[7187,21,6475,6],[7187,101,6475,40],[7187,105,6475,6],[7188,0,6476,6],[7188,17,6476,11,"assertNoSpace"],[7188,30,6476,6],[7188,31,6476,25],[7188,65,6476,6],[7189,0,6477,6],[7189,17,6477,11,"expect"],[7189,23,6477,6],[7189,24,6477,18,"types"],[7189,29,6477,23],[7189,30,6477,24,"placeholder"],[7189,41,6477,6],[7190,0,6478,6],[7190,19,6478,13],[7190,24,6478,18,"finishPlaceholder"],[7190,41,6478,13],[7190,42,6478,36,"node"],[7190,46,6478,13],[7190,48,6478,42,"expectedNode"],[7190,60,6478,13],[7190,61,6478,6],[7191,0,6479,5],[7192,0,6480,3],[7193,0,6469,30],[7194,0,6469,30],[7195,0,6469,30],[7195,42,6482,20,"node"],[7195,46,6469,30],[7195,48,6482,26,"expectedNode"],[7195,60,6469,30],[7195,62,6482,40],[7196,0,6483,4],[7196,14,6483,10,"isFinished"],[7196,24,6483,20],[7196,27,6483,23],[7196,28,6483,24],[7196,30,6483,26,"node"],[7196,34,6483,30],[7196,35,6483,31,"expectedNode"],[7196,47,6483,26],[7196,51,6483,47,"node"],[7196,55,6483,51],[7196,56,6483,52,"type"],[7196,60,6483,47],[7196,65,6483,61],[7196,78,6483,24],[7196,79,6483,4],[7197,0,6484,4,"node"],[7197,10,6484,4,"node"],[7197,14,6484,8],[7197,15,6484,9,"expectedNode"],[7197,27,6484,4],[7197,30,6484,24,"expectedNode"],[7197,42,6484,4],[7198,0,6485,4],[7198,17,6485,11,"isFinished"],[7198,27,6485,21],[7198,30,6485,24,"node"],[7198,34,6485,21],[7198,37,6485,31],[7198,42,6485,36,"finishNode"],[7198,52,6485,31],[7198,53,6485,47,"node"],[7198,57,6485,31],[7198,59,6485,53],[7198,72,6485,31],[7198,73,6485,4],[7199,0,6486,3],[7200,0,6469,30],[7201,0,6469,30],[7202,0,6469,30],[7202,41,6488,19,"code"],[7202,45,6469,30],[7202,47,6488,25],[7203,0,6489,4],[7203,14,6489,8,"code"],[7203,18,6489,12],[7203,23,6489,17],[7203,25,6489,8],[7203,29,6489,23],[7203,34,6489,28,"input"],[7203,39,6489,23],[7203,40,6489,34,"charCodeAt"],[7203,50,6489,23],[7203,51,6489,45],[7203,56,6489,50,"state"],[7203,61,6489,45],[7203,62,6489,56,"pos"],[7203,65,6489,45],[7203,68,6489,62],[7203,69,6489,23],[7203,75,6489,69],[7203,77,6489,4],[7203,79,6489,73],[7204,0,6490,6],[7204,19,6490,13],[7204,24,6490,18,"finishOp"],[7204,32,6490,13],[7204,33,6490,27,"types"],[7204,38,6490,32],[7204,39,6490,33,"placeholder"],[7204,50,6490,13],[7204,52,6490,46],[7204,53,6490,13],[7204,54,6490,6],[7205,0,6491,5],[7207,0,6493,4],[7207,96,6493,37,"arguments"],[7207,105,6493,4],[7208,0,6494,3],[7209,0,6469,30],[7210,0,6469,30],[7211,0,6469,30],[7211,40,6496,18],[7212,0,6497,4],[7212,17,6497,11],[7212,22,6497,16,"parsePlaceholder"],[7212,38,6497,11],[7212,39,6497,33],[7212,51,6497,11],[7212,132,6497,73,"arguments"],[7212,141,6497,11],[7212,142,6497,4],[7213,0,6498,3],[7214,0,6469,30],[7215,0,6469,30],[7216,0,6469,30],[7216,42,6500,20],[7217,0,6501,4],[7217,17,6501,11],[7217,22,6501,16,"parsePlaceholder"],[7217,38,6501,11],[7217,39,6501,33],[7217,51,6501,11],[7217,134,6501,75,"arguments"],[7217,143,6501,11],[7217,144,6501,4],[7218,0,6502,3],[7219,0,6469,30],[7220,0,6469,30],[7221,0,6469,30],[7221,42,6504,20,"word"],[7221,46,6469,30],[7221,48,6504,26],[7222,0,6505,4],[7222,14,6505,8,"word"],[7222,18,6505,12],[7222,23,6505,17,"undefined"],[7222,32,6505,4],[7222,34,6505,28],[7222,114,6505,55,"arguments"],[7222,123,6505,28],[7223,0,6506,3],[7224,0,6469,30],[7225,0,6469,30],[7226,0,6469,30],[7226,43,6508,21],[7227,0,6509,4],[7227,17,6509,11],[7227,22,6509,16,"parsePlaceholder"],[7227,38,6509,11],[7227,39,6509,33],[7227,48,6509,11],[7227,132,6509,73,"arguments"],[7227,141,6509,11],[7227,142,6509,4],[7228,0,6510,3],[7229,0,6469,30],[7230,0,6469,30],[7231,0,6469,30],[7231,34,6512,12,"expr"],[7231,38,6469,30],[7231,40,6512,18],[7232,0,6513,4],[7232,14,6513,8,"expr"],[7232,18,6513,12],[7232,19,6513,13,"type"],[7232,23,6513,8],[7232,28,6513,22],[7232,41,6513,4],[7232,43,6513,37],[7232,115,6513,56,"arguments"],[7232,124,6513,37],[7233,0,6514,3],[7234,0,6469,30],[7235,0,6469,30],[7236,0,6469,30],[7236,37,6516,15,"node"],[7236,41,6469,30],[7236,43,6516,21],[7237,0,6517,4],[7237,14,6517,8,"node"],[7237,18,6517,12],[7237,22,6517,16,"node"],[7237,26,6517,20],[7237,27,6517,21,"type"],[7237,31,6517,16],[7237,36,6517,30],[7237,49,6517,8],[7237,53,6517,47,"node"],[7237,57,6517,51],[7237,58,6517,52,"expectedNode"],[7237,70,6517,47],[7237,75,6517,69],[7237,87,6517,4],[7237,89,6517,83],[7238,0,6518,6,"node"],[7238,12,6518,6,"node"],[7238,16,6518,10],[7238,17,6518,11,"expectedNode"],[7238,29,6518,6],[7238,32,6518,26],[7238,41,6518,6],[7239,0,6519,6],[7239,19,6519,13,"node"],[7239,23,6519,6],[7240,0,6520,5],[7242,0,6522,4],[7242,92,6522,33,"arguments"],[7242,101,6522,4],[7243,0,6523,3],[7244,0,6469,30],[7245,0,6469,30],[7246,0,6469,30],[7246,44,6525,22,"node"],[7246,48,6469,30],[7246,50,6525,28],[7247,0,6526,4],[7247,14,6526,8,"node"],[7247,18,6526,12],[7247,19,6526,13,"label"],[7247,24,6526,8],[7247,28,6526,22,"node"],[7247,32,6526,26],[7247,33,6526,27,"label"],[7247,38,6526,22],[7247,39,6526,33,"type"],[7247,43,6526,22],[7247,48,6526,42],[7247,61,6526,4],[7247,63,6526,57],[7249,0,6527,4],[7249,92,6527,33,"arguments"],[7249,101,6527,4],[7250,0,6528,3],[7251,0,6469,30],[7252,0,6469,30],[7253,0,6469,30],[7253,49,6530,27,"node"],[7253,53,6469,30],[7253,55,6530,33,"expr"],[7253,59,6469,30],[7253,61,6530,39],[7254,0,6531,4],[7254,14,6531,8,"expr"],[7254,18,6531,12],[7254,19,6531,13,"type"],[7254,23,6531,8],[7254,28,6531,22],[7254,41,6531,8],[7254,45,6531,39,"expr"],[7254,49,6531,43],[7254,50,6531,44,"extra"],[7254,55,6531,39],[7254,59,6531,53,"expr"],[7254,63,6531,57],[7254,64,6531,58,"extra"],[7254,69,6531,53],[7254,70,6531,64,"parenthesized"],[7254,83,6531,4],[7254,85,6531,79],[7255,0,6532,6],[7255,106,6532,47,"arguments"],[7255,115,6532,6],[7256,0,6533,5],[7258,0,6535,4],[7258,14,6535,8],[7258,19,6535,13,"match"],[7258,24,6535,8],[7258,25,6535,19,"types"],[7258,30,6535,24],[7258,31,6535,25,"colon"],[7258,36,6535,8],[7258,37,6535,4],[7258,39,6535,33],[7259,0,6536,6],[7259,16,6536,12,"stmt"],[7259,20,6536,16],[7259,23,6536,19,"node"],[7259,27,6536,6],[7260,0,6537,6,"stmt"],[7260,12,6537,6,"stmt"],[7260,16,6537,10],[7260,17,6537,11,"label"],[7260,22,6537,6],[7260,25,6537,19],[7260,30,6537,24,"finishPlaceholder"],[7260,47,6537,19],[7260,48,6537,42,"expr"],[7260,52,6537,19],[7260,54,6537,48],[7260,66,6537,19],[7260,67,6537,6],[7261,0,6538,6],[7261,17,6538,11,"next"],[7261,21,6538,6],[7262,0,6539,6,"stmt"],[7262,12,6539,6,"stmt"],[7262,16,6539,10],[7262,17,6539,11,"body"],[7262,21,6539,6],[7262,24,6539,18],[7262,29,6539,23,"parseStatement"],[7262,43,6539,18],[7262,44,6539,38],[7262,51,6539,18],[7262,52,6539,6],[7263,0,6540,6],[7263,19,6540,13],[7263,24,6540,18,"finishNode"],[7263,34,6540,13],[7263,35,6540,29,"stmt"],[7263,39,6540,13],[7263,41,6540,35],[7263,59,6540,13],[7263,60,6540,6],[7264,0,6541,5],[7266,0,6543,4],[7266,15,6543,9,"semicolon"],[7266,24,6543,4],[7267,0,6544,4,"node"],[7267,10,6544,4,"node"],[7267,14,6544,8],[7267,15,6544,9,"name"],[7267,19,6544,4],[7267,22,6544,16,"expr"],[7267,26,6544,20],[7267,27,6544,21,"name"],[7267,31,6544,4],[7268,0,6545,4],[7268,17,6545,11],[7268,22,6545,16,"finishPlaceholder"],[7268,39,6545,11],[7268,40,6545,34,"node"],[7268,44,6545,11],[7268,46,6545,40],[7268,57,6545,11],[7268,58,6545,4],[7269,0,6546,3],[7270,0,6469,30],[7271,0,6469,30],[7272,0,6469,30],[7272,37,6548,15],[7273,0,6549,4],[7273,17,6549,11],[7273,22,6549,16,"parsePlaceholder"],[7273,38,6549,11],[7273,39,6549,33],[7273,55,6549,11],[7273,133,6549,74,"arguments"],[7273,142,6549,11],[7273,143,6549,4],[7274,0,6550,3],[7275,0,6469,30],[7276,0,6469,30],[7277,0,6469,30],[7277,42,6552,20],[7278,0,6553,4],[7278,17,6553,11],[7278,22,6553,16,"parsePlaceholder"],[7278,38,6553,11],[7278,39,6553,33],[7278,51,6553,11],[7278,134,6553,75,"arguments"],[7278,143,6553,11],[7278,144,6553,4],[7279,0,6554,3],[7280,0,6469,30],[7281,0,6469,30],[7282,0,6469,30],[7282,35,6556,13,"node"],[7282,39,6469,30],[7282,41,6556,19,"isStatement"],[7282,52,6469,30],[7282,54,6556,32,"optionalId"],[7282,64,6469,30],[7282,66,6556,44],[7283,0,6557,4],[7283,14,6557,10,"type"],[7283,18,6557,14],[7283,21,6557,17,"isStatement"],[7283,32,6557,28],[7283,35,6557,31],[7283,53,6557,28],[7283,56,6557,52],[7283,73,6557,4],[7284,0,6558,4],[7284,15,6558,9,"next"],[7284,19,6558,4],[7285,0,6559,4],[7285,15,6559,9,"takeDecorators"],[7285,29,6559,4],[7285,30,6559,24,"node"],[7285,34,6559,4],[7286,0,6560,4],[7286,14,6560,10,"placeholder"],[7286,25,6560,21],[7286,28,6560,24],[7286,33,6560,29,"parsePlaceholder"],[7286,49,6560,24],[7286,50,6560,46],[7286,62,6560,24],[7286,63,6560,4],[7288,0,6562,4],[7288,14,6562,8,"placeholder"],[7288,25,6562,4],[7288,27,6562,21],[7289,0,6563,6],[7289,16,6563,10],[7289,21,6563,15,"match"],[7289,26,6563,10],[7289,27,6563,21,"types"],[7289,32,6563,26],[7289,33,6563,27,"_extends"],[7289,41,6563,10],[7289,46,6563,40],[7289,51,6563,45,"match"],[7289,56,6563,40],[7289,57,6563,51,"types"],[7289,62,6563,56],[7289,63,6563,57,"placeholder"],[7289,74,6563,40],[7289,75,6563,10],[7289,79,6563,73],[7289,84,6563,78,"match"],[7289,89,6563,73],[7289,90,6563,84,"types"],[7289,95,6563,89],[7289,96,6563,90,"braceL"],[7289,102,6563,73],[7289,103,6563,6],[7289,105,6563,99],[7290,0,6564,8,"node"],[7290,14,6564,8,"node"],[7290,18,6564,12],[7290,19,6564,13,"id"],[7290,21,6564,8],[7290,24,6564,18,"placeholder"],[7290,35,6564,8],[7291,0,6565,7],[7291,13,6563,6],[7291,19,6565,13],[7291,23,6565,17,"optionalId"],[7291,33,6565,27],[7291,37,6565,31],[7291,38,6565,32,"isStatement"],[7291,49,6565,13],[7291,51,6565,45],[7292,0,6566,8,"node"],[7292,14,6566,8,"node"],[7292,18,6566,12],[7292,19,6566,13,"id"],[7292,21,6566,8],[7292,24,6566,18],[7292,28,6566,8],[7293,0,6567,8,"node"],[7293,14,6567,8,"node"],[7293,18,6567,12],[7293,19,6567,13,"body"],[7293,23,6567,8],[7293,26,6567,20],[7293,31,6567,25,"finishPlaceholder"],[7293,48,6567,20],[7293,49,6567,43,"placeholder"],[7293,60,6567,20],[7293,62,6567,56],[7293,73,6567,20],[7293,74,6567,8],[7294,0,6568,8],[7294,21,6568,15],[7294,26,6568,20,"finishNode"],[7294,36,6568,15],[7294,37,6568,31,"node"],[7294,41,6568,15],[7294,43,6568,37,"type"],[7294,47,6568,15],[7294,48,6568,8],[7295,0,6569,7],[7295,13,6565,13],[7295,19,6569,13],[7296,0,6570,8],[7296,19,6570,13,"unexpected"],[7296,29,6570,8],[7296,30,6570,24],[7296,34,6570,8],[7296,36,6570,30],[7296,62,6570,8],[7297,0,6571,7],[7298,0,6572,5],[7298,11,6562,4],[7298,17,6572,11],[7299,0,6573,6],[7299,17,6573,11,"parseClassId"],[7299,29,6573,6],[7299,30,6573,24,"node"],[7299,34,6573,6],[7299,36,6573,30,"isStatement"],[7299,47,6573,6],[7299,49,6573,43,"optionalId"],[7299,59,6573,6],[7300,0,6574,5],[7302,0,6576,4],[7302,15,6576,9,"parseClassSuper"],[7302,30,6576,4],[7302,31,6576,25,"node"],[7302,35,6576,4],[7303,0,6577,4,"node"],[7303,10,6577,4,"node"],[7303,14,6577,8],[7303,15,6577,9,"body"],[7303,19,6577,4],[7303,22,6577,16],[7303,27,6577,21,"parsePlaceholder"],[7303,43,6577,16],[7303,44,6577,38],[7303,55,6577,16],[7303,60,6577,54],[7303,65,6577,59,"parseClassBody"],[7303,79,6577,54],[7303,80,6577,74],[7303,81,6577,75],[7303,82,6577,76,"node"],[7303,86,6577,80],[7303,87,6577,81,"superClass"],[7303,97,6577,54],[7303,98,6577,4],[7304,0,6578,4],[7304,17,6578,11],[7304,22,6578,16,"finishNode"],[7304,32,6578,11],[7304,33,6578,27,"node"],[7304,37,6578,11],[7304,39,6578,33,"type"],[7304,43,6578,11],[7304,44,6578,4],[7305,0,6579,3],[7306,0,6469,30],[7307,0,6469,30],[7308,0,6469,30],[7308,36,6581,14,"node"],[7308,40,6469,30],[7308,42,6581,20],[7309,0,6582,4],[7309,14,6582,10,"placeholder"],[7309,25,6582,21],[7309,28,6582,24],[7309,33,6582,29,"parsePlaceholder"],[7309,49,6582,24],[7309,50,6582,46],[7309,62,6582,24],[7309,63,6582,4],[7310,0,6583,4],[7310,14,6583,8],[7310,15,6583,9,"placeholder"],[7310,26,6583,4],[7310,28,6583,22],[7310,109,6583,50,"arguments"],[7310,118,6583,22],[7312,0,6585,4],[7312,14,6585,8],[7312,15,6585,9],[7312,20,6585,14,"isContextual"],[7312,32,6585,9],[7312,33,6585,27],[7312,39,6585,9],[7312,40,6585,8],[7312,44,6585,38],[7312,45,6585,39],[7312,50,6585,44,"match"],[7312,55,6585,39],[7312,56,6585,50,"types"],[7312,61,6585,55],[7312,62,6585,56,"comma"],[7312,67,6585,39],[7312,68,6585,4],[7312,70,6585,64],[7313,0,6586,6,"node"],[7313,12,6586,6,"node"],[7313,16,6586,10],[7313,17,6586,11,"specifiers"],[7313,27,6586,6],[7313,30,6586,24],[7313,32,6586,6],[7314,0,6587,6,"node"],[7314,12,6587,6,"node"],[7314,16,6587,10],[7314,17,6587,11,"source"],[7314,23,6587,6],[7314,26,6587,20],[7314,30,6587,6],[7315,0,6588,6,"node"],[7315,12,6588,6,"node"],[7315,16,6588,10],[7315,17,6588,11,"declaration"],[7315,28,6588,6],[7315,31,6588,25],[7315,36,6588,30,"finishPlaceholder"],[7315,53,6588,25],[7315,54,6588,48,"placeholder"],[7315,65,6588,25],[7315,67,6588,61],[7315,80,6588,25],[7315,81,6588,6],[7316,0,6589,6],[7316,19,6589,13],[7316,24,6589,18,"finishNode"],[7316,34,6589,13],[7316,35,6589,29,"node"],[7316,39,6589,13],[7316,41,6589,35],[7316,65,6589,13],[7316,66,6589,6],[7317,0,6590,5],[7319,0,6592,4],[7319,15,6592,9,"expectPlugin"],[7319,27,6592,4],[7319,28,6592,22],[7319,47,6592,4],[7320,0,6593,4],[7320,14,6593,10,"specifier"],[7320,23,6593,19],[7320,26,6593,22],[7320,31,6593,27,"startNode"],[7320,40,6593,22],[7320,42,6593,4],[7321,0,6594,4,"specifier"],[7321,10,6594,4,"specifier"],[7321,19,6594,13],[7321,20,6594,14,"exported"],[7321,28,6594,4],[7321,31,6594,25,"placeholder"],[7321,42,6594,4],[7322,0,6595,4,"node"],[7322,10,6595,4,"node"],[7322,14,6595,8],[7322,15,6595,9,"specifiers"],[7322,25,6595,4],[7322,28,6595,22],[7322,29,6595,23],[7322,34,6595,28,"finishNode"],[7322,44,6595,23],[7322,45,6595,39,"specifier"],[7322,54,6595,23],[7322,56,6595,50],[7322,80,6595,23],[7322,81,6595,22],[7322,82,6595,4],[7323,0,6596,4],[7323,90,6596,29,"node"],[7323,94,6596,4],[7324,0,6597,3],[7325,0,6469,30],[7326,0,6469,30],[7327,0,6469,30],[7327,57,6599,35,"node"],[7327,61,6469,30],[7327,63,6599,41],[7328,0,6600,4],[7328,14,6600,8,"node"],[7328,18,6600,12],[7328,19,6600,13,"specifiers"],[7328,29,6600,8],[7328,33,6600,27,"node"],[7328,37,6600,31],[7328,38,6600,32,"specifiers"],[7328,48,6600,27],[7328,49,6600,43,"length"],[7328,55,6600,27],[7328,58,6600,52],[7328,59,6600,4],[7328,61,6600,55],[7329,0,6601,6],[7329,19,6601,13],[7329,23,6601,6],[7330,0,6602,5],[7332,0,6604,4],[7332,112,6604,53,"arguments"],[7332,121,6604,4],[7333,0,6605,3],[7334,0,6469,30],[7335,0,6469,30],[7336,0,6469,30],[7336,36,6607,14,"node"],[7336,40,6469,30],[7336,42,6607,20],[7337,0,6607,20],[7337,14,6609,6,"specifiers"],[7337,24,6607,20],[7337,27,6610,8,"node"],[7337,31,6607,20],[7337,32,6609,6,"specifiers"],[7337,42,6607,20],[7339,0,6612,4],[7339,14,6612,8,"specifiers"],[7339,24,6612,18],[7339,28,6612,22,"specifiers"],[7339,38,6612,32],[7339,39,6612,33,"length"],[7339,45,6612,4],[7339,47,6612,41],[7340,0,6613,6,"node"],[7340,12,6613,6,"node"],[7340,16,6613,10],[7340,17,6613,11,"specifiers"],[7340,27,6613,6],[7340,30,6613,24,"specifiers"],[7340,40,6613,34],[7340,41,6613,35,"filter"],[7340,47,6613,24],[7340,48,6613,42],[7340,58,6613,42,"node"],[7340,62,6613,46],[7341,0,6613,46],[7341,21,6613,50,"node"],[7341,25,6613,54],[7341,26,6613,55,"exported"],[7341,34,6613,50],[7341,35,6613,64,"type"],[7341,39,6613,50],[7341,44,6613,73],[7341,57,6613,46],[7342,0,6613,46],[7342,13,6613,24],[7342,14,6613,6],[7343,0,6614,5],[7345,0,6616,4],[7345,83,6616,22,"node"],[7345,87,6616,4],[7347,0,6617,4,"node"],[7347,10,6617,4,"node"],[7347,14,6617,8],[7347,15,6617,9,"specifiers"],[7347,25,6617,4],[7347,28,6617,22,"specifiers"],[7347,38,6617,4],[7348,0,6618,3],[7349,0,6469,30],[7350,0,6469,30],[7351,0,6469,30],[7351,36,6620,14,"node"],[7351,40,6469,30],[7351,42,6620,20],[7352,0,6621,4],[7352,14,6621,10,"placeholder"],[7352,25,6621,21],[7352,28,6621,24],[7352,33,6621,29,"parsePlaceholder"],[7352,49,6621,24],[7352,50,6621,46],[7352,62,6621,24],[7352,63,6621,4],[7353,0,6622,4],[7353,14,6622,8],[7353,15,6622,9,"placeholder"],[7353,26,6622,4],[7353,28,6622,22],[7353,109,6622,50,"arguments"],[7353,118,6622,22],[7354,0,6623,4,"node"],[7354,10,6623,4,"node"],[7354,14,6623,8],[7354,15,6623,9,"specifiers"],[7354,25,6623,4],[7354,28,6623,22],[7354,30,6623,4],[7356,0,6625,4],[7356,14,6625,8],[7356,15,6625,9],[7356,20,6625,14,"isContextual"],[7356,32,6625,9],[7356,33,6625,27],[7356,39,6625,9],[7356,40,6625,8],[7356,44,6625,38],[7356,45,6625,39],[7356,50,6625,44,"match"],[7356,55,6625,39],[7356,56,6625,50,"types"],[7356,61,6625,55],[7356,62,6625,56,"comma"],[7356,67,6625,39],[7356,68,6625,4],[7356,70,6625,64],[7357,0,6626,6,"node"],[7357,12,6626,6,"node"],[7357,16,6626,10],[7357,17,6626,11,"source"],[7357,23,6626,6],[7357,26,6626,20],[7357,31,6626,25,"finishPlaceholder"],[7357,48,6626,20],[7357,49,6626,43,"placeholder"],[7357,60,6626,20],[7357,62,6626,56],[7357,77,6626,20],[7357,78,6626,6],[7358,0,6627,6],[7358,17,6627,11,"semicolon"],[7358,26,6627,6],[7359,0,6628,6],[7359,19,6628,13],[7359,24,6628,18,"finishNode"],[7359,34,6628,13],[7359,35,6628,29,"node"],[7359,39,6628,13],[7359,41,6628,35],[7359,60,6628,13],[7359,61,6628,6],[7360,0,6629,5],[7362,0,6631,4],[7362,14,6631,10,"specifier"],[7362,23,6631,19],[7362,26,6631,22],[7362,31,6631,27,"startNodeAtNode"],[7362,46,6631,22],[7362,47,6631,43,"placeholder"],[7362,58,6631,22],[7362,59,6631,4],[7363,0,6632,4,"specifier"],[7363,10,6632,4,"specifier"],[7363,19,6632,13],[7363,20,6632,14,"local"],[7363,25,6632,4],[7363,28,6632,22,"placeholder"],[7363,39,6632,4],[7364,0,6633,4],[7364,15,6633,9,"finishNode"],[7364,25,6633,4],[7364,26,6633,20,"specifier"],[7364,35,6633,4],[7364,37,6633,31],[7364,61,6633,4],[7365,0,6634,4,"node"],[7365,10,6634,4,"node"],[7365,14,6634,8],[7365,15,6634,9,"specifiers"],[7365,25,6634,4],[7365,26,6634,20,"push"],[7365,30,6634,4],[7365,31,6634,25,"specifier"],[7365,40,6634,4],[7367,0,6636,4],[7367,14,6636,8],[7367,19,6636,13,"eat"],[7367,22,6636,8],[7367,23,6636,17,"types"],[7367,28,6636,22],[7367,29,6636,23,"comma"],[7367,34,6636,8],[7367,35,6636,4],[7367,37,6636,31],[7368,0,6637,6],[7368,16,6637,12,"hasStarImport"],[7368,29,6637,25],[7368,32,6637,28],[7368,37,6637,33,"maybeParseStarImportSpecifier"],[7368,66,6637,28],[7368,67,6637,63,"node"],[7368,71,6637,28],[7368,72,6637,6],[7369,0,6638,6],[7369,16,6638,10],[7369,17,6638,11,"hasStarImport"],[7369,30,6638,6],[7369,32,6638,26],[7369,37,6638,31,"parseNamedImportSpecifiers"],[7369,63,6638,26],[7369,64,6638,58,"node"],[7369,68,6638,26],[7370,0,6639,5],[7372,0,6641,4],[7372,15,6641,9,"expectContextual"],[7372,31,6641,4],[7372,32,6641,26],[7372,38,6641,4],[7373,0,6642,4,"node"],[7373,10,6642,4,"node"],[7373,14,6642,8],[7373,15,6642,9,"source"],[7373,21,6642,4],[7373,24,6642,18],[7373,29,6642,23,"parseImportSource"],[7373,46,6642,18],[7373,48,6642,4],[7374,0,6643,4],[7374,15,6643,9,"semicolon"],[7374,24,6643,4],[7375,0,6644,4],[7375,17,6644,11],[7375,22,6644,16,"finishNode"],[7375,32,6644,11],[7375,33,6644,27,"node"],[7375,37,6644,11],[7375,39,6644,33],[7375,58,6644,11],[7375,59,6644,4],[7376,0,6645,3],[7377,0,6469,30],[7378,0,6469,30],[7379,0,6469,30],[7379,44,6647,22],[7380,0,6648,4],[7380,17,6648,11],[7380,22,6648,16,"parsePlaceholder"],[7380,38,6648,11],[7380,39,6648,33],[7380,54,6648,11],[7380,139,6648,80,"arguments"],[7380,148,6648,11],[7380,149,6648,4],[7381,0,6649,3],[7382,0,6469,30],[7384,0,6469,30],[7385,0,6469,30],[7385,6,6469,48,"superClass"],[7385,16,6469,30],[7386,0,6469,30],[7386,3,6469,0],[7388,0,6653,0],[7388,6,6653,4,"v8intrinsic"],[7388,17,6653,15],[7388,20,6653,19],[7388,29,6653,4,"v8intrinsic"],[7388,40,6653,19],[7388,41,6653,19,"superClass"],[7388,51,6653,29],[7389,0,6653,29],[7390,0,6653,29],[7392,0,6653,29],[7393,0,6653,29],[7395,0,6653,29],[7396,0,6653,29],[7398,0,6653,29],[7399,0,6653,29],[7400,0,6653,29],[7400,43,6654,21],[7401,0,6655,4],[7401,14,6655,8],[7401,19,6655,13,"match"],[7401,24,6655,8],[7401,25,6655,19,"types"],[7401,30,6655,24],[7401,31,6655,25,"modulo"],[7401,37,6655,8],[7401,38,6655,4],[7401,40,6655,34],[7402,0,6656,6],[7402,16,6656,12,"v8IntrinsicStart"],[7402,32,6656,28],[7402,35,6656,31],[7402,40,6656,36,"state"],[7402,45,6656,31],[7402,46,6656,42,"start"],[7402,51,6656,6],[7403,0,6657,6],[7403,16,6657,12,"node"],[7403,20,6657,16],[7403,23,6657,19],[7403,28,6657,24,"startNode"],[7403,37,6657,19],[7403,39,6657,6],[7404,0,6658,6],[7404,17,6658,11,"eat"],[7404,20,6658,6],[7404,21,6658,15,"types"],[7404,26,6658,20],[7404,27,6658,21,"modulo"],[7404,33,6658,6],[7406,0,6660,6],[7406,16,6660,10],[7406,21,6660,15,"match"],[7406,26,6660,10],[7406,27,6660,21,"types"],[7406,32,6660,26],[7406,33,6660,27,"name"],[7406,37,6660,10],[7406,38,6660,6],[7406,40,6660,34],[7407,0,6661,8],[7407,18,6661,14,"name"],[7407,22,6661,18],[7407,25,6661,21],[7407,30,6661,26,"parseIdentifierName"],[7407,49,6661,21],[7407,50,6661,46],[7407,55,6661,51,"state"],[7407,60,6661,46],[7407,61,6661,57,"start"],[7407,66,6661,21],[7407,67,6661,8],[7408,0,6662,8],[7408,18,6662,14,"identifier"],[7408,28,6662,24],[7408,31,6662,27],[7408,36,6662,32,"createIdentifier"],[7408,52,6662,27],[7408,53,6662,49,"node"],[7408,57,6662,27],[7408,59,6662,55,"name"],[7408,63,6662,27],[7408,64,6662,8],[7409,0,6663,8,"identifier"],[7409,14,6663,8,"identifier"],[7409,24,6663,18],[7409,25,6663,19,"type"],[7409,29,6663,8],[7409,32,6663,26],[7409,55,6663,8],[7411,0,6665,8],[7411,18,6665,12],[7411,23,6665,17,"match"],[7411,28,6665,12],[7411,29,6665,23,"types"],[7411,34,6665,28],[7411,35,6665,29,"parenL"],[7411,41,6665,12],[7411,42,6665,8],[7411,44,6665,38],[7412,0,6666,10],[7412,23,6666,17,"identifier"],[7412,33,6666,10],[7413,0,6667,9],[7414,0,6668,7],[7416,0,6670,6],[7416,17,6670,11,"unexpected"],[7416,27,6670,6],[7416,28,6670,22,"v8IntrinsicStart"],[7416,44,6670,6],[7417,0,6671,5],[7418,0,6672,3],[7419,0,6653,29],[7420,0,6653,29],[7421,0,6653,29],[7421,40,6674,18],[7422,0,6675,4],[7422,17,6675,11],[7422,22,6675,16,"parseV8Intrinsic"],[7422,38,6675,11],[7422,120,6675,61,"arguments"],[7422,129,6675,11],[7422,130,6675,4],[7423,0,6676,3],[7424,0,6653,29],[7426,0,6653,29],[7427,0,6653,29],[7427,6,6653,47,"superClass"],[7427,16,6653,29],[7428,0,6653,29],[7428,3,6653,0],[7430,0,6680,0],[7430,11,6680,9,"hasPlugin"],[7430,20,6680,0],[7430,21,6680,19,"plugins"],[7430,28,6680,0],[7430,30,6680,28,"name"],[7430,34,6680,0],[7430,36,6680,34],[7431,0,6681,2],[7431,11,6681,9,"plugins"],[7431,18,6681,16],[7431,19,6681,17,"some"],[7431,23,6681,9],[7431,24,6681,22],[7431,34,6681,22,"plugin"],[7431,40,6681,28],[7431,42,6681,32],[7432,0,6682,4],[7432,10,6682,8,"Array"],[7432,15,6682,13],[7432,16,6682,14,"isArray"],[7432,23,6682,8],[7432,24,6682,22,"plugin"],[7432,30,6682,8],[7432,31,6682,4],[7432,33,6682,31],[7433,0,6683,6],[7433,15,6683,13,"plugin"],[7433,21,6683,19],[7433,22,6683,20],[7433,23,6683,19],[7433,24,6683,13],[7433,29,6683,27,"name"],[7433,33,6683,6],[7434,0,6684,5],[7434,7,6682,4],[7434,13,6684,11],[7435,0,6685,6],[7435,15,6685,13,"plugin"],[7435,21,6685,19],[7435,26,6685,24,"name"],[7435,30,6685,6],[7436,0,6686,5],[7437,0,6687,3],[7437,5,6681,9],[7437,6,6681,2],[7438,0,6688,1],[7440,0,6689,0],[7440,11,6689,9,"getPluginOption"],[7440,26,6689,0],[7440,27,6689,25,"plugins"],[7440,34,6689,0],[7440,36,6689,34,"name"],[7440,40,6689,0],[7440,42,6689,40,"option"],[7440,48,6689,0],[7440,50,6689,48],[7441,0,6690,2],[7441,8,6690,8,"plugin"],[7441,14,6690,14],[7441,17,6690,17,"plugins"],[7441,24,6690,24],[7441,25,6690,25,"find"],[7441,29,6690,17],[7441,30,6690,30],[7441,40,6690,30,"plugin"],[7441,46,6690,36],[7441,48,6690,40],[7442,0,6691,4],[7442,10,6691,8,"Array"],[7442,15,6691,13],[7442,16,6691,14,"isArray"],[7442,23,6691,8],[7442,24,6691,22,"plugin"],[7442,30,6691,8],[7442,31,6691,4],[7442,33,6691,31],[7443,0,6692,6],[7443,15,6692,13,"plugin"],[7443,21,6692,19],[7443,22,6692,20],[7443,23,6692,19],[7443,24,6692,13],[7443,29,6692,27,"name"],[7443,33,6692,6],[7444,0,6693,5],[7444,7,6691,4],[7444,13,6693,11],[7445,0,6694,6],[7445,15,6694,13,"plugin"],[7445,21,6694,19],[7445,26,6694,24,"name"],[7445,30,6694,6],[7446,0,6695,5],[7447,0,6696,3],[7447,5,6690,17],[7447,6,6690,2],[7449,0,6698,2],[7449,8,6698,6,"plugin"],[7449,14,6698,12],[7449,18,6698,16,"Array"],[7449,23,6698,21],[7449,24,6698,22,"isArray"],[7449,31,6698,16],[7449,32,6698,30,"plugin"],[7449,38,6698,16],[7449,39,6698,2],[7449,41,6698,39],[7450,0,6699,4],[7450,13,6699,11,"plugin"],[7450,19,6699,17],[7450,20,6699,18],[7450,21,6699,17],[7450,22,6699,11],[7450,23,6699,21,"option"],[7450,29,6699,11],[7450,30,6699,4],[7451,0,6700,3],[7453,0,6702,2],[7453,11,6702,9],[7453,15,6702,2],[7454,0,6703,1],[7456,0,6704,0],[7456,6,6704,6,"PIPELINE_PROPOSALS"],[7456,24,6704,24],[7456,27,6704,27],[7456,28,6704,28],[7456,37,6704,27],[7456,39,6704,39],[7456,46,6704,27],[7456,48,6704,48],[7456,56,6704,27],[7456,57,6704,0],[7458,0,6705,0],[7458,11,6705,9,"validatePlugins"],[7458,26,6705,0],[7458,27,6705,25,"plugins"],[7458,34,6705,0],[7458,36,6705,34],[7459,0,6706,2],[7459,8,6706,6,"hasPlugin"],[7459,17,6706,15],[7459,18,6706,16,"plugins"],[7459,25,6706,15],[7459,27,6706,25],[7459,39,6706,15],[7459,40,6706,2],[7459,42,6706,40],[7460,0,6707,4],[7460,10,6707,8,"hasPlugin"],[7460,19,6707,17],[7460,20,6707,18,"plugins"],[7460,27,6707,17],[7460,29,6707,27],[7460,48,6707,17],[7460,49,6707,4],[7460,51,6707,49],[7461,0,6708,6],[7461,14,6708,12],[7461,18,6708,16,"Error"],[7461,23,6708,12],[7461,24,6708,22],[7461,89,6708,12],[7461,90,6708,6],[7462,0,6709,5],[7464,0,6711,4],[7464,10,6711,10,"decoratorsBeforeExport"],[7464,32,6711,32],[7464,35,6711,35,"getPluginOption"],[7464,50,6711,50],[7464,51,6711,51,"plugins"],[7464,58,6711,50],[7464,60,6711,60],[7464,72,6711,50],[7464,74,6711,74],[7464,98,6711,50],[7464,99,6711,4],[7466,0,6713,4],[7466,10,6713,8,"decoratorsBeforeExport"],[7466,32,6713,30],[7466,36,6713,34],[7466,40,6713,4],[7466,42,6713,40],[7467,0,6714,6],[7467,14,6714,12],[7467,18,6714,16,"Error"],[7467,23,6714,12],[7467,24,6714,22],[7467,96,6714,94],[7467,155,6714,22],[7467,158,6714,156],[7467,224,6714,22],[7467,227,6714,225],[7467,296,6714,12],[7467,297,6714,6],[7468,0,6715,5],[7468,7,6713,4],[7468,13,6715,11],[7468,17,6715,15],[7468,24,6715,22,"decoratorsBeforeExport"],[7468,46,6715,15],[7468,51,6715,49],[7468,60,6715,11],[7468,62,6715,60],[7469,0,6716,6],[7469,14,6716,12],[7469,18,6716,16,"Error"],[7469,23,6716,12],[7469,24,6716,22],[7469,69,6716,12],[7469,70,6716,6],[7470,0,6717,5],[7471,0,6718,3],[7473,0,6720,2],[7473,8,6720,6,"hasPlugin"],[7473,17,6720,15],[7473,18,6720,16,"plugins"],[7473,25,6720,15],[7473,27,6720,25],[7473,33,6720,15],[7473,34,6720,6],[7473,38,6720,36,"hasPlugin"],[7473,47,6720,45],[7473,48,6720,46,"plugins"],[7473,55,6720,45],[7473,57,6720,55],[7473,69,6720,45],[7473,70,6720,2],[7473,72,6720,70],[7474,0,6721,4],[7474,12,6721,10],[7474,16,6721,14,"Error"],[7474,21,6721,10],[7474,22,6721,20],[7474,67,6721,10],[7474,68,6721,4],[7475,0,6722,3],[7477,0,6724,2],[7477,8,6724,6,"hasPlugin"],[7477,17,6724,15],[7477,18,6724,16,"plugins"],[7477,25,6724,15],[7477,27,6724,25],[7477,41,6724,15],[7477,42,6724,6],[7477,46,6724,44,"hasPlugin"],[7477,55,6724,53],[7477,56,6724,54,"plugins"],[7477,63,6724,53],[7477,65,6724,63],[7477,78,6724,53],[7477,79,6724,2],[7477,81,6724,79],[7478,0,6725,4],[7478,12,6725,10],[7478,16,6725,14,"Error"],[7478,21,6725,10],[7478,22,6725,20],[7478,76,6725,10],[7478,77,6725,4],[7479,0,6726,3],[7481,0,6728,2],[7481,8,6728,6,"hasPlugin"],[7481,17,6728,15],[7481,18,6728,16,"plugins"],[7481,25,6728,15],[7481,27,6728,25],[7481,45,6728,15],[7481,46,6728,6],[7481,50,6728,48],[7481,51,6728,49,"PIPELINE_PROPOSALS"],[7481,69,6728,67],[7481,70,6728,68,"includes"],[7481,78,6728,49],[7481,79,6728,77,"getPluginOption"],[7481,94,6728,92],[7481,95,6728,93,"plugins"],[7481,102,6728,92],[7481,104,6728,102],[7481,122,6728,92],[7481,124,6728,122],[7481,134,6728,92],[7481,135,6728,49],[7481,136,6728,2],[7481,138,6728,136],[7482,0,6729,4],[7482,12,6729,10],[7482,16,6729,14,"Error"],[7482,21,6729,10],[7482,22,6729,20],[7482,103,6729,101,"PIPELINE_PROPOSALS"],[7482,121,6729,119],[7482,122,6729,120,"map"],[7482,125,6729,101],[7482,126,6729,124],[7482,136,6729,124,"p"],[7482,137,6729,125],[7483,0,6729,125],[7483,21,6729,133,"p"],[7483,22,6729,125],[7484,0,6729,125],[7484,7,6729,101],[7484,9,6729,139,"join"],[7484,13,6729,101],[7484,14,6729,144],[7484,18,6729,101],[7484,19,6729,10],[7484,20,6729,4],[7485,0,6730,3],[7486,0,6731,1],[7488,0,6732,0],[7488,6,6732,6,"mixinPlugins"],[7488,18,6732,18],[7488,21,6732,21],[7489,0,6733,2,"estree"],[7489,4,6733,2,"estree"],[7489,10,6733,8],[7489,12,6733,2,"estree"],[7489,18,6732,21],[7490,0,6734,2,"jsx"],[7490,4,6734,2,"jsx"],[7490,7,6734,5],[7490,9,6734,2,"jsx"],[7490,12,6732,21],[7491,0,6735,2,"flow"],[7491,4,6735,2,"flow"],[7491,8,6735,6],[7491,10,6735,2,"flow"],[7491,14,6732,21],[7492,0,6736,2,"typescript"],[7492,4,6736,2,"typescript"],[7492,14,6736,12],[7492,16,6736,2,"typescript"],[7492,26,6732,21],[7493,0,6737,2,"v8intrinsic"],[7493,4,6737,2,"v8intrinsic"],[7493,15,6737,13],[7493,17,6737,2,"v8intrinsic"],[7493,28,6732,21],[7494,0,6738,2,"placeholders"],[7494,4,6738,2,"placeholders"],[7494,16,6738,14],[7494,18,6738,2,"placeholders"],[7495,0,6732,21],[7495,3,6732,0],[7496,0,6740,0],[7496,6,6740,6,"mixinPluginNames"],[7496,22,6740,22],[7496,25,6740,25,"Object"],[7496,31,6740,31],[7496,32,6740,32,"keys"],[7496,36,6740,25],[7496,37,6740,37,"mixinPlugins"],[7496,49,6740,25],[7496,50,6740,0],[7497,0,6742,0],[7497,6,6742,6,"defaultOptions"],[7497,20,6742,20],[7497,23,6742,23],[7498,0,6743,2,"sourceType"],[7498,4,6743,2,"sourceType"],[7498,14,6743,12],[7498,16,6743,14],[7498,24,6742,23],[7499,0,6744,2,"sourceFilename"],[7499,4,6744,2,"sourceFilename"],[7499,18,6744,16],[7499,20,6744,18,"undefined"],[7499,29,6742,23],[7500,0,6745,2,"startLine"],[7500,4,6745,2,"startLine"],[7500,13,6745,11],[7500,15,6745,13],[7500,16,6742,23],[7501,0,6746,2,"allowAwaitOutsideFunction"],[7501,4,6746,2,"allowAwaitOutsideFunction"],[7501,29,6746,27],[7501,31,6746,29],[7501,36,6742,23],[7502,0,6747,2,"allowReturnOutsideFunction"],[7502,4,6747,2,"allowReturnOutsideFunction"],[7502,30,6747,28],[7502,32,6747,30],[7502,37,6742,23],[7503,0,6748,2,"allowImportExportEverywhere"],[7503,4,6748,2,"allowImportExportEverywhere"],[7503,31,6748,29],[7503,33,6748,31],[7503,38,6742,23],[7504,0,6749,2,"allowSuperOutsideMethod"],[7504,4,6749,2,"allowSuperOutsideMethod"],[7504,27,6749,25],[7504,29,6749,27],[7504,34,6742,23],[7505,0,6750,2,"allowUndeclaredExports"],[7505,4,6750,2,"allowUndeclaredExports"],[7505,26,6750,24],[7505,28,6750,26],[7505,33,6742,23],[7506,0,6751,2,"plugins"],[7506,4,6751,2,"plugins"],[7506,11,6751,9],[7506,13,6751,11],[7506,15,6742,23],[7507,0,6752,2,"strictMode"],[7507,4,6752,2,"strictMode"],[7507,14,6752,12],[7507,16,6752,14],[7507,20,6742,23],[7508,0,6753,2,"ranges"],[7508,4,6753,2,"ranges"],[7508,10,6753,8],[7508,12,6753,10],[7508,17,6742,23],[7509,0,6754,2,"tokens"],[7509,4,6754,2,"tokens"],[7509,10,6754,8],[7509,12,6754,10],[7509,17,6742,23],[7510,0,6755,2,"createParenthesizedExpressions"],[7510,4,6755,2,"createParenthesizedExpressions"],[7510,34,6755,32],[7510,36,6755,34],[7510,41,6742,23],[7511,0,6756,2,"errorRecovery"],[7511,4,6756,2,"errorRecovery"],[7511,17,6756,15],[7511,19,6756,17],[7512,0,6742,23],[7512,3,6742,0],[7514,0,6758,0],[7514,11,6758,9,"getOptions"],[7514,21,6758,0],[7514,22,6758,20,"opts"],[7514,26,6758,0],[7514,28,6758,26],[7515,0,6759,2],[7515,8,6759,8,"options"],[7515,15,6759,15],[7515,18,6759,18],[7515,20,6759,2],[7517,0,6761,2],[7517,9,6761,7],[7517,13,6761,11,"_i"],[7517,15,6761,13],[7517,18,6761,16],[7517,19,6761,7],[7517,21,6761,19,"_Object$keys"],[7517,33,6761,31],[7517,36,6761,34,"Object"],[7517,42,6761,40],[7517,43,6761,41,"keys"],[7517,47,6761,34],[7517,48,6761,46,"defaultOptions"],[7517,62,6761,34],[7517,63,6761,2],[7517,65,6761,63,"_i"],[7517,67,6761,65],[7517,70,6761,68,"_Object$keys"],[7517,82,6761,80],[7517,83,6761,81,"length"],[7517,89,6761,2],[7517,91,6761,89,"_i"],[7517,93,6761,91],[7517,95,6761,2],[7517,97,6761,95],[7518,0,6762,4],[7518,10,6762,10,"key"],[7518,13,6762,13],[7518,16,6762,16,"_Object$keys"],[7518,28,6762,28],[7518,29,6762,29,"_i"],[7518,31,6762,28],[7518,32,6762,4],[7519,0,6763,4,"options"],[7519,6,6763,4,"options"],[7519,13,6763,11],[7519,14,6763,12,"key"],[7519,17,6763,11],[7519,18,6763,4],[7519,21,6763,19,"opts"],[7519,25,6763,23],[7519,29,6763,27,"opts"],[7519,33,6763,31],[7519,34,6763,32,"key"],[7519,37,6763,31],[7519,38,6763,27],[7519,42,6763,40],[7519,46,6763,19],[7519,49,6763,47,"opts"],[7519,53,6763,51],[7519,54,6763,52,"key"],[7519,57,6763,51],[7519,58,6763,19],[7519,61,6763,59,"defaultOptions"],[7519,75,6763,73],[7519,76,6763,74,"key"],[7519,79,6763,73],[7519,80,6763,4],[7520,0,6764,3],[7522,0,6766,2],[7522,11,6766,9,"options"],[7522,18,6766,2],[7523,0,6767,1],[7525,6,6769,6,"Position"],[7525,14],[7525,17,6770,2],[7525,35,6770,14,"line"],[7525,39,6770,2],[7525,41,6770,20,"col"],[7525,44,6770,2],[7525,46,6770,25],[7526,0,6770,25],[7528,0,6771,4],[7528,9,6771,9,"line"],[7528,13,6771,4],[7528,16,6771,16,"line"],[7528,20,6771,4],[7529,0,6772,4],[7529,9,6772,9,"column"],[7529,15,6772,4],[7529,18,6772,18,"col"],[7529,21,6772,4],[7530,0,6773,3],[7530,3],[7532,6,6776,6,"SourceLocation"],[7532,20],[7532,23,6777,2],[7532,47,6777,14,"start"],[7532,52,6777,2],[7532,54,6777,21,"end"],[7532,57,6777,2],[7532,59,6777,26],[7533,0,6777,26],[7535,0,6778,4],[7535,9,6778,9,"start"],[7535,14,6778,4],[7535,17,6778,17,"start"],[7535,22,6778,4],[7536,0,6779,4],[7536,9,6779,9,"end"],[7536,12,6779,4],[7536,15,6779,15,"end"],[7536,18,6779,4],[7537,0,6780,3],[7537,3],[7539,0,6783,0],[7539,11,6783,9,"getLineInfo"],[7539,22,6783,0],[7539,23,6783,21,"input"],[7539,28,6783,0],[7539,30,6783,28,"offset"],[7539,36,6783,0],[7539,38,6783,36],[7540,0,6784,2],[7540,8,6784,6,"line"],[7540,12,6784,10],[7540,15,6784,13],[7540,16,6784,2],[7541,0,6785,2],[7541,8,6785,6,"lineStart"],[7541,17,6785,15],[7541,20,6785,18],[7541,21,6785,2],[7542,0,6786,2],[7542,8,6786,6,"match"],[7542,13,6786,2],[7543,0,6787,2,"lineBreakG"],[7543,4,6787,2,"lineBreakG"],[7543,14,6787,12],[7543,15,6787,13,"lastIndex"],[7543,24,6787,2],[7543,27,6787,25],[7543,28,6787,2],[7545,0,6789,2],[7545,11,6789,9],[7545,12,6789,10,"match"],[7545,17,6789,15],[7545,20,6789,18,"lineBreakG"],[7545,30,6789,28],[7545,31,6789,29,"exec"],[7545,35,6789,18],[7545,36,6789,34,"input"],[7545,41,6789,18],[7545,42,6789,9],[7545,47,6789,45,"match"],[7545,52,6789,50],[7545,53,6789,51,"index"],[7545,58,6789,45],[7545,61,6789,59,"offset"],[7545,67,6789,2],[7545,69,6789,67],[7546,0,6790,4,"line"],[7546,6,6790,4,"line"],[7546,10,6790,8],[7547,0,6791,4,"lineStart"],[7547,6,6791,4,"lineStart"],[7547,15,6791,13],[7547,18,6791,16,"lineBreakG"],[7547,28,6791,26],[7547,29,6791,27,"lastIndex"],[7547,38,6791,4],[7548,0,6792,3],[7550,0,6794,2],[7550,11,6794,9],[7550,15,6794,13,"Position"],[7550,23,6794,9],[7550,24,6794,22,"line"],[7550,28,6794,9],[7550,30,6794,28,"offset"],[7550,36,6794,34],[7550,39,6794,37,"lineStart"],[7550,48,6794,9],[7550,49,6794,2],[7551,0,6795,1],[7553,6,6797,6,"BaseParser"],[7553,16],[7554,0,6798,2],[7554,26,6798,16],[7555,0,6798,16],[7557,0,6799,4],[7557,11,6799,9,"sawUnambiguousESM"],[7557,28,6799,4],[7557,31,6799,29],[7557,36,6799,4],[7558,0,6800,4],[7558,11,6800,9,"ambiguousScriptDifferentAst"],[7558,38,6800,4],[7558,41,6800,39],[7558,46,6800,4],[7559,0,6801,3],[7563,32,6803,12,"name"],[7563,36],[7563,38,6803,18],[7564,0,6804,4],[7564,15,6804,11],[7564,20,6804,16,"plugins"],[7564,27,6804,11],[7564,28,6804,24,"has"],[7564,31,6804,11],[7564,32,6804,28,"name"],[7564,36,6804,11],[7564,37,6804,4],[7565,0,6805,3],[7568,38,6807,18,"plugin"],[7568,44],[7568,46,6807,26,"name"],[7568,50],[7568,52,6807,32],[7569,0,6808,4],[7569,12,6808,8],[7569,17,6808,13,"hasPlugin"],[7569,26,6808,8],[7569,27,6808,23,"plugin"],[7569,33,6808,8],[7569,34,6808,4],[7569,36,6808,32],[7569,43,6808,39],[7569,48,6808,44,"plugins"],[7569,55,6808,39],[7569,56,6808,52,"get"],[7569,59,6808,39],[7569,60,6808,56,"plugin"],[7569,66,6808,39],[7569,68,6808,64,"name"],[7569,72,6808,39],[7569,73,6808,32],[7570,0,6809,3],[7576,0,6813,0],[7576,11,6813,9,"last"],[7576,15,6813,0],[7576,16,6813,14,"stack"],[7576,21,6813,0],[7576,23,6813,21],[7577,0,6814,2],[7577,11,6814,9,"stack"],[7577,16,6814,14],[7577,17,6814,15,"stack"],[7577,22,6814,20],[7577,23,6814,21,"length"],[7577,29,6814,15],[7577,32,6814,30],[7577,33,6814,14],[7577,34,6814,2],[7578,0,6815,1],[7580,6,6817,6,"CommentsParser"],[7580,20],[7591,33,6818,13,"comment"],[7591,40],[7591,42,6818,22],[7592,0,6819,4],[7592,12,6819,8],[7592,17,6819,13,"filename"],[7592,25,6819,4],[7592,27,6819,23,"comment"],[7592,34,6819,30],[7592,35,6819,31,"loc"],[7592,38,6819,23],[7592,39,6819,35,"filename"],[7592,47,6819,23],[7592,50,6819,46],[7592,55,6819,51,"filename"],[7592,63,6819,23],[7593,0,6820,4],[7593,13,6820,9,"state"],[7593,18,6820,4],[7593,19,6820,15,"trailingComments"],[7593,35,6820,4],[7593,36,6820,32,"push"],[7593,40,6820,4],[7593,41,6820,37,"comment"],[7593,48,6820,4],[7594,0,6821,4],[7594,13,6821,9,"state"],[7594,18,6821,4],[7594,19,6821,15,"leadingComments"],[7594,34,6821,4],[7594,35,6821,31,"push"],[7594,39,6821,4],[7594,40,6821,36,"comment"],[7594,47,6821,4],[7595,0,6822,3],[7598,55,6824,35,"node"],[7598,59],[7598,61,6824,41,"elements"],[7598,69],[7598,71,6824,51,"takeAllComments"],[7598,86],[7598,88,6824,68],[7599,0,6825,4],[7599,12,6825,8],[7599,17,6825,13,"state"],[7599,22,6825,8],[7599,23,6825,19,"leadingComments"],[7599,38,6825,8],[7599,39,6825,35,"length"],[7599,45,6825,8],[7599,50,6825,46],[7599,51,6825,4],[7599,53,6825,49],[7600,0,6826,6],[7601,0,6827,5],[7603,0,6829,4],[7603,12,6829,8,"lastElement"],[7603,23,6829,19],[7603,26,6829,22],[7603,30,6829,4],[7604,0,6830,4],[7604,12,6830,8,"i"],[7604,13,6830,9],[7604,16,6830,12,"elements"],[7604,24,6830,20],[7604,25,6830,21,"length"],[7604,31,6830,4],[7606,0,6832,4],[7606,15,6832,11,"lastElement"],[7606,26,6832,22],[7606,31,6832,27],[7606,35,6832,11],[7606,39,6832,35,"i"],[7606,40,6832,36],[7606,43,6832,39],[7606,44,6832,4],[7606,46,6832,42],[7607,0,6833,6,"lastElement"],[7607,10,6833,6,"lastElement"],[7607,21,6833,17],[7607,24,6833,20,"elements"],[7607,32,6833,28],[7607,33,6833,29],[7607,35,6833,31,"i"],[7607,36,6833,28],[7607,37,6833,6],[7608,0,6834,5],[7610,0,6836,4],[7610,12,6836,8,"lastElement"],[7610,23,6836,19],[7610,28,6836,24],[7610,32,6836,4],[7610,34,6836,30],[7611,0,6837,6],[7612,0,6838,5],[7614,0,6840,4],[7614,13,6840,9],[7614,17,6840,13,"j"],[7614,18,6840,14],[7614,21,6840,17],[7614,22,6840,4],[7614,24,6840,20,"j"],[7614,25,6840,21],[7614,28,6840,24],[7614,33,6840,29,"state"],[7614,38,6840,24],[7614,39,6840,35,"leadingComments"],[7614,54,6840,24],[7614,55,6840,51,"length"],[7614,61,6840,4],[7614,63,6840,59,"j"],[7614,64,6840,60],[7614,66,6840,4],[7614,68,6840,64],[7615,0,6841,6],[7615,14,6841,10],[7615,19,6841,15,"state"],[7615,24,6841,10],[7615,25,6841,21,"leadingComments"],[7615,40,6841,10],[7615,41,6841,37,"j"],[7615,42,6841,10],[7615,44,6841,40,"end"],[7615,47,6841,10],[7615,50,6841,46],[7615,55,6841,51,"state"],[7615,60,6841,46],[7615,61,6841,57,"commentPreviousNode"],[7615,80,6841,46],[7615,81,6841,77,"end"],[7615,84,6841,6],[7615,86,6841,82],[7616,0,6842,8],[7616,17,6842,13,"state"],[7616,22,6842,8],[7616,23,6842,19,"leadingComments"],[7616,38,6842,8],[7616,39,6842,35,"splice"],[7616,45,6842,8],[7616,46,6842,42,"j"],[7616,47,6842,8],[7616,49,6842,45],[7616,50,6842,8],[7617,0,6843,8,"j"],[7617,12,6843,8,"j"],[7617,13,6843,9],[7618,0,6844,7],[7619,0,6845,5],[7621,0,6847,4],[7621,12,6847,10,"newTrailingComments"],[7621,31,6847,29],[7621,34,6847,32],[7621,36,6847,4],[7623,0,6849,4],[7623,13,6849,9],[7623,17,6849,13,"i"],[7623,20,6849,14],[7623,23,6849,17],[7623,24,6849,4],[7623,26,6849,20,"i"],[7623,29,6849,21],[7623,32,6849,24],[7623,37,6849,29,"state"],[7623,42,6849,24],[7623,43,6849,35,"leadingComments"],[7623,58,6849,24],[7623,59,6849,51,"length"],[7623,65,6849,4],[7623,67,6849,59,"i"],[7623,70,6849,60],[7623,72,6849,4],[7623,74,6849,64],[7624,0,6850,6],[7624,14,6850,12,"leadingComment"],[7624,28,6850,26],[7624,31,6850,29],[7624,36,6850,34,"state"],[7624,41,6850,29],[7624,42,6850,40,"leadingComments"],[7624,57,6850,29],[7624,58,6850,56,"i"],[7624,61,6850,29],[7624,62,6850,6],[7626,0,6852,6],[7626,14,6852,10,"leadingComment"],[7626,28,6852,24],[7626,29,6852,25,"end"],[7626,32,6852,10],[7626,35,6852,31,"node"],[7626,39,6852,35],[7626,40,6852,36,"end"],[7626,43,6852,6],[7626,45,6852,41],[7627,0,6853,8,"newTrailingComments"],[7627,12,6853,8,"newTrailingComments"],[7627,31,6853,27],[7627,32,6853,28,"push"],[7627,36,6853,8],[7627,37,6853,33,"leadingComment"],[7627,51,6853,8],[7629,0,6855,8],[7629,16,6855,12],[7629,17,6855,13,"takeAllComments"],[7629,32,6855,8],[7629,34,6855,30],[7630,0,6856,10],[7630,19,6856,15,"state"],[7630,24,6856,10],[7630,25,6856,21,"leadingComments"],[7630,40,6856,10],[7630,41,6856,37,"splice"],[7630,47,6856,10],[7630,48,6856,44,"i"],[7630,51,6856,10],[7630,53,6856,47],[7630,54,6856,10],[7631,0,6857,10,"i"],[7631,14,6857,10,"i"],[7631,17,6857,11],[7632,0,6858,9],[7633,0,6859,7],[7633,11,6852,6],[7633,17,6859,13],[7634,0,6860,8],[7634,16,6860,12,"node"],[7634,20,6860,16],[7634,21,6860,17,"trailingComments"],[7634,37,6860,12],[7634,42,6860,38,"undefined"],[7634,51,6860,8],[7634,53,6860,49],[7635,0,6861,10,"node"],[7635,14,6861,10,"node"],[7635,18,6861,14],[7635,19,6861,15,"trailingComments"],[7635,35,6861,10],[7635,38,6861,34],[7635,40,6861,10],[7636,0,6862,9],[7638,0,6864,8,"node"],[7638,12,6864,8,"node"],[7638,16,6864,12],[7638,17,6864,13,"trailingComments"],[7638,33,6864,8],[7638,34,6864,30,"push"],[7638,38,6864,8],[7638,39,6864,35,"leadingComment"],[7638,53,6864,8],[7639,0,6865,7],[7640,0,6866,5],[7642,0,6868,4],[7642,12,6868,8,"takeAllComments"],[7642,27,6868,4],[7642,29,6868,25],[7642,34,6868,30,"state"],[7642,39,6868,25],[7642,40,6868,36,"leadingComments"],[7642,55,6868,25],[7642,58,6868,54],[7642,60,6868,25],[7644,0,6870,4],[7644,12,6870,8,"newTrailingComments"],[7644,31,6870,27],[7644,32,6870,28,"length"],[7644,38,6870,8],[7644,41,6870,37],[7644,42,6870,4],[7644,44,6870,40],[7645,0,6871,6,"lastElement"],[7645,10,6871,6,"lastElement"],[7645,21,6871,17],[7645,22,6871,18,"trailingComments"],[7645,38,6871,6],[7645,41,6871,37,"newTrailingComments"],[7645,60,6871,6],[7646,0,6872,5],[7646,9,6870,4],[7646,15,6872,11],[7646,19,6872,15,"lastElement"],[7646,30,6872,26],[7646,31,6872,27,"trailingComments"],[7646,47,6872,15],[7646,52,6872,48,"undefined"],[7646,61,6872,11],[7646,63,6872,59],[7647,0,6873,6,"lastElement"],[7647,10,6873,6,"lastElement"],[7647,21,6873,17],[7647,22,6873,18,"trailingComments"],[7647,38,6873,6],[7647,41,6873,37],[7647,43,6873,6],[7648,0,6874,5],[7649,0,6875,3],[7652,37,6877,17,"node"],[7652,41],[7652,43,6877,23],[7653,0,6878,4],[7653,12,6878,8,"node"],[7653,16,6878,12],[7653,17,6878,13,"type"],[7653,21,6878,8],[7653,26,6878,22],[7653,35,6878,8],[7653,39,6878,35,"node"],[7653,43,6878,39],[7653,44,6878,40,"body"],[7653,48,6878,35],[7653,49,6878,45,"length"],[7653,55,6878,35],[7653,58,6878,54],[7653,59,6878,4],[7653,61,6878,57],[7654,0,6879,4],[7654,12,6879,10,"stack"],[7654,17,6879,15],[7654,20,6879,18],[7654,25,6879,23,"state"],[7654,30,6879,18],[7654,31,6879,29,"commentStack"],[7654,43,6879,4],[7655,0,6880,4],[7655,12,6880,8,"firstChild"],[7655,22,6880,4],[7655,24,6880,20,"lastChild"],[7655,33,6880,4],[7655,35,6880,31,"trailingComments"],[7655,51,6880,4],[7655,53,6880,49,"i"],[7655,54,6880,4],[7655,56,6880,52,"j"],[7655,57,6880,4],[7657,0,6882,4],[7657,12,6882,8],[7657,17,6882,13,"state"],[7657,22,6882,8],[7657,23,6882,19,"trailingComments"],[7657,39,6882,8],[7657,40,6882,36,"length"],[7657,46,6882,8],[7657,49,6882,45],[7657,50,6882,4],[7657,52,6882,48],[7658,0,6883,6],[7658,14,6883,10],[7658,19,6883,15,"state"],[7658,24,6883,10],[7658,25,6883,21,"trailingComments"],[7658,41,6883,10],[7658,42,6883,38],[7658,43,6883,10],[7658,45,6883,41,"start"],[7658,50,6883,10],[7658,54,6883,50,"node"],[7658,58,6883,54],[7658,59,6883,55,"end"],[7658,62,6883,6],[7658,64,6883,60],[7659,0,6884,8,"trailingComments"],[7659,12,6884,8,"trailingComments"],[7659,28,6884,24],[7659,31,6884,27],[7659,36,6884,32,"state"],[7659,41,6884,27],[7659,42,6884,38,"trailingComments"],[7659,58,6884,8],[7660,0,6885,8],[7660,17,6885,13,"state"],[7660,22,6885,8],[7660,23,6885,19,"trailingComments"],[7660,39,6885,8],[7660,42,6885,38],[7660,44,6885,8],[7661,0,6886,7],[7661,11,6883,6],[7661,17,6886,13],[7662,0,6887,8],[7662,17,6887,13,"state"],[7662,22,6887,8],[7662,23,6887,19,"trailingComments"],[7662,39,6887,8],[7662,40,6887,36,"length"],[7662,46,6887,8],[7662,49,6887,45],[7662,50,6887,8],[7663,0,6888,7],[7664,0,6889,5],[7664,9,6882,4],[7664,15,6889,11],[7664,19,6889,15,"stack"],[7664,24,6889,20],[7664,25,6889,21,"length"],[7664,31,6889,15],[7664,34,6889,30],[7664,35,6889,11],[7664,37,6889,33],[7665,0,6890,6],[7665,14,6890,12,"lastInStack"],[7665,25,6890,23],[7665,28,6890,26,"last"],[7665,32,6890,30],[7665,33,6890,31,"stack"],[7665,38,6890,30],[7665,39,6890,6],[7667,0,6892,6],[7667,14,6892,10,"lastInStack"],[7667,25,6892,21],[7667,26,6892,22,"trailingComments"],[7667,42,6892,10],[7667,46,6892,42,"lastInStack"],[7667,57,6892,53],[7667,58,6892,54,"trailingComments"],[7667,74,6892,42],[7667,75,6892,71],[7667,76,6892,42],[7667,78,6892,74,"start"],[7667,83,6892,42],[7667,87,6892,83,"node"],[7667,91,6892,87],[7667,92,6892,88,"end"],[7667,95,6892,6],[7667,97,6892,93],[7668,0,6893,8,"trailingComments"],[7668,12,6893,8,"trailingComments"],[7668,28,6893,24],[7668,31,6893,27,"lastInStack"],[7668,42,6893,38],[7668,43,6893,39,"trailingComments"],[7668,59,6893,8],[7669,0,6894,8],[7669,19,6894,15,"lastInStack"],[7669,30,6894,26],[7669,31,6894,27,"trailingComments"],[7669,47,6894,8],[7670,0,6895,7],[7671,0,6896,5],[7673,0,6898,4],[7673,12,6898,8,"stack"],[7673,17,6898,13],[7673,18,6898,14,"length"],[7673,24,6898,8],[7673,27,6898,23],[7673,28,6898,8],[7673,32,6898,28,"last"],[7673,36,6898,32],[7673,37,6898,33,"stack"],[7673,42,6898,32],[7673,43,6898,28],[7673,44,6898,40,"start"],[7673,49,6898,28],[7673,53,6898,49,"node"],[7673,57,6898,53],[7673,58,6898,54,"start"],[7673,63,6898,4],[7673,65,6898,61],[7674,0,6899,6,"firstChild"],[7674,10,6899,6,"firstChild"],[7674,20,6899,16],[7674,23,6899,19,"stack"],[7674,28,6899,24],[7674,29,6899,25,"pop"],[7674,32,6899,19],[7674,34,6899,6],[7675,0,6900,5],[7677,0,6902,4],[7677,15,6902,11,"stack"],[7677,20,6902,16],[7677,21,6902,17,"length"],[7677,27,6902,11],[7677,30,6902,26],[7677,31,6902,11],[7677,35,6902,31,"last"],[7677,39,6902,35],[7677,40,6902,36,"stack"],[7677,45,6902,35],[7677,46,6902,31],[7677,47,6902,43,"start"],[7677,52,6902,31],[7677,56,6902,52,"node"],[7677,60,6902,56],[7677,61,6902,57,"start"],[7677,66,6902,4],[7677,68,6902,64],[7678,0,6903,6,"lastChild"],[7678,10,6903,6,"lastChild"],[7678,19,6903,15],[7678,22,6903,18,"stack"],[7678,27,6903,23],[7678,28,6903,24,"pop"],[7678,31,6903,18],[7678,33,6903,6],[7679,0,6904,5],[7681,0,6906,4],[7681,12,6906,8],[7681,13,6906,9,"lastChild"],[7681,22,6906,8],[7681,26,6906,22,"firstChild"],[7681,36,6906,4],[7681,38,6906,34,"lastChild"],[7681,47,6906,43],[7681,50,6906,46,"firstChild"],[7681,60,6906,34],[7683,0,6908,4],[7683,12,6908,8,"firstChild"],[7683,22,6908,4],[7683,24,6908,20],[7684,0,6909,6],[7684,18,6909,14,"node"],[7684,22,6909,18],[7684,23,6909,19,"type"],[7684,27,6909,6],[7685,0,6910,8],[7685,17,6910,13],[7685,35,6910,8],[7686,0,6911,10],[7686,19,6911,15,"adjustCommentsAfterTrailingComma"],[7686,51,6911,10],[7686,52,6911,48,"node"],[7686,56,6911,10],[7686,58,6911,54,"node"],[7686,62,6911,58],[7686,63,6911,59,"properties"],[7686,73,6911,10],[7687,0,6912,10],[7689,0,6914,8],[7689,17,6914,13],[7689,32,6914,8],[7690,0,6915,10],[7690,19,6915,15,"adjustCommentsAfterTrailingComma"],[7690,51,6915,10],[7690,52,6915,48,"node"],[7690,56,6915,10],[7690,58,6915,54,"node"],[7690,62,6915,58],[7690,63,6915,59,"properties"],[7690,73,6915,10],[7690,75,6915,71],[7690,79,6915,10],[7691,0,6916,10],[7693,0,6918,8],[7693,17,6918,13],[7693,33,6918,8],[7694,0,6919,10],[7694,19,6919,15,"adjustCommentsAfterTrailingComma"],[7694,51,6919,10],[7694,52,6919,48,"node"],[7694,56,6919,10],[7694,58,6919,54,"node"],[7694,62,6919,58],[7694,63,6919,59,"arguments"],[7694,72,6919,10],[7695,0,6920,10],[7697,0,6922,8],[7697,17,6922,13],[7697,34,6922,8],[7698,0,6923,10],[7698,19,6923,15,"adjustCommentsAfterTrailingComma"],[7698,51,6923,10],[7698,52,6923,48,"node"],[7698,56,6923,10],[7698,58,6923,54,"node"],[7698,62,6923,58],[7698,63,6923,59,"elements"],[7698,71,6923,10],[7699,0,6924,10],[7701,0,6926,8],[7701,17,6926,13],[7701,31,6926,8],[7702,0,6927,10],[7702,19,6927,15,"adjustCommentsAfterTrailingComma"],[7702,51,6927,10],[7702,52,6927,48,"node"],[7702,56,6927,10],[7702,58,6927,54,"node"],[7702,62,6927,58],[7702,63,6927,59,"elements"],[7702,71,6927,10],[7702,73,6927,69],[7702,77,6927,10],[7703,0,6928,10],[7704,0,6909,6],[7705,0,6930,5],[7705,9,6908,4],[7705,15,6930,11],[7705,19,6930,15],[7705,24,6930,20,"state"],[7705,29,6930,15],[7705,30,6930,26,"commentPreviousNode"],[7705,49,6930,15],[7705,54,6930,50],[7705,59,6930,55,"state"],[7705,64,6930,50],[7705,65,6930,61,"commentPreviousNode"],[7705,84,6930,50],[7705,85,6930,81,"type"],[7705,89,6930,50],[7705,94,6930,90],[7705,111,6930,50],[7705,115,6930,111,"node"],[7705,119,6930,115],[7705,120,6930,116,"type"],[7705,124,6930,111],[7705,129,6930,125],[7705,146,6930,50],[7705,150,6930,146],[7705,155,6930,151,"state"],[7705,160,6930,146],[7705,161,6930,157,"commentPreviousNode"],[7705,180,6930,146],[7705,181,6930,177,"type"],[7705,185,6930,146],[7705,190,6930,186],[7705,207,6930,146],[7705,211,6930,207,"node"],[7705,215,6930,211],[7705,216,6930,212,"type"],[7705,220,6930,207],[7705,225,6930,221],[7705,242,6930,15],[7705,243,6930,11],[7705,245,6930,241],[7706,0,6931,6],[7706,15,6931,11,"adjustCommentsAfterTrailingComma"],[7706,47,6931,6],[7706,48,6931,44,"node"],[7706,52,6931,6],[7706,54,6931,50],[7706,55,6931,51],[7706,60,6931,56,"state"],[7706,65,6931,51],[7706,66,6931,62,"commentPreviousNode"],[7706,85,6931,50],[7706,86,6931,6],[7706,88,6931,84],[7706,92,6931,6],[7707,0,6932,5],[7709,0,6934,4],[7709,12,6934,8,"lastChild"],[7709,21,6934,4],[7709,23,6934,19],[7710,0,6935,6],[7710,14,6935,10,"lastChild"],[7710,23,6935,19],[7710,24,6935,20,"leadingComments"],[7710,39,6935,6],[7710,41,6935,37],[7711,0,6936,8],[7711,16,6936,12,"lastChild"],[7711,25,6936,21],[7711,30,6936,26,"node"],[7711,34,6936,12],[7711,38,6936,34,"lastChild"],[7711,47,6936,43],[7711,48,6936,44,"leadingComments"],[7711,63,6936,34],[7711,64,6936,60,"length"],[7711,70,6936,34],[7711,73,6936,69],[7711,74,6936,12],[7711,78,6936,74,"last"],[7711,82,6936,78],[7711,83,6936,79,"lastChild"],[7711,92,6936,88],[7711,93,6936,89,"leadingComments"],[7711,108,6936,78],[7711,109,6936,74],[7711,110,6936,106,"end"],[7711,113,6936,74],[7711,117,6936,113,"node"],[7711,121,6936,117],[7711,122,6936,118,"start"],[7711,127,6936,8],[7711,129,6936,125],[7712,0,6937,10,"node"],[7712,14,6937,10,"node"],[7712,18,6937,14],[7712,19,6937,15,"leadingComments"],[7712,34,6937,10],[7712,37,6937,33,"lastChild"],[7712,46,6937,42],[7712,47,6937,43,"leadingComments"],[7712,62,6937,10],[7713,0,6938,10],[7713,21,6938,17,"lastChild"],[7713,30,6938,26],[7713,31,6938,27,"leadingComments"],[7713,46,6938,10],[7714,0,6939,9],[7714,13,6936,8],[7714,19,6939,15],[7715,0,6940,10],[7715,19,6940,15,"i"],[7715,20,6940,16],[7715,23,6940,19,"lastChild"],[7715,32,6940,28],[7715,33,6940,29,"leadingComments"],[7715,48,6940,19],[7715,49,6940,45,"length"],[7715,55,6940,19],[7715,58,6940,54],[7715,59,6940,10],[7715,61,6940,57,"i"],[7715,62,6940,58],[7715,66,6940,62],[7715,67,6940,10],[7715,69,6940,65],[7715,71,6940,67,"i"],[7715,72,6940,10],[7715,74,6940,70],[7716,0,6941,12],[7716,20,6941,16,"lastChild"],[7716,29,6941,25],[7716,30,6941,26,"leadingComments"],[7716,45,6941,16],[7716,46,6941,42,"i"],[7716,47,6941,16],[7716,49,6941,45,"end"],[7716,52,6941,16],[7716,56,6941,52,"node"],[7716,60,6941,56],[7716,61,6941,57,"start"],[7716,66,6941,12],[7716,68,6941,64],[7717,0,6942,14,"node"],[7717,18,6942,14,"node"],[7717,22,6942,18],[7717,23,6942,19,"leadingComments"],[7717,38,6942,14],[7717,41,6942,37,"lastChild"],[7717,50,6942,46],[7717,51,6942,47,"leadingComments"],[7717,66,6942,37],[7717,67,6942,63,"splice"],[7717,73,6942,37],[7717,74,6942,70],[7717,75,6942,37],[7717,77,6942,73,"i"],[7717,78,6942,74],[7717,81,6942,77],[7717,82,6942,37],[7717,83,6942,14],[7718,0,6943,14],[7719,0,6944,13],[7720,0,6945,11],[7721,0,6946,9],[7722,0,6947,7],[7723,0,6948,5],[7723,9,6934,4],[7723,15,6948,11],[7723,19,6948,15],[7723,24,6948,20,"state"],[7723,29,6948,15],[7723,30,6948,26,"leadingComments"],[7723,45,6948,15],[7723,46,6948,42,"length"],[7723,52,6948,15],[7723,55,6948,51],[7723,56,6948,11],[7723,58,6948,54],[7724,0,6949,6],[7724,14,6949,10,"last"],[7724,18,6949,14],[7724,19,6949,15],[7724,24,6949,20,"state"],[7724,29,6949,15],[7724,30,6949,26,"leadingComments"],[7724,45,6949,14],[7724,46,6949,10],[7724,47,6949,43,"end"],[7724,50,6949,10],[7724,54,6949,50,"node"],[7724,58,6949,54],[7724,59,6949,55,"start"],[7724,64,6949,6],[7724,66,6949,62],[7725,0,6950,8],[7725,16,6950,12],[7725,21,6950,17,"state"],[7725,26,6950,12],[7725,27,6950,23,"commentPreviousNode"],[7725,46,6950,8],[7725,48,6950,44],[7726,0,6951,10],[7726,19,6951,15,"j"],[7726,20,6951,16],[7726,23,6951,19],[7726,24,6951,10],[7726,26,6951,22,"j"],[7726,27,6951,23],[7726,30,6951,26],[7726,35,6951,31,"state"],[7726,40,6951,26],[7726,41,6951,37,"leadingComments"],[7726,56,6951,26],[7726,57,6951,53,"length"],[7726,63,6951,10],[7726,65,6951,61,"j"],[7726,66,6951,62],[7726,68,6951,10],[7726,70,6951,66],[7727,0,6952,12],[7727,20,6952,16],[7727,25,6952,21,"state"],[7727,30,6952,16],[7727,31,6952,27,"leadingComments"],[7727,46,6952,16],[7727,47,6952,43,"j"],[7727,48,6952,16],[7727,50,6952,46,"end"],[7727,53,6952,16],[7727,56,6952,52],[7727,61,6952,57,"state"],[7727,66,6952,52],[7727,67,6952,63,"commentPreviousNode"],[7727,86,6952,52],[7727,87,6952,83,"end"],[7727,90,6952,12],[7727,92,6952,88],[7728,0,6953,14],[7728,23,6953,19,"state"],[7728,28,6953,14],[7728,29,6953,25,"leadingComments"],[7728,44,6953,14],[7728,45,6953,41,"splice"],[7728,51,6953,14],[7728,52,6953,48,"j"],[7728,53,6953,14],[7728,55,6953,51],[7728,56,6953,14],[7729,0,6954,14,"j"],[7729,18,6954,14,"j"],[7729,19,6954,15],[7730,0,6955,13],[7731,0,6956,11],[7732,0,6957,9],[7734,0,6959,8],[7734,16,6959,12],[7734,21,6959,17,"state"],[7734,26,6959,12],[7734,27,6959,23,"leadingComments"],[7734,42,6959,12],[7734,43,6959,39,"length"],[7734,49,6959,12],[7734,52,6959,48],[7734,53,6959,8],[7734,55,6959,51],[7735,0,6960,10,"node"],[7735,14,6960,10,"node"],[7735,18,6960,14],[7735,19,6960,15,"leadingComments"],[7735,34,6960,10],[7735,37,6960,33],[7735,42,6960,38,"state"],[7735,47,6960,33],[7735,48,6960,44,"leadingComments"],[7735,63,6960,10],[7736,0,6961,10],[7736,19,6961,15,"state"],[7736,24,6961,10],[7736,25,6961,21,"leadingComments"],[7736,40,6961,10],[7736,43,6961,39],[7736,45,6961,10],[7737,0,6962,9],[7738,0,6963,7],[7738,11,6949,6],[7738,17,6963,13],[7739,0,6964,8],[7739,17,6964,13,"i"],[7739,18,6964,14],[7739,21,6964,17],[7739,22,6964,8],[7739,24,6964,20,"i"],[7739,25,6964,21],[7739,28,6964,24],[7739,33,6964,29,"state"],[7739,38,6964,24],[7739,39,6964,35,"leadingComments"],[7739,54,6964,24],[7739,55,6964,51,"length"],[7739,61,6964,8],[7739,63,6964,59,"i"],[7739,64,6964,60],[7739,66,6964,8],[7739,68,6964,64],[7740,0,6965,10],[7740,18,6965,14],[7740,23,6965,19,"state"],[7740,28,6965,14],[7740,29,6965,25,"leadingComments"],[7740,44,6965,14],[7740,45,6965,41,"i"],[7740,46,6965,14],[7740,48,6965,44,"end"],[7740,51,6965,14],[7740,54,6965,50,"node"],[7740,58,6965,54],[7740,59,6965,55,"start"],[7740,64,6965,10],[7740,66,6965,62],[7741,0,6966,12],[7742,0,6967,11],[7743,0,6968,9],[7745,0,6970,8],[7745,16,6970,14,"leadingComments"],[7745,31,6970,29],[7745,34,6970,32],[7745,39,6970,37,"state"],[7745,44,6970,32],[7745,45,6970,43,"leadingComments"],[7745,60,6970,32],[7745,61,6970,59,"slice"],[7745,66,6970,32],[7745,67,6970,65],[7745,68,6970,32],[7745,70,6970,68,"i"],[7745,71,6970,32],[7745,72,6970,8],[7747,0,6972,8],[7747,16,6972,12,"leadingComments"],[7747,31,6972,27],[7747,32,6972,28,"length"],[7747,38,6972,8],[7747,40,6972,36],[7748,0,6973,10,"node"],[7748,14,6973,10,"node"],[7748,18,6973,14],[7748,19,6973,15,"leadingComments"],[7748,34,6973,10],[7748,37,6973,33,"leadingComments"],[7748,52,6973,10],[7749,0,6974,9],[7751,0,6976,8,"trailingComments"],[7751,12,6976,8,"trailingComments"],[7751,28,6976,24],[7751,31,6976,27],[7751,36,6976,32,"state"],[7751,41,6976,27],[7751,42,6976,38,"leadingComments"],[7751,57,6976,27],[7751,58,6976,54,"slice"],[7751,63,6976,27],[7751,64,6976,60,"i"],[7751,65,6976,27],[7751,66,6976,8],[7753,0,6978,8],[7753,16,6978,12,"trailingComments"],[7753,32,6978,28],[7753,33,6978,29,"length"],[7753,39,6978,12],[7753,44,6978,40],[7753,45,6978,8],[7753,47,6978,43],[7754,0,6979,10,"trailingComments"],[7754,14,6979,10,"trailingComments"],[7754,30,6979,26],[7754,33,6979,29],[7754,37,6979,10],[7755,0,6980,9],[7756,0,6981,7],[7757,0,6982,5],[7759,0,6984,4],[7759,13,6984,9,"state"],[7759,18,6984,4],[7759,19,6984,15,"commentPreviousNode"],[7759,38,6984,4],[7759,41,6984,37,"node"],[7759,45,6984,4],[7761,0,6986,4],[7761,12,6986,8,"trailingComments"],[7761,28,6986,4],[7761,30,6986,26],[7762,0,6987,6],[7762,14,6987,10,"trailingComments"],[7762,30,6987,26],[7762,31,6987,27,"length"],[7762,37,6987,10],[7762,41,6987,37,"trailingComments"],[7762,57,6987,53],[7762,58,6987,54],[7762,59,6987,53],[7762,60,6987,37],[7762,61,6987,57,"start"],[7762,66,6987,37],[7762,70,6987,66,"node"],[7762,74,6987,70],[7762,75,6987,71,"start"],[7762,80,6987,10],[7762,84,6987,80,"last"],[7762,88,6987,84],[7762,89,6987,85,"trailingComments"],[7762,105,6987,84],[7762,106,6987,80],[7762,107,6987,103,"end"],[7762,110,6987,80],[7762,114,6987,110,"node"],[7762,118,6987,114],[7762,119,6987,115,"end"],[7762,122,6987,6],[7762,124,6987,120],[7763,0,6988,8,"node"],[7763,12,6988,8,"node"],[7763,16,6988,12],[7763,17,6988,13,"innerComments"],[7763,30,6988,8],[7763,33,6988,29,"trailingComments"],[7763,49,6988,8],[7764,0,6989,7],[7764,11,6987,6],[7764,17,6989,13],[7765,0,6990,8,"node"],[7765,12,6990,8,"node"],[7765,16,6990,12],[7765,17,6990,13,"trailingComments"],[7765,33,6990,8],[7765,36,6990,32,"trailingComments"],[7765,52,6990,8],[7766,0,6991,7],[7767,0,6992,5],[7769,0,6994,4,"stack"],[7769,8,6994,4,"stack"],[7769,13,6994,9],[7769,14,6994,10,"push"],[7769,18,6994,4],[7769,19,6994,15,"node"],[7769,23,6994,4],[7770,0,6995,3],[7774,4,6817,29,"BaseParser"],[7774,14],[7776,6,6999,6,"LocationParser"],[7776,20],[7787,45,7000,25,"pos"],[7787,48],[7787,50,7000,30],[7788,0,7001,4],[7788,12,7001,8,"loc"],[7788,15,7001,4],[7789,0,7002,4],[7789,12,7002,8,"pos"],[7789,15,7002,11],[7789,20,7002,16],[7789,25,7002,21,"state"],[7789,30,7002,16],[7789,31,7002,27,"start"],[7789,36,7002,4],[7789,38,7002,34,"loc"],[7789,41,7002,37],[7789,44,7002,40],[7789,49,7002,45,"state"],[7789,54,7002,40],[7789,55,7002,51,"startLoc"],[7789,63,7002,34],[7789,64,7002,4],[7789,69,7002,65],[7789,73,7002,69,"pos"],[7789,76,7002,72],[7789,81,7002,77],[7789,86,7002,82,"state"],[7789,91,7002,77],[7789,92,7002,88,"lastTokStart"],[7789,104,7002,65],[7789,106,7002,102,"loc"],[7789,109,7002,105],[7789,112,7002,108],[7789,117,7002,113,"state"],[7789,122,7002,108],[7789,123,7002,119,"lastTokStartLoc"],[7789,138,7002,102],[7789,139,7002,65],[7789,144,7002,140],[7789,148,7002,144,"pos"],[7789,151,7002,147],[7789,156,7002,152],[7789,161,7002,157,"state"],[7789,166,7002,152],[7789,167,7002,163,"end"],[7789,170,7002,140],[7789,172,7002,168,"loc"],[7789,175,7002,171],[7789,178,7002,174],[7789,183,7002,179,"state"],[7789,188,7002,174],[7789,189,7002,185,"endLoc"],[7789,195,7002,168],[7789,196,7002,140],[7789,201,7002,197],[7789,205,7002,201,"pos"],[7789,208,7002,204],[7789,213,7002,209],[7789,218,7002,214,"state"],[7789,223,7002,209],[7789,224,7002,220,"lastTokEnd"],[7789,234,7002,197],[7789,236,7002,232,"loc"],[7789,239,7002,235],[7789,242,7002,238],[7789,247,7002,243,"state"],[7789,252,7002,238],[7789,253,7002,249,"lastTokEndLoc"],[7789,266,7002,232],[7789,267,7002,197],[7789,272,7002,268,"loc"],[7789,275,7002,271],[7789,278,7002,274,"getLineInfo"],[7789,289,7002,285],[7789,290,7002,286],[7789,295,7002,291,"input"],[7789,300,7002,285],[7789,302,7002,298,"pos"],[7789,305,7002,285],[7789,306,7002,268],[7790,0,7003,4],[7790,15,7003,11,"loc"],[7790,18,7003,4],[7791,0,7004,3],[7794,28,7006,8,"pos"],[7794,31],[7794,33,7006,13,"message"],[7794,40],[7794,42,7009,10],[7795,0,7009,10],[7795,89,7009,6],[7795,91,7009,10],[7796,0,7009,10],[7796,12,7007,4,"missingPluginNames"],[7796,30,7009,10],[7796,40,7007,4,"missingPluginNames"],[7796,58,7009,10],[7797,0,7009,10],[7797,12,7008,4,"code"],[7797,16,7009,10],[7797,26,7008,4,"code"],[7797,30,7009,10],[7799,0,7010,4],[7799,12,7010,10,"loc"],[7799,15,7010,13],[7799,18,7010,16],[7799,23,7010,21,"getLocationForPosition"],[7799,45,7010,16],[7799,46,7010,44,"pos"],[7799,49,7010,16],[7799,50,7010,4],[7800,0,7011,4,"message"],[7800,8,7011,4,"message"],[7800,15,7011,11],[7800,26,7011,20,"loc"],[7800,29,7011,23],[7800,30,7011,24,"line"],[7800,34,7011,11],[7800,43,7011,32,"loc"],[7800,46,7011,35],[7800,47,7011,36,"column"],[7800,53,7011,11],[7800,59,7011,4],[7801,0,7012,4],[7801,12,7012,10,"err"],[7801,15,7012,13],[7801,18,7012,16],[7801,22,7012,20,"SyntaxError"],[7801,33,7012,16],[7801,34,7012,32,"message"],[7801,41,7012,16],[7801,42,7012,4],[7802,0,7013,4,"err"],[7802,8,7013,4,"err"],[7802,11,7013,7],[7802,12,7013,8,"pos"],[7802,15,7013,4],[7802,18,7013,14,"pos"],[7802,21,7013,4],[7803,0,7014,4,"err"],[7803,8,7014,4,"err"],[7803,11,7014,7],[7803,12,7014,8,"loc"],[7803,15,7014,4],[7803,18,7014,14,"loc"],[7803,21,7014,4],[7805,0,7016,4],[7805,12,7016,8,"missingPluginNames"],[7805,30,7016,4],[7805,32,7016,28],[7806,0,7017,6,"err"],[7806,10,7017,6,"err"],[7806,13,7017,9],[7806,14,7017,10,"missingPlugin"],[7806,27,7017,6],[7806,30,7017,26,"missingPluginNames"],[7806,48,7017,6],[7807,0,7018,5],[7809,0,7020,4],[7809,12,7020,8,"code"],[7809,16,7020,12],[7809,21,7020,17,"undefined"],[7809,30,7020,4],[7809,32,7020,28],[7810,0,7021,6,"err"],[7810,10,7021,6,"err"],[7810,13,7021,9],[7810,14,7021,10,"code"],[7810,18,7021,6],[7810,21,7021,17,"code"],[7810,25,7021,6],[7811,0,7022,5],[7813,0,7024,4],[7813,12,7024,8],[7813,17,7024,13,"options"],[7813,24,7024,8],[7813,25,7024,21,"errorRecovery"],[7813,38,7024,4],[7813,40,7024,36],[7814,0,7025,6],[7814,14,7025,10],[7814,15,7025,11],[7814,20,7025,16,"isLookahead"],[7814,31,7025,6],[7814,33,7025,29],[7814,38,7025,34,"state"],[7814,43,7025,29],[7814,44,7025,40,"errors"],[7814,50,7025,29],[7814,51,7025,47,"push"],[7814,55,7025,29],[7814,56,7025,52,"err"],[7814,59,7025,29],[7815,0,7026,6],[7815,17,7026,13,"err"],[7815,20,7026,6],[7816,0,7027,5],[7816,9,7024,4],[7816,15,7027,11],[7817,0,7028,6],[7817,16,7028,12,"err"],[7817,19,7028,6],[7818,0,7029,5],[7819,0,7030,3],[7823,4,6999,29,"CommentsParser"],[7823,18],[7825,6,7034,6,"State"],[7825,11],[7826,0,7035,2],[7826,21,7035,16],[7827,0,7035,16],[7829,0,7036,4],[7829,11,7036,9,"errors"],[7829,17,7036,4],[7829,20,7036,18],[7829,22,7036,4],[7830,0,7037,4],[7830,11,7037,9,"potentialArrowAt"],[7830,27,7037,4],[7830,30,7037,28],[7830,31,7037,29],[7830,32,7037,4],[7831,0,7038,4],[7831,11,7038,9,"noArrowAt"],[7831,20,7038,4],[7831,23,7038,21],[7831,25,7038,4],[7832,0,7039,4],[7832,11,7039,9,"noArrowParamsConversionAt"],[7832,36,7039,4],[7832,39,7039,37],[7832,41,7039,4],[7833,0,7040,4],[7833,11,7040,9,"inParameters"],[7833,23,7040,4],[7833,26,7040,24],[7833,31,7040,4],[7834,0,7041,4],[7834,11,7041,9,"maybeInArrowParameters"],[7834,33,7041,4],[7834,36,7041,34],[7834,41,7041,4],[7835,0,7042,4],[7835,11,7042,9,"inPipeline"],[7835,21,7042,4],[7835,24,7042,22],[7835,29,7042,4],[7836,0,7043,4],[7836,11,7043,9,"inType"],[7836,17,7043,4],[7836,20,7043,18],[7836,25,7043,4],[7837,0,7044,4],[7837,11,7044,9,"noAnonFunctionType"],[7837,29,7044,4],[7837,32,7044,30],[7837,37,7044,4],[7838,0,7045,4],[7838,11,7045,9,"inPropertyName"],[7838,25,7045,4],[7838,28,7045,26],[7838,33,7045,4],[7839,0,7046,4],[7839,11,7046,9,"inClassProperty"],[7839,26,7046,4],[7839,29,7046,27],[7839,34,7046,4],[7840,0,7047,4],[7840,11,7047,9,"hasFlowComment"],[7840,25,7047,4],[7840,28,7047,26],[7840,33,7047,4],[7841,0,7048,4],[7841,11,7048,9,"isIterator"],[7841,21,7048,4],[7841,24,7048,22],[7841,29,7048,4],[7842,0,7049,4],[7842,11,7049,9,"topicContext"],[7842,23,7049,4],[7842,26,7049,24],[7843,0,7050,6,"maxNumOfResolvableTopics"],[7843,8,7050,6,"maxNumOfResolvableTopics"],[7843,32,7050,30],[7843,34,7050,32],[7843,35,7049,24],[7844,0,7051,6,"maxTopicIndex"],[7844,8,7051,6,"maxTopicIndex"],[7844,21,7051,19],[7844,23,7051,21],[7845,0,7049,24],[7845,7,7049,4],[7846,0,7053,4],[7846,11,7053,9,"soloAwait"],[7846,20,7053,4],[7846,23,7053,21],[7846,28,7053,4],[7847,0,7054,4],[7847,11,7054,9,"inFSharpPipelineDirectBody"],[7847,37,7054,4],[7847,40,7054,38],[7847,45,7054,4],[7848,0,7055,4],[7848,11,7055,9,"classLevel"],[7848,21,7055,4],[7848,24,7055,22],[7848,25,7055,4],[7849,0,7056,4],[7849,11,7056,9,"labels"],[7849,17,7056,4],[7849,20,7056,18],[7849,22,7056,4],[7850,0,7057,4],[7850,11,7057,9,"decoratorStack"],[7850,25,7057,4],[7850,28,7057,26],[7850,29,7057,27],[7850,31,7057,26],[7850,32,7057,4],[7851,0,7058,4],[7851,11,7058,9,"yieldPos"],[7851,19,7058,4],[7851,22,7058,20],[7851,23,7058,21],[7851,24,7058,4],[7852,0,7059,4],[7852,11,7059,9,"awaitPos"],[7852,19,7059,4],[7852,22,7059,20],[7852,23,7059,21],[7852,24,7059,4],[7853,0,7060,4],[7853,11,7060,9,"tokens"],[7853,17,7060,4],[7853,20,7060,18],[7853,22,7060,4],[7854,0,7061,4],[7854,11,7061,9,"comments"],[7854,19,7061,4],[7854,22,7061,20],[7854,24,7061,4],[7855,0,7062,4],[7855,11,7062,9,"trailingComments"],[7855,27,7062,4],[7855,30,7062,28],[7855,32,7062,4],[7856,0,7063,4],[7856,11,7063,9,"leadingComments"],[7856,26,7063,4],[7856,29,7063,27],[7856,31,7063,4],[7857,0,7064,4],[7857,11,7064,9,"commentStack"],[7857,23,7064,4],[7857,26,7064,24],[7857,28,7064,4],[7858,0,7065,4],[7858,11,7065,9,"commentPreviousNode"],[7858,30,7065,4],[7858,33,7065,31],[7858,37,7065,4],[7859,0,7066,4],[7859,11,7066,9,"pos"],[7859,14,7066,4],[7859,17,7066,15],[7859,18,7066,4],[7860,0,7067,4],[7860,11,7067,9,"lineStart"],[7860,20,7067,4],[7860,23,7067,21],[7860,24,7067,4],[7861,0,7068,4],[7861,11,7068,9,"type"],[7861,15,7068,4],[7861,18,7068,16,"types"],[7861,23,7068,21],[7861,24,7068,22,"eof"],[7861,27,7068,4],[7862,0,7069,4],[7862,11,7069,9,"value"],[7862,16,7069,4],[7862,19,7069,17],[7862,23,7069,4],[7863,0,7070,4],[7863,11,7070,9,"start"],[7863,16,7070,4],[7863,19,7070,17],[7863,20,7070,4],[7864,0,7071,4],[7864,11,7071,9,"end"],[7864,14,7071,4],[7864,17,7071,15],[7864,18,7071,4],[7865,0,7072,4],[7865,11,7072,9,"lastTokEndLoc"],[7865,24,7072,4],[7865,27,7072,25],[7865,31,7072,4],[7866,0,7073,4],[7866,11,7073,9,"lastTokStartLoc"],[7866,26,7073,4],[7866,29,7073,27],[7866,33,7073,4],[7867,0,7074,4],[7867,11,7074,9,"lastTokStart"],[7867,23,7074,4],[7867,26,7074,24],[7867,27,7074,4],[7868,0,7075,4],[7868,11,7075,9,"lastTokEnd"],[7868,21,7075,4],[7868,24,7075,22],[7868,25,7075,4],[7869,0,7076,4],[7869,11,7076,9,"context"],[7869,18,7076,4],[7869,21,7076,19],[7869,22,7076,20,"types$1"],[7869,29,7076,27],[7869,30,7076,28,"braceStatement"],[7869,44,7076,19],[7869,45,7076,4],[7870,0,7077,4],[7870,11,7077,9,"exprAllowed"],[7870,22,7077,4],[7870,25,7077,23],[7870,29,7077,4],[7871,0,7078,4],[7871,11,7078,9,"containsEsc"],[7871,22,7078,4],[7871,25,7078,23],[7871,30,7078,4],[7872,0,7079,4],[7872,11,7079,9,"containsOctal"],[7872,24,7079,4],[7872,27,7079,25],[7872,32,7079,4],[7873,0,7080,4],[7873,11,7080,9,"octalPosition"],[7873,24,7080,4],[7873,27,7080,25],[7873,31,7080,4],[7874,0,7081,4],[7874,11,7081,9,"exportedIdentifiers"],[7874,30,7081,4],[7874,33,7081,31],[7874,35,7081,4],[7875,0,7082,4],[7875,11,7082,9,"invalidTemplateEscapePosition"],[7875,40,7082,4],[7875,43,7082,41],[7875,47,7082,4],[7876,0,7083,3],[7880,27,7085,7,"options"],[7880,34],[7880,36,7085,16],[7881,0,7086,4],[7881,13,7086,9,"strict"],[7881,19,7086,4],[7881,22,7086,18,"options"],[7881,29,7086,25],[7881,30,7086,26,"strictMode"],[7881,40,7086,18],[7881,45,7086,41],[7881,50,7086,18],[7881,53,7086,49],[7881,58,7086,18],[7881,61,7086,57,"options"],[7881,68,7086,64],[7881,69,7086,65,"sourceType"],[7881,79,7086,57],[7881,84,7086,80],[7881,92,7086,4],[7882,0,7087,4],[7882,13,7087,9,"curLine"],[7882,20,7087,4],[7882,23,7087,19,"options"],[7882,30,7087,26],[7882,31,7087,27,"startLine"],[7882,40,7087,4],[7883,0,7088,4],[7883,13,7088,9,"startLoc"],[7883,21,7088,4],[7883,24,7088,20],[7883,29,7088,25,"endLoc"],[7883,35,7088,20],[7883,38,7088,34],[7883,43,7088,39,"curPosition"],[7883,54,7088,34],[7883,56,7088,4],[7884,0,7089,3],[7887,36,7091,16],[7888,0,7092,4],[7888,15,7092,11],[7888,19,7092,15,"Position"],[7888,27,7092,11],[7888,28,7092,24],[7888,33,7092,29,"curLine"],[7888,40,7092,11],[7888,42,7092,38],[7888,47,7092,43,"pos"],[7888,50,7092,38],[7888,53,7092,49],[7888,58,7092,54,"lineStart"],[7888,67,7092,11],[7888,68,7092,4],[7889,0,7093,3],[7892,28,7095,8,"skipArrays"],[7892,38],[7892,40,7095,20],[7893,0,7096,4],[7893,12,7096,10,"state"],[7893,17,7096,15],[7893,20,7096,18],[7893,24,7096,22,"State"],[7893,29,7096,18],[7893,31,7096,4],[7894,0,7097,4],[7894,12,7097,10,"keys"],[7894,16,7097,14],[7894,19,7097,17,"Object"],[7894,25,7097,23],[7894,26,7097,24,"keys"],[7894,30,7097,17],[7894,31,7097,29],[7894,35,7097,17],[7894,36,7097,4],[7896,0,7099,4],[7896,13,7099,9],[7896,17,7099,13,"i"],[7896,18,7099,14],[7896,21,7099,17],[7896,22,7099,9],[7896,24,7099,20,"length"],[7896,30,7099,26],[7896,33,7099,29,"keys"],[7896,37,7099,33],[7896,38,7099,34,"length"],[7896,44,7099,4],[7896,46,7099,42,"i"],[7896,47,7099,43],[7896,50,7099,46,"length"],[7896,56,7099,4],[7896,58,7099,54,"i"],[7896,59,7099,55],[7896,61,7099,4],[7896,63,7099,59],[7897,0,7100,6],[7897,14,7100,12,"key"],[7897,17,7100,15],[7897,20,7100,18,"keys"],[7897,24,7100,22],[7897,25,7100,23,"i"],[7897,26,7100,22],[7897,27,7100,6],[7898,0,7101,6],[7898,14,7101,10,"val"],[7898,17,7101,13],[7898,20,7101,16],[7898,25,7101,21,"key"],[7898,28,7101,16],[7898,29,7101,6],[7900,0,7103,6],[7900,14,7103,10],[7900,15,7103,11,"skipArrays"],[7900,25,7103,10],[7900,29,7103,25,"Array"],[7900,34,7103,30],[7900,35,7103,31,"isArray"],[7900,42,7103,25],[7900,43,7103,39,"val"],[7900,46,7103,25],[7900,47,7103,6],[7900,49,7103,45],[7901,0,7104,8,"val"],[7901,12,7104,8,"val"],[7901,15,7104,11],[7901,18,7104,14,"val"],[7901,21,7104,17],[7901,22,7104,18,"slice"],[7901,27,7104,14],[7901,29,7104,8],[7902,0,7105,7],[7904,0,7107,6,"state"],[7904,10,7107,6,"state"],[7904,15,7107,11],[7904,16,7107,12,"key"],[7904,19,7107,11],[7904,20,7107,6],[7904,23,7107,19,"val"],[7904,26,7107,6],[7905,0,7108,5],[7907,0,7110,4],[7907,15,7110,11,"state"],[7907,20,7110,4],[7908,0,7111,3],[7914,0,7115,0],[7914,6,7115,4,"_isDigit"],[7914,14,7115,12],[7914,17,7115,15],[7914,26,7115,24,"isDigit"],[7914,33,7115,15],[7914,34,7115,32,"code"],[7914,38,7115,15],[7914,40,7115,38],[7915,0,7116,2],[7915,11,7116,9,"code"],[7915,15,7116,13],[7915,19,7116,17],[7915,21,7116,9],[7915,25,7116,23,"code"],[7915,29,7116,27],[7915,33,7116,31],[7915,35,7116,2],[7916,0,7117,1],[7916,3,7115,0],[7918,0,7118,0],[7918,6,7118,6,"VALID_REGEX_FLAGS"],[7918,23,7118,23],[7918,26,7118,26],[7918,30,7118,30,"Set"],[7918,33,7118,26],[7918,34,7118,34],[7918,35,7118,35],[7918,38,7118,34],[7918,40,7118,40],[7918,43,7118,34],[7918,45,7118,45],[7918,48,7118,34],[7918,50,7118,50],[7918,53,7118,34],[7918,55,7118,55],[7918,58,7118,34],[7918,60,7118,60],[7918,63,7118,34],[7918,64,7118,26],[7918,65,7118,0],[7919,0,7119,0],[7919,6,7119,6,"forbiddenNumericSeparatorSiblings"],[7919,39,7119,39],[7919,42,7119,42],[7920,0,7120,2,"decBinOct"],[7920,4,7120,2,"decBinOct"],[7920,13,7120,11],[7920,15,7120,13],[7920,16,7120,14],[7920,18,7120,13],[7920,20,7120,18],[7920,22,7120,13],[7920,24,7120,22],[7920,26,7120,13],[7920,28,7120,26],[7920,30,7120,13],[7920,32,7120,30],[7920,34,7120,13],[7920,36,7120,34],[7920,38,7120,13],[7920,40,7120,38],[7920,43,7120,13],[7920,45,7120,43],[7920,48,7120,13],[7920,49,7119,42],[7921,0,7121,2,"hex"],[7921,4,7121,2,"hex"],[7921,7,7121,5],[7921,9,7121,7],[7921,10,7121,8],[7921,12,7121,7],[7921,14,7121,12],[7921,16,7121,7],[7921,18,7121,16],[7921,20,7121,7],[7921,22,7121,20],[7921,25,7121,7],[7922,0,7119,42],[7922,3,7119,0],[7923,0,7123,0],[7923,6,7123,6,"allowedNumericSeparatorSiblings"],[7923,37,7123,37],[7923,40,7123,40],[7923,42,7123,0],[7924,0,7124,0,"allowedNumericSeparatorSiblings"],[7924,2,7124,0,"allowedNumericSeparatorSiblings"],[7924,33,7124,31],[7924,34,7124,32,"bin"],[7924,37,7124,0],[7924,40,7124,38],[7924,41,7124,39],[7924,43,7124,38],[7924,45,7124,43],[7924,47,7124,38],[7924,48,7124,0],[7925,0,7125,0,"allowedNumericSeparatorSiblings"],[7925,2,7125,0,"allowedNumericSeparatorSiblings"],[7925,33,7125,31],[7925,34,7125,32,"oct"],[7925,37,7125,0],[7925,69,7125,42,"allowedNumericSeparatorSiblings"],[7925,100,7125,73],[7925,101,7125,74,"bin"],[7925,104,7125,0],[7925,108,7125,79],[7925,110,7125,0],[7925,112,7125,83],[7925,114,7125,0],[7925,116,7125,87],[7925,118,7125,0],[7925,120,7125,91],[7925,122,7125,0],[7925,124,7125,95],[7925,126,7125,0],[7925,128,7125,99],[7925,130,7125,0],[7926,0,7126,0,"allowedNumericSeparatorSiblings"],[7926,2,7126,0,"allowedNumericSeparatorSiblings"],[7926,33,7126,31],[7926,34,7126,32,"dec"],[7926,37,7126,0],[7926,69,7126,42,"allowedNumericSeparatorSiblings"],[7926,100,7126,73],[7926,101,7126,74,"oct"],[7926,104,7126,0],[7926,108,7126,79],[7926,110,7126,0],[7926,112,7126,83],[7926,114,7126,0],[7927,0,7127,0,"allowedNumericSeparatorSiblings"],[7927,2,7127,0,"allowedNumericSeparatorSiblings"],[7927,33,7127,31],[7927,34,7127,32,"hex"],[7927,37,7127,0],[7927,69,7127,42,"allowedNumericSeparatorSiblings"],[7927,100,7127,73],[7927,101,7127,74,"dec"],[7927,104,7127,0],[7927,108,7127,79],[7927,110,7127,0],[7927,112,7127,83],[7927,114,7127,0],[7927,116,7127,87],[7927,118,7127,0],[7927,120,7127,91],[7927,122,7127,0],[7927,124,7127,95],[7927,126,7127,0],[7927,128,7127,99],[7927,130,7127,0],[7927,132,7127,103],[7927,134,7127,0],[7927,136,7127,107],[7927,138,7127,0],[7927,140,7127,111],[7927,142,7127,0],[7927,144,7127,115],[7927,147,7127,0],[7927,149,7127,120],[7927,152,7127,0],[7927,154,7127,125],[7927,157,7127,0],[7929,6,7128,6,"Token"],[7929,11],[7929,14,7129,2],[7929,29,7129,14,"state"],[7929,34,7129,2],[7929,36,7129,21],[7930,0,7129,21],[7932,0,7130,4],[7932,9,7130,9,"type"],[7932,13,7130,4],[7932,16,7130,16,"state"],[7932,21,7130,21],[7932,22,7130,22,"type"],[7932,26,7130,4],[7933,0,7131,4],[7933,9,7131,9,"value"],[7933,14,7131,4],[7933,17,7131,17,"state"],[7933,22,7131,22],[7933,23,7131,23,"value"],[7933,28,7131,4],[7934,0,7132,4],[7934,9,7132,9,"start"],[7934,14,7132,4],[7934,17,7132,17,"state"],[7934,22,7132,22],[7934,23,7132,23,"start"],[7934,28,7132,4],[7935,0,7133,4],[7935,9,7133,9,"end"],[7935,12,7133,4],[7935,15,7133,15,"state"],[7935,20,7133,20],[7935,21,7133,21,"end"],[7935,24,7133,4],[7936,0,7134,4],[7936,9,7134,9,"loc"],[7936,12,7134,4],[7936,15,7134,15],[7936,19,7134,19,"SourceLocation"],[7936,33,7134,15],[7936,34,7134,34,"state"],[7936,39,7134,39],[7936,40,7134,40,"startLoc"],[7936,48,7134,15],[7936,50,7134,50,"state"],[7936,55,7134,55],[7936,56,7134,56,"endLoc"],[7936,62,7134,15],[7936,63,7134,4],[7937,0,7135,3],[7937,3],[7939,6,7138,6,"Tokenizer"],[7939,15],[7942,0,7139,2],[7942,23,7139,14,"options"],[7942,30,7139,2],[7942,32,7139,23,"input"],[7942,37,7139,2],[7942,39,7139,30],[7943,0,7139,30],[7945,0,7139,30],[7947,0,7140,4],[7948,0,7141,4],[7948,14,7141,9,"state"],[7948,19,7141,4],[7948,22,7141,17],[7948,26,7141,21,"State"],[7948,31,7141,17],[7948,33,7141,4],[7950,0,7142,4],[7950,14,7142,9,"state"],[7950,19,7142,4],[7950,20,7142,15,"init"],[7950,24,7142,4],[7950,25,7142,20,"options"],[7950,32,7142,4],[7952,0,7143,4],[7952,14,7143,9,"input"],[7952,19,7143,4],[7952,22,7143,17,"input"],[7952,27,7143,4],[7953,0,7144,4],[7953,14,7144,9,"length"],[7953,20,7144,4],[7953,23,7144,18,"input"],[7953,28,7144,23],[7953,29,7144,24,"length"],[7953,35,7144,4],[7954,0,7145,4],[7954,14,7145,9,"isLookahead"],[7954,25,7145,4],[7954,28,7145,23],[7954,33,7145,4],[7955,0,7139,30],[7956,0,7146,3],[7960,29,7148,9],[7961,0,7149,4],[7961,12,7149,8],[7961,13,7149,9],[7961,18,7149,14,"isLookahead"],[7961,29,7149,4],[7961,31,7149,27],[7962,0,7150,6],[7962,15,7150,11,"checkKeywordEscapes"],[7962,34,7150,6],[7964,0,7152,6],[7964,14,7152,10],[7964,19,7152,15,"options"],[7964,26,7152,10],[7964,27,7152,23,"tokens"],[7964,33,7152,6],[7964,35,7152,31],[7965,0,7153,8],[7965,17,7153,13,"state"],[7965,22,7153,8],[7965,23,7153,19,"tokens"],[7965,29,7153,8],[7965,30,7153,26,"push"],[7965,34,7153,8],[7965,35,7153,31],[7965,39,7153,35,"Token"],[7965,44,7153,31],[7965,45,7153,41],[7965,50,7153,46,"state"],[7965,55,7153,31],[7965,56,7153,8],[7966,0,7154,7],[7967,0,7155,5],[7969,0,7157,4],[7969,13,7157,9,"state"],[7969,18,7157,4],[7969,19,7157,15,"lastTokEnd"],[7969,29,7157,4],[7969,32,7157,28],[7969,37,7157,33,"state"],[7969,42,7157,28],[7969,43,7157,39,"end"],[7969,46,7157,4],[7970,0,7158,4],[7970,13,7158,9,"state"],[7970,18,7158,4],[7970,19,7158,15,"lastTokStart"],[7970,31,7158,4],[7970,34,7158,30],[7970,39,7158,35,"state"],[7970,44,7158,30],[7970,45,7158,41,"start"],[7970,50,7158,4],[7971,0,7159,4],[7971,13,7159,9,"state"],[7971,18,7159,4],[7971,19,7159,15,"lastTokEndLoc"],[7971,32,7159,4],[7971,35,7159,31],[7971,40,7159,36,"state"],[7971,45,7159,31],[7971,46,7159,42,"endLoc"],[7971,52,7159,4],[7972,0,7160,4],[7972,13,7160,9,"state"],[7972,18,7160,4],[7972,19,7160,15,"lastTokStartLoc"],[7972,34,7160,4],[7972,37,7160,33],[7972,42,7160,38,"state"],[7972,47,7160,33],[7972,48,7160,44,"startLoc"],[7972,56,7160,4],[7973,0,7161,4],[7973,13,7161,9,"nextToken"],[7973,22,7161,4],[7974,0,7162,3],[7977,26,7164,6,"type"],[7977,30],[7977,32,7164,12],[7978,0,7165,4],[7978,12,7165,8],[7978,17,7165,13,"match"],[7978,22,7165,8],[7978,23,7165,19,"type"],[7978,27,7165,8],[7978,28,7165,4],[7978,30,7165,26],[7979,0,7166,6],[7979,15,7166,11,"next"],[7979,19,7166,6],[7980,0,7167,6],[7980,17,7167,13],[7980,21,7167,6],[7981,0,7168,5],[7981,9,7165,4],[7981,15,7168,11],[7982,0,7169,6],[7982,17,7169,13],[7982,22,7169,6],[7983,0,7170,5],[7984,0,7171,3],[7987,28,7173,8,"type"],[7987,32],[7987,34,7173,14],[7988,0,7174,4],[7988,15,7174,11],[7988,20,7174,16,"state"],[7988,25,7174,11],[7988,26,7174,22,"type"],[7988,30,7174,11],[7988,35,7174,31,"type"],[7988,39,7174,4],[7989,0,7175,3],[7992,34,7177,14],[7993,0,7178,4],[7993,12,7178,10,"old"],[7993,15,7178,13],[7993,18,7178,16],[7993,23,7178,21,"state"],[7993,28,7178,4],[7994,0,7179,4],[7994,13,7179,9,"state"],[7994,18,7179,4],[7994,21,7179,17,"old"],[7994,24,7179,20],[7994,25,7179,21,"clone"],[7994,30,7179,17],[7994,31,7179,27],[7994,35,7179,17],[7994,36,7179,4],[7995,0,7180,4],[7995,13,7180,9,"isLookahead"],[7995,24,7180,4],[7995,27,7180,23],[7995,31,7180,4],[7996,0,7181,4],[7996,13,7181,9,"next"],[7996,17,7181,4],[7997,0,7182,4],[7997,13,7182,9,"isLookahead"],[7997,24,7182,4],[7997,27,7182,23],[7997,32,7182,4],[7998,0,7183,4],[7998,12,7183,10,"curr"],[7998,16,7183,14],[7998,19,7183,17],[7998,24,7183,22,"state"],[7998,29,7183,4],[7999,0,7184,4],[7999,13,7184,9,"state"],[7999,18,7184,4],[7999,21,7184,17,"old"],[7999,24,7184,4],[8000,0,7185,4],[8000,15,7185,11,"curr"],[8000,19,7185,4],[8001,0,7186,3],[8004,39,7188,19],[8005,0,7189,4],[8005,12,7189,10,"thisTokEnd"],[8005,22,7189,20],[8005,25,7189,23],[8005,30,7189,28,"state"],[8005,35,7189,23],[8005,36,7189,34,"pos"],[8005,39,7189,4],[8006,0,7190,4,"skipWhiteSpace"],[8006,8,7190,4,"skipWhiteSpace"],[8006,22,7190,18],[8006,23,7190,19,"lastIndex"],[8006,32,7190,4],[8006,35,7190,31,"thisTokEnd"],[8006,45,7190,4],[8007,0,7191,4],[8007,12,7191,10,"skip"],[8007,16,7191,14],[8007,19,7191,17,"skipWhiteSpace"],[8007,33,7191,31],[8007,34,7191,32,"exec"],[8007,38,7191,17],[8007,39,7191,37],[8007,44,7191,42,"input"],[8007,49,7191,17],[8007,50,7191,4],[8008,0,7192,4],[8008,15,7192,11,"thisTokEnd"],[8008,25,7192,21],[8008,28,7192,24,"skip"],[8008,32,7192,28],[8008,33,7192,29],[8008,34,7192,28],[8008,35,7192,24],[8008,36,7192,32,"length"],[8008,42,7192,4],[8009,0,7193,3],[8012,42,7195,22],[8013,0,7196,4],[8013,15,7196,11],[8013,20,7196,16,"input"],[8013,25,7196,11],[8013,26,7196,22,"charCodeAt"],[8013,36,7196,11],[8013,37,7196,33],[8013,42,7196,38,"nextTokenStart"],[8013,56,7196,33],[8013,58,7196,11],[8013,59,7196,4],[8014,0,7197,3],[8017,32,7199,12,"strict"],[8017,38],[8017,40,7199,20],[8018,0,7200,4],[8018,13,7200,9,"state"],[8018,18,7200,4],[8018,19,7200,15,"strict"],[8018,25,7200,4],[8018,28,7200,24,"strict"],[8018,34,7200,4],[8019,0,7201,4],[8019,12,7201,8],[8019,13,7201,9],[8019,18,7201,14,"match"],[8019,23,7201,9],[8019,24,7201,20,"types"],[8019,29,7201,25],[8019,30,7201,26,"num"],[8019,33,7201,9],[8019,34,7201,8],[8019,38,7201,34],[8019,39,7201,35],[8019,44,7201,40,"match"],[8019,49,7201,35],[8019,50,7201,46,"types"],[8019,55,7201,51],[8019,56,7201,52,"string"],[8019,62,7201,35],[8019,63,7201,4],[8019,65,7201,61],[8020,0,7202,4],[8020,13,7202,9,"state"],[8020,18,7202,4],[8020,19,7202,15,"pos"],[8020,22,7202,4],[8020,25,7202,21],[8020,30,7202,26,"state"],[8020,35,7202,21],[8020,36,7202,32,"start"],[8020,41,7202,4],[8022,0,7204,4],[8022,15,7204,11],[8022,20,7204,16,"state"],[8022,25,7204,11],[8022,26,7204,22,"pos"],[8022,29,7204,11],[8022,32,7204,28],[8022,37,7204,33,"state"],[8022,42,7204,28],[8022,43,7204,39,"lineStart"],[8022,52,7204,4],[8022,54,7204,50],[8023,0,7205,6],[8023,15,7205,11,"state"],[8023,20,7205,6],[8023,21,7205,17,"lineStart"],[8023,30,7205,6],[8023,33,7205,29],[8023,38,7205,34,"input"],[8023,43,7205,29],[8023,44,7205,40,"lastIndexOf"],[8023,55,7205,29],[8023,56,7205,52],[8023,60,7205,29],[8023,62,7205,58],[8023,67,7205,63,"state"],[8023,72,7205,58],[8023,73,7205,69,"lineStart"],[8023,82,7205,58],[8023,85,7205,81],[8023,86,7205,29],[8023,90,7205,86],[8023,91,7205,6],[8024,0,7206,6],[8024,12,7206,8],[8024,17,7206,13,"state"],[8024,22,7206,8],[8024,23,7206,19,"curLine"],[8024,30,7206,6],[8025,0,7207,5],[8027,0,7209,4],[8027,13,7209,9,"nextToken"],[8027,22,7209,4],[8028,0,7210,3],[8031,35,7212,15],[8032,0,7213,4],[8032,15,7213,11],[8032,20,7213,16,"state"],[8032,25,7213,11],[8032,26,7213,22,"context"],[8032,33,7213,11],[8032,34,7213,30],[8032,39,7213,35,"state"],[8032,44,7213,30],[8032,45,7213,41,"context"],[8032,52,7213,30],[8032,53,7213,49,"length"],[8032,59,7213,30],[8032,62,7213,58],[8032,63,7213,11],[8032,64,7213,4],[8033,0,7214,3],[8036,34,7216,14],[8037,0,7217,4],[8037,12,7217,10,"curContext"],[8037,22,7217,20],[8037,25,7217,23],[8037,30,7217,28,"curContext"],[8037,40,7217,23],[8037,42,7217,4],[8038,0,7218,4],[8038,12,7218,8],[8038,13,7218,9,"curContext"],[8038,23,7218,8],[8038,27,7218,23],[8038,28,7218,24,"curContext"],[8038,38,7218,34],[8038,39,7218,35,"preserveSpace"],[8038,52,7218,4],[8038,54,7218,50],[8038,59,7218,55,"skipSpace"],[8038,68,7218,50],[8039,0,7219,4],[8039,13,7219,9,"state"],[8039,18,7219,4],[8039,19,7219,15,"containsOctal"],[8039,32,7219,4],[8039,35,7219,31],[8039,40,7219,4],[8040,0,7220,4],[8040,13,7220,9,"state"],[8040,18,7220,4],[8040,19,7220,15,"octalPosition"],[8040,32,7220,4],[8040,35,7220,31],[8040,39,7220,4],[8041,0,7221,4],[8041,13,7221,9,"state"],[8041,18,7221,4],[8041,19,7221,15,"start"],[8041,24,7221,4],[8041,27,7221,23],[8041,32,7221,28,"state"],[8041,37,7221,23],[8041,38,7221,34,"pos"],[8041,41,7221,4],[8042,0,7222,4],[8042,13,7222,9,"state"],[8042,18,7222,4],[8042,19,7222,15,"startLoc"],[8042,27,7222,4],[8042,30,7222,26],[8042,35,7222,31,"state"],[8042,40,7222,26],[8042,41,7222,37,"curPosition"],[8042,52,7222,26],[8042,54,7222,4],[8044,0,7224,4],[8044,12,7224,8],[8044,17,7224,13,"state"],[8044,22,7224,8],[8044,23,7224,19,"pos"],[8044,26,7224,8],[8044,30,7224,26],[8044,35,7224,31,"length"],[8044,41,7224,4],[8044,43,7224,39],[8045,0,7225,6],[8045,15,7225,11,"finishToken"],[8045,26,7225,6],[8045,27,7225,23,"types"],[8045,32,7225,28],[8045,33,7225,29,"eof"],[8045,36,7225,6],[8046,0,7226,6],[8047,0,7227,5],[8049,0,7229,4],[8049,12,7229,8,"curContext"],[8049,22,7229,18],[8049,23,7229,19,"override"],[8049,31,7229,4],[8049,33,7229,29],[8050,0,7230,6,"curContext"],[8050,10,7230,6,"curContext"],[8050,20,7230,16],[8050,21,7230,17,"override"],[8050,29,7230,6],[8050,30,7230,26],[8050,34,7230,6],[8051,0,7231,5],[8051,9,7229,4],[8051,15,7231,11],[8052,0,7232,6],[8052,15,7232,11,"getTokenFromCode"],[8052,31,7232,6],[8052,32,7232,28],[8052,37,7232,33,"input"],[8052,42,7232,28],[8052,43,7232,39,"codePointAt"],[8052,54,7232,28],[8052,55,7232,51],[8052,60,7232,56,"state"],[8052,65,7232,51],[8052,66,7232,62,"pos"],[8052,69,7232,28],[8052,70,7232,6],[8053,0,7233,5],[8054,0,7234,3],[8057,34,7236,14,"block"],[8057,39],[8057,41,7236,21,"text"],[8057,45],[8057,47,7236,27,"start"],[8057,52],[8057,54,7236,34,"end"],[8057,57],[8057,59,7236,39,"startLoc"],[8057,67],[8057,69,7236,49,"endLoc"],[8057,75],[8057,77,7236,57],[8058,0,7237,4],[8058,12,7237,10,"comment"],[8058,19,7237,17],[8058,22,7237,20],[8059,0,7238,6,"type"],[8059,10,7238,6,"type"],[8059,14,7238,10],[8059,16,7238,12,"block"],[8059,21,7238,17],[8059,24,7238,20],[8059,38,7238,17],[8059,41,7238,37],[8059,54,7237,20],[8060,0,7239,6,"value"],[8060,10,7239,6,"value"],[8060,15,7239,11],[8060,17,7239,13,"text"],[8060,21,7237,20],[8061,0,7240,6,"start"],[8061,10,7240,6,"start"],[8061,15,7240,11],[8061,17,7240,13,"start"],[8061,22,7237,20],[8062,0,7241,6,"end"],[8062,10,7241,6,"end"],[8062,13,7241,9],[8062,15,7241,11,"end"],[8062,18,7237,20],[8063,0,7242,6,"loc"],[8063,10,7242,6,"loc"],[8063,13,7242,9],[8063,15,7242,11],[8063,19,7242,15,"SourceLocation"],[8063,33,7242,11],[8063,34,7242,30,"startLoc"],[8063,42,7242,11],[8063,44,7242,40,"endLoc"],[8063,50,7242,11],[8064,0,7237,20],[8064,9,7237,4],[8065,0,7244,4],[8065,12,7244,8],[8065,17,7244,13,"options"],[8065,24,7244,8],[8065,25,7244,21,"tokens"],[8065,31,7244,4],[8065,33,7244,29],[8065,38,7244,34,"state"],[8065,43,7244,29],[8065,44,7244,40,"tokens"],[8065,50,7244,29],[8065,51,7244,47,"push"],[8065,55,7244,29],[8065,56,7244,52,"comment"],[8065,63,7244,29],[8066,0,7245,4],[8066,13,7245,9,"state"],[8066,18,7245,4],[8066,19,7245,15,"comments"],[8066,27,7245,4],[8066,28,7245,24,"push"],[8066,32,7245,4],[8066,33,7245,29,"comment"],[8066,40,7245,4],[8067,0,7246,4],[8067,13,7246,9,"addComment"],[8067,23,7246,4],[8067,24,7246,20,"comment"],[8067,31,7246,4],[8068,0,7247,3],[8071,41,7249,21],[8072,0,7250,4],[8072,12,7250,10,"startLoc"],[8072,20,7250,18],[8072,23,7250,21],[8072,28,7250,26,"state"],[8072,33,7250,21],[8072,34,7250,32,"curPosition"],[8072,45,7250,21],[8072,47,7250,4],[8073,0,7251,4],[8073,12,7251,10,"start"],[8073,17,7251,15],[8073,20,7251,18],[8073,25,7251,23,"state"],[8073,30,7251,18],[8073,31,7251,29,"pos"],[8073,34,7251,4],[8074,0,7252,4],[8074,12,7252,10,"end"],[8074,15,7252,13],[8074,18,7252,16],[8074,23,7252,21,"input"],[8074,28,7252,16],[8074,29,7252,27,"indexOf"],[8074,36,7252,16],[8074,37,7252,35],[8074,41,7252,16],[8074,43,7252,41],[8074,48,7252,46,"state"],[8074,53,7252,41],[8074,54,7252,52,"pos"],[8074,57,7252,41],[8074,60,7252,58],[8074,61,7252,16],[8074,62,7252,4],[8075,0,7253,4],[8075,12,7253,8,"end"],[8075,15,7253,11],[8075,20,7253,16],[8075,21,7253,17],[8075,22,7253,4],[8075,24,7253,20],[8075,30,7253,26],[8075,35,7253,31,"raise"],[8075,40,7253,26],[8075,41,7253,37,"start"],[8075,46,7253,26],[8075,48,7253,44],[8075,70,7253,26],[8075,71,7253,20],[8076,0,7254,4],[8076,13,7254,9,"state"],[8076,18,7254,4],[8076,19,7254,15,"pos"],[8076,22,7254,4],[8076,25,7254,21,"end"],[8076,28,7254,24],[8076,31,7254,27],[8076,32,7254,4],[8077,0,7255,4,"lineBreakG"],[8077,8,7255,4,"lineBreakG"],[8077,18,7255,14],[8077,19,7255,15,"lastIndex"],[8077,28,7255,4],[8077,31,7255,27,"start"],[8077,36,7255,4],[8078,0,7256,4],[8078,12,7256,8,"match"],[8078,17,7256,4],[8080,0,7258,4],[8080,15,7258,11],[8080,16,7258,12,"match"],[8080,21,7258,17],[8080,24,7258,20,"lineBreakG"],[8080,34,7258,30],[8080,35,7258,31,"exec"],[8080,39,7258,20],[8080,40,7258,36],[8080,45,7258,41,"input"],[8080,50,7258,20],[8080,51,7258,11],[8080,56,7258,52,"match"],[8080,61,7258,57],[8080,62,7258,58,"index"],[8080,67,7258,52],[8080,70,7258,66],[8080,75,7258,71,"state"],[8080,80,7258,66],[8080,81,7258,77,"pos"],[8080,84,7258,4],[8080,86,7258,82],[8081,0,7259,6],[8081,12,7259,8],[8081,17,7259,13,"state"],[8081,22,7259,8],[8081,23,7259,19,"curLine"],[8081,30,7259,6],[8082,0,7260,6],[8082,15,7260,11,"state"],[8082,20,7260,6],[8082,21,7260,17,"lineStart"],[8082,30,7260,6],[8082,33,7260,29,"match"],[8082,38,7260,34],[8082,39,7260,35,"index"],[8082,44,7260,29],[8082,47,7260,43,"match"],[8082,52,7260,48],[8082,53,7260,49],[8082,54,7260,48],[8082,55,7260,43],[8082,56,7260,52,"length"],[8082,62,7260,6],[8083,0,7261,5],[8085,0,7263,4],[8085,12,7263,8],[8085,17,7263,13,"isLookahead"],[8085,28,7263,4],[8085,30,7263,26],[8086,0,7264,4],[8086,13,7264,9,"pushComment"],[8086,24,7264,4],[8086,25,7264,21],[8086,29,7264,4],[8086,31,7264,27],[8086,36,7264,32,"input"],[8086,41,7264,27],[8086,42,7264,38,"slice"],[8086,47,7264,27],[8086,48,7264,44,"start"],[8086,53,7264,49],[8086,56,7264,52],[8086,57,7264,27],[8086,59,7264,55,"end"],[8086,62,7264,27],[8086,63,7264,4],[8086,65,7264,61,"start"],[8086,70,7264,4],[8086,72,7264,68],[8086,77,7264,73,"state"],[8086,82,7264,68],[8086,83,7264,79,"pos"],[8086,86,7264,4],[8086,88,7264,84,"startLoc"],[8086,96,7264,4],[8086,98,7264,94],[8086,103,7264,99,"state"],[8086,108,7264,94],[8086,109,7264,105,"curPosition"],[8086,120,7264,94],[8086,122,7264,4],[8087,0,7265,3],[8090,38,7267,18,"startSkip"],[8090,47],[8090,49,7267,29],[8091,0,7268,4],[8091,12,7268,10,"start"],[8091,17,7268,15],[8091,20,7268,18],[8091,25,7268,23,"state"],[8091,30,7268,18],[8091,31,7268,29,"pos"],[8091,34,7268,4],[8092,0,7269,4],[8092,12,7269,10,"startLoc"],[8092,20,7269,18],[8092,23,7269,21],[8092,28,7269,26,"state"],[8092,33,7269,21],[8092,34,7269,32,"curPosition"],[8092,45,7269,21],[8092,47,7269,4],[8093,0,7270,4],[8093,12,7270,8,"ch"],[8093,14,7270,10],[8093,17,7270,13],[8093,22,7270,18,"input"],[8093,27,7270,13],[8093,28,7270,24,"charCodeAt"],[8093,38,7270,13],[8093,39,7270,35],[8093,44,7270,40,"state"],[8093,49,7270,35],[8093,50,7270,46,"pos"],[8093,53,7270,35],[8093,57,7270,53,"startSkip"],[8093,66,7270,13],[8093,67,7270,4],[8095,0,7272,4],[8095,12,7272,8],[8095,17,7272,13,"state"],[8095,22,7272,8],[8095,23,7272,19,"pos"],[8095,26,7272,8],[8095,29,7272,25],[8095,34,7272,30,"length"],[8095,40,7272,4],[8095,42,7272,38],[8096,0,7273,6],[8096,17,7273,13],[8096,18,7273,14,"isNewLine"],[8096,27,7273,23],[8096,28,7273,24,"ch"],[8096,30,7273,23],[8096,31,7273,13],[8096,35,7273,31],[8096,37,7273,33],[8096,42,7273,38,"state"],[8096,47,7273,33],[8096,48,7273,44,"pos"],[8096,51,7273,31],[8096,54,7273,50],[8096,59,7273,55,"length"],[8096,65,7273,6],[8096,67,7273,63],[8097,0,7274,8,"ch"],[8097,12,7274,8,"ch"],[8097,14,7274,10],[8097,17,7274,13],[8097,22,7274,18,"input"],[8097,27,7274,13],[8097,28,7274,24,"charCodeAt"],[8097,38,7274,13],[8097,39,7274,35],[8097,44,7274,40,"state"],[8097,49,7274,35],[8097,50,7274,46,"pos"],[8097,53,7274,13],[8097,54,7274,8],[8098,0,7275,7],[8099,0,7276,5],[8101,0,7278,4],[8101,12,7278,8],[8101,17,7278,13,"isLookahead"],[8101,28,7278,4],[8101,30,7278,26],[8102,0,7279,4],[8102,13,7279,9,"pushComment"],[8102,24,7279,4],[8102,25,7279,21],[8102,30,7279,4],[8102,32,7279,28],[8102,37,7279,33,"input"],[8102,42,7279,28],[8102,43,7279,39,"slice"],[8102,48,7279,28],[8102,49,7279,45,"start"],[8102,54,7279,50],[8102,57,7279,53,"startSkip"],[8102,66,7279,28],[8102,68,7279,64],[8102,73,7279,69,"state"],[8102,78,7279,64],[8102,79,7279,75,"pos"],[8102,82,7279,28],[8102,83,7279,4],[8102,85,7279,81,"start"],[8102,90,7279,4],[8102,92,7279,88],[8102,97,7279,93,"state"],[8102,102,7279,88],[8102,103,7279,99,"pos"],[8102,106,7279,4],[8102,108,7279,104,"startLoc"],[8102,116,7279,4],[8102,118,7279,114],[8102,123,7279,119,"state"],[8102,128,7279,114],[8102,129,7279,125,"curPosition"],[8102,140,7279,114],[8102,142,7279,4],[8103,0,7280,3],[8106,34,7282,14],[8107,0,7283,4,"loop"],[8107,8,7283,4,"loop"],[8107,12,7283,8],[8107,14,7283,10],[8107,21,7283,17],[8107,26,7283,22,"state"],[8107,31,7283,17],[8107,32,7283,28,"pos"],[8107,35,7283,17],[8107,38,7283,34],[8107,43,7283,39,"length"],[8107,49,7283,10],[8107,51,7283,47],[8108,0,7284,6],[8108,14,7284,12,"ch"],[8108,16,7284,14],[8108,19,7284,17],[8108,24,7284,22,"input"],[8108,29,7284,17],[8108,30,7284,28,"charCodeAt"],[8108,40,7284,17],[8108,41,7284,39],[8108,46,7284,44,"state"],[8108,51,7284,39],[8108,52,7284,50,"pos"],[8108,55,7284,17],[8108,56,7284,6],[8110,0,7286,6],[8110,18,7286,14,"ch"],[8110,20,7286,6],[8111,0,7287,8],[8111,17,7287,13],[8111,19,7287,8],[8112,0,7288,8],[8112,17,7288,13],[8112,20,7288,8],[8113,0,7289,8],[8113,17,7289,13],[8113,18,7289,8],[8114,0,7290,10],[8114,16,7290,12],[8114,21,7290,17,"state"],[8114,26,7290,12],[8114,27,7290,23,"pos"],[8114,30,7290,10],[8115,0,7291,10],[8117,0,7293,8],[8117,17,7293,13],[8117,19,7293,8],[8118,0,7294,10],[8118,18,7294,14],[8118,23,7294,19,"input"],[8118,28,7294,14],[8118,29,7294,25,"charCodeAt"],[8118,39,7294,14],[8118,40,7294,36],[8118,45,7294,41,"state"],[8118,50,7294,36],[8118,51,7294,47,"pos"],[8118,54,7294,36],[8118,57,7294,53],[8118,58,7294,14],[8118,64,7294,60],[8118,66,7294,10],[8118,68,7294,64],[8119,0,7295,12],[8119,18,7295,14],[8119,23,7295,19,"state"],[8119,28,7295,14],[8119,29,7295,25,"pos"],[8119,32,7295,12],[8120,0,7296,11],[8122,0,7298,8],[8122,17,7298,13],[8122,19,7298,8],[8123,0,7299,8],[8123,17,7299,13],[8123,21,7299,8],[8124,0,7300,8],[8124,17,7300,13],[8124,21,7300,8],[8125,0,7301,10],[8125,16,7301,12],[8125,21,7301,17,"state"],[8125,26,7301,12],[8125,27,7301,23,"pos"],[8125,30,7301,10],[8126,0,7302,10],[8126,16,7302,12],[8126,21,7302,17,"state"],[8126,26,7302,12],[8126,27,7302,23,"curLine"],[8126,34,7302,10],[8127,0,7303,10],[8127,19,7303,15,"state"],[8127,24,7303,10],[8127,25,7303,21,"lineStart"],[8127,34,7303,10],[8127,37,7303,33],[8127,42,7303,38,"state"],[8127,47,7303,33],[8127,48,7303,44,"pos"],[8127,51,7303,10],[8128,0,7304,10],[8130,0,7306,8],[8130,17,7306,13],[8130,19,7306,8],[8131,0,7307,10],[8131,22,7307,18],[8131,27,7307,23,"input"],[8131,32,7307,18],[8131,33,7307,29,"charCodeAt"],[8131,43,7307,18],[8131,44,7307,40],[8131,49,7307,45,"state"],[8131,54,7307,40],[8131,55,7307,51,"pos"],[8131,58,7307,40],[8131,61,7307,57],[8131,62,7307,18],[8131,63,7307,10],[8132,0,7308,12],[8132,21,7308,17],[8132,23,7308,12],[8133,0,7309,14],[8133,23,7309,19,"skipBlockComment"],[8133,39,7309,14],[8134,0,7310,14],[8136,0,7312,12],[8136,21,7312,17],[8136,23,7312,12],[8137,0,7313,14],[8137,23,7313,19,"skipLineComment"],[8137,38,7313,14],[8137,39,7313,35],[8137,40,7313,14],[8138,0,7314,14],[8140,0,7316,12],[8141,0,7317,14],[8141,24,7317,20,"loop"],[8141,28,7317,14],[8142,0,7307,10],[8144,0,7320,10],[8146,0,7322,8],[8147,0,7323,10],[8147,18,7323,14,"isWhitespace"],[8147,30,7323,26],[8147,31,7323,27,"ch"],[8147,33,7323,26],[8147,34,7323,10],[8147,36,7323,32],[8148,0,7324,12],[8148,18,7324,14],[8148,23,7324,19,"state"],[8148,28,7324,14],[8148,29,7324,25,"pos"],[8148,32,7324,12],[8149,0,7325,11],[8149,15,7323,10],[8149,21,7325,17],[8150,0,7326,12],[8150,22,7326,18,"loop"],[8150,26,7326,12],[8151,0,7327,11],[8153,0,7286,6],[8154,0,7330,5],[8155,0,7331,3],[8158,34,7333,14,"type"],[8158,38],[8158,40,7333,20,"val"],[8158,43],[8158,45,7333,25],[8159,0,7334,4],[8159,13,7334,9,"state"],[8159,18,7334,4],[8159,19,7334,15,"end"],[8159,22,7334,4],[8159,25,7334,21],[8159,30,7334,26,"state"],[8159,35,7334,21],[8159,36,7334,32,"pos"],[8159,39,7334,4],[8160,0,7335,4],[8160,13,7335,9,"state"],[8160,18,7335,4],[8160,19,7335,15,"endLoc"],[8160,25,7335,4],[8160,28,7335,24],[8160,33,7335,29,"state"],[8160,38,7335,24],[8160,39,7335,35,"curPosition"],[8160,50,7335,24],[8160,52,7335,4],[8161,0,7336,4],[8161,12,7336,10,"prevType"],[8161,20,7336,18],[8161,23,7336,21],[8161,28,7336,26,"state"],[8161,33,7336,21],[8161,34,7336,32,"type"],[8161,38,7336,4],[8162,0,7337,4],[8162,13,7337,9,"state"],[8162,18,7337,4],[8162,19,7337,15,"type"],[8162,23,7337,4],[8162,26,7337,22,"type"],[8162,30,7337,4],[8163,0,7338,4],[8163,13,7338,9,"state"],[8163,18,7338,4],[8163,19,7338,15,"value"],[8163,24,7338,4],[8163,27,7338,23,"val"],[8163,30,7338,4],[8164,0,7339,4],[8164,12,7339,8],[8164,13,7339,9],[8164,18,7339,14,"isLookahead"],[8164,29,7339,4],[8164,31,7339,27],[8164,36,7339,32,"updateContext"],[8164,49,7339,27],[8164,50,7339,46,"prevType"],[8164,58,7339,27],[8165,0,7340,3],[8168,45,7342,25],[8169,0,7343,4],[8169,12,7343,8],[8169,17,7343,13,"state"],[8169,22,7343,8],[8169,23,7343,19,"pos"],[8169,26,7343,8],[8169,31,7343,27],[8169,32,7343,8],[8169,36,7343,32],[8169,41,7343,37,"readToken_interpreter"],[8169,62,7343,32],[8169,64,7343,4],[8169,66,7343,62],[8170,0,7344,6],[8171,0,7345,5],[8173,0,7347,4],[8173,12,7347,10,"nextPos"],[8173,19,7347,17],[8173,22,7347,20],[8173,27,7347,25,"state"],[8173,32,7347,20],[8173,33,7347,31,"pos"],[8173,36,7347,20],[8173,39,7347,37],[8173,40,7347,4],[8174,0,7348,4],[8174,12,7348,10,"next"],[8174,16,7348,14],[8174,19,7348,17],[8174,24,7348,22,"input"],[8174,29,7348,17],[8174,30,7348,28,"charCodeAt"],[8174,40,7348,17],[8174,41,7348,39,"nextPos"],[8174,48,7348,17],[8174,49,7348,4],[8176,0,7350,4],[8176,12,7350,8,"next"],[8176,16,7350,12],[8176,20,7350,16],[8176,22,7350,8],[8176,26,7350,22,"next"],[8176,30,7350,26],[8176,34,7350,30],[8176,36,7350,4],[8176,38,7350,34],[8177,0,7351,6],[8177,16,7351,12],[8177,21,7351,17,"raise"],[8177,26,7351,12],[8177,27,7351,23],[8177,32,7351,28,"state"],[8177,37,7351,23],[8177,38,7351,34,"pos"],[8177,41,7351,12],[8177,43,7351,39],[8177,78,7351,12],[8177,79,7351,6],[8178,0,7352,5],[8180,0,7354,4],[8180,12,7354,8],[8180,13,7354,9],[8180,18,7354,14,"hasPlugin"],[8180,27,7354,9],[8180,28,7354,24],[8180,52,7354,9],[8180,57,7354,53],[8180,62,7354,58,"hasPlugin"],[8180,71,7354,53],[8180,72,7354,68],[8180,93,7354,53],[8180,94,7354,8],[8180,99,7354,95],[8180,104,7354,100,"state"],[8180,109,7354,95],[8180,110,7354,106,"classLevel"],[8180,120,7354,95],[8180,123,7354,119],[8180,124,7354,4],[8180,126,7354,122],[8181,0,7355,6],[8181,12,7355,8],[8181,17,7355,13,"state"],[8181,22,7355,8],[8181,23,7355,19,"pos"],[8181,26,7355,6],[8182,0,7356,6],[8182,15,7356,11,"finishToken"],[8182,26,7356,6],[8182,27,7356,23,"types"],[8182,32,7356,28],[8182,33,7356,29,"hash"],[8182,37,7356,6],[8183,0,7357,6],[8184,0,7358,5],[8184,9,7354,4],[8184,15,7358,11],[8184,19,7358,15],[8184,24,7358,20,"getPluginOption"],[8184,39,7358,15],[8184,40,7358,36],[8184,58,7358,15],[8184,60,7358,56],[8184,70,7358,15],[8184,76,7358,72],[8184,83,7358,11],[8184,85,7358,81],[8185,0,7359,6],[8185,15,7359,11,"finishOp"],[8185,23,7359,6],[8185,24,7359,20,"types"],[8185,29,7359,25],[8185,30,7359,26,"hash"],[8185,34,7359,6],[8185,36,7359,32],[8185,37,7359,6],[8186,0,7360,5],[8186,9,7358,11],[8186,15,7360,11],[8187,0,7361,6],[8187,16,7361,12],[8187,21,7361,17,"raise"],[8187,26,7361,12],[8187,27,7361,23],[8187,32,7361,28,"state"],[8187,37,7361,23],[8187,38,7361,34,"pos"],[8187,41,7361,12],[8187,43,7361,39],[8187,69,7361,12],[8187,70,7361,6],[8188,0,7362,5],[8189,0,7363,3],[8192,38,7365,18],[8193,0,7366,4],[8193,12,7366,10,"next"],[8193,16,7366,14],[8193,19,7366,17],[8193,24,7366,22,"input"],[8193,29,7366,17],[8193,30,7366,28,"charCodeAt"],[8193,40,7366,17],[8193,41,7366,39],[8193,46,7366,44,"state"],[8193,51,7366,39],[8193,52,7366,50,"pos"],[8193,55,7366,39],[8193,58,7366,56],[8193,59,7366,17],[8193,60,7366,4],[8195,0,7368,4],[8195,12,7368,8,"next"],[8195,16,7368,12],[8195,20,7368,16],[8195,22,7368,8],[8195,26,7368,22,"next"],[8195,30,7368,26],[8195,34,7368,30],[8195,36,7368,4],[8195,38,7368,34],[8196,0,7369,6],[8196,15,7369,11,"readNumber"],[8196,25,7369,6],[8196,26,7369,22],[8196,30,7369,6],[8197,0,7370,6],[8198,0,7371,5],[8200,0,7373,4],[8200,12,7373,8,"next"],[8200,16,7373,12],[8200,21,7373,17],[8200,23,7373,8],[8200,27,7373,23],[8200,32,7373,28,"input"],[8200,37,7373,23],[8200,38,7373,34,"charCodeAt"],[8200,48,7373,23],[8200,49,7373,45],[8200,54,7373,50,"state"],[8200,59,7373,45],[8200,60,7373,56,"pos"],[8200,63,7373,45],[8200,66,7373,62],[8200,67,7373,23],[8200,73,7373,69],[8200,75,7373,4],[8200,77,7373,73],[8201,0,7374,6],[8201,15,7374,11,"state"],[8201,20,7374,6],[8201,21,7374,17,"pos"],[8201,24,7374,6],[8201,28,7374,24],[8201,29,7374,6],[8202,0,7375,6],[8202,15,7375,11,"finishToken"],[8202,26,7375,6],[8202,27,7375,23,"types"],[8202,32,7375,28],[8202,33,7375,29,"ellipsis"],[8202,41,7375,6],[8203,0,7376,5],[8203,9,7373,4],[8203,15,7376,11],[8204,0,7377,6],[8204,12,7377,8],[8204,17,7377,13,"state"],[8204,22,7377,8],[8204,23,7377,19,"pos"],[8204,26,7377,6],[8205,0,7378,6],[8205,15,7378,11,"finishToken"],[8205,26,7378,6],[8205,27,7378,23,"types"],[8205,32,7378,28],[8205,33,7378,29,"dot"],[8205,36,7378,6],[8206,0,7379,5],[8207,0,7380,3],[8210,40,7382,20],[8211,0,7383,4],[8211,12,7383,8],[8211,17,7383,13,"state"],[8211,22,7383,8],[8211,23,7383,19,"exprAllowed"],[8211,34,7383,8],[8211,38,7383,34],[8211,39,7383,35],[8211,44,7383,40,"state"],[8211,49,7383,35],[8211,50,7383,46,"inType"],[8211,56,7383,4],[8211,58,7383,54],[8212,0,7384,6],[8212,12,7384,8],[8212,17,7384,13,"state"],[8212,22,7384,8],[8212,23,7384,19,"pos"],[8212,26,7384,6],[8213,0,7385,6],[8213,15,7385,11,"readRegexp"],[8213,25,7385,6],[8214,0,7386,6],[8215,0,7387,5],[8217,0,7389,4],[8217,12,7389,10,"next"],[8217,16,7389,14],[8217,19,7389,17],[8217,24,7389,22,"input"],[8217,29,7389,17],[8217,30,7389,28,"charCodeAt"],[8217,40,7389,17],[8217,41,7389,39],[8217,46,7389,44,"state"],[8217,51,7389,39],[8217,52,7389,50,"pos"],[8217,55,7389,39],[8217,58,7389,56],[8217,59,7389,17],[8217,60,7389,4],[8219,0,7391,4],[8219,12,7391,8,"next"],[8219,16,7391,12],[8219,21,7391,17],[8219,23,7391,4],[8219,25,7391,21],[8220,0,7392,6],[8220,15,7392,11,"finishOp"],[8220,23,7392,6],[8220,24,7392,20,"types"],[8220,29,7392,25],[8220,30,7392,26,"assign"],[8220,36,7392,6],[8220,38,7392,34],[8220,39,7392,6],[8221,0,7393,5],[8221,9,7391,4],[8221,15,7393,11],[8222,0,7394,6],[8222,15,7394,11,"finishOp"],[8222,23,7394,6],[8222,24,7394,20,"types"],[8222,29,7394,25],[8222,30,7394,26,"slash"],[8222,35,7394,6],[8222,37,7394,33],[8222,38,7394,6],[8223,0,7395,5],[8224,0,7396,3],[8227,46,7398,26],[8228,0,7399,4],[8228,12,7399,8],[8228,17,7399,13,"state"],[8228,22,7399,8],[8228,23,7399,19,"pos"],[8228,26,7399,8],[8228,31,7399,27],[8228,32,7399,8],[8228,36,7399,32],[8228,41,7399,37,"length"],[8228,47,7399,32],[8228,50,7399,46],[8228,51,7399,4],[8228,53,7399,49],[8228,60,7399,56],[8228,65,7399,49],[8229,0,7400,4],[8229,12,7400,10,"start"],[8229,17,7400,15],[8229,20,7400,18],[8229,25,7400,23,"state"],[8229,30,7400,18],[8229,31,7400,29,"pos"],[8229,34,7400,4],[8230,0,7401,4],[8230,13,7401,9,"state"],[8230,18,7401,4],[8230,19,7401,15,"pos"],[8230,22,7401,4],[8230,26,7401,22],[8230,27,7401,4],[8231,0,7402,4],[8231,12,7402,8,"ch"],[8231,14,7402,10],[8231,17,7402,13],[8231,22,7402,18,"input"],[8231,27,7402,13],[8231,28,7402,24,"charCodeAt"],[8231,38,7402,13],[8231,39,7402,35],[8231,44,7402,40,"state"],[8231,49,7402,35],[8231,50,7402,46,"pos"],[8231,53,7402,13],[8231,54,7402,4],[8232,0,7403,4],[8232,12,7403,8,"ch"],[8232,14,7403,10],[8232,19,7403,15],[8232,21,7403,4],[8232,23,7403,19],[8232,30,7403,26],[8232,35,7403,19],[8234,0,7405,4],[8234,15,7405,11],[8234,16,7405,12,"isNewLine"],[8234,25,7405,21],[8234,26,7405,22,"ch"],[8234,28,7405,21],[8234,29,7405,11],[8234,33,7405,29],[8234,35,7405,31],[8234,40,7405,36,"state"],[8234,45,7405,31],[8234,46,7405,42,"pos"],[8234,49,7405,29],[8234,52,7405,48],[8234,57,7405,53,"length"],[8234,63,7405,4],[8234,65,7405,61],[8235,0,7406,6,"ch"],[8235,10,7406,6,"ch"],[8235,12,7406,8],[8235,15,7406,11],[8235,20,7406,16,"input"],[8235,25,7406,11],[8235,26,7406,22,"charCodeAt"],[8235,36,7406,11],[8235,37,7406,33],[8235,42,7406,38,"state"],[8235,47,7406,33],[8235,48,7406,44,"pos"],[8235,51,7406,11],[8235,52,7406,6],[8236,0,7407,5],[8238,0,7409,4],[8238,12,7409,10,"value"],[8238,17,7409,15],[8238,20,7409,18],[8238,25,7409,23,"input"],[8238,30,7409,18],[8238,31,7409,29,"slice"],[8238,36,7409,18],[8238,37,7409,35,"start"],[8238,42,7409,40],[8238,45,7409,43],[8238,46,7409,18],[8238,48,7409,46],[8238,53,7409,51,"state"],[8238,58,7409,46],[8238,59,7409,57,"pos"],[8238,62,7409,18],[8238,63,7409,4],[8239,0,7410,4],[8239,13,7410,9,"finishToken"],[8239,24,7410,4],[8239,25,7410,21,"types"],[8239,30,7410,26],[8239,31,7410,27,"interpreterDirective"],[8239,51,7410,4],[8239,53,7410,49,"value"],[8239,58,7410,4],[8240,0,7411,4],[8240,15,7411,11],[8240,19,7411,4],[8241,0,7412,3],[8244,44,7414,24,"code"],[8244,48],[8244,50,7414,30],[8245,0,7415,4],[8245,12,7415,8,"type"],[8245,16,7415,12],[8245,19,7415,15,"code"],[8245,23,7415,19],[8245,28,7415,24],[8245,30,7415,15],[8245,33,7415,29,"types"],[8245,38,7415,34],[8245,39,7415,35,"star"],[8245,43,7415,15],[8245,46,7415,42,"types"],[8245,51,7415,47],[8245,52,7415,48,"modulo"],[8245,58,7415,4],[8246,0,7416,4],[8246,12,7416,8,"width"],[8246,17,7416,13],[8246,20,7416,16],[8246,21,7416,4],[8247,0,7417,4],[8247,12,7417,8,"next"],[8247,16,7417,12],[8247,19,7417,15],[8247,24,7417,20,"input"],[8247,29,7417,15],[8247,30,7417,26,"charCodeAt"],[8247,40,7417,15],[8247,41,7417,37],[8247,46,7417,42,"state"],[8247,51,7417,37],[8247,52,7417,48,"pos"],[8247,55,7417,37],[8247,58,7417,54],[8247,59,7417,15],[8247,60,7417,4],[8248,0,7418,4],[8248,12,7418,10,"exprAllowed"],[8248,23,7418,21],[8248,26,7418,24],[8248,31,7418,29,"state"],[8248,36,7418,24],[8248,37,7418,35,"exprAllowed"],[8248,48,7418,4],[8250,0,7420,4],[8250,12,7420,8,"code"],[8250,16,7420,12],[8250,21,7420,17],[8250,23,7420,8],[8250,27,7420,23,"next"],[8250,31,7420,27],[8250,36,7420,32],[8250,38,7420,4],[8250,40,7420,36],[8251,0,7421,6,"width"],[8251,10,7421,6,"width"],[8251,15,7421,11],[8252,0,7422,6,"next"],[8252,10,7422,6,"next"],[8252,14,7422,10],[8252,17,7422,13],[8252,22,7422,18,"input"],[8252,27,7422,13],[8252,28,7422,24,"charCodeAt"],[8252,38,7422,13],[8252,39,7422,35],[8252,44,7422,40,"state"],[8252,49,7422,35],[8252,50,7422,46,"pos"],[8252,53,7422,35],[8252,56,7422,52],[8252,57,7422,13],[8252,58,7422,6],[8253,0,7423,6,"type"],[8253,10,7423,6,"type"],[8253,14,7423,10],[8253,17,7423,13,"types"],[8253,22,7423,18],[8253,23,7423,19,"exponent"],[8253,31,7423,6],[8254,0,7424,5],[8256,0,7426,4],[8256,12,7426,8,"next"],[8256,16,7426,12],[8256,21,7426,17],[8256,23,7426,8],[8256,27,7426,23],[8256,28,7426,24,"exprAllowed"],[8256,39,7426,4],[8256,41,7426,37],[8257,0,7427,6,"width"],[8257,10,7427,6,"width"],[8257,15,7427,11],[8258,0,7428,6,"type"],[8258,10,7428,6,"type"],[8258,14,7428,10],[8258,17,7428,13,"types"],[8258,22,7428,18],[8258,23,7428,19,"assign"],[8258,29,7428,6],[8259,0,7429,5],[8261,0,7431,4],[8261,13,7431,9,"finishOp"],[8261,21,7431,4],[8261,22,7431,18,"type"],[8261,26,7431,4],[8261,28,7431,24,"width"],[8261,33,7431,4],[8262,0,7432,3],[8265,41,7434,21,"code"],[8265,45],[8265,47,7434,27],[8266,0,7435,4],[8266,12,7435,10,"next"],[8266,16,7435,14],[8266,19,7435,17],[8266,24,7435,22,"input"],[8266,29,7435,17],[8266,30,7435,28,"charCodeAt"],[8266,40,7435,17],[8266,41,7435,39],[8266,46,7435,44,"state"],[8266,51,7435,39],[8266,52,7435,50,"pos"],[8266,55,7435,39],[8266,58,7435,56],[8266,59,7435,17],[8266,60,7435,4],[8268,0,7437,4],[8268,12,7437,8,"next"],[8268,16,7437,12],[8268,21,7437,17,"code"],[8268,25,7437,4],[8268,27,7437,23],[8269,0,7438,6],[8269,14,7438,10],[8269,19,7438,15,"input"],[8269,24,7438,10],[8269,25,7438,21,"charCodeAt"],[8269,35,7438,10],[8269,36,7438,32],[8269,41,7438,37,"state"],[8269,46,7438,32],[8269,47,7438,43,"pos"],[8269,50,7438,32],[8269,53,7438,49],[8269,54,7438,10],[8269,60,7438,56],[8269,62,7438,6],[8269,64,7438,60],[8270,0,7439,8],[8270,17,7439,13,"finishOp"],[8270,25,7439,8],[8270,26,7439,22,"types"],[8270,31,7439,27],[8270,32,7439,28,"assign"],[8270,38,7439,8],[8270,40,7439,36],[8270,41,7439,8],[8271,0,7440,7],[8271,11,7438,6],[8271,17,7440,13],[8272,0,7441,8],[8272,17,7441,13,"finishOp"],[8272,25,7441,8],[8272,26,7441,22,"code"],[8272,30,7441,26],[8272,35,7441,31],[8272,38,7441,22],[8272,41,7441,37,"types"],[8272,46,7441,42],[8272,47,7441,43,"logicalOR"],[8272,56,7441,22],[8272,59,7441,55,"types"],[8272,64,7441,60],[8272,65,7441,61,"logicalAND"],[8272,75,7441,8],[8272,77,7441,73],[8272,78,7441,8],[8273,0,7442,7],[8275,0,7444,6],[8276,0,7445,5],[8278,0,7447,4],[8278,12,7447,8,"code"],[8278,16,7447,12],[8278,21,7447,17],[8278,24,7447,4],[8278,26,7447,22],[8279,0,7448,6],[8279,14,7448,10,"next"],[8279,18,7448,14],[8279,23,7448,19],[8279,25,7448,6],[8279,27,7448,23],[8280,0,7449,8],[8280,17,7449,13,"finishOp"],[8280,25,7449,8],[8280,26,7449,22,"types"],[8280,31,7449,27],[8280,32,7449,28,"pipeline"],[8280,40,7449,8],[8280,42,7449,38],[8280,43,7449,8],[8281,0,7450,8],[8282,0,7451,7],[8283,0,7452,5],[8285,0,7454,4],[8285,12,7454,8,"next"],[8285,16,7454,12],[8285,21,7454,17],[8285,23,7454,4],[8285,25,7454,21],[8286,0,7455,6],[8286,15,7455,11,"finishOp"],[8286,23,7455,6],[8286,24,7455,20,"types"],[8286,29,7455,25],[8286,30,7455,26,"assign"],[8286,36,7455,6],[8286,38,7455,34],[8286,39,7455,6],[8287,0,7456,6],[8288,0,7457,5],[8290,0,7459,4],[8290,13,7459,9,"finishOp"],[8290,21,7459,4],[8290,22,7459,18,"code"],[8290,26,7459,22],[8290,31,7459,27],[8290,34,7459,18],[8290,37,7459,33,"types"],[8290,42,7459,38],[8290,43,7459,39,"bitwiseOR"],[8290,52,7459,18],[8290,55,7459,51,"types"],[8290,60,7459,56],[8290,61,7459,57,"bitwiseAND"],[8290,71,7459,4],[8290,73,7459,69],[8290,74,7459,4],[8291,0,7460,3],[8294,40,7462,20],[8295,0,7463,4],[8295,12,7463,10,"next"],[8295,16,7463,14],[8295,19,7463,17],[8295,24,7463,22,"input"],[8295,29,7463,17],[8295,30,7463,28,"charCodeAt"],[8295,40,7463,17],[8295,41,7463,39],[8295,46,7463,44,"state"],[8295,51,7463,39],[8295,52,7463,50,"pos"],[8295,55,7463,39],[8295,58,7463,56],[8295,59,7463,17],[8295,60,7463,4],[8297,0,7465,4],[8297,12,7465,8,"next"],[8297,16,7465,12],[8297,21,7465,17],[8297,23,7465,4],[8297,25,7465,21],[8298,0,7466,6],[8298,15,7466,11,"finishOp"],[8298,23,7466,6],[8298,24,7466,20,"types"],[8298,29,7466,25],[8298,30,7466,26,"assign"],[8298,36,7466,6],[8298,38,7466,34],[8298,39,7466,6],[8299,0,7467,5],[8299,9,7465,4],[8299,15,7467,11],[8300,0,7468,6],[8300,15,7468,11,"finishOp"],[8300,23,7468,6],[8300,24,7468,20,"types"],[8300,29,7468,25],[8300,30,7468,26,"bitwiseXOR"],[8300,40,7468,6],[8300,42,7468,38],[8300,43,7468,6],[8301,0,7469,5],[8302,0,7470,3],[8305,41,7472,21,"code"],[8305,45],[8305,47,7472,27],[8306,0,7473,4],[8306,12,7473,10,"next"],[8306,16,7473,14],[8306,19,7473,17],[8306,24,7473,22,"input"],[8306,29,7473,17],[8306,30,7473,28,"charCodeAt"],[8306,40,7473,17],[8306,41,7473,39],[8306,46,7473,44,"state"],[8306,51,7473,39],[8306,52,7473,50,"pos"],[8306,55,7473,39],[8306,58,7473,56],[8306,59,7473,17],[8306,60,7473,4],[8308,0,7475,4],[8308,12,7475,8,"next"],[8308,16,7475,12],[8308,21,7475,17,"code"],[8308,25,7475,4],[8308,27,7475,23],[8309,0,7476,6],[8309,14,7476,10,"next"],[8309,18,7476,14],[8309,23,7476,19],[8309,25,7476,10],[8309,29,7476,25],[8309,30,7476,26],[8309,35,7476,31,"inModule"],[8309,43,7476,10],[8309,47,7476,43],[8309,52,7476,48,"input"],[8309,57,7476,43],[8309,58,7476,54,"charCodeAt"],[8309,68,7476,43],[8309,69,7476,65],[8309,74,7476,70,"state"],[8309,79,7476,65],[8309,80,7476,76,"pos"],[8309,83,7476,65],[8309,86,7476,82],[8309,87,7476,43],[8309,93,7476,89],[8309,95,7476,10],[8309,100,7476,96],[8309,105,7476,101,"state"],[8309,110,7476,96],[8309,111,7476,107,"lastTokEnd"],[8309,121,7476,96],[8309,126,7476,122],[8309,127,7476,96],[8309,131,7476,127,"lineBreak"],[8309,140,7476,136],[8309,141,7476,137,"test"],[8309,145,7476,127],[8309,146,7476,142],[8309,151,7476,147,"input"],[8309,156,7476,142],[8309,157,7476,153,"slice"],[8309,162,7476,142],[8309,163,7476,159],[8309,168,7476,164,"state"],[8309,173,7476,159],[8309,174,7476,170,"lastTokEnd"],[8309,184,7476,142],[8309,186,7476,182],[8309,191,7476,187,"state"],[8309,196,7476,182],[8309,197,7476,193,"pos"],[8309,200,7476,142],[8309,201,7476,127],[8309,202,7476,10],[8309,203,7476,6],[8309,205,7476,201],[8310,0,7477,8],[8310,17,7477,13,"skipLineComment"],[8310,32,7477,8],[8310,33,7477,29],[8310,34,7477,8],[8311,0,7478,8],[8311,17,7478,13,"skipSpace"],[8311,26,7478,8],[8312,0,7479,8],[8312,17,7479,13,"nextToken"],[8312,26,7479,8],[8313,0,7480,8],[8314,0,7481,7],[8316,0,7483,6],[8316,15,7483,11,"finishOp"],[8316,23,7483,6],[8316,24,7483,20,"types"],[8316,29,7483,25],[8316,30,7483,26,"incDec"],[8316,36,7483,6],[8316,38,7483,34],[8316,39,7483,6],[8317,0,7484,6],[8318,0,7485,5],[8320,0,7487,4],[8320,12,7487,8,"next"],[8320,16,7487,12],[8320,21,7487,17],[8320,23,7487,4],[8320,25,7487,21],[8321,0,7488,6],[8321,15,7488,11,"finishOp"],[8321,23,7488,6],[8321,24,7488,20,"types"],[8321,29,7488,25],[8321,30,7488,26,"assign"],[8321,36,7488,6],[8321,38,7488,34],[8321,39,7488,6],[8322,0,7489,5],[8322,9,7487,4],[8322,15,7489,11],[8323,0,7490,6],[8323,15,7490,11,"finishOp"],[8323,23,7490,6],[8323,24,7490,20,"types"],[8323,29,7490,25],[8323,30,7490,26,"plusMin"],[8323,37,7490,6],[8323,39,7490,35],[8323,40,7490,6],[8324,0,7491,5],[8325,0,7492,3],[8328,38,7494,18,"code"],[8328,42],[8328,44,7494,24],[8329,0,7495,4],[8329,12,7495,10,"next"],[8329,16,7495,14],[8329,19,7495,17],[8329,24,7495,22,"input"],[8329,29,7495,17],[8329,30,7495,28,"charCodeAt"],[8329,40,7495,17],[8329,41,7495,39],[8329,46,7495,44,"state"],[8329,51,7495,39],[8329,52,7495,50,"pos"],[8329,55,7495,39],[8329,58,7495,56],[8329,59,7495,17],[8329,60,7495,4],[8330,0,7496,4],[8330,12,7496,8,"size"],[8330,16,7496,12],[8330,19,7496,15],[8330,20,7496,4],[8332,0,7498,4],[8332,12,7498,8,"next"],[8332,16,7498,12],[8332,21,7498,17,"code"],[8332,25,7498,4],[8332,27,7498,23],[8333,0,7499,6,"size"],[8333,10,7499,6,"size"],[8333,14,7499,10],[8333,17,7499,13,"code"],[8333,21,7499,17],[8333,26,7499,22],[8333,28,7499,13],[8333,32,7499,28],[8333,37,7499,33,"input"],[8333,42,7499,28],[8333,43,7499,39,"charCodeAt"],[8333,53,7499,28],[8333,54,7499,50],[8333,59,7499,55,"state"],[8333,64,7499,50],[8333,65,7499,61,"pos"],[8333,68,7499,50],[8333,71,7499,67],[8333,72,7499,28],[8333,78,7499,74],[8333,80,7499,13],[8333,83,7499,79],[8333,84,7499,13],[8333,87,7499,83],[8333,88,7499,6],[8335,0,7501,6],[8335,14,7501,10],[8335,19,7501,15,"input"],[8335,24,7501,10],[8335,25,7501,21,"charCodeAt"],[8335,35,7501,10],[8335,36,7501,32],[8335,41,7501,37,"state"],[8335,46,7501,32],[8335,47,7501,43,"pos"],[8335,50,7501,32],[8335,53,7501,49,"size"],[8335,57,7501,10],[8335,63,7501,59],[8335,65,7501,6],[8335,67,7501,63],[8336,0,7502,8],[8336,17,7502,13,"finishOp"],[8336,25,7502,8],[8336,26,7502,22,"types"],[8336,31,7502,27],[8336,32,7502,28,"assign"],[8336,38,7502,8],[8336,40,7502,36,"size"],[8336,44,7502,40],[8336,47,7502,43],[8336,48,7502,8],[8337,0,7503,8],[8338,0,7504,7],[8340,0,7506,6],[8340,15,7506,11,"finishOp"],[8340,23,7506,6],[8340,24,7506,20,"types"],[8340,29,7506,25],[8340,30,7506,26,"bitShift"],[8340,38,7506,6],[8340,40,7506,36,"size"],[8340,44,7506,6],[8341,0,7507,6],[8342,0,7508,5],[8344,0,7510,4],[8344,12,7510,8,"next"],[8344,16,7510,12],[8344,21,7510,17],[8344,23,7510,8],[8344,27,7510,23,"code"],[8344,31,7510,27],[8344,36,7510,32],[8344,38,7510,8],[8344,42,7510,38],[8344,43,7510,39],[8344,48,7510,44,"inModule"],[8344,56,7510,8],[8344,60,7510,56],[8344,65,7510,61,"input"],[8344,70,7510,56],[8344,71,7510,67,"charCodeAt"],[8344,81,7510,56],[8344,82,7510,78],[8344,87,7510,83,"state"],[8344,92,7510,78],[8344,93,7510,89,"pos"],[8344,96,7510,78],[8344,99,7510,95],[8344,100,7510,56],[8344,106,7510,102],[8344,108,7510,8],[8344,112,7510,108],[8344,117,7510,113,"input"],[8344,122,7510,108],[8344,123,7510,119,"charCodeAt"],[8344,133,7510,108],[8344,134,7510,130],[8344,139,7510,135,"state"],[8344,144,7510,130],[8344,145,7510,141,"pos"],[8344,148,7510,130],[8344,151,7510,147],[8344,152,7510,108],[8344,158,7510,154],[8344,160,7510,4],[8344,162,7510,158],[8345,0,7511,6],[8345,15,7511,11,"skipLineComment"],[8345,30,7511,6],[8345,31,7511,27],[8345,32,7511,6],[8346,0,7512,6],[8346,15,7512,11,"skipSpace"],[8346,24,7512,6],[8347,0,7513,6],[8347,15,7513,11,"nextToken"],[8347,24,7513,6],[8348,0,7514,6],[8349,0,7515,5],[8351,0,7517,4],[8351,12,7517,8,"next"],[8351,16,7517,12],[8351,21,7517,17],[8351,23,7517,4],[8351,25,7517,21],[8352,0,7518,6,"size"],[8352,10,7518,6,"size"],[8352,14,7518,10],[8352,17,7518,13],[8352,18,7518,6],[8353,0,7519,5],[8355,0,7521,4],[8355,13,7521,9,"finishOp"],[8355,21,7521,4],[8355,22,7521,18,"types"],[8355,27,7521,23],[8355,28,7521,24,"relational"],[8355,38,7521,4],[8355,40,7521,36,"size"],[8355,44,7521,4],[8356,0,7522,3],[8359,40,7524,20,"code"],[8359,44],[8359,46,7524,26],[8360,0,7525,4],[8360,12,7525,10,"next"],[8360,16,7525,14],[8360,19,7525,17],[8360,24,7525,22,"input"],[8360,29,7525,17],[8360,30,7525,28,"charCodeAt"],[8360,40,7525,17],[8360,41,7525,39],[8360,46,7525,44,"state"],[8360,51,7525,39],[8360,52,7525,50,"pos"],[8360,55,7525,39],[8360,58,7525,56],[8360,59,7525,17],[8360,60,7525,4],[8362,0,7527,4],[8362,12,7527,8,"next"],[8362,16,7527,12],[8362,21,7527,17],[8362,23,7527,4],[8362,25,7527,21],[8363,0,7528,6],[8363,15,7528,11,"finishOp"],[8363,23,7528,6],[8363,24,7528,20,"types"],[8363,29,7528,25],[8363,30,7528,26,"equality"],[8363,38,7528,6],[8363,40,7528,36],[8363,45,7528,41,"input"],[8363,50,7528,36],[8363,51,7528,47,"charCodeAt"],[8363,61,7528,36],[8363,62,7528,58],[8363,67,7528,63,"state"],[8363,72,7528,58],[8363,73,7528,69,"pos"],[8363,76,7528,58],[8363,79,7528,75],[8363,80,7528,36],[8363,86,7528,82],[8363,88,7528,36],[8363,91,7528,87],[8363,92,7528,36],[8363,95,7528,91],[8363,96,7528,6],[8364,0,7529,6],[8365,0,7530,5],[8367,0,7532,4],[8367,12,7532,8,"code"],[8367,16,7532,12],[8367,21,7532,17],[8367,23,7532,8],[8367,27,7532,23,"next"],[8367,31,7532,27],[8367,36,7532,32],[8367,38,7532,4],[8367,40,7532,36],[8368,0,7533,6],[8368,15,7533,11,"state"],[8368,20,7533,6],[8368,21,7533,17,"pos"],[8368,24,7533,6],[8368,28,7533,24],[8368,29,7533,6],[8369,0,7534,6],[8369,15,7534,11,"finishToken"],[8369,26,7534,6],[8369,27,7534,23,"types"],[8369,32,7534,28],[8369,33,7534,29,"arrow"],[8369,38,7534,6],[8370,0,7535,6],[8371,0,7536,5],[8373,0,7538,4],[8373,13,7538,9,"finishOp"],[8373,21,7538,4],[8373,22,7538,18,"code"],[8373,26,7538,22],[8373,31,7538,27],[8373,33,7538,18],[8373,36,7538,32,"types"],[8373,41,7538,37],[8373,42,7538,38,"eq"],[8373,44,7538,18],[8373,47,7538,43,"types"],[8373,52,7538,48],[8373,53,7538,49,"bang"],[8373,57,7538,4],[8373,59,7538,55],[8373,60,7538,4],[8374,0,7539,3],[8377,43,7541,23],[8378,0,7542,4],[8378,12,7542,10,"next"],[8378,16,7542,14],[8378,19,7542,17],[8378,24,7542,22,"input"],[8378,29,7542,17],[8378,30,7542,28,"charCodeAt"],[8378,40,7542,17],[8378,41,7542,39],[8378,46,7542,44,"state"],[8378,51,7542,39],[8378,52,7542,50,"pos"],[8378,55,7542,39],[8378,58,7542,56],[8378,59,7542,17],[8378,60,7542,4],[8379,0,7543,4],[8379,12,7543,10,"next2"],[8379,17,7543,15],[8379,20,7543,18],[8379,25,7543,23,"input"],[8379,30,7543,18],[8379,31,7543,29,"charCodeAt"],[8379,41,7543,18],[8379,42,7543,40],[8379,47,7543,45,"state"],[8379,52,7543,40],[8379,53,7543,51,"pos"],[8379,56,7543,40],[8379,59,7543,57],[8379,60,7543,18],[8379,61,7543,4],[8381,0,7545,4],[8381,12,7545,8,"next"],[8381,16,7545,12],[8381,21,7545,17],[8381,23,7545,8],[8381,27,7545,23],[8381,28,7545,24],[8381,33,7545,29,"state"],[8381,38,7545,24],[8381,39,7545,35,"inType"],[8381,45,7545,4],[8381,47,7545,43],[8382,0,7546,6],[8382,14,7546,10,"next2"],[8382,19,7546,15],[8382,24,7546,20],[8382,26,7546,6],[8382,28,7546,24],[8383,0,7547,8],[8383,17,7547,13,"finishOp"],[8383,25,7547,8],[8383,26,7547,22,"types"],[8383,31,7547,27],[8383,32,7547,28,"assign"],[8383,38,7547,8],[8383,40,7547,36],[8383,41,7547,8],[8384,0,7548,7],[8384,11,7546,6],[8384,17,7548,13],[8385,0,7549,8],[8385,17,7549,13,"finishOp"],[8385,25,7549,8],[8385,26,7549,22,"types"],[8385,31,7549,27],[8385,32,7549,28,"nullishCoalescing"],[8385,49,7549,8],[8385,51,7549,47],[8385,52,7549,8],[8386,0,7550,7],[8387,0,7551,5],[8387,9,7545,4],[8387,15,7551,11],[8387,19,7551,15,"next"],[8387,23,7551,19],[8387,28,7551,24],[8387,30,7551,15],[8387,34,7551,30],[8387,36,7551,32,"next2"],[8387,41,7551,37],[8387,45,7551,41],[8387,47,7551,32],[8387,51,7551,47,"next2"],[8387,56,7551,52],[8387,60,7551,56],[8387,62,7551,30],[8387,63,7551,11],[8387,65,7551,61],[8388,0,7552,6],[8388,15,7552,11,"state"],[8388,20,7552,6],[8388,21,7552,17,"pos"],[8388,24,7552,6],[8388,28,7552,24],[8388,29,7552,6],[8389,0,7553,6],[8389,15,7553,11,"finishToken"],[8389,26,7553,6],[8389,27,7553,23,"types"],[8389,32,7553,28],[8389,33,7553,29,"questionDot"],[8389,44,7553,6],[8390,0,7554,5],[8390,9,7551,11],[8390,15,7554,11],[8391,0,7555,6],[8391,12,7555,8],[8391,17,7555,13,"state"],[8391,22,7555,8],[8391,23,7555,19,"pos"],[8391,26,7555,6],[8392,0,7556,6],[8392,15,7556,11,"finishToken"],[8392,26,7556,6],[8392,27,7556,23,"types"],[8392,32,7556,28],[8392,33,7556,29,"question"],[8392,41,7556,6],[8393,0,7557,5],[8394,0,7558,3],[8397,39,7560,19,"code"],[8397,43],[8397,45,7560,25],[8398,0,7561,4],[8398,16,7561,12,"code"],[8398,20,7561,4],[8399,0,7562,6],[8399,15,7562,11],[8399,17,7562,6],[8400,0,7563,8],[8400,17,7563,13,"readToken_dot"],[8400,30,7563,8],[8401,0,7564,8],[8403,0,7566,6],[8403,15,7566,11],[8403,17,7566,6],[8404,0,7567,8],[8404,14,7567,10],[8404,19,7567,15,"state"],[8404,24,7567,10],[8404,25,7567,21,"pos"],[8404,28,7567,8],[8405,0,7568,8],[8405,17,7568,13,"finishToken"],[8405,28,7568,8],[8405,29,7568,25,"types"],[8405,34,7568,30],[8405,35,7568,31,"parenL"],[8405,41,7568,8],[8406,0,7569,8],[8408,0,7571,6],[8408,15,7571,11],[8408,17,7571,6],[8409,0,7572,8],[8409,14,7572,10],[8409,19,7572,15,"state"],[8409,24,7572,10],[8409,25,7572,21,"pos"],[8409,28,7572,8],[8410,0,7573,8],[8410,17,7573,13,"finishToken"],[8410,28,7573,8],[8410,29,7573,25,"types"],[8410,34,7573,30],[8410,35,7573,31,"parenR"],[8410,41,7573,8],[8411,0,7574,8],[8413,0,7576,6],[8413,15,7576,11],[8413,17,7576,6],[8414,0,7577,8],[8414,14,7577,10],[8414,19,7577,15,"state"],[8414,24,7577,10],[8414,25,7577,21,"pos"],[8414,28,7577,8],[8415,0,7578,8],[8415,17,7578,13,"finishToken"],[8415,28,7578,8],[8415,29,7578,25,"types"],[8415,34,7578,30],[8415,35,7578,31,"semi"],[8415,39,7578,8],[8416,0,7579,8],[8418,0,7581,6],[8418,15,7581,11],[8418,17,7581,6],[8419,0,7582,8],[8419,14,7582,10],[8419,19,7582,15,"state"],[8419,24,7582,10],[8419,25,7582,21,"pos"],[8419,28,7582,8],[8420,0,7583,8],[8420,17,7583,13,"finishToken"],[8420,28,7583,8],[8420,29,7583,25,"types"],[8420,34,7583,30],[8420,35,7583,31,"comma"],[8420,40,7583,8],[8421,0,7584,8],[8423,0,7586,6],[8423,15,7586,11],[8423,17,7586,6],[8424,0,7587,8],[8424,14,7587,10],[8424,19,7587,15,"state"],[8424,24,7587,10],[8424,25,7587,21,"pos"],[8424,28,7587,8],[8425,0,7588,8],[8425,17,7588,13,"finishToken"],[8425,28,7588,8],[8425,29,7588,25,"types"],[8425,34,7588,30],[8425,35,7588,31,"bracketL"],[8425,43,7588,8],[8426,0,7589,8],[8428,0,7591,6],[8428,15,7591,11],[8428,17,7591,6],[8429,0,7592,8],[8429,14,7592,10],[8429,19,7592,15,"state"],[8429,24,7592,10],[8429,25,7592,21,"pos"],[8429,28,7592,8],[8430,0,7593,8],[8430,17,7593,13,"finishToken"],[8430,28,7593,8],[8430,29,7593,25,"types"],[8430,34,7593,30],[8430,35,7593,31,"bracketR"],[8430,43,7593,8],[8431,0,7594,8],[8433,0,7596,6],[8433,15,7596,11],[8433,18,7596,6],[8434,0,7597,8],[8434,14,7597,10],[8434,19,7597,15,"state"],[8434,24,7597,10],[8434,25,7597,21,"pos"],[8434,28,7597,8],[8435,0,7598,8],[8435,17,7598,13,"finishToken"],[8435,28,7598,8],[8435,29,7598,25,"types"],[8435,34,7598,30],[8435,35,7598,31,"braceL"],[8435,41,7598,8],[8436,0,7599,8],[8438,0,7601,6],[8438,15,7601,11],[8438,18,7601,6],[8439,0,7602,8],[8439,14,7602,10],[8439,19,7602,15,"state"],[8439,24,7602,10],[8439,25,7602,21,"pos"],[8439,28,7602,8],[8440,0,7603,8],[8440,17,7603,13,"finishToken"],[8440,28,7603,8],[8440,29,7603,25,"types"],[8440,34,7603,30],[8440,35,7603,31,"braceR"],[8440,41,7603,8],[8441,0,7604,8],[8443,0,7606,6],[8443,15,7606,11],[8443,17,7606,6],[8444,0,7607,8],[8444,16,7607,12],[8444,21,7607,17,"hasPlugin"],[8444,30,7607,12],[8444,31,7607,27],[8444,45,7607,12],[8444,50,7607,46],[8444,55,7607,51,"input"],[8444,60,7607,46],[8444,61,7607,57,"charCodeAt"],[8444,71,7607,46],[8444,72,7607,68],[8444,77,7607,73,"state"],[8444,82,7607,68],[8444,83,7607,79,"pos"],[8444,86,7607,68],[8444,89,7607,85],[8444,90,7607,46],[8444,96,7607,92],[8444,98,7607,8],[8444,100,7607,96],[8445,0,7608,10],[8445,19,7608,15,"finishOp"],[8445,27,7608,10],[8445,28,7608,24,"types"],[8445,33,7608,29],[8445,34,7608,30,"doubleColon"],[8445,45,7608,10],[8445,47,7608,43],[8445,48,7608,10],[8446,0,7609,9],[8446,13,7607,8],[8446,19,7609,15],[8447,0,7610,10],[8447,16,7610,12],[8447,21,7610,17,"state"],[8447,26,7610,12],[8447,27,7610,23,"pos"],[8447,30,7610,10],[8448,0,7611,10],[8448,19,7611,15,"finishToken"],[8448,30,7611,10],[8448,31,7611,27,"types"],[8448,36,7611,32],[8448,37,7611,33,"colon"],[8448,42,7611,10],[8449,0,7612,9],[8451,0,7614,8],[8453,0,7616,6],[8453,15,7616,11],[8453,17,7616,6],[8454,0,7617,8],[8454,17,7617,13,"readToken_question"],[8454,35,7617,8],[8455,0,7618,8],[8457,0,7620,6],[8457,15,7620,11],[8457,17,7620,6],[8458,0,7621,8],[8458,14,7621,10],[8458,19,7621,15,"state"],[8458,24,7621,10],[8458,25,7621,21,"pos"],[8458,28,7621,8],[8459,0,7622,8],[8459,17,7622,13,"finishToken"],[8459,28,7622,8],[8459,29,7622,25,"types"],[8459,34,7622,30],[8459,35,7622,31,"backQuote"],[8459,44,7622,8],[8460,0,7623,8],[8462,0,7625,6],[8462,15,7625,11],[8462,17,7625,6],[8463,0,7626,8],[8464,0,7627,10],[8464,18,7627,16,"next"],[8464,22,7627,20],[8464,25,7627,23],[8464,30,7627,28,"input"],[8464,35,7627,23],[8464,36,7627,34,"charCodeAt"],[8464,46,7627,23],[8464,47,7627,45],[8464,52,7627,50,"state"],[8464,57,7627,45],[8464,58,7627,56,"pos"],[8464,61,7627,45],[8464,64,7627,62],[8464,65,7627,23],[8464,66,7627,10],[8466,0,7629,10],[8466,18,7629,14,"next"],[8466,22,7629,18],[8466,27,7629,23],[8466,30,7629,14],[8466,34,7629,30,"next"],[8466,38,7629,34],[8466,43,7629,39],[8466,45,7629,10],[8466,47,7629,43],[8467,0,7630,12],[8467,21,7630,17,"readRadixNumber"],[8467,36,7630,12],[8467,37,7630,33],[8467,39,7630,12],[8468,0,7631,12],[8469,0,7632,11],[8471,0,7634,10],[8471,18,7634,14,"next"],[8471,22,7634,18],[8471,27,7634,23],[8471,30,7634,14],[8471,34,7634,30,"next"],[8471,38,7634,34],[8471,43,7634,39],[8471,45,7634,10],[8471,47,7634,43],[8472,0,7635,12],[8472,21,7635,17,"readRadixNumber"],[8472,36,7635,12],[8472,37,7635,33],[8472,38,7635,12],[8473,0,7636,12],[8474,0,7637,11],[8476,0,7639,10],[8476,18,7639,14,"next"],[8476,22,7639,18],[8476,27,7639,23],[8476,29,7639,14],[8476,33,7639,29,"next"],[8476,37,7639,33],[8476,42,7639,38],[8476,44,7639,10],[8476,46,7639,42],[8477,0,7640,12],[8477,21,7640,17,"readRadixNumber"],[8477,36,7640,12],[8477,37,7640,33],[8477,38,7640,12],[8478,0,7641,12],[8479,0,7642,11],[8480,0,7643,9],[8482,0,7645,6],[8482,15,7645,11],[8482,17,7645,6],[8483,0,7646,6],[8483,15,7646,11],[8483,17,7646,6],[8484,0,7647,6],[8484,15,7647,11],[8484,17,7647,6],[8485,0,7648,6],[8485,15,7648,11],[8485,17,7648,6],[8486,0,7649,6],[8486,15,7649,11],[8486,17,7649,6],[8487,0,7650,6],[8487,15,7650,11],[8487,17,7650,6],[8488,0,7651,6],[8488,15,7651,11],[8488,17,7651,6],[8489,0,7652,6],[8489,15,7652,11],[8489,17,7652,6],[8490,0,7653,6],[8490,15,7653,11],[8490,17,7653,6],[8491,0,7654,8],[8491,17,7654,13,"readNumber"],[8491,27,7654,8],[8491,28,7654,24],[8491,33,7654,8],[8492,0,7655,8],[8494,0,7657,6],[8494,15,7657,11],[8494,17,7657,6],[8495,0,7658,6],[8495,15,7658,11],[8495,17,7658,6],[8496,0,7659,8],[8496,17,7659,13,"readString"],[8496,27,7659,8],[8496,28,7659,24,"code"],[8496,32,7659,8],[8497,0,7660,8],[8499,0,7662,6],[8499,15,7662,11],[8499,17,7662,6],[8500,0,7663,8],[8500,17,7663,13,"readToken_slash"],[8500,32,7663,8],[8501,0,7664,8],[8503,0,7666,6],[8503,15,7666,11],[8503,17,7666,6],[8504,0,7667,6],[8504,15,7667,11],[8504,17,7667,6],[8505,0,7668,8],[8505,17,7668,13,"readToken_mult_modulo"],[8505,38,7668,8],[8505,39,7668,35,"code"],[8505,43,7668,8],[8506,0,7669,8],[8508,0,7671,6],[8508,15,7671,11],[8508,18,7671,6],[8509,0,7672,6],[8509,15,7672,11],[8509,17,7672,6],[8510,0,7673,8],[8510,17,7673,13,"readToken_pipe_amp"],[8510,35,7673,8],[8510,36,7673,32,"code"],[8510,40,7673,8],[8511,0,7674,8],[8513,0,7676,6],[8513,15,7676,11],[8513,17,7676,6],[8514,0,7677,8],[8514,17,7677,13,"readToken_caret"],[8514,32,7677,8],[8515,0,7678,8],[8517,0,7680,6],[8517,15,7680,11],[8517,17,7680,6],[8518,0,7681,6],[8518,15,7681,11],[8518,17,7681,6],[8519,0,7682,8],[8519,17,7682,13,"readToken_plus_min"],[8519,35,7682,8],[8519,36,7682,32,"code"],[8519,40,7682,8],[8520,0,7683,8],[8522,0,7685,6],[8522,15,7685,11],[8522,17,7685,6],[8523,0,7686,6],[8523,15,7686,11],[8523,17,7686,6],[8524,0,7687,8],[8524,17,7687,13,"readToken_lt_gt"],[8524,32,7687,8],[8524,33,7687,29,"code"],[8524,37,7687,8],[8525,0,7688,8],[8527,0,7690,6],[8527,15,7690,11],[8527,17,7690,6],[8528,0,7691,6],[8528,15,7691,11],[8528,17,7691,6],[8529,0,7692,8],[8529,17,7692,13,"readToken_eq_excl"],[8529,34,7692,8],[8529,35,7692,31,"code"],[8529,39,7692,8],[8530,0,7693,8],[8532,0,7695,6],[8532,15,7695,11],[8532,18,7695,6],[8533,0,7696,8],[8533,17,7696,13,"finishOp"],[8533,25,7696,8],[8533,26,7696,22,"types"],[8533,31,7696,27],[8533,32,7696,28,"tilde"],[8533,37,7696,8],[8533,39,7696,35],[8533,40,7696,8],[8534,0,7697,8],[8536,0,7699,6],[8536,15,7699,11],[8536,17,7699,6],[8537,0,7700,8],[8537,14,7700,10],[8537,19,7700,15,"state"],[8537,24,7700,10],[8537,25,7700,21,"pos"],[8537,28,7700,8],[8538,0,7701,8],[8538,17,7701,13,"finishToken"],[8538,28,7701,8],[8538,29,7701,25,"types"],[8538,34,7701,30],[8538,35,7701,31,"at"],[8538,37,7701,8],[8539,0,7702,8],[8541,0,7704,6],[8541,15,7704,11],[8541,17,7704,6],[8542,0,7705,8],[8542,17,7705,13,"readToken_numberSign"],[8542,37,7705,8],[8543,0,7706,8],[8545,0,7708,6],[8545,15,7708,11],[8545,17,7708,6],[8546,0,7709,8],[8546,17,7709,13,"readWord"],[8546,25,7709,8],[8547,0,7710,8],[8549,0,7712,6],[8550,0,7713,8],[8550,16,7713,12,"isIdentifierStart"],[8550,33,7713,29],[8550,34,7713,30,"code"],[8550,38,7713,29],[8550,39,7713,8],[8550,41,7713,37],[8551,0,7714,10],[8551,19,7714,15,"readWord"],[8551,27,7714,10],[8552,0,7715,10],[8553,0,7716,9],[8555,0,7561,4],[8557,0,7720,4],[8557,14,7720,10],[8557,19,7720,15,"raise"],[8557,24,7720,10],[8557,25,7720,21],[8557,30,7720,26,"state"],[8557,35,7720,21],[8557,36,7720,32,"pos"],[8557,39,7720,10],[8557,68,7720,62,"String"],[8557,74,7720,68],[8557,75,7720,69,"fromCodePoint"],[8557,88,7720,62],[8557,89,7720,83,"code"],[8557,93,7720,62],[8557,94,7720,10],[8557,101,7720,4],[8558,0,7721,3],[8561,31,7723,11,"type"],[8561,35],[8561,37,7723,17,"size"],[8561,41],[8561,43,7723,23],[8562,0,7724,4],[8562,12,7724,10,"str"],[8562,15,7724,13],[8562,18,7724,16],[8562,23,7724,21,"input"],[8562,28,7724,16],[8562,29,7724,27,"slice"],[8562,34,7724,16],[8562,35,7724,33],[8562,40,7724,38,"state"],[8562,45,7724,33],[8562,46,7724,44,"pos"],[8562,49,7724,16],[8562,51,7724,49],[8562,56,7724,54,"state"],[8562,61,7724,49],[8562,62,7724,60,"pos"],[8562,65,7724,49],[8562,68,7724,66,"size"],[8562,72,7724,16],[8562,73,7724,4],[8563,0,7725,4],[8563,13,7725,9,"state"],[8563,18,7725,4],[8563,19,7725,15,"pos"],[8563,22,7725,4],[8563,26,7725,22,"size"],[8563,30,7725,4],[8564,0,7726,4],[8564,13,7726,9,"finishToken"],[8564,24,7726,4],[8564,25,7726,21,"type"],[8564,29,7726,4],[8564,31,7726,27,"str"],[8564,34,7726,4],[8565,0,7727,3],[8568,35,7729,15],[8569,0,7730,4],[8569,12,7730,10,"start"],[8569,17,7730,15],[8569,20,7730,18],[8569,25,7730,23,"state"],[8569,30,7730,18],[8569,31,7730,29,"pos"],[8569,34,7730,4],[8570,0,7731,4],[8570,12,7731,8,"escaped"],[8570,19,7731,4],[8570,21,7731,17,"inClass"],[8570,28,7731,4],[8572,0,7733,4],[8572,17,7733,13],[8573,0,7734,6],[8573,14,7734,10],[8573,19,7734,15,"state"],[8573,24,7734,10],[8573,25,7734,21,"pos"],[8573,28,7734,10],[8573,32,7734,28],[8573,37,7734,33,"length"],[8573,43,7734,6],[8573,45,7734,41],[8574,0,7735,8],[8574,18,7735,14],[8574,23,7735,19,"raise"],[8574,28,7735,14],[8574,29,7735,25,"start"],[8574,34,7735,14],[8574,36,7735,32],[8574,69,7735,14],[8574,70,7735,8],[8575,0,7736,7],[8577,0,7738,6],[8577,14,7738,12,"ch"],[8577,16,7738,14],[8577,19,7738,17],[8577,24,7738,22,"input"],[8577,29,7738,17],[8577,30,7738,28,"charAt"],[8577,36,7738,17],[8577,37,7738,35],[8577,42,7738,40,"state"],[8577,47,7738,35],[8577,48,7738,46,"pos"],[8577,51,7738,17],[8577,52,7738,6],[8579,0,7740,6],[8579,14,7740,10,"lineBreak"],[8579,23,7740,19],[8579,24,7740,20,"test"],[8579,28,7740,10],[8579,29,7740,25,"ch"],[8579,31,7740,10],[8579,32,7740,6],[8579,34,7740,30],[8580,0,7741,8],[8580,18,7741,14],[8580,23,7741,19,"raise"],[8580,28,7741,14],[8580,29,7741,25,"start"],[8580,34,7741,14],[8580,36,7741,32],[8580,69,7741,14],[8580,70,7741,8],[8581,0,7742,7],[8583,0,7744,6],[8583,14,7744,10,"escaped"],[8583,21,7744,6],[8583,23,7744,19],[8584,0,7745,8,"escaped"],[8584,12,7745,8,"escaped"],[8584,19,7745,15],[8584,22,7745,18],[8584,27,7745,8],[8585,0,7746,7],[8585,11,7744,6],[8585,17,7746,13],[8586,0,7747,8],[8586,16,7747,12,"ch"],[8586,18,7747,14],[8586,23,7747,19],[8586,26,7747,8],[8586,28,7747,24],[8587,0,7748,10,"inClass"],[8587,14,7748,10,"inClass"],[8587,21,7748,17],[8587,24,7748,20],[8587,28,7748,10],[8588,0,7749,9],[8588,13,7747,8],[8588,19,7749,15],[8588,23,7749,19,"ch"],[8588,25,7749,21],[8588,30,7749,26],[8588,33,7749,19],[8588,37,7749,33,"inClass"],[8588,44,7749,15],[8588,46,7749,42],[8589,0,7750,10,"inClass"],[8589,14,7750,10,"inClass"],[8589,21,7750,17],[8589,24,7750,20],[8589,29,7750,10],[8590,0,7751,9],[8590,13,7749,15],[8590,19,7751,15],[8590,23,7751,19,"ch"],[8590,25,7751,21],[8590,30,7751,26],[8590,33,7751,19],[8590,37,7751,33],[8590,38,7751,34,"inClass"],[8590,45,7751,15],[8590,47,7751,43],[8591,0,7752,10],[8592,0,7753,9],[8594,0,7755,8,"escaped"],[8594,12,7755,8,"escaped"],[8594,19,7755,15],[8594,22,7755,18,"ch"],[8594,24,7755,20],[8594,29,7755,25],[8594,33,7755,8],[8595,0,7756,7],[8597,0,7758,6],[8597,12,7758,8],[8597,17,7758,13,"state"],[8597,22,7758,8],[8597,23,7758,19,"pos"],[8597,26,7758,6],[8598,0,7759,5],[8600,0,7761,4],[8600,12,7761,10,"content"],[8600,19,7761,17],[8600,22,7761,20],[8600,27,7761,25,"input"],[8600,32,7761,20],[8600,33,7761,31,"slice"],[8600,38,7761,20],[8600,39,7761,37,"start"],[8600,44,7761,20],[8600,46,7761,44],[8600,51,7761,49,"state"],[8600,56,7761,44],[8600,57,7761,55,"pos"],[8600,60,7761,20],[8600,61,7761,4],[8601,0,7762,4],[8601,10,7762,6],[8601,15,7762,11,"state"],[8601,20,7762,6],[8601,21,7762,17,"pos"],[8601,24,7762,4],[8602,0,7763,4],[8602,12,7763,8,"mods"],[8602,16,7763,12],[8602,19,7763,15],[8602,21,7763,4],[8604,0,7765,4],[8604,15,7765,11],[8604,20,7765,16,"state"],[8604,25,7765,11],[8604,26,7765,22,"pos"],[8604,29,7765,11],[8604,32,7765,28],[8604,37,7765,33,"length"],[8604,43,7765,4],[8604,45,7765,41],[8605,0,7766,6],[8605,14,7766,12,"char"],[8605,18,7766,16],[8605,21,7766,19],[8605,26,7766,24,"input"],[8605,31,7766,19],[8605,32,7766,30],[8605,37,7766,35,"state"],[8605,42,7766,30],[8605,43,7766,41,"pos"],[8605,46,7766,19],[8605,47,7766,6],[8606,0,7767,6],[8606,14,7767,12,"charCode"],[8606,22,7767,20],[8606,25,7767,23],[8606,30,7767,28,"input"],[8606,35,7767,23],[8606,36,7767,34,"codePointAt"],[8606,47,7767,23],[8606,48,7767,46],[8606,53,7767,51,"state"],[8606,58,7767,46],[8606,59,7767,57,"pos"],[8606,62,7767,23],[8606,63,7767,6],[8608,0,7769,6],[8608,14,7769,10,"VALID_REGEX_FLAGS"],[8608,31,7769,27],[8608,32,7769,28,"has"],[8608,35,7769,10],[8608,36,7769,32,"char"],[8608,40,7769,10],[8608,41,7769,6],[8608,43,7769,39],[8609,0,7770,8],[8609,16,7770,12,"mods"],[8609,20,7770,16],[8609,21,7770,17,"indexOf"],[8609,28,7770,12],[8609,29,7770,25,"char"],[8609,33,7770,12],[8609,37,7770,33],[8609,38,7770,34],[8609,39,7770,8],[8609,41,7770,37],[8610,0,7771,10],[8610,19,7771,15,"raise"],[8610,24,7771,10],[8610,25,7771,21],[8610,30,7771,26,"state"],[8610,35,7771,21],[8610,36,7771,32,"pos"],[8610,39,7771,21],[8610,42,7771,38],[8610,43,7771,10],[8610,45,7771,41],[8610,80,7771,10],[8611,0,7772,9],[8612,0,7773,7],[8612,11,7769,6],[8612,17,7773,13],[8612,21,7773,17,"isIdentifierChar"],[8612,37,7773,33],[8612,38,7773,34,"charCode"],[8612,46,7773,33],[8612,47,7773,17],[8612,51,7773,47,"charCode"],[8612,59,7773,55],[8612,64,7773,60],[8612,66,7773,13],[8612,68,7773,64],[8613,0,7774,8],[8613,17,7774,13,"raise"],[8613,22,7774,8],[8613,23,7774,19],[8613,28,7774,24,"state"],[8613,33,7774,19],[8613,34,7774,30,"pos"],[8613,37,7774,19],[8613,40,7774,36],[8613,41,7774,8],[8613,43,7774,39],[8613,76,7774,8],[8614,0,7775,7],[8614,11,7773,13],[8614,17,7775,13],[8615,0,7776,8],[8616,0,7777,7],[8618,0,7779,6],[8618,12,7779,8],[8618,17,7779,13,"state"],[8618,22,7779,8],[8618,23,7779,19,"pos"],[8618,26,7779,6],[8619,0,7780,6,"mods"],[8619,10,7780,6,"mods"],[8619,14,7780,10],[8619,18,7780,14,"char"],[8619,22,7780,6],[8620,0,7781,5],[8622,0,7783,4],[8622,13,7783,9,"finishToken"],[8622,24,7783,4],[8622,25,7783,21,"types"],[8622,30,7783,26],[8622,31,7783,27,"regexp"],[8622,37,7783,4],[8622,39,7783,35],[8623,0,7784,6,"pattern"],[8623,10,7784,6,"pattern"],[8623,17,7784,13],[8623,19,7784,15,"content"],[8623,26,7783,35],[8624,0,7785,6,"flags"],[8624,10,7785,6,"flags"],[8624,15,7785,11],[8624,17,7785,13,"mods"],[8625,0,7783,35],[8625,9,7783,4],[8626,0,7787,3],[8629,30,7789,10,"radix"],[8629,35],[8629,37,7789,17,"len"],[8629,40],[8629,42,7789,22,"forceLen"],[8629,50],[8629,52,7789,58],[8630,0,7789,58],[8630,12,7789,32,"allowNumSeparator"],[8630,29,7789,58],[8630,100,7789,52],[8630,104,7789,58],[8631,0,7790,4],[8631,12,7790,10,"start"],[8631,17,7790,15],[8631,20,7790,18],[8631,25,7790,23,"state"],[8631,30,7790,18],[8631,31,7790,29,"pos"],[8631,34,7790,4],[8632,0,7791,4],[8632,12,7791,10,"forbiddenSiblings"],[8632,29,7791,27],[8632,32,7791,30,"radix"],[8632,37,7791,35],[8632,42,7791,40],[8632,44,7791,30],[8632,47,7791,45,"forbiddenNumericSeparatorSiblings"],[8632,80,7791,78],[8632,81,7791,79,"hex"],[8632,84,7791,30],[8632,87,7791,85,"forbiddenNumericSeparatorSiblings"],[8632,120,7791,118],[8632,121,7791,119,"decBinOct"],[8632,130,7791,4],[8633,0,7792,4],[8633,12,7792,10,"allowedSiblings"],[8633,27,7792,25],[8633,30,7792,28,"radix"],[8633,35,7792,33],[8633,40,7792,38],[8633,42,7792,28],[8633,45,7792,43,"allowedNumericSeparatorSiblings"],[8633,76,7792,74],[8633,77,7792,75,"hex"],[8633,80,7792,28],[8633,83,7792,81,"radix"],[8633,88,7792,86],[8633,93,7792,91],[8633,95,7792,81],[8633,98,7792,96,"allowedNumericSeparatorSiblings"],[8633,129,7792,127],[8633,130,7792,128,"dec"],[8633,133,7792,81],[8633,136,7792,134,"radix"],[8633,141,7792,139],[8633,146,7792,144],[8633,147,7792,134],[8633,150,7792,148,"allowedNumericSeparatorSiblings"],[8633,181,7792,179],[8633,182,7792,180,"oct"],[8633,185,7792,134],[8633,188,7792,186,"allowedNumericSeparatorSiblings"],[8633,219,7792,217],[8633,220,7792,218,"bin"],[8633,223,7792,4],[8634,0,7793,4],[8634,12,7793,8,"invalid"],[8634,19,7793,15],[8634,22,7793,18],[8634,27,7793,4],[8635,0,7794,4],[8635,12,7794,8,"total"],[8635,17,7794,13],[8635,20,7794,16],[8635,21,7794,4],[8637,0,7796,4],[8637,13,7796,9],[8637,17,7796,13,"i"],[8637,18,7796,14],[8637,21,7796,17],[8637,22,7796,9],[8637,24,7796,20,"e"],[8637,25,7796,21],[8637,28,7796,24,"len"],[8637,31,7796,27],[8637,35,7796,31],[8637,39,7796,24],[8637,42,7796,38,"Infinity"],[8637,50,7796,24],[8637,53,7796,49,"len"],[8637,56,7796,4],[8637,58,7796,54,"i"],[8637,59,7796,55],[8637,62,7796,58,"e"],[8637,63,7796,4],[8637,65,7796,61],[8637,67,7796,63,"i"],[8637,68,7796,4],[8637,70,7796,66],[8638,0,7797,6],[8638,14,7797,12,"code"],[8638,18,7797,16],[8638,21,7797,19],[8638,26,7797,24,"input"],[8638,31,7797,19],[8638,32,7797,30,"charCodeAt"],[8638,42,7797,19],[8638,43,7797,41],[8638,48,7797,46,"state"],[8638,53,7797,41],[8638,54,7797,52,"pos"],[8638,57,7797,19],[8638,58,7797,6],[8639,0,7798,6],[8639,14,7798,10,"val"],[8639,17,7798,13],[8639,26,7798,6],[8641,0,7800,6],[8641,14,7800,10],[8641,19,7800,15,"hasPlugin"],[8641,28,7800,10],[8641,29,7800,25],[8641,47,7800,10],[8641,48,7800,6],[8641,50,7800,46],[8642,0,7801,8],[8642,16,7801,12,"code"],[8642,20,7801,16],[8642,25,7801,21],[8642,27,7801,8],[8642,29,7801,25],[8643,0,7802,10],[8643,18,7802,16,"prev"],[8643,22,7802,20],[8643,25,7802,23],[8643,30,7802,28,"input"],[8643,35,7802,23],[8643,36,7802,34,"charCodeAt"],[8643,46,7802,23],[8643,47,7802,45],[8643,52,7802,50,"state"],[8643,57,7802,45],[8643,58,7802,56,"pos"],[8643,61,7802,45],[8643,64,7802,62],[8643,65,7802,23],[8643,66,7802,10],[8644,0,7803,10],[8644,18,7803,16,"next"],[8644,22,7803,20],[8644,25,7803,23],[8644,30,7803,28,"input"],[8644,35,7803,23],[8644,36,7803,34,"charCodeAt"],[8644,46,7803,23],[8644,47,7803,45],[8644,52,7803,50,"state"],[8644,57,7803,45],[8644,58,7803,56,"pos"],[8644,61,7803,45],[8644,64,7803,62],[8644,65,7803,23],[8644,66,7803,10],[8646,0,7805,10],[8646,18,7805,14,"allowedSiblings"],[8646,33,7805,29],[8646,34,7805,30,"indexOf"],[8646,41,7805,14],[8646,42,7805,38,"next"],[8646,46,7805,14],[8646,52,7805,48],[8646,53,7805,49],[8646,54,7805,10],[8646,56,7805,52],[8647,0,7806,12],[8647,21,7806,17,"raise"],[8647,26,7806,12],[8647,27,7806,23],[8647,32,7806,28,"state"],[8647,37,7806,23],[8647,38,7806,34,"pos"],[8647,41,7806,12],[8647,43,7806,39],[8647,99,7806,12],[8648,0,7807,11],[8648,15,7805,10],[8648,21,7807,17],[8648,25,7807,21,"forbiddenSiblings"],[8648,42,7807,38],[8648,43,7807,39,"indexOf"],[8648,50,7807,21],[8648,51,7807,47,"prev"],[8648,55,7807,21],[8648,59,7807,55],[8648,60,7807,56],[8648,61,7807,21],[8648,65,7807,61,"forbiddenSiblings"],[8648,82,7807,78],[8648,83,7807,79,"indexOf"],[8648,90,7807,61],[8648,91,7807,87,"next"],[8648,95,7807,61],[8648,99,7807,95],[8648,100,7807,96],[8648,101,7807,21],[8648,105,7807,101,"Number"],[8648,111,7807,107],[8648,112,7807,108,"isNaN"],[8648,117,7807,101],[8648,118,7807,114,"next"],[8648,122,7807,101],[8648,123,7807,17],[8648,125,7807,121],[8649,0,7808,12],[8649,21,7808,17,"raise"],[8649,26,7808,12],[8649,27,7808,23],[8649,32,7808,28,"state"],[8649,37,7808,23],[8649,38,7808,34,"pos"],[8649,41,7808,12],[8649,43,7808,39],[8649,99,7808,12],[8650,0,7809,11],[8652,0,7811,10],[8652,18,7811,14],[8652,19,7811,15,"allowNumSeparator"],[8652,36,7811,10],[8652,38,7811,34],[8653,0,7812,12],[8653,21,7812,17,"raise"],[8653,26,7812,12],[8653,27,7812,23],[8653,32,7812,28,"state"],[8653,37,7812,23],[8653,38,7812,34,"pos"],[8653,41,7812,12],[8653,43,7812,39],[8653,135,7812,12],[8654,0,7813,11],[8656,0,7815,10],[8656,16,7815,12],[8656,21,7815,17,"state"],[8656,26,7815,12],[8656,27,7815,23,"pos"],[8656,30,7815,10],[8657,0,7816,10],[8658,0,7817,9],[8659,0,7818,7],[8661,0,7820,6],[8661,14,7820,10,"code"],[8661,18,7820,14],[8661,22,7820,18],[8661,24,7820,6],[8661,26,7820,22],[8662,0,7821,8,"val"],[8662,12,7821,8,"val"],[8662,15,7821,11],[8662,18,7821,14,"code"],[8662,22,7821,18],[8662,25,7821,21],[8662,27,7821,14],[8662,30,7821,26],[8662,32,7821,8],[8663,0,7822,7],[8663,11,7820,6],[8663,17,7822,13],[8663,21,7822,17,"code"],[8663,25,7822,21],[8663,29,7822,25],[8663,31,7822,13],[8663,33,7822,29],[8664,0,7823,8,"val"],[8664,12,7823,8,"val"],[8664,15,7823,11],[8664,18,7823,14,"code"],[8664,22,7823,18],[8664,25,7823,21],[8664,27,7823,14],[8664,30,7823,26],[8664,32,7823,8],[8665,0,7824,7],[8665,11,7822,13],[8665,17,7824,13],[8665,21,7824,17,"_isDigit"],[8665,29,7824,25],[8665,30,7824,26,"code"],[8665,34,7824,25],[8665,35,7824,13],[8665,37,7824,33],[8666,0,7825,8,"val"],[8666,12,7825,8,"val"],[8666,15,7825,11],[8666,18,7825,14,"code"],[8666,22,7825,18],[8666,25,7825,21],[8666,27,7825,8],[8667,0,7826,7],[8667,11,7824,13],[8667,17,7826,13],[8668,0,7827,8,"val"],[8668,12,7827,8,"val"],[8668,15,7827,11],[8668,18,7827,14,"Infinity"],[8668,26,7827,8],[8669,0,7828,7],[8671,0,7830,6],[8671,14,7830,10,"val"],[8671,17,7830,13],[8671,21,7830,17,"radix"],[8671,26,7830,6],[8671,28,7830,24],[8672,0,7831,8],[8672,16,7831,12],[8672,21,7831,17,"options"],[8672,28,7831,12],[8672,29,7831,25,"errorRecovery"],[8672,42,7831,12],[8672,46,7831,42,"val"],[8672,49,7831,45],[8672,53,7831,49],[8672,54,7831,8],[8672,56,7831,52],[8673,0,7832,10,"val"],[8673,14,7832,10,"val"],[8673,17,7832,13],[8673,20,7832,16],[8673,21,7832,10],[8674,0,7833,10],[8674,19,7833,15,"raise"],[8674,24,7833,10],[8674,25,7833,21],[8674,30,7833,26,"state"],[8674,35,7833,21],[8674,36,7833,32,"start"],[8674,41,7833,21],[8674,44,7833,40,"i"],[8674,45,7833,21],[8674,48,7833,44],[8674,49,7833,10],[8674,51,7833,47],[8674,81,7833,77,"radix"],[8674,86,7833,10],[8675,0,7834,9],[8675,13,7831,8],[8675,19,7834,15],[8675,23,7834,19,"forceLen"],[8675,31,7834,15],[8675,33,7834,29],[8676,0,7835,10,"val"],[8676,14,7835,10,"val"],[8676,17,7835,13],[8676,20,7835,16],[8676,21,7835,10],[8677,0,7836,10,"invalid"],[8677,14,7836,10,"invalid"],[8677,21,7836,17],[8677,24,7836,20],[8677,28,7836,10],[8678,0,7837,9],[8678,13,7834,15],[8678,19,7837,15],[8679,0,7838,10],[8680,0,7839,9],[8681,0,7840,7],[8683,0,7842,6],[8683,12,7842,8],[8683,17,7842,13,"state"],[8683,22,7842,8],[8683,23,7842,19,"pos"],[8683,26,7842,6],[8684,0,7843,6,"total"],[8684,10,7843,6,"total"],[8684,15,7843,11],[8684,18,7843,14,"total"],[8684,23,7843,19],[8684,26,7843,22,"radix"],[8684,31,7843,14],[8684,34,7843,30,"val"],[8684,37,7843,6],[8685,0,7844,5],[8687,0,7846,4],[8687,12,7846,8],[8687,17,7846,13,"state"],[8687,22,7846,8],[8687,23,7846,19,"pos"],[8687,26,7846,8],[8687,31,7846,27,"start"],[8687,36,7846,8],[8687,40,7846,36,"len"],[8687,43,7846,39],[8687,47,7846,43],[8687,51,7846,36],[8687,55,7846,51],[8687,60,7846,56,"state"],[8687,65,7846,51],[8687,66,7846,62,"pos"],[8687,69,7846,51],[8687,72,7846,68,"start"],[8687,77,7846,51],[8687,82,7846,78,"len"],[8687,85,7846,8],[8687,89,7846,85,"invalid"],[8687,96,7846,4],[8687,98,7846,94],[8688,0,7847,6],[8688,17,7847,13],[8688,21,7847,6],[8689,0,7848,5],[8691,0,7850,4],[8691,15,7850,11,"total"],[8691,20,7850,4],[8692,0,7851,3],[8695,38,7853,18,"radix"],[8695,43],[8695,45,7853,25],[8696,0,7854,4],[8696,12,7854,10,"start"],[8696,17,7854,15],[8696,20,7854,18],[8696,25,7854,23,"state"],[8696,30,7854,18],[8696,31,7854,29,"pos"],[8696,34,7854,4],[8697,0,7855,4],[8697,12,7855,8,"isBigInt"],[8697,20,7855,16],[8697,23,7855,19],[8697,28,7855,4],[8698,0,7856,4],[8698,13,7856,9,"state"],[8698,18,7856,4],[8698,19,7856,15,"pos"],[8698,22,7856,4],[8698,26,7856,22],[8698,27,7856,4],[8699,0,7857,4],[8699,12,7857,10,"val"],[8699,15,7857,13],[8699,18,7857,16],[8699,23,7857,21,"readInt"],[8699,30,7857,16],[8699,31,7857,29,"radix"],[8699,36,7857,16],[8699,37,7857,4],[8701,0,7859,4],[8701,12,7859,8,"val"],[8701,15,7859,11],[8701,19,7859,15],[8701,23,7859,4],[8701,25,7859,21],[8702,0,7860,6],[8702,15,7860,11,"raise"],[8702,20,7860,6],[8702,21,7860,17],[8702,26,7860,22,"state"],[8702,31,7860,17],[8702,32,7860,28,"start"],[8702,37,7860,17],[8702,40,7860,36],[8702,41,7860,6],[8702,43,7860,39],[8702,73,7860,69,"radix"],[8702,78,7860,6],[8703,0,7861,5],[8705,0,7863,4],[8705,12,7863,8],[8705,17,7863,13,"hasPlugin"],[8705,26,7863,8],[8705,27,7863,23],[8705,35,7863,8],[8705,36,7863,4],[8705,38,7863,34],[8706,0,7864,6],[8706,14,7864,10],[8706,19,7864,15,"input"],[8706,24,7864,10],[8706,25,7864,21,"charCodeAt"],[8706,35,7864,10],[8706,36,7864,32],[8706,41,7864,37,"state"],[8706,46,7864,32],[8706,47,7864,43,"pos"],[8706,50,7864,10],[8706,56,7864,52],[8706,59,7864,6],[8706,61,7864,57],[8707,0,7865,8],[8707,14,7865,10],[8707,19,7865,15,"state"],[8707,24,7865,10],[8707,25,7865,21,"pos"],[8707,28,7865,8],[8708,0,7866,8,"isBigInt"],[8708,12,7866,8,"isBigInt"],[8708,20,7866,16],[8708,23,7866,19],[8708,27,7866,8],[8709,0,7867,7],[8710,0,7868,5],[8712,0,7870,4],[8712,12,7870,8,"isIdentifierStart"],[8712,29,7870,25],[8712,30,7870,26],[8712,35,7870,31,"input"],[8712,40,7870,26],[8712,41,7870,37,"codePointAt"],[8712,52,7870,26],[8712,53,7870,49],[8712,58,7870,54,"state"],[8712,63,7870,49],[8712,64,7870,60,"pos"],[8712,67,7870,26],[8712,68,7870,25],[8712,69,7870,4],[8712,71,7870,67],[8713,0,7871,6],[8713,16,7871,12],[8713,21,7871,17,"raise"],[8713,26,7871,12],[8713,27,7871,23],[8713,32,7871,28,"state"],[8713,37,7871,23],[8713,38,7871,34,"pos"],[8713,41,7871,12],[8713,43,7871,39],[8713,77,7871,12],[8713,78,7871,6],[8714,0,7872,5],[8716,0,7874,4],[8716,12,7874,8,"isBigInt"],[8716,20,7874,4],[8716,22,7874,18],[8717,0,7875,6],[8717,14,7875,12,"str"],[8717,17,7875,15],[8717,20,7875,18],[8717,25,7875,23,"input"],[8717,30,7875,18],[8717,31,7875,29,"slice"],[8717,36,7875,18],[8717,37,7875,35,"start"],[8717,42,7875,18],[8717,44,7875,42],[8717,49,7875,47,"state"],[8717,54,7875,42],[8717,55,7875,53,"pos"],[8717,58,7875,18],[8717,60,7875,58,"replace"],[8717,67,7875,18],[8717,68,7875,66],[8717,75,7875,18],[8717,77,7875,75],[8717,79,7875,18],[8717,80,7875,6],[8718,0,7876,6],[8718,15,7876,11,"finishToken"],[8718,26,7876,6],[8718,27,7876,23,"types"],[8718,32,7876,28],[8718,33,7876,29,"bigint"],[8718,39,7876,6],[8718,41,7876,37,"str"],[8718,44,7876,6],[8719,0,7877,6],[8720,0,7878,5],[8722,0,7880,4],[8722,13,7880,9,"finishToken"],[8722,24,7880,4],[8722,25,7880,21,"types"],[8722,30,7880,26],[8722,31,7880,27,"num"],[8722,34,7880,4],[8722,36,7880,32,"val"],[8722,39,7880,4],[8723,0,7881,3],[8726,33,7883,13,"startsWithDot"],[8726,46],[8726,48,7883,28],[8727,0,7884,4],[8727,12,7884,10,"start"],[8727,17,7884,15],[8727,20,7884,18],[8727,25,7884,23,"state"],[8727,30,7884,18],[8727,31,7884,29,"pos"],[8727,34,7884,4],[8728,0,7885,4],[8728,12,7885,8,"isFloat"],[8728,19,7885,15],[8728,22,7885,18],[8728,27,7885,4],[8729,0,7886,4],[8729,12,7886,8,"isBigInt"],[8729,20,7886,16],[8729,23,7886,19],[8729,28,7886,4],[8730,0,7887,4],[8730,12,7887,8,"isNonOctalDecimalInt"],[8730,32,7887,28],[8730,35,7887,31],[8730,40,7887,4],[8732,0,7889,4],[8732,12,7889,8],[8732,13,7889,9,"startsWithDot"],[8732,26,7889,8],[8732,30,7889,26],[8732,35,7889,31,"readInt"],[8732,42,7889,26],[8732,43,7889,39],[8732,45,7889,26],[8732,51,7889,47],[8732,55,7889,4],[8732,57,7889,53],[8733,0,7890,6],[8733,15,7890,11,"raise"],[8733,20,7890,6],[8733,21,7890,17,"start"],[8733,26,7890,6],[8733,28,7890,24],[8733,44,7890,6],[8734,0,7891,5],[8736,0,7893,4],[8736,12,7893,8,"octal"],[8736,17,7893,13],[8736,20,7893,16],[8736,25,7893,21,"state"],[8736,30,7893,16],[8736,31,7893,27,"pos"],[8736,34,7893,16],[8736,37,7893,33,"start"],[8736,42,7893,16],[8736,46,7893,42],[8736,47,7893,16],[8736,51,7893,47],[8736,56,7893,52,"input"],[8736,61,7893,47],[8736,62,7893,58,"charCodeAt"],[8736,72,7893,47],[8736,73,7893,69,"start"],[8736,78,7893,47],[8736,84,7893,80],[8736,86,7893,4],[8738,0,7895,4],[8738,12,7895,8,"octal"],[8738,17,7895,4],[8738,19,7895,15],[8739,0,7896,6],[8739,14,7896,10],[8739,19,7896,15,"state"],[8739,24,7896,10],[8739,25,7896,21,"strict"],[8739,31,7896,6],[8739,33,7896,29],[8740,0,7897,8],[8740,17,7897,13,"raise"],[8740,22,7897,8],[8740,23,7897,19,"start"],[8740,28,7897,8],[8740,30,7897,26],[8740,84,7897,8],[8741,0,7898,7],[8743,0,7900,6],[8743,14,7900,10],[8743,21,7900,17,"test"],[8743,25,7900,10],[8743,26,7900,22],[8743,31,7900,27,"input"],[8743,36,7900,22],[8743,37,7900,33,"slice"],[8743,42,7900,22],[8743,43,7900,39,"start"],[8743,48,7900,22],[8743,50,7900,46],[8743,55,7900,51,"state"],[8743,60,7900,46],[8743,61,7900,57,"pos"],[8743,64,7900,22],[8743,65,7900,10],[8743,66,7900,6],[8743,68,7900,64],[8744,0,7901,8,"octal"],[8744,12,7901,8,"octal"],[8744,17,7901,13],[8744,20,7901,16],[8744,25,7901,8],[8745,0,7902,8,"isNonOctalDecimalInt"],[8745,12,7902,8,"isNonOctalDecimalInt"],[8745,32,7902,28],[8745,35,7902,31],[8745,39,7902,8],[8746,0,7903,7],[8747,0,7904,5],[8749,0,7906,4],[8749,12,7906,8,"next"],[8749,16,7906,12],[8749,19,7906,15],[8749,24,7906,20,"input"],[8749,29,7906,15],[8749,30,7906,26,"charCodeAt"],[8749,40,7906,15],[8749,41,7906,37],[8749,46,7906,42,"state"],[8749,51,7906,37],[8749,52,7906,48,"pos"],[8749,55,7906,15],[8749,56,7906,4],[8751,0,7908,4],[8751,12,7908,8,"next"],[8751,16,7908,12],[8751,21,7908,17],[8751,23,7908,8],[8751,27,7908,23],[8751,28,7908,24,"octal"],[8751,33,7908,4],[8751,35,7908,31],[8752,0,7909,6],[8752,12,7909,8],[8752,17,7909,13,"state"],[8752,22,7909,8],[8752,23,7909,19,"pos"],[8752,26,7909,6],[8753,0,7910,6],[8753,15,7910,11,"readInt"],[8753,22,7910,6],[8753,23,7910,19],[8753,25,7910,6],[8754,0,7911,6,"isFloat"],[8754,10,7911,6,"isFloat"],[8754,17,7911,13],[8754,20,7911,16],[8754,24,7911,6],[8755,0,7912,6,"next"],[8755,10,7912,6,"next"],[8755,14,7912,10],[8755,17,7912,13],[8755,22,7912,18,"input"],[8755,27,7912,13],[8755,28,7912,24,"charCodeAt"],[8755,38,7912,13],[8755,39,7912,35],[8755,44,7912,40,"state"],[8755,49,7912,35],[8755,50,7912,46,"pos"],[8755,53,7912,13],[8755,54,7912,6],[8756,0,7913,5],[8758,0,7915,4],[8758,12,7915,8],[8758,13,7915,9,"next"],[8758,17,7915,13],[8758,22,7915,18],[8758,24,7915,9],[8758,28,7915,24,"next"],[8758,32,7915,28],[8758,37,7915,33],[8758,40,7915,8],[8758,45,7915,41],[8758,46,7915,42,"octal"],[8758,51,7915,4],[8758,53,7915,49],[8759,0,7916,6,"next"],[8759,10,7916,6,"next"],[8759,14,7916,10],[8759,17,7916,13],[8759,22,7916,18,"input"],[8759,27,7916,13],[8759,28,7916,24,"charCodeAt"],[8759,38,7916,13],[8759,39,7916,35],[8759,41,7916,37],[8759,46,7916,42,"state"],[8759,51,7916,37],[8759,52,7916,48,"pos"],[8759,55,7916,13],[8759,56,7916,6],[8761,0,7918,6],[8761,14,7918,10,"next"],[8761,18,7918,14],[8761,23,7918,19],[8761,25,7918,10],[8761,29,7918,25,"next"],[8761,33,7918,29],[8761,38,7918,34],[8761,40,7918,6],[8761,42,7918,38],[8762,0,7919,8],[8762,14,7919,10],[8762,19,7919,15,"state"],[8762,24,7919,10],[8762,25,7919,21,"pos"],[8762,28,7919,8],[8763,0,7920,7],[8765,0,7922,6],[8765,14,7922,10],[8765,19,7922,15,"readInt"],[8765,26,7922,10],[8765,27,7922,23],[8765,29,7922,10],[8765,35,7922,31],[8765,39,7922,6],[8765,41,7922,37],[8765,46,7922,42,"raise"],[8765,51,7922,37],[8765,52,7922,48,"start"],[8765,57,7922,37],[8765,59,7922,55],[8765,75,7922,37],[8766,0,7923,6,"isFloat"],[8766,10,7923,6,"isFloat"],[8766,17,7923,13],[8766,20,7923,16],[8766,24,7923,6],[8767,0,7924,6,"next"],[8767,10,7924,6,"next"],[8767,14,7924,10],[8767,17,7924,13],[8767,22,7924,18,"input"],[8767,27,7924,13],[8767,28,7924,24,"charCodeAt"],[8767,38,7924,13],[8767,39,7924,35],[8767,44,7924,40,"state"],[8767,49,7924,35],[8767,50,7924,46,"pos"],[8767,53,7924,13],[8767,54,7924,6],[8768,0,7925,5],[8770,0,7927,4],[8770,12,7927,8],[8770,17,7927,13,"hasPlugin"],[8770,26,7927,8],[8770,27,7927,23],[8770,45,7927,8],[8770,51,7927,47,"octal"],[8770,56,7927,52],[8770,60,7927,56,"isNonOctalDecimalInt"],[8770,80,7927,8],[8770,81,7927,4],[8770,83,7927,79],[8771,0,7928,6],[8771,14,7928,12,"underscorePos"],[8771,27,7928,25],[8771,30,7928,28],[8771,35,7928,33,"input"],[8771,40,7928,28],[8771,41,7928,39,"slice"],[8771,46,7928,28],[8771,47,7928,45,"start"],[8771,52,7928,28],[8771,54,7928,52],[8771,59,7928,57,"state"],[8771,64,7928,52],[8771,65,7928,63,"pos"],[8771,68,7928,28],[8771,70,7928,68,"indexOf"],[8771,77,7928,28],[8771,78,7928,76],[8771,81,7928,28],[8771,82,7928,6],[8773,0,7930,6],[8773,14,7930,10,"underscorePos"],[8773,27,7930,23],[8773,30,7930,26],[8773,31,7930,6],[8773,33,7930,29],[8774,0,7931,8],[8774,17,7931,13,"raise"],[8774,22,7931,8],[8774,23,7931,19,"underscorePos"],[8774,36,7931,32],[8774,39,7931,35,"start"],[8774,44,7931,8],[8774,46,7931,42],[8774,97,7931,8],[8775,0,7932,7],[8776,0,7933,5],[8778,0,7935,4],[8778,12,7935,8],[8778,17,7935,13,"hasPlugin"],[8778,26,7935,8],[8778,27,7935,23],[8778,35,7935,8],[8778,36,7935,4],[8778,38,7935,34],[8779,0,7936,6],[8779,14,7936,10,"next"],[8779,18,7936,14],[8779,23,7936,19],[8779,26,7936,6],[8779,28,7936,24],[8780,0,7937,8],[8780,16,7937,12,"isFloat"],[8780,23,7937,19],[8780,27,7937,23,"octal"],[8780,32,7937,12],[8780,36,7937,32,"isNonOctalDecimalInt"],[8780,56,7937,8],[8780,58,7937,54],[8781,0,7938,10],[8781,19,7938,15,"raise"],[8781,24,7938,10],[8781,25,7938,21,"start"],[8781,30,7938,10],[8781,32,7938,28],[8781,55,7938,10],[8782,0,7939,9],[8784,0,7941,8],[8784,14,7941,10],[8784,19,7941,15,"state"],[8784,24,7941,10],[8784,25,7941,21,"pos"],[8784,28,7941,8],[8785,0,7942,8,"isBigInt"],[8785,12,7942,8,"isBigInt"],[8785,20,7942,16],[8785,23,7942,19],[8785,27,7942,8],[8786,0,7943,7],[8787,0,7944,5],[8789,0,7946,4],[8789,12,7946,8,"isIdentifierStart"],[8789,29,7946,25],[8789,30,7946,26],[8789,35,7946,31,"input"],[8789,40,7946,26],[8789,41,7946,37,"codePointAt"],[8789,52,7946,26],[8789,53,7946,49],[8789,58,7946,54,"state"],[8789,63,7946,49],[8789,64,7946,60,"pos"],[8789,67,7946,26],[8789,68,7946,25],[8789,69,7946,4],[8789,71,7946,67],[8790,0,7947,6],[8790,16,7947,12],[8790,21,7947,17,"raise"],[8790,26,7947,12],[8790,27,7947,23],[8790,32,7947,28,"state"],[8790,37,7947,23],[8790,38,7947,34,"pos"],[8790,41,7947,12],[8790,43,7947,39],[8790,77,7947,12],[8790,78,7947,6],[8791,0,7948,5],[8793,0,7950,4],[8793,12,7950,10,"str"],[8793,15,7950,13],[8793,18,7950,16],[8793,23,7950,21,"input"],[8793,28,7950,16],[8793,29,7950,27,"slice"],[8793,34,7950,16],[8793,35,7950,33,"start"],[8793,40,7950,16],[8793,42,7950,40],[8793,47,7950,45,"state"],[8793,52,7950,40],[8793,53,7950,51,"pos"],[8793,56,7950,16],[8793,58,7950,56,"replace"],[8793,65,7950,16],[8793,66,7950,64],[8793,73,7950,16],[8793,75,7950,73],[8793,77,7950,16],[8793,78,7950,4],[8795,0,7952,4],[8795,12,7952,8,"isBigInt"],[8795,20,7952,4],[8795,22,7952,18],[8796,0,7953,6],[8796,15,7953,11,"finishToken"],[8796,26,7953,6],[8796,27,7953,23,"types"],[8796,32,7953,28],[8796,33,7953,29,"bigint"],[8796,39,7953,6],[8796,41,7953,37,"str"],[8796,44,7953,6],[8797,0,7954,6],[8798,0,7955,5],[8800,0,7957,4],[8800,12,7957,10,"val"],[8800,15,7957,13],[8800,18,7957,16,"octal"],[8800,23,7957,21],[8800,26,7957,24,"parseInt"],[8800,34,7957,32],[8800,35,7957,33,"str"],[8800,38,7957,32],[8800,40,7957,38],[8800,41,7957,32],[8800,42,7957,21],[8800,45,7957,43,"parseFloat"],[8800,55,7957,53],[8800,56,7957,54,"str"],[8800,59,7957,53],[8800,60,7957,4],[8801,0,7958,4],[8801,13,7958,9,"finishToken"],[8801,24,7958,4],[8801,25,7958,21,"types"],[8801,30,7958,26],[8801,31,7958,27,"num"],[8801,34,7958,4],[8801,36,7958,32,"val"],[8801,39,7958,4],[8802,0,7959,3],[8805,36,7961,16,"throwOnInvalid"],[8805,50],[8805,52,7961,32],[8806,0,7962,4],[8806,12,7962,10,"ch"],[8806,14,7962,12],[8806,17,7962,15],[8806,22,7962,20,"input"],[8806,27,7962,15],[8806,28,7962,26,"charCodeAt"],[8806,38,7962,15],[8806,39,7962,37],[8806,44,7962,42,"state"],[8806,49,7962,37],[8806,50,7962,48,"pos"],[8806,53,7962,15],[8806,54,7962,4],[8807,0,7963,4],[8807,12,7963,8,"code"],[8807,16,7963,4],[8809,0,7965,4],[8809,12,7965,8,"ch"],[8809,14,7965,10],[8809,19,7965,15],[8809,22,7965,4],[8809,24,7965,20],[8810,0,7966,6],[8810,14,7966,12,"codePos"],[8810,21,7966,19],[8810,24,7966,22],[8810,26,7966,24],[8810,31,7966,29,"state"],[8810,36,7966,24],[8810,37,7966,35,"pos"],[8810,40,7966,6],[8811,0,7967,6,"code"],[8811,10,7967,6,"code"],[8811,14,7967,10],[8811,17,7967,13],[8811,22,7967,18,"readHexChar"],[8811,33,7967,13],[8811,34,7967,30],[8811,39,7967,35,"input"],[8811,44,7967,30],[8811,45,7967,41,"indexOf"],[8811,52,7967,30],[8811,53,7967,49],[8811,56,7967,30],[8811,58,7967,54],[8811,63,7967,59,"state"],[8811,68,7967,54],[8811,69,7967,65,"pos"],[8811,72,7967,30],[8811,76,7967,72],[8811,81,7967,77,"state"],[8811,86,7967,72],[8811,87,7967,83,"pos"],[8811,90,7967,13],[8811,92,7967,88],[8811,96,7967,13],[8811,98,7967,94,"throwOnInvalid"],[8811,112,7967,13],[8811,113,7967,6],[8812,0,7968,6],[8812,12,7968,8],[8812,17,7968,13,"state"],[8812,22,7968,8],[8812,23,7968,19,"pos"],[8812,26,7968,6],[8814,0,7970,6],[8814,14,7970,10,"code"],[8814,18,7970,14],[8814,23,7970,19],[8814,27,7970,6],[8814,29,7970,25],[8815,0,7971,8],[8815,14,7971,10],[8815,19,7971,15,"state"],[8815,24,7971,10],[8815,25,7971,21,"invalidTemplateEscapePosition"],[8815,54,7971,8],[8816,0,7972,7],[8816,11,7970,6],[8816,17,7972,13],[8816,21,7972,17,"code"],[8816,25,7972,21],[8816,28,7972,24],[8816,36,7972,13],[8816,38,7972,34],[8817,0,7973,8],[8817,16,7973,12,"throwOnInvalid"],[8817,30,7973,8],[8817,32,7973,28],[8818,0,7974,10],[8818,19,7974,15,"raise"],[8818,24,7974,10],[8818,25,7974,21,"codePos"],[8818,32,7974,10],[8818,34,7974,30],[8818,60,7974,10],[8819,0,7975,9],[8819,13,7973,8],[8819,19,7975,15],[8820,0,7976,10],[8820,19,7976,15,"state"],[8820,24,7976,10],[8820,25,7976,21,"invalidTemplateEscapePosition"],[8820,54,7976,10],[8820,57,7976,53,"codePos"],[8820,64,7976,60],[8820,67,7976,63],[8820,68,7976,10],[8821,0,7977,10],[8821,21,7977,17],[8821,25,7977,10],[8822,0,7978,9],[8823,0,7979,7],[8824,0,7980,5],[8824,9,7965,4],[8824,15,7980,11],[8825,0,7981,6,"code"],[8825,10,7981,6,"code"],[8825,14,7981,10],[8825,17,7981,13],[8825,22,7981,18,"readHexChar"],[8825,33,7981,13],[8825,34,7981,30],[8825,35,7981,13],[8825,37,7981,33],[8825,42,7981,13],[8825,44,7981,40,"throwOnInvalid"],[8825,58,7981,13],[8825,59,7981,6],[8826,0,7982,5],[8828,0,7984,4],[8828,15,7984,11,"code"],[8828,19,7984,4],[8829,0,7985,3],[8832,33,7987,13,"quote"],[8832,38],[8832,40,7987,20],[8833,0,7988,4],[8833,12,7988,8,"out"],[8833,15,7988,11],[8833,18,7988,14],[8833,20,7988,4],[8834,0,7988,4],[8834,12,7989,8,"chunkStart"],[8834,22,7989,18],[8834,25,7989,21],[8834,27,7989,23],[8834,32,7989,28,"state"],[8834,37,7989,23],[8834,38,7989,34,"pos"],[8834,41,7988,4],[8836,0,7991,4],[8836,17,7991,13],[8837,0,7992,6],[8837,14,7992,10],[8837,19,7992,15,"state"],[8837,24,7992,10],[8837,25,7992,21,"pos"],[8837,28,7992,10],[8837,32,7992,28],[8837,37,7992,33,"length"],[8837,43,7992,6],[8837,45,7992,41],[8838,0,7993,8],[8838,18,7993,14],[8838,23,7993,19,"raise"],[8838,28,7993,14],[8838,29,7993,25],[8838,34,7993,30,"state"],[8838,39,7993,25],[8838,40,7993,36,"start"],[8838,45,7993,14],[8838,47,7993,43],[8838,77,7993,14],[8838,78,7993,8],[8839,0,7994,7],[8841,0,7996,6],[8841,14,7996,12,"ch"],[8841,16,7996,14],[8841,19,7996,17],[8841,24,7996,22,"input"],[8841,29,7996,17],[8841,30,7996,28,"charCodeAt"],[8841,40,7996,17],[8841,41,7996,39],[8841,46,7996,44,"state"],[8841,51,7996,39],[8841,52,7996,50,"pos"],[8841,55,7996,17],[8841,56,7996,6],[8842,0,7997,6],[8842,14,7997,10,"ch"],[8842,16,7997,12],[8842,21,7997,17,"quote"],[8842,26,7997,6],[8842,28,7997,24],[8844,0,7999,6],[8844,14,7999,10,"ch"],[8844,16,7999,12],[8844,21,7999,17],[8844,23,7999,6],[8844,25,7999,21],[8845,0,8000,8,"out"],[8845,12,8000,8,"out"],[8845,15,8000,11],[8845,19,8000,15],[8845,24,8000,20,"input"],[8845,29,8000,15],[8845,30,8000,26,"slice"],[8845,35,8000,15],[8845,36,8000,32,"chunkStart"],[8845,46,8000,15],[8845,48,8000,44],[8845,53,8000,49,"state"],[8845,58,8000,44],[8845,59,8000,55,"pos"],[8845,62,8000,15],[8845,63,8000,8],[8846,0,8001,8,"out"],[8846,12,8001,8,"out"],[8846,15,8001,11],[8846,19,8001,15],[8846,24,8001,20,"readEscapedChar"],[8846,39,8001,15],[8846,40,8001,36],[8846,45,8001,15],[8846,46,8001,8],[8847,0,8002,8,"chunkStart"],[8847,12,8002,8,"chunkStart"],[8847,22,8002,18],[8847,25,8002,21],[8847,30,8002,26,"state"],[8847,35,8002,21],[8847,36,8002,32,"pos"],[8847,39,8002,8],[8848,0,8003,7],[8848,11,7999,6],[8848,17,8003,13],[8848,21,8003,17,"ch"],[8848,23,8003,19],[8848,28,8003,24],[8848,32,8003,17],[8848,36,8003,32,"ch"],[8848,38,8003,34],[8848,43,8003,39],[8848,47,8003,13],[8848,49,8003,45],[8849,0,8004,8],[8849,14,8004,10],[8849,19,8004,15,"state"],[8849,24,8004,10],[8849,25,8004,21,"pos"],[8849,28,8004,8],[8850,0,8005,8],[8850,14,8005,10],[8850,19,8005,15,"state"],[8850,24,8005,10],[8850,25,8005,21,"curLine"],[8850,32,8005,8],[8851,0,8006,7],[8851,11,8003,13],[8851,17,8006,13],[8851,21,8006,17,"isNewLine"],[8851,30,8006,26],[8851,31,8006,27,"ch"],[8851,33,8006,26],[8851,34,8006,13],[8851,36,8006,32],[8852,0,8007,8],[8852,18,8007,14],[8852,23,8007,19,"raise"],[8852,28,8007,14],[8852,29,8007,25],[8852,34,8007,30,"state"],[8852,39,8007,25],[8852,40,8007,36,"start"],[8852,45,8007,14],[8852,47,8007,43],[8852,77,8007,14],[8852,78,8007,8],[8853,0,8008,7],[8853,11,8006,13],[8853,17,8008,13],[8854,0,8009,8],[8854,14,8009,10],[8854,19,8009,15,"state"],[8854,24,8009,10],[8854,25,8009,21,"pos"],[8854,28,8009,8],[8855,0,8010,7],[8856,0,8011,5],[8858,0,8013,4,"out"],[8858,8,8013,4,"out"],[8858,11,8013,7],[8858,15,8013,11],[8858,20,8013,16,"input"],[8858,25,8013,11],[8858,26,8013,22,"slice"],[8858,31,8013,11],[8858,32,8013,28,"chunkStart"],[8858,42,8013,11],[8858,44,8013,40],[8858,49,8013,45,"state"],[8858,54,8013,40],[8858,55,8013,51,"pos"],[8858,58,8013,40],[8858,60,8013,11],[8858,61,8013,4],[8859,0,8014,4],[8859,13,8014,9,"finishToken"],[8859,24,8014,4],[8859,25,8014,21,"types"],[8859,30,8014,26],[8859,31,8014,27,"string"],[8859,37,8014,4],[8859,39,8014,35,"out"],[8859,42,8014,4],[8860,0,8015,3],[8863,38,8017,18],[8864,0,8018,4],[8864,12,8018,8,"out"],[8864,15,8018,11],[8864,18,8018,14],[8864,20,8018,4],[8865,0,8018,4],[8865,12,8019,8,"chunkStart"],[8865,22,8019,18],[8865,25,8019,21],[8865,30,8019,26,"state"],[8865,35,8019,21],[8865,36,8019,32,"pos"],[8865,39,8018,4],[8866,0,8018,4],[8866,12,8020,8,"containsInvalid"],[8866,27,8020,23],[8866,30,8020,26],[8866,35,8018,4],[8868,0,8022,4],[8868,17,8022,13],[8869,0,8023,6],[8869,14,8023,10],[8869,19,8023,15,"state"],[8869,24,8023,10],[8869,25,8023,21,"pos"],[8869,28,8023,10],[8869,32,8023,28],[8869,37,8023,33,"length"],[8869,43,8023,6],[8869,45,8023,41],[8870,0,8024,8],[8870,18,8024,14],[8870,23,8024,19,"raise"],[8870,28,8024,14],[8870,29,8024,25],[8870,34,8024,30,"state"],[8870,39,8024,25],[8870,40,8024,36,"start"],[8870,45,8024,14],[8870,47,8024,43],[8870,70,8024,14],[8870,71,8024,8],[8871,0,8025,7],[8873,0,8027,6],[8873,14,8027,12,"ch"],[8873,16,8027,14],[8873,19,8027,17],[8873,24,8027,22,"input"],[8873,29,8027,17],[8873,30,8027,28,"charCodeAt"],[8873,40,8027,17],[8873,41,8027,39],[8873,46,8027,44,"state"],[8873,51,8027,39],[8873,52,8027,50,"pos"],[8873,55,8027,17],[8873,56,8027,6],[8875,0,8029,6],[8875,14,8029,10,"ch"],[8875,16,8029,12],[8875,21,8029,17],[8875,23,8029,10],[8875,27,8029,23,"ch"],[8875,29,8029,25],[8875,34,8029,30],[8875,36,8029,23],[8875,40,8029,36],[8875,45,8029,41,"input"],[8875,50,8029,36],[8875,51,8029,47,"charCodeAt"],[8875,61,8029,36],[8875,62,8029,58],[8875,67,8029,63,"state"],[8875,72,8029,58],[8875,73,8029,69,"pos"],[8875,76,8029,58],[8875,79,8029,75],[8875,80,8029,36],[8875,86,8029,82],[8875,89,8029,6],[8875,91,8029,87],[8876,0,8030,8],[8876,16,8030,12],[8876,21,8030,17,"state"],[8876,26,8030,12],[8876,27,8030,23,"pos"],[8876,30,8030,12],[8876,35,8030,31],[8876,40,8030,36,"state"],[8876,45,8030,31],[8876,46,8030,42,"start"],[8876,51,8030,12],[8876,55,8030,51],[8876,60,8030,56,"match"],[8876,65,8030,51],[8876,66,8030,62,"types"],[8876,71,8030,67],[8876,72,8030,68,"template"],[8876,80,8030,51],[8876,81,8030,8],[8876,83,8030,79],[8877,0,8031,10],[8877,18,8031,14,"ch"],[8877,20,8031,16],[8877,25,8031,21],[8877,27,8031,10],[8877,29,8031,25],[8878,0,8032,12],[8878,21,8032,17,"state"],[8878,26,8032,12],[8878,27,8032,23,"pos"],[8878,30,8032,12],[8878,34,8032,30],[8878,35,8032,12],[8879,0,8033,12],[8879,21,8033,17,"finishToken"],[8879,32,8033,12],[8879,33,8033,29,"types"],[8879,38,8033,34],[8879,39,8033,35,"dollarBraceL"],[8879,51,8033,12],[8880,0,8034,12],[8881,0,8035,11],[8881,15,8031,10],[8881,21,8035,17],[8882,0,8036,12],[8882,18,8036,14],[8882,23,8036,19,"state"],[8882,28,8036,14],[8882,29,8036,25,"pos"],[8882,32,8036,12],[8883,0,8037,12],[8883,21,8037,17,"finishToken"],[8883,32,8037,12],[8883,33,8037,29,"types"],[8883,38,8037,34],[8883,39,8037,35,"backQuote"],[8883,48,8037,12],[8884,0,8038,12],[8885,0,8039,11],[8886,0,8040,9],[8888,0,8042,8,"out"],[8888,12,8042,8,"out"],[8888,15,8042,11],[8888,19,8042,15],[8888,24,8042,20,"input"],[8888,29,8042,15],[8888,30,8042,26,"slice"],[8888,35,8042,15],[8888,36,8042,32,"chunkStart"],[8888,46,8042,15],[8888,48,8042,44],[8888,53,8042,49,"state"],[8888,58,8042,44],[8888,59,8042,55,"pos"],[8888,62,8042,15],[8888,63,8042,8],[8889,0,8043,8],[8889,17,8043,13,"finishToken"],[8889,28,8043,8],[8889,29,8043,25,"types"],[8889,34,8043,30],[8889,35,8043,31,"template"],[8889,43,8043,8],[8889,45,8043,41,"containsInvalid"],[8889,60,8043,56],[8889,63,8043,59],[8889,67,8043,56],[8889,70,8043,66,"out"],[8889,73,8043,8],[8890,0,8044,8],[8891,0,8045,7],[8893,0,8047,6],[8893,14,8047,10,"ch"],[8893,16,8047,12],[8893,21,8047,17],[8893,23,8047,6],[8893,25,8047,21],[8894,0,8048,8,"out"],[8894,12,8048,8,"out"],[8894,15,8048,11],[8894,19,8048,15],[8894,24,8048,20,"input"],[8894,29,8048,15],[8894,30,8048,26,"slice"],[8894,35,8048,15],[8894,36,8048,32,"chunkStart"],[8894,46,8048,15],[8894,48,8048,44],[8894,53,8048,49,"state"],[8894,58,8048,44],[8894,59,8048,55,"pos"],[8894,62,8048,15],[8894,63,8048,8],[8895,0,8049,8],[8895,16,8049,14,"escaped"],[8895,23,8049,21],[8895,26,8049,24],[8895,31,8049,29,"readEscapedChar"],[8895,46,8049,24],[8895,47,8049,45],[8895,51,8049,24],[8895,52,8049,8],[8897,0,8051,8],[8897,16,8051,12,"escaped"],[8897,23,8051,19],[8897,28,8051,24],[8897,32,8051,8],[8897,34,8051,30],[8898,0,8052,10,"containsInvalid"],[8898,14,8052,10,"containsInvalid"],[8898,29,8052,25],[8898,32,8052,28],[8898,36,8052,10],[8899,0,8053,9],[8899,13,8051,8],[8899,19,8053,15],[8900,0,8054,10,"out"],[8900,14,8054,10,"out"],[8900,17,8054,13],[8900,21,8054,17,"escaped"],[8900,28,8054,10],[8901,0,8055,9],[8903,0,8057,8,"chunkStart"],[8903,12,8057,8,"chunkStart"],[8903,22,8057,18],[8903,25,8057,21],[8903,30,8057,26,"state"],[8903,35,8057,21],[8903,36,8057,32,"pos"],[8903,39,8057,8],[8904,0,8058,7],[8904,11,8047,6],[8904,17,8058,13],[8904,21,8058,17,"isNewLine"],[8904,30,8058,26],[8904,31,8058,27,"ch"],[8904,33,8058,26],[8904,34,8058,13],[8904,36,8058,32],[8905,0,8059,8,"out"],[8905,12,8059,8,"out"],[8905,15,8059,11],[8905,19,8059,15],[8905,24,8059,20,"input"],[8905,29,8059,15],[8905,30,8059,26,"slice"],[8905,35,8059,15],[8905,36,8059,32,"chunkStart"],[8905,46,8059,15],[8905,48,8059,44],[8905,53,8059,49,"state"],[8905,58,8059,44],[8905,59,8059,55,"pos"],[8905,62,8059,15],[8905,63,8059,8],[8906,0,8060,8],[8906,14,8060,10],[8906,19,8060,15,"state"],[8906,24,8060,10],[8906,25,8060,21,"pos"],[8906,28,8060,8],[8908,0,8062,8],[8908,20,8062,16,"ch"],[8908,22,8062,8],[8909,0,8063,10],[8909,19,8063,15],[8909,21,8063,10],[8910,0,8064,12],[8910,20,8064,16],[8910,25,8064,21,"input"],[8910,30,8064,16],[8910,31,8064,27,"charCodeAt"],[8910,41,8064,16],[8910,42,8064,38],[8910,47,8064,43,"state"],[8910,52,8064,38],[8910,53,8064,49,"pos"],[8910,56,8064,16],[8910,62,8064,58],[8910,64,8064,12],[8910,66,8064,62],[8911,0,8065,14],[8911,20,8065,16],[8911,25,8065,21,"state"],[8911,30,8065,16],[8911,31,8065,27,"pos"],[8911,34,8065,14],[8912,0,8066,13],[8914,0,8068,10],[8914,19,8068,15],[8914,21,8068,10],[8915,0,8069,12,"out"],[8915,16,8069,12,"out"],[8915,19,8069,15],[8915,23,8069,19],[8915,27,8069,12],[8916,0,8070,12],[8918,0,8072,10],[8919,0,8073,12,"out"],[8919,16,8073,12,"out"],[8919,19,8073,15],[8919,23,8073,19,"String"],[8919,29,8073,25],[8919,30,8073,26,"fromCharCode"],[8919,42,8073,19],[8919,43,8073,39,"ch"],[8919,45,8073,19],[8919,46,8073,12],[8920,0,8074,12],[8921,0,8062,8],[8923,0,8077,8],[8923,14,8077,10],[8923,19,8077,15,"state"],[8923,24,8077,10],[8923,25,8077,21,"curLine"],[8923,32,8077,8],[8924,0,8078,8],[8924,17,8078,13,"state"],[8924,22,8078,8],[8924,23,8078,19,"lineStart"],[8924,32,8078,8],[8924,35,8078,31],[8924,40,8078,36,"state"],[8924,45,8078,31],[8924,46,8078,42,"pos"],[8924,49,8078,8],[8925,0,8079,8,"chunkStart"],[8925,12,8079,8,"chunkStart"],[8925,22,8079,18],[8925,25,8079,21],[8925,30,8079,26,"state"],[8925,35,8079,21],[8925,36,8079,32,"pos"],[8925,39,8079,8],[8926,0,8080,7],[8926,11,8058,13],[8926,17,8080,13],[8927,0,8081,8],[8927,14,8081,10],[8927,19,8081,15,"state"],[8927,24,8081,10],[8927,25,8081,21,"pos"],[8927,28,8081,8],[8928,0,8082,7],[8929,0,8083,5],[8930,0,8084,3],[8933,38,8086,18,"inTemplate"],[8933,48],[8933,50,8086,30],[8934,0,8087,4],[8934,12,8087,10,"throwOnInvalid"],[8934,26,8087,24],[8934,29,8087,27],[8934,30,8087,28,"inTemplate"],[8934,40,8087,4],[8935,0,8088,4],[8935,12,8088,10,"ch"],[8935,14,8088,12],[8935,17,8088,15],[8935,22,8088,20,"input"],[8935,27,8088,15],[8935,28,8088,26,"charCodeAt"],[8935,38,8088,15],[8935,39,8088,37],[8935,41,8088,39],[8935,46,8088,44,"state"],[8935,51,8088,39],[8935,52,8088,50,"pos"],[8935,55,8088,15],[8935,56,8088,4],[8936,0,8089,4],[8936,10,8089,6],[8936,15,8089,11,"state"],[8936,20,8089,6],[8936,21,8089,17,"pos"],[8936,24,8089,4],[8938,0,8091,4],[8938,16,8091,12,"ch"],[8938,18,8091,4],[8939,0,8092,6],[8939,15,8092,11],[8939,18,8092,6],[8940,0,8093,8],[8940,19,8093,15],[8940,23,8093,8],[8942,0,8095,6],[8942,15,8095,11],[8942,18,8095,6],[8943,0,8096,8],[8943,19,8096,15],[8943,23,8096,8],[8945,0,8098,6],[8945,15,8098,11],[8945,18,8098,6],[8946,0,8099,8],[8947,0,8100,10],[8947,18,8100,16,"code"],[8947,22,8100,20],[8947,25,8100,23],[8947,30,8100,28,"readHexChar"],[8947,41,8100,23],[8947,42,8100,40],[8947,43,8100,23],[8947,45,8100,43],[8947,50,8100,23],[8947,52,8100,50,"throwOnInvalid"],[8947,66,8100,23],[8947,67,8100,10],[8948,0,8101,10],[8948,21,8101,17,"code"],[8948,25,8101,21],[8948,30,8101,26],[8948,34,8101,17],[8948,37,8101,33],[8948,41,8101,17],[8948,44,8101,40,"String"],[8948,50,8101,46],[8948,51,8101,47,"fromCharCode"],[8948,63,8101,40],[8948,64,8101,60,"code"],[8948,68,8101,40],[8948,69,8101,10],[8949,0,8102,9],[8951,0,8104,6],[8951,15,8104,11],[8951,18,8104,6],[8952,0,8105,8],[8953,0,8106,10],[8953,18,8106,16,"code"],[8953,23,8106,20],[8953,26,8106,23],[8953,31,8106,28,"readCodePoint"],[8953,44,8106,23],[8953,45,8106,42,"throwOnInvalid"],[8953,59,8106,23],[8953,60,8106,10],[8955,0,8107,10],[8955,21,8107,17,"code"],[8955,26,8107,21],[8955,31,8107,26],[8955,35,8107,17],[8955,38,8107,33],[8955,42,8107,17],[8955,45,8107,40,"String"],[8955,51,8107,46],[8955,52,8107,47,"fromCodePoint"],[8955,65,8107,40],[8955,66,8107,61,"code"],[8955,71,8107,40],[8955,72,8107,10],[8956,0,8108,9],[8958,0,8110,6],[8958,15,8110,11],[8958,18,8110,6],[8959,0,8111,8],[8959,19,8111,15],[8959,23,8111,8],[8961,0,8113,6],[8961,15,8113,11],[8961,17,8113,6],[8962,0,8114,8],[8962,19,8114,15],[8962,23,8114,8],[8964,0,8116,6],[8964,15,8116,11],[8964,18,8116,6],[8965,0,8117,8],[8965,19,8117,15],[8965,25,8117,8],[8967,0,8119,6],[8967,15,8119,11],[8967,18,8119,6],[8968,0,8120,8],[8968,19,8120,15],[8968,23,8120,8],[8970,0,8122,6],[8970,15,8122,11],[8970,17,8122,6],[8971,0,8123,8],[8971,16,8123,12],[8971,21,8123,17,"input"],[8971,26,8123,12],[8971,27,8123,23,"charCodeAt"],[8971,37,8123,12],[8971,38,8123,34],[8971,43,8123,39,"state"],[8971,48,8123,34],[8971,49,8123,45,"pos"],[8971,52,8123,12],[8971,58,8123,54],[8971,60,8123,8],[8971,62,8123,58],[8972,0,8124,10],[8972,16,8124,12],[8972,21,8124,17,"state"],[8972,26,8124,12],[8972,27,8124,23,"pos"],[8972,30,8124,10],[8973,0,8125,9],[8975,0,8127,6],[8975,15,8127,11],[8975,17,8127,6],[8976,0,8128,8],[8976,17,8128,13,"state"],[8976,22,8128,8],[8976,23,8128,19,"lineStart"],[8976,32,8128,8],[8976,35,8128,31],[8976,40,8128,36,"state"],[8976,45,8128,31],[8976,46,8128,42,"pos"],[8976,49,8128,8],[8977,0,8129,8],[8977,14,8129,10],[8977,19,8129,15,"state"],[8977,24,8129,10],[8977,25,8129,21,"curLine"],[8977,32,8129,8],[8979,0,8131,6],[8979,15,8131,11],[8979,19,8131,6],[8980,0,8132,6],[8980,15,8132,11],[8980,19,8132,6],[8981,0,8133,8],[8981,19,8133,15],[8981,21,8133,8],[8983,0,8135,6],[8983,15,8135,11],[8983,17,8135,6],[8984,0,8136,6],[8984,15,8136,11],[8984,17,8136,6],[8985,0,8137,8],[8985,16,8137,12,"inTemplate"],[8985,26,8137,8],[8985,28,8137,24],[8986,0,8138,10],[8986,18,8138,16,"codePos"],[8986,25,8138,23],[8986,28,8138,26],[8986,33,8138,31,"state"],[8986,38,8138,26],[8986,39,8138,37,"pos"],[8986,42,8138,26],[8986,45,8138,43],[8986,46,8138,10],[8987,0,8139,10],[8987,19,8139,15,"state"],[8987,24,8139,10],[8987,25,8139,21,"invalidTemplateEscapePosition"],[8987,54,8139,10],[8987,57,8139,53,"codePos"],[8987,64,8139,10],[8988,0,8140,10],[8988,21,8140,17],[8988,25,8140,10],[8989,0,8141,9],[8991,0,8143,6],[8992,0,8144,8],[8992,16,8144,12,"ch"],[8992,18,8144,14],[8992,22,8144,18],[8992,24,8144,12],[8992,28,8144,24,"ch"],[8992,30,8144,26],[8992,34,8144,30],[8992,36,8144,8],[8992,38,8144,34],[8993,0,8145,10],[8993,18,8145,16,"codePos"],[8993,26,8145,23],[8993,29,8145,26],[8993,34,8145,31,"state"],[8993,39,8145,26],[8993,40,8145,37,"pos"],[8993,43,8145,26],[8993,46,8145,43],[8993,47,8145,10],[8995,0,8146,10],[8995,18,8146,14,"octalStr"],[8995,26,8146,22],[8995,29,8146,25],[8995,34,8146,30,"input"],[8995,39,8146,25],[8995,40,8146,36,"substr"],[8995,46,8146,25],[8995,47,8146,43],[8995,52,8146,48,"state"],[8995,57,8146,43],[8995,58,8146,54,"pos"],[8995,61,8146,43],[8995,64,8146,60],[8995,65,8146,25],[8995,67,8146,63],[8995,68,8146,25],[8995,70,8146,66,"match"],[8995,75,8146,25],[8995,76,8146,72],[8995,85,8146,25],[8995,87,8146,83],[8995,88,8146,25],[8995,89,8146,10],[8996,0,8147,10],[8996,18,8147,14,"octal"],[8996,23,8147,19],[8996,26,8147,22,"parseInt"],[8996,34,8147,30],[8996,35,8147,31,"octalStr"],[8996,43,8147,30],[8996,45,8147,41],[8996,46,8147,30],[8996,47,8147,10],[8998,0,8149,10],[8998,18,8149,14,"octal"],[8998,23,8149,19],[8998,26,8149,22],[8998,29,8149,10],[8998,31,8149,27],[8999,0,8150,12,"octalStr"],[8999,16,8150,12,"octalStr"],[8999,24,8150,20],[8999,27,8150,23,"octalStr"],[8999,35,8150,31],[8999,36,8150,32,"slice"],[8999,41,8150,23],[8999,42,8150,38],[8999,43,8150,23],[8999,45,8150,41],[8999,46,8150,42],[8999,47,8150,23],[8999,48,8150,12],[9000,0,8151,12,"octal"],[9000,16,8151,12,"octal"],[9000,21,8151,17],[9000,24,8151,20,"parseInt"],[9000,32,8151,28],[9000,33,8151,29,"octalStr"],[9000,41,8151,28],[9000,43,8151,39],[9000,44,8151,28],[9000,45,8151,12],[9001,0,8152,11],[9003,0,8154,10],[9003,19,8154,15,"state"],[9003,24,8154,10],[9003,25,8154,21,"pos"],[9003,28,8154,10],[9003,32,8154,28,"octalStr"],[9003,40,8154,36],[9003,41,8154,37,"length"],[9003,47,8154,28],[9003,50,8154,46],[9003,51,8154,10],[9004,0,8155,10],[9004,18,8155,16,"next"],[9004,22,8155,20],[9004,25,8155,23],[9004,30,8155,28,"input"],[9004,35,8155,23],[9004,36,8155,34,"charCodeAt"],[9004,46,8155,23],[9004,47,8155,45],[9004,52,8155,50,"state"],[9004,57,8155,45],[9004,58,8155,56,"pos"],[9004,61,8155,23],[9004,62,8155,10],[9006,0,8157,10],[9006,18,8157,14,"octalStr"],[9006,26,8157,22],[9006,31,8157,27],[9006,34,8157,14],[9006,38,8157,34,"next"],[9006,42,8157,38],[9006,47,8157,43],[9006,49,8157,14],[9006,53,8157,49,"next"],[9006,57,8157,53],[9006,62,8157,58],[9006,64,8157,10],[9006,66,8157,62],[9007,0,8158,12],[9007,20,8158,16,"inTemplate"],[9007,30,8158,12],[9007,32,8158,28],[9008,0,8159,14],[9008,23,8159,19,"state"],[9008,28,8159,14],[9008,29,8159,25,"invalidTemplateEscapePosition"],[9008,58,8159,14],[9008,61,8159,57,"codePos"],[9008,69,8159,14],[9009,0,8160,14],[9009,25,8160,21],[9009,29,8160,14],[9010,0,8161,13],[9010,17,8158,12],[9010,23,8161,19],[9010,27,8161,23],[9010,32,8161,28,"state"],[9010,37,8161,23],[9010,38,8161,34,"strict"],[9010,44,8161,19],[9010,46,8161,42],[9011,0,8162,14],[9011,23,8162,19,"raise"],[9011,28,8162,14],[9011,29,8162,25,"codePos"],[9011,37,8162,14],[9011,39,8162,34],[9011,69,8162,14],[9012,0,8163,13],[9012,17,8161,19],[9012,23,8163,19],[9012,27,8163,23],[9012,28,8163,24],[9012,33,8163,29,"state"],[9012,38,8163,24],[9012,39,8163,35,"containsOctal"],[9012,52,8163,19],[9012,54,8163,50],[9013,0,8164,14],[9013,23,8164,19,"state"],[9013,28,8164,14],[9013,29,8164,25,"containsOctal"],[9013,42,8164,14],[9013,45,8164,41],[9013,49,8164,14],[9014,0,8165,14],[9014,23,8165,19,"state"],[9014,28,8165,14],[9014,29,8165,25,"octalPosition"],[9014,42,8165,14],[9014,45,8165,41,"codePos"],[9014,53,8165,14],[9015,0,8166,13],[9016,0,8167,11],[9018,0,8169,10],[9018,21,8169,17,"String"],[9018,27,8169,23],[9018,28,8169,24,"fromCharCode"],[9018,40,8169,17],[9018,41,8169,37,"octal"],[9018,46,8169,17],[9018,47,8169,10],[9019,0,8170,9],[9021,0,8172,8],[9021,19,8172,15,"String"],[9021,25,8172,21],[9021,26,8172,22,"fromCharCode"],[9021,38,8172,15],[9021,39,8172,35,"ch"],[9021,41,8172,15],[9021,42,8172,8],[9022,0,8091,4],[9023,0,8174,3],[9026,34,8176,14,"len"],[9026,37],[9026,39,8176,19,"forceLen"],[9026,47],[9026,49,8176,29,"throwOnInvalid"],[9026,63],[9026,65,8176,45],[9027,0,8177,4],[9027,12,8177,10,"codePos"],[9027,19,8177,17],[9027,22,8177,20],[9027,27,8177,25,"state"],[9027,32,8177,20],[9027,33,8177,31,"pos"],[9027,36,8177,4],[9028,0,8178,4],[9028,12,8178,10,"n"],[9028,13,8178,11],[9028,16,8178,14],[9028,21,8178,19,"readInt"],[9028,28,8178,14],[9028,29,8178,27],[9028,31,8178,14],[9028,33,8178,31,"len"],[9028,36,8178,14],[9028,38,8178,36,"forceLen"],[9028,46,8178,14],[9028,48,8178,46],[9028,53,8178,14],[9028,54,8178,4],[9030,0,8180,4],[9030,12,8180,8,"n"],[9030,13,8180,9],[9030,18,8180,14],[9030,22,8180,4],[9030,24,8180,20],[9031,0,8181,6],[9031,14,8181,10,"throwOnInvalid"],[9031,28,8181,6],[9031,30,8181,26],[9032,0,8182,8],[9032,17,8182,13,"raise"],[9032,22,8182,8],[9032,23,8182,19,"codePos"],[9032,30,8182,8],[9032,32,8182,28],[9032,63,8182,8],[9033,0,8183,7],[9033,11,8181,6],[9033,17,8183,13],[9034,0,8184,8],[9034,17,8184,13,"state"],[9034,22,8184,8],[9034,23,8184,19,"pos"],[9034,26,8184,8],[9034,29,8184,25,"codePos"],[9034,36,8184,32],[9034,39,8184,35],[9034,40,8184,8],[9035,0,8185,8],[9035,17,8185,13,"state"],[9035,22,8185,8],[9035,23,8185,19,"invalidTemplateEscapePosition"],[9035,52,8185,8],[9035,55,8185,51,"codePos"],[9035,62,8185,58],[9035,65,8185,61],[9035,66,8185,8],[9036,0,8186,7],[9037,0,8187,5],[9039,0,8189,4],[9039,15,8189,11,"n"],[9039,16,8189,4],[9040,0,8190,3],[9043,34,8192,14],[9044,0,8193,4],[9044,12,8193,8,"word"],[9044,16,8193,12],[9044,19,8193,15],[9044,21,8193,4],[9045,0,8194,4],[9045,13,8194,9,"state"],[9045,18,8194,4],[9045,19,8194,15,"containsEsc"],[9045,30,8194,4],[9045,33,8194,29],[9045,38,8194,4],[9046,0,8195,4],[9046,12,8195,10,"start"],[9046,17,8195,15],[9046,20,8195,18],[9046,25,8195,23,"state"],[9046,30,8195,18],[9046,31,8195,29,"pos"],[9046,34,8195,4],[9047,0,8196,4],[9047,12,8196,8,"chunkStart"],[9047,22,8196,18],[9047,25,8196,21],[9047,30,8196,26,"state"],[9047,35,8196,21],[9047,36,8196,32,"pos"],[9047,39,8196,4],[9049,0,8198,4],[9049,15,8198,11],[9049,20,8198,16,"state"],[9049,25,8198,11],[9049,26,8198,22,"pos"],[9049,29,8198,11],[9049,32,8198,28],[9049,37,8198,33,"length"],[9049,43,8198,4],[9049,45,8198,41],[9050,0,8199,6],[9050,14,8199,12,"ch"],[9050,16,8199,14],[9050,19,8199,17],[9050,24,8199,22,"input"],[9050,29,8199,17],[9050,30,8199,28,"codePointAt"],[9050,41,8199,17],[9050,42,8199,40],[9050,47,8199,45,"state"],[9050,52,8199,40],[9050,53,8199,51,"pos"],[9050,56,8199,17],[9050,57,8199,6],[9052,0,8201,6],[9052,14,8201,10,"isIdentifierChar"],[9052,30,8201,26],[9052,31,8201,27,"ch"],[9052,33,8201,26],[9052,34,8201,6],[9052,36,8201,32],[9053,0,8202,8],[9053,17,8202,13,"state"],[9053,22,8202,8],[9053,23,8202,19,"pos"],[9053,26,8202,8],[9053,30,8202,26,"ch"],[9053,32,8202,28],[9053,36,8202,32],[9053,42,8202,26],[9053,45,8202,41],[9053,46,8202,26],[9053,49,8202,45],[9053,50,8202,8],[9054,0,8203,7],[9054,11,8201,6],[9054,17,8203,13],[9054,21,8203,17],[9054,26,8203,22,"state"],[9054,31,8203,17],[9054,32,8203,28,"isIterator"],[9054,42,8203,17],[9054,46,8203,42,"ch"],[9054,48,8203,44],[9054,53,8203,49],[9054,55,8203,13],[9054,57,8203,53],[9055,0,8204,8],[9055,14,8204,10],[9055,19,8204,15,"state"],[9055,24,8204,10],[9055,25,8204,21,"pos"],[9055,28,8204,8],[9056,0,8205,7],[9056,11,8203,13],[9056,17,8205,13],[9056,21,8205,17,"ch"],[9056,23,8205,19],[9056,28,8205,24],[9056,30,8205,13],[9056,32,8205,28],[9057,0,8206,8],[9057,17,8206,13,"state"],[9057,22,8206,8],[9057,23,8206,19,"containsEsc"],[9057,34,8206,8],[9057,37,8206,33],[9057,41,8206,8],[9058,0,8207,8,"word"],[9058,12,8207,8,"word"],[9058,16,8207,12],[9058,20,8207,16],[9058,25,8207,21,"input"],[9058,30,8207,16],[9058,31,8207,27,"slice"],[9058,36,8207,16],[9058,37,8207,33,"chunkStart"],[9058,47,8207,16],[9058,49,8207,45],[9058,54,8207,50,"state"],[9058,59,8207,45],[9058,60,8207,56,"pos"],[9058,63,8207,16],[9058,64,8207,8],[9059,0,8208,8],[9059,16,8208,14,"escStart"],[9059,24,8208,22],[9059,27,8208,25],[9059,32,8208,30,"state"],[9059,37,8208,25],[9059,38,8208,36,"pos"],[9059,41,8208,8],[9060,0,8209,8],[9060,16,8209,14,"identifierCheck"],[9060,31,8209,29],[9060,34,8209,32],[9060,39,8209,37,"state"],[9060,44,8209,32],[9060,45,8209,43,"pos"],[9060,48,8209,32],[9060,53,8209,51,"start"],[9060,58,8209,32],[9060,61,8209,59,"isIdentifierStart"],[9060,78,8209,32],[9060,81,8209,79,"isIdentifierChar"],[9060,97,8209,8],[9062,0,8211,8],[9062,16,8211,12],[9062,21,8211,17,"input"],[9062,26,8211,12],[9062,27,8211,23,"charCodeAt"],[9062,37,8211,12],[9062,38,8211,34],[9062,40,8211,36],[9062,45,8211,41,"state"],[9062,50,8211,36],[9062,51,8211,47,"pos"],[9062,54,8211,12],[9062,60,8211,56],[9062,63,8211,8],[9062,65,8211,61],[9063,0,8212,10],[9063,19,8212,15,"raise"],[9063,24,8212,10],[9063,25,8212,21],[9063,30,8212,26,"state"],[9063,35,8212,21],[9063,36,8212,32,"pos"],[9063,39,8212,10],[9063,41,8212,37],[9063,84,8212,10],[9064,0,8213,10],[9065,0,8214,9],[9067,0,8216,8],[9067,14,8216,10],[9067,19,8216,15,"state"],[9067,24,8216,10],[9067,25,8216,21,"pos"],[9067,28,8216,8],[9068,0,8217,8],[9068,16,8217,14,"esc"],[9068,19,8217,17],[9068,22,8217,20],[9068,27,8217,25,"readCodePoint"],[9068,40,8217,20],[9068,41,8217,39],[9068,45,8217,20],[9068,46,8217,8],[9070,0,8219,8],[9070,16,8219,12,"esc"],[9070,19,8219,15],[9070,24,8219,20],[9070,28,8219,8],[9070,30,8219,26],[9071,0,8220,10],[9071,18,8220,14],[9071,19,8220,15,"identifierCheck"],[9071,34,8220,30],[9071,35,8220,31,"esc"],[9071,38,8220,30],[9071,39,8220,10],[9071,41,8220,37],[9072,0,8221,12],[9072,21,8221,17,"raise"],[9072,26,8221,12],[9072,27,8221,23,"escStart"],[9072,35,8221,12],[9072,37,8221,33],[9072,61,8221,12],[9073,0,8222,11],[9075,0,8224,10,"word"],[9075,14,8224,10,"word"],[9075,18,8224,14],[9075,22,8224,18,"String"],[9075,28,8224,24],[9075,29,8224,25,"fromCodePoint"],[9075,42,8224,18],[9075,43,8224,39,"esc"],[9075,46,8224,18],[9075,47,8224,10],[9076,0,8225,9],[9078,0,8227,8,"chunkStart"],[9078,12,8227,8,"chunkStart"],[9078,22,8227,18],[9078,25,8227,21],[9078,30,8227,26,"state"],[9078,35,8227,21],[9078,36,8227,32,"pos"],[9078,39,8227,8],[9079,0,8228,7],[9079,11,8205,13],[9079,17,8228,13],[9080,0,8229,8],[9081,0,8230,7],[9082,0,8231,5],[9084,0,8233,4],[9084,15,8233,11,"word"],[9084,19,8233,15],[9084,22,8233,18],[9084,27,8233,23,"input"],[9084,32,8233,18],[9084,33,8233,29,"slice"],[9084,38,8233,18],[9084,39,8233,35,"chunkStart"],[9084,49,8233,18],[9084,51,8233,47],[9084,56,8233,52,"state"],[9084,61,8233,47],[9084,62,8233,58,"pos"],[9084,65,8233,18],[9084,66,8233,4],[9085,0,8234,3],[9088,33,8236,13,"word"],[9088,37],[9088,39,8236,19],[9089,0,8237,4],[9089,15,8237,11,"word"],[9089,19,8237,15],[9089,24,8237,20],[9089,36,8237,11],[9089,40,8237,36,"word"],[9089,44,8237,40],[9089,49,8237,45],[9089,66,8237,4],[9090,0,8238,3],[9093,33,8240,13],[9094,0,8241,4],[9094,12,8241,10,"word"],[9094,16,8241,14],[9094,19,8241,17],[9094,24,8241,22,"readWord1"],[9094,33,8241,17],[9094,35,8241,4],[9095,0,8242,4],[9095,12,8242,10,"type"],[9095,16,8242,14],[9095,19,8242,17,"keywords"],[9095,27,8242,25],[9095,28,8242,26,"get"],[9095,31,8242,17],[9095,32,8242,30,"word"],[9095,36,8242,17],[9095,41,8242,39,"types"],[9095,46,8242,44],[9095,47,8242,45,"name"],[9095,51,8242,4],[9097,0,8244,4],[9097,12,8244,8],[9097,17,8244,13,"state"],[9097,22,8244,8],[9097,23,8244,19,"isIterator"],[9097,33,8244,8],[9097,38,8244,34],[9097,39,8244,35],[9097,44,8244,40,"isIterator"],[9097,54,8244,35],[9097,55,8244,51,"word"],[9097,59,8244,35],[9097,60,8244,34],[9097,64,8244,60],[9097,65,8244,61],[9097,70,8244,66,"state"],[9097,75,8244,61],[9097,76,8244,72,"inType"],[9097,82,8244,8],[9097,83,8244,4],[9097,85,8244,81],[9098,0,8245,6],[9098,15,8245,11,"raise"],[9098,20,8245,6],[9098,21,8245,17],[9098,26,8245,22,"state"],[9098,31,8245,17],[9098,32,8245,28,"pos"],[9098,35,8245,6],[9098,61,8245,55,"word"],[9098,65,8245,6],[9099,0,8246,5],[9101,0,8248,4],[9101,13,8248,9,"finishToken"],[9101,24,8248,4],[9101,25,8248,21,"type"],[9101,29,8248,4],[9101,31,8248,27,"word"],[9101,35,8248,4],[9102,0,8249,3],[9105,44,8251,24],[9106,0,8252,4],[9106,12,8252,10,"kw"],[9106,14,8252,12],[9106,17,8252,15],[9106,22,8252,20,"state"],[9106,27,8252,15],[9106,28,8252,26,"type"],[9106,32,8252,15],[9106,33,8252,31,"keyword"],[9106,40,8252,4],[9108,0,8254,4],[9108,12,8254,8,"kw"],[9108,14,8254,10],[9108,18,8254,14],[9108,23,8254,19,"state"],[9108,28,8254,14],[9108,29,8254,25,"containsEsc"],[9108,40,8254,4],[9108,42,8254,38],[9109,0,8255,6],[9109,15,8255,11,"raise"],[9109,20,8255,6],[9109,21,8255,17],[9109,26,8255,22,"state"],[9109,31,8255,17],[9109,32,8255,28,"start"],[9109,37,8255,6],[9109,71,8255,65,"kw"],[9109,73,8255,6],[9110,0,8256,5],[9111,0,8257,3],[9114,35,8259,15,"prevType"],[9114,43],[9114,45,8259,25],[9115,0,8260,4],[9115,12,8260,10,"parent"],[9115,18,8260,16],[9115,21,8260,19],[9115,26,8260,24,"curContext"],[9115,36,8260,19],[9115,38,8260,4],[9117,0,8262,4],[9117,12,8262,8,"parent"],[9117,18,8262,14],[9117,23,8262,19,"types$1"],[9117,30,8262,26],[9117,31,8262,27,"functionExpression"],[9117,49,8262,8],[9117,53,8262,49,"parent"],[9117,59,8262,55],[9117,64,8262,60,"types$1"],[9117,71,8262,67],[9117,72,8262,68,"functionStatement"],[9117,89,8262,4],[9117,91,8262,87],[9118,0,8263,6],[9118,17,8263,13],[9118,21,8263,6],[9119,0,8264,5],[9121,0,8266,4],[9121,12,8266,8,"prevType"],[9121,20,8266,16],[9121,25,8266,21,"types"],[9121,30,8266,26],[9121,31,8266,27,"colon"],[9121,36,8266,8],[9121,41,8266,37,"parent"],[9121,47,8266,43],[9121,52,8266,48,"types$1"],[9121,59,8266,55],[9121,60,8266,56,"braceStatement"],[9121,74,8266,37],[9121,78,8266,74,"parent"],[9121,84,8266,80],[9121,89,8266,85,"types$1"],[9121,96,8266,92],[9121,97,8266,93,"braceExpression"],[9121,112,8266,8],[9121,113,8266,4],[9121,115,8266,111],[9122,0,8267,6],[9122,17,8267,13],[9122,18,8267,14,"parent"],[9122,24,8267,20],[9122,25,8267,21,"isExpr"],[9122,31,8267,6],[9123,0,8268,5],[9125,0,8270,4],[9125,12,8270,8,"prevType"],[9125,20,8270,16],[9125,25,8270,21,"types"],[9125,30,8270,26],[9125,31,8270,27,"_return"],[9125,38,8270,8],[9125,42,8270,38,"prevType"],[9125,50,8270,46],[9125,55,8270,51,"types"],[9125,60,8270,56],[9125,61,8270,57,"name"],[9125,65,8270,38],[9125,69,8270,65],[9125,74,8270,70,"state"],[9125,79,8270,65],[9125,80,8270,76,"exprAllowed"],[9125,91,8270,4],[9125,93,8270,89],[9126,0,8271,6],[9126,17,8271,13,"lineBreak"],[9126,26,8271,22],[9126,27,8271,23,"test"],[9126,31,8271,13],[9126,32,8271,28],[9126,37,8271,33,"input"],[9126,42,8271,28],[9126,43,8271,39,"slice"],[9126,48,8271,28],[9126,49,8271,45],[9126,54,8271,50,"state"],[9126,59,8271,45],[9126,60,8271,56,"lastTokEnd"],[9126,70,8271,28],[9126,72,8271,68],[9126,77,8271,73,"state"],[9126,82,8271,68],[9126,83,8271,79,"start"],[9126,88,8271,28],[9126,89,8271,13],[9126,90,8271,6],[9127,0,8272,5],[9129,0,8274,4],[9129,12,8274,8,"prevType"],[9129,20,8274,16],[9129,25,8274,21,"types"],[9129,30,8274,26],[9129,31,8274,27,"_else"],[9129,36,8274,8],[9129,40,8274,36,"prevType"],[9129,48,8274,44],[9129,53,8274,49,"types"],[9129,58,8274,54],[9129,59,8274,55,"semi"],[9129,63,8274,8],[9129,67,8274,63,"prevType"],[9129,75,8274,71],[9129,80,8274,76,"types"],[9129,85,8274,81],[9129,86,8274,82,"eof"],[9129,89,8274,8],[9129,93,8274,89,"prevType"],[9129,101,8274,97],[9129,106,8274,102,"types"],[9129,111,8274,107],[9129,112,8274,108,"parenR"],[9129,118,8274,8],[9129,122,8274,118,"prevType"],[9129,130,8274,126],[9129,135,8274,131,"types"],[9129,140,8274,136],[9129,141,8274,137,"arrow"],[9129,146,8274,4],[9129,148,8274,144],[9130,0,8275,6],[9130,17,8275,13],[9130,21,8275,6],[9131,0,8276,5],[9133,0,8278,4],[9133,12,8278,8,"prevType"],[9133,20,8278,16],[9133,25,8278,21,"types"],[9133,30,8278,26],[9133,31,8278,27,"braceL"],[9133,37,8278,4],[9133,39,8278,35],[9134,0,8279,6],[9134,17,8279,13,"parent"],[9134,23,8279,19],[9134,28,8279,24,"types$1"],[9134,35,8279,31],[9134,36,8279,32,"braceStatement"],[9134,50,8279,6],[9135,0,8280,5],[9137,0,8282,4],[9137,12,8282,8,"prevType"],[9137,20,8282,16],[9137,25,8282,21,"types"],[9137,30,8282,26],[9137,31,8282,27,"_var"],[9137,35,8282,8],[9137,39,8282,35,"prevType"],[9137,47,8282,43],[9137,52,8282,48,"types"],[9137,57,8282,53],[9137,58,8282,54,"_const"],[9137,64,8282,8],[9137,68,8282,64,"prevType"],[9137,76,8282,72],[9137,81,8282,77,"types"],[9137,86,8282,82],[9137,87,8282,83,"name"],[9137,91,8282,4],[9137,93,8282,89],[9138,0,8283,6],[9138,17,8283,13],[9138,22,8283,6],[9139,0,8284,5],[9141,0,8286,4],[9141,12,8286,8,"prevType"],[9141,20,8286,16],[9141,25,8286,21,"types"],[9141,30,8286,26],[9141,31,8286,27,"relational"],[9141,41,8286,4],[9141,43,8286,39],[9142,0,8287,6],[9142,17,8287,13],[9142,21,8287,6],[9143,0,8288,5],[9145,0,8290,4],[9145,15,8290,11],[9145,16,8290,12],[9145,21,8290,17,"state"],[9145,26,8290,12],[9145,27,8290,23,"exprAllowed"],[9145,38,8290,4],[9146,0,8291,3],[9149,36,8293,16,"prevType"],[9149,44],[9149,46,8293,26],[9150,0,8294,4],[9150,12,8294,10,"type"],[9150,16,8294,14],[9150,19,8294,17],[9150,24,8294,22,"state"],[9150,29,8294,17],[9150,30,8294,28,"type"],[9150,34,8294,4],[9151,0,8295,4],[9151,12,8295,8,"update"],[9151,18,8295,4],[9153,0,8297,4],[9153,12,8297,8,"type"],[9153,16,8297,12],[9153,17,8297,13,"keyword"],[9153,24,8297,8],[9153,29,8297,25,"prevType"],[9153,37,8297,33],[9153,42,8297,38,"types"],[9153,47,8297,43],[9153,48,8297,44,"dot"],[9153,51,8297,25],[9153,55,8297,51,"prevType"],[9153,63,8297,59],[9153,68,8297,64,"types"],[9153,73,8297,69],[9153,74,8297,70,"questionDot"],[9153,85,8297,8],[9153,86,8297,4],[9153,88,8297,84],[9154,0,8298,6],[9154,15,8298,11,"state"],[9154,20,8298,6],[9154,21,8298,17,"exprAllowed"],[9154,32,8298,6],[9154,35,8298,31],[9154,40,8298,6],[9155,0,8299,5],[9155,9,8297,4],[9155,15,8299,11],[9155,19,8299,15,"update"],[9155,25,8299,21],[9155,28,8299,24,"type"],[9155,32,8299,28],[9155,33,8299,29,"updateContext"],[9155,46,8299,11],[9155,48,8299,44],[9156,0,8300,6,"update"],[9156,10,8300,6,"update"],[9156,16,8300,12],[9156,17,8300,13,"call"],[9156,21,8300,6],[9156,22,8300,18],[9156,26,8300,6],[9156,28,8300,24,"prevType"],[9156,36,8300,6],[9157,0,8301,5],[9157,9,8299,11],[9157,15,8301,11],[9158,0,8302,6],[9158,15,8302,11,"state"],[9158,20,8302,6],[9158,21,8302,17,"exprAllowed"],[9158,32,8302,6],[9158,35,8302,31,"type"],[9158,39,8302,35],[9158,40,8302,36,"beforeExpr"],[9158,50,8302,6],[9159,0,8303,5],[9160,0,8304,3],[9164,4,7138,24,"LocationParser"],[9164,18],[9166,0,8308,0],[9166,6,8308,6,"literal"],[9166,13,8308,13],[9166,16,8308,16],[9166,38,8308,0],[9168,6,8309,6,"UtilParser"],[9168,16],[9179,31,8310,11,"node"],[9179,35],[9179,37,8310,17,"key"],[9179,40],[9179,42,8310,22,"val"],[9179,45],[9179,47,8310,27],[9180,0,8311,4],[9180,12,8311,8],[9180,13,8311,9,"node"],[9180,17,8311,4],[9180,19,8311,15],[9181,0,8312,4],[9181,12,8312,10,"extra"],[9181,17,8312,15],[9181,20,8312,18,"node"],[9181,24,8312,22],[9181,25,8312,23,"extra"],[9181,30,8312,18],[9181,33,8312,31,"node"],[9181,37,8312,35],[9181,38,8312,36,"extra"],[9181,43,8312,31],[9181,47,8312,45],[9181,49,8312,4],[9182,0,8313,4,"extra"],[9182,8,8313,4,"extra"],[9182,13,8313,9],[9182,14,8313,10,"key"],[9182,17,8313,9],[9182,18,8313,4],[9182,21,8313,17,"val"],[9182,24,8313,4],[9183,0,8314,3],[9186,35,8316,15,"op"],[9186,37],[9186,39,8316,19],[9187,0,8317,4],[9187,15,8317,11],[9187,20,8317,16,"match"],[9187,25,8317,11],[9187,26,8317,22,"types"],[9187,31,8317,27],[9187,32,8317,28,"relational"],[9187,42,8317,11],[9187,47,8317,43],[9187,52,8317,48,"state"],[9187,57,8317,43],[9187,58,8317,54,"value"],[9187,63,8317,43],[9187,68,8317,64,"op"],[9187,70,8317,4],[9188,0,8318,3],[9191,44,8320,24,"op"],[9191,46],[9191,48,8320,28],[9192,0,8321,4],[9192,12,8321,10,"next"],[9192,16,8321,14],[9192,19,8321,17],[9192,24,8321,22,"nextTokenStart"],[9192,38,8321,17],[9192,40,8321,4],[9194,0,8323,4],[9194,12,8323,8],[9194,17,8323,13,"input"],[9194,22,8323,8],[9194,23,8323,19,"charAt"],[9194,29,8323,8],[9194,30,8323,26,"next"],[9194,34,8323,8],[9194,40,8323,36,"op"],[9194,42,8323,4],[9194,44,8323,40],[9195,0,8324,6],[9195,14,8324,10,"next"],[9195,18,8324,14],[9195,21,8324,17],[9195,22,8324,10],[9195,27,8324,23],[9195,32,8324,28,"input"],[9195,37,8324,23],[9195,38,8324,34,"length"],[9195,44,8324,6],[9195,46,8324,42],[9196,0,8325,8],[9196,19,8325,15],[9196,23,8325,8],[9197,0,8326,7],[9199,0,8328,6],[9199,14,8328,12,"afterNext"],[9199,23,8328,21],[9199,26,8328,24],[9199,31,8328,29,"input"],[9199,36,8328,24],[9199,37,8328,35,"charCodeAt"],[9199,47,8328,24],[9199,48,8328,46,"next"],[9199,52,8328,50],[9199,55,8328,53],[9199,56,8328,24],[9199,57,8328,6],[9200,0,8329,6],[9200,17,8329,13,"afterNext"],[9200,26,8329,22],[9200,31,8329,27,"op"],[9200,33,8329,29],[9200,34,8329,30,"charCodeAt"],[9200,44,8329,27],[9200,45,8329,41],[9200,46,8329,27],[9200,47,8329,13],[9200,51,8329,47,"afterNext"],[9200,60,8329,56],[9200,65,8329,61],[9200,67,8329,6],[9201,0,8330,5],[9203,0,8332,4],[9203,15,8332,11],[9203,20,8332,4],[9204,0,8333,3],[9207,39,8335,19,"op"],[9207,41],[9207,43,8335,23],[9208,0,8336,4],[9208,12,8336,8],[9208,17,8336,13,"isRelational"],[9208,29,8336,8],[9208,30,8336,26,"op"],[9208,32,8336,8],[9208,33,8336,4],[9208,35,8336,31],[9209,0,8337,6],[9209,15,8337,11,"next"],[9209,19,8337,6],[9210,0,8338,5],[9210,9,8336,4],[9210,15,8338,11],[9211,0,8339,6],[9211,15,8339,11,"unexpected"],[9211,25,8339,6],[9211,26,8339,22],[9211,30,8339,6],[9211,32,8339,28,"types"],[9211,37,8339,33],[9211,38,8339,34,"relational"],[9211,48,8339,6],[9212,0,8340,5],[9213,0,8341,3],[9216,36,8343,16,"op"],[9216,38],[9216,40,8343,20],[9217,0,8344,4],[9217,12,8344,8],[9217,17,8344,13,"isRelational"],[9217,29,8344,8],[9217,30,8344,26,"op"],[9217,32,8344,8],[9217,33,8344,4],[9217,35,8344,31],[9218,0,8345,6],[9218,15,8345,11,"next"],[9218,19,8345,6],[9219,0,8346,6],[9219,17,8346,13],[9219,21,8346,6],[9220,0,8347,5],[9222,0,8349,4],[9222,15,8349,11],[9222,20,8349,4],[9223,0,8350,3],[9226,35,8352,15,"name"],[9226,39],[9226,41,8352,21],[9227,0,8353,4],[9227,15,8353,11],[9227,20,8353,16,"match"],[9227,25,8353,11],[9227,26,8353,22,"types"],[9227,31,8353,27],[9227,32,8353,28,"name"],[9227,36,8353,11],[9227,41,8353,37],[9227,46,8353,42,"state"],[9227,51,8353,37],[9227,52,8353,48,"value"],[9227,57,8353,37],[9227,62,8353,58,"name"],[9227,66,8353,11],[9227,70,8353,66],[9227,71,8353,67],[9227,76,8353,72,"state"],[9227,81,8353,67],[9227,82,8353,78,"containsEsc"],[9227,93,8353,4],[9228,0,8354,3],[9231,43,8356,23,"nameStart"],[9231,52],[9231,54,8356,34,"name"],[9231,58],[9231,60,8356,40],[9232,0,8357,4],[9232,12,8357,10,"nameEnd"],[9232,19,8357,17],[9232,22,8357,20,"nameStart"],[9232,31,8357,29],[9232,34,8357,32,"name"],[9232,38,8357,36],[9232,39,8357,37,"length"],[9232,45,8357,4],[9233,0,8358,4],[9233,15,8358,11],[9233,20,8358,16,"input"],[9233,25,8358,11],[9233,26,8358,22,"slice"],[9233,31,8358,11],[9233,32,8358,28,"nameStart"],[9233,41,8358,11],[9233,43,8358,39,"nameEnd"],[9233,50,8358,11],[9233,56,8358,52,"name"],[9233,60,8358,11],[9233,65,8358,61,"nameEnd"],[9233,72,8358,68],[9233,77,8358,73],[9233,82,8358,78,"input"],[9233,87,8358,73],[9233,88,8358,84,"length"],[9233,94,8358,61],[9233,98,8358,94],[9233,99,8358,95,"isIdentifierChar"],[9233,115,8358,111],[9233,116,8358,112],[9233,121,8358,117,"input"],[9233,126,8358,112],[9233,127,8358,123,"charCodeAt"],[9233,137,8358,112],[9233,138,8358,134,"nameEnd"],[9233,145,8358,112],[9233,146,8358,111],[9233,147,8358,11],[9233,148,8358,4],[9234,0,8359,3],[9237,44,8361,24,"name"],[9237,48],[9237,50,8361,30],[9238,0,8362,4],[9238,12,8362,10,"next"],[9238,16,8362,14],[9238,19,8362,17],[9238,24,8362,22,"nextTokenStart"],[9238,38,8362,17],[9238,40,8362,4],[9239,0,8363,4],[9239,15,8363,11],[9239,20,8363,16,"isUnparsedContextual"],[9239,40,8363,11],[9239,41,8363,37,"next"],[9239,45,8363,11],[9239,47,8363,43,"name"],[9239,51,8363,11],[9239,52,8363,4],[9240,0,8364,3],[9243,36,8366,16,"name"],[9243,40],[9243,42,8366,22],[9244,0,8367,4],[9244,15,8367,11],[9244,20,8367,16,"isContextual"],[9244,32,8367,11],[9244,33,8367,29,"name"],[9244,37,8367,11],[9244,42,8367,38],[9244,47,8367,43,"eat"],[9244,50,8367,38],[9244,51,8367,47,"types"],[9244,56,8367,52],[9244,57,8367,53,"name"],[9244,61,8367,38],[9244,62,8367,4],[9245,0,8368,3],[9248,39,8370,19,"name"],[9248,43],[9248,45,8370,25,"message"],[9248,52],[9248,54,8370,34],[9249,0,8371,4],[9249,12,8371,8],[9249,13,8371,9],[9249,18,8371,14,"eatContextual"],[9249,31,8371,9],[9249,32,8371,28,"name"],[9249,36,8371,9],[9249,37,8371,4],[9249,39,8371,35],[9249,44,8371,40,"unexpected"],[9249,54,8371,35],[9249,55,8371,51],[9249,59,8371,35],[9249,61,8371,57,"message"],[9249,68,8371,35],[9250,0,8372,3],[9253,43,8374,23],[9254,0,8375,4],[9254,15,8375,11],[9254,20,8375,16,"match"],[9254,25,8375,11],[9254,26,8375,22,"types"],[9254,31,8375,27],[9254,32,8375,28,"eof"],[9254,35,8375,11],[9254,40,8375,36],[9254,45,8375,41,"match"],[9254,50,8375,36],[9254,51,8375,47,"types"],[9254,56,8375,52],[9254,57,8375,53,"braceR"],[9254,63,8375,36],[9254,64,8375,11],[9254,68,8375,64],[9254,73,8375,69,"hasPrecedingLineBreak"],[9254,94,8375,64],[9254,96,8375,4],[9255,0,8376,3],[9258,46,8378,26],[9259,0,8379,4],[9259,15,8379,11,"lineBreak"],[9259,24,8379,20],[9259,25,8379,21,"test"],[9259,29,8379,11],[9259,30,8379,26],[9259,35,8379,31,"input"],[9259,40,8379,26],[9259,41,8379,37,"slice"],[9259,46,8379,26],[9259,47,8379,43],[9259,52,8379,48,"state"],[9259,57,8379,43],[9259,58,8379,54,"lastTokEnd"],[9259,68,8379,26],[9259,70,8379,66],[9259,75,8379,71,"state"],[9259,80,8379,66],[9259,81,8379,77,"start"],[9259,86,8379,26],[9259,87,8379,11],[9259,88,8379,4],[9260,0,8380,3],[9263,41,8382,21],[9264,0,8383,4],[9264,15,8383,11],[9264,20,8383,16,"eat"],[9264,23,8383,11],[9264,24,8383,20,"types"],[9264,29,8383,25],[9264,30,8383,26,"semi"],[9264,34,8383,11],[9264,39,8383,35],[9264,44,8383,40,"canInsertSemicolon"],[9264,62,8383,35],[9264,64,8383,4],[9265,0,8384,3],[9268,34,8386,14],[9269,0,8387,4],[9269,12,8387,8],[9269,13,8387,9],[9269,18,8387,14,"isLineTerminator"],[9269,34,8387,9],[9269,36,8387,4],[9269,38,8387,34],[9269,43,8387,39,"unexpected"],[9269,53,8387,34],[9269,54,8387,50],[9269,58,8387,34],[9269,60,8387,56,"types"],[9269,65,8387,61],[9269,66,8387,62,"semi"],[9269,70,8387,34],[9270,0,8388,3],[9273,29,8390,9,"type"],[9273,33],[9273,35,8390,15,"pos"],[9273,38],[9273,40,8390,20],[9274,0,8391,4],[9274,13,8391,9,"eat"],[9274,16,8391,4],[9274,17,8391,13,"type"],[9274,21,8391,4],[9274,26,8391,22],[9274,31,8391,27,"unexpected"],[9274,41,8391,22],[9274,42,8391,38,"pos"],[9274,45,8391,22],[9274,47,8391,43,"type"],[9274,51,8391,22],[9274,52,8391,4],[9275,0,8392,3],[9278,38,8394,47],[9279,0,8394,47],[9279,12,8394,16,"message"],[9279,19,8394,47],[9279,90,8394,26],[9279,109,8394,47],[9281,0,8395,4],[9281,12,8395,8],[9281,17,8395,13,"state"],[9281,22,8395,8],[9281,23,8395,19,"start"],[9281,28,8395,8],[9281,31,8395,27],[9281,36,8395,32,"state"],[9281,41,8395,27],[9281,42,8395,38,"lastTokEnd"],[9281,52,8395,4],[9281,54,8395,50],[9282,0,8396,6],[9282,15,8396,11,"raise"],[9282,20,8396,6],[9282,21,8396,17],[9282,26,8396,22,"state"],[9282,31,8396,17],[9282,32,8396,28,"lastTokEnd"],[9282,42,8396,6],[9282,44,8396,40,"message"],[9282,51,8396,6],[9283,0,8397,5],[9284,0,8398,3],[9287,33,8400,13,"pos"],[9287,36],[9287,38,8400,54],[9288,0,8400,54],[9288,12,8400,18,"messageOrType"],[9288,25,8400,54],[9288,96,8400,34],[9288,114,8400,54],[9290,0,8401,4],[9290,12,8401,8],[9290,19,8401,15,"messageOrType"],[9290,32,8401,8],[9290,37,8401,33],[9290,45,8401,4],[9290,47,8401,43],[9291,0,8402,6,"messageOrType"],[9291,10,8402,6,"messageOrType"],[9291,23,8402,19],[9291,60,8402,53,"messageOrType"],[9291,73,8402,66],[9291,74,8402,67,"label"],[9291,79,8402,19],[9291,86,8402,6],[9292,0,8403,5],[9294,0,8405,4],[9294,14,8405,10],[9294,19,8405,15,"raise"],[9294,24,8405,10],[9294,25,8405,21,"pos"],[9294,28,8405,24],[9294,32,8405,28],[9294,36,8405,21],[9294,39,8405,35,"pos"],[9294,42,8405,21],[9294,45,8405,41],[9294,50,8405,46,"state"],[9294,55,8405,41],[9294,56,8405,52,"start"],[9294,61,8405,10],[9294,63,8405,59,"messageOrType"],[9294,76,8405,10],[9294,77,8405,4],[9295,0,8406,3],[9298,35,8408,15,"name"],[9298,39],[9298,41,8408,21,"pos"],[9298,44],[9298,46,8408,26],[9299,0,8409,4],[9299,12,8409,8],[9299,13,8409,9],[9299,18,8409,14,"hasPlugin"],[9299,27,8409,9],[9299,28,8409,24,"name"],[9299,32,8409,9],[9299,33,8409,4],[9299,35,8409,31],[9300,0,8410,6],[9300,16,8410,12],[9300,21,8410,17,"raise"],[9300,26,8410,12],[9300,27,8410,23,"pos"],[9300,30,8410,26],[9300,34,8410,30],[9300,38,8410,23],[9300,41,8410,37,"pos"],[9300,44,8410,23],[9300,47,8410,43],[9300,52,8410,48,"state"],[9300,57,8410,43],[9300,58,8410,54,"start"],[9300,63,8410,12],[9300,133,8410,127,"name"],[9300,137,8410,12],[9300,145,8410,136],[9301,0,8411,8,"missingPluginNames"],[9301,12,8411,8,"missingPluginNames"],[9301,30,8411,26],[9301,32,8411,28],[9301,33,8411,29,"name"],[9301,37,8411,28],[9302,0,8410,136],[9302,11,8410,12],[9302,12,8410,6],[9303,0,8413,5],[9305,0,8415,4],[9305,15,8415,11],[9305,19,8415,4],[9306,0,8416,3],[9309,38,8418,18,"names"],[9309,43],[9309,45,8418,25,"pos"],[9309,48],[9309,50,8418,30],[9310,0,8418,30],[9312,0,8419,4],[9312,12,8419,8],[9312,13,8419,9,"names"],[9312,18,8419,14],[9312,19,8419,15,"some"],[9312,23,8419,9],[9312,24,8419,20],[9312,34,8419,20,"n"],[9312,35,8419,21],[9313,0,8419,21],[9313,17,8419,25],[9313,24,8419,29],[9313,25,8419,30,"hasPlugin"],[9313,34,8419,25],[9313,35,8419,40,"n"],[9313,36,8419,25],[9313,37,8419,21],[9314,0,8419,21],[9314,9,8419,9],[9314,10,8419,4],[9314,12,8419,45],[9315,0,8420,6],[9315,16,8420,12],[9315,21,8420,17,"raise"],[9315,26,8420,12],[9315,27,8420,23,"pos"],[9315,30,8420,26],[9315,34,8420,30],[9315,38,8420,23],[9315,41,8420,37,"pos"],[9315,44,8420,23],[9315,47,8420,43],[9315,52,8420,48,"state"],[9315,57,8420,43],[9315,58,8420,54,"start"],[9315,63,8420,12],[9315,153,8420,147,"names"],[9315,158,8420,152],[9315,159,8420,153,"join"],[9315,163,8420,147],[9315,164,8420,158],[9315,168,8420,147],[9315,169,8420,12],[9315,177,8420,168],[9316,0,8421,8,"missingPluginNames"],[9316,12,8421,8,"missingPluginNames"],[9316,30,8421,26],[9316,32,8421,28,"names"],[9317,0,8420,168],[9317,11,8420,12],[9317,12,8420,6],[9318,0,8423,5],[9319,0,8424,3],[9322,55,8426,35],[9323,0,8427,4],[9323,12,8427,8],[9323,17,8427,13,"state"],[9323,22,8427,8],[9323,23,8427,19,"yieldPos"],[9323,31,8427,8],[9323,36,8427,32],[9323,37,8427,33],[9323,38,8427,8],[9323,43,8427,39],[9323,48,8427,44,"state"],[9323,53,8427,39],[9323,54,8427,50,"awaitPos"],[9323,62,8427,39],[9323,67,8427,63],[9323,68,8427,64],[9323,69,8427,39],[9323,73,8427,69],[9323,78,8427,74,"state"],[9323,83,8427,69],[9323,84,8427,80,"yieldPos"],[9323,92,8427,69],[9323,95,8427,91],[9323,100,8427,96,"state"],[9323,105,8427,91],[9323,106,8427,102,"awaitPos"],[9323,114,8427,8],[9323,115,8427,4],[9323,117,8427,113],[9324,0,8428,6],[9324,15,8428,11,"raise"],[9324,20,8428,6],[9324,21,8428,17],[9324,26,8428,22,"state"],[9324,31,8428,17],[9324,32,8428,28,"yieldPos"],[9324,40,8428,6],[9324,42,8428,38],[9324,100,8428,6],[9325,0,8429,5],[9327,0,8431,4],[9327,12,8431,8],[9327,17,8431,13,"state"],[9327,22,8431,8],[9327,23,8431,19,"awaitPos"],[9327,31,8431,8],[9327,36,8431,32],[9327,37,8431,33],[9327,38,8431,4],[9327,40,8431,36],[9328,0,8432,6],[9328,15,8432,11,"raise"],[9328,20,8432,6],[9328,21,8432,17],[9328,26,8432,22,"state"],[9328,31,8432,17],[9328,32,8432,28,"awaitPos"],[9328,40,8432,6],[9328,42,8432,38],[9328,97,8432,6],[9329,0,8433,5],[9330,0,8434,3],[9333,38,8436,18,"start"],[9333,43],[9333,45,8436,25],[9334,0,8437,4],[9334,17,8437,13],[9335,0,8438,6,"skipWhiteSpace"],[9335,10,8438,6,"skipWhiteSpace"],[9335,24,8438,20],[9335,25,8438,21,"lastIndex"],[9335,34,8438,6],[9335,37,8438,33,"start"],[9335,42,8438,6],[9336,0,8439,6,"start"],[9336,10,8439,6,"start"],[9336,15,8439,11],[9336,19,8439,15,"skipWhiteSpace"],[9336,33,8439,29],[9336,34,8439,30,"exec"],[9336,38,8439,15],[9336,39,8439,35],[9336,44,8439,40,"input"],[9336,49,8439,15],[9336,51,8439,47],[9336,52,8439,15],[9336,54,8439,50,"length"],[9336,60,8439,6],[9337,0,8440,6],[9337,14,8440,12,"match"],[9337,19,8440,17],[9337,22,8440,20,"literal"],[9337,29,8440,27],[9337,30,8440,28,"exec"],[9337,34,8440,20],[9337,35,8440,33],[9337,40,8440,38,"input"],[9337,45,8440,33],[9337,46,8440,44,"slice"],[9337,51,8440,33],[9337,52,8440,50,"start"],[9337,57,8440,33],[9337,58,8440,20],[9337,59,8440,6],[9338,0,8441,6],[9338,14,8441,10],[9338,15,8441,11,"match"],[9338,20,8441,6],[9338,22,8441,18],[9339,0,8442,6],[9339,14,8442,10,"match"],[9339,19,8442,15],[9339,20,8442,16],[9339,21,8442,15],[9339,22,8442,10],[9339,27,8442,23],[9339,39,8442,6],[9339,41,8442,37],[9339,48,8442,44],[9339,52,8442,37],[9340,0,8443,6,"start"],[9340,10,8443,6,"start"],[9340,15,8443,11],[9340,19,8443,15,"match"],[9340,24,8443,20],[9340,25,8443,21],[9340,26,8443,20],[9340,27,8443,15],[9340,28,8443,24,"length"],[9340,34,8443,6],[9341,0,8444,6,"skipWhiteSpace"],[9341,10,8444,6,"skipWhiteSpace"],[9341,24,8444,20],[9341,25,8444,21,"lastIndex"],[9341,34,8444,6],[9341,37,8444,33,"start"],[9341,42,8444,6],[9342,0,8445,6,"start"],[9342,10,8445,6,"start"],[9342,15,8445,11],[9342,19,8445,15,"skipWhiteSpace"],[9342,33,8445,29],[9342,34,8445,30,"exec"],[9342,38,8445,15],[9342,39,8445,35],[9342,44,8445,40,"input"],[9342,49,8445,15],[9342,51,8445,47],[9342,52,8445,15],[9342,54,8445,50,"length"],[9342,60,8445,6],[9344,0,8447,6],[9344,14,8447,10],[9344,19,8447,15,"input"],[9344,24,8447,10],[9344,25,8447,21,"start"],[9344,30,8447,10],[9344,36,8447,32],[9344,39,8447,6],[9344,41,8447,37],[9345,0,8448,8,"start"],[9345,12,8448,8,"start"],[9345,17,8448,13],[9346,0,8449,7],[9347,0,8450,5],[9349,0,8452,4],[9349,15,8452,11],[9349,20,8452,4],[9350,0,8453,3],[9353,31,8455,11,"fn"],[9353,33],[9353,35,8455,46],[9354,0,8455,46],[9354,12,8455,15,"oldState"],[9354,20,8455,46],[9354,91,8455,26],[9354,96,8455,31,"state"],[9354,101,8455,26],[9354,102,8455,37,"clone"],[9354,107,8455,26],[9354,109,8455,46],[9355,0,8456,4],[9355,12,8456,10,"abortSignal"],[9355,23,8456,21],[9355,26,8456,24],[9356,0,8457,6,"node"],[9356,10,8457,6,"node"],[9356,14,8457,10],[9356,16,8457,12],[9357,0,8456,24],[9357,9,8456,4],[9359,0,8460,4],[9359,12,8460,8],[9360,0,8461,6],[9360,14,8461,12,"node"],[9360,18,8461,16],[9360,21,8461,19,"fn"],[9360,23,8461,21],[9360,24,8461,22],[9360,36,8461,39],[9361,0,8461,39],[9361,16,8461,23,"node"],[9361,20,8461,39],[9361,91,8461,30],[9361,95,8461,39],[9362,0,8462,8,"abortSignal"],[9362,12,8462,8,"abortSignal"],[9362,23,8462,19],[9362,24,8462,20,"node"],[9362,28,8462,8],[9362,31,8462,27,"node"],[9362,35,8462,8],[9363,0,8463,8],[9363,18,8463,14,"abortSignal"],[9363,29,8463,8],[9364,0,8464,7],[9364,11,8461,21],[9364,12,8461,6],[9366,0,8466,6],[9366,14,8466,10],[9366,19,8466,15,"state"],[9366,24,8466,10],[9366,25,8466,21,"errors"],[9366,31,8466,10],[9366,32,8466,28,"length"],[9366,38,8466,10],[9366,41,8466,37,"oldState"],[9366,49,8466,45],[9366,50,8466,46,"errors"],[9366,56,8466,37],[9366,57,8466,53,"length"],[9366,63,8466,6],[9366,65,8466,61],[9367,0,8467,8],[9367,16,8467,14,"failState"],[9367,25,8467,23],[9367,28,8467,26],[9367,33,8467,31,"state"],[9367,38,8467,8],[9368,0,8468,8],[9368,17,8468,13,"state"],[9368,22,8468,8],[9368,25,8468,21,"oldState"],[9368,33,8468,8],[9369,0,8469,8],[9369,19,8469,15],[9370,0,8470,10,"node"],[9370,14,8470,10,"node"],[9370,18,8470,14],[9370,20,8470,10,"node"],[9370,24,8469,15],[9371,0,8471,10,"error"],[9371,14,8471,10,"error"],[9371,19,8471,15],[9371,21,8471,17,"failState"],[9371,30,8471,26],[9371,31,8471,27,"errors"],[9371,37,8471,17],[9371,38,8471,34,"oldState"],[9371,46,8471,42],[9371,47,8471,43,"errors"],[9371,53,8471,34],[9371,54,8471,50,"length"],[9371,60,8471,17],[9371,61,8469,15],[9372,0,8472,10,"thrown"],[9372,14,8472,10,"thrown"],[9372,20,8472,16],[9372,22,8472,18],[9372,27,8469,15],[9373,0,8473,10,"aborted"],[9373,14,8473,10,"aborted"],[9373,21,8473,17],[9373,23,8473,19],[9373,28,8469,15],[9374,0,8474,10,"failState"],[9374,14,8474,10,"failState"],[9374,23,8474,19],[9374,25,8474,10,"failState"],[9375,0,8469,15],[9375,13,8469,8],[9376,0,8476,7],[9378,0,8478,6],[9378,17,8478,13],[9379,0,8479,8,"node"],[9379,12,8479,8,"node"],[9379,16,8479,12],[9379,18,8479,8,"node"],[9379,22,8478,13],[9380,0,8480,8,"error"],[9380,12,8480,8,"error"],[9380,17,8480,13],[9380,19,8480,15],[9380,23,8478,13],[9381,0,8481,8,"thrown"],[9381,12,8481,8,"thrown"],[9381,18,8481,14],[9381,20,8481,16],[9381,25,8478,13],[9382,0,8482,8,"aborted"],[9382,12,8482,8,"aborted"],[9382,19,8482,15],[9382,21,8482,17],[9382,26,8478,13],[9383,0,8483,8,"failState"],[9383,12,8483,8,"failState"],[9383,21,8483,17],[9383,23,8483,19],[9384,0,8478,13],[9384,11,8478,6],[9385,0,8485,5],[9385,9,8460,4],[9385,10,8485,6],[9385,17,8485,13,"error"],[9385,22,8485,6],[9385,24,8485,20],[9386,0,8486,6],[9386,14,8486,12,"failState"],[9386,24,8486,21],[9386,27,8486,24],[9386,32,8486,29,"state"],[9386,37,8486,6],[9387,0,8487,6],[9387,15,8487,11,"state"],[9387,20,8487,6],[9387,23,8487,19,"oldState"],[9387,31,8487,6],[9389,0,8489,6],[9389,14,8489,10,"error"],[9389,19,8489,15],[9389,31,8489,27,"SyntaxError"],[9389,42,8489,6],[9389,44,8489,40],[9390,0,8490,8],[9390,19,8490,15],[9391,0,8491,10,"node"],[9391,14,8491,10,"node"],[9391,18,8491,14],[9391,20,8491,16],[9391,24,8490,15],[9392,0,8492,10,"error"],[9392,14,8492,10,"error"],[9392,19,8492,15],[9392,21,8492,10,"error"],[9392,26,8490,15],[9393,0,8493,10,"thrown"],[9393,14,8493,10,"thrown"],[9393,20,8493,16],[9393,22,8493,18],[9393,26,8490,15],[9394,0,8494,10,"aborted"],[9394,14,8494,10,"aborted"],[9394,21,8494,17],[9394,23,8494,19],[9394,28,8490,15],[9395,0,8495,10,"failState"],[9395,14,8495,10,"failState"],[9395,23,8495,19],[9395,25,8495,10,"failState"],[9396,0,8490,15],[9396,13,8490,8],[9397,0,8497,7],[9399,0,8499,6],[9399,14,8499,10,"error"],[9399,19,8499,15],[9399,24,8499,20,"abortSignal"],[9399,35,8499,6],[9399,37,8499,33],[9400,0,8500,8],[9400,19,8500,15],[9401,0,8501,10,"node"],[9401,14,8501,10,"node"],[9401,18,8501,14],[9401,20,8501,16,"abortSignal"],[9401,31,8501,27],[9401,32,8501,28,"node"],[9401,36,8500,15],[9402,0,8502,10,"error"],[9402,14,8502,10,"error"],[9402,19,8502,15],[9402,21,8502,17],[9402,25,8500,15],[9403,0,8503,10,"thrown"],[9403,14,8503,10,"thrown"],[9403,20,8503,16],[9403,22,8503,18],[9403,27,8500,15],[9404,0,8504,10,"aborted"],[9404,14,8504,10,"aborted"],[9404,21,8504,17],[9404,23,8504,19],[9404,27,8500,15],[9405,0,8505,10,"failState"],[9405,14,8505,10,"failState"],[9405,23,8505,19],[9405,25,8505,10,"failState"],[9406,0,8500,15],[9406,13,8500,8],[9407,0,8507,7],[9409,0,8509,6],[9409,16,8509,12,"error"],[9409,21,8509,6],[9410,0,8510,5],[9411,0,8511,3],[9415,4,8309,25,"Tokenizer"],[9415,13],[9417,6,8515,6,"Node"],[9417,10],[9418,0,8516,2],[9418,18,8516,14,"parser"],[9418,24,8516,2],[9418,26,8516,22,"pos"],[9418,29,8516,2],[9418,31,8516,27,"loc"],[9418,34,8516,2],[9418,36,8516,32],[9419,0,8516,32],[9421,0,8517,4],[9421,11,8517,9,"type"],[9421,15,8517,4],[9421,18,8517,16],[9421,20,8517,4],[9422,0,8518,4],[9422,11,8518,9,"start"],[9422,16,8518,4],[9422,19,8518,17,"pos"],[9422,22,8518,4],[9423,0,8519,4],[9423,11,8519,9,"end"],[9423,14,8519,4],[9423,17,8519,15],[9423,18,8519,4],[9424,0,8520,4],[9424,11,8520,9,"loc"],[9424,14,8520,4],[9424,17,8520,15],[9424,21,8520,19,"SourceLocation"],[9424,35,8520,15],[9424,36,8520,34,"loc"],[9424,39,8520,15],[9424,40,8520,4],[9425,0,8521,4],[9425,10,8521,8,"parser"],[9425,16,8521,14],[9425,20,8521,18,"parser"],[9425,26,8521,24],[9425,27,8521,25,"options"],[9425,34,8521,18],[9425,35,8521,33,"ranges"],[9425,41,8521,4],[9425,43,8521,41],[9425,48,8521,46,"range"],[9425,53,8521,41],[9425,56,8521,54],[9425,57,8521,55,"pos"],[9425,60,8521,54],[9425,62,8521,60],[9425,63,8521,54],[9425,64,8521,41],[9426,0,8522,4],[9426,10,8522,8,"parser"],[9426,16,8522,14],[9426,20,8522,18,"parser"],[9426,26,8522,24],[9426,27,8522,25,"filename"],[9426,35,8522,4],[9426,37,8522,35],[9426,42,8522,40,"loc"],[9426,45,8522,35],[9426,46,8522,44,"filename"],[9426,54,8522,35],[9426,57,8522,55,"parser"],[9426,63,8522,61],[9426,64,8522,62,"filename"],[9426,72,8522,35],[9427,0,8523,3],[9431,32,8525,12],[9432,0,8526,4],[9432,12,8526,10,"newNode"],[9432,19,8526,17],[9432,22,8526,20],[9432,26,8526,24,"Node"],[9432,30,8526,20],[9432,32,8526,4],[9433,0,8527,4],[9433,12,8527,10,"keys"],[9433,16,8527,14],[9433,19,8527,17,"Object"],[9433,25,8527,23],[9433,26,8527,24,"keys"],[9433,30,8527,17],[9433,31,8527,29],[9433,35,8527,17],[9433,36,8527,4],[9435,0,8529,4],[9435,13,8529,9],[9435,17,8529,13,"i"],[9435,18,8529,14],[9435,21,8529,17],[9435,22,8529,9],[9435,24,8529,20,"length"],[9435,30,8529,26],[9435,33,8529,29,"keys"],[9435,37,8529,33],[9435,38,8529,34,"length"],[9435,44,8529,4],[9435,46,8529,42,"i"],[9435,47,8529,43],[9435,50,8529,46,"length"],[9435,56,8529,4],[9435,58,8529,54,"i"],[9435,59,8529,55],[9435,61,8529,4],[9435,63,8529,59],[9436,0,8530,6],[9436,14,8530,12,"key"],[9436,17,8530,15],[9436,20,8530,18,"keys"],[9436,24,8530,22],[9436,25,8530,23,"i"],[9436,26,8530,22],[9436,27,8530,6],[9438,0,8532,6],[9438,14,8532,10,"key"],[9438,17,8532,13],[9438,22,8532,18],[9438,39,8532,10],[9438,43,8532,39,"key"],[9438,46,8532,42],[9438,51,8532,47],[9438,69,8532,10],[9438,73,8532,69,"key"],[9438,76,8532,72],[9438,81,8532,77],[9438,96,8532,6],[9438,98,8532,94],[9439,0,8533,8,"newNode"],[9439,12,8533,8,"newNode"],[9439,19,8533,15],[9439,20,8533,16,"key"],[9439,23,8533,15],[9439,24,8533,8],[9439,27,8533,23],[9439,32,8533,28,"key"],[9439,35,8533,23],[9439,36,8533,8],[9440,0,8534,7],[9441,0,8535,5],[9443,0,8537,4],[9443,15,8537,11,"newNode"],[9443,22,8537,4],[9444,0,8538,3],[9450,6,8542,6,"NodeUtils"],[9450,15],[9461,34,8543,14],[9462,0,8544,4],[9462,15,8544,11],[9462,19,8544,15,"Node"],[9462,23,8544,11],[9462,24,8544,20],[9462,28,8544,11],[9462,30,8544,26],[9462,35,8544,31,"state"],[9462,40,8544,26],[9462,41,8544,37,"start"],[9462,46,8544,11],[9462,48,8544,44],[9462,53,8544,49,"state"],[9462,58,8544,44],[9462,59,8544,55,"startLoc"],[9462,67,8544,11],[9462,68,8544,4],[9463,0,8545,3],[9466,34,8547,14,"pos"],[9466,37],[9466,39,8547,19,"loc"],[9466,42],[9466,44,8547,24],[9467,0,8548,4],[9467,15,8548,11],[9467,19,8548,15,"Node"],[9467,23,8548,11],[9467,24,8548,20],[9467,28,8548,11],[9467,30,8548,26,"pos"],[9467,33,8548,11],[9467,35,8548,31,"loc"],[9467,38,8548,11],[9467,39,8548,4],[9468,0,8549,3],[9471,38,8551,18,"type"],[9471,42],[9471,44,8551,24],[9472,0,8552,4],[9472,15,8552,11],[9472,20,8552,16,"startNodeAt"],[9472,31,8552,11],[9472,32,8552,28,"type"],[9472,36,8552,32],[9472,37,8552,33,"start"],[9472,42,8552,11],[9472,44,8552,40,"type"],[9472,48,8552,44],[9472,49,8552,45,"loc"],[9472,52,8552,40],[9472,53,8552,49,"start"],[9472,58,8552,11],[9472,59,8552,4],[9473,0,8553,3],[9476,33,8555,13,"node"],[9476,37],[9476,39,8555,19,"type"],[9476,43],[9476,45,8555,25],[9477,0,8556,4],[9477,15,8556,11],[9477,20,8556,16,"finishNodeAt"],[9477,32,8556,11],[9477,33,8556,29,"node"],[9477,37,8556,11],[9477,39,8556,35,"type"],[9477,43,8556,11],[9477,45,8556,41],[9477,50,8556,46,"state"],[9477,55,8556,41],[9477,56,8556,52,"lastTokEnd"],[9477,66,8556,11],[9477,68,8556,64],[9477,73,8556,69,"state"],[9477,78,8556,64],[9477,79,8556,75,"lastTokEndLoc"],[9477,92,8556,11],[9477,93,8556,4],[9478,0,8557,3],[9481,35,8559,15,"node"],[9481,39],[9481,41,8559,21,"type"],[9481,45],[9481,47,8559,27,"pos"],[9481,50],[9481,52,8559,32,"loc"],[9481,55],[9481,57,8559,37],[9482,0,8561,4,"node"],[9482,8,8561,4,"node"],[9482,12,8561,8],[9482,13,8561,9,"type"],[9482,17,8561,4],[9482,20,8561,16,"type"],[9482,24,8561,4],[9483,0,8562,4,"node"],[9483,8,8562,4,"node"],[9483,12,8562,8],[9483,13,8562,9,"end"],[9483,16,8562,4],[9483,19,8562,15,"pos"],[9483,22,8562,4],[9484,0,8563,4,"node"],[9484,8,8563,4,"node"],[9484,12,8563,8],[9484,13,8563,9,"loc"],[9484,16,8563,4],[9484,17,8563,13,"end"],[9484,20,8563,4],[9484,23,8563,19,"loc"],[9484,26,8563,4],[9485,0,8564,4],[9485,12,8564,8],[9485,17,8564,13,"options"],[9485,24,8564,8],[9485,25,8564,21,"ranges"],[9485,31,8564,4],[9485,33,8564,29,"node"],[9485,37,8564,33],[9485,38,8564,34,"range"],[9485,43,8564,29],[9485,44,8564,40],[9485,45,8564,29],[9485,49,8564,45,"pos"],[9485,52,8564,29],[9486,0,8565,4],[9486,13,8565,9,"processComment"],[9486,27,8565,4],[9486,28,8565,24,"node"],[9486,32,8565,4],[9487,0,8566,4],[9487,15,8566,11,"node"],[9487,19,8566,4],[9488,0,8567,3],[9491,41,8569,21,"node"],[9491,45],[9491,47,8569,27,"start"],[9491,52],[9491,54,8569,34,"startLoc"],[9491,62],[9491,64,8569,44],[9492,0,8570,4,"node"],[9492,8,8570,4,"node"],[9492,12,8570,8],[9492,13,8570,9,"start"],[9492,18,8570,4],[9492,21,8570,17,"start"],[9492,26,8570,4],[9493,0,8571,4,"node"],[9493,8,8571,4,"node"],[9493,12,8571,8],[9493,13,8571,9,"loc"],[9493,16,8571,4],[9493,17,8571,13,"start"],[9493,22,8571,4],[9493,25,8571,21,"startLoc"],[9493,33,8571,4],[9494,0,8572,4],[9494,12,8572,8],[9494,17,8572,13,"options"],[9494,24,8572,8],[9494,25,8572,21,"ranges"],[9494,31,8572,4],[9494,33,8572,29,"node"],[9494,37,8572,33],[9494,38,8572,34,"range"],[9494,43,8572,29],[9494,44,8572,40],[9494,45,8572,29],[9494,49,8572,45,"start"],[9494,54,8572,29],[9495,0,8573,3],[9498,39,8575,19,"node"],[9498,43],[9498,45,8575,89],[9499,0,8575,89],[9499,12,8575,25,"end"],[9499,15,8575,89],[9499,86,8575,31],[9499,91,8575,36,"state"],[9499,96,8575,31],[9499,97,8575,42,"lastTokEnd"],[9499,107,8575,89],[9500,0,8575,89],[9500,12,8575,54,"endLoc"],[9500,18,8575,89],[9500,89,8575,63],[9500,94,8575,68,"state"],[9500,99,8575,63],[9500,100,8575,74,"lastTokEndLoc"],[9500,113,8575,89],[9501,0,8576,4,"node"],[9501,8,8576,4,"node"],[9501,12,8576,8],[9501,13,8576,9,"end"],[9501,16,8576,4],[9501,19,8576,15,"end"],[9501,22,8576,4],[9502,0,8577,4,"node"],[9502,8,8577,4,"node"],[9502,12,8577,8],[9502,13,8577,9,"loc"],[9502,16,8577,4],[9502,17,8577,13,"end"],[9502,20,8577,4],[9502,23,8577,19,"endLoc"],[9502,29,8577,4],[9503,0,8578,4],[9503,12,8578,8],[9503,17,8578,13,"options"],[9503,24,8578,8],[9503,25,8578,21,"ranges"],[9503,31,8578,4],[9503,33,8578,29,"node"],[9503,37,8578,33],[9503,38,8578,34,"range"],[9503,43,8578,29],[9503,44,8578,40],[9503,45,8578,29],[9503,49,8578,45,"end"],[9503,52,8578,29],[9504,0,8579,3],[9507,49,8581,29,"node"],[9507,53],[9507,55,8581,35,"locationNode"],[9507,67],[9507,69,8581,49],[9508,0,8582,4],[9508,13,8582,9,"resetStartLocation"],[9508,31,8582,4],[9508,32,8582,28,"node"],[9508,36,8582,4],[9508,38,8582,34,"locationNode"],[9508,50,8582,46],[9508,51,8582,47,"start"],[9508,56,8582,4],[9508,58,8582,54,"locationNode"],[9508,70,8582,66],[9508,71,8582,67,"loc"],[9508,74,8582,54],[9508,75,8582,71,"start"],[9508,80,8582,4],[9509,0,8583,3],[9513,4,8542,24,"UtilParser"],[9513,14],[9515,0,8587,0],[9515,6,8587,6,"unwrapParenthesizedExpression"],[9515,35,8587,35],[9515,38,8587,38],[9515,47,8587,6,"unwrapParenthesizedExpression"],[9515,76,8587,38],[9515,77,8587,38,"node"],[9515,81,8587,42],[9515,83,8587,46],[9516,0,8588,2],[9516,11,8588,9,"node"],[9516,15,8588,13],[9516,16,8588,14,"type"],[9516,20,8588,9],[9516,25,8588,23],[9516,50,8588,9],[9516,53,8588,51,"unwrapParenthesizedExpression"],[9516,82,8588,80],[9516,83,8588,81,"node"],[9516,87,8588,85],[9516,88,8588,86,"expression"],[9516,98,8588,80],[9516,99,8588,9],[9516,102,8588,100,"node"],[9516,106,8588,2],[9517,0,8589,1],[9517,3,8587,0],[9519,6,8591,6,"LValParser"],[9519,16],[9530,35,8592,15,"node"],[9530,39],[9530,41,8592,21,"isBinding"],[9530,50],[9530,52,8592,32,"contextDescription"],[9530,70],[9530,72,8592,52],[9531,0,8593,4],[9531,12,8593,8,"_node$extra3"],[9531,24,8593,4],[9533,0,8595,4],[9533,12,8595,8,"node"],[9533,16,8595,4],[9533,18,8595,14],[9534,0,8596,6],[9534,14,8596,10,"_node$extra"],[9534,25,8596,6],[9536,0,8598,6],[9536,14,8598,10],[9536,19,8598,15,"options"],[9536,26,8598,10],[9536,27,8598,23,"createParenthesizedExpressions"],[9536,57,8598,10],[9536,61,8598,57,"node"],[9536,65,8598,61],[9536,66,8598,62,"type"],[9536,70,8598,57],[9536,75,8598,71],[9536,100,8598,10],[9536,105,8598,101],[9536,106,8598,102,"_node$extra"],[9536,117,8598,113],[9536,120,8598,116,"node"],[9536,124,8598,120],[9536,125,8598,121,"extra"],[9536,130,8598,101],[9536,135,8598,131],[9536,139,8598,101],[9536,142,8598,138],[9536,147,8598,143],[9536,148,8598,101],[9536,151,8598,147,"_node$extra"],[9536,162,8598,158],[9536,163,8598,159,"parenthesized"],[9536,176,8598,10],[9536,177,8598,6],[9536,179,8598,175],[9537,0,8599,8],[9537,16,8599,14,"parenthesized"],[9537,29,8599,27],[9537,32,8599,30,"unwrapParenthesizedExpression"],[9537,61,8599,59],[9537,62,8599,60,"node"],[9537,66,8599,59],[9537,67,8599,8],[9539,0,8601,8],[9539,16,8601,12,"parenthesized"],[9539,29,8601,25],[9539,30,8601,26,"type"],[9539,34,8601,12],[9539,39,8601,35],[9539,51,8601,12],[9539,55,8601,51,"parenthesized"],[9539,68,8601,64],[9539,69,8601,65,"type"],[9539,73,8601,51],[9539,78,8601,74],[9539,96,8601,8],[9539,98,8601,94],[9540,0,8602,10],[9540,19,8602,15,"raise"],[9540,24,8602,10],[9540,25,8602,21,"node"],[9540,29,8602,25],[9540,30,8602,26,"start"],[9540,35,8602,10],[9540,37,8602,33],[9540,79,8602,10],[9541,0,8603,9],[9542,0,8604,7],[9544,0,8606,6],[9544,18,8606,14,"node"],[9544,22,8606,18],[9544,23,8606,19,"type"],[9544,27,8606,6],[9545,0,8607,8],[9545,17,8607,13],[9545,29,8607,8],[9546,0,8608,8],[9546,17,8608,13],[9546,32,8608,8],[9547,0,8609,8],[9547,17,8609,13],[9547,31,8609,8],[9548,0,8610,8],[9548,17,8610,13],[9548,36,8610,8],[9549,0,8611,10],[9551,0,8613,8],[9551,17,8613,13],[9551,35,8613,8],[9552,0,8614,10,"node"],[9552,14,8614,10,"node"],[9552,18,8614,14],[9552,19,8614,15,"type"],[9552,23,8614,10],[9552,26,8614,22],[9552,41,8614,10],[9554,0,8616,10],[9554,19,8616,15],[9554,23,8616,19,"i"],[9554,24,8616,20],[9554,27,8616,23],[9554,28,8616,15],[9554,30,8616,26,"length"],[9554,36,8616,32],[9554,39,8616,35,"node"],[9554,43,8616,39],[9554,44,8616,40,"properties"],[9554,54,8616,35],[9554,55,8616,51,"length"],[9554,61,8616,15],[9554,63,8616,59,"last"],[9554,69,8616,63],[9554,72,8616,66,"length"],[9554,78,8616,72],[9554,81,8616,75],[9554,82,8616,10],[9554,84,8616,78,"i"],[9554,85,8616,79],[9554,88,8616,82,"length"],[9554,94,8616,10],[9554,96,8616,90,"i"],[9554,97,8616,91],[9554,99,8616,10],[9554,101,8616,95],[9555,0,8617,12],[9555,20,8617,16,"_node$extra2"],[9555,32,8617,12],[9557,0,8619,12],[9557,20,8619,18,"prop"],[9557,24,8619,22],[9557,27,8619,25,"node"],[9557,31,8619,29],[9557,32,8619,30,"properties"],[9557,42,8619,25],[9557,43,8619,41,"i"],[9557,44,8619,25],[9557,45,8619,12],[9558,0,8620,12],[9558,20,8620,18,"isLast"],[9558,26,8620,24],[9558,29,8620,27,"i"],[9558,30,8620,28],[9558,35,8620,33,"last"],[9558,41,8620,12],[9559,0,8621,12],[9559,21,8621,17,"toAssignableObjectExpressionProp"],[9559,53,8621,12],[9559,54,8621,50,"prop"],[9559,58,8621,12],[9559,60,8621,56,"isBinding"],[9559,69,8621,12],[9559,71,8621,67,"isLast"],[9559,77,8621,12],[9561,0,8623,12],[9561,20,8623,16,"isLast"],[9561,26,8623,22],[9561,30,8623,26,"prop"],[9561,34,8623,30],[9561,35,8623,31,"type"],[9561,39,8623,26],[9561,44,8623,40],[9561,57,8623,16],[9561,62,8623,58],[9561,63,8623,59,"_node$extra2"],[9561,75,8623,71],[9561,78,8623,74,"node"],[9561,82,8623,78],[9561,83,8623,79,"extra"],[9561,88,8623,58],[9561,93,8623,89],[9561,97,8623,58],[9561,100,8623,96],[9561,105,8623,101],[9561,106,8623,58],[9561,109,8623,105,"_node$extra2"],[9561,121,8623,117],[9561,122,8623,118,"trailingComma"],[9561,135,8623,16],[9561,136,8623,12],[9561,138,8623,134],[9562,0,8624,14],[9562,23,8624,19,"raiseRestNotLast"],[9562,39,8624,14],[9562,40,8624,36,"node"],[9562,44,8624,40],[9562,45,8624,41,"extra"],[9562,50,8624,36],[9562,51,8624,47,"trailingComma"],[9562,64,8624,14],[9563,0,8625,13],[9564,0,8626,11],[9566,0,8628,10],[9568,0,8630,8],[9568,17,8630,13],[9568,33,8630,8],[9569,0,8631,10],[9569,19,8631,15,"toAssignable"],[9569,31,8631,10],[9569,32,8631,28,"node"],[9569,36,8631,32],[9569,37,8631,33,"value"],[9569,42,8631,10],[9569,44,8631,40,"isBinding"],[9569,53,8631,10],[9569,55,8631,51,"contextDescription"],[9569,73,8631,10],[9570,0,8632,10],[9572,0,8634,8],[9572,17,8634,13],[9572,32,8634,8],[9573,0,8635,10],[9574,0,8636,12],[9574,21,8636,17,"checkToRestConversion"],[9574,42,8636,12],[9574,43,8636,39,"node"],[9574,47,8636,12],[9575,0,8637,12,"node"],[9575,16,8637,12,"node"],[9575,20,8637,16],[9575,21,8637,17,"type"],[9575,25,8637,12],[9575,28,8637,24],[9575,41,8637,12],[9576,0,8638,12],[9576,20,8638,18,"arg"],[9576,23,8638,21],[9576,26,8638,24,"node"],[9576,30,8638,28],[9576,31,8638,29,"argument"],[9576,39,8638,12],[9577,0,8639,12],[9577,21,8639,17,"toAssignable"],[9577,33,8639,12],[9577,34,8639,30,"arg"],[9577,37,8639,12],[9577,39,8639,35,"isBinding"],[9577,48,8639,12],[9577,50,8639,46,"contextDescription"],[9577,68,8639,12],[9578,0,8640,12],[9579,0,8641,11],[9581,0,8643,8],[9581,17,8643,13],[9581,34,8643,8],[9582,0,8644,10,"node"],[9582,14,8644,10,"node"],[9582,18,8644,14],[9582,19,8644,15,"type"],[9582,23,8644,10],[9582,26,8644,22],[9582,40,8644,10],[9583,0,8645,10],[9583,19,8645,15,"toAssignableList"],[9583,35,8645,10],[9583,36,8645,32,"node"],[9583,40,8645,36],[9583,41,8645,37,"elements"],[9583,49,8645,10],[9583,51,8645,47,"isBinding"],[9583,60,8645,10],[9583,62,8645,58,"contextDescription"],[9583,80,8645,10],[9583,82,8645,78],[9583,83,8645,79,"_node$extra3"],[9583,95,8645,91],[9583,98,8645,94,"node"],[9583,102,8645,98],[9583,103,8645,99,"extra"],[9583,108,8645,78],[9583,113,8645,109],[9583,117,8645,78],[9583,120,8645,116],[9583,125,8645,121],[9583,126,8645,78],[9583,129,8645,125,"_node$extra3"],[9583,141,8645,137],[9583,142,8645,138,"trailingComma"],[9583,155,8645,10],[9584,0,8646,10],[9586,0,8648,8],[9586,17,8648,13],[9586,39,8648,8],[9587,0,8649,10],[9587,18,8649,14,"node"],[9587,22,8649,18],[9587,23,8649,19,"operator"],[9587,31,8649,14],[9587,36,8649,32],[9587,39,8649,10],[9587,41,8649,37],[9588,0,8650,12],[9588,21,8650,17,"raise"],[9588,26,8650,12],[9588,27,8650,23,"node"],[9588,31,8650,27],[9588,32,8650,28,"left"],[9588,36,8650,23],[9588,37,8650,33,"end"],[9588,40,8650,12],[9588,42,8650,38],[9588,103,8650,12],[9589,0,8651,11],[9591,0,8653,10,"node"],[9591,14,8653,10,"node"],[9591,18,8653,14],[9591,19,8653,15,"type"],[9591,23,8653,10],[9591,26,8653,22],[9591,45,8653,10],[9592,0,8654,10],[9592,21,8654,17,"node"],[9592,25,8654,21],[9592,26,8654,22,"operator"],[9592,34,8654,10],[9593,0,8655,10],[9593,19,8655,15,"toAssignable"],[9593,31,8655,10],[9593,32,8655,28,"node"],[9593,36,8655,32],[9593,37,8655,33,"left"],[9593,41,8655,10],[9593,43,8655,39,"isBinding"],[9593,52,8655,10],[9593,54,8655,50,"contextDescription"],[9593,72,8655,10],[9594,0,8656,10],[9596,0,8658,8],[9596,17,8658,13],[9596,42,8658,8],[9597,0,8659,10,"node"],[9597,14,8659,10,"node"],[9597,18,8659,14],[9597,19,8659,15,"expression"],[9597,29,8659,10],[9597,32,8659,28],[9597,37,8659,33,"toAssignable"],[9597,49,8659,28],[9597,50,8659,46,"node"],[9597,54,8659,50],[9597,55,8659,51,"expression"],[9597,65,8659,28],[9597,67,8659,63,"isBinding"],[9597,76,8659,28],[9597,78,8659,74,"contextDescription"],[9597,96,8659,28],[9597,97,8659,10],[9598,0,8660,10],[9599,0,8606,6],[9600,0,8662,5],[9602,0,8664,4],[9602,15,8664,11,"node"],[9602,19,8664,4],[9603,0,8665,3],[9606,55,8667,35,"prop"],[9606,59],[9606,61,8667,41,"isBinding"],[9606,70],[9606,72,8667,52,"isLast"],[9606,78],[9606,80,8667,60],[9607,0,8668,4],[9607,12,8668,8,"prop"],[9607,16,8668,12],[9607,17,8668,13,"type"],[9607,21,8668,8],[9607,26,8668,22],[9607,40,8668,4],[9607,42,8668,38],[9608,0,8669,6],[9608,14,8669,12,"error"],[9608,19,8669,17],[9608,22,8669,20,"prop"],[9608,26,8669,24],[9608,27,8669,25,"kind"],[9608,31,8669,20],[9608,36,8669,34],[9608,41,8669,20],[9608,45,8669,43,"prop"],[9608,49,8669,47],[9608,50,8669,48,"kind"],[9608,54,8669,43],[9608,59,8669,57],[9608,64,8669,20],[9608,67,8669,65],[9608,114,8669,20],[9608,117,8669,115],[9608,155,8669,6],[9609,0,8670,6],[9609,15,8670,11,"raise"],[9609,20,8670,6],[9609,21,8670,17,"prop"],[9609,25,8670,21],[9609,26,8670,22,"key"],[9609,29,8670,17],[9609,30,8670,26,"start"],[9609,35,8670,6],[9609,37,8670,33,"error"],[9609,42,8670,6],[9610,0,8671,5],[9610,9,8668,4],[9610,15,8671,11],[9610,19,8671,15,"prop"],[9610,23,8671,19],[9610,24,8671,20,"type"],[9610,28,8671,15],[9610,33,8671,29],[9610,48,8671,15],[9610,52,8671,48],[9610,53,8671,49,"isLast"],[9610,59,8671,11],[9610,61,8671,57],[9611,0,8672,6],[9611,15,8672,11,"raiseRestNotLast"],[9611,31,8672,6],[9611,32,8672,28,"prop"],[9611,36,8672,32],[9611,37,8672,33,"start"],[9611,42,8672,6],[9612,0,8673,5],[9612,9,8671,11],[9612,15,8673,11],[9613,0,8674,6],[9613,15,8674,11,"toAssignable"],[9613,27,8674,6],[9613,28,8674,24,"prop"],[9613,32,8674,6],[9613,34,8674,30,"isBinding"],[9613,43,8674,6],[9613,45,8674,41],[9613,75,8674,6],[9614,0,8675,5],[9615,0,8676,3],[9618,39,8678,19,"exprList"],[9618,47],[9618,49,8678,29,"isBinding"],[9618,58],[9618,60,8678,40,"contextDescription"],[9618,78],[9618,80,8678,60,"trailingCommaPos"],[9618,96],[9618,98,8678,78],[9619,0,8679,4],[9619,12,8679,8,"end"],[9619,15,8679,11],[9619,18,8679,14,"exprList"],[9619,26,8679,22],[9619,27,8679,23,"length"],[9619,33,8679,4],[9621,0,8681,4],[9621,12,8681,8,"end"],[9621,15,8681,4],[9621,17,8681,13],[9622,0,8682,6],[9622,14,8682,12,"last"],[9622,20,8682,16],[9622,23,8682,19,"exprList"],[9622,31,8682,27],[9622,32,8682,28,"end"],[9622,35,8682,31],[9622,38,8682,34],[9622,39,8682,27],[9622,40,8682,6],[9624,0,8684,6],[9624,14,8684,10,"last"],[9624,20,8684,14],[9624,24,8684,18,"last"],[9624,30,8684,22],[9624,31,8684,23,"type"],[9624,35,8684,18],[9624,40,8684,32],[9624,53,8684,6],[9624,55,8684,47],[9625,0,8685,8],[9625,14,8685,10,"end"],[9625,17,8685,8],[9626,0,8686,7],[9626,11,8684,6],[9626,17,8686,13],[9626,21,8686,17,"last"],[9626,27,8686,21],[9626,31,8686,25,"last"],[9626,37,8686,29],[9626,38,8686,30,"type"],[9626,42,8686,25],[9626,47,8686,39],[9626,62,8686,13],[9626,64,8686,56],[9627,0,8687,8,"last"],[9627,12,8687,8,"last"],[9627,18,8687,12],[9627,19,8687,13,"type"],[9627,23,8687,8],[9627,26,8687,20],[9627,39,8687,8],[9628,0,8688,8],[9628,16,8688,14,"arg"],[9628,19,8688,17],[9628,22,8688,20,"last"],[9628,28,8688,24],[9628,29,8688,25,"argument"],[9628,37,8688,8],[9629,0,8689,8],[9629,17,8689,13,"toAssignable"],[9629,29,8689,8],[9629,30,8689,26,"arg"],[9629,33,8689,8],[9629,35,8689,31,"isBinding"],[9629,44,8689,8],[9629,46,8689,42,"contextDescription"],[9629,64,8689,8],[9631,0,8691,8],[9631,16,8691,12,"arg"],[9631,19,8691,15],[9631,20,8691,16,"type"],[9631,24,8691,12],[9631,29,8691,25],[9631,41,8691,12],[9631,45,8691,41,"arg"],[9631,48,8691,44],[9631,49,8691,45,"type"],[9631,53,8691,41],[9631,58,8691,54],[9631,76,8691,12],[9631,80,8691,76,"arg"],[9631,83,8691,79],[9631,84,8691,80,"type"],[9631,88,8691,76],[9631,93,8691,89],[9631,107,8691,12],[9631,111,8691,107,"arg"],[9631,114,8691,110],[9631,115,8691,111,"type"],[9631,119,8691,107],[9631,124,8691,120],[9631,139,8691,8],[9631,141,8691,137],[9632,0,8692,10],[9632,19,8692,15,"unexpected"],[9632,29,8692,10],[9632,30,8692,26,"arg"],[9632,33,8692,29],[9632,34,8692,30,"start"],[9632,39,8692,10],[9633,0,8693,9],[9635,0,8695,8],[9635,16,8695,12,"trailingCommaPos"],[9635,32,8695,8],[9635,34,8695,30],[9636,0,8696,10],[9636,19,8696,15,"raiseTrailingCommaAfterRest"],[9636,46,8696,10],[9636,47,8696,43,"trailingCommaPos"],[9636,63,8696,10],[9637,0,8697,9],[9639,0,8699,8],[9639,14,8699,10,"end"],[9639,17,8699,8],[9640,0,8700,7],[9641,0,8701,5],[9643,0,8703,4],[9643,13,8703,9],[9643,17,8703,13,"i"],[9643,18,8703,14],[9643,21,8703,17],[9643,22,8703,4],[9643,24,8703,20,"i"],[9643,25,8703,21],[9643,28,8703,24,"end"],[9643,31,8703,4],[9643,33,8703,29,"i"],[9643,34,8703,30],[9643,36,8703,4],[9643,38,8703,34],[9644,0,8704,6],[9644,14,8704,12,"elt"],[9644,17,8704,15],[9644,20,8704,18,"exprList"],[9644,28,8704,26],[9644,29,8704,27,"i"],[9644,30,8704,26],[9644,31,8704,6],[9646,0,8706,6],[9646,14,8706,10,"elt"],[9646,17,8706,6],[9646,19,8706,15],[9647,0,8707,8],[9647,17,8707,13,"toAssignable"],[9647,29,8707,8],[9647,30,8707,26,"elt"],[9647,33,8707,8],[9647,35,8707,31,"isBinding"],[9647,44,8707,8],[9647,46,8707,42,"contextDescription"],[9647,64,8707,8],[9649,0,8709,8],[9649,16,8709,12,"elt"],[9649,19,8709,15],[9649,20,8709,16,"type"],[9649,24,8709,12],[9649,29,8709,25],[9649,42,8709,8],[9649,44,8709,40],[9650,0,8710,10],[9650,19,8710,15,"raiseRestNotLast"],[9650,35,8710,10],[9650,36,8710,32,"elt"],[9650,39,8710,35],[9650,40,8710,36,"start"],[9650,45,8710,10],[9651,0,8711,9],[9652,0,8712,7],[9653,0,8713,5],[9655,0,8715,4],[9655,15,8715,11,"exprList"],[9655,23,8715,4],[9656,0,8716,3],[9659,39,8718,19,"exprList"],[9659,47],[9659,49,8718,29,"isParenthesizedExpr"],[9659,68],[9659,70,8718,50],[9660,0,8719,4],[9660,15,8719,11,"exprList"],[9660,23,8719,4],[9661,0,8720,3],[9664,43,8722,23,"exprList"],[9664,51],[9664,53,8722,33,"isParenthesizedExpr"],[9664,72],[9664,74,8722,54],[9665,0,8723,4],[9665,13,8723,9,"toReferencedList"],[9665,29,8723,4],[9665,30,8723,26,"exprList"],[9665,38,8723,4],[9665,40,8723,36,"isParenthesizedExpr"],[9665,59,8723,4],[9667,0,8725,4],[9667,13,8725,9],[9667,17,8725,13,"_i"],[9667,19,8725,15],[9667,22,8725,18],[9667,23,8725,4],[9667,25,8725,21,"_i"],[9667,27,8725,23],[9667,30,8725,26,"exprList"],[9667,38,8725,34],[9667,39,8725,35,"length"],[9667,45,8725,4],[9667,47,8725,43,"_i"],[9667,49,8725,45],[9667,51,8725,4],[9667,53,8725,49],[9668,0,8726,6],[9668,14,8726,12,"expr"],[9668,18,8726,16],[9668,21,8726,19,"exprList"],[9668,29,8726,27],[9668,30,8726,28,"_i"],[9668,32,8726,27],[9668,33,8726,6],[9670,0,8728,6],[9670,14,8728,10,"expr"],[9670,18,8728,14],[9670,22,8728,18,"expr"],[9670,26,8728,22],[9670,27,8728,23,"type"],[9670,31,8728,18],[9670,36,8728,32],[9670,53,8728,6],[9670,55,8728,51],[9671,0,8729,8],[9671,17,8729,13,"toReferencedListDeep"],[9671,37,8729,8],[9671,38,8729,34,"expr"],[9671,42,8729,38],[9671,43,8729,39,"elements"],[9671,51,8729,8],[9672,0,8730,7],[9673,0,8731,5],[9674,0,8732,3],[9677,34,8734,14,"refShorthandDefaultPos"],[9677,56],[9677,58,8734,38,"refNeedsArrowPos"],[9677,74],[9677,76,8734,56],[9678,0,8735,4],[9678,12,8735,10,"node"],[9678,16,8735,14],[9678,19,8735,17],[9678,24,8735,22,"startNode"],[9678,33,8735,17],[9678,35,8735,4],[9679,0,8736,4],[9679,13,8736,9,"next"],[9679,17,8736,4],[9680,0,8737,4,"node"],[9680,8,8737,4,"node"],[9680,12,8737,8],[9680,13,8737,9,"argument"],[9680,21,8737,4],[9680,24,8737,20],[9680,29,8737,25,"parseMaybeAssign"],[9680,45,8737,20],[9680,46,8737,42],[9680,51,8737,20],[9680,53,8737,49,"refShorthandDefaultPos"],[9680,75,8737,20],[9680,77,8737,73,"undefined"],[9680,86,8737,20],[9680,88,8737,84,"refNeedsArrowPos"],[9680,104,8737,20],[9680,105,8737,4],[9681,0,8738,4],[9681,15,8738,11],[9681,20,8738,16,"finishNode"],[9681,30,8738,11],[9681,31,8738,27,"node"],[9681,35,8738,11],[9681,37,8738,33],[9681,52,8738,11],[9681,53,8738,4],[9682,0,8739,3],[9685,41,8741,21],[9686,0,8742,4],[9686,12,8742,10,"node"],[9686,16,8742,14],[9686,19,8742,17],[9686,24,8742,22,"startNode"],[9686,33,8742,17],[9686,35,8742,4],[9687,0,8743,4],[9687,13,8743,9,"next"],[9687,17,8743,4],[9688,0,8744,4,"node"],[9688,8,8744,4,"node"],[9688,12,8744,8],[9688,13,8744,9,"argument"],[9688,21,8744,4],[9688,24,8744,20],[9688,29,8744,25,"parseBindingAtom"],[9688,45,8744,20],[9688,47,8744,4],[9689,0,8745,4],[9689,15,8745,11],[9689,20,8745,16,"finishNode"],[9689,30,8745,11],[9689,31,8745,27,"node"],[9689,35,8745,11],[9689,37,8745,33],[9689,50,8745,11],[9689,51,8745,4],[9690,0,8746,3],[9693,41,8748,21],[9694,0,8749,4],[9694,16,8749,12],[9694,21,8749,17,"state"],[9694,26,8749,12],[9694,27,8749,23,"type"],[9694,31,8749,4],[9695,0,8750,6],[9695,15,8750,11,"types"],[9695,20,8750,16],[9695,21,8750,17,"bracketL"],[9695,29,8750,6],[9696,0,8751,8],[9697,0,8752,10],[9697,18,8752,16,"node"],[9697,22,8752,20],[9697,25,8752,23],[9697,30,8752,28,"startNode"],[9697,39,8752,23],[9697,41,8752,10],[9698,0,8753,10],[9698,19,8753,15,"next"],[9698,23,8753,10],[9699,0,8754,10,"node"],[9699,14,8754,10,"node"],[9699,18,8754,14],[9699,19,8754,15,"elements"],[9699,27,8754,10],[9699,30,8754,26],[9699,35,8754,31,"parseBindingList"],[9699,51,8754,26],[9699,52,8754,48,"types"],[9699,57,8754,53],[9699,58,8754,54,"bracketR"],[9699,66,8754,26],[9699,68,8754,64],[9699,70,8754,26],[9699,72,8754,68],[9699,76,8754,26],[9699,77,8754,10],[9700,0,8755,10],[9700,21,8755,17],[9700,26,8755,22,"finishNode"],[9700,36,8755,17],[9700,37,8755,33,"node"],[9700,41,8755,17],[9700,43,8755,39],[9700,57,8755,17],[9700,58,8755,10],[9701,0,8756,9],[9703,0,8758,6],[9703,15,8758,11,"types"],[9703,20,8758,16],[9703,21,8758,17,"braceL"],[9703,27,8758,6],[9704,0,8759,8],[9704,19,8759,15],[9704,24,8759,20,"parseObj"],[9704,32,8759,15],[9704,33,8759,29],[9704,37,8759,15],[9704,38,8759,8],[9705,0,8749,4],[9707,0,8762,4],[9707,15,8762,11],[9707,20,8762,16,"parseIdentifier"],[9707,35,8762,11],[9707,37,8762,4],[9708,0,8763,3],[9711,39,8765,19,"close"],[9711,44],[9711,46,8765,26,"closeCharCode"],[9711,59],[9711,61,8765,41,"allowEmpty"],[9711,71],[9711,73,8765,53,"allowModifiers"],[9711,87],[9711,89,8765,69],[9712,0,8766,4],[9712,12,8766,10,"elts"],[9712,16,8766,14],[9712,19,8766,17],[9712,21,8766,4],[9713,0,8767,4],[9713,12,8767,8,"first"],[9713,17,8767,13],[9713,20,8767,16],[9713,24,8767,4],[9715,0,8769,4],[9715,15,8769,11],[9715,16,8769,12],[9715,21,8769,17,"eat"],[9715,24,8769,12],[9715,25,8769,21,"close"],[9715,30,8769,12],[9715,31,8769,4],[9715,33,8769,29],[9716,0,8770,6],[9716,14,8770,10,"first"],[9716,19,8770,6],[9716,21,8770,17],[9717,0,8771,8,"first"],[9717,12,8771,8,"first"],[9717,17,8771,13],[9717,20,8771,16],[9717,25,8771,8],[9718,0,8772,7],[9718,11,8770,6],[9718,17,8772,13],[9719,0,8773,8],[9719,17,8773,13,"expect"],[9719,23,8773,8],[9719,24,8773,20,"types"],[9719,29,8773,25],[9719,30,8773,26,"comma"],[9719,35,8773,8],[9720,0,8774,7],[9722,0,8776,6],[9722,14,8776,10,"allowEmpty"],[9722,24,8776,20],[9722,28,8776,24],[9722,33,8776,29,"match"],[9722,38,8776,24],[9722,39,8776,35,"types"],[9722,44,8776,40],[9722,45,8776,41,"comma"],[9722,50,8776,24],[9722,51,8776,6],[9722,53,8776,49],[9723,0,8777,8,"elts"],[9723,12,8777,8,"elts"],[9723,16,8777,12],[9723,17,8777,13,"push"],[9723,21,8777,8],[9723,22,8777,18],[9723,26,8777,8],[9724,0,8778,7],[9724,11,8776,6],[9724,17,8778,13],[9724,21,8778,17],[9724,26,8778,22,"eat"],[9724,29,8778,17],[9724,30,8778,26,"close"],[9724,35,8778,17],[9724,36,8778,13],[9724,38,8778,34],[9725,0,8779,8],[9726,0,8780,7],[9726,11,8778,13],[9726,17,8780,13],[9726,21,8780,17],[9726,26,8780,22,"match"],[9726,31,8780,17],[9726,32,8780,28,"types"],[9726,37,8780,33],[9726,38,8780,34,"ellipsis"],[9726,46,8780,17],[9726,47,8780,13],[9726,49,8780,45],[9727,0,8781,8,"elts"],[9727,12,8781,8,"elts"],[9727,16,8781,12],[9727,17,8781,13,"push"],[9727,21,8781,8],[9727,22,8781,18],[9727,27,8781,23,"parseAssignableListItemTypes"],[9727,55,8781,18],[9727,56,8781,52],[9727,61,8781,57,"parseRestBinding"],[9727,77,8781,52],[9727,79,8781,18],[9727,80,8781,8],[9728,0,8782,8],[9728,17,8782,13,"checkCommaAfterRest"],[9728,36,8782,8],[9728,37,8782,33,"closeCharCode"],[9728,50,8782,8],[9729,0,8783,8],[9729,17,8783,13,"expect"],[9729,23,8783,8],[9729,24,8783,20,"close"],[9729,29,8783,8],[9730,0,8784,8],[9731,0,8785,7],[9731,11,8780,13],[9731,17,8785,13],[9732,0,8786,8],[9732,16,8786,14,"decorators"],[9732,26,8786,24],[9732,29,8786,27],[9732,31,8786,8],[9734,0,8788,8],[9734,16,8788,12],[9734,21,8788,17,"match"],[9734,26,8788,12],[9734,27,8788,23,"types"],[9734,32,8788,28],[9734,33,8788,29,"at"],[9734,35,8788,12],[9734,40,8788,36],[9734,45,8788,41,"hasPlugin"],[9734,54,8788,36],[9734,55,8788,51],[9734,67,8788,36],[9734,68,8788,8],[9734,70,8788,66],[9735,0,8789,10],[9735,19,8789,15,"raise"],[9735,24,8789,10],[9735,25,8789,21],[9735,30,8789,26,"state"],[9735,35,8789,21],[9735,36,8789,32,"start"],[9735,41,8789,10],[9735,43,8789,39],[9735,101,8789,10],[9736,0,8790,9],[9738,0,8792,8],[9738,19,8792,15],[9738,24,8792,20,"match"],[9738,29,8792,15],[9738,30,8792,26,"types"],[9738,35,8792,31],[9738,36,8792,32,"at"],[9738,38,8792,15],[9738,39,8792,8],[9738,41,8792,37],[9739,0,8793,10,"decorators"],[9739,14,8793,10,"decorators"],[9739,24,8793,20],[9739,25,8793,21,"push"],[9739,29,8793,10],[9739,30,8793,26],[9739,35,8793,31,"parseDecorator"],[9739,49,8793,26],[9739,51,8793,10],[9740,0,8794,9],[9742,0,8796,8,"elts"],[9742,12,8796,8,"elts"],[9742,16,8796,12],[9742,17,8796,13,"push"],[9742,21,8796,8],[9742,22,8796,18],[9742,27,8796,23,"parseAssignableListItem"],[9742,50,8796,18],[9742,51,8796,47,"allowModifiers"],[9742,65,8796,18],[9742,67,8796,63,"decorators"],[9742,77,8796,18],[9742,78,8796,8],[9743,0,8797,7],[9744,0,8798,5],[9746,0,8800,4],[9746,15,8800,11,"elts"],[9746,19,8800,4],[9747,0,8801,3],[9750,46,8803,26,"allowModifiers"],[9750,60],[9750,62,8803,42,"decorators"],[9750,72],[9750,74,8803,54],[9751,0,8804,4],[9751,12,8804,10,"left"],[9751,16,8804,14],[9751,19,8804,17],[9751,24,8804,22,"parseMaybeDefault"],[9751,41,8804,17],[9751,43,8804,4],[9752,0,8805,4],[9752,13,8805,9,"parseAssignableListItemTypes"],[9752,41,8805,4],[9752,42,8805,38,"left"],[9752,46,8805,4],[9753,0,8806,4],[9753,12,8806,10,"elt"],[9753,15,8806,13],[9753,18,8806,16],[9753,23,8806,21,"parseMaybeDefault"],[9753,40,8806,16],[9753,41,8806,39,"left"],[9753,45,8806,43],[9753,46,8806,44,"start"],[9753,51,8806,16],[9753,53,8806,51,"left"],[9753,57,8806,55],[9753,58,8806,56,"loc"],[9753,61,8806,51],[9753,62,8806,60,"start"],[9753,67,8806,16],[9753,69,8806,67,"left"],[9753,73,8806,16],[9753,74,8806,4],[9755,0,8808,4],[9755,12,8808,8,"decorators"],[9755,22,8808,18],[9755,23,8808,19,"length"],[9755,29,8808,4],[9755,31,8808,27],[9756,0,8809,6,"left"],[9756,10,8809,6,"left"],[9756,14,8809,10],[9756,15,8809,11,"decorators"],[9756,25,8809,6],[9756,28,8809,24,"decorators"],[9756,38,8809,6],[9757,0,8810,5],[9759,0,8812,4],[9759,15,8812,11,"elt"],[9759,18,8812,4],[9760,0,8813,3],[9763,51,8815,31,"param"],[9763,56],[9763,58,8815,38],[9764,0,8816,4],[9764,15,8816,11,"param"],[9764,20,8816,4],[9765,0,8817,3],[9768,40,8819,20,"startPos"],[9768,48],[9768,50,8819,30,"startLoc"],[9768,58],[9768,60,8819,40,"left"],[9768,64],[9768,66,8819,46],[9769,0,8820,4,"startLoc"],[9769,8,8820,4,"startLoc"],[9769,16,8820,12],[9769,19,8820,15,"startLoc"],[9769,27,8820,23],[9769,31,8820,27],[9769,36,8820,32,"state"],[9769,41,8820,27],[9769,42,8820,38,"startLoc"],[9769,50,8820,4],[9770,0,8821,4,"startPos"],[9770,8,8821,4,"startPos"],[9770,16,8821,12],[9770,19,8821,15,"startPos"],[9770,27,8821,23],[9770,31,8821,27],[9770,36,8821,32,"state"],[9770,41,8821,27],[9770,42,8821,38,"start"],[9770,47,8821,4],[9771,0,8822,4,"left"],[9771,8,8822,4,"left"],[9771,12,8822,8],[9771,15,8822,11,"left"],[9771,19,8822,15],[9771,23,8822,19],[9771,28,8822,24,"parseBindingAtom"],[9771,44,8822,19],[9771,46,8822,4],[9772,0,8823,4],[9772,12,8823,8],[9772,13,8823,9],[9772,18,8823,14,"eat"],[9772,21,8823,9],[9772,22,8823,18,"types"],[9772,27,8823,23],[9772,28,8823,24,"eq"],[9772,30,8823,9],[9772,31,8823,4],[9772,33,8823,29],[9772,40,8823,36,"left"],[9772,44,8823,29],[9773,0,8824,4],[9773,12,8824,10,"node"],[9773,16,8824,14],[9773,19,8824,17],[9773,24,8824,22,"startNodeAt"],[9773,35,8824,17],[9773,36,8824,34,"startPos"],[9773,44,8824,17],[9773,46,8824,44,"startLoc"],[9773,54,8824,17],[9773,55,8824,4],[9774,0,8825,4,"node"],[9774,8,8825,4,"node"],[9774,12,8825,8],[9774,13,8825,9,"left"],[9774,17,8825,4],[9774,20,8825,16,"left"],[9774,24,8825,4],[9775,0,8826,4,"node"],[9775,8,8826,4,"node"],[9775,12,8826,8],[9775,13,8826,9,"right"],[9775,18,8826,4],[9775,21,8826,17],[9775,26,8826,22,"parseMaybeAssign"],[9775,42,8826,17],[9775,44,8826,4],[9776,0,8827,4],[9776,15,8827,11],[9776,20,8827,16,"finishNode"],[9776,30,8827,11],[9776,31,8827,27,"node"],[9776,35,8827,11],[9776,37,8827,33],[9776,56,8827,11],[9776,57,8827,4],[9777,0,8828,3],[9780,32,8830,12,"expr"],[9780,36],[9780,38,8830,124],[9781,0,8830,124],[9781,12,8830,18,"bindingType"],[9781,23,8830,124],[9781,94,8830,32,"BIND_NONE"],[9781,103,8830,124],[9782,0,8830,124],[9782,12,8830,43,"checkClashes"],[9782,24,8830,124],[9783,0,8830,124],[9783,12,8830,57,"contextDescription"],[9783,30,8830,124],[9784,0,8830,124],[9784,12,8830,77,"disallowLetBinding"],[9784,30,8830,124],[9785,0,8830,124],[9785,12,8830,97,"strictModeChanged"],[9785,29,8830,124],[9785,100,8830,117],[9785,105,8830,124],[9787,0,8831,4],[9787,16,8831,12,"expr"],[9787,20,8831,16],[9787,21,8831,17,"type"],[9787,25,8831,4],[9788,0,8832,6],[9788,15,8832,11],[9788,27,8832,6],[9789,0,8833,8],[9789,16,8833,12],[9789,21,8833,17,"state"],[9789,26,8833,12],[9789,27,8833,23,"strict"],[9789,33,8833,12],[9789,38,8833,34,"strictModeChanged"],[9789,55,8833,51],[9789,58,8833,54,"isStrictBindReservedWord"],[9789,82,8833,78],[9789,83,8833,79,"expr"],[9789,87,8833,83],[9789,88,8833,84,"name"],[9789,92,8833,78],[9789,94,8833,90],[9789,99,8833,95,"inModule"],[9789,107,8833,78],[9789,108,8833,51],[9789,111,8833,107,"isStrictBindOnlyReservedWord"],[9789,139,8833,135],[9789,140,8833,136,"expr"],[9789,144,8833,140],[9789,145,8833,141,"name"],[9789,149,8833,135],[9789,150,8833,12],[9789,151,8833,8],[9789,153,8833,149],[9790,0,8834,10],[9790,19,8834,15,"raise"],[9790,24,8834,10],[9790,25,8834,21,"expr"],[9790,29,8834,25],[9790,30,8834,26,"start"],[9790,35,8834,10],[9790,38,8834,36,"bindingType"],[9790,49,8834,47],[9790,54,8834,52,"BIND_NONE"],[9790,63,8834,36],[9790,66,8834,64],[9790,80,8834,36],[9790,83,8834,81],[9790,92,8834,10],[9790,103,8834,95,"expr"],[9790,107,8834,99],[9790,108,8834,100,"name"],[9790,112,8834,10],[9791,0,8835,9],[9793,0,8837,8],[9793,16,8837,12,"checkClashes"],[9793,28,8837,8],[9793,30,8837,26],[9794,0,8838,10],[9794,18,8838,16,"key"],[9794,21,8838,19],[9794,30,8838,26,"expr"],[9794,34,8838,30],[9794,35,8838,31,"name"],[9794,39,8838,10],[9796,0,8840,10],[9796,18,8840,14,"checkClashes"],[9796,30,8840,26],[9796,31,8840,27,"key"],[9796,34,8840,26],[9796,35,8840,10],[9796,37,8840,33],[9797,0,8841,12],[9797,21,8841,17,"raise"],[9797,26,8841,12],[9797,27,8841,23,"expr"],[9797,31,8841,27],[9797,32,8841,28,"start"],[9797,37,8841,12],[9797,39,8841,35],[9797,60,8841,12],[9798,0,8842,11],[9798,15,8840,10],[9798,21,8842,17],[9799,0,8843,12,"checkClashes"],[9799,16,8843,12,"checkClashes"],[9799,28,8843,24],[9799,29,8843,25,"key"],[9799,32,8843,24],[9799,33,8843,12],[9799,36,8843,32],[9799,40,8843,12],[9800,0,8844,11],[9801,0,8845,9],[9803,0,8847,8],[9803,16,8847,12,"disallowLetBinding"],[9803,34,8847,30],[9803,38,8847,34,"expr"],[9803,42,8847,38],[9803,43,8847,39,"name"],[9803,47,8847,34],[9803,52,8847,48],[9803,57,8847,8],[9803,59,8847,55],[9804,0,8848,10],[9804,19,8848,15,"raise"],[9804,24,8848,10],[9804,25,8848,21,"expr"],[9804,29,8848,25],[9804,30,8848,26,"start"],[9804,35,8848,10],[9804,37,8848,33],[9804,114,8848,10],[9805,0,8849,9],[9807,0,8851,8],[9807,16,8851,12],[9807,18,8851,14,"bindingType"],[9807,29,8851,25],[9807,32,8851,28,"BIND_NONE"],[9807,41,8851,12],[9807,42,8851,8],[9807,44,8851,40],[9808,0,8852,10],[9808,19,8852,15,"scope"],[9808,24,8852,10],[9808,25,8852,21,"declareName"],[9808,36,8852,10],[9808,37,8852,33,"expr"],[9808,41,8852,37],[9808,42,8852,38,"name"],[9808,46,8852,10],[9808,48,8852,44,"bindingType"],[9808,59,8852,10],[9808,61,8852,57,"expr"],[9808,65,8852,61],[9808,66,8852,62,"start"],[9808,71,8852,10],[9809,0,8853,9],[9811,0,8855,8],[9813,0,8857,6],[9813,15,8857,11],[9813,33,8857,6],[9814,0,8858,8],[9814,16,8858,12,"bindingType"],[9814,27,8858,23],[9814,32,8858,28,"BIND_NONE"],[9814,41,8858,8],[9814,43,8858,39],[9815,0,8859,10],[9815,19,8859,15,"raise"],[9815,24,8859,10],[9815,25,8859,21,"expr"],[9815,29,8859,25],[9815,30,8859,26,"start"],[9815,35,8859,10],[9815,37,8859,33],[9815,64,8859,10],[9816,0,8860,9],[9818,0,8862,8],[9820,0,8864,6],[9820,15,8864,11],[9820,30,8864,6],[9821,0,8865,8],[9821,17,8865,13],[9821,21,8865,17,"_i2"],[9821,24,8865,20],[9821,27,8865,23],[9821,28,8865,13],[9821,30,8865,26,"_expr$properties"],[9821,46,8865,42],[9821,49,8865,45,"expr"],[9821,53,8865,49],[9821,54,8865,50,"properties"],[9821,64,8865,8],[9821,66,8865,62,"_i2"],[9821,69,8865,65],[9821,72,8865,68,"_expr$properties"],[9821,88,8865,84],[9821,89,8865,85,"length"],[9821,95,8865,8],[9821,97,8865,93,"_i2"],[9821,100,8865,96],[9821,102,8865,8],[9821,104,8865,100],[9822,0,8866,10],[9822,18,8866,14,"prop"],[9822,22,8866,18],[9822,25,8866,21,"_expr$properties"],[9822,41,8866,37],[9822,42,8866,38,"_i2"],[9822,45,8866,37],[9822,46,8866,10],[9823,0,8867,10],[9823,18,8867,14,"prop"],[9823,22,8867,18],[9823,23,8867,19,"type"],[9823,27,8867,14],[9823,32,8867,28],[9823,48,8867,10],[9823,50,8867,46,"prop"],[9823,54,8867,50],[9823,57,8867,53,"prop"],[9823,61,8867,57],[9823,62,8867,58,"value"],[9823,67,8867,46],[9823,68,8867,10],[9823,73,8867,69],[9823,77,8867,73,"prop"],[9823,81,8867,77],[9823,82,8867,78,"type"],[9823,86,8867,73],[9823,91,8867,87],[9823,105,8867,69],[9823,107,8867,103],[9824,0,8868,10],[9824,19,8868,15,"checkLVal"],[9824,28,8868,10],[9824,29,8868,25,"prop"],[9824,33,8868,10],[9824,35,8868,31,"bindingType"],[9824,46,8868,10],[9824,48,8868,44,"checkClashes"],[9824,60,8868,10],[9824,62,8868,58],[9824,92,8868,10],[9824,94,8868,90,"disallowLetBinding"],[9824,112,8868,10],[9825,0,8869,9],[9827,0,8871,8],[9829,0,8873,6],[9829,15,8873,11],[9829,29,8873,6],[9830,0,8874,8],[9830,17,8874,13],[9830,21,8874,17,"_i3"],[9830,24,8874,20],[9830,27,8874,23],[9830,28,8874,13],[9830,30,8874,26,"_expr$elements"],[9830,44,8874,40],[9830,47,8874,43,"expr"],[9830,51,8874,47],[9830,52,8874,48,"elements"],[9830,60,8874,8],[9830,62,8874,58,"_i3"],[9830,65,8874,61],[9830,68,8874,64,"_expr$elements"],[9830,82,8874,78],[9830,83,8874,79,"length"],[9830,89,8874,8],[9830,91,8874,87,"_i3"],[9830,94,8874,90],[9830,96,8874,8],[9830,98,8874,94],[9831,0,8875,10],[9831,18,8875,16,"elem"],[9831,22,8875,20],[9831,25,8875,23,"_expr$elements"],[9831,39,8875,37],[9831,40,8875,38,"_i3"],[9831,43,8875,37],[9831,44,8875,10],[9833,0,8877,10],[9833,18,8877,14,"elem"],[9833,22,8877,10],[9833,24,8877,20],[9834,0,8878,12],[9834,21,8878,17,"checkLVal"],[9834,30,8878,12],[9834,31,8878,27,"elem"],[9834,35,8878,12],[9834,37,8878,33,"bindingType"],[9834,48,8878,12],[9834,50,8878,46,"checkClashes"],[9834,62,8878,12],[9834,64,8878,60],[9834,93,8878,12],[9834,95,8878,91,"disallowLetBinding"],[9834,113,8878,12],[9835,0,8879,11],[9836,0,8880,9],[9838,0,8882,8],[9840,0,8884,6],[9840,15,8884,11],[9840,34,8884,6],[9841,0,8885,8],[9841,17,8885,13,"checkLVal"],[9841,26,8885,8],[9841,27,8885,23,"expr"],[9841,31,8885,27],[9841,32,8885,28,"left"],[9841,36,8885,8],[9841,38,8885,34,"bindingType"],[9841,49,8885,8],[9841,51,8885,47,"checkClashes"],[9841,63,8885,8],[9841,65,8885,61],[9841,85,8885,8],[9842,0,8886,8],[9844,0,8888,6],[9844,15,8888,11],[9844,28,8888,6],[9845,0,8889,8],[9845,17,8889,13,"checkLVal"],[9845,26,8889,8],[9845,27,8889,23,"expr"],[9845,31,8889,27],[9845,32,8889,28,"argument"],[9845,40,8889,8],[9845,42,8889,38,"bindingType"],[9845,53,8889,8],[9845,55,8889,51,"checkClashes"],[9845,67,8889,8],[9845,69,8889,65],[9845,83,8889,8],[9846,0,8890,8],[9848,0,8892,6],[9848,15,8892,11],[9848,40,8892,6],[9849,0,8893,8],[9849,17,8893,13,"checkLVal"],[9849,26,8893,8],[9849,27,8893,23,"expr"],[9849,31,8893,27],[9849,32,8893,28,"expression"],[9849,42,8893,8],[9849,44,8893,40,"bindingType"],[9849,55,8893,8],[9849,57,8893,53,"checkClashes"],[9849,69,8893,8],[9849,71,8893,67],[9849,97,8893,8],[9850,0,8894,8],[9852,0,8896,6],[9853,0,8897,8],[9854,0,8898,10],[9854,18,8898,16,"message"],[9854,25,8898,23],[9854,28,8898,26],[9854,29,8898,27,"bindingType"],[9854,40,8898,38],[9854,45,8898,43,"BIND_NONE"],[9854,54,8898,27],[9854,57,8898,55],[9854,66,8898,27],[9854,69,8898,67],[9854,86,8898,26],[9854,90,8898,88],[9854,107,8898,26],[9854,111,8898,109,"contextDescription"],[9854,129,8898,127],[9854,132,8898,130],[9854,141,8898,139,"contextDescription"],[9854,159,8898,127],[9854,162,8898,160],[9854,174,8898,26],[9854,175,8898,10],[9855,0,8899,10],[9855,19,8899,15,"raise"],[9855,24,8899,10],[9855,25,8899,21,"expr"],[9855,29,8899,25],[9855,30,8899,26,"start"],[9855,35,8899,10],[9855,37,8899,33,"message"],[9855,44,8899,10],[9856,0,8900,9],[9857,0,8831,4],[9858,0,8902,3],[9861,44,8904,24,"node"],[9861,48],[9861,50,8904,30],[9862,0,8905,4],[9862,12,8905,8,"node"],[9862,16,8905,12],[9862,17,8905,13,"argument"],[9862,25,8905,8],[9862,26,8905,22,"type"],[9862,30,8905,8],[9862,35,8905,31],[9862,47,8905,8],[9862,51,8905,47,"node"],[9862,55,8905,51],[9862,56,8905,52,"argument"],[9862,64,8905,47],[9862,65,8905,61,"type"],[9862,69,8905,47],[9862,74,8905,70],[9862,92,8905,4],[9862,94,8905,90],[9863,0,8906,6],[9863,15,8906,11,"raise"],[9863,20,8906,6],[9863,21,8906,17,"node"],[9863,25,8906,21],[9863,26,8906,22,"argument"],[9863,34,8906,17],[9863,35,8906,31,"start"],[9863,40,8906,6],[9863,42,8906,38],[9863,76,8906,6],[9864,0,8907,5],[9865,0,8908,3],[9868,42,8910,22,"close"],[9868,47],[9868,49,8910,29],[9869,0,8911,4],[9869,12,8911,8],[9869,17,8911,13,"match"],[9869,22,8911,8],[9869,23,8911,19,"types"],[9869,28,8911,24],[9869,29,8911,25,"comma"],[9869,34,8911,8],[9869,35,8911,4],[9869,37,8911,33],[9870,0,8912,6],[9870,14,8912,10],[9870,19,8912,15,"lookaheadCharCode"],[9870,36,8912,10],[9870,43,8912,39,"close"],[9870,48,8912,6],[9870,50,8912,46],[9871,0,8913,8],[9871,17,8913,13,"raiseTrailingCommaAfterRest"],[9871,44,8913,8],[9871,45,8913,41],[9871,50,8913,46,"state"],[9871,55,8913,41],[9871,56,8913,52,"start"],[9871,61,8913,8],[9872,0,8914,7],[9872,11,8912,6],[9872,17,8914,13],[9873,0,8915,8],[9873,17,8915,13,"raiseRestNotLast"],[9873,33,8915,8],[9873,34,8915,30],[9873,39,8915,35,"state"],[9873,44,8915,30],[9873,45,8915,41,"start"],[9873,50,8915,8],[9874,0,8916,7],[9875,0,8917,5],[9876,0,8918,3],[9879,39,8920,19,"pos"],[9879,42],[9879,44,8920,24],[9880,0,8921,4],[9880,14,8921,10],[9880,19,8921,15,"raise"],[9880,24,8921,10],[9880,25,8921,21,"pos"],[9880,28,8921,10],[9880,66,8921,4],[9881,0,8922,3],[9884,50,8924,30,"pos"],[9884,53],[9884,55,8924,35],[9885,0,8925,4],[9885,13,8925,9,"raise"],[9885,18,8925,4],[9885,19,8925,15,"pos"],[9885,22,8925,4],[9886,0,8926,3],[9890,4,8591,25,"NodeUtils"],[9890,13],[9892,6,8930,6,"ExpressionParser"],[9892,22],[9903,43,8931,23,"prop"],[9903,47],[9903,49,8931,29,"protoRef"],[9903,57],[9903,59,8931,39],[9904,0,8932,4],[9904,12,8932,8,"prop"],[9904,16,8932,12],[9904,17,8932,13,"type"],[9904,21,8932,8],[9904,26,8932,22],[9904,41,8932,8],[9904,45,8932,41,"prop"],[9904,49,8932,45],[9904,50,8932,46,"computed"],[9904,58,8932,8],[9904,62,8932,58,"prop"],[9904,66,8932,62],[9904,67,8932,63,"kind"],[9904,71,8932,8],[9904,75,8932,71,"prop"],[9904,79,8932,75],[9904,80,8932,76,"shorthand"],[9904,89,8932,4],[9904,91,8932,87],[9905,0,8933,6],[9906,0,8934,5],[9908,0,8936,4],[9908,12,8936,10,"key"],[9908,15,8936,13],[9908,18,8936,16,"prop"],[9908,22,8936,20],[9908,23,8936,21,"key"],[9908,26,8936,4],[9909,0,8937,4],[9909,12,8937,10,"name"],[9909,16,8937,14],[9909,19,8937,17,"key"],[9909,22,8937,20],[9909,23,8937,21,"type"],[9909,27,8937,17],[9909,32,8937,30],[9909,44,8937,17],[9909,47,8937,45,"key"],[9909,50,8937,48],[9909,51,8937,49,"name"],[9909,55,8937,17],[9909,58,8937,56,"String"],[9909,64,8937,62],[9909,65,8937,63,"key"],[9909,68,8937,66],[9909,69,8937,67,"value"],[9909,74,8937,62],[9909,75,8937,4],[9911,0,8939,4],[9911,12,8939,8,"name"],[9911,16,8939,12],[9911,21,8939,17],[9911,32,8939,4],[9911,34,8939,30],[9912,0,8940,6],[9912,14,8940,10,"protoRef"],[9912,22,8940,18],[9912,23,8940,19,"used"],[9912,27,8940,10],[9912,31,8940,27],[9912,32,8940,28,"protoRef"],[9912,40,8940,36],[9912,41,8940,37,"start"],[9912,46,8940,6],[9912,48,8940,44],[9913,0,8941,8,"protoRef"],[9913,12,8941,8,"protoRef"],[9913,20,8941,16],[9913,21,8941,17,"start"],[9913,26,8941,8],[9913,29,8941,25,"key"],[9913,32,8941,28],[9913,33,8941,29,"start"],[9913,38,8941,8],[9914,0,8942,7],[9916,0,8944,6,"protoRef"],[9916,10,8944,6,"protoRef"],[9916,18,8944,14],[9916,19,8944,15,"used"],[9916,23,8944,6],[9916,26,8944,22],[9916,30,8944,6],[9917,0,8945,5],[9918,0,8946,3],[9921,38,8948,18],[9922,0,8949,4],[9922,13,8949,9,"scope"],[9922,18,8949,4],[9922,19,8949,15,"enter"],[9922,24,8949,4],[9922,25,8949,21,"SCOPE_PROGRAM"],[9922,38,8949,4],[9923,0,8950,4],[9923,13,8950,9,"nextToken"],[9923,22,8950,4],[9924,0,8951,4],[9924,12,8951,10,"expr"],[9924,16,8951,14],[9924,19,8951,17],[9924,24,8951,22,"parseExpression"],[9924,39,8951,17],[9924,41,8951,4],[9926,0,8953,4],[9926,12,8953,8],[9926,13,8953,9],[9926,18,8953,14,"match"],[9926,23,8953,9],[9926,24,8953,20,"types"],[9926,29,8953,25],[9926,30,8953,26,"eof"],[9926,33,8953,9],[9926,34,8953,4],[9926,36,8953,32],[9927,0,8954,6],[9927,15,8954,11,"unexpected"],[9927,25,8954,6],[9928,0,8955,5],[9930,0,8957,4,"expr"],[9930,8,8957,4,"expr"],[9930,12,8957,8],[9930,13,8957,9,"comments"],[9930,21,8957,4],[9930,24,8957,20],[9930,29,8957,25,"state"],[9930,34,8957,20],[9930,35,8957,31,"comments"],[9930,43,8957,4],[9931,0,8958,4,"expr"],[9931,8,8958,4,"expr"],[9931,12,8958,8],[9931,13,8958,9,"errors"],[9931,19,8958,4],[9931,22,8958,18],[9931,27,8958,23,"state"],[9931,32,8958,18],[9931,33,8958,29,"errors"],[9931,39,8958,4],[9932,0,8959,4],[9932,15,8959,11,"expr"],[9932,19,8959,4],[9933,0,8960,3],[9936,38,8962,18,"noIn"],[9936,42],[9936,44,8962,24,"refShorthandDefaultPos"],[9936,66],[9936,68,8962,48],[9937,0,8963,4],[9937,12,8963,10,"startPos"],[9937,20,8963,18],[9937,23,8963,21],[9937,28,8963,26,"state"],[9937,33,8963,21],[9937,34,8963,32,"start"],[9937,39,8963,4],[9938,0,8964,4],[9938,12,8964,10,"startLoc"],[9938,20,8964,18],[9938,23,8964,21],[9938,28,8964,26,"state"],[9938,33,8964,21],[9938,34,8964,32,"startLoc"],[9938,42,8964,4],[9939,0,8965,4],[9939,12,8965,10,"expr"],[9939,16,8965,14],[9939,19,8965,17],[9939,24,8965,22,"parseMaybeAssign"],[9939,40,8965,17],[9939,41,8965,39,"noIn"],[9939,45,8965,17],[9939,47,8965,45,"refShorthandDefaultPos"],[9939,69,8965,17],[9939,70,8965,4],[9941,0,8967,4],[9941,12,8967,8],[9941,17,8967,13,"match"],[9941,22,8967,8],[9941,23,8967,19,"types"],[9941,28,8967,24],[9941,29,8967,25,"comma"],[9941,34,8967,8],[9941,35,8967,4],[9941,37,8967,33],[9942,0,8968,6],[9942,14,8968,12,"node"],[9942,18,8968,16],[9942,21,8968,19],[9942,26,8968,24,"startNodeAt"],[9942,37,8968,19],[9942,38,8968,36,"startPos"],[9942,46,8968,19],[9942,48,8968,46,"startLoc"],[9942,56,8968,19],[9942,57,8968,6],[9943,0,8969,6,"node"],[9943,10,8969,6,"node"],[9943,14,8969,10],[9943,15,8969,11,"expressions"],[9943,26,8969,6],[9943,29,8969,25],[9943,30,8969,26,"expr"],[9943,34,8969,25],[9943,35,8969,6],[9945,0,8971,6],[9945,17,8971,13],[9945,22,8971,18,"eat"],[9945,25,8971,13],[9945,26,8971,22,"types"],[9945,31,8971,27],[9945,32,8971,28,"comma"],[9945,37,8971,13],[9945,38,8971,6],[9945,40,8971,36],[9946,0,8972,8,"node"],[9946,12,8972,8,"node"],[9946,16,8972,12],[9946,17,8972,13,"expressions"],[9946,28,8972,8],[9946,29,8972,25,"push"],[9946,33,8972,8],[9946,34,8972,30],[9946,39,8972,35,"parseMaybeAssign"],[9946,55,8972,30],[9946,56,8972,52,"noIn"],[9946,60,8972,30],[9946,62,8972,58,"refShorthandDefaultPos"],[9946,84,8972,30],[9946,85,8972,8],[9947,0,8973,7],[9949,0,8975,6],[9949,15,8975,11,"toReferencedList"],[9949,31,8975,6],[9949,32,8975,28,"node"],[9949,36,8975,32],[9949,37,8975,33,"expressions"],[9949,48,8975,6],[9950,0,8976,6],[9950,17,8976,13],[9950,22,8976,18,"finishNode"],[9950,32,8976,13],[9950,33,8976,29,"node"],[9950,37,8976,13],[9950,39,8976,35],[9950,59,8976,13],[9950,60,8976,6],[9951,0,8977,5],[9953,0,8979,4],[9953,15,8979,11,"expr"],[9953,19,8979,4],[9954,0,8980,3],[9957,39,8982,19,"noIn"],[9957,43],[9957,45,8982,25,"refShorthandDefaultPos"],[9957,67],[9957,69,8982,49,"afterLeftParse"],[9957,83],[9957,85,8982,65,"refNeedsArrowPos"],[9957,101],[9957,103,8982,83],[9958,0,8983,4],[9958,12,8983,10,"startPos"],[9958,20,8983,18],[9958,23,8983,21],[9958,28,8983,26,"state"],[9958,33,8983,21],[9958,34,8983,32,"start"],[9958,39,8983,4],[9959,0,8984,4],[9959,12,8984,10,"startLoc"],[9959,20,8984,18],[9959,23,8984,21],[9959,28,8984,26,"state"],[9959,33,8984,21],[9959,34,8984,32,"startLoc"],[9959,42,8984,4],[9961,0,8986,4],[9961,12,8986,8],[9961,17,8986,13,"isContextual"],[9961,29,8986,8],[9961,30,8986,26],[9961,37,8986,8],[9961,38,8986,4],[9961,40,8986,36],[9962,0,8987,6],[9962,14,8987,10],[9962,19,8987,15,"scope"],[9962,24,8987,10],[9962,25,8987,21,"inGenerator"],[9962,36,8987,6],[9962,38,8987,34],[9963,0,8988,8],[9963,16,8988,12,"left"],[9963,21,8988,16],[9963,24,8988,19],[9963,29,8988,24,"parseYield"],[9963,39,8988,19],[9963,40,8988,35,"noIn"],[9963,44,8988,19],[9963,45,8988,8],[9965,0,8990,8],[9965,16,8990,12,"afterLeftParse"],[9965,30,8990,8],[9965,32,8990,28],[9966,0,8991,10,"left"],[9966,14,8991,10,"left"],[9966,19,8991,14],[9966,22,8991,17,"afterLeftParse"],[9966,36,8991,31],[9966,37,8991,32,"call"],[9966,41,8991,17],[9966,42,8991,37],[9966,46,8991,17],[9966,48,8991,43,"left"],[9966,53,8991,17],[9966,55,8991,49,"startPos"],[9966,63,8991,17],[9966,65,8991,59,"startLoc"],[9966,73,8991,17],[9966,74,8991,10],[9967,0,8992,9],[9969,0,8994,8],[9969,19,8994,15,"left"],[9969,24,8994,8],[9970,0,8995,7],[9970,11,8987,6],[9970,17,8995,13],[9971,0,8996,8],[9971,17,8996,13,"state"],[9971,22,8996,8],[9971,23,8996,19,"exprAllowed"],[9971,34,8996,8],[9971,37,8996,33],[9971,42,8996,8],[9972,0,8997,7],[9973,0,8998,5],[9975,0,9000,4],[9975,12,9000,8,"failOnShorthandAssign"],[9975,33,9000,4],[9977,0,9002,4],[9977,12,9002,8,"refShorthandDefaultPos"],[9977,34,9002,4],[9977,36,9002,32],[9978,0,9003,6,"failOnShorthandAssign"],[9978,10,9003,6,"failOnShorthandAssign"],[9978,31,9003,27],[9978,34,9003,30],[9978,39,9003,6],[9979,0,9004,5],[9979,9,9002,4],[9979,15,9004,11],[9980,0,9005,6,"refShorthandDefaultPos"],[9980,10,9005,6,"refShorthandDefaultPos"],[9980,32,9005,28],[9980,35,9005,31],[9981,0,9006,8,"start"],[9981,12,9006,8,"start"],[9981,17,9006,13],[9981,19,9006,15],[9982,0,9005,31],[9982,11,9005,6],[9983,0,9008,6,"failOnShorthandAssign"],[9983,10,9008,6,"failOnShorthandAssign"],[9983,31,9008,27],[9983,34,9008,30],[9983,38,9008,6],[9984,0,9009,5],[9986,0,9011,4],[9986,12,9011,8],[9986,17,9011,13,"match"],[9986,22,9011,8],[9986,23,9011,19,"types"],[9986,28,9011,24],[9986,29,9011,25,"parenL"],[9986,35,9011,8],[9986,40,9011,36],[9986,45,9011,41,"match"],[9986,50,9011,36],[9986,51,9011,47,"types"],[9986,56,9011,52],[9986,57,9011,53,"name"],[9986,61,9011,36],[9986,62,9011,4],[9986,64,9011,60],[9987,0,9012,6],[9987,15,9012,11,"state"],[9987,20,9012,6],[9987,21,9012,17,"potentialArrowAt"],[9987,37,9012,6],[9987,40,9012,36],[9987,45,9012,41,"state"],[9987,50,9012,36],[9987,51,9012,47,"start"],[9987,56,9012,6],[9988,0,9013,5],[9990,0,9015,4],[9990,12,9015,8,"left"],[9990,16,9015,12],[9990,19,9015,15],[9990,24,9015,20,"parseMaybeConditional"],[9990,45,9015,15],[9990,46,9015,42,"noIn"],[9990,50,9015,15],[9990,52,9015,48,"refShorthandDefaultPos"],[9990,74,9015,15],[9990,76,9015,72,"refNeedsArrowPos"],[9990,92,9015,15],[9990,93,9015,4],[9992,0,9017,4],[9992,12,9017,8,"afterLeftParse"],[9992,26,9017,4],[9992,28,9017,24],[9993,0,9018,6,"left"],[9993,10,9018,6,"left"],[9993,14,9018,10],[9993,17,9018,13,"afterLeftParse"],[9993,31,9018,27],[9993,32,9018,28,"call"],[9993,36,9018,13],[9993,37,9018,33],[9993,41,9018,13],[9993,43,9018,39,"left"],[9993,47,9018,13],[9993,49,9018,45,"startPos"],[9993,57,9018,13],[9993,59,9018,55,"startLoc"],[9993,67,9018,13],[9993,68,9018,6],[9994,0,9019,5],[9996,0,9021,4],[9996,12,9021,8],[9996,17,9021,13,"state"],[9996,22,9021,8],[9996,23,9021,19,"type"],[9996,27,9021,8],[9996,28,9021,24,"isAssign"],[9996,36,9021,4],[9996,38,9021,34],[9997,0,9022,6],[9997,14,9022,12,"node"],[9997,18,9022,16],[9997,21,9022,19],[9997,26,9022,24,"startNodeAt"],[9997,37,9022,19],[9997,38,9022,36,"startPos"],[9997,46,9022,19],[9997,48,9022,46,"startLoc"],[9997,56,9022,19],[9997,57,9022,6],[9998,0,9023,6],[9998,14,9023,12,"operator"],[9998,22,9023,20],[9998,25,9023,23],[9998,30,9023,28,"state"],[9998,35,9023,23],[9998,36,9023,34,"value"],[9998,41,9023,6],[9999,0,9024,6,"node"],[9999,10,9024,6,"node"],[9999,14,9024,10],[9999,15,9024,11,"operator"],[9999,23,9024,6],[9999,26,9024,22,"operator"],[9999,34,9024,6],[10001,0,9026,6],[10001,14,9026,10,"operator"],[10001,22,9026,18],[10001,27,9026,23],[10001,32,9026,6],[10001,34,9026,30],[10002,0,9027,8],[10002,17,9027,13,"expectPlugin"],[10002,29,9027,8],[10002,30,9027,26],[10002,57,9027,8],[10003,0,9028,8],[10003,17,9028,13,"expectPlugin"],[10003,29,9028,8],[10003,30,9028,26],[10003,49,9028,8],[10004,0,9029,7],[10006,0,9031,6],[10006,14,9031,10,"operator"],[10006,22,9031,18],[10006,27,9031,23],[10006,32,9031,10],[10006,36,9031,32,"operator"],[10006,44,9031,40],[10006,49,9031,45],[10006,54,9031,6],[10006,56,9031,52],[10007,0,9032,8],[10007,17,9032,13,"expectPlugin"],[10007,29,9032,8],[10007,30,9032,26],[10007,49,9032,8],[10008,0,9033,7],[10010,0,9035,6,"node"],[10010,10,9035,6,"node"],[10010,14,9035,10],[10010,15,9035,11,"left"],[10010,19,9035,6],[10010,22,9035,18],[10010,27,9035,23,"match"],[10010,32,9035,18],[10010,33,9035,29,"types"],[10010,38,9035,34],[10010,39,9035,35,"eq"],[10010,41,9035,18],[10010,45,9035,41],[10010,50,9035,46,"toAssignable"],[10010,62,9035,41],[10010,63,9035,59,"left"],[10010,67,9035,41],[10010,69,9035,65,"undefined"],[10010,78,9035,41],[10010,80,9035,76],[10010,103,9035,41],[10010,104,9035,18],[10010,107,9035,103,"left"],[10010,111,9035,6],[10012,0,9037,6],[10012,14,9037,10,"refShorthandDefaultPos"],[10012,36,9037,32],[10012,37,9037,33,"start"],[10012,42,9037,10],[10012,46,9037,42,"node"],[10012,50,9037,46],[10012,51,9037,47,"left"],[10012,55,9037,42],[10012,56,9037,52,"start"],[10012,61,9037,6],[10012,63,9037,59],[10013,0,9038,8,"refShorthandDefaultPos"],[10013,12,9038,8,"refShorthandDefaultPos"],[10013,34,9038,30],[10013,35,9038,31,"start"],[10013,40,9038,8],[10013,43,9038,39],[10013,44,9038,8],[10014,0,9039,7],[10016,0,9041,6],[10016,15,9041,11,"checkLVal"],[10016,24,9041,6],[10016,25,9041,21,"left"],[10016,29,9041,6],[10016,31,9041,27,"undefined"],[10016,40,9041,6],[10016,42,9041,38,"undefined"],[10016,51,9041,6],[10016,53,9041,49],[10016,76,9041,6],[10017,0,9042,6],[10017,15,9042,11,"next"],[10017,19,9042,6],[10018,0,9043,6,"node"],[10018,10,9043,6,"node"],[10018,14,9043,10],[10018,15,9043,11,"right"],[10018,20,9043,6],[10018,23,9043,19],[10018,28,9043,24,"parseMaybeAssign"],[10018,44,9043,19],[10018,45,9043,41,"noIn"],[10018,49,9043,19],[10018,50,9043,6],[10019,0,9044,6],[10019,17,9044,13],[10019,22,9044,18,"finishNode"],[10019,32,9044,13],[10019,33,9044,29,"node"],[10019,37,9044,13],[10019,39,9044,35],[10019,61,9044,13],[10019,62,9044,6],[10020,0,9045,5],[10020,9,9021,4],[10020,15,9045,11],[10020,19,9045,15,"failOnShorthandAssign"],[10020,40,9045,36],[10020,44,9045,40,"refShorthandDefaultPos"],[10020,66,9045,62],[10020,67,9045,63,"start"],[10020,72,9045,11],[10020,74,9045,70],[10021,0,9046,6],[10021,15,9046,11,"unexpected"],[10021,25,9046,6],[10021,26,9046,22,"refShorthandDefaultPos"],[10021,48,9046,44],[10021,49,9046,45,"start"],[10021,54,9046,6],[10022,0,9047,5],[10024,0,9049,4],[10024,15,9049,11,"left"],[10024,19,9049,4],[10025,0,9050,3],[10028,44,9052,24,"noIn"],[10028,48],[10028,50,9052,30,"refShorthandDefaultPos"],[10028,72],[10028,74,9052,54,"refNeedsArrowPos"],[10028,90],[10028,92,9052,72],[10029,0,9053,4],[10029,12,9053,10,"startPos"],[10029,20,9053,18],[10029,23,9053,21],[10029,28,9053,26,"state"],[10029,33,9053,21],[10029,34,9053,32,"start"],[10029,39,9053,4],[10030,0,9054,4],[10030,12,9054,10,"startLoc"],[10030,20,9054,18],[10030,23,9054,21],[10030,28,9054,26,"state"],[10030,33,9054,21],[10030,34,9054,32,"startLoc"],[10030,42,9054,4],[10031,0,9055,4],[10031,12,9055,10,"potentialArrowAt"],[10031,28,9055,26],[10031,31,9055,29],[10031,36,9055,34,"state"],[10031,41,9055,29],[10031,42,9055,40,"potentialArrowAt"],[10031,58,9055,4],[10032,0,9056,4],[10032,12,9056,10,"expr"],[10032,16,9056,14],[10032,19,9056,17],[10032,24,9056,22,"parseExprOps"],[10032,36,9056,17],[10032,37,9056,35,"noIn"],[10032,41,9056,17],[10032,43,9056,41,"refShorthandDefaultPos"],[10032,65,9056,17],[10032,66,9056,4],[10034,0,9058,4],[10034,12,9058,8,"expr"],[10034,16,9058,12],[10034,17,9058,13,"type"],[10034,21,9058,8],[10034,26,9058,22],[10034,51,9058,8],[10034,55,9058,51,"expr"],[10034,59,9058,55],[10034,60,9058,56,"start"],[10034,65,9058,51],[10034,70,9058,66,"potentialArrowAt"],[10034,86,9058,4],[10034,88,9058,84],[10035,0,9059,6],[10035,17,9059,13,"expr"],[10035,21,9059,6],[10036,0,9060,5],[10038,0,9062,4],[10038,12,9062,8,"refShorthandDefaultPos"],[10038,34,9062,30],[10038,38,9062,34,"refShorthandDefaultPos"],[10038,60,9062,56],[10038,61,9062,57,"start"],[10038,66,9062,4],[10038,68,9062,64],[10038,75,9062,71,"expr"],[10038,79,9062,64],[10039,0,9063,4],[10039,15,9063,11],[10039,20,9063,16,"parseConditional"],[10039,36,9063,11],[10039,37,9063,33,"expr"],[10039,41,9063,11],[10039,43,9063,39,"noIn"],[10039,47,9063,11],[10039,49,9063,45,"startPos"],[10039,57,9063,11],[10039,59,9063,55,"startLoc"],[10039,67,9063,11],[10039,69,9063,65,"refNeedsArrowPos"],[10039,85,9063,11],[10039,86,9063,4],[10040,0,9064,3],[10043,39,9066,19,"expr"],[10043,43],[10043,45,9066,25,"noIn"],[10043,49],[10043,51,9066,31,"startPos"],[10043,59],[10043,61,9066,41,"startLoc"],[10043,69],[10043,71,9066,51,"refNeedsArrowPos"],[10043,87],[10043,89,9066,69],[10044,0,9067,4],[10044,12,9067,8],[10044,17,9067,13,"eat"],[10044,20,9067,8],[10044,21,9067,17,"types"],[10044,26,9067,22],[10044,27,9067,23,"question"],[10044,35,9067,8],[10044,36,9067,4],[10044,38,9067,34],[10045,0,9068,6],[10045,14,9068,12,"node"],[10045,18,9068,16],[10045,21,9068,19],[10045,26,9068,24,"startNodeAt"],[10045,37,9068,19],[10045,38,9068,36,"startPos"],[10045,46,9068,19],[10045,48,9068,46,"startLoc"],[10045,56,9068,19],[10045,57,9068,6],[10046,0,9069,6,"node"],[10046,10,9069,6,"node"],[10046,14,9069,10],[10046,15,9069,11,"test"],[10046,19,9069,6],[10046,22,9069,18,"expr"],[10046,26,9069,6],[10047,0,9070,6,"node"],[10047,10,9070,6,"node"],[10047,14,9070,10],[10047,15,9070,11,"consequent"],[10047,25,9070,6],[10047,28,9070,24],[10047,33,9070,29,"parseMaybeAssign"],[10047,49,9070,24],[10047,51,9070,6],[10048,0,9071,6],[10048,15,9071,11,"expect"],[10048,21,9071,6],[10048,22,9071,18,"types"],[10048,27,9071,23],[10048,28,9071,24,"colon"],[10048,33,9071,6],[10049,0,9072,6,"node"],[10049,10,9072,6,"node"],[10049,14,9072,10],[10049,15,9072,11,"alternate"],[10049,24,9072,6],[10049,27,9072,23],[10049,32,9072,28,"parseMaybeAssign"],[10049,48,9072,23],[10049,49,9072,45,"noIn"],[10049,53,9072,23],[10049,54,9072,6],[10050,0,9073,6],[10050,17,9073,13],[10050,22,9073,18,"finishNode"],[10050,32,9073,13],[10050,33,9073,29,"node"],[10050,37,9073,13],[10050,39,9073,35],[10050,62,9073,13],[10050,63,9073,6],[10051,0,9074,5],[10053,0,9076,4],[10053,15,9076,11,"expr"],[10053,19,9076,4],[10054,0,9077,3],[10057,35,9079,15,"noIn"],[10057,39],[10057,41,9079,21,"refShorthandDefaultPos"],[10057,63],[10057,65,9079,45],[10058,0,9080,4],[10058,12,9080,10,"startPos"],[10058,20,9080,18],[10058,23,9080,21],[10058,28,9080,26,"state"],[10058,33,9080,21],[10058,34,9080,32,"start"],[10058,39,9080,4],[10059,0,9081,4],[10059,12,9081,10,"startLoc"],[10059,20,9081,18],[10059,23,9081,21],[10059,28,9081,26,"state"],[10059,33,9081,21],[10059,34,9081,32,"startLoc"],[10059,42,9081,4],[10060,0,9082,4],[10060,12,9082,10,"potentialArrowAt"],[10060,28,9082,26],[10060,31,9082,29],[10060,36,9082,34,"state"],[10060,41,9082,29],[10060,42,9082,40,"potentialArrowAt"],[10060,58,9082,4],[10061,0,9083,4],[10061,12,9083,10,"expr"],[10061,16,9083,14],[10061,19,9083,17],[10061,24,9083,22,"parseMaybeUnary"],[10061,39,9083,17],[10061,40,9083,38,"refShorthandDefaultPos"],[10061,62,9083,17],[10061,63,9083,4],[10063,0,9085,4],[10063,12,9085,8,"expr"],[10063,16,9085,12],[10063,17,9085,13,"type"],[10063,21,9085,8],[10063,26,9085,22],[10063,51,9085,8],[10063,55,9085,51,"expr"],[10063,59,9085,55],[10063,60,9085,56,"start"],[10063,65,9085,51],[10063,70,9085,66,"potentialArrowAt"],[10063,86,9085,4],[10063,88,9085,84],[10064,0,9086,6],[10064,17,9086,13,"expr"],[10064,21,9086,6],[10065,0,9087,5],[10067,0,9089,4],[10067,12,9089,8,"refShorthandDefaultPos"],[10067,34,9089,30],[10067,38,9089,34,"refShorthandDefaultPos"],[10067,60,9089,56],[10067,61,9089,57,"start"],[10067,66,9089,4],[10067,68,9089,64],[10068,0,9090,6],[10068,17,9090,13,"expr"],[10068,21,9090,6],[10069,0,9091,5],[10071,0,9093,4],[10071,15,9093,11],[10071,20,9093,16,"parseExprOp"],[10071,31,9093,11],[10071,32,9093,28,"expr"],[10071,36,9093,11],[10071,38,9093,34,"startPos"],[10071,46,9093,11],[10071,48,9093,44,"startLoc"],[10071,56,9093,11],[10071,58,9093,54],[10071,59,9093,55],[10071,60,9093,11],[10071,62,9093,58,"noIn"],[10071,66,9093,11],[10071,67,9093,4],[10072,0,9094,3],[10075,34,9096,14,"left"],[10075,38],[10075,40,9096,20,"leftStartPos"],[10075,52],[10075,54,9096,34,"leftStartLoc"],[10075,66],[10075,68,9096,48,"minPrec"],[10075,75],[10075,77,9096,57,"noIn"],[10075,81],[10075,83,9096,63],[10076,0,9097,4],[10076,12,9097,10,"prec"],[10076,16,9097,14],[10076,19,9097,17],[10076,24,9097,22,"state"],[10076,29,9097,17],[10076,30,9097,28,"type"],[10076,34,9097,17],[10076,35,9097,33,"binop"],[10076,40,9097,4],[10078,0,9099,4],[10078,12,9099,8,"prec"],[10078,16,9099,12],[10078,20,9099,16],[10078,24,9099,8],[10078,29,9099,25],[10078,30,9099,26,"noIn"],[10078,34,9099,25],[10078,38,9099,34],[10078,39,9099,35],[10078,44,9099,40,"match"],[10078,49,9099,35],[10078,50,9099,46,"types"],[10078,55,9099,51],[10078,56,9099,52,"_in"],[10078,59,9099,35],[10078,60,9099,8],[10078,61,9099,4],[10078,63,9099,59],[10079,0,9100,6],[10079,14,9100,10,"prec"],[10079,18,9100,14],[10079,21,9100,17,"minPrec"],[10079,28,9100,6],[10079,30,9100,26],[10080,0,9101,8],[10080,16,9101,14,"operator"],[10080,24,9101,22],[10080,27,9101,25],[10080,32,9101,30,"state"],[10080,37,9101,25],[10080,38,9101,36,"value"],[10080,43,9101,8],[10082,0,9103,8],[10082,16,9103,12,"operator"],[10082,24,9103,20],[10082,29,9103,25],[10082,33,9103,12],[10082,37,9103,33],[10082,42,9103,38,"state"],[10082,47,9103,33],[10082,48,9103,44,"inFSharpPipelineDirectBody"],[10082,74,9103,8],[10082,76,9103,72],[10083,0,9104,10],[10083,21,9104,17,"left"],[10083,25,9104,10],[10084,0,9105,9],[10086,0,9107,8],[10086,16,9107,14,"node"],[10086,20,9107,18],[10086,23,9107,21],[10086,28,9107,26,"startNodeAt"],[10086,39,9107,21],[10086,40,9107,38,"leftStartPos"],[10086,52,9107,21],[10086,54,9107,52,"leftStartLoc"],[10086,66,9107,21],[10086,67,9107,8],[10087,0,9108,8,"node"],[10087,12,9108,8,"node"],[10087,16,9108,12],[10087,17,9108,13,"left"],[10087,21,9108,8],[10087,24,9108,20,"left"],[10087,28,9108,8],[10088,0,9109,8,"node"],[10088,12,9109,8,"node"],[10088,16,9109,12],[10088,17,9109,13,"operator"],[10088,25,9109,8],[10088,28,9109,24,"operator"],[10088,36,9109,8],[10090,0,9111,8],[10090,16,9111,12,"operator"],[10090,24,9111,20],[10090,29,9111,25],[10090,33,9111,12],[10090,37,9111,33,"left"],[10090,41,9111,37],[10090,42,9111,38,"type"],[10090,46,9111,33],[10090,51,9111,47],[10090,68,9111,12],[10090,73,9111,69],[10090,78,9111,74,"options"],[10090,85,9111,69],[10090,86,9111,82,"createParenthesizedExpressions"],[10090,116,9111,69],[10090,120,9111,116],[10090,122,9111,118,"left"],[10090,126,9111,122],[10090,127,9111,123,"extra"],[10090,132,9111,118],[10090,136,9111,132,"left"],[10090,140,9111,136],[10090,141,9111,137,"extra"],[10090,146,9111,132],[10090,147,9111,143,"parenthesized"],[10090,160,9111,116],[10090,161,9111,12],[10090,162,9111,8],[10090,164,9111,160],[10091,0,9112,10],[10091,19,9112,15,"raise"],[10091,24,9112,10],[10091,25,9112,21,"left"],[10091,29,9112,25],[10091,30,9112,26,"argument"],[10091,38,9112,21],[10091,39,9112,35,"start"],[10091,44,9112,10],[10091,46,9112,42],[10091,128,9112,10],[10092,0,9113,9],[10094,0,9115,8],[10094,16,9115,14,"op"],[10094,18,9115,16],[10094,21,9115,19],[10094,26,9115,24,"state"],[10094,31,9115,19],[10094,32,9115,30,"type"],[10094,36,9115,8],[10096,0,9117,8],[10096,16,9117,12,"op"],[10096,18,9117,14],[10096,23,9117,19,"types"],[10096,28,9117,24],[10096,29,9117,25,"pipeline"],[10096,37,9117,8],[10096,39,9117,35],[10097,0,9118,10],[10097,19,9118,15,"expectPlugin"],[10097,31,9118,10],[10097,32,9118,28],[10097,50,9118,10],[10098,0,9119,10],[10098,19,9119,15,"state"],[10098,24,9119,10],[10098,25,9119,21,"inPipeline"],[10098,35,9119,10],[10098,38,9119,34],[10098,42,9119,10],[10099,0,9120,10],[10099,19,9120,15,"checkPipelineAtInfixOperator"],[10099,47,9120,10],[10099,48,9120,44,"left"],[10099,52,9120,10],[10099,54,9120,50,"leftStartPos"],[10099,66,9120,10],[10100,0,9121,9],[10100,13,9117,8],[10100,19,9121,15],[10100,23,9121,19,"op"],[10100,25,9121,21],[10100,30,9121,26,"types"],[10100,35,9121,31],[10100,36,9121,32,"nullishCoalescing"],[10100,53,9121,15],[10100,55,9121,51],[10101,0,9122,10],[10101,19,9122,15,"expectPlugin"],[10101,31,9122,10],[10101,32,9122,28],[10101,59,9122,10],[10102,0,9123,9],[10104,0,9125,8],[10104,17,9125,13,"next"],[10104,21,9125,8],[10106,0,9127,8],[10106,16,9127,12,"op"],[10106,18,9127,14],[10106,23,9127,19,"types"],[10106,28,9127,24],[10106,29,9127,25,"pipeline"],[10106,37,9127,12],[10106,41,9127,37],[10106,46,9127,42,"getPluginOption"],[10106,61,9127,37],[10106,62,9127,58],[10106,80,9127,37],[10106,82,9127,78],[10106,92,9127,37],[10106,98,9127,94],[10106,107,9127,8],[10106,109,9127,105],[10107,0,9128,10],[10107,18,9128,14],[10107,23,9128,19,"match"],[10107,28,9128,14],[10107,29,9128,25,"types"],[10107,34,9128,30],[10107,35,9128,31,"name"],[10107,39,9128,14],[10107,44,9128,40],[10107,49,9128,45,"state"],[10107,54,9128,40],[10107,55,9128,51,"value"],[10107,60,9128,40],[10107,65,9128,61],[10107,72,9128,14],[10107,76,9128,72],[10107,81,9128,77,"scope"],[10107,86,9128,72],[10107,87,9128,83,"inAsync"],[10107,94,9128,10],[10107,96,9128,92],[10108,0,9129,12],[10108,22,9129,18],[10108,27,9129,23,"raise"],[10108,32,9129,18],[10108,33,9129,29],[10108,38,9129,34,"state"],[10108,43,9129,29],[10108,44,9129,40,"start"],[10108,49,9129,18],[10108,143,9129,12],[10109,0,9130,11],[10110,0,9131,9],[10112,0,9133,8,"node"],[10112,12,9133,8,"node"],[10112,16,9133,12],[10112,17,9133,13,"right"],[10112,22,9133,8],[10112,25,9133,21],[10112,30,9133,26,"parseExprOpRightExpr"],[10112,50,9133,21],[10112,51,9133,47,"op"],[10112,53,9133,21],[10112,55,9133,51,"prec"],[10112,59,9133,21],[10112,61,9133,57,"noIn"],[10112,65,9133,21],[10112,66,9133,8],[10114,0,9135,8],[10114,16,9135,12,"op"],[10114,18,9135,14],[10114,23,9135,19,"types"],[10114,28,9135,24],[10114,29,9135,25,"nullishCoalescing"],[10114,46,9135,8],[10114,48,9135,44],[10115,0,9136,10],[10115,18,9136,14,"left"],[10115,22,9136,18],[10115,23,9136,19,"type"],[10115,27,9136,14],[10115,32,9136,28],[10115,51,9136,14],[10115,55,9136,51,"left"],[10115,59,9136,55],[10115,60,9136,56,"operator"],[10115,68,9136,51],[10115,73,9136,69],[10115,77,9136,14],[10115,81,9136,77],[10115,83,9136,79,"left"],[10115,87,9136,83],[10115,88,9136,84,"extra"],[10115,93,9136,79],[10115,97,9136,93,"left"],[10115,101,9136,97],[10115,102,9136,98,"extra"],[10115,107,9136,93],[10115,108,9136,104,"parenthesized"],[10115,121,9136,77],[10115,122,9136,10],[10115,124,9136,120],[10116,0,9137,12],[10116,22,9137,18],[10116,27,9137,23,"raise"],[10116,32,9137,18],[10116,33,9137,29,"left"],[10116,37,9137,33],[10116,38,9137,34,"start"],[10116,43,9137,18],[10116,130,9137,12],[10117,0,9138,11],[10117,15,9136,10],[10117,21,9138,17],[10117,25,9138,21,"node"],[10117,29,9138,25],[10117,30,9138,26,"right"],[10117,35,9138,21],[10117,36,9138,32,"type"],[10117,40,9138,21],[10117,45,9138,41],[10117,64,9138,21],[10117,68,9138,64,"node"],[10117,72,9138,68],[10117,73,9138,69,"right"],[10117,78,9138,64],[10117,79,9138,75,"operator"],[10117,87,9138,64],[10117,92,9138,88],[10117,96,9138,21],[10117,100,9138,96],[10117,102,9138,98,"node"],[10117,106,9138,102],[10117,107,9138,103,"right"],[10117,112,9138,98],[10117,113,9138,109,"extra"],[10117,118,9138,98],[10117,122,9138,118,"node"],[10117,126,9138,122],[10117,127,9138,123,"right"],[10117,132,9138,118],[10117,133,9138,129,"extra"],[10117,138,9138,118],[10117,139,9138,135,"parenthesized"],[10117,152,9138,96],[10117,153,9138,17],[10117,155,9138,151],[10118,0,9139,12],[10118,22,9139,18],[10118,27,9139,23,"raise"],[10118,32,9139,18],[10118,33,9139,29,"node"],[10118,37,9139,33],[10118,38,9139,34,"right"],[10118,43,9139,29],[10118,44,9139,40,"start"],[10118,49,9139,18],[10118,136,9139,12],[10119,0,9140,11],[10120,0,9141,9],[10122,0,9143,8],[10122,17,9143,13,"finishNode"],[10122,27,9143,8],[10122,28,9143,24,"node"],[10122,32,9143,8],[10122,34,9143,30,"op"],[10122,36,9143,32],[10122,41,9143,37,"types"],[10122,46,9143,42],[10122,47,9143,43,"logicalOR"],[10122,56,9143,30],[10122,60,9143,56,"op"],[10122,62,9143,58],[10122,67,9143,63,"types"],[10122,72,9143,68],[10122,73,9143,69,"logicalAND"],[10122,83,9143,30],[10122,87,9143,83,"op"],[10122,89,9143,85],[10122,94,9143,90,"types"],[10122,99,9143,95],[10122,100,9143,96,"nullishCoalescing"],[10122,117,9143,30],[10122,120,9143,116],[10122,139,9143,30],[10122,142,9143,138],[10122,160,9143,8],[10123,0,9144,8],[10123,19,9144,15],[10123,24,9144,20,"parseExprOp"],[10123,35,9144,15],[10123,36,9144,32,"node"],[10123,40,9144,15],[10123,42,9144,38,"leftStartPos"],[10123,54,9144,15],[10123,56,9144,52,"leftStartLoc"],[10123,68,9144,15],[10123,70,9144,66,"minPrec"],[10123,77,9144,15],[10123,79,9144,75,"noIn"],[10123,83,9144,15],[10123,84,9144,8],[10124,0,9145,7],[10125,0,9146,5],[10127,0,9148,4],[10127,15,9148,11,"left"],[10127,19,9148,4],[10128,0,9149,3],[10131,43,9151,23,"op"],[10131,45],[10131,47,9151,27,"prec"],[10131,51],[10131,53,9151,33,"noIn"],[10131,57],[10131,59,9151,39],[10132,0,9151,39],[10134,0,9152,4],[10134,12,9152,10,"startPos"],[10134,20,9152,18],[10134,23,9152,21],[10134,28,9152,26,"state"],[10134,33,9152,21],[10134,34,9152,32,"start"],[10134,39,9152,4],[10135,0,9153,4],[10135,12,9153,10,"startLoc"],[10135,20,9153,18],[10135,23,9153,21],[10135,28,9153,26,"state"],[10135,33,9153,21],[10135,34,9153,32,"startLoc"],[10135,42,9153,4],[10137,0,9155,4],[10137,16,9155,12,"op"],[10137,18,9155,4],[10138,0,9156,6],[10138,15,9156,11,"types"],[10138,20,9156,16],[10138,21,9156,17,"pipeline"],[10138,29,9156,6],[10139,0,9157,8],[10139,20,9157,16],[10139,25,9157,21,"getPluginOption"],[10139,40,9157,16],[10139,41,9157,37],[10139,59,9157,16],[10139,61,9157,57],[10139,71,9157,16],[10139,72,9157,8],[10140,0,9158,10],[10140,19,9158,15],[10140,26,9158,10],[10141,0,9159,12],[10141,23,9159,19],[10141,28,9159,24,"withTopicPermittingContext"],[10141,54,9159,19],[10141,55,9159,51],[10141,67,9159,57],[10142,0,9160,14],[10142,25,9160,21],[10142,32,9160,25],[10142,33,9160,26,"parseSmartPipelineBody"],[10142,55,9160,21],[10142,56,9160,49],[10142,63,9160,53],[10142,64,9160,54,"parseExprOpBaseRightExpr"],[10142,88,9160,49],[10142,89,9160,79,"op"],[10142,91,9160,49],[10142,93,9160,83,"prec"],[10142,97,9160,49],[10142,99,9160,89,"noIn"],[10142,103,9160,49],[10142,104,9160,21],[10142,106,9160,96,"startPos"],[10142,114,9160,21],[10142,116,9160,106,"startLoc"],[10142,124,9160,21],[10142,125,9160,14],[10143,0,9161,13],[10143,17,9159,19],[10143,18,9159,12],[10145,0,9163,10],[10145,19,9163,15],[10145,27,9163,10],[10146,0,9164,12],[10146,23,9164,19],[10146,28,9164,24,"withSoloAwaitPermittingContext"],[10146,58,9164,19],[10146,59,9164,55],[10146,71,9164,61],[10147,0,9165,14],[10147,25,9165,21],[10147,32,9165,25],[10147,33,9165,26,"parseFSharpPipelineBody"],[10147,56,9165,21],[10147,57,9165,50,"prec"],[10147,61,9165,21],[10147,63,9165,56,"noIn"],[10147,67,9165,21],[10147,68,9165,14],[10148,0,9166,13],[10148,17,9164,19],[10148,18,9164,12],[10149,0,9157,8],[10151,0,9169,6],[10152,0,9170,8],[10152,19,9170,15],[10152,24,9170,20,"parseExprOpBaseRightExpr"],[10152,48,9170,15],[10152,49,9170,45,"op"],[10152,51,9170,15],[10152,53,9170,49,"prec"],[10152,57,9170,15],[10152,59,9170,55,"noIn"],[10152,63,9170,15],[10152,64,9170,8],[10153,0,9155,4],[10154,0,9172,3],[10157,47,9174,27,"op"],[10157,49],[10157,51,9174,31,"prec"],[10157,55],[10157,57,9174,37,"noIn"],[10157,61],[10157,63,9174,43],[10158,0,9175,4],[10158,12,9175,10,"startPos"],[10158,20,9175,18],[10158,23,9175,21],[10158,28,9175,26,"state"],[10158,33,9175,21],[10158,34,9175,32,"start"],[10158,39,9175,4],[10159,0,9176,4],[10159,12,9176,10,"startLoc"],[10159,20,9176,18],[10159,23,9176,21],[10159,28,9176,26,"state"],[10159,33,9176,21],[10159,34,9176,32,"startLoc"],[10159,42,9176,4],[10160,0,9177,4],[10160,15,9177,11],[10160,20,9177,16,"parseExprOp"],[10160,31,9177,11],[10160,32,9177,28],[10160,37,9177,33,"parseMaybeUnary"],[10160,52,9177,28],[10160,54,9177,11],[10160,56,9177,52,"startPos"],[10160,64,9177,11],[10160,66,9177,62,"startLoc"],[10160,74,9177,11],[10160,76,9177,72,"op"],[10160,78,9177,74],[10160,79,9177,75,"rightAssociative"],[10160,95,9177,72],[10160,98,9177,94,"prec"],[10160,102,9177,98],[10160,105,9177,101],[10160,106,9177,72],[10160,109,9177,105,"prec"],[10160,113,9177,11],[10160,115,9177,111,"noIn"],[10160,119,9177,11],[10160,120,9177,4],[10161,0,9178,3],[10164,38,9180,18,"refShorthandDefaultPos"],[10164,60],[10164,62,9180,42],[10165,0,9181,4],[10165,12,9181,8],[10165,17,9181,13,"isContextual"],[10165,29,9181,8],[10165,30,9181,26],[10165,37,9181,8],[10165,42,9181,38],[10165,47,9181,43,"isAwaitAllowed"],[10165,61,9181,38],[10165,63,9181,4],[10165,65,9181,61],[10166,0,9182,6],[10166,17,9182,13],[10166,22,9182,18,"parseAwait"],[10166,32,9182,13],[10166,34,9182,6],[10167,0,9183,5],[10167,9,9181,4],[10167,15,9183,11],[10167,19,9183,15],[10167,24,9183,20,"state"],[10167,29,9183,15],[10167,30,9183,26,"type"],[10167,34,9183,15],[10167,35,9183,31,"prefix"],[10167,41,9183,11],[10167,43,9183,39],[10168,0,9184,6],[10168,14,9184,12,"node"],[10168,18,9184,16],[10168,21,9184,19],[10168,26,9184,24,"startNode"],[10168,35,9184,19],[10168,37,9184,6],[10169,0,9185,6],[10169,14,9185,12,"update"],[10169,20,9185,18],[10169,23,9185,21],[10169,28,9185,26,"match"],[10169,33,9185,21],[10169,34,9185,32,"types"],[10169,39,9185,37],[10169,40,9185,38,"incDec"],[10169,46,9185,21],[10169,47,9185,6],[10170,0,9186,6,"node"],[10170,10,9186,6,"node"],[10170,14,9186,10],[10170,15,9186,11,"operator"],[10170,23,9186,6],[10170,26,9186,22],[10170,31,9186,27,"state"],[10170,36,9186,22],[10170,37,9186,33,"value"],[10170,42,9186,6],[10171,0,9187,6,"node"],[10171,10,9187,6,"node"],[10171,14,9187,10],[10171,15,9187,11,"prefix"],[10171,21,9187,6],[10171,24,9187,20],[10171,28,9187,6],[10173,0,9189,6],[10173,14,9189,10,"node"],[10173,18,9189,14],[10173,19,9189,15,"operator"],[10173,27,9189,10],[10173,32,9189,28],[10173,39,9189,6],[10173,41,9189,37],[10174,0,9190,8],[10174,17,9190,13,"expectPlugin"],[10174,29,9190,8],[10174,30,9190,26],[10174,48,9190,8],[10175,0,9191,7],[10177,0,9193,6],[10177,15,9193,11,"next"],[10177,19,9193,6],[10178,0,9194,6,"node"],[10178,10,9194,6,"node"],[10178,14,9194,10],[10178,15,9194,11,"argument"],[10178,23,9194,6],[10178,26,9194,22],[10178,31,9194,27,"parseMaybeUnary"],[10178,46,9194,22],[10178,48,9194,6],[10180,0,9196,6],[10180,14,9196,10,"refShorthandDefaultPos"],[10180,36,9196,32],[10180,40,9196,36,"refShorthandDefaultPos"],[10180,62,9196,58],[10180,63,9196,59,"start"],[10180,68,9196,6],[10180,70,9196,66],[10181,0,9197,8],[10181,17,9197,13,"unexpected"],[10181,27,9197,8],[10181,28,9197,24,"refShorthandDefaultPos"],[10181,50,9197,46],[10181,51,9197,47,"start"],[10181,56,9197,8],[10182,0,9198,7],[10184,0,9200,6],[10184,14,9200,10,"update"],[10184,20,9200,6],[10184,22,9200,18],[10185,0,9201,8],[10185,17,9201,13,"checkLVal"],[10185,26,9201,8],[10185,27,9201,23,"node"],[10185,31,9201,27],[10185,32,9201,28,"argument"],[10185,40,9201,8],[10185,42,9201,38,"undefined"],[10185,51,9201,8],[10185,53,9201,49,"undefined"],[10185,62,9201,8],[10185,64,9201,60],[10185,82,9201,8],[10186,0,9202,7],[10186,11,9200,6],[10186,17,9202,13],[10186,21,9202,17],[10186,26,9202,22,"state"],[10186,31,9202,17],[10186,32,9202,28,"strict"],[10186,38,9202,17],[10186,42,9202,38,"node"],[10186,46,9202,42],[10186,47,9202,43,"operator"],[10186,55,9202,38],[10186,60,9202,56],[10186,68,9202,13],[10186,70,9202,66],[10187,0,9203,8],[10187,16,9203,14,"arg"],[10187,19,9203,17],[10187,22,9203,20,"node"],[10187,26,9203,24],[10187,27,9203,25,"argument"],[10187,35,9203,8],[10189,0,9205,8],[10189,16,9205,12,"arg"],[10189,19,9205,15],[10189,20,9205,16,"type"],[10189,24,9205,12],[10189,29,9205,25],[10189,41,9205,8],[10189,43,9205,39],[10190,0,9206,10],[10190,19,9206,15,"raise"],[10190,24,9206,10],[10190,25,9206,21,"node"],[10190,29,9206,25],[10190,30,9206,26,"start"],[10190,35,9206,10],[10190,37,9206,33],[10190,77,9206,10],[10191,0,9207,9],[10191,13,9205,8],[10191,19,9207,15],[10191,23,9207,19,"arg"],[10191,26,9207,22],[10191,27,9207,23,"type"],[10191,31,9207,19],[10191,36,9207,32],[10191,54,9207,19],[10191,58,9207,54,"arg"],[10191,61,9207,57],[10191,62,9207,58,"property"],[10191,70,9207,54],[10191,71,9207,67,"type"],[10191,75,9207,54],[10191,80,9207,76],[10191,93,9207,15],[10191,95,9207,91],[10192,0,9208,10],[10192,19,9208,15,"raise"],[10192,24,9208,10],[10192,25,9208,21,"node"],[10192,29,9208,25],[10192,30,9208,26,"start"],[10192,35,9208,10],[10192,37,9208,33],[10192,78,9208,10],[10193,0,9209,9],[10194,0,9210,7],[10196,0,9212,6],[10196,17,9212,13],[10196,22,9212,18,"finishNode"],[10196,32,9212,13],[10196,33,9212,29,"node"],[10196,37,9212,13],[10196,39,9212,35,"update"],[10196,45,9212,41],[10196,48,9212,44],[10196,66,9212,41],[10196,69,9212,65],[10196,86,9212,13],[10196,87,9212,6],[10197,0,9213,5],[10199,0,9215,4],[10199,12,9215,10,"startPos"],[10199,20,9215,18],[10199,23,9215,21],[10199,28,9215,26,"state"],[10199,33,9215,21],[10199,34,9215,32,"start"],[10199,39,9215,4],[10200,0,9216,4],[10200,12,9216,10,"startLoc"],[10200,20,9216,18],[10200,23,9216,21],[10200,28,9216,26,"state"],[10200,33,9216,21],[10200,34,9216,32,"startLoc"],[10200,42,9216,4],[10201,0,9217,4],[10201,12,9217,8,"expr"],[10201,16,9217,12],[10201,19,9217,15],[10201,24,9217,20,"parseExprSubscripts"],[10201,43,9217,15],[10201,44,9217,40,"refShorthandDefaultPos"],[10201,66,9217,15],[10201,67,9217,4],[10202,0,9218,4],[10202,12,9218,8,"refShorthandDefaultPos"],[10202,34,9218,30],[10202,38,9218,34,"refShorthandDefaultPos"],[10202,60,9218,56],[10202,61,9218,57,"start"],[10202,66,9218,4],[10202,68,9218,64],[10202,75,9218,71,"expr"],[10202,79,9218,64],[10204,0,9220,4],[10204,15,9220,11],[10204,20,9220,16,"state"],[10204,25,9220,11],[10204,26,9220,22,"type"],[10204,30,9220,11],[10204,31,9220,27,"postfix"],[10204,38,9220,11],[10204,42,9220,38],[10204,43,9220,39],[10204,48,9220,44,"canInsertSemicolon"],[10204,66,9220,39],[10204,68,9220,4],[10204,70,9220,66],[10205,0,9221,6],[10205,14,9221,12,"node"],[10205,21,9221,16],[10205,24,9221,19],[10205,29,9221,24,"startNodeAt"],[10205,40,9221,19],[10205,41,9221,36,"startPos"],[10205,49,9221,19],[10205,51,9221,46,"startLoc"],[10205,59,9221,19],[10205,60,9221,6],[10207,0,9222,6,"node"],[10207,10,9222,6,"node"],[10207,17,9222,10],[10207,18,9222,11,"operator"],[10207,26,9222,6],[10207,29,9222,22],[10207,34,9222,27,"state"],[10207,39,9222,22],[10207,40,9222,33,"value"],[10207,45,9222,6],[10208,0,9223,6,"node"],[10208,10,9223,6,"node"],[10208,17,9223,10],[10208,18,9223,11,"prefix"],[10208,24,9223,6],[10208,27,9223,20],[10208,32,9223,6],[10209,0,9224,6,"node"],[10209,10,9224,6,"node"],[10209,17,9224,10],[10209,18,9224,11,"argument"],[10209,26,9224,6],[10209,29,9224,22,"expr"],[10209,33,9224,6],[10210,0,9225,6],[10210,15,9225,11,"checkLVal"],[10210,24,9225,6],[10210,25,9225,21,"expr"],[10210,29,9225,6],[10210,31,9225,27,"undefined"],[10210,40,9225,6],[10210,42,9225,38,"undefined"],[10210,51,9225,6],[10210,53,9225,49],[10210,72,9225,6],[10211,0,9226,6],[10211,15,9226,11,"next"],[10211,19,9226,6],[10212,0,9227,6,"expr"],[10212,10,9227,6,"expr"],[10212,14,9227,10],[10212,17,9227,13],[10212,22,9227,18,"finishNode"],[10212,32,9227,13],[10212,33,9227,29,"node"],[10212,40,9227,13],[10212,42,9227,35],[10212,60,9227,13],[10212,61,9227,6],[10213,0,9228,5],[10215,0,9230,4],[10215,15,9230,11,"expr"],[10215,19,9230,4],[10216,0,9231,3],[10219,42,9233,22,"refShorthandDefaultPos"],[10219,64],[10219,66,9233,46],[10220,0,9234,4],[10220,12,9234,10,"startPos"],[10220,20,9234,18],[10220,23,9234,21],[10220,28,9234,26,"state"],[10220,33,9234,21],[10220,34,9234,32,"start"],[10220,39,9234,4],[10221,0,9235,4],[10221,12,9235,10,"startLoc"],[10221,20,9235,18],[10221,23,9235,21],[10221,28,9235,26,"state"],[10221,33,9235,21],[10221,34,9235,32,"startLoc"],[10221,42,9235,4],[10222,0,9236,4],[10222,12,9236,10,"potentialArrowAt"],[10222,28,9236,26],[10222,31,9236,29],[10222,36,9236,34,"state"],[10222,41,9236,29],[10222,42,9236,40,"potentialArrowAt"],[10222,58,9236,4],[10223,0,9237,4],[10223,12,9237,10,"expr"],[10223,16,9237,14],[10223,19,9237,17],[10223,24,9237,22,"parseExprAtom"],[10223,37,9237,17],[10223,38,9237,36,"refShorthandDefaultPos"],[10223,60,9237,17],[10223,61,9237,4],[10225,0,9239,4],[10225,12,9239,8,"expr"],[10225,16,9239,12],[10225,17,9239,13,"type"],[10225,21,9239,8],[10225,26,9239,22],[10225,51,9239,8],[10225,55,9239,51,"expr"],[10225,59,9239,55],[10225,60,9239,56,"start"],[10225,65,9239,51],[10225,70,9239,66,"potentialArrowAt"],[10225,86,9239,4],[10225,88,9239,84],[10226,0,9240,6],[10226,17,9240,13,"expr"],[10226,21,9240,6],[10227,0,9241,5],[10229,0,9243,4],[10229,12,9243,8,"refShorthandDefaultPos"],[10229,34,9243,30],[10229,38,9243,34,"refShorthandDefaultPos"],[10229,60,9243,56],[10229,61,9243,57,"start"],[10229,66,9243,4],[10229,68,9243,64],[10230,0,9244,6],[10230,17,9244,13,"expr"],[10230,21,9244,6],[10231,0,9245,5],[10233,0,9247,4],[10233,15,9247,11],[10233,20,9247,16,"parseSubscripts"],[10233,35,9247,11],[10233,36,9247,32,"expr"],[10233,40,9247,11],[10233,42,9247,38,"startPos"],[10233,50,9247,11],[10233,52,9247,48,"startLoc"],[10233,60,9247,11],[10233,61,9247,4],[10234,0,9248,3],[10237,38,9250,18,"base"],[10237,42],[10237,44,9250,24,"startPos"],[10237,52],[10237,54,9250,34,"startLoc"],[10237,62],[10237,64,9250,44,"noCalls"],[10237,71],[10237,73,9250,53],[10238,0,9251,4],[10238,12,9251,10,"state"],[10238,17,9251,15],[10238,20,9251,18],[10239,0,9252,6,"optionalChainMember"],[10239,10,9252,6,"optionalChainMember"],[10239,29,9252,25],[10239,31,9252,27],[10239,36,9251,18],[10240,0,9253,6,"maybeAsyncArrow"],[10240,10,9253,6,"maybeAsyncArrow"],[10240,25,9253,21],[10240,27,9253,23],[10240,32,9253,28,"atPossibleAsync"],[10240,47,9253,23],[10240,48,9253,44,"base"],[10240,52,9253,23],[10240,53,9251,18],[10241,0,9254,6,"stop"],[10241,10,9254,6,"stop"],[10241,14,9254,10],[10241,16,9254,12],[10242,0,9251,18],[10242,9,9251,4],[10244,0,9257,4],[10244,11,9257,7],[10245,0,9258,6,"base"],[10245,10,9258,6,"base"],[10245,14,9258,10],[10245,17,9258,13],[10245,22,9258,18,"parseSubscript"],[10245,36,9258,13],[10245,37,9258,33,"base"],[10245,41,9258,13],[10245,43,9258,39,"startPos"],[10245,51,9258,13],[10245,53,9258,49,"startLoc"],[10245,61,9258,13],[10245,63,9258,59,"noCalls"],[10245,70,9258,13],[10245,72,9258,68,"state"],[10245,77,9258,13],[10245,78,9258,6],[10246,0,9259,6,"state"],[10246,10,9259,6,"state"],[10246,15,9259,11],[10246,16,9259,12,"maybeAsyncArrow"],[10246,31,9259,6],[10246,34,9259,30],[10246,39,9259,6],[10247,0,9260,5],[10247,9,9257,4],[10247,17,9260,13],[10247,18,9260,14,"state"],[10247,23,9260,19],[10247,24,9260,20,"stop"],[10247,28,9257,4],[10249,0,9262,4],[10249,15,9262,11,"base"],[10249,19,9262,4],[10250,0,9263,3],[10253,37,9265,17,"base"],[10253,41],[10253,43,9265,23,"startPos"],[10253,51],[10253,53,9265,33,"startLoc"],[10253,61],[10253,63,9265,43,"noCalls"],[10253,70],[10253,72,9265,52,"state"],[10253,77],[10253,79,9265,59],[10254,0,9266,4],[10254,12,9266,8],[10254,13,9266,9,"noCalls"],[10254,20,9266,8],[10254,24,9266,20],[10254,29,9266,25,"eat"],[10254,32,9266,20],[10254,33,9266,29,"types"],[10254,38,9266,34],[10254,39,9266,35,"doubleColon"],[10254,50,9266,20],[10254,51,9266,4],[10254,53,9266,49],[10255,0,9267,6],[10255,14,9267,12,"node"],[10255,18,9267,16],[10255,21,9267,19],[10255,26,9267,24,"startNodeAt"],[10255,37,9267,19],[10255,38,9267,36,"startPos"],[10255,46,9267,19],[10255,48,9267,46,"startLoc"],[10255,56,9267,19],[10255,57,9267,6],[10256,0,9268,6,"node"],[10256,10,9268,6,"node"],[10256,14,9268,10],[10256,15,9268,11,"object"],[10256,21,9268,6],[10256,24,9268,20,"base"],[10256,28,9268,6],[10257,0,9269,6,"node"],[10257,10,9269,6,"node"],[10257,14,9269,10],[10257,15,9269,11,"callee"],[10257,21,9269,6],[10257,24,9269,20],[10257,29,9269,25,"parseNoCallExpr"],[10257,44,9269,20],[10257,46,9269,6],[10258,0,9270,6,"state"],[10258,10,9270,6,"state"],[10258,15,9270,11],[10258,16,9270,12,"stop"],[10258,20,9270,6],[10258,23,9270,19],[10258,27,9270,6],[10259,0,9271,6],[10259,17,9271,13],[10259,22,9271,18,"parseSubscripts"],[10259,37,9271,13],[10259,38,9271,34],[10259,43,9271,39,"finishNode"],[10259,53,9271,34],[10259,54,9271,50,"node"],[10259,58,9271,34],[10259,60,9271,56],[10259,76,9271,34],[10259,77,9271,13],[10259,79,9271,75,"startPos"],[10259,87,9271,13],[10259,89,9271,85,"startLoc"],[10259,97,9271,13],[10259,99,9271,95,"noCalls"],[10259,106,9271,13],[10259,107,9271,6],[10260,0,9272,5],[10260,9,9266,4],[10260,15,9272,11],[10260,19,9272,15],[10260,24,9272,20,"match"],[10260,29,9272,15],[10260,30,9272,26,"types"],[10260,35,9272,31],[10260,36,9272,32,"questionDot"],[10260,47,9272,15],[10260,48,9272,11],[10260,50,9272,46],[10261,0,9273,6],[10261,15,9273,11,"expectPlugin"],[10261,27,9273,6],[10261,28,9273,24],[10261,46,9273,6],[10262,0,9274,6,"state"],[10262,10,9274,6,"state"],[10262,15,9274,11],[10262,16,9274,12,"optionalChainMember"],[10262,35,9274,6],[10262,38,9274,34],[10262,42,9274,6],[10264,0,9276,6],[10264,14,9276,10,"noCalls"],[10264,21,9276,17],[10264,25,9276,21],[10264,30,9276,26,"lookaheadCharCode"],[10264,47,9276,21],[10264,54,9276,50],[10264,56,9276,6],[10264,58,9276,54],[10265,0,9277,8,"state"],[10265,12,9277,8,"state"],[10265,17,9277,13],[10265,18,9277,14,"stop"],[10265,22,9277,8],[10265,25,9277,21],[10265,29,9277,8],[10266,0,9278,8],[10266,19,9278,15,"base"],[10266,23,9278,8],[10267,0,9279,7],[10269,0,9281,6],[10269,15,9281,11,"next"],[10269,19,9281,6],[10271,0,9282,6],[10271,14,9282,12,"node"],[10271,21,9282,16],[10271,24,9282,19],[10271,29,9282,24,"startNodeAt"],[10271,40,9282,19],[10271,41,9282,36,"startPos"],[10271,49,9282,19],[10271,51,9282,46,"startLoc"],[10271,59,9282,19],[10271,60,9282,6],[10273,0,9284,6],[10273,14,9284,10],[10273,19,9284,15,"eat"],[10273,22,9284,10],[10273,23,9284,19,"types"],[10273,28,9284,24],[10273,29,9284,25,"bracketL"],[10273,37,9284,10],[10273,38,9284,6],[10273,40,9284,36],[10274,0,9285,8,"node"],[10274,12,9285,8,"node"],[10274,19,9285,12],[10274,20,9285,13,"object"],[10274,26,9285,8],[10274,29,9285,22,"base"],[10274,33,9285,8],[10275,0,9286,8,"node"],[10275,12,9286,8,"node"],[10275,19,9286,12],[10275,20,9286,13,"property"],[10275,28,9286,8],[10275,31,9286,24],[10275,36,9286,29,"parseExpression"],[10275,51,9286,24],[10275,53,9286,8],[10276,0,9287,8,"node"],[10276,12,9287,8,"node"],[10276,19,9287,12],[10276,20,9287,13,"computed"],[10276,28,9287,8],[10276,31,9287,24],[10276,35,9287,8],[10277,0,9288,8,"node"],[10277,12,9288,8,"node"],[10277,19,9288,12],[10277,20,9288,13,"optional"],[10277,28,9288,8],[10277,31,9288,24],[10277,35,9288,8],[10278,0,9289,8],[10278,17,9289,13,"expect"],[10278,23,9289,8],[10278,24,9289,20,"types"],[10278,29,9289,25],[10278,30,9289,26,"bracketR"],[10278,38,9289,8],[10279,0,9290,8],[10279,19,9290,15],[10279,24,9290,20,"finishNode"],[10279,34,9290,15],[10279,35,9290,31,"node"],[10279,42,9290,15],[10279,44,9290,37],[10279,70,9290,15],[10279,71,9290,8],[10280,0,9291,7],[10280,11,9284,6],[10280,17,9291,13],[10280,21,9291,17],[10280,26,9291,22,"eat"],[10280,29,9291,17],[10280,30,9291,26,"types"],[10280,35,9291,31],[10280,36,9291,32,"parenL"],[10280,42,9291,17],[10280,43,9291,13],[10280,45,9291,41],[10281,0,9292,8,"node"],[10281,12,9292,8,"node"],[10281,19,9292,12],[10281,20,9292,13,"callee"],[10281,26,9292,8],[10281,29,9292,22,"base"],[10281,33,9292,8],[10282,0,9293,8,"node"],[10282,12,9293,8,"node"],[10282,19,9293,12],[10282,20,9293,13,"arguments"],[10282,29,9293,8],[10282,32,9293,25],[10282,37,9293,30,"parseCallExpressionArguments"],[10282,65,9293,25],[10282,66,9293,59,"types"],[10282,71,9293,64],[10282,72,9293,65,"parenR"],[10282,78,9293,25],[10282,80,9293,73],[10282,85,9293,25],[10282,86,9293,8],[10283,0,9294,8,"node"],[10283,12,9294,8,"node"],[10283,19,9294,12],[10283,20,9294,13,"optional"],[10283,28,9294,8],[10283,31,9294,24],[10283,35,9294,8],[10284,0,9295,8],[10284,19,9295,15],[10284,24,9295,20,"finishCallExpression"],[10284,44,9295,15],[10284,45,9295,41,"node"],[10284,52,9295,15],[10284,54,9295,47],[10284,58,9295,15],[10284,59,9295,8],[10285,0,9296,7],[10285,11,9291,13],[10285,17,9296,13],[10286,0,9297,8,"node"],[10286,12,9297,8,"node"],[10286,19,9297,12],[10286,20,9297,13,"object"],[10286,26,9297,8],[10286,29,9297,22,"base"],[10286,33,9297,8],[10287,0,9298,8,"node"],[10287,12,9298,8,"node"],[10287,19,9298,12],[10287,20,9298,13,"property"],[10287,28,9298,8],[10287,31,9298,24],[10287,36,9298,29,"parseIdentifier"],[10287,51,9298,24],[10287,52,9298,45],[10287,56,9298,24],[10287,57,9298,8],[10288,0,9299,8,"node"],[10288,12,9299,8,"node"],[10288,19,9299,12],[10288,20,9299,13,"computed"],[10288,28,9299,8],[10288,31,9299,24],[10288,36,9299,8],[10289,0,9300,8,"node"],[10289,12,9300,8,"node"],[10289,19,9300,12],[10289,20,9300,13,"optional"],[10289,28,9300,8],[10289,31,9300,24],[10289,35,9300,8],[10290,0,9301,8],[10290,19,9301,15],[10290,24,9301,20,"finishNode"],[10290,34,9301,15],[10290,35,9301,31,"node"],[10290,42,9301,15],[10290,44,9301,37],[10290,70,9301,15],[10290,71,9301,8],[10291,0,9302,7],[10292,0,9303,5],[10292,9,9272,11],[10292,15,9303,11],[10292,19,9303,15],[10292,24,9303,20,"eat"],[10292,27,9303,15],[10292,28,9303,24,"types"],[10292,33,9303,29],[10292,34,9303,30,"dot"],[10292,37,9303,15],[10292,38,9303,11],[10292,40,9303,36],[10293,0,9304,6],[10293,14,9304,12,"node"],[10293,21,9304,16],[10293,24,9304,19],[10293,29,9304,24,"startNodeAt"],[10293,40,9304,19],[10293,41,9304,36,"startPos"],[10293,49,9304,19],[10293,51,9304,46,"startLoc"],[10293,59,9304,19],[10293,60,9304,6],[10295,0,9305,6,"node"],[10295,10,9305,6,"node"],[10295,17,9305,10],[10295,18,9305,11,"object"],[10295,24,9305,6],[10295,27,9305,20,"base"],[10295,31,9305,6],[10296,0,9306,6,"node"],[10296,10,9306,6,"node"],[10296,17,9306,10],[10296,18,9306,11,"property"],[10296,26,9306,6],[10296,29,9306,22],[10296,34,9306,27,"parseMaybePrivateName"],[10296,55,9306,22],[10296,57,9306,6],[10297,0,9307,6,"node"],[10297,10,9307,6,"node"],[10297,17,9307,10],[10297,18,9307,11,"computed"],[10297,26,9307,6],[10297,29,9307,22],[10297,34,9307,6],[10299,0,9309,6],[10299,14,9309,10,"node"],[10299,21,9309,14],[10299,22,9309,15,"property"],[10299,30,9309,10],[10299,31,9309,24,"type"],[10299,35,9309,10],[10299,40,9309,33],[10299,53,9309,10],[10299,57,9309,50,"node"],[10299,64,9309,54],[10299,65,9309,55,"object"],[10299,71,9309,50],[10299,72,9309,62,"type"],[10299,76,9309,50],[10299,81,9309,71],[10299,88,9309,6],[10299,90,9309,80],[10300,0,9310,8],[10300,17,9310,13,"raise"],[10300,22,9310,8],[10300,23,9310,19,"startPos"],[10300,31,9310,8],[10300,33,9310,29],[10300,76,9310,8],[10301,0,9311,7],[10303,0,9313,6],[10303,14,9313,10,"state"],[10303,19,9313,15],[10303,20,9313,16,"optionalChainMember"],[10303,39,9313,6],[10303,41,9313,37],[10304,0,9314,8,"node"],[10304,12,9314,8,"node"],[10304,19,9314,12],[10304,20,9314,13,"optional"],[10304,28,9314,8],[10304,31,9314,24],[10304,36,9314,8],[10305,0,9315,8],[10305,19,9315,15],[10305,24,9315,20,"finishNode"],[10305,34,9315,15],[10305,35,9315,31,"node"],[10305,42,9315,15],[10305,44,9315,37],[10305,70,9315,15],[10305,71,9315,8],[10306,0,9316,7],[10308,0,9318,6],[10308,17,9318,13],[10308,22,9318,18,"finishNode"],[10308,32,9318,13],[10308,33,9318,29,"node"],[10308,40,9318,13],[10308,42,9318,35],[10308,60,9318,13],[10308,61,9318,6],[10309,0,9319,5],[10309,9,9303,11],[10309,15,9319,11],[10309,19,9319,15],[10309,24,9319,20,"eat"],[10309,27,9319,15],[10309,28,9319,24,"types"],[10309,33,9319,29],[10309,34,9319,30,"bracketL"],[10309,42,9319,15],[10309,43,9319,11],[10309,45,9319,41],[10310,0,9320,6],[10310,14,9320,12,"node"],[10310,21,9320,16],[10310,24,9320,19],[10310,29,9320,24,"startNodeAt"],[10310,40,9320,19],[10310,41,9320,36,"startPos"],[10310,49,9320,19],[10310,51,9320,46,"startLoc"],[10310,59,9320,19],[10310,60,9320,6],[10312,0,9321,6,"node"],[10312,10,9321,6,"node"],[10312,17,9321,10],[10312,18,9321,11,"object"],[10312,24,9321,6],[10312,27,9321,20,"base"],[10312,31,9321,6],[10313,0,9322,6,"node"],[10313,10,9322,6,"node"],[10313,17,9322,10],[10313,18,9322,11,"property"],[10313,26,9322,6],[10313,29,9322,22],[10313,34,9322,27,"parseExpression"],[10313,49,9322,22],[10313,51,9322,6],[10314,0,9323,6,"node"],[10314,10,9323,6,"node"],[10314,17,9323,10],[10314,18,9323,11,"computed"],[10314,26,9323,6],[10314,29,9323,22],[10314,33,9323,6],[10315,0,9324,6],[10315,15,9324,11,"expect"],[10315,21,9324,6],[10315,22,9324,18,"types"],[10315,27,9324,23],[10315,28,9324,24,"bracketR"],[10315,36,9324,6],[10317,0,9326,6],[10317,14,9326,10,"state"],[10317,19,9326,15],[10317,20,9326,16,"optionalChainMember"],[10317,39,9326,6],[10317,41,9326,37],[10318,0,9327,8,"node"],[10318,12,9327,8,"node"],[10318,19,9327,12],[10318,20,9327,13,"optional"],[10318,28,9327,8],[10318,31,9327,24],[10318,36,9327,8],[10319,0,9328,8],[10319,19,9328,15],[10319,24,9328,20,"finishNode"],[10319,34,9328,15],[10319,35,9328,31,"node"],[10319,42,9328,15],[10319,44,9328,37],[10319,70,9328,15],[10319,71,9328,8],[10320,0,9329,7],[10322,0,9331,6],[10322,17,9331,13],[10322,22,9331,18,"finishNode"],[10322,32,9331,13],[10322,33,9331,29,"node"],[10322,40,9331,13],[10322,42,9331,35],[10322,60,9331,13],[10322,61,9331,6],[10323,0,9332,5],[10323,9,9319,11],[10323,15,9332,11],[10323,19,9332,15],[10323,20,9332,16,"noCalls"],[10323,27,9332,15],[10323,31,9332,27],[10323,36,9332,32,"match"],[10323,41,9332,27],[10323,42,9332,38,"types"],[10323,47,9332,43],[10323,48,9332,44,"parenL"],[10323,54,9332,27],[10323,55,9332,11],[10323,57,9332,53],[10324,0,9333,6],[10324,14,9333,12,"oldMaybeInArrowParameters"],[10324,39,9333,37],[10324,42,9333,40],[10324,47,9333,45,"state"],[10324,52,9333,40],[10324,53,9333,51,"maybeInArrowParameters"],[10324,75,9333,6],[10325,0,9334,6],[10325,14,9334,12,"oldYieldPos"],[10325,25,9334,23],[10325,28,9334,26],[10325,33,9334,31,"state"],[10325,38,9334,26],[10325,39,9334,37,"yieldPos"],[10325,47,9334,6],[10326,0,9335,6],[10326,14,9335,12,"oldAwaitPos"],[10326,25,9335,23],[10326,28,9335,26],[10326,33,9335,31,"state"],[10326,38,9335,26],[10326,39,9335,37,"awaitPos"],[10326,47,9335,6],[10327,0,9336,6],[10327,15,9336,11,"state"],[10327,20,9336,6],[10327,21,9336,17,"maybeInArrowParameters"],[10327,43,9336,6],[10327,46,9336,42],[10327,50,9336,6],[10328,0,9337,6],[10328,15,9337,11,"state"],[10328,20,9337,6],[10328,21,9337,17,"yieldPos"],[10328,29,9337,6],[10328,32,9337,28],[10328,33,9337,29],[10328,34,9337,6],[10329,0,9338,6],[10329,15,9338,11,"state"],[10329,20,9338,6],[10329,21,9338,17,"awaitPos"],[10329,29,9338,6],[10329,32,9338,28],[10329,33,9338,29],[10329,34,9338,6],[10330,0,9339,6],[10330,15,9339,11,"next"],[10330,19,9339,6],[10332,0,9340,6],[10332,14,9340,10,"node"],[10332,21,9340,14],[10332,24,9340,17],[10332,29,9340,22,"startNodeAt"],[10332,40,9340,17],[10332,41,9340,34,"startPos"],[10332,49,9340,17],[10332,51,9340,44,"startLoc"],[10332,59,9340,17],[10332,60,9340,6],[10334,0,9341,6,"node"],[10334,10,9341,6,"node"],[10334,17,9341,10],[10334,18,9341,11,"callee"],[10334,24,9341,6],[10334,27,9341,20,"base"],[10334,31,9341,6],[10335,0,9342,6,"node"],[10335,10,9342,6,"node"],[10335,17,9342,10],[10335,18,9342,11,"arguments"],[10335,27,9342,6],[10335,30,9342,23],[10335,35,9342,28,"parseCallExpressionArguments"],[10335,63,9342,23],[10335,64,9342,57,"types"],[10335,69,9342,62],[10335,70,9342,63,"parenR"],[10335,76,9342,23],[10335,78,9342,71,"state"],[10335,83,9342,76],[10335,84,9342,77,"maybeAsyncArrow"],[10335,99,9342,23],[10335,101,9342,94,"base"],[10335,105,9342,98],[10335,106,9342,99,"type"],[10335,110,9342,94],[10335,115,9342,108],[10335,123,9342,23],[10335,125,9342,118,"base"],[10335,129,9342,122],[10335,130,9342,123,"type"],[10335,134,9342,118],[10335,139,9342,132],[10335,146,9342,23],[10335,148,9342,141,"node"],[10335,155,9342,23],[10335,156,9342,6],[10336,0,9343,6],[10336,15,9343,11,"finishCallExpression"],[10336,35,9343,6],[10336,36,9343,32,"node"],[10336,43,9343,6],[10336,45,9343,38,"state"],[10336,50,9343,43],[10336,51,9343,44,"optionalChainMember"],[10336,70,9343,6],[10338,0,9345,6],[10338,14,9345,10,"state"],[10338,19,9345,15],[10338,20,9345,16,"maybeAsyncArrow"],[10338,35,9345,10],[10338,39,9345,35],[10338,44,9345,40,"shouldParseAsyncArrow"],[10338,65,9345,35],[10338,67,9345,6],[10338,69,9345,65],[10339,0,9346,8,"state"],[10339,12,9346,8,"state"],[10339,17,9346,13],[10339,18,9346,14,"stop"],[10339,22,9346,8],[10339,25,9346,21],[10339,29,9346,8],[10340,0,9347,8,"node"],[10340,12,9347,8,"node"],[10340,19,9347,12],[10340,22,9347,15],[10340,27,9347,20,"parseAsyncArrowFromCallExpression"],[10340,60,9347,15],[10340,61,9347,54],[10340,66,9347,59,"startNodeAt"],[10340,77,9347,54],[10340,78,9347,71,"startPos"],[10340,86,9347,54],[10340,88,9347,81,"startLoc"],[10340,96,9347,54],[10340,97,9347,15],[10340,99,9347,92,"node"],[10340,106,9347,15],[10340,107,9347,8],[10341,0,9348,8],[10341,17,9348,13,"checkYieldAwaitInDefaultParams"],[10341,47,9348,8],[10342,0,9349,8],[10342,17,9349,13,"state"],[10342,22,9349,8],[10342,23,9349,19,"yieldPos"],[10342,31,9349,8],[10342,34,9349,30,"oldYieldPos"],[10342,45,9349,8],[10343,0,9350,8],[10343,17,9350,13,"state"],[10343,22,9350,8],[10343,23,9350,19,"awaitPos"],[10343,31,9350,8],[10343,34,9350,30,"oldAwaitPos"],[10343,45,9350,8],[10344,0,9351,7],[10344,11,9345,6],[10344,17,9351,13],[10345,0,9352,8],[10345,17,9352,13,"toReferencedListDeep"],[10345,37,9352,8],[10345,38,9352,34,"node"],[10345,45,9352,38],[10345,46,9352,39,"arguments"],[10345,55,9352,8],[10346,0,9353,8],[10346,16,9353,12,"oldYieldPos"],[10346,27,9353,23],[10346,32,9353,28],[10346,33,9353,29],[10346,34,9353,8],[10346,36,9353,32],[10346,41,9353,37,"state"],[10346,46,9353,32],[10346,47,9353,43,"yieldPos"],[10346,55,9353,32],[10346,58,9353,54,"oldYieldPos"],[10346,69,9353,32],[10348,0,9355,8],[10348,16,9355,12],[10348,17,9355,13],[10348,22,9355,18,"isAwaitAllowed"],[10348,36,9355,13],[10348,38,9355,12],[10348,42,9355,38],[10348,43,9355,39,"oldMaybeInArrowParameters"],[10348,68,9355,12],[10348,72,9355,68,"oldAwaitPos"],[10348,83,9355,79],[10348,88,9355,84],[10348,89,9355,85],[10348,90,9355,8],[10348,92,9355,88],[10349,0,9356,10],[10349,19,9356,15,"state"],[10349,24,9356,10],[10349,25,9356,21,"awaitPos"],[10349,33,9356,10],[10349,36,9356,32,"oldAwaitPos"],[10349,47,9356,10],[10350,0,9357,9],[10351,0,9358,7],[10353,0,9360,6],[10353,15,9360,11,"state"],[10353,20,9360,6],[10353,21,9360,17,"maybeInArrowParameters"],[10353,43,9360,6],[10353,46,9360,42,"oldMaybeInArrowParameters"],[10353,71,9360,6],[10354,0,9361,6],[10354,17,9361,13,"node"],[10354,24,9361,6],[10355,0,9362,5],[10355,9,9332,11],[10355,15,9362,11],[10355,19,9362,15],[10355,24,9362,20,"match"],[10355,29,9362,15],[10355,30,9362,26,"types"],[10355,35,9362,31],[10355,36,9362,32,"backQuote"],[10355,45,9362,15],[10355,46,9362,11],[10355,48,9362,44],[10356,0,9363,6],[10356,17,9363,13],[10356,22,9363,18,"parseTaggedTemplateExpression"],[10356,51,9363,13],[10356,52,9363,48,"startPos"],[10356,60,9363,13],[10356,62,9363,58,"startLoc"],[10356,70,9363,13],[10356,72,9363,68,"base"],[10356,76,9363,13],[10356,78,9363,74,"state"],[10356,83,9363,13],[10356,84,9363,6],[10357,0,9364,5],[10357,9,9362,11],[10357,15,9364,11],[10358,0,9365,6,"state"],[10358,10,9365,6,"state"],[10358,15,9365,11],[10358,16,9365,12,"stop"],[10358,20,9365,6],[10358,23,9365,19],[10358,27,9365,6],[10359,0,9366,6],[10359,17,9366,13,"base"],[10359,21,9366,6],[10360,0,9367,5],[10361,0,9368,3],[10364,52,9370,32,"startPos"],[10364,60],[10364,62,9370,42,"startLoc"],[10364,70],[10364,72,9370,52,"base"],[10364,76],[10364,78,9370,58,"state"],[10364,83],[10364,85,9370,65,"typeArguments"],[10364,98],[10364,100,9370,80],[10365,0,9371,4],[10365,12,9371,10,"node"],[10365,16,9371,14],[10365,19,9371,17],[10365,24,9371,22,"startNodeAt"],[10365,35,9371,17],[10365,36,9371,34,"startPos"],[10365,44,9371,17],[10365,46,9371,44,"startLoc"],[10365,54,9371,17],[10365,55,9371,4],[10366,0,9372,4,"node"],[10366,8,9372,4,"node"],[10366,12,9372,8],[10366,13,9372,9,"tag"],[10366,16,9372,4],[10366,19,9372,15,"base"],[10366,23,9372,4],[10367,0,9373,4,"node"],[10367,8,9373,4,"node"],[10367,12,9373,8],[10367,13,9373,9,"quasi"],[10367,18,9373,4],[10367,21,9373,17],[10367,26,9373,22,"parseTemplate"],[10367,39,9373,17],[10367,40,9373,36],[10367,44,9373,17],[10367,45,9373,4],[10368,0,9374,4],[10368,12,9374,8,"typeArguments"],[10368,25,9374,4],[10368,27,9374,23,"node"],[10368,31,9374,27],[10368,32,9374,28,"typeParameters"],[10368,46,9374,23],[10368,49,9374,45,"typeArguments"],[10368,62,9374,23],[10370,0,9376,4],[10370,12,9376,8,"state"],[10370,17,9376,13],[10370,18,9376,14,"optionalChainMember"],[10370,37,9376,4],[10370,39,9376,35],[10371,0,9377,6],[10371,15,9377,11,"raise"],[10371,20,9377,6],[10371,21,9377,17,"startPos"],[10371,29,9377,6],[10371,31,9377,27],[10371,90,9377,6],[10372,0,9378,5],[10374,0,9380,4],[10374,15,9380,11],[10374,20,9380,16,"finishNode"],[10374,30,9380,11],[10374,31,9380,27,"node"],[10374,35,9380,11],[10374,37,9380,33],[10374,63,9380,11],[10374,64,9380,4],[10375,0,9381,3],[10378,38,9383,18,"base"],[10378,42],[10378,44,9383,24],[10379,0,9384,4],[10379,15,9384,11,"base"],[10379,19,9384,15],[10379,20,9384,16,"type"],[10379,24,9384,11],[10379,29,9384,25],[10379,41,9384,11],[10379,45,9384,41,"base"],[10379,49,9384,45],[10379,50,9384,46,"name"],[10379,54,9384,41],[10379,59,9384,55],[10379,66,9384,11],[10379,70,9384,66],[10379,75,9384,71,"state"],[10379,80,9384,66],[10379,81,9384,77,"lastTokEnd"],[10379,91,9384,66],[10379,96,9384,92,"base"],[10379,100,9384,96],[10379,101,9384,97,"end"],[10379,104,9384,11],[10379,108,9384,104],[10379,109,9384,105],[10379,114,9384,110,"canInsertSemicolon"],[10379,132,9384,105],[10379,134,9384,11],[10379,138,9384,134],[10379,143,9384,139,"input"],[10379,148,9384,134],[10379,149,9384,145,"slice"],[10379,154,9384,134],[10379,155,9384,151,"base"],[10379,159,9384,155],[10379,160,9384,156,"start"],[10379,165,9384,134],[10379,167,9384,163,"base"],[10379,171,9384,167],[10379,172,9384,168,"end"],[10379,175,9384,134],[10379,181,9384,177],[10379,188,9384,4],[10380,0,9385,3],[10383,43,9387,23,"node"],[10383,47],[10383,49,9387,29,"optional"],[10383,57],[10383,59,9387,39],[10384,0,9388,4],[10384,12,9388,8,"node"],[10384,16,9388,12],[10384,17,9388,13,"callee"],[10384,23,9388,8],[10384,24,9388,20,"type"],[10384,28,9388,8],[10384,33,9388,29],[10384,41,9388,4],[10384,43,9388,39],[10385,0,9389,6],[10385,14,9389,10,"node"],[10385,18,9389,14],[10385,19,9389,15,"arguments"],[10385,28,9389,10],[10385,29,9389,25,"length"],[10385,35,9389,10],[10385,40,9389,36],[10385,41,9389,6],[10385,43,9389,39],[10386,0,9390,8],[10386,17,9390,13,"raise"],[10386,22,9390,8],[10386,23,9390,19,"node"],[10386,27,9390,23],[10386,28,9390,24,"start"],[10386,33,9390,8],[10386,35,9390,31],[10386,75,9390,8],[10387,0,9391,7],[10387,11,9389,6],[10387,17,9391,13],[10388,0,9392,8],[10388,16,9392,14,"importArg"],[10388,25,9392,23],[10388,28,9392,26,"node"],[10388,32,9392,30],[10388,33,9392,31,"arguments"],[10388,42,9392,26],[10388,43,9392,41],[10388,44,9392,26],[10388,45,9392,8],[10390,0,9394,8],[10390,16,9394,12,"importArg"],[10390,25,9394,21],[10390,29,9394,25,"importArg"],[10390,38,9394,34],[10390,39,9394,35,"type"],[10390,43,9394,25],[10390,48,9394,44],[10390,63,9394,8],[10390,65,9394,61],[10391,0,9395,10],[10391,19,9395,15,"raise"],[10391,24,9395,10],[10391,25,9395,21,"importArg"],[10391,34,9395,30],[10391,35,9395,31,"start"],[10391,40,9395,10],[10391,42,9395,38],[10391,74,9395,10],[10392,0,9396,9],[10393,0,9397,7],[10394,0,9398,5],[10396,0,9400,4],[10396,15,9400,11],[10396,20,9400,16,"finishNode"],[10396,30,9400,11],[10396,31,9400,27,"node"],[10396,35,9400,11],[10396,37,9400,33,"optional"],[10396,45,9400,41],[10396,48,9400,44],[10396,72,9400,41],[10396,75,9400,71],[10396,91,9400,11],[10396,92,9400,4],[10397,0,9401,3],[10400,51,9403,31,"close"],[10400,56],[10400,58,9403,38,"possibleAsyncArrow"],[10400,76],[10400,78,9403,58,"dynamicImport"],[10400,91],[10400,93,9403,73,"allowPlaceholder"],[10400,109],[10400,111,9403,91,"nodeForExtra"],[10400,123],[10400,125,9403,105],[10401,0,9404,4],[10401,12,9404,10,"elts"],[10401,16,9404,14],[10401,19,9404,17],[10401,21,9404,4],[10402,0,9405,4],[10402,12,9405,8,"innerParenStart"],[10402,27,9405,4],[10403,0,9406,4],[10403,12,9406,8,"first"],[10403,17,9406,13],[10403,20,9406,16],[10403,24,9406,4],[10404,0,9407,4],[10404,12,9407,10,"oldInFSharpPipelineDirectBody"],[10404,41,9407,39],[10404,44,9407,42],[10404,49,9407,47,"state"],[10404,54,9407,42],[10404,55,9407,53,"inFSharpPipelineDirectBody"],[10404,81,9407,4],[10405,0,9408,4],[10405,13,9408,9,"state"],[10405,18,9408,4],[10405,19,9408,15,"inFSharpPipelineDirectBody"],[10405,45,9408,4],[10405,48,9408,44],[10405,53,9408,4],[10407,0,9410,4],[10407,15,9410,11],[10407,16,9410,12],[10407,21,9410,17,"eat"],[10407,24,9410,12],[10407,25,9410,21,"close"],[10407,30,9410,12],[10407,31,9410,4],[10407,33,9410,29],[10408,0,9411,6],[10408,14,9411,10,"first"],[10408,19,9411,6],[10408,21,9411,17],[10409,0,9412,8,"first"],[10409,12,9412,8,"first"],[10409,17,9412,13],[10409,20,9412,16],[10409,25,9412,8],[10410,0,9413,7],[10410,11,9411,6],[10410,17,9413,13],[10411,0,9414,8],[10411,17,9414,13,"expect"],[10411,23,9414,8],[10411,24,9414,20,"types"],[10411,29,9414,25],[10411,30,9414,26,"comma"],[10411,35,9414,8],[10413,0,9416,8],[10413,16,9416,12],[10413,21,9416,17,"match"],[10413,26,9416,12],[10413,27,9416,23,"close"],[10413,32,9416,12],[10413,33,9416,8],[10413,35,9416,31],[10414,0,9417,10],[10414,18,9417,14,"dynamicImport"],[10414,31,9417,10],[10414,33,9417,29],[10415,0,9418,12],[10415,21,9418,17,"raise"],[10415,26,9418,12],[10415,27,9418,23],[10415,32,9418,28,"state"],[10415,37,9418,23],[10415,38,9418,34,"lastTokStart"],[10415,50,9418,12],[10415,52,9418,48],[10415,111,9418,12],[10416,0,9419,11],[10418,0,9421,10],[10418,18,9421,14,"nodeForExtra"],[10418,30,9421,10],[10418,32,9421,28],[10419,0,9422,12],[10419,21,9422,17,"addExtra"],[10419,29,9422,12],[10419,30,9422,26,"nodeForExtra"],[10419,42,9422,12],[10419,44,9422,40],[10419,59,9422,12],[10419,61,9422,57],[10419,66,9422,62,"state"],[10419,71,9422,57],[10419,72,9422,68,"lastTokStart"],[10419,84,9422,12],[10420,0,9423,11],[10422,0,9425,10],[10422,19,9425,15,"next"],[10422,23,9425,10],[10423,0,9426,10],[10424,0,9427,9],[10425,0,9428,7],[10427,0,9430,6],[10427,14,9430,10],[10427,19,9430,15,"match"],[10427,24,9430,10],[10427,25,9430,21,"types"],[10427,30,9430,26],[10427,31,9430,27,"parenL"],[10427,37,9430,10],[10427,42,9430,38],[10427,43,9430,39,"innerParenStart"],[10427,58,9430,6],[10427,60,9430,56],[10428,0,9431,8,"innerParenStart"],[10428,12,9431,8,"innerParenStart"],[10428,27,9431,23],[10428,30,9431,26],[10428,35,9431,31,"state"],[10428,40,9431,26],[10428,41,9431,37,"start"],[10428,46,9431,8],[10429,0,9432,7],[10431,0,9434,6,"elts"],[10431,10,9434,6,"elts"],[10431,14,9434,10],[10431,15,9434,11,"push"],[10431,19,9434,6],[10431,20,9434,16],[10431,25,9434,21,"parseExprListItem"],[10431,42,9434,16],[10431,43,9434,39],[10431,48,9434,16],[10431,50,9434,46,"possibleAsyncArrow"],[10431,68,9434,64],[10431,71,9434,67],[10432,0,9435,8,"start"],[10432,12,9435,8,"start"],[10432,17,9435,13],[10432,19,9435,15],[10433,0,9434,67],[10433,11,9434,64],[10433,14,9436,10,"undefined"],[10433,23,9434,16],[10433,25,9436,21,"possibleAsyncArrow"],[10433,43,9436,39],[10433,46,9436,42],[10434,0,9437,8,"start"],[10434,12,9437,8,"start"],[10434,17,9437,13],[10434,19,9437,15],[10435,0,9436,42],[10435,11,9436,39],[10435,14,9438,10,"undefined"],[10435,23,9434,16],[10435,25,9438,21,"allowPlaceholder"],[10435,41,9434,16],[10435,42,9434,6],[10436,0,9439,5],[10438,0,9441,4],[10438,12,9441,8,"possibleAsyncArrow"],[10438,30,9441,26],[10438,34,9441,30,"innerParenStart"],[10438,49,9441,8],[10438,53,9441,49],[10438,58,9441,54,"shouldParseAsyncArrow"],[10438,79,9441,49],[10438,81,9441,4],[10438,83,9441,79],[10439,0,9442,6],[10439,15,9442,11,"unexpected"],[10439,25,9442,6],[10440,0,9443,5],[10442,0,9445,4],[10442,13,9445,9,"state"],[10442,18,9445,4],[10442,19,9445,15,"inFSharpPipelineDirectBody"],[10442,45,9445,4],[10442,48,9445,44,"oldInFSharpPipelineDirectBody"],[10442,77,9445,4],[10443,0,9446,4],[10443,15,9446,11,"elts"],[10443,19,9446,4],[10444,0,9447,3],[10447,46,9449,26],[10448,0,9450,4],[10448,15,9450,11],[10448,20,9450,16,"match"],[10448,25,9450,11],[10448,26,9450,22,"types"],[10448,31,9450,27],[10448,32,9450,28,"arrow"],[10448,37,9450,11],[10448,42,9450,38],[10448,43,9450,39],[10448,48,9450,44,"canInsertSemicolon"],[10448,66,9450,39],[10448,68,9450,4],[10449,0,9451,3],[10452,56,9453,36,"node"],[10452,60],[10452,62,9453,42,"call"],[10452,66],[10452,68,9453,48],[10453,0,9454,4],[10453,12,9454,8,"_call$extra"],[10453,23,9454,4],[10455,0,9456,4],[10455,13,9456,9,"expect"],[10455,19,9456,4],[10455,20,9456,16,"types"],[10455,25,9456,21],[10455,26,9456,22,"arrow"],[10455,31,9456,4],[10456,0,9457,4],[10456,13,9457,9,"parseArrowExpression"],[10456,33,9457,4],[10456,34,9457,30,"node"],[10456,38,9457,4],[10456,40,9457,36,"call"],[10456,44,9457,40],[10456,45,9457,41,"arguments"],[10456,54,9457,4],[10456,56,9457,52],[10456,60,9457,4],[10456,62,9457,58],[10456,63,9457,59,"_call$extra"],[10456,74,9457,70],[10456,77,9457,73,"call"],[10456,81,9457,77],[10456,82,9457,78,"extra"],[10456,87,9457,58],[10456,92,9457,88],[10456,96,9457,58],[10456,99,9457,95],[10456,104,9457,100],[10456,105,9457,58],[10456,108,9457,104,"_call$extra"],[10456,119,9457,115],[10456,120,9457,116,"trailingComma"],[10456,133,9457,4],[10457,0,9458,4],[10457,15,9458,11,"node"],[10457,19,9458,4],[10458,0,9459,3],[10461,40,9461,20],[10462,0,9462,4],[10462,12,9462,10,"startPos"],[10462,20,9462,18],[10462,23,9462,21],[10462,28,9462,26,"state"],[10462,33,9462,21],[10462,34,9462,32,"start"],[10462,39,9462,4],[10463,0,9463,4],[10463,12,9463,10,"startLoc"],[10463,20,9463,18],[10463,23,9463,21],[10463,28,9463,26,"state"],[10463,33,9463,21],[10463,34,9463,32,"startLoc"],[10463,42,9463,4],[10464,0,9464,4],[10464,15,9464,11],[10464,20,9464,16,"parseSubscripts"],[10464,35,9464,11],[10464,36,9464,32],[10464,41,9464,37,"parseExprAtom"],[10464,54,9464,32],[10464,56,9464,11],[10464,58,9464,54,"startPos"],[10464,66,9464,11],[10464,68,9464,64,"startLoc"],[10464,76,9464,11],[10464,78,9464,74],[10464,82,9464,11],[10464,83,9464,4],[10465,0,9465,3],[10468,36,9467,16,"refShorthandDefaultPos"],[10468,58],[10468,60,9467,40],[10469,0,9468,4],[10469,12,9468,8],[10469,17,9468,13,"state"],[10469,22,9468,8],[10469,23,9468,19,"type"],[10469,27,9468,8],[10469,32,9468,28,"types"],[10469,37,9468,33],[10469,38,9468,34,"slash"],[10469,43,9468,4],[10469,45,9468,41],[10469,50,9468,46,"readRegexp"],[10469,60,9468,41],[10470,0,9469,4],[10470,12,9469,10,"canBeArrow"],[10470,22,9469,20],[10470,25,9469,23],[10470,30,9469,28,"state"],[10470,35,9469,23],[10470,36,9469,34,"potentialArrowAt"],[10470,52,9469,23],[10470,57,9469,55],[10470,62,9469,60,"state"],[10470,67,9469,55],[10470,68,9469,66,"start"],[10470,73,9469,4],[10471,0,9470,4],[10471,12,9470,8,"node"],[10471,16,9470,4],[10473,0,9472,4],[10473,16,9472,12],[10473,21,9472,17,"state"],[10473,26,9472,12],[10473,27,9472,23,"type"],[10473,31,9472,4],[10474,0,9473,6],[10474,15,9473,11,"types"],[10474,20,9473,16],[10474,21,9473,17,"_super"],[10474,27,9473,6],[10475,0,9474,8,"node"],[10475,12,9474,8,"node"],[10475,16,9474,12],[10475,19,9474,15],[10475,24,9474,20,"startNode"],[10475,33,9474,15],[10475,35,9474,8],[10476,0,9475,8],[10476,17,9475,13,"next"],[10476,21,9475,8],[10478,0,9477,8],[10478,16,9477,12],[10478,21,9477,17,"match"],[10478,26,9477,12],[10478,27,9477,23,"types"],[10478,32,9477,28],[10478,33,9477,29,"parenL"],[10478,39,9477,12],[10478,44,9477,40],[10478,45,9477,41],[10478,50,9477,46,"scope"],[10478,55,9477,41],[10478,56,9477,52,"allowDirectSuper"],[10478,72,9477,12],[10478,76,9477,72],[10478,77,9477,73],[10478,82,9477,78,"options"],[10478,89,9477,73],[10478,90,9477,86,"allowSuperOutsideMethod"],[10478,113,9477,8],[10478,115,9477,111],[10479,0,9478,10],[10479,19,9478,15,"raise"],[10479,24,9478,10],[10479,25,9478,21,"node"],[10479,29,9478,25],[10479,30,9478,26,"start"],[10479,35,9478,10],[10479,37,9478,33],[10479,106,9478,102],[10479,187,9478,10],[10480,0,9479,9],[10480,13,9477,8],[10480,19,9479,15],[10480,23,9479,19],[10480,24,9479,20],[10480,29,9479,25,"scope"],[10480,34,9479,20],[10480,35,9479,31,"allowSuper"],[10480,45,9479,19],[10480,49,9479,45],[10480,50,9479,46],[10480,55,9479,51,"options"],[10480,62,9479,46],[10480,63,9479,59,"allowSuperOutsideMethod"],[10480,86,9479,15],[10480,88,9479,84],[10481,0,9480,10],[10481,19,9480,15,"raise"],[10481,24,9480,10],[10481,25,9480,21,"node"],[10481,29,9480,25],[10481,30,9480,26,"start"],[10481,35,9480,10],[10481,37,9480,33],[10481,90,9480,10],[10482,0,9481,9],[10484,0,9483,8],[10484,16,9483,12],[10484,17,9483,13],[10484,22,9483,18,"match"],[10484,27,9483,13],[10484,28,9483,24,"types"],[10484,33,9483,29],[10484,34,9483,30,"parenL"],[10484,40,9483,13],[10484,41,9483,12],[10484,45,9483,41],[10484,46,9483,42],[10484,51,9483,47,"match"],[10484,56,9483,42],[10484,57,9483,53,"types"],[10484,62,9483,58],[10484,63,9483,59,"bracketL"],[10484,71,9483,42],[10484,72,9483,12],[10484,76,9483,72],[10484,77,9483,73],[10484,82,9483,78,"match"],[10484,87,9483,73],[10484,88,9483,84,"types"],[10484,93,9483,89],[10484,94,9483,90,"dot"],[10484,97,9483,73],[10484,98,9483,8],[10484,100,9483,96],[10485,0,9484,10],[10485,19,9484,15,"raise"],[10485,24,9484,10],[10485,25,9484,21,"node"],[10485,29,9484,25],[10485,30,9484,26,"start"],[10485,35,9484,10],[10485,37,9484,33],[10485,103,9484,99],[10485,158,9484,10],[10486,0,9485,9],[10488,0,9487,8],[10488,19,9487,15],[10488,24,9487,20,"finishNode"],[10488,34,9487,15],[10488,35,9487,31,"node"],[10488,39,9487,15],[10488,41,9487,37],[10488,48,9487,15],[10488,49,9487,8],[10490,0,9489,6],[10490,15,9489,11,"types"],[10490,20,9489,16],[10490,21,9489,17,"_import"],[10490,28,9489,6],[10491,0,9490,8,"node"],[10491,12,9490,8,"node"],[10491,16,9490,12],[10491,19,9490,15],[10491,24,9490,20,"startNode"],[10491,33,9490,15],[10491,35,9490,8],[10492,0,9491,8],[10492,17,9491,13,"next"],[10492,21,9491,8],[10494,0,9493,8],[10494,16,9493,12],[10494,21,9493,17,"match"],[10494,26,9493,12],[10494,27,9493,23,"types"],[10494,32,9493,28],[10494,33,9493,29,"dot"],[10494,36,9493,12],[10494,37,9493,8],[10494,39,9493,35],[10495,0,9494,10],[10495,21,9494,17],[10495,26,9494,22,"parseImportMetaProperty"],[10495,49,9494,17],[10495,50,9494,46,"node"],[10495,54,9494,17],[10495,55,9494,10],[10496,0,9495,9],[10498,0,9497,8],[10498,17,9497,13,"expectPlugin"],[10498,29,9497,8],[10498,30,9497,26],[10498,45,9497,8],[10498,47,9497,43,"node"],[10498,51,9497,47],[10498,52,9497,48,"start"],[10498,57,9497,8],[10500,0,9499,8],[10500,16,9499,12],[10500,17,9499,13],[10500,22,9499,18,"match"],[10500,27,9499,13],[10500,28,9499,24,"types"],[10500,33,9499,29],[10500,34,9499,30,"parenL"],[10500,40,9499,13],[10500,41,9499,8],[10500,43,9499,39],[10501,0,9500,10],[10501,19,9500,15,"unexpected"],[10501,29,9500,10],[10501,30,9500,26],[10501,34,9500,10],[10501,36,9500,32,"types"],[10501,41,9500,37],[10501,42,9500,38,"parenL"],[10501,48,9500,10],[10502,0,9501,9],[10504,0,9503,8],[10504,19,9503,15],[10504,24,9503,20,"finishNode"],[10504,34,9503,15],[10504,35,9503,31,"node"],[10504,39,9503,15],[10504,41,9503,37],[10504,49,9503,15],[10504,50,9503,8],[10506,0,9505,6],[10506,15,9505,11,"types"],[10506,20,9505,16],[10506,21,9505,17,"_this"],[10506,26,9505,6],[10507,0,9506,8,"node"],[10507,12,9506,8,"node"],[10507,16,9506,12],[10507,19,9506,15],[10507,24,9506,20,"startNode"],[10507,33,9506,15],[10507,35,9506,8],[10508,0,9507,8],[10508,17,9507,13,"next"],[10508,21,9507,8],[10509,0,9508,8],[10509,19,9508,15],[10509,24,9508,20,"finishNode"],[10509,34,9508,15],[10509,35,9508,31,"node"],[10509,39,9508,15],[10509,41,9508,37],[10509,57,9508,15],[10509,58,9508,8],[10511,0,9510,6],[10511,15,9510,11,"types"],[10511,20,9510,16],[10511,21,9510,17,"name"],[10511,25,9510,6],[10512,0,9511,8],[10513,0,9512,10,"node"],[10513,14,9512,10,"node"],[10513,18,9512,14],[10513,21,9512,17],[10513,26,9512,22,"startNode"],[10513,35,9512,17],[10513,37,9512,10],[10514,0,9513,10],[10514,18,9513,16,"containsEsc"],[10514,29,9513,27],[10514,32,9513,30],[10514,37,9513,35,"state"],[10514,42,9513,30],[10514,43,9513,41,"containsEsc"],[10514,54,9513,10],[10515,0,9514,10],[10515,18,9514,16,"id"],[10515,20,9514,18],[10515,23,9514,21],[10515,28,9514,26,"parseIdentifier"],[10515,43,9514,21],[10515,45,9514,10],[10517,0,9516,10],[10517,18,9516,14],[10517,19,9516,15,"containsEsc"],[10517,30,9516,14],[10517,34,9516,30,"id"],[10517,36,9516,32],[10517,37,9516,33,"name"],[10517,41,9516,30],[10517,46,9516,42],[10517,53,9516,14],[10517,57,9516,53],[10517,62,9516,58,"match"],[10517,67,9516,53],[10517,68,9516,64,"types"],[10517,73,9516,69],[10517,74,9516,70,"_function"],[10517,83,9516,53],[10517,84,9516,14],[10517,88,9516,84],[10517,89,9516,85],[10517,94,9516,90,"canInsertSemicolon"],[10517,112,9516,85],[10517,114,9516,10],[10517,116,9516,112],[10518,0,9517,12],[10518,20,9517,18,"last"],[10518,26,9517,22],[10518,29,9517,25],[10518,34,9517,30,"state"],[10518,39,9517,25],[10518,40,9517,36,"context"],[10518,47,9517,25],[10518,48,9517,44,"length"],[10518,54,9517,25],[10518,57,9517,53],[10518,58,9517,12],[10520,0,9519,12],[10520,20,9519,16],[10520,25,9519,21,"state"],[10520,30,9519,16],[10520,31,9519,27,"context"],[10520,38,9519,16],[10520,39,9519,35,"last"],[10520,45,9519,16],[10520,51,9519,45,"types$1"],[10520,58,9519,52],[10520,59,9519,53,"functionStatement"],[10520,76,9519,12],[10520,78,9519,72],[10521,0,9520,14],[10521,24,9520,20],[10521,28,9520,24,"Error"],[10521,33,9520,20],[10521,34,9520,30],[10521,50,9520,20],[10521,51,9520,14],[10522,0,9521,13],[10524,0,9523,12],[10524,21,9523,17,"state"],[10524,26,9523,12],[10524,27,9523,23,"context"],[10524,34,9523,12],[10524,35,9523,31,"last"],[10524,41,9523,12],[10524,45,9523,39,"types$1"],[10524,52,9523,46],[10524,53,9523,47,"functionExpression"],[10524,71,9523,12],[10525,0,9524,12],[10525,21,9524,17,"next"],[10525,25,9524,12],[10526,0,9525,12],[10526,23,9525,19],[10526,28,9525,24,"parseFunction"],[10526,41,9525,19],[10526,42,9525,38,"node"],[10526,46,9525,19],[10526,48,9525,44,"undefined"],[10526,57,9525,19],[10526,59,9525,55],[10526,63,9525,19],[10526,64,9525,12],[10527,0,9526,11],[10527,15,9516,10],[10527,21,9526,17],[10527,25,9526,21,"canBeArrow"],[10527,35,9526,31],[10527,39,9526,35],[10527,40,9526,36,"containsEsc"],[10527,51,9526,21],[10527,55,9526,51,"id"],[10527,57,9526,53],[10527,58,9526,54,"name"],[10527,62,9526,51],[10527,67,9526,63],[10527,74,9526,21],[10527,78,9526,74],[10527,83,9526,79,"match"],[10527,88,9526,74],[10527,89,9526,85,"types"],[10527,94,9526,90],[10527,95,9526,91,"name"],[10527,99,9526,74],[10527,100,9526,21],[10527,104,9526,100],[10527,105,9526,101],[10527,110,9526,106,"canInsertSemicolon"],[10527,128,9526,101],[10527,130,9526,17],[10527,132,9526,128],[10528,0,9527,12],[10528,20,9527,18,"params"],[10528,26,9527,24],[10528,29,9527,27],[10528,30,9527,28],[10528,35,9527,33,"parseIdentifier"],[10528,50,9527,28],[10528,52,9527,27],[10528,53,9527,12],[10529,0,9528,12],[10529,21,9528,17,"expect"],[10529,27,9528,12],[10529,28,9528,24,"types"],[10529,33,9528,29],[10529,34,9528,30,"arrow"],[10529,39,9528,12],[10530,0,9529,12],[10530,21,9529,17,"parseArrowExpression"],[10530,41,9529,12],[10530,42,9529,38,"node"],[10530,46,9529,12],[10530,48,9529,44,"params"],[10530,54,9529,12],[10530,56,9529,52],[10530,60,9529,12],[10531,0,9530,12],[10531,23,9530,19,"node"],[10531,27,9530,12],[10532,0,9531,11],[10534,0,9533,10],[10534,18,9533,14,"canBeArrow"],[10534,28,9533,24],[10534,32,9533,28],[10534,37,9533,33,"match"],[10534,42,9533,28],[10534,43,9533,39,"types"],[10534,48,9533,44],[10534,49,9533,45,"arrow"],[10534,54,9533,28],[10534,55,9533,14],[10534,59,9533,55],[10534,60,9533,56],[10534,65,9533,61,"canInsertSemicolon"],[10534,83,9533,56],[10534,85,9533,10],[10534,87,9533,83],[10535,0,9534,12],[10535,21,9534,17,"next"],[10535,25,9534,12],[10536,0,9535,12],[10536,21,9535,17,"parseArrowExpression"],[10536,41,9535,12],[10536,42,9535,38,"node"],[10536,46,9535,12],[10536,48,9535,44],[10536,49,9535,45,"id"],[10536,51,9535,44],[10536,52,9535,12],[10536,54,9535,50],[10536,59,9535,12],[10537,0,9536,12],[10537,23,9536,19,"node"],[10537,27,9536,12],[10538,0,9537,11],[10540,0,9539,10],[10540,21,9539,17,"id"],[10540,23,9539,10],[10541,0,9540,9],[10543,0,9542,6],[10543,15,9542,11,"types"],[10543,20,9542,16],[10543,21,9542,17,"_do"],[10543,24,9542,6],[10544,0,9543,8],[10545,0,9544,10],[10545,19,9544,15,"expectPlugin"],[10545,31,9544,10],[10545,32,9544,28],[10545,47,9544,10],[10547,0,9545,10],[10547,18,9545,16,"node"],[10547,25,9545,20],[10547,28,9545,23],[10547,33,9545,28,"startNode"],[10547,42,9545,23],[10547,44,9545,10],[10549,0,9546,10],[10549,19,9546,15,"next"],[10549,23,9546,10],[10550,0,9547,10],[10550,18,9547,16,"oldLabels"],[10550,27,9547,25],[10550,30,9547,28],[10550,35,9547,33,"state"],[10550,40,9547,28],[10550,41,9547,39,"labels"],[10550,47,9547,10],[10551,0,9548,10],[10551,19,9548,15,"state"],[10551,24,9548,10],[10551,25,9548,21,"labels"],[10551,31,9548,10],[10551,34,9548,30],[10551,36,9548,10],[10552,0,9549,10,"node"],[10552,14,9549,10,"node"],[10552,21,9549,14],[10552,22,9549,15,"body"],[10552,26,9549,10],[10552,29,9549,22],[10552,34,9549,27,"parseBlock"],[10552,44,9549,22],[10552,46,9549,10],[10553,0,9550,10],[10553,19,9550,15,"state"],[10553,24,9550,10],[10553,25,9550,21,"labels"],[10553,31,9550,10],[10553,34,9550,30,"oldLabels"],[10553,43,9550,10],[10554,0,9551,10],[10554,21,9551,17],[10554,26,9551,22,"finishNode"],[10554,36,9551,17],[10554,37,9551,33,"node"],[10554,44,9551,17],[10554,46,9551,39],[10554,60,9551,17],[10554,61,9551,10],[10555,0,9552,9],[10557,0,9554,6],[10557,15,9554,11,"types"],[10557,20,9554,16],[10557,21,9554,17,"regexp"],[10557,27,9554,6],[10558,0,9555,8],[10559,0,9556,10],[10559,18,9556,16,"value"],[10559,23,9556,21],[10559,26,9556,24],[10559,31,9556,29,"state"],[10559,36,9556,24],[10559,37,9556,35,"value"],[10559,42,9556,10],[10560,0,9557,10,"node"],[10560,14,9557,10,"node"],[10560,18,9557,14],[10560,21,9557,17],[10560,26,9557,22,"parseLiteral"],[10560,38,9557,17],[10560,39,9557,35,"value"],[10560,44,9557,40],[10560,45,9557,41,"value"],[10560,50,9557,17],[10560,52,9557,48],[10560,67,9557,17],[10560,68,9557,10],[10561,0,9558,10,"node"],[10561,14,9558,10,"node"],[10561,18,9558,14],[10561,19,9558,15,"pattern"],[10561,26,9558,10],[10561,29,9558,25,"value"],[10561,34,9558,30],[10561,35,9558,31,"pattern"],[10561,42,9558,10],[10562,0,9559,10,"node"],[10562,14,9559,10,"node"],[10562,18,9559,14],[10562,19,9559,15,"flags"],[10562,24,9559,10],[10562,27,9559,23,"value"],[10562,32,9559,28],[10562,33,9559,29,"flags"],[10562,38,9559,10],[10563,0,9560,10],[10563,21,9560,17,"node"],[10563,25,9560,10],[10564,0,9561,9],[10566,0,9563,6],[10566,15,9563,11,"types"],[10566,20,9563,16],[10566,21,9563,17,"num"],[10566,24,9563,6],[10567,0,9564,8],[10567,19,9564,15],[10567,24,9564,20,"parseLiteral"],[10567,36,9564,15],[10567,37,9564,33],[10567,42,9564,38,"state"],[10567,47,9564,33],[10567,48,9564,44,"value"],[10567,53,9564,15],[10567,55,9564,51],[10567,71,9564,15],[10567,72,9564,8],[10569,0,9566,6],[10569,15,9566,11,"types"],[10569,20,9566,16],[10569,21,9566,17,"bigint"],[10569,27,9566,6],[10570,0,9567,8],[10570,19,9567,15],[10570,24,9567,20,"parseLiteral"],[10570,36,9567,15],[10570,37,9567,33],[10570,42,9567,38,"state"],[10570,47,9567,33],[10570,48,9567,44,"value"],[10570,53,9567,15],[10570,55,9567,51],[10570,70,9567,15],[10570,71,9567,8],[10572,0,9569,6],[10572,15,9569,11,"types"],[10572,20,9569,16],[10572,21,9569,17,"string"],[10572,27,9569,6],[10573,0,9570,8],[10573,19,9570,15],[10573,24,9570,20,"parseLiteral"],[10573,36,9570,15],[10573,37,9570,33],[10573,42,9570,38,"state"],[10573,47,9570,33],[10573,48,9570,44,"value"],[10573,53,9570,15],[10573,55,9570,51],[10573,70,9570,15],[10573,71,9570,8],[10575,0,9572,6],[10575,15,9572,11,"types"],[10575,20,9572,16],[10575,21,9572,17,"_null"],[10575,26,9572,6],[10576,0,9573,8,"node"],[10576,12,9573,8,"node"],[10576,16,9573,12],[10576,19,9573,15],[10576,24,9573,20,"startNode"],[10576,33,9573,15],[10576,35,9573,8],[10577,0,9574,8],[10577,17,9574,13,"next"],[10577,21,9574,8],[10578,0,9575,8],[10578,19,9575,15],[10578,24,9575,20,"finishNode"],[10578,34,9575,15],[10578,35,9575,31,"node"],[10578,39,9575,15],[10578,41,9575,37],[10578,54,9575,15],[10578,55,9575,8],[10580,0,9577,6],[10580,15,9577,11,"types"],[10580,20,9577,16],[10580,21,9577,17,"_true"],[10580,26,9577,6],[10581,0,9578,6],[10581,15,9578,11,"types"],[10581,20,9578,16],[10581,21,9578,17,"_false"],[10581,27,9578,6],[10582,0,9579,8],[10582,19,9579,15],[10582,24,9579,20,"parseBooleanLiteral"],[10582,43,9579,15],[10582,45,9579,8],[10584,0,9581,6],[10584,15,9581,11,"types"],[10584,20,9581,16],[10584,21,9581,17,"parenL"],[10584,27,9581,6],[10585,0,9582,8],[10585,19,9582,15],[10585,24,9582,20,"parseParenAndDistinguishExpression"],[10585,58,9582,15],[10585,59,9582,55,"canBeArrow"],[10585,69,9582,15],[10585,70,9582,8],[10587,0,9584,6],[10587,15,9584,11,"types"],[10587,20,9584,16],[10587,21,9584,17,"bracketL"],[10587,29,9584,6],[10588,0,9585,8],[10589,0,9586,10],[10589,18,9586,16,"oldInFSharpPipelineDirectBody"],[10589,47,9586,45],[10589,50,9586,48],[10589,55,9586,53,"state"],[10589,60,9586,48],[10589,61,9586,59,"inFSharpPipelineDirectBody"],[10589,87,9586,10],[10590,0,9587,10],[10590,19,9587,15,"state"],[10590,24,9587,10],[10590,25,9587,21,"inFSharpPipelineDirectBody"],[10590,51,9587,10],[10590,54,9587,50],[10590,59,9587,10],[10591,0,9588,10,"node"],[10591,14,9588,10,"node"],[10591,18,9588,14],[10591,21,9588,17],[10591,26,9588,22,"startNode"],[10591,35,9588,17],[10591,37,9588,10],[10592,0,9589,10],[10592,19,9589,15,"next"],[10592,23,9589,10],[10593,0,9590,10,"node"],[10593,14,9590,10,"node"],[10593,18,9590,14],[10593,19,9590,15,"elements"],[10593,27,9590,10],[10593,30,9590,26],[10593,35,9590,31,"parseExprList"],[10593,48,9590,26],[10593,49,9590,45,"types"],[10593,54,9590,50],[10593,55,9590,51,"bracketR"],[10593,63,9590,26],[10593,65,9590,61],[10593,69,9590,26],[10593,71,9590,67,"refShorthandDefaultPos"],[10593,93,9590,26],[10593,95,9590,91,"node"],[10593,99,9590,26],[10593,100,9590,10],[10595,0,9592,10],[10595,18,9592,14],[10595,19,9592,15],[10595,24,9592,20,"state"],[10595,29,9592,15],[10595,30,9592,26,"maybeInArrowParameters"],[10595,52,9592,10],[10595,54,9592,50],[10596,0,9593,12],[10596,21,9593,17,"toReferencedList"],[10596,37,9593,12],[10596,38,9593,34,"node"],[10596,42,9593,38],[10596,43,9593,39,"elements"],[10596,51,9593,12],[10597,0,9594,11],[10599,0,9596,10],[10599,19,9596,15,"state"],[10599,24,9596,10],[10599,25,9596,21,"inFSharpPipelineDirectBody"],[10599,51,9596,10],[10599,54,9596,50,"oldInFSharpPipelineDirectBody"],[10599,83,9596,10],[10600,0,9597,10],[10600,21,9597,17],[10600,26,9597,22,"finishNode"],[10600,36,9597,17],[10600,37,9597,33,"node"],[10600,41,9597,17],[10600,43,9597,39],[10600,60,9597,17],[10600,61,9597,10],[10601,0,9598,9],[10603,0,9600,6],[10603,15,9600,11,"types"],[10603,20,9600,16],[10603,21,9600,17,"braceL"],[10603,27,9600,6],[10604,0,9601,8],[10605,0,9602,10],[10605,18,9602,16,"oldInFSharpPipelineDirectBody"],[10605,48,9602,45],[10605,51,9602,48],[10605,56,9602,53,"state"],[10605,61,9602,48],[10605,62,9602,59,"inFSharpPipelineDirectBody"],[10605,88,9602,10],[10606,0,9603,10],[10606,19,9603,15,"state"],[10606,24,9603,10],[10606,25,9603,21,"inFSharpPipelineDirectBody"],[10606,51,9603,10],[10606,54,9603,50],[10606,59,9603,10],[10607,0,9604,10],[10607,18,9604,16,"ret"],[10607,21,9604,19],[10607,24,9604,22],[10607,29,9604,27,"parseObj"],[10607,37,9604,22],[10607,38,9604,36],[10607,43,9604,22],[10607,45,9604,43,"refShorthandDefaultPos"],[10607,67,9604,22],[10607,68,9604,10],[10608,0,9605,10],[10608,19,9605,15,"state"],[10608,24,9605,10],[10608,25,9605,21,"inFSharpPipelineDirectBody"],[10608,51,9605,10],[10608,54,9605,50,"oldInFSharpPipelineDirectBody"],[10608,84,9605,10],[10609,0,9606,10],[10609,21,9606,17,"ret"],[10609,24,9606,10],[10610,0,9607,9],[10612,0,9609,6],[10612,15,9609,11,"types"],[10612,20,9609,16],[10612,21,9609,17,"_function"],[10612,30,9609,6],[10613,0,9610,8],[10613,19,9610,15],[10613,24,9610,20,"parseFunctionExpression"],[10613,47,9610,15],[10613,49,9610,8],[10615,0,9612,6],[10615,15,9612,11,"types"],[10615,20,9612,16],[10615,21,9612,17,"at"],[10615,23,9612,6],[10616,0,9613,8],[10616,17,9613,13,"parseDecorators"],[10616,32,9613,8],[10618,0,9615,6],[10618,15,9615,11,"types"],[10618,20,9615,16],[10618,21,9615,17,"_class"],[10618,27,9615,6],[10619,0,9616,8,"node"],[10619,12,9616,8,"node"],[10619,16,9616,12],[10619,19,9616,15],[10619,24,9616,20,"startNode"],[10619,33,9616,15],[10619,35,9616,8],[10620,0,9617,8],[10620,17,9617,13,"takeDecorators"],[10620,31,9617,8],[10620,32,9617,28,"node"],[10620,36,9617,8],[10621,0,9618,8],[10621,19,9618,15],[10621,24,9618,20,"parseClass"],[10621,34,9618,15],[10621,35,9618,31,"node"],[10621,39,9618,15],[10621,41,9618,37],[10621,46,9618,15],[10621,47,9618,8],[10623,0,9620,6],[10623,15,9620,11,"types"],[10623,20,9620,16],[10623,21,9620,17,"_new"],[10623,25,9620,6],[10624,0,9621,8],[10624,19,9621,15],[10624,24,9621,20,"parseNew"],[10624,32,9621,15],[10624,34,9621,8],[10626,0,9623,6],[10626,15,9623,11,"types"],[10626,20,9623,16],[10626,21,9623,17,"backQuote"],[10626,30,9623,6],[10627,0,9624,8],[10627,19,9624,15],[10627,24,9624,20,"parseTemplate"],[10627,37,9624,15],[10627,38,9624,34],[10627,43,9624,15],[10627,44,9624,8],[10629,0,9626,6],[10629,15,9626,11,"types"],[10629,20,9626,16],[10629,21,9626,17,"doubleColon"],[10629,32,9626,6],[10630,0,9627,8],[10631,0,9628,10,"node"],[10631,14,9628,10,"node"],[10631,18,9628,14],[10631,21,9628,17],[10631,26,9628,22,"startNode"],[10631,35,9628,17],[10631,37,9628,10],[10632,0,9629,10],[10632,19,9629,15,"next"],[10632,23,9629,10],[10633,0,9630,10,"node"],[10633,14,9630,10,"node"],[10633,18,9630,14],[10633,19,9630,15,"object"],[10633,25,9630,10],[10633,28,9630,24],[10633,32,9630,10],[10634,0,9631,10],[10634,18,9631,16,"callee"],[10634,24,9631,22],[10634,27,9631,25,"node"],[10634,31,9631,29],[10634,32,9631,30,"callee"],[10634,38,9631,25],[10634,41,9631,39],[10634,46,9631,44,"parseNoCallExpr"],[10634,61,9631,39],[10634,63,9631,10],[10636,0,9633,10],[10636,18,9633,14,"callee"],[10636,24,9633,20],[10636,25,9633,21,"type"],[10636,29,9633,14],[10636,34,9633,30],[10636,52,9633,10],[10636,54,9633,50],[10637,0,9634,12],[10637,23,9634,19],[10637,28,9634,24,"finishNode"],[10637,38,9634,19],[10637,39,9634,35,"node"],[10637,43,9634,19],[10637,45,9634,41],[10637,61,9634,19],[10637,62,9634,12],[10638,0,9635,11],[10638,15,9633,10],[10638,21,9635,17],[10639,0,9636,12],[10639,22,9636,18],[10639,27,9636,23,"raise"],[10639,32,9636,18],[10639,33,9636,29,"callee"],[10639,39,9636,35],[10639,40,9636,36,"start"],[10639,45,9636,18],[10639,47,9636,43],[10639,96,9636,18],[10639,97,9636,12],[10640,0,9637,11],[10641,0,9638,9],[10643,0,9640,6],[10643,15,9640,11,"types"],[10643,20,9640,16],[10643,21,9640,17,"hash"],[10643,25,9640,6],[10644,0,9641,8],[10645,0,9642,10],[10645,18,9642,14],[10645,23,9642,19,"state"],[10645,28,9642,14],[10645,29,9642,25,"inPipeline"],[10645,39,9642,10],[10645,41,9642,37],[10646,0,9643,12,"node"],[10646,16,9643,12,"node"],[10646,20,9643,16],[10646,23,9643,19],[10646,28,9643,24,"startNode"],[10646,37,9643,19],[10646,39,9643,12],[10648,0,9645,12],[10648,20,9645,16],[10648,25,9645,21,"getPluginOption"],[10648,40,9645,16],[10648,41,9645,37],[10648,59,9645,16],[10648,61,9645,57],[10648,71,9645,16],[10648,77,9645,73],[10648,84,9645,12],[10648,86,9645,82],[10649,0,9646,14],[10649,23,9646,19,"raise"],[10649,28,9646,14],[10649,29,9646,25,"node"],[10649,33,9646,29],[10649,34,9646,30,"start"],[10649,39,9646,14],[10649,41,9646,37],[10649,135,9646,14],[10650,0,9647,13],[10652,0,9649,12],[10652,21,9649,17,"next"],[10652,25,9649,12],[10654,0,9651,12],[10654,20,9651,16],[10654,21,9651,17],[10654,26,9651,22,"primaryTopicReferenceIsAllowedInCurrentTopicContext"],[10654,77,9651,17],[10654,79,9651,12],[10654,81,9651,77],[10655,0,9652,14],[10655,23,9652,19,"raise"],[10655,28,9652,14],[10655,29,9652,25,"node"],[10655,33,9652,29],[10655,34,9652,30,"start"],[10655,39,9652,14],[10656,0,9653,13],[10658,0,9655,12],[10658,21,9655,17,"registerTopicReference"],[10658,43,9655,12],[10659,0,9656,12],[10659,23,9656,19],[10659,28,9656,24,"finishNode"],[10659,38,9656,19],[10659,39,9656,35,"node"],[10659,43,9656,19],[10659,45,9656,41],[10659,76,9656,19],[10659,77,9656,12],[10660,0,9657,11],[10661,0,9658,9],[10663,0,9660,6],[10664,0,9661,8],[10664,18,9661,14],[10664,23,9661,19,"unexpected"],[10664,33,9661,14],[10664,35,9661,8],[10665,0,9472,4],[10666,0,9663,3],[10669,44,9665,24],[10670,0,9666,4],[10670,12,9666,10,"node"],[10670,16,9666,14],[10670,19,9666,17],[10670,24,9666,22,"startNode"],[10670,33,9666,17],[10670,35,9666,4],[10671,0,9667,4,"node"],[10671,8,9667,4,"node"],[10671,12,9667,8],[10671,13,9667,9,"value"],[10671,18,9667,4],[10671,21,9667,17],[10671,26,9667,22,"match"],[10671,31,9667,17],[10671,32,9667,28,"types"],[10671,37,9667,33],[10671,38,9667,34,"_true"],[10671,43,9667,17],[10671,44,9667,4],[10672,0,9668,4],[10672,13,9668,9,"next"],[10672,17,9668,4],[10673,0,9669,4],[10673,15,9669,11],[10673,20,9669,16,"finishNode"],[10673,30,9669,11],[10673,31,9669,27,"node"],[10673,35,9669,11],[10673,37,9669,33],[10673,53,9669,11],[10673,54,9669,4],[10674,0,9670,3],[10677,46,9672,26],[10678,0,9673,4],[10678,12,9673,10,"isPrivate"],[10678,21,9673,19],[10678,24,9673,22],[10678,29,9673,27,"match"],[10678,34,9673,22],[10678,35,9673,33,"types"],[10678,40,9673,38],[10678,41,9673,39,"hash"],[10678,45,9673,22],[10678,46,9673,4],[10680,0,9675,4],[10680,12,9675,8,"isPrivate"],[10680,21,9675,4],[10680,23,9675,19],[10681,0,9676,6],[10681,15,9676,11,"expectOnePlugin"],[10681,30,9676,6],[10681,31,9676,27],[10681,32,9676,28],[10681,56,9676,27],[10681,58,9676,54],[10681,79,9676,27],[10681,80,9676,6],[10682,0,9677,6],[10682,14,9677,12,"node"],[10682,18,9677,16],[10682,21,9677,19],[10682,26,9677,24,"startNode"],[10682,35,9677,19],[10682,37,9677,6],[10683,0,9678,6],[10683,15,9678,11,"next"],[10683,19,9678,6],[10684,0,9679,6],[10684,15,9679,11,"assertNoSpace"],[10684,28,9679,6],[10684,29,9679,25],[10684,72,9679,6],[10685,0,9680,6,"node"],[10685,10,9680,6,"node"],[10685,14,9680,10],[10685,15,9680,11,"id"],[10685,17,9680,6],[10685,20,9680,16],[10685,25,9680,21,"parseIdentifier"],[10685,40,9680,16],[10685,41,9680,37],[10685,45,9680,16],[10685,46,9680,6],[10686,0,9681,6],[10686,17,9681,13],[10686,22,9681,18,"finishNode"],[10686,32,9681,13],[10686,33,9681,29,"node"],[10686,37,9681,13],[10686,39,9681,35],[10686,52,9681,13],[10686,53,9681,6],[10687,0,9682,5],[10687,9,9675,4],[10687,15,9682,11],[10688,0,9683,6],[10688,17,9683,13],[10688,22,9683,18,"parseIdentifier"],[10688,37,9683,13],[10688,38,9683,34],[10688,42,9683,13],[10688,43,9683,6],[10689,0,9684,5],[10690,0,9685,3],[10693,48,9687,28],[10694,0,9688,4],[10694,12,9688,10,"node"],[10694,16,9688,14],[10694,19,9688,17],[10694,24,9688,22,"startNode"],[10694,33,9688,17],[10694,35,9688,4],[10695,0,9689,4],[10695,12,9689,8,"meta"],[10695,16,9689,12],[10695,19,9689,15],[10695,24,9689,20,"startNode"],[10695,33,9689,15],[10695,35,9689,4],[10696,0,9690,4],[10696,13,9690,9,"next"],[10696,17,9690,4],[10697,0,9691,4,"meta"],[10697,8,9691,4,"meta"],[10697,12,9691,8],[10697,15,9691,11],[10697,20,9691,16,"createIdentifier"],[10697,36,9691,11],[10697,37,9691,33,"meta"],[10697,41,9691,11],[10697,43,9691,39],[10697,53,9691,11],[10697,54,9691,4],[10699,0,9693,4],[10699,12,9693,8],[10699,17,9693,13,"scope"],[10699,22,9693,8],[10699,23,9693,19,"inGenerator"],[10699,34,9693,8],[10699,38,9693,34],[10699,43,9693,39,"eat"],[10699,46,9693,34],[10699,47,9693,43,"types"],[10699,52,9693,48],[10699,53,9693,49,"dot"],[10699,56,9693,34],[10699,57,9693,4],[10699,59,9693,55],[10700,0,9694,6],[10700,17,9694,13],[10700,22,9694,18,"parseMetaProperty"],[10700,39,9694,13],[10700,40,9694,36,"node"],[10700,44,9694,13],[10700,46,9694,42,"meta"],[10700,50,9694,13],[10700,52,9694,48],[10700,58,9694,13],[10700,59,9694,6],[10701,0,9695,5],[10703,0,9697,4],[10703,15,9697,11],[10703,20,9697,16,"parseFunction"],[10703,33,9697,11],[10703,34,9697,30,"node"],[10703,38,9697,11],[10703,39,9697,4],[10704,0,9698,3],[10707,40,9700,20,"node"],[10707,44],[10707,46,9700,26,"meta"],[10707,50],[10707,52,9700,32,"propertyName"],[10707,64],[10707,66,9700,46],[10708,0,9701,4,"node"],[10708,8,9701,4,"node"],[10708,12,9701,8],[10708,13,9701,9,"meta"],[10708,17,9701,4],[10708,20,9701,16,"meta"],[10708,24,9701,4],[10710,0,9703,4],[10710,12,9703,8,"meta"],[10710,16,9703,12],[10710,17,9703,13,"name"],[10710,21,9703,8],[10710,26,9703,22],[10710,36,9703,8],[10710,40,9703,36,"propertyName"],[10710,52,9703,48],[10710,57,9703,53],[10710,63,9703,4],[10710,65,9703,61],[10711,0,9704,6],[10711,14,9704,10],[10711,19,9704,15,"isContextual"],[10711,31,9704,10],[10711,32,9704,28,"propertyName"],[10711,44,9704,10],[10711,45,9704,6],[10711,47,9704,43],[10712,0,9705,8],[10712,17,9705,13,"expectPlugin"],[10712,29,9705,8],[10712,30,9705,26],[10712,44,9705,8],[10713,0,9706,7],[10713,11,9704,6],[10713,17,9706,13],[10713,21,9706,17],[10713,22,9706,18],[10713,27,9706,23,"hasPlugin"],[10713,36,9706,18],[10713,37,9706,33],[10713,51,9706,18],[10713,52,9706,13],[10713,54,9706,50],[10714,0,9707,8],[10714,17,9707,13,"unexpected"],[10714,27,9707,8],[10715,0,9708,7],[10716,0,9709,5],[10718,0,9711,4],[10718,12,9711,10,"containsEsc"],[10718,23,9711,21],[10718,26,9711,24],[10718,31,9711,29,"state"],[10718,36,9711,24],[10718,37,9711,35,"containsEsc"],[10718,48,9711,4],[10719,0,9712,4,"node"],[10719,8,9712,4,"node"],[10719,12,9712,8],[10719,13,9712,9,"property"],[10719,21,9712,4],[10719,24,9712,20],[10719,29,9712,25,"parseIdentifier"],[10719,44,9712,20],[10719,45,9712,41],[10719,49,9712,20],[10719,50,9712,4],[10721,0,9714,4],[10721,12,9714,8,"node"],[10721,16,9714,12],[10721,17,9714,13,"property"],[10721,25,9714,8],[10721,26,9714,22,"name"],[10721,30,9714,8],[10721,35,9714,31,"propertyName"],[10721,47,9714,8],[10721,51,9714,47,"containsEsc"],[10721,62,9714,4],[10721,64,9714,60],[10722,0,9715,6],[10722,15,9715,11,"raise"],[10722,20,9715,6],[10722,21,9715,17,"node"],[10722,25,9715,21],[10722,26,9715,22,"property"],[10722,34,9715,17],[10722,35,9715,31,"start"],[10722,40,9715,6],[10722,80,9715,74,"meta"],[10722,84,9715,78],[10722,85,9715,79,"name"],[10722,89,9715,6],[10722,101,9715,90,"meta"],[10722,105,9715,94],[10722,106,9715,95,"name"],[10722,110,9715,6],[10722,119,9715,103,"propertyName"],[10722,131,9715,6],[10723,0,9716,5],[10725,0,9718,4],[10725,15,9718,11],[10725,20,9718,16,"finishNode"],[10725,30,9718,11],[10725,31,9718,27,"node"],[10725,35,9718,11],[10725,37,9718,33],[10725,51,9718,11],[10725,52,9718,4],[10726,0,9719,3],[10729,46,9721,26,"node"],[10729,50],[10729,52,9721,32],[10730,0,9722,4],[10730,12,9722,10,"id"],[10730,14,9722,12],[10730,17,9722,15],[10730,22,9722,20,"createIdentifier"],[10730,38,9722,15],[10730,39,9722,37],[10730,44,9722,42,"startNodeAtNode"],[10730,59,9722,37],[10730,60,9722,58,"node"],[10730,64,9722,37],[10730,65,9722,15],[10730,67,9722,65],[10730,75,9722,15],[10730,76,9722,4],[10731,0,9723,4],[10731,13,9723,9,"expect"],[10731,19,9723,4],[10731,20,9723,16,"types"],[10731,25,9723,21],[10731,26,9723,22,"dot"],[10731,29,9723,4],[10733,0,9725,4],[10733,12,9725,8],[10733,17,9725,13,"isContextual"],[10733,29,9725,8],[10733,30,9725,26],[10733,36,9725,8],[10733,37,9725,4],[10733,39,9725,35],[10734,0,9726,6],[10734,15,9726,11,"expectPlugin"],[10734,27,9726,6],[10734,28,9726,24],[10734,40,9726,6],[10736,0,9728,6],[10736,14,9728,10],[10736,15,9728,11],[10736,20,9728,16,"inModule"],[10736,28,9728,6],[10736,30,9728,26],[10737,0,9729,8],[10737,17,9729,13,"raise"],[10737,22,9729,8],[10737,23,9729,19,"id"],[10737,25,9729,21],[10737,26,9729,22,"start"],[10737,31,9729,8],[10737,94,9729,88],[10738,0,9730,10,"code"],[10738,14,9730,10,"code"],[10738,18,9730,14],[10738,20,9730,16],[10739,0,9729,88],[10739,13,9729,8],[10740,0,9732,7],[10742,0,9734,6],[10742,15,9734,11,"sawUnambiguousESM"],[10742,32,9734,6],[10742,35,9734,31],[10742,39,9734,6],[10743,0,9735,5],[10743,9,9725,4],[10743,15,9735,11],[10743,19,9735,15],[10743,20,9735,16],[10743,25,9735,21,"hasPlugin"],[10743,34,9735,16],[10743,35,9735,31],[10743,47,9735,16],[10743,48,9735,11],[10743,50,9735,46],[10744,0,9736,6],[10744,15,9736,11,"raise"],[10744,20,9736,6],[10744,21,9736,17,"id"],[10744,23,9736,19],[10744,24,9736,20,"start"],[10744,29,9736,6],[10745,0,9737,5],[10747,0,9739,4],[10747,15,9739,11],[10747,20,9739,16,"parseMetaProperty"],[10747,37,9739,11],[10747,38,9739,34,"node"],[10747,42,9739,11],[10747,44,9739,40,"id"],[10747,46,9739,11],[10747,48,9739,44],[10747,54,9739,11],[10747,55,9739,4],[10748,0,9740,3],[10751,35,9742,15,"value"],[10751,40],[10751,42,9742,22,"type"],[10751,46],[10751,48,9742,28,"startPos"],[10751,56],[10751,58,9742,38,"startLoc"],[10751,66],[10751,68,9742,48],[10752,0,9743,4,"startPos"],[10752,8,9743,4,"startPos"],[10752,16,9743,12],[10752,19,9743,15,"startPos"],[10752,27,9743,23],[10752,31,9743,27],[10752,36,9743,32,"state"],[10752,41,9743,27],[10752,42,9743,38,"start"],[10752,47,9743,4],[10753,0,9744,4,"startLoc"],[10753,8,9744,4,"startLoc"],[10753,16,9744,12],[10753,19,9744,15,"startLoc"],[10753,27,9744,23],[10753,31,9744,27],[10753,36,9744,32,"state"],[10753,41,9744,27],[10753,42,9744,38,"startLoc"],[10753,50,9744,4],[10754,0,9745,4],[10754,12,9745,10,"node"],[10754,16,9745,14],[10754,19,9745,17],[10754,24,9745,22,"startNodeAt"],[10754,35,9745,17],[10754,36,9745,34,"startPos"],[10754,44,9745,17],[10754,46,9745,44,"startLoc"],[10754,54,9745,17],[10754,55,9745,4],[10755,0,9746,4],[10755,13,9746,9,"addExtra"],[10755,21,9746,4],[10755,22,9746,18,"node"],[10755,26,9746,4],[10755,28,9746,24],[10755,38,9746,4],[10755,40,9746,36,"value"],[10755,45,9746,4],[10756,0,9747,4],[10756,13,9747,9,"addExtra"],[10756,21,9747,4],[10756,22,9747,18,"node"],[10756,26,9747,4],[10756,28,9747,24],[10756,33,9747,4],[10756,35,9747,31],[10756,40,9747,36,"input"],[10756,45,9747,31],[10756,46,9747,42,"slice"],[10756,51,9747,31],[10756,52,9747,48,"startPos"],[10756,60,9747,31],[10756,62,9747,58],[10756,67,9747,63,"state"],[10756,72,9747,58],[10756,73,9747,69,"end"],[10756,76,9747,31],[10756,77,9747,4],[10757,0,9748,4,"node"],[10757,8,9748,4,"node"],[10757,12,9748,8],[10757,13,9748,9,"value"],[10757,18,9748,4],[10757,21,9748,17,"value"],[10757,26,9748,4],[10758,0,9749,4],[10758,13,9749,9,"next"],[10758,17,9749,4],[10759,0,9750,4],[10759,15,9750,11],[10759,20,9750,16,"finishNode"],[10759,30,9750,11],[10759,31,9750,27,"node"],[10759,35,9750,11],[10759,37,9750,33,"type"],[10759,41,9750,11],[10759,42,9750,4],[10760,0,9751,3],[10763,57,9753,37,"canBeArrow"],[10763,67],[10763,69,9753,49],[10764,0,9754,4],[10764,12,9754,10,"startPos"],[10764,20,9754,18],[10764,23,9754,21],[10764,28,9754,26,"state"],[10764,33,9754,21],[10764,34,9754,32,"start"],[10764,39,9754,4],[10765,0,9755,4],[10765,12,9755,10,"startLoc"],[10765,20,9755,18],[10765,23,9755,21],[10765,28,9755,26,"state"],[10765,33,9755,21],[10765,34,9755,32,"startLoc"],[10765,42,9755,4],[10766,0,9756,4],[10766,12,9756,8,"val"],[10766,15,9756,4],[10767,0,9757,4],[10767,13,9757,9,"expect"],[10767,19,9757,4],[10767,20,9757,16,"types"],[10767,25,9757,21],[10767,26,9757,22,"parenL"],[10767,32,9757,4],[10768,0,9758,4],[10768,12,9758,10,"oldMaybeInArrowParameters"],[10768,37,9758,35],[10768,40,9758,38],[10768,45,9758,43,"state"],[10768,50,9758,38],[10768,51,9758,49,"maybeInArrowParameters"],[10768,73,9758,4],[10769,0,9759,4],[10769,12,9759,10,"oldYieldPos"],[10769,23,9759,21],[10769,26,9759,24],[10769,31,9759,29,"state"],[10769,36,9759,24],[10769,37,9759,35,"yieldPos"],[10769,45,9759,4],[10770,0,9760,4],[10770,12,9760,10,"oldAwaitPos"],[10770,23,9760,21],[10770,26,9760,24],[10770,31,9760,29,"state"],[10770,36,9760,24],[10770,37,9760,35,"awaitPos"],[10770,45,9760,4],[10771,0,9761,4],[10771,12,9761,10,"oldInFSharpPipelineDirectBody"],[10771,41,9761,39],[10771,44,9761,42],[10771,49,9761,47,"state"],[10771,54,9761,42],[10771,55,9761,53,"inFSharpPipelineDirectBody"],[10771,81,9761,4],[10772,0,9762,4],[10772,13,9762,9,"state"],[10772,18,9762,4],[10772,19,9762,15,"maybeInArrowParameters"],[10772,41,9762,4],[10772,44,9762,40],[10772,48,9762,4],[10773,0,9763,4],[10773,13,9763,9,"state"],[10773,18,9763,4],[10773,19,9763,15,"yieldPos"],[10773,27,9763,4],[10773,30,9763,26],[10773,31,9763,27],[10773,32,9763,4],[10774,0,9764,4],[10774,13,9764,9,"state"],[10774,18,9764,4],[10774,19,9764,15,"awaitPos"],[10774,27,9764,4],[10774,30,9764,26],[10774,31,9764,27],[10774,32,9764,4],[10775,0,9765,4],[10775,13,9765,9,"state"],[10775,18,9765,4],[10775,19,9765,15,"inFSharpPipelineDirectBody"],[10775,45,9765,4],[10775,48,9765,44],[10775,53,9765,4],[10776,0,9766,4],[10776,12,9766,10,"innerStartPos"],[10776,25,9766,23],[10776,28,9766,26],[10776,33,9766,31,"state"],[10776,38,9766,26],[10776,39,9766,37,"start"],[10776,44,9766,4],[10777,0,9767,4],[10777,12,9767,10,"innerStartLoc"],[10777,25,9767,23],[10777,28,9767,26],[10777,33,9767,31,"state"],[10777,38,9767,26],[10777,39,9767,37,"startLoc"],[10777,47,9767,4],[10778,0,9768,4],[10778,12,9768,10,"exprList"],[10778,20,9768,18],[10778,23,9768,21],[10778,25,9768,4],[10779,0,9769,4],[10779,12,9769,10,"refShorthandDefaultPos"],[10779,34,9769,32],[10779,37,9769,35],[10780,0,9770,6,"start"],[10780,10,9770,6,"start"],[10780,15,9770,11],[10780,17,9770,13],[10781,0,9769,35],[10781,9,9769,4],[10782,0,9772,4],[10782,12,9772,10,"refNeedsArrowPos"],[10782,28,9772,26],[10782,31,9772,29],[10783,0,9773,6,"start"],[10783,10,9773,6,"start"],[10783,15,9773,11],[10783,17,9773,13],[10784,0,9772,29],[10784,9,9772,4],[10785,0,9775,4],[10785,12,9775,8,"first"],[10785,17,9775,13],[10785,20,9775,16],[10785,24,9775,4],[10786,0,9776,4],[10786,12,9776,8,"spreadStart"],[10786,23,9776,4],[10787,0,9777,4],[10787,12,9777,8,"optionalCommaStart"],[10787,30,9777,4],[10789,0,9779,4],[10789,15,9779,11],[10789,16,9779,12],[10789,21,9779,17,"match"],[10789,26,9779,12],[10789,27,9779,23,"types"],[10789,32,9779,28],[10789,33,9779,29,"parenR"],[10789,39,9779,12],[10789,40,9779,4],[10789,42,9779,38],[10790,0,9780,6],[10790,14,9780,10,"first"],[10790,19,9780,6],[10790,21,9780,17],[10791,0,9781,8,"first"],[10791,12,9781,8,"first"],[10791,17,9781,13],[10791,20,9781,16],[10791,25,9781,8],[10792,0,9782,7],[10792,11,9780,6],[10792,17,9782,13],[10793,0,9783,8],[10793,17,9783,13,"expect"],[10793,23,9783,8],[10793,24,9783,20,"types"],[10793,29,9783,25],[10793,30,9783,26,"comma"],[10793,35,9783,8],[10793,37,9783,33,"refNeedsArrowPos"],[10793,53,9783,49],[10793,54,9783,50,"start"],[10793,59,9783,33],[10793,63,9783,59],[10793,67,9783,8],[10795,0,9785,8],[10795,16,9785,12],[10795,21,9785,17,"match"],[10795,26,9785,12],[10795,27,9785,23,"types"],[10795,32,9785,28],[10795,33,9785,29,"parenR"],[10795,39,9785,12],[10795,40,9785,8],[10795,42,9785,38],[10796,0,9786,10,"optionalCommaStart"],[10796,14,9786,10,"optionalCommaStart"],[10796,32,9786,28],[10796,35,9786,31],[10796,40,9786,36,"state"],[10796,45,9786,31],[10796,46,9786,42,"start"],[10796,51,9786,10],[10797,0,9787,10],[10798,0,9788,9],[10799,0,9789,7],[10801,0,9791,6],[10801,14,9791,10],[10801,19,9791,15,"match"],[10801,24,9791,10],[10801,25,9791,21,"types"],[10801,30,9791,26],[10801,31,9791,27,"ellipsis"],[10801,39,9791,10],[10801,40,9791,6],[10801,42,9791,38],[10802,0,9792,8],[10802,16,9792,14,"spreadNodeStartPos"],[10802,34,9792,32],[10802,37,9792,35],[10802,42,9792,40,"state"],[10802,47,9792,35],[10802,48,9792,46,"start"],[10802,53,9792,8],[10803,0,9793,8],[10803,16,9793,14,"spreadNodeStartLoc"],[10803,34,9793,32],[10803,37,9793,35],[10803,42,9793,40,"state"],[10803,47,9793,35],[10803,48,9793,46,"startLoc"],[10803,56,9793,8],[10804,0,9794,8,"spreadStart"],[10804,12,9794,8,"spreadStart"],[10804,23,9794,19],[10804,26,9794,22],[10804,31,9794,27,"state"],[10804,36,9794,22],[10804,37,9794,33,"start"],[10804,42,9794,8],[10805,0,9795,8,"exprList"],[10805,12,9795,8,"exprList"],[10805,20,9795,16],[10805,21,9795,17,"push"],[10805,25,9795,8],[10805,26,9795,22],[10805,31,9795,27,"parseParenItem"],[10805,45,9795,22],[10805,46,9795,42],[10805,51,9795,47,"parseRestBinding"],[10805,67,9795,42],[10805,69,9795,22],[10805,71,9795,67,"spreadNodeStartPos"],[10805,89,9795,22],[10805,91,9795,87,"spreadNodeStartLoc"],[10805,109,9795,22],[10805,110,9795,8],[10806,0,9796,8],[10806,17,9796,13,"checkCommaAfterRest"],[10806,36,9796,8],[10806,37,9796,33],[10806,39,9796,8],[10807,0,9797,8],[10808,0,9798,7],[10808,11,9791,6],[10808,17,9798,13],[10809,0,9799,8,"exprList"],[10809,12,9799,8,"exprList"],[10809,20,9799,16],[10809,21,9799,17,"push"],[10809,25,9799,8],[10809,26,9799,22],[10809,31,9799,27,"parseMaybeAssign"],[10809,47,9799,22],[10809,48,9799,44],[10809,53,9799,22],[10809,55,9799,51,"refShorthandDefaultPos"],[10809,77,9799,22],[10809,79,9799,75],[10809,84,9799,80,"parseParenItem"],[10809,98,9799,22],[10809,100,9799,96,"refNeedsArrowPos"],[10809,116,9799,22],[10809,117,9799,8],[10810,0,9800,7],[10811,0,9801,5],[10813,0,9803,4],[10813,12,9803,10,"innerEndPos"],[10813,23,9803,21],[10813,26,9803,24],[10813,31,9803,29,"state"],[10813,36,9803,24],[10813,37,9803,35,"start"],[10813,42,9803,4],[10814,0,9804,4],[10814,12,9804,10,"innerEndLoc"],[10814,23,9804,21],[10814,26,9804,24],[10814,31,9804,29,"state"],[10814,36,9804,24],[10814,37,9804,35,"startLoc"],[10814,45,9804,4],[10815,0,9805,4],[10815,13,9805,9,"expect"],[10815,19,9805,4],[10815,20,9805,16,"types"],[10815,25,9805,21],[10815,26,9805,22,"parenR"],[10815,32,9805,4],[10816,0,9806,4],[10816,13,9806,9,"state"],[10816,18,9806,4],[10816,19,9806,15,"maybeInArrowParameters"],[10816,41,9806,4],[10816,44,9806,40,"oldMaybeInArrowParameters"],[10816,69,9806,4],[10817,0,9807,4],[10817,13,9807,9,"state"],[10817,18,9807,4],[10817,19,9807,15,"inFSharpPipelineDirectBody"],[10817,45,9807,4],[10817,48,9807,44,"oldInFSharpPipelineDirectBody"],[10817,77,9807,4],[10818,0,9808,4],[10818,12,9808,8,"arrowNode"],[10818,21,9808,17],[10818,24,9808,20],[10818,29,9808,25,"startNodeAt"],[10818,40,9808,20],[10818,41,9808,37,"startPos"],[10818,49,9808,20],[10818,51,9808,47,"startLoc"],[10818,59,9808,20],[10818,60,9808,4],[10820,0,9810,4],[10820,12,9810,8,"canBeArrow"],[10820,22,9810,18],[10820,26,9810,22],[10820,31,9810,27,"shouldParseArrow"],[10820,47,9810,22],[10820,49,9810,8],[10820,54,9810,50,"arrowNode"],[10820,63,9810,59],[10820,66,9810,62],[10820,71,9810,67,"parseArrow"],[10820,81,9810,62],[10820,82,9810,78,"arrowNode"],[10820,91,9810,62],[10820,92,9810,8],[10820,93,9810,4],[10820,95,9810,91],[10821,0,9811,6],[10821,15,9811,11,"checkYieldAwaitInDefaultParams"],[10821,45,9811,6],[10822,0,9812,6],[10822,15,9812,11,"state"],[10822,20,9812,6],[10822,21,9812,17,"yieldPos"],[10822,29,9812,6],[10822,32,9812,28,"oldYieldPos"],[10822,43,9812,6],[10823,0,9813,6],[10823,15,9813,11,"state"],[10823,20,9813,6],[10823,21,9813,17,"awaitPos"],[10823,29,9813,6],[10823,32,9813,28,"oldAwaitPos"],[10823,43,9813,6],[10825,0,9815,6],[10825,15,9815,11],[10825,19,9815,15,"_i"],[10825,21,9815,17],[10825,24,9815,20],[10825,25,9815,6],[10825,27,9815,23,"_i"],[10825,29,9815,25],[10825,32,9815,28,"exprList"],[10825,40,9815,36],[10825,41,9815,37,"length"],[10825,47,9815,6],[10825,49,9815,45,"_i"],[10825,51,9815,47],[10825,53,9815,6],[10825,55,9815,51],[10826,0,9816,8],[10826,16,9816,14,"param"],[10826,21,9816,19],[10826,24,9816,22,"exprList"],[10826,32,9816,30],[10826,33,9816,31,"_i"],[10826,35,9816,30],[10826,36,9816,8],[10828,0,9818,8],[10828,16,9818,12,"param"],[10828,21,9818,17],[10828,22,9818,18,"extra"],[10828,27,9818,12],[10828,31,9818,27,"param"],[10828,36,9818,32],[10828,37,9818,33,"extra"],[10828,42,9818,27],[10828,43,9818,39,"parenthesized"],[10828,56,9818,8],[10828,58,9818,54],[10829,0,9819,10],[10829,19,9819,15,"unexpected"],[10829,29,9819,10],[10829,30,9819,26,"param"],[10829,35,9819,31],[10829,36,9819,32,"extra"],[10829,41,9819,26],[10829,42,9819,38,"parenStart"],[10829,52,9819,10],[10830,0,9820,9],[10831,0,9821,7],[10833,0,9823,6],[10833,15,9823,11,"parseArrowExpression"],[10833,35,9823,6],[10833,36,9823,32,"arrowNode"],[10833,45,9823,6],[10833,47,9823,43,"exprList"],[10833,55,9823,6],[10833,57,9823,53],[10833,62,9823,6],[10834,0,9824,6],[10834,17,9824,13,"arrowNode"],[10834,26,9824,6],[10835,0,9825,5],[10837,0,9827,4],[10837,12,9827,8,"oldYieldPos"],[10837,23,9827,19],[10837,28,9827,24],[10837,29,9827,25],[10837,30,9827,4],[10837,32,9827,28],[10837,37,9827,33,"state"],[10837,42,9827,28],[10837,43,9827,39,"yieldPos"],[10837,51,9827,28],[10837,54,9827,50,"oldYieldPos"],[10837,65,9827,28],[10838,0,9828,4],[10838,12,9828,8,"oldAwaitPos"],[10838,23,9828,19],[10838,28,9828,24],[10838,29,9828,25],[10838,30,9828,4],[10838,32,9828,28],[10838,37,9828,33,"state"],[10838,42,9828,28],[10838,43,9828,39,"awaitPos"],[10838,51,9828,28],[10838,54,9828,50,"oldAwaitPos"],[10838,65,9828,28],[10840,0,9830,4],[10840,12,9830,8],[10840,13,9830,9,"exprList"],[10840,21,9830,17],[10840,22,9830,18,"length"],[10840,28,9830,4],[10840,30,9830,26],[10841,0,9831,6],[10841,15,9831,11,"unexpected"],[10841,25,9831,6],[10841,26,9831,22],[10841,31,9831,27,"state"],[10841,36,9831,22],[10841,37,9831,33,"lastTokStart"],[10841,49,9831,6],[10842,0,9832,5],[10844,0,9834,4],[10844,12,9834,8,"optionalCommaStart"],[10844,30,9834,4],[10844,32,9834,28],[10844,37,9834,33,"unexpected"],[10844,47,9834,28],[10844,48,9834,44,"optionalCommaStart"],[10844,66,9834,28],[10845,0,9835,4],[10845,12,9835,8,"spreadStart"],[10845,23,9835,4],[10845,25,9835,21],[10845,30,9835,26,"unexpected"],[10845,40,9835,21],[10845,41,9835,37,"spreadStart"],[10845,52,9835,21],[10847,0,9837,4],[10847,12,9837,8,"refShorthandDefaultPos"],[10847,34,9837,30],[10847,35,9837,31,"start"],[10847,40,9837,4],[10847,42,9837,38],[10848,0,9838,6],[10848,15,9838,11,"unexpected"],[10848,25,9838,6],[10848,26,9838,22,"refShorthandDefaultPos"],[10848,48,9838,44],[10848,49,9838,45,"start"],[10848,54,9838,6],[10849,0,9839,5],[10851,0,9841,4],[10851,12,9841,8,"refNeedsArrowPos"],[10851,28,9841,24],[10851,29,9841,25,"start"],[10851,34,9841,4],[10851,36,9841,32],[10851,41,9841,37,"unexpected"],[10851,51,9841,32],[10851,52,9841,48,"refNeedsArrowPos"],[10851,68,9841,64],[10851,69,9841,65,"start"],[10851,74,9841,32],[10852,0,9842,4],[10852,13,9842,9,"toReferencedListDeep"],[10852,33,9842,4],[10852,34,9842,30,"exprList"],[10852,42,9842,4],[10852,44,9842,40],[10852,48,9842,4],[10854,0,9844,4],[10854,12,9844,8,"exprList"],[10854,20,9844,16],[10854,21,9844,17,"length"],[10854,27,9844,8],[10854,30,9844,26],[10854,31,9844,4],[10854,33,9844,29],[10855,0,9845,6,"val"],[10855,10,9845,6,"val"],[10855,13,9845,9],[10855,16,9845,12],[10855,21,9845,17,"startNodeAt"],[10855,32,9845,12],[10855,33,9845,29,"innerStartPos"],[10855,46,9845,12],[10855,48,9845,44,"innerStartLoc"],[10855,61,9845,12],[10855,62,9845,6],[10856,0,9846,6,"val"],[10856,10,9846,6,"val"],[10856,13,9846,9],[10856,14,9846,10,"expressions"],[10856,25,9846,6],[10856,28,9846,24,"exprList"],[10856,36,9846,6],[10857,0,9847,6],[10857,15,9847,11,"finishNodeAt"],[10857,27,9847,6],[10857,28,9847,24,"val"],[10857,31,9847,6],[10857,33,9847,29],[10857,53,9847,6],[10857,55,9847,51,"innerEndPos"],[10857,66,9847,6],[10857,68,9847,64,"innerEndLoc"],[10857,79,9847,6],[10858,0,9848,5],[10858,9,9844,4],[10858,15,9848,11],[10859,0,9849,6,"val"],[10859,10,9849,6,"val"],[10859,13,9849,9],[10859,16,9849,12,"exprList"],[10859,24,9849,20],[10859,25,9849,21],[10859,26,9849,20],[10859,27,9849,6],[10860,0,9850,5],[10862,0,9852,4],[10862,12,9852,8],[10862,13,9852,9],[10862,18,9852,14,"options"],[10862,25,9852,9],[10862,26,9852,22,"createParenthesizedExpressions"],[10862,56,9852,4],[10862,58,9852,54],[10863,0,9853,6],[10863,15,9853,11,"addExtra"],[10863,23,9853,6],[10863,24,9853,20,"val"],[10863,27,9853,6],[10863,29,9853,25],[10863,44,9853,6],[10863,46,9853,42],[10863,50,9853,6],[10864,0,9854,6],[10864,15,9854,11,"addExtra"],[10864,23,9854,6],[10864,24,9854,20,"val"],[10864,27,9854,6],[10864,29,9854,25],[10864,41,9854,6],[10864,43,9854,39,"startPos"],[10864,51,9854,6],[10865,0,9855,6],[10865,17,9855,13,"val"],[10865,20,9855,6],[10866,0,9856,5],[10868,0,9858,4],[10868,12,9858,10,"parenExpression"],[10868,27,9858,25],[10868,30,9858,28],[10868,35,9858,33,"startNodeAt"],[10868,46,9858,28],[10868,47,9858,45,"startPos"],[10868,55,9858,28],[10868,57,9858,55,"startLoc"],[10868,65,9858,28],[10868,66,9858,4],[10869,0,9859,4,"parenExpression"],[10869,8,9859,4,"parenExpression"],[10869,23,9859,19],[10869,24,9859,20,"expression"],[10869,34,9859,4],[10869,37,9859,33,"val"],[10869,40,9859,4],[10870,0,9860,4],[10870,13,9860,9,"finishNode"],[10870,23,9860,4],[10870,24,9860,20,"parenExpression"],[10870,39,9860,4],[10870,41,9860,37],[10870,66,9860,4],[10871,0,9861,4],[10871,15,9861,11,"parenExpression"],[10871,30,9861,4],[10872,0,9862,3],[10875,41,9864,21],[10876,0,9865,4],[10876,15,9865,11],[10876,16,9865,12],[10876,21,9865,17,"canInsertSemicolon"],[10876,39,9865,12],[10876,41,9865,4],[10877,0,9866,3],[10880,33,9868,13,"node"],[10880,37],[10880,39,9868,19],[10881,0,9869,4],[10881,12,9869,8],[10881,17,9869,13,"eat"],[10881,20,9869,8],[10881,21,9869,17,"types"],[10881,26,9869,22],[10881,27,9869,23,"arrow"],[10881,32,9869,8],[10881,33,9869,4],[10881,35,9869,31],[10882,0,9870,6],[10882,17,9870,13,"node"],[10882,21,9870,6],[10883,0,9871,5],[10884,0,9872,3],[10887,37,9874,17,"node"],[10887,41],[10887,43,9874,23,"startPos"],[10887,51],[10887,53,9874,33,"startLoc"],[10887,61],[10887,63,9874,43],[10888,0,9875,4],[10888,15,9875,11,"node"],[10888,19,9875,4],[10889,0,9876,3],[10892,33,9878,13],[10893,0,9879,4],[10893,12,9879,10,"node"],[10893,16,9879,14],[10893,19,9879,17],[10893,24,9879,22,"startNode"],[10893,33,9879,17],[10893,35,9879,4],[10894,0,9880,4],[10894,12,9880,8,"meta"],[10894,16,9880,12],[10894,19,9880,15],[10894,24,9880,20,"startNode"],[10894,33,9880,15],[10894,35,9880,4],[10895,0,9881,4],[10895,13,9881,9,"next"],[10895,17,9881,4],[10896,0,9882,4,"meta"],[10896,8,9882,4,"meta"],[10896,12,9882,8],[10896,15,9882,11],[10896,20,9882,16,"createIdentifier"],[10896,36,9882,11],[10896,37,9882,33,"meta"],[10896,41,9882,11],[10896,43,9882,39],[10896,48,9882,11],[10896,49,9882,4],[10898,0,9884,4],[10898,12,9884,8],[10898,17,9884,13,"eat"],[10898,20,9884,8],[10898,21,9884,17,"types"],[10898,26,9884,22],[10898,27,9884,23,"dot"],[10898,30,9884,8],[10898,31,9884,4],[10898,33,9884,29],[10899,0,9885,6],[10899,14,9885,12,"metaProp"],[10899,22,9885,20],[10899,25,9885,23],[10899,30,9885,28,"parseMetaProperty"],[10899,47,9885,23],[10899,48,9885,46,"node"],[10899,52,9885,23],[10899,54,9885,52,"meta"],[10899,58,9885,23],[10899,60,9885,58],[10899,68,9885,23],[10899,69,9885,6],[10901,0,9887,6],[10901,14,9887,10],[10901,15,9887,11],[10901,20,9887,16,"scope"],[10901,25,9887,11],[10901,26,9887,22,"inNonArrowFunction"],[10901,44,9887,10],[10901,48,9887,44],[10901,49,9887,45],[10901,54,9887,50,"state"],[10901,59,9887,45],[10901,60,9887,56,"inClassProperty"],[10901,75,9887,6],[10901,77,9887,73],[10902,0,9888,8],[10902,16,9888,12,"error"],[10902,21,9888,17],[10902,24,9888,20],[10902,66,9888,8],[10904,0,9890,8],[10904,16,9890,12],[10904,21,9890,17,"hasPlugin"],[10904,30,9890,12],[10904,31,9890,27],[10904,48,9890,12],[10904,49,9890,8],[10904,51,9890,47],[10905,0,9891,10,"error"],[10905,14,9891,10,"error"],[10905,19,9891,15],[10905,23,9891,19],[10905,45,9891,10],[10906,0,9892,9],[10908,0,9894,8],[10908,17,9894,13,"raise"],[10908,22,9894,8],[10908,23,9894,19,"metaProp"],[10908,31,9894,27],[10908,32,9894,28,"start"],[10908,37,9894,8],[10908,39,9894,35,"error"],[10908,44,9894,8],[10909,0,9895,7],[10911,0,9897,6],[10911,17,9897,13,"metaProp"],[10911,25,9897,6],[10912,0,9898,5],[10914,0,9900,4,"node"],[10914,8,9900,4,"node"],[10914,12,9900,8],[10914,13,9900,9,"callee"],[10914,19,9900,4],[10914,22,9900,18],[10914,27,9900,23,"parseNoCallExpr"],[10914,42,9900,18],[10914,44,9900,4],[10916,0,9902,4],[10916,12,9902,8,"node"],[10916,16,9902,12],[10916,17,9902,13,"callee"],[10916,23,9902,8],[10916,24,9902,20,"type"],[10916,28,9902,8],[10916,33,9902,29],[10916,41,9902,4],[10916,43,9902,39],[10917,0,9903,6],[10917,15,9903,11,"raise"],[10917,20,9903,6],[10917,21,9903,17,"node"],[10917,25,9903,21],[10917,26,9903,22,"callee"],[10917,32,9903,17],[10917,33,9903,29,"start"],[10917,38,9903,6],[10917,40,9903,36],[10917,73,9903,6],[10918,0,9904,5],[10918,9,9902,4],[10918,15,9904,11],[10918,19,9904,15,"node"],[10918,23,9904,19],[10918,24,9904,20,"callee"],[10918,30,9904,15],[10918,31,9904,27,"type"],[10918,35,9904,15],[10918,40,9904,36],[10918,66,9904,15],[10918,70,9904,66,"node"],[10918,74,9904,70],[10918,75,9904,71,"callee"],[10918,81,9904,66],[10918,82,9904,78,"type"],[10918,86,9904,66],[10918,91,9904,87],[10918,115,9904,11],[10918,117,9904,113],[10919,0,9905,6],[10919,15,9905,11,"raise"],[10919,20,9905,6],[10919,21,9905,17],[10919,26,9905,22,"state"],[10919,31,9905,17],[10919,32,9905,28,"lastTokEnd"],[10919,42,9905,6],[10919,44,9905,40],[10919,101,9905,6],[10920,0,9906,5],[10920,9,9904,11],[10920,15,9906,11],[10920,19,9906,15],[10920,24,9906,20,"eat"],[10920,27,9906,15],[10920,28,9906,24,"types"],[10920,33,9906,29],[10920,34,9906,30,"questionDot"],[10920,45,9906,15],[10920,46,9906,11],[10920,48,9906,44],[10921,0,9907,6],[10921,15,9907,11,"raise"],[10921,20,9907,6],[10921,21,9907,17],[10921,26,9907,22,"state"],[10921,31,9907,17],[10921,32,9907,28,"start"],[10921,37,9907,6],[10921,39,9907,35],[10921,96,9907,6],[10922,0,9908,5],[10924,0,9910,4],[10924,13,9910,9,"parseNewArguments"],[10924,30,9910,4],[10924,31,9910,27,"node"],[10924,35,9910,4],[10925,0,9911,4],[10925,15,9911,11],[10925,20,9911,16,"finishNode"],[10925,30,9911,11],[10925,31,9911,27,"node"],[10925,35,9911,11],[10925,37,9911,33],[10925,52,9911,11],[10925,53,9911,4],[10926,0,9912,3],[10929,40,9914,20,"node"],[10929,44],[10929,46,9914,26],[10930,0,9915,4],[10930,12,9915,8],[10930,17,9915,13,"eat"],[10930,20,9915,8],[10930,21,9915,17,"types"],[10930,26,9915,22],[10930,27,9915,23,"parenL"],[10930,33,9915,8],[10930,34,9915,4],[10930,36,9915,32],[10931,0,9916,6],[10931,14,9916,12,"args"],[10931,18,9916,16],[10931,21,9916,19],[10931,26,9916,24,"parseExprList"],[10931,39,9916,19],[10931,40,9916,38,"types"],[10931,45,9916,43],[10931,46,9916,44,"parenR"],[10931,52,9916,19],[10931,53,9916,6],[10932,0,9917,6],[10932,15,9917,11,"toReferencedList"],[10932,31,9917,6],[10932,32,9917,28,"args"],[10932,36,9917,6],[10933,0,9918,6,"node"],[10933,10,9918,6,"node"],[10933,14,9918,10],[10933,15,9918,11,"arguments"],[10933,24,9918,6],[10933,27,9918,23,"args"],[10933,31,9918,6],[10934,0,9919,5],[10934,9,9915,4],[10934,15,9919,11],[10935,0,9920,6,"node"],[10935,10,9920,6,"node"],[10935,14,9920,10],[10935,15,9920,11,"arguments"],[10935,24,9920,6],[10935,27,9920,23],[10935,29,9920,6],[10936,0,9921,5],[10937,0,9922,3],[10940,43,9924,23,"isTagged"],[10940,51],[10940,53,9924,33],[10941,0,9925,4],[10941,12,9925,10,"elem"],[10941,16,9925,14],[10941,19,9925,17],[10941,24,9925,22,"startNode"],[10941,33,9925,17],[10941,35,9925,4],[10943,0,9927,4],[10943,12,9927,8],[10943,17,9927,13,"state"],[10943,22,9927,8],[10943,23,9927,19,"value"],[10943,28,9927,8],[10943,33,9927,29],[10943,37,9927,4],[10943,39,9927,35],[10944,0,9928,6],[10944,14,9928,10],[10944,15,9928,11,"isTagged"],[10944,23,9928,6],[10944,25,9928,21],[10945,0,9929,8],[10945,17,9929,13,"raise"],[10945,22,9929,8],[10945,23,9929,19],[10945,28,9929,24,"state"],[10945,33,9929,19],[10945,34,9929,30,"invalidTemplateEscapePosition"],[10945,63,9929,19],[10945,67,9929,63],[10945,68,9929,8],[10945,70,9929,66],[10945,107,9929,8],[10946,0,9930,7],[10946,11,9928,6],[10946,17,9930,13],[10947,0,9931,8],[10947,17,9931,13,"state"],[10947,22,9931,8],[10947,23,9931,19,"invalidTemplateEscapePosition"],[10947,52,9931,8],[10947,55,9931,51],[10947,59,9931,8],[10948,0,9932,7],[10949,0,9933,5],[10951,0,9935,4,"elem"],[10951,8,9935,4,"elem"],[10951,12,9935,8],[10951,13,9935,9,"value"],[10951,18,9935,4],[10951,21,9935,17],[10952,0,9936,6,"raw"],[10952,10,9936,6,"raw"],[10952,13,9936,9],[10952,15,9936,11],[10952,20,9936,16,"input"],[10952,25,9936,11],[10952,26,9936,22,"slice"],[10952,31,9936,11],[10952,32,9936,28],[10952,37,9936,33,"state"],[10952,42,9936,28],[10952,43,9936,39,"start"],[10952,48,9936,11],[10952,50,9936,46],[10952,55,9936,51,"state"],[10952,60,9936,46],[10952,61,9936,57,"end"],[10952,64,9936,11],[10952,66,9936,62,"replace"],[10952,73,9936,11],[10952,74,9936,70],[10952,82,9936,11],[10952,84,9936,80],[10952,88,9936,11],[10952,89,9935,17],[10953,0,9937,6,"cooked"],[10953,10,9937,6,"cooked"],[10953,16,9937,12],[10953,18,9937,14],[10953,23,9937,19,"state"],[10953,28,9937,14],[10953,29,9937,25,"value"],[10954,0,9935,17],[10954,9,9935,4],[10955,0,9939,4],[10955,13,9939,9,"next"],[10955,17,9939,4],[10956,0,9940,4,"elem"],[10956,8,9940,4,"elem"],[10956,12,9940,8],[10956,13,9940,9,"tail"],[10956,17,9940,4],[10956,20,9940,16],[10956,25,9940,21,"match"],[10956,30,9940,16],[10956,31,9940,27,"types"],[10956,36,9940,32],[10956,37,9940,33,"backQuote"],[10956,46,9940,16],[10956,47,9940,4],[10957,0,9941,4],[10957,15,9941,11],[10957,20,9941,16,"finishNode"],[10957,30,9941,11],[10957,31,9941,27,"elem"],[10957,35,9941,11],[10957,37,9941,33],[10957,54,9941,11],[10957,55,9941,4],[10958,0,9942,3],[10961,36,9944,16,"isTagged"],[10961,44],[10961,46,9944,26],[10962,0,9945,4],[10962,12,9945,10,"node"],[10962,16,9945,14],[10962,19,9945,17],[10962,24,9945,22,"startNode"],[10962,33,9945,17],[10962,35,9945,4],[10963,0,9946,4],[10963,13,9946,9,"next"],[10963,17,9946,4],[10964,0,9947,4,"node"],[10964,8,9947,4,"node"],[10964,12,9947,8],[10964,13,9947,9,"expressions"],[10964,24,9947,4],[10964,27,9947,23],[10964,29,9947,4],[10965,0,9948,4],[10965,12,9948,8,"curElt"],[10965,18,9948,14],[10965,21,9948,17],[10965,26,9948,22,"parseTemplateElement"],[10965,46,9948,17],[10965,47,9948,43,"isTagged"],[10965,55,9948,17],[10965,56,9948,4],[10966,0,9949,4,"node"],[10966,8,9949,4,"node"],[10966,12,9949,8],[10966,13,9949,9,"quasis"],[10966,19,9949,4],[10966,22,9949,18],[10966,23,9949,19,"curElt"],[10966,29,9949,18],[10966,30,9949,4],[10968,0,9951,4],[10968,15,9951,11],[10968,16,9951,12,"curElt"],[10968,22,9951,18],[10968,23,9951,19,"tail"],[10968,27,9951,4],[10968,29,9951,25],[10969,0,9952,6],[10969,15,9952,11,"expect"],[10969,21,9952,6],[10969,22,9952,18,"types"],[10969,27,9952,23],[10969,28,9952,24,"dollarBraceL"],[10969,40,9952,6],[10970,0,9953,6,"node"],[10970,10,9953,6,"node"],[10970,14,9953,10],[10970,15,9953,11,"expressions"],[10970,26,9953,6],[10970,27,9953,23,"push"],[10970,31,9953,6],[10970,32,9953,28],[10970,37,9953,33,"parseExpression"],[10970,52,9953,28],[10970,54,9953,6],[10971,0,9954,6],[10971,15,9954,11,"expect"],[10971,21,9954,6],[10971,22,9954,18,"types"],[10971,27,9954,23],[10971,28,9954,24,"braceR"],[10971,34,9954,6],[10972,0,9955,6,"node"],[10972,10,9955,6,"node"],[10972,14,9955,10],[10972,15,9955,11,"quasis"],[10972,21,9955,6],[10972,22,9955,18,"push"],[10972,26,9955,6],[10972,27,9955,23,"curElt"],[10972,33,9955,29],[10972,36,9955,32],[10972,41,9955,37,"parseTemplateElement"],[10972,61,9955,32],[10972,62,9955,58,"isTagged"],[10972,70,9955,32],[10972,71,9955,6],[10973,0,9956,5],[10975,0,9958,4],[10975,13,9958,9,"next"],[10975,17,9958,4],[10976,0,9959,4],[10976,15,9959,11],[10976,20,9959,16,"finishNode"],[10976,30,9959,11],[10976,31,9959,27,"node"],[10976,35,9959,11],[10976,37,9959,33],[10976,54,9959,11],[10976,55,9959,4],[10977,0,9960,3],[10980,31,9962,11,"isPattern"],[10980,40],[10980,42,9962,22,"refShorthandDefaultPos"],[10980,64],[10980,66,9962,46],[10981,0,9963,4],[10981,12,9963,10,"propHash"],[10981,20,9963,18],[10981,23,9963,21,"Object"],[10981,29,9963,27],[10981,30,9963,28,"create"],[10981,36,9963,21],[10981,37,9963,35],[10981,41,9963,21],[10981,42,9963,4],[10982,0,9964,4],[10982,12,9964,8,"first"],[10982,17,9964,13],[10982,20,9964,16],[10982,24,9964,4],[10983,0,9965,4],[10983,12,9965,10,"node"],[10983,16,9965,14],[10983,19,9965,17],[10983,24,9965,22,"startNode"],[10983,33,9965,17],[10983,35,9965,4],[10984,0,9966,4,"node"],[10984,8,9966,4,"node"],[10984,12,9966,8],[10984,13,9966,9,"properties"],[10984,23,9966,4],[10984,26,9966,22],[10984,28,9966,4],[10985,0,9967,4],[10985,13,9967,9,"next"],[10985,17,9967,4],[10987,0,9969,4],[10987,15,9969,11],[10987,16,9969,12],[10987,21,9969,17,"eat"],[10987,24,9969,12],[10987,25,9969,21,"types"],[10987,30,9969,26],[10987,31,9969,27,"braceR"],[10987,37,9969,12],[10987,38,9969,4],[10987,40,9969,36],[10988,0,9970,6],[10988,14,9970,10,"first"],[10988,19,9970,6],[10988,21,9970,17],[10989,0,9971,8,"first"],[10989,12,9971,8,"first"],[10989,17,9971,13],[10989,20,9971,16],[10989,25,9971,8],[10990,0,9972,7],[10990,11,9970,6],[10990,17,9972,13],[10991,0,9973,8],[10991,17,9973,13,"expect"],[10991,23,9973,8],[10991,24,9973,20,"types"],[10991,29,9973,25],[10991,30,9973,26,"comma"],[10991,35,9973,8],[10993,0,9975,8],[10993,16,9975,12],[10993,21,9975,17,"match"],[10993,26,9975,12],[10993,27,9975,23,"types"],[10993,32,9975,28],[10993,33,9975,29,"braceR"],[10993,39,9975,12],[10993,40,9975,8],[10993,42,9975,38],[10994,0,9976,10],[10994,19,9976,15,"addExtra"],[10994,27,9976,10],[10994,28,9976,24,"node"],[10994,32,9976,10],[10994,34,9976,30],[10994,49,9976,10],[10994,51,9976,47],[10994,56,9976,52,"state"],[10994,61,9976,47],[10994,62,9976,58,"lastTokStart"],[10994,74,9976,10],[10995,0,9977,10],[10995,19,9977,15,"next"],[10995,23,9977,10],[10996,0,9978,10],[10997,0,9979,9],[10998,0,9980,7],[11000,0,9982,6],[11000,14,9982,12,"prop"],[11000,18,9982,16],[11000,21,9982,19],[11000,26,9982,24,"parseObjectMember"],[11000,43,9982,19],[11000,44,9982,42,"isPattern"],[11000,53,9982,19],[11000,55,9982,53,"refShorthandDefaultPos"],[11000,77,9982,19],[11000,78,9982,6],[11001,0,9983,6],[11001,14,9983,10],[11001,15,9983,11,"isPattern"],[11001,24,9983,6],[11001,26,9983,22],[11001,31,9983,27,"checkDuplicatedProto"],[11001,51,9983,22],[11001,52,9983,48,"prop"],[11001,56,9983,22],[11001,58,9983,54,"propHash"],[11001,66,9983,22],[11003,0,9985,6],[11003,14,9985,10,"prop"],[11003,18,9985,14],[11003,19,9985,15,"shorthand"],[11003,28,9985,6],[11003,30,9985,26],[11004,0,9986,8],[11004,17,9986,13,"addExtra"],[11004,25,9986,8],[11004,26,9986,22,"prop"],[11004,30,9986,8],[11004,32,9986,28],[11004,43,9986,8],[11004,45,9986,41],[11004,49,9986,8],[11005,0,9987,7],[11007,0,9989,6,"node"],[11007,10,9989,6,"node"],[11007,14,9989,10],[11007,15,9989,11,"properties"],[11007,25,9989,6],[11007,26,9989,22,"push"],[11007,30,9989,6],[11007,31,9989,27,"prop"],[11007,35,9989,6],[11008,0,9990,5],[11010,0,9992,4],[11010,12,9992,8],[11010,13,9992,9],[11010,18,9992,14,"match"],[11010,23,9992,9],[11010,24,9992,20,"types"],[11010,29,9992,25],[11010,30,9992,26,"eq"],[11010,32,9992,9],[11010,33,9992,8],[11010,37,9992,33,"propHash"],[11010,45,9992,41],[11010,46,9992,42,"start"],[11010,51,9992,33],[11010,56,9992,52,"undefined"],[11010,65,9992,4],[11010,67,9992,63],[11011,0,9993,6],[11011,15,9993,11,"raise"],[11011,20,9993,6],[11011,21,9993,17,"propHash"],[11011,29,9993,25],[11011,30,9993,26,"start"],[11011,35,9993,6],[11011,37,9993,33],[11011,73,9993,6],[11012,0,9994,5],[11014,0,9996,4],[11014,15,9996,11],[11014,20,9996,16,"finishNode"],[11014,30,9996,11],[11014,31,9996,27,"node"],[11014,35,9996,11],[11014,37,9996,33,"isPattern"],[11014,46,9996,42],[11014,49,9996,45],[11014,64,9996,42],[11014,67,9996,63],[11014,85,9996,11],[11014,86,9996,4],[11015,0,9997,3],[11018,34,9999,14,"prop"],[11018,38],[11018,40,9999,20],[11019,0,10000,4],[11019,15,10000,11],[11019,16,10000,12,"prop"],[11019,20,10000,16],[11019,21,10000,17,"computed"],[11019,29,10000,11],[11019,33,10000,29,"prop"],[11019,37,10000,33],[11019,38,10000,34,"key"],[11019,41,10000,29],[11019,42,10000,38,"type"],[11019,46,10000,29],[11019,51,10000,47],[11019,63,10000,11],[11019,67,10000,63,"prop"],[11019,71,10000,67],[11019,72,10000,68,"key"],[11019,75,10000,63],[11019,76,10000,72,"name"],[11019,80,10000,63],[11019,85,10000,81],[11019,92,10000,11],[11019,97,10000,93],[11019,102,10000,98,"match"],[11019,107,10000,93],[11019,108,10000,104,"types"],[11019,113,10000,109],[11019,114,10000,110,"name"],[11019,118,10000,93],[11019,123,10000,119],[11019,128,10000,124,"match"],[11019,133,10000,119],[11019,134,10000,130,"types"],[11019,139,10000,135],[11019,140,10000,136,"num"],[11019,143,10000,119],[11019,144,10000,93],[11019,148,10000,144],[11019,153,10000,149,"match"],[11019,158,10000,144],[11019,159,10000,155,"types"],[11019,164,10000,160],[11019,165,10000,161,"string"],[11019,171,10000,144],[11019,172,10000,93],[11019,176,10000,172],[11019,181,10000,177,"match"],[11019,186,10000,172],[11019,187,10000,183,"types"],[11019,192,10000,188],[11019,193,10000,189,"bracketL"],[11019,201,10000,172],[11019,202,10000,93],[11019,206,10000,202],[11019,211,10000,207,"state"],[11019,216,10000,202],[11019,217,10000,213,"type"],[11019,221,10000,202],[11019,222,10000,218,"keyword"],[11019,229,10000,93],[11019,233,10000,229],[11019,238,10000,234,"match"],[11019,243,10000,229],[11019,244,10000,240,"types"],[11019,249,10000,245],[11019,250,10000,246,"star"],[11019,254,10000,229],[11019,255,10000,11],[11019,260,10000,256],[11019,261,10000,257],[11019,266,10000,262,"hasPrecedingLineBreak"],[11019,287,10000,257],[11019,289,10000,4],[11020,0,10001,3],[11023,40,10003,20,"isPattern"],[11023,49],[11023,51,10003,31,"refShorthandDefaultPos"],[11023,73],[11023,75,10003,55],[11024,0,10004,4],[11024,12,10004,8,"decorators"],[11024,22,10004,18],[11024,25,10004,21],[11024,27,10004,4],[11026,0,10006,4],[11026,12,10006,8],[11026,17,10006,13,"match"],[11026,22,10006,8],[11026,23,10006,19,"types"],[11026,28,10006,24],[11026,29,10006,25,"at"],[11026,31,10006,8],[11026,32,10006,4],[11026,34,10006,30],[11027,0,10007,6],[11027,14,10007,10],[11027,19,10007,15,"hasPlugin"],[11027,28,10007,10],[11027,29,10007,25],[11027,41,10007,10],[11027,42,10007,6],[11027,44,10007,40],[11028,0,10008,8],[11028,17,10008,13,"raise"],[11028,22,10008,8],[11028,23,10008,19],[11028,28,10008,24,"state"],[11028,33,10008,19],[11028,34,10008,30,"start"],[11028,39,10008,8],[11028,41,10008,37],[11028,105,10008,8],[11029,0,10009,7],[11031,0,10011,6],[11031,17,10011,13],[11031,22,10011,18,"match"],[11031,27,10011,13],[11031,28,10011,24,"types"],[11031,33,10011,29],[11031,34,10011,30,"at"],[11031,36,10011,13],[11031,37,10011,6],[11031,39,10011,35],[11032,0,10012,8,"decorators"],[11032,12,10012,8,"decorators"],[11032,22,10012,18],[11032,23,10012,19,"push"],[11032,27,10012,8],[11032,28,10012,24],[11032,33,10012,29,"parseDecorator"],[11032,47,10012,24],[11032,49,10012,8],[11033,0,10013,7],[11034,0,10014,5],[11036,0,10016,4],[11036,12,10016,10,"prop"],[11036,16,10016,14],[11036,19,10016,17],[11036,24,10016,22,"startNode"],[11036,33,10016,17],[11036,35,10016,4],[11037,0,10017,4],[11037,12,10017,8,"isGenerator"],[11037,23,10017,19],[11037,26,10017,22],[11037,31,10017,4],[11038,0,10018,4],[11038,12,10018,8,"isAsync"],[11038,19,10018,15],[11038,22,10018,18],[11038,27,10018,4],[11039,0,10019,4],[11039,12,10019,8,"startPos"],[11039,20,10019,4],[11040,0,10020,4],[11040,12,10020,8,"startLoc"],[11040,20,10020,4],[11042,0,10022,4],[11042,12,10022,8],[11042,17,10022,13,"match"],[11042,22,10022,8],[11042,23,10022,19,"types"],[11042,28,10022,24],[11042,29,10022,25,"ellipsis"],[11042,37,10022,8],[11042,38,10022,4],[11042,40,10022,36],[11043,0,10023,6],[11043,14,10023,10,"decorators"],[11043,24,10023,20],[11043,25,10023,21,"length"],[11043,31,10023,6],[11043,33,10023,29],[11043,38,10023,34,"unexpected"],[11043,48,10023,29],[11045,0,10025,6],[11045,14,10025,10,"isPattern"],[11045,23,10025,6],[11045,25,10025,21],[11046,0,10026,8],[11046,17,10026,13,"next"],[11046,21,10026,8],[11047,0,10027,8,"prop"],[11047,12,10027,8,"prop"],[11047,16,10027,12],[11047,17,10027,13,"argument"],[11047,25,10027,8],[11047,28,10027,24],[11047,33,10027,29,"parseIdentifier"],[11047,48,10027,24],[11047,50,10027,8],[11048,0,10028,8],[11048,17,10028,13,"checkCommaAfterRest"],[11048,36,10028,8],[11048,37,10028,33],[11048,40,10028,8],[11049,0,10029,8],[11049,19,10029,15],[11049,24,10029,20,"finishNode"],[11049,34,10029,15],[11049,35,10029,31,"prop"],[11049,39,10029,15],[11049,41,10029,37],[11049,54,10029,15],[11049,55,10029,8],[11050,0,10030,7],[11052,0,10032,6],[11052,17,10032,13],[11052,22,10032,18,"parseSpread"],[11052,33,10032,13],[11052,35,10032,6],[11053,0,10033,5],[11055,0,10035,4],[11055,12,10035,8,"decorators"],[11055,22,10035,18],[11055,23,10035,19,"length"],[11055,29,10035,4],[11055,31,10035,27],[11056,0,10036,6,"prop"],[11056,10,10036,6,"prop"],[11056,14,10036,10],[11056,15,10036,11,"decorators"],[11056,25,10036,6],[11056,28,10036,24,"decorators"],[11056,38,10036,6],[11057,0,10037,6,"decorators"],[11057,10,10037,6,"decorators"],[11057,20,10037,16],[11057,23,10037,19],[11057,25,10037,6],[11058,0,10038,5],[11060,0,10040,4,"prop"],[11060,8,10040,4,"prop"],[11060,12,10040,8],[11060,13,10040,9,"method"],[11060,19,10040,4],[11060,22,10040,18],[11060,27,10040,4],[11062,0,10042,4],[11062,12,10042,8,"isPattern"],[11062,21,10042,17],[11062,25,10042,21,"refShorthandDefaultPos"],[11062,47,10042,4],[11062,49,10042,45],[11063,0,10043,6,"startPos"],[11063,10,10043,6,"startPos"],[11063,18,10043,14],[11063,21,10043,17],[11063,26,10043,22,"state"],[11063,31,10043,17],[11063,32,10043,28,"start"],[11063,37,10043,6],[11064,0,10044,6,"startLoc"],[11064,10,10044,6,"startLoc"],[11064,18,10044,14],[11064,21,10044,17],[11064,26,10044,22,"state"],[11064,31,10044,17],[11064,32,10044,28,"startLoc"],[11064,40,10044,6],[11065,0,10045,5],[11067,0,10047,4],[11067,12,10047,8],[11067,13,10047,9,"isPattern"],[11067,22,10047,4],[11067,24,10047,20],[11068,0,10048,6,"isGenerator"],[11068,10,10048,6,"isGenerator"],[11068,21,10048,17],[11068,24,10048,20],[11068,29,10048,25,"eat"],[11068,32,10048,20],[11068,33,10048,29,"types"],[11068,38,10048,34],[11068,39,10048,35,"star"],[11068,43,10048,20],[11068,44,10048,6],[11069,0,10049,5],[11071,0,10051,4],[11071,12,10051,10,"containsEsc"],[11071,23,10051,21],[11071,26,10051,24],[11071,31,10051,29,"state"],[11071,36,10051,24],[11071,37,10051,35,"containsEsc"],[11071,48,10051,4],[11072,0,10052,4],[11072,13,10052,9,"parsePropertyName"],[11072,30,10052,4],[11072,31,10052,27,"prop"],[11072,35,10052,4],[11074,0,10054,4],[11074,12,10054,8],[11074,13,10054,9,"isPattern"],[11074,22,10054,8],[11074,26,10054,22],[11074,27,10054,23,"containsEsc"],[11074,38,10054,8],[11074,42,10054,38],[11074,43,10054,39,"isGenerator"],[11074,54,10054,8],[11074,58,10054,54],[11074,63,10054,59,"isAsyncProp"],[11074,74,10054,54],[11074,75,10054,71,"prop"],[11074,79,10054,54],[11074,80,10054,4],[11074,82,10054,78],[11075,0,10055,6,"isAsync"],[11075,10,10055,6,"isAsync"],[11075,17,10055,13],[11075,20,10055,16],[11075,24,10055,6],[11076,0,10056,6,"isGenerator"],[11076,10,10056,6,"isGenerator"],[11076,21,10056,17],[11076,24,10056,20],[11076,29,10056,25,"eat"],[11076,32,10056,20],[11076,33,10056,29,"types"],[11076,38,10056,34],[11076,39,10056,35,"star"],[11076,43,10056,20],[11076,44,10056,6],[11077,0,10057,6],[11077,15,10057,11,"parsePropertyName"],[11077,32,10057,6],[11077,33,10057,29,"prop"],[11077,37,10057,6],[11078,0,10058,5],[11078,9,10054,4],[11078,15,10058,11],[11079,0,10059,6,"isAsync"],[11079,10,10059,6,"isAsync"],[11079,17,10059,13],[11079,20,10059,16],[11079,25,10059,6],[11080,0,10060,5],[11082,0,10062,4],[11082,13,10062,9,"parseObjPropValue"],[11082,30,10062,4],[11082,31,10062,27,"prop"],[11082,35,10062,4],[11082,37,10062,33,"startPos"],[11082,45,10062,4],[11082,47,10062,43,"startLoc"],[11082,55,10062,4],[11082,57,10062,53,"isGenerator"],[11082,68,10062,4],[11082,70,10062,66,"isAsync"],[11082,77,10062,4],[11082,79,10062,75,"isPattern"],[11082,88,10062,4],[11082,90,10062,86,"refShorthandDefaultPos"],[11082,112,10062,4],[11082,114,10062,110,"containsEsc"],[11082,125,10062,4],[11083,0,10063,4],[11083,15,10063,11,"prop"],[11083,19,10063,4],[11084,0,10064,3],[11087,45,10066,25,"prop"],[11087,49],[11087,51,10066,31,"isPattern"],[11087,60],[11087,62,10066,42],[11088,0,10067,4],[11088,15,10067,11],[11088,16,10067,12,"isPattern"],[11088,25,10067,11],[11088,29,10067,25],[11088,30,10067,26,"prop"],[11088,34,10067,30],[11088,35,10067,31,"computed"],[11088,43,10067,11],[11088,47,10067,43,"prop"],[11088,51,10067,47],[11088,52,10067,48,"key"],[11088,55,10067,43],[11088,56,10067,52,"type"],[11088,60,10067,43],[11088,65,10067,61],[11088,77,10067,11],[11088,82,10067,78,"prop"],[11088,86,10067,82],[11088,87,10067,83,"key"],[11088,90,10067,78],[11088,91,10067,87,"name"],[11088,95,10067,78],[11088,100,10067,96],[11088,105,10067,78],[11088,109,10067,105,"prop"],[11088,113,10067,109],[11088,114,10067,110,"key"],[11088,117,10067,105],[11088,118,10067,114,"name"],[11088,122,10067,105],[11088,127,10067,123],[11088,132,10067,11],[11088,138,10067,134],[11088,143,10067,139,"match"],[11088,148,10067,134],[11088,149,10067,145,"types"],[11088,154,10067,150],[11088,155,10067,151,"string"],[11088,161,10067,134],[11088,166,10067,162],[11088,171,10067,167,"match"],[11088,176,10067,162],[11088,177,10067,173,"types"],[11088,182,10067,178],[11088,183,10067,179,"num"],[11088,186,10067,162],[11088,187,10067,134],[11088,191,10067,187],[11088,196,10067,192,"match"],[11088,201,10067,187],[11088,202,10067,198,"types"],[11088,207,10067,203],[11088,208,10067,204,"bracketL"],[11088,216,10067,187],[11088,217,10067,134],[11088,221,10067,217],[11088,226,10067,222,"match"],[11088,231,10067,217],[11088,232,10067,228,"types"],[11088,237,10067,233],[11088,238,10067,234,"name"],[11088,242,10067,217],[11088,243,10067,134],[11088,247,10067,243],[11088,248,10067,244],[11088,249,10067,245],[11088,254,10067,250,"state"],[11088,259,10067,245],[11088,260,10067,256,"type"],[11088,264,10067,245],[11088,265,10067,261,"keyword"],[11088,272,10067,11],[11088,273,10067,4],[11089,0,10068,3],[11092,56,10070,36,"method"],[11092,62],[11092,64,10070,44],[11093,0,10071,4],[11093,15,10071,11,"method"],[11093,21,10071,17],[11093,22,10071,18,"kind"],[11093,26,10071,11],[11093,31,10071,27],[11093,36,10071,11],[11093,39,10071,35],[11093,40,10071,11],[11093,43,10071,39],[11093,44,10071,4],[11094,0,10072,3],[11097,46,10074,26,"method"],[11097,52],[11097,54,10074,34],[11098,0,10075,4],[11098,12,10075,10,"paramCount"],[11098,22,10075,20],[11098,25,10075,23],[11098,30,10075,28,"getGetterSetterExpectedParamCount"],[11098,63,10075,23],[11098,64,10075,62,"method"],[11098,70,10075,23],[11098,71,10075,4],[11099,0,10076,4],[11099,12,10076,10,"start"],[11099,17,10076,15],[11099,20,10076,18,"method"],[11099,26,10076,24],[11099,27,10076,25,"start"],[11099,32,10076,4],[11101,0,10078,4],[11101,12,10078,8,"method"],[11101,18,10078,14],[11101,19,10078,15,"params"],[11101,25,10078,8],[11101,26,10078,22,"length"],[11101,32,10078,8],[11101,37,10078,33,"paramCount"],[11101,47,10078,4],[11101,49,10078,45],[11102,0,10079,6],[11102,14,10079,10,"method"],[11102,20,10079,16],[11102,21,10079,17,"kind"],[11102,25,10079,10],[11102,30,10079,26],[11102,35,10079,6],[11102,37,10079,33],[11103,0,10080,8],[11103,17,10080,13,"raise"],[11103,22,10080,8],[11103,23,10080,19,"start"],[11103,28,10080,8],[11103,30,10080,26],[11103,74,10080,8],[11104,0,10081,7],[11104,11,10079,6],[11104,17,10081,13],[11105,0,10082,8],[11105,17,10082,13,"raise"],[11105,22,10082,8],[11105,23,10082,19,"start"],[11105,28,10082,8],[11105,30,10082,26],[11105,77,10082,8],[11106,0,10083,7],[11107,0,10084,5],[11109,0,10086,4],[11109,12,10086,8,"method"],[11109,18,10086,14],[11109,19,10086,15,"kind"],[11109,23,10086,8],[11109,28,10086,24],[11109,33,10086,8],[11109,37,10086,33,"method"],[11109,43,10086,39],[11109,44,10086,40,"params"],[11109,50,10086,33],[11109,51,10086,47,"method"],[11109,57,10086,53],[11109,58,10086,54,"params"],[11109,64,10086,47],[11109,65,10086,61,"length"],[11109,71,10086,47],[11109,74,10086,70],[11109,75,10086,33],[11109,77,10086,73,"type"],[11109,81,10086,33],[11109,86,10086,82],[11109,99,10086,4],[11109,101,10086,97],[11110,0,10087,6],[11110,15,10087,11,"raise"],[11110,20,10087,6],[11110,21,10087,17,"start"],[11110,26,10087,6],[11110,28,10087,24],[11110,83,10087,6],[11111,0,10088,5],[11112,0,10089,3],[11115,40,10091,20,"prop"],[11115,44],[11115,46,10091,26,"isGenerator"],[11115,57],[11115,59,10091,39,"isAsync"],[11115,66],[11115,68,10091,48,"isPattern"],[11115,77],[11115,79,10091,59,"containsEsc"],[11115,90],[11115,92,10091,72],[11116,0,10092,4],[11116,12,10092,8,"isAsync"],[11116,19,10092,15],[11116,23,10092,19,"isGenerator"],[11116,34,10092,8],[11116,38,10092,34],[11116,43,10092,39,"match"],[11116,48,10092,34],[11116,49,10092,45,"types"],[11116,54,10092,50],[11116,55,10092,51,"parenL"],[11116,61,10092,34],[11116,62,10092,4],[11116,64,10092,60],[11117,0,10093,6],[11117,14,10093,10,"isPattern"],[11117,23,10093,6],[11117,25,10093,21],[11117,30,10093,26,"unexpected"],[11117,40,10093,21],[11118,0,10094,6,"prop"],[11118,10,10094,6,"prop"],[11118,14,10094,10],[11118,15,10094,11,"kind"],[11118,19,10094,6],[11118,22,10094,18],[11118,30,10094,6],[11119,0,10095,6,"prop"],[11119,10,10095,6,"prop"],[11119,14,10095,10],[11119,15,10095,11,"method"],[11119,21,10095,6],[11119,24,10095,20],[11119,28,10095,6],[11120,0,10096,6],[11120,17,10096,13],[11120,22,10096,18,"parseMethod"],[11120,33,10096,13],[11120,34,10096,30,"prop"],[11120,38,10096,13],[11120,40,10096,36,"isGenerator"],[11120,51,10096,13],[11120,53,10096,49,"isAsync"],[11120,60,10096,13],[11120,62,10096,58],[11120,67,10096,13],[11120,69,10096,65],[11120,74,10096,13],[11120,76,10096,72],[11120,90,10096,13],[11120,91,10096,6],[11121,0,10097,5],[11123,0,10099,4],[11123,12,10099,8],[11123,13,10099,9,"containsEsc"],[11123,24,10099,8],[11123,28,10099,24],[11123,33,10099,29,"isGetterOrSetterMethod"],[11123,55,10099,24],[11123,56,10099,52,"prop"],[11123,60,10099,24],[11123,62,10099,58,"isPattern"],[11123,71,10099,24],[11123,72,10099,4],[11123,74,10099,70],[11124,0,10100,6],[11124,14,10100,10,"isGenerator"],[11124,25,10100,21],[11124,29,10100,25,"isAsync"],[11124,36,10100,6],[11124,38,10100,34],[11124,43,10100,39,"unexpected"],[11124,53,10100,34],[11125,0,10101,6,"prop"],[11125,10,10101,6,"prop"],[11125,14,10101,10],[11125,15,10101,11,"kind"],[11125,19,10101,6],[11125,22,10101,18,"prop"],[11125,26,10101,22],[11125,27,10101,23,"key"],[11125,30,10101,18],[11125,31,10101,27,"name"],[11125,35,10101,6],[11126,0,10102,6],[11126,15,10102,11,"parsePropertyName"],[11126,32,10102,6],[11126,33,10102,29,"prop"],[11126,37,10102,6],[11127,0,10103,6],[11127,15,10103,11,"parseMethod"],[11127,26,10103,6],[11127,27,10103,23,"prop"],[11127,31,10103,6],[11127,33,10103,29],[11127,38,10103,6],[11127,40,10103,36],[11127,45,10103,6],[11127,47,10103,43],[11127,52,10103,6],[11127,54,10103,50],[11127,59,10103,6],[11127,61,10103,57],[11127,75,10103,6],[11128,0,10104,6],[11128,15,10104,11,"checkGetterSetterParams"],[11128,38,10104,6],[11128,39,10104,35,"prop"],[11128,43,10104,6],[11129,0,10105,6],[11129,17,10105,13,"prop"],[11129,21,10105,6],[11130,0,10106,5],[11131,0,10107,3],[11134,42,10109,22,"prop"],[11134,46],[11134,48,10109,28,"startPos"],[11134,56],[11134,58,10109,38,"startLoc"],[11134,66],[11134,68,10109,48,"isPattern"],[11134,77],[11134,79,10109,59,"refShorthandDefaultPos"],[11134,101],[11134,103,10109,83],[11135,0,10110,4,"prop"],[11135,8,10110,4,"prop"],[11135,12,10110,8],[11135,13,10110,9,"shorthand"],[11135,22,10110,4],[11135,25,10110,21],[11135,30,10110,4],[11137,0,10112,4],[11137,12,10112,8],[11137,17,10112,13,"eat"],[11137,20,10112,8],[11137,21,10112,17,"types"],[11137,26,10112,22],[11137,27,10112,23,"colon"],[11137,32,10112,8],[11137,33,10112,4],[11137,35,10112,31],[11138,0,10113,6,"prop"],[11138,10,10113,6,"prop"],[11138,14,10113,10],[11138,15,10113,11,"value"],[11138,20,10113,6],[11138,23,10113,19,"isPattern"],[11138,32,10113,28],[11138,35,10113,31],[11138,40,10113,36,"parseMaybeDefault"],[11138,57,10113,31],[11138,58,10113,54],[11138,63,10113,59,"state"],[11138,68,10113,54],[11138,69,10113,65,"start"],[11138,74,10113,31],[11138,76,10113,72],[11138,81,10113,77,"state"],[11138,86,10113,72],[11138,87,10113,83,"startLoc"],[11138,95,10113,31],[11138,96,10113,28],[11138,99,10113,95],[11138,104,10113,100,"parseMaybeAssign"],[11138,120,10113,95],[11138,121,10113,117],[11138,126,10113,95],[11138,128,10113,124,"refShorthandDefaultPos"],[11138,150,10113,95],[11138,151,10113,6],[11139,0,10114,6],[11139,17,10114,13],[11139,22,10114,18,"finishNode"],[11139,32,10114,13],[11139,33,10114,29,"prop"],[11139,37,10114,13],[11139,39,10114,35],[11139,55,10114,13],[11139,56,10114,6],[11140,0,10115,5],[11142,0,10117,4],[11142,12,10117,8],[11142,13,10117,9,"prop"],[11142,17,10117,13],[11142,18,10117,14,"computed"],[11142,26,10117,8],[11142,30,10117,26,"prop"],[11142,34,10117,30],[11142,35,10117,31,"key"],[11142,38,10117,26],[11142,39,10117,35,"type"],[11142,43,10117,26],[11142,48,10117,44],[11142,60,10117,4],[11142,62,10117,58],[11143,0,10118,6],[11143,15,10118,11,"checkReservedWord"],[11143,32,10118,6],[11143,33,10118,29,"prop"],[11143,37,10118,33],[11143,38,10118,34,"key"],[11143,41,10118,29],[11143,42,10118,38,"name"],[11143,46,10118,6],[11143,48,10118,44,"prop"],[11143,52,10118,48],[11143,53,10118,49,"key"],[11143,56,10118,44],[11143,57,10118,53,"start"],[11143,62,10118,6],[11143,64,10118,60],[11143,68,10118,6],[11143,70,10118,66],[11143,74,10118,6],[11145,0,10120,6],[11145,14,10120,10,"isPattern"],[11145,23,10120,6],[11145,25,10120,21],[11146,0,10121,8,"prop"],[11146,12,10121,8,"prop"],[11146,16,10121,12],[11146,17,10121,13,"value"],[11146,22,10121,8],[11146,25,10121,21],[11146,30,10121,26,"parseMaybeDefault"],[11146,47,10121,21],[11146,48,10121,44,"startPos"],[11146,56,10121,21],[11146,58,10121,54,"startLoc"],[11146,66,10121,21],[11146,68,10121,64,"prop"],[11146,72,10121,68],[11146,73,10121,69,"key"],[11146,76,10121,64],[11146,77,10121,73,"__clone"],[11146,84,10121,64],[11146,86,10121,21],[11146,87,10121,8],[11147,0,10122,7],[11147,11,10120,6],[11147,17,10122,13],[11147,21,10122,17],[11147,26,10122,22,"match"],[11147,31,10122,17],[11147,32,10122,28,"types"],[11147,37,10122,33],[11147,38,10122,34,"eq"],[11147,40,10122,17],[11147,45,10122,41,"refShorthandDefaultPos"],[11147,67,10122,13],[11147,69,10122,65],[11148,0,10123,8],[11148,16,10123,12],[11148,17,10123,13,"refShorthandDefaultPos"],[11148,39,10123,35],[11148,40,10123,36,"start"],[11148,45,10123,8],[11148,47,10123,43],[11149,0,10124,10,"refShorthandDefaultPos"],[11149,14,10124,10,"refShorthandDefaultPos"],[11149,36,10124,32],[11149,37,10124,33,"start"],[11149,42,10124,10],[11149,45,10124,41],[11149,50,10124,46,"state"],[11149,55,10124,41],[11149,56,10124,52,"start"],[11149,61,10124,10],[11150,0,10125,9],[11152,0,10127,8,"prop"],[11152,12,10127,8,"prop"],[11152,16,10127,12],[11152,17,10127,13,"value"],[11152,22,10127,8],[11152,25,10127,21],[11152,30,10127,26,"parseMaybeDefault"],[11152,47,10127,21],[11152,48,10127,44,"startPos"],[11152,56,10127,21],[11152,58,10127,54,"startLoc"],[11152,66,10127,21],[11152,68,10127,64,"prop"],[11152,72,10127,68],[11152,73,10127,69,"key"],[11152,76,10127,64],[11152,77,10127,73,"__clone"],[11152,84,10127,64],[11152,86,10127,21],[11152,87,10127,8],[11153,0,10128,7],[11153,11,10122,13],[11153,17,10128,13],[11154,0,10129,8,"prop"],[11154,12,10129,8,"prop"],[11154,16,10129,12],[11154,17,10129,13,"value"],[11154,22,10129,8],[11154,25,10129,21,"prop"],[11154,29,10129,25],[11154,30,10129,26,"key"],[11154,33,10129,21],[11154,34,10129,30,"__clone"],[11154,41,10129,21],[11154,43,10129,8],[11155,0,10130,7],[11157,0,10132,6,"prop"],[11157,10,10132,6,"prop"],[11157,14,10132,10],[11157,15,10132,11,"shorthand"],[11157,24,10132,6],[11157,27,10132,23],[11157,31,10132,6],[11158,0,10133,6],[11158,17,10133,13],[11158,22,10133,18,"finishNode"],[11158,32,10133,13],[11158,33,10133,29,"prop"],[11158,37,10133,13],[11158,39,10133,35],[11158,55,10133,13],[11158,56,10133,6],[11159,0,10134,5],[11160,0,10135,3],[11163,40,10137,20,"prop"],[11163,44],[11163,46,10137,26,"startPos"],[11163,54],[11163,56,10137,36,"startLoc"],[11163,64],[11163,66,10137,46,"isGenerator"],[11163,77],[11163,79,10137,59,"isAsync"],[11163,86],[11163,88,10137,68,"isPattern"],[11163,97],[11163,99,10137,79,"refShorthandDefaultPos"],[11163,121],[11163,123,10137,103,"containsEsc"],[11163,134],[11163,136,10137,116],[11164,0,10138,4],[11164,12,10138,10,"node"],[11164,16,10138,14],[11164,19,10138,17],[11164,24,10138,22,"parseObjectMethod"],[11164,41,10138,17],[11164,42,10138,40,"prop"],[11164,46,10138,17],[11164,48,10138,46,"isGenerator"],[11164,59,10138,17],[11164,61,10138,59,"isAsync"],[11164,68,10138,17],[11164,70,10138,68,"isPattern"],[11164,79,10138,17],[11164,81,10138,79,"containsEsc"],[11164,92,10138,17],[11164,97,10138,95],[11164,102,10138,100,"parseObjectProperty"],[11164,121,10138,95],[11164,122,10138,120,"prop"],[11164,126,10138,95],[11164,128,10138,126,"startPos"],[11164,136,10138,95],[11164,138,10138,136,"startLoc"],[11164,146,10138,95],[11164,148,10138,146,"isPattern"],[11164,157,10138,95],[11164,159,10138,157,"refShorthandDefaultPos"],[11164,181,10138,95],[11164,182,10138,4],[11165,0,10139,4],[11165,12,10139,8],[11165,13,10139,9,"node"],[11165,17,10139,4],[11165,19,10139,15],[11165,24,10139,20,"unexpected"],[11165,34,10139,15],[11166,0,10140,4],[11166,15,10140,11,"node"],[11166,19,10140,4],[11167,0,10141,3],[11170,40,10143,20,"prop"],[11170,44],[11170,46,10143,26],[11171,0,10144,4],[11171,12,10144,8],[11171,17,10144,13,"eat"],[11171,20,10144,8],[11171,21,10144,17,"types"],[11171,26,10144,22],[11171,27,10144,23,"bracketL"],[11171,35,10144,8],[11171,36,10144,4],[11171,38,10144,34],[11172,0,10145,6,"prop"],[11172,10,10145,6,"prop"],[11172,14,10145,10],[11172,15,10145,11,"computed"],[11172,23,10145,6],[11172,26,10145,22],[11172,30,10145,6],[11173,0,10146,6,"prop"],[11173,10,10146,6,"prop"],[11173,14,10146,10],[11173,15,10146,11,"key"],[11173,18,10146,6],[11173,21,10146,17],[11173,26,10146,22,"parseMaybeAssign"],[11173,42,10146,17],[11173,44,10146,6],[11174,0,10147,6],[11174,15,10147,11,"expect"],[11174,21,10147,6],[11174,22,10147,18,"types"],[11174,27,10147,23],[11174,28,10147,24,"bracketR"],[11174,36,10147,6],[11175,0,10148,5],[11175,9,10144,4],[11175,15,10148,11],[11176,0,10149,6],[11176,14,10149,12,"oldInPropertyName"],[11176,31,10149,29],[11176,34,10149,32],[11176,39,10149,37,"state"],[11176,44,10149,32],[11176,45,10149,43,"inPropertyName"],[11176,59,10149,6],[11177,0,10150,6],[11177,15,10150,11,"state"],[11177,20,10150,6],[11177,21,10150,17,"inPropertyName"],[11177,35,10150,6],[11177,38,10150,34],[11177,42,10150,6],[11178,0,10151,6,"prop"],[11178,10,10151,6,"prop"],[11178,14,10151,10],[11178,15,10151,11,"key"],[11178,18,10151,6],[11178,21,10151,17],[11178,26,10151,22,"match"],[11178,31,10151,17],[11178,32,10151,28,"types"],[11178,37,10151,33],[11178,38,10151,34,"num"],[11178,41,10151,17],[11178,46,10151,42],[11178,51,10151,47,"match"],[11178,56,10151,42],[11178,57,10151,53,"types"],[11178,62,10151,58],[11178,63,10151,59,"string"],[11178,69,10151,42],[11178,70,10151,17],[11178,73,10151,69],[11178,78,10151,74,"parseExprAtom"],[11178,91,10151,69],[11178,93,10151,17],[11178,96,10151,92],[11178,101,10151,97,"parseMaybePrivateName"],[11178,122,10151,92],[11178,124,10151,6],[11180,0,10153,6],[11180,14,10153,10,"prop"],[11180,18,10153,14],[11180,19,10153,15,"key"],[11180,22,10153,10],[11180,23,10153,19,"type"],[11180,27,10153,10],[11180,32,10153,28],[11180,45,10153,6],[11180,47,10153,43],[11181,0,10154,8,"prop"],[11181,12,10154,8,"prop"],[11181,16,10154,12],[11181,17,10154,13,"computed"],[11181,25,10154,8],[11181,28,10154,24],[11181,33,10154,8],[11182,0,10155,7],[11184,0,10157,6],[11184,15,10157,11,"state"],[11184,20,10157,6],[11184,21,10157,17,"inPropertyName"],[11184,35,10157,6],[11184,38,10157,34,"oldInPropertyName"],[11184,55,10157,6],[11185,0,10158,5],[11187,0,10160,4],[11187,15,10160,11,"prop"],[11187,19,10160,15],[11187,20,10160,16,"key"],[11187,23,10160,4],[11188,0,10161,3],[11191,35,10163,15,"node"],[11191,39],[11191,41,10163,21,"isAsync"],[11191,48],[11191,50,10163,30],[11192,0,10164,4,"node"],[11192,8,10164,4,"node"],[11192,12,10164,8],[11192,13,10164,9,"id"],[11192,15,10164,4],[11192,18,10164,14],[11192,22,10164,4],[11193,0,10165,4,"node"],[11193,8,10165,4,"node"],[11193,12,10165,8],[11193,13,10165,9,"generator"],[11193,22,10165,4],[11193,25,10165,21],[11193,30,10165,4],[11194,0,10166,4,"node"],[11194,8,10166,4,"node"],[11194,12,10166,8],[11194,13,10166,9,"async"],[11194,18,10166,4],[11194,21,10166,17],[11194,22,10166,18],[11194,23,10166,19,"isAsync"],[11194,30,10166,4],[11195,0,10167,3],[11198,34,10169,14,"node"],[11198,38],[11198,40,10169,20,"isGenerator"],[11198,51],[11198,53,10169,33,"isAsync"],[11198,60],[11198,62,10169,42,"isConstructor"],[11198,75],[11198,77,10169,57,"allowDirectSuper"],[11198,93],[11198,95,10169,75,"type"],[11198,99],[11198,101,10169,103],[11199,0,10169,103],[11199,12,10169,81,"inClassScope"],[11199,24,10169,103],[11199,95,10169,96],[11199,100,10169,103],[11200,0,10170,4],[11200,12,10170,10,"oldYieldPos"],[11200,23,10170,21],[11200,26,10170,24],[11200,31,10170,29,"state"],[11200,36,10170,24],[11200,37,10170,35,"yieldPos"],[11200,45,10170,4],[11201,0,10171,4],[11201,12,10171,10,"oldAwaitPos"],[11201,23,10171,21],[11201,26,10171,24],[11201,31,10171,29,"state"],[11201,36,10171,24],[11201,37,10171,35,"awaitPos"],[11201,45,10171,4],[11202,0,10172,4],[11202,13,10172,9,"state"],[11202,18,10172,4],[11202,19,10172,15,"yieldPos"],[11202,27,10172,4],[11202,30,10172,26],[11202,31,10172,27],[11202,32,10172,4],[11203,0,10173,4],[11203,13,10173,9,"state"],[11203,18,10173,4],[11203,19,10173,15,"awaitPos"],[11203,27,10173,4],[11203,30,10173,26],[11203,31,10173,27],[11203,32,10173,4],[11204,0,10174,4],[11204,13,10174,9,"initFunction"],[11204,25,10174,4],[11204,26,10174,22,"node"],[11204,30,10174,4],[11204,32,10174,28,"isAsync"],[11204,39,10174,4],[11205,0,10175,4,"node"],[11205,8,10175,4,"node"],[11205,12,10175,8],[11205,13,10175,9,"generator"],[11205,22,10175,4],[11205,25,10175,21],[11205,26,10175,22],[11205,27,10175,23,"isGenerator"],[11205,38,10175,4],[11206,0,10176,4],[11206,12,10176,10,"allowModifiers"],[11206,26,10176,24],[11206,29,10176,27,"isConstructor"],[11206,42,10176,4],[11207,0,10177,4],[11207,13,10177,9,"scope"],[11207,18,10177,4],[11207,19,10177,15,"enter"],[11207,24,10177,4],[11207,25,10177,21,"functionFlags"],[11207,38,10177,34],[11207,39,10177,35,"isAsync"],[11207,46,10177,34],[11207,48,10177,44,"node"],[11207,52,10177,48],[11207,53,10177,49,"generator"],[11207,62,10177,34],[11207,63,10177,21],[11207,66,10177,62,"SCOPE_SUPER"],[11207,77,10177,21],[11207,81,10177,77,"inClassScope"],[11207,93,10177,89],[11207,96,10177,92,"SCOPE_CLASS"],[11207,107,10177,89],[11207,110,10177,106],[11207,111,10177,21],[11207,116,10177,112,"allowDirectSuper"],[11207,132,10177,128],[11207,135,10177,131,"SCOPE_DIRECT_SUPER"],[11207,153,10177,128],[11207,156,10177,152],[11207,157,10177,21],[11207,158,10177,4],[11208,0,10178,4],[11208,13,10178,9,"parseFunctionParams"],[11208,32,10178,4],[11208,33,10178,29,"node"],[11208,37,10178,4],[11208,39,10178,35,"allowModifiers"],[11208,53,10178,4],[11209,0,10179,4],[11209,13,10179,9,"checkYieldAwaitInDefaultParams"],[11209,43,10179,4],[11210,0,10180,4],[11210,13,10180,9,"parseFunctionBodyAndFinish"],[11210,39,10180,4],[11210,40,10180,36,"node"],[11210,44,10180,4],[11210,46,10180,42,"type"],[11210,50,10180,4],[11210,52,10180,48],[11210,56,10180,4],[11211,0,10181,4],[11211,13,10181,9,"scope"],[11211,18,10181,4],[11211,19,10181,15,"exit"],[11211,23,10181,4],[11212,0,10182,4],[11212,13,10182,9,"state"],[11212,18,10182,4],[11212,19,10182,15,"yieldPos"],[11212,27,10182,4],[11212,30,10182,26,"oldYieldPos"],[11212,41,10182,4],[11213,0,10183,4],[11213,13,10183,9,"state"],[11213,18,10183,4],[11213,19,10183,15,"awaitPos"],[11213,27,10183,4],[11213,30,10183,26,"oldAwaitPos"],[11213,41,10183,4],[11214,0,10184,4],[11214,15,10184,11,"node"],[11214,19,10184,4],[11215,0,10185,3],[11218,43,10187,23,"node"],[11218,47],[11218,49,10187,29,"params"],[11218,55],[11218,57,10187,37,"isAsync"],[11218,64],[11218,66,10187,46,"trailingCommaPos"],[11218,82],[11218,84,10187,64],[11219,0,10188,4],[11219,13,10188,9,"scope"],[11219,18,10188,4],[11219,19,10188,15,"enter"],[11219,24,10188,4],[11219,25,10188,21,"functionFlags"],[11219,38,10188,34],[11219,39,10188,35,"isAsync"],[11219,46,10188,34],[11219,48,10188,44],[11219,53,10188,34],[11219,54,10188,21],[11219,57,10188,53,"SCOPE_ARROW"],[11219,68,10188,4],[11220,0,10189,4],[11220,13,10189,9,"initFunction"],[11220,25,10189,4],[11220,26,10189,22,"node"],[11220,30,10189,4],[11220,32,10189,28,"isAsync"],[11220,39,10189,4],[11221,0,10190,4],[11221,12,10190,10,"oldMaybeInArrowParameters"],[11221,37,10190,35],[11221,40,10190,38],[11221,45,10190,43,"state"],[11221,50,10190,38],[11221,51,10190,49,"maybeInArrowParameters"],[11221,73,10190,4],[11222,0,10191,4],[11222,12,10191,10,"oldYieldPos"],[11222,23,10191,21],[11222,26,10191,24],[11222,31,10191,29,"state"],[11222,36,10191,24],[11222,37,10191,35,"yieldPos"],[11222,45,10191,4],[11223,0,10192,4],[11223,12,10192,10,"oldAwaitPos"],[11223,23,10192,21],[11223,26,10192,24],[11223,31,10192,29,"state"],[11223,36,10192,24],[11223,37,10192,35,"awaitPos"],[11223,45,10192,4],[11224,0,10193,4],[11224,13,10193,9,"state"],[11224,18,10193,4],[11224,19,10193,15,"maybeInArrowParameters"],[11224,41,10193,4],[11224,44,10193,40],[11224,49,10193,4],[11225,0,10194,4],[11225,13,10194,9,"state"],[11225,18,10194,4],[11225,19,10194,15,"yieldPos"],[11225,27,10194,4],[11225,30,10194,26],[11225,31,10194,27],[11225,32,10194,4],[11226,0,10195,4],[11226,13,10195,9,"state"],[11226,18,10195,4],[11226,19,10195,15,"awaitPos"],[11226,27,10195,4],[11226,30,10195,26],[11226,31,10195,27],[11226,32,10195,4],[11227,0,10196,4],[11227,12,10196,8,"params"],[11227,18,10196,4],[11227,20,10196,16],[11227,25,10196,21,"setArrowFunctionParameters"],[11227,51,10196,16],[11227,52,10196,48,"node"],[11227,56,10196,16],[11227,58,10196,54,"params"],[11227,64,10196,16],[11227,66,10196,62,"trailingCommaPos"],[11227,82,10196,16],[11228,0,10197,4],[11228,13,10197,9,"parseFunctionBody"],[11228,30,10197,4],[11228,31,10197,27,"node"],[11228,35,10197,4],[11228,37,10197,33],[11228,41,10197,4],[11229,0,10198,4],[11229,13,10198,9,"scope"],[11229,18,10198,4],[11229,19,10198,15,"exit"],[11229,23,10198,4],[11230,0,10199,4],[11230,13,10199,9,"state"],[11230,18,10199,4],[11230,19,10199,15,"maybeInArrowParameters"],[11230,41,10199,4],[11230,44,10199,40,"oldMaybeInArrowParameters"],[11230,69,10199,4],[11231,0,10200,4],[11231,13,10200,9,"state"],[11231,18,10200,4],[11231,19,10200,15,"yieldPos"],[11231,27,10200,4],[11231,30,10200,26,"oldYieldPos"],[11231,41,10200,4],[11232,0,10201,4],[11232,13,10201,9,"state"],[11232,18,10201,4],[11232,19,10201,15,"awaitPos"],[11232,27,10201,4],[11232,30,10201,26,"oldAwaitPos"],[11232,41,10201,4],[11233,0,10202,4],[11233,15,10202,11],[11233,20,10202,16,"finishNode"],[11233,30,10202,11],[11233,31,10202,27,"node"],[11233,35,10202,11],[11233,37,10202,33],[11233,62,10202,11],[11233,63,10202,4],[11234,0,10203,3],[11237,49,10205,29,"node"],[11237,53],[11237,55,10205,35,"params"],[11237,61],[11237,63,10205,43,"trailingCommaPos"],[11237,79],[11237,81,10205,61],[11238,0,10206,4,"node"],[11238,8,10206,4,"node"],[11238,12,10206,8],[11238,13,10206,9,"params"],[11238,19,10206,4],[11238,22,10206,18],[11238,27,10206,23,"toAssignableList"],[11238,43,10206,18],[11238,44,10206,40,"params"],[11238,50,10206,18],[11238,52,10206,48],[11238,56,10206,18],[11238,58,10206,54],[11238,85,10206,18],[11238,87,10206,83,"trailingCommaPos"],[11238,103,10206,18],[11238,104,10206,4],[11239,0,10207,3],[11242,35,10209,15,"node"],[11242,39],[11242,41,10209,21],[11243,0,10210,4],[11243,12,10210,10,"isBlockStatement"],[11243,28,10210,26],[11243,31,10210,29,"node"],[11243,35,10210,33],[11243,36,10210,34,"body"],[11243,40,10210,29],[11243,41,10210,39,"type"],[11243,45,10210,29],[11243,50,10210,48],[11243,66,10210,4],[11245,0,10212,4],[11245,12,10212,8,"isBlockStatement"],[11245,28,10212,24],[11245,32,10212,28,"node"],[11245,36,10212,32],[11245,37,10212,33,"body"],[11245,41,10212,28],[11245,42,10212,38,"directives"],[11245,52,10212,28],[11245,53,10212,49,"length"],[11245,59,10212,4],[11245,61,10212,57],[11246,0,10213,6],[11246,15,10213,11],[11246,19,10213,15,"_i2"],[11246,22,10213,18],[11246,25,10213,21],[11246,26,10213,11],[11246,28,10213,24,"_node$body$directives"],[11246,49,10213,45],[11246,52,10213,48,"node"],[11246,56,10213,52],[11246,57,10213,53,"body"],[11246,61,10213,48],[11246,62,10213,58,"directives"],[11246,72,10213,6],[11246,74,10213,70,"_i2"],[11246,77,10213,73],[11246,80,10213,76,"_node$body$directives"],[11246,101,10213,97],[11246,102,10213,98,"length"],[11246,108,10213,6],[11246,110,10213,106,"_i2"],[11246,113,10213,109],[11246,115,10213,6],[11246,117,10213,113],[11247,0,10214,8],[11247,16,10214,14,"directive"],[11247,25,10214,23],[11247,28,10214,26,"_node$body$directives"],[11247,49,10214,47],[11247,50,10214,48,"_i2"],[11247,53,10214,47],[11247,54,10214,8],[11249,0,10216,8],[11249,16,10216,12,"directive"],[11249,25,10216,21],[11249,26,10216,22,"value"],[11249,31,10216,12],[11249,32,10216,28,"value"],[11249,37,10216,12],[11249,42,10216,38],[11249,54,10216,8],[11249,56,10216,52],[11250,0,10217,10],[11250,21,10217,17],[11250,25,10217,10],[11251,0,10218,9],[11252,0,10219,7],[11253,0,10220,5],[11255,0,10222,4],[11255,15,10222,11],[11255,20,10222,4],[11256,0,10223,3],[11259,49,10225,29,"node"],[11259,53],[11259,55,10225,35,"type"],[11259,59],[11259,61,10225,59],[11260,0,10225,59],[11260,12,10225,41,"isMethod"],[11260,20,10225,59],[11260,91,10225,52],[11260,96,10225,59],[11261,0,10226,4],[11261,13,10226,9,"parseFunctionBody"],[11261,30,10226,4],[11261,31,10226,27,"node"],[11261,35,10226,4],[11261,37,10226,33],[11261,42,10226,4],[11261,44,10226,40,"isMethod"],[11261,52,10226,4],[11262,0,10227,4],[11262,13,10227,9,"finishNode"],[11262,23,10227,4],[11262,24,10227,20,"node"],[11262,28,10227,4],[11262,30,10227,26,"type"],[11262,34,10227,4],[11263,0,10228,3],[11266,40,10230,20,"node"],[11266,44],[11266,46,10230,26,"allowExpression"],[11266,61],[11266,63,10230,61],[11267,0,10230,61],[11267,12,10230,43,"isMethod"],[11267,20,10230,61],[11267,91,10230,54],[11267,96,10230,61],[11268,0,10231,4],[11268,12,10231,10,"isExpression"],[11268,24,10231,22],[11268,27,10231,25,"allowExpression"],[11268,42,10231,40],[11268,46,10231,44],[11268,47,10231,45],[11268,52,10231,50,"match"],[11268,57,10231,45],[11268,58,10231,56,"types"],[11268,63,10231,61],[11268,64,10231,62,"braceL"],[11268,70,10231,45],[11268,71,10231,4],[11269,0,10232,4],[11269,12,10232,10,"oldStrict"],[11269,21,10232,19],[11269,24,10232,22],[11269,29,10232,27,"state"],[11269,34,10232,22],[11269,35,10232,33,"strict"],[11269,41,10232,4],[11270,0,10233,4],[11270,12,10233,8,"useStrict"],[11270,21,10233,17],[11270,24,10233,20],[11270,29,10233,4],[11271,0,10234,4],[11271,12,10234,10,"oldInParameters"],[11271,27,10234,25],[11271,30,10234,28],[11271,35,10234,33,"state"],[11271,40,10234,28],[11271,41,10234,39,"inParameters"],[11271,53,10234,4],[11272,0,10235,4],[11272,13,10235,9,"state"],[11272,18,10235,4],[11272,19,10235,15,"inParameters"],[11272,31,10235,4],[11272,34,10235,30],[11272,39,10235,4],[11274,0,10237,4],[11274,12,10237,8,"isExpression"],[11274,24,10237,4],[11274,26,10237,22],[11275,0,10238,6,"node"],[11275,10,10238,6,"node"],[11275,14,10238,10],[11275,15,10238,11,"body"],[11275,19,10238,6],[11275,22,10238,18],[11275,27,10238,23,"parseMaybeAssign"],[11275,43,10238,18],[11275,45,10238,6],[11276,0,10239,6],[11276,15,10239,11,"checkParams"],[11276,26,10239,6],[11276,27,10239,23,"node"],[11276,31,10239,6],[11276,33,10239,29],[11276,38,10239,6],[11276,40,10239,36,"allowExpression"],[11276,55,10239,6],[11276,57,10239,53],[11276,62,10239,6],[11277,0,10240,5],[11277,9,10237,4],[11277,15,10240,11],[11278,0,10241,6],[11278,14,10241,12,"nonSimple"],[11278,23,10241,21],[11278,26,10241,24],[11278,27,10241,25],[11278,32,10241,30,"isSimpleParamList"],[11278,49,10241,25],[11278,50,10241,48,"node"],[11278,54,10241,52],[11278,55,10241,53,"params"],[11278,61,10241,25],[11278,62,10241,6],[11280,0,10243,6],[11280,14,10243,10],[11280,15,10243,11,"oldStrict"],[11280,24,10243,10],[11280,28,10243,24,"nonSimple"],[11280,37,10243,6],[11280,39,10243,35],[11281,0,10244,8,"useStrict"],[11281,12,10244,8,"useStrict"],[11281,21,10244,17],[11281,24,10244,20],[11281,29,10244,25,"strictDirective"],[11281,44,10244,20],[11281,45,10244,41],[11281,50,10244,46,"state"],[11281,55,10244,41],[11281,56,10244,52,"end"],[11281,59,10244,20],[11281,60,10244,8],[11283,0,10246,8],[11283,16,10246,12,"useStrict"],[11283,25,10246,21],[11283,29,10246,25,"nonSimple"],[11283,38,10246,8],[11283,40,10246,36],[11284,0,10247,10],[11284,18,10247,16,"errorPos"],[11284,26,10247,24],[11284,29,10247,27],[11284,30,10247,28,"node"],[11284,34,10247,32],[11284,35,10247,33,"kind"],[11284,39,10247,28],[11284,44,10247,42],[11284,52,10247,28],[11284,56,10247,54,"node"],[11284,60,10247,58],[11284,61,10247,59,"kind"],[11284,65,10247,54],[11284,70,10247,68],[11284,83,10247,27],[11284,88,10247,86],[11284,89,10247,87],[11284,90,10247,88,"node"],[11284,94,10247,92],[11284,95,10247,93,"key"],[11284,98,10247,27],[11284,101,10247,99,"node"],[11284,105,10247,103],[11284,106,10247,104,"key"],[11284,109,10247,99],[11284,110,10247,108,"end"],[11284,113,10247,27],[11284,116,10247,114,"node"],[11284,120,10247,118],[11284,121,10247,119,"start"],[11284,126,10247,10],[11285,0,10248,10],[11285,19,10248,15,"raise"],[11285,24,10248,10],[11285,25,10248,21,"errorPos"],[11285,33,10248,10],[11285,35,10248,31],[11285,110,10248,10],[11286,0,10249,9],[11287,0,10250,7],[11289,0,10252,6],[11289,14,10252,12,"oldLabels"],[11289,23,10252,21],[11289,26,10252,24],[11289,31,10252,29,"state"],[11289,36,10252,24],[11289,37,10252,35,"labels"],[11289,43,10252,6],[11290,0,10253,6],[11290,15,10253,11,"state"],[11290,20,10253,6],[11290,21,10253,17,"labels"],[11290,27,10253,6],[11290,30,10253,26],[11290,32,10253,6],[11291,0,10254,6],[11291,14,10254,10,"useStrict"],[11291,23,10254,6],[11291,25,10254,21],[11291,30,10254,26,"state"],[11291,35,10254,21],[11291,36,10254,32,"strict"],[11291,42,10254,21],[11291,45,10254,41],[11291,49,10254,21],[11292,0,10255,6],[11292,15,10255,11,"checkParams"],[11292,26,10255,6],[11292,27,10255,23,"node"],[11292,31,10255,6],[11292,33,10255,29],[11292,34,10255,30,"oldStrict"],[11292,43,10255,29],[11292,47,10255,43],[11292,48,10255,44,"useStrict"],[11292,57,10255,29],[11292,61,10255,57],[11292,62,10255,58,"allowExpression"],[11292,77,10255,29],[11292,81,10255,77],[11292,82,10255,78,"isMethod"],[11292,90,10255,29],[11292,94,10255,90],[11292,95,10255,91,"nonSimple"],[11292,104,10255,6],[11292,106,10255,102,"allowExpression"],[11292,121,10255,6],[11292,123,10255,119],[11292,124,10255,120,"oldStrict"],[11292,133,10255,119],[11292,137,10255,133,"useStrict"],[11292,146,10255,6],[11293,0,10256,6,"node"],[11293,10,10256,6,"node"],[11293,14,10256,10],[11293,15,10256,11,"body"],[11293,19,10256,6],[11293,22,10256,18],[11293,27,10256,23,"parseBlock"],[11293,37,10256,18],[11293,38,10256,34],[11293,42,10256,18],[11293,44,10256,40],[11293,49,10256,18],[11293,50,10256,6],[11294,0,10257,6],[11294,15,10257,11,"state"],[11294,20,10257,6],[11294,21,10257,17,"labels"],[11294,27,10257,6],[11294,30,10257,26,"oldLabels"],[11294,39,10257,6],[11295,0,10258,5],[11297,0,10260,4],[11297,13,10260,9,"state"],[11297,18,10260,4],[11297,19,10260,15,"inParameters"],[11297,31,10260,4],[11297,34,10260,30,"oldInParameters"],[11297,49,10260,4],[11299,0,10262,4],[11299,12,10262,8],[11299,17,10262,13,"state"],[11299,22,10262,8],[11299,23,10262,19,"strict"],[11299,29,10262,8],[11299,33,10262,29,"node"],[11299,37,10262,33],[11299,38,10262,34,"id"],[11299,40,10262,4],[11299,42,10262,38],[11300,0,10263,6],[11300,15,10263,11,"checkLVal"],[11300,24,10263,6],[11300,25,10263,21,"node"],[11300,29,10263,25],[11300,30,10263,26,"id"],[11300,32,10263,6],[11300,34,10263,30,"BIND_OUTSIDE"],[11300,46,10263,6],[11300,48,10263,44,"undefined"],[11300,57,10263,6],[11300,59,10263,55],[11300,74,10263,6],[11300,76,10263,72,"undefined"],[11300,85,10263,6],[11300,87,10263,83],[11300,88,10263,84,"oldStrict"],[11300,97,10263,83],[11300,101,10263,97,"useStrict"],[11300,110,10263,6],[11301,0,10264,5],[11303,0,10266,4],[11303,13,10266,9,"state"],[11303,18,10266,4],[11303,19,10266,15,"strict"],[11303,25,10266,4],[11303,28,10266,24,"oldStrict"],[11303,37,10266,4],[11304,0,10267,3],[11307,40,10269,20,"params"],[11307,46],[11307,48,10269,28],[11308,0,10270,4],[11308,13,10270,9],[11308,17,10270,13,"i"],[11308,18,10270,14],[11308,21,10270,17],[11308,22,10270,9],[11308,24,10270,20,"len"],[11308,27,10270,23],[11308,30,10270,26,"params"],[11308,36,10270,32],[11308,37,10270,33,"length"],[11308,43,10270,4],[11308,45,10270,41,"i"],[11308,46,10270,42],[11308,49,10270,45,"len"],[11308,52,10270,4],[11308,54,10270,50,"i"],[11308,55,10270,51],[11308,57,10270,4],[11308,59,10270,55],[11309,0,10271,6],[11309,14,10271,10,"params"],[11309,20,10271,16],[11309,21,10271,17,"i"],[11309,22,10271,16],[11309,23,10271,10],[11309,24,10271,20,"type"],[11309,28,10271,10],[11309,33,10271,29],[11309,45,10271,6],[11309,47,10271,43],[11309,54,10271,50],[11309,59,10271,43],[11310,0,10272,5],[11312,0,10274,4],[11312,15,10274,11],[11312,19,10274,4],[11313,0,10275,3],[11316,34,10277,14,"node"],[11316,38],[11316,40,10277,20,"allowDuplicates"],[11316,55],[11316,57,10277,37,"isArrowFunction"],[11316,72],[11316,74,10277,80],[11317,0,10277,80],[11317,12,10277,54,"strictModeChanged"],[11317,29,10277,80],[11317,100,10277,74],[11317,104,10277,80],[11318,0,10278,4],[11318,12,10278,10,"nameHash"],[11318,20,10278,18],[11318,23,10278,21,"Object"],[11318,29,10278,27],[11318,30,10278,28,"create"],[11318,36,10278,21],[11318,37,10278,35],[11318,41,10278,21],[11318,42,10278,4],[11320,0,10280,4],[11320,13,10280,9],[11320,17,10280,13,"i"],[11320,18,10280,14],[11320,21,10280,17],[11320,22,10280,4],[11320,24,10280,20,"i"],[11320,25,10280,21],[11320,28,10280,24,"node"],[11320,32,10280,28],[11320,33,10280,29,"params"],[11320,39,10280,24],[11320,40,10280,36,"length"],[11320,46,10280,4],[11320,48,10280,44,"i"],[11320,49,10280,45],[11320,51,10280,4],[11320,53,10280,49],[11321,0,10281,6],[11321,15,10281,11,"checkLVal"],[11321,24,10281,6],[11321,25,10281,21,"node"],[11321,29,10281,25],[11321,30,10281,26,"params"],[11321,36,10281,21],[11321,37,10281,33,"i"],[11321,38,10281,21],[11321,39,10281,6],[11321,41,10281,37,"BIND_VAR"],[11321,49,10281,6],[11321,51,10281,47,"allowDuplicates"],[11321,66,10281,62],[11321,69,10281,65],[11321,73,10281,62],[11321,76,10281,72,"nameHash"],[11321,84,10281,6],[11321,86,10281,82],[11321,111,10281,6],[11321,113,10281,109,"undefined"],[11321,122,10281,6],[11321,124,10281,120,"strictModeChanged"],[11321,141,10281,6],[11322,0,10282,5],[11323,0,10283,3],[11326,36,10285,16,"close"],[11326,41],[11326,43,10285,23,"allowEmpty"],[11326,53],[11326,55,10285,35,"refShorthandDefaultPos"],[11326,77],[11326,79,10285,59,"nodeForExtra"],[11326,91],[11326,93,10285,73],[11327,0,10286,4],[11327,12,10286,10,"elts"],[11327,16,10286,14],[11327,19,10286,17],[11327,21,10286,4],[11328,0,10287,4],[11328,12,10287,8,"first"],[11328,17,10287,13],[11328,20,10287,16],[11328,24,10287,4],[11330,0,10289,4],[11330,15,10289,11],[11330,16,10289,12],[11330,21,10289,17,"eat"],[11330,24,10289,12],[11330,25,10289,21,"close"],[11330,30,10289,12],[11330,31,10289,4],[11330,33,10289,29],[11331,0,10290,6],[11331,14,10290,10,"first"],[11331,19,10290,6],[11331,21,10290,17],[11332,0,10291,8,"first"],[11332,12,10291,8,"first"],[11332,17,10291,13],[11332,20,10291,16],[11332,25,10291,8],[11333,0,10292,7],[11333,11,10290,6],[11333,17,10292,13],[11334,0,10293,8],[11334,17,10293,13,"expect"],[11334,23,10293,8],[11334,24,10293,20,"types"],[11334,29,10293,25],[11334,30,10293,26,"comma"],[11334,35,10293,8],[11336,0,10295,8],[11336,16,10295,12],[11336,21,10295,17,"match"],[11336,26,10295,12],[11336,27,10295,23,"close"],[11336,32,10295,12],[11336,33,10295,8],[11336,35,10295,31],[11337,0,10296,10],[11337,18,10296,14,"nodeForExtra"],[11337,30,10296,10],[11337,32,10296,28],[11338,0,10297,12],[11338,21,10297,17,"addExtra"],[11338,29,10297,12],[11338,30,10297,26,"nodeForExtra"],[11338,42,10297,12],[11338,44,10297,40],[11338,59,10297,12],[11338,61,10297,57],[11338,66,10297,62,"state"],[11338,71,10297,57],[11338,72,10297,68,"lastTokStart"],[11338,84,10297,12],[11339,0,10298,11],[11341,0,10300,10],[11341,19,10300,15,"next"],[11341,23,10300,10],[11342,0,10301,10],[11343,0,10302,9],[11344,0,10303,7],[11346,0,10305,6,"elts"],[11346,10,10305,6,"elts"],[11346,14,10305,10],[11346,15,10305,11,"push"],[11346,19,10305,6],[11346,20,10305,16],[11346,25,10305,21,"parseExprListItem"],[11346,42,10305,16],[11346,43,10305,39,"allowEmpty"],[11346,53,10305,16],[11346,55,10305,51,"refShorthandDefaultPos"],[11346,77,10305,16],[11346,78,10305,6],[11347,0,10306,5],[11349,0,10308,4],[11349,15,10308,11,"elts"],[11349,19,10308,4],[11350,0,10309,3],[11353,40,10311,20,"allowEmpty"],[11353,50],[11353,52,10311,32,"refShorthandDefaultPos"],[11353,74],[11353,76,10311,56,"refNeedsArrowPos"],[11353,92],[11353,94,10311,74,"allowPlaceholder"],[11353,110],[11353,112,10311,92],[11354,0,10312,4],[11354,12,10312,8,"elt"],[11354,15,10312,4],[11356,0,10314,4],[11356,12,10314,8,"allowEmpty"],[11356,22,10314,18],[11356,26,10314,22],[11356,31,10314,27,"match"],[11356,36,10314,22],[11356,37,10314,33,"types"],[11356,42,10314,38],[11356,43,10314,39,"comma"],[11356,48,10314,22],[11356,49,10314,4],[11356,51,10314,47],[11357,0,10315,6,"elt"],[11357,10,10315,6,"elt"],[11357,13,10315,9],[11357,16,10315,12],[11357,20,10315,6],[11358,0,10316,5],[11358,9,10314,4],[11358,15,10316,11],[11358,19,10316,15],[11358,24,10316,20,"match"],[11358,29,10316,15],[11358,30,10316,26,"types"],[11358,35,10316,31],[11358,36,10316,32,"ellipsis"],[11358,44,10316,15],[11358,45,10316,11],[11358,47,10316,43],[11359,0,10317,6],[11359,14,10317,12,"spreadNodeStartPos"],[11359,32,10317,30],[11359,35,10317,33],[11359,40,10317,38,"state"],[11359,45,10317,33],[11359,46,10317,44,"start"],[11359,51,10317,6],[11360,0,10318,6],[11360,14,10318,12,"spreadNodeStartLoc"],[11360,32,10318,30],[11360,35,10318,33],[11360,40,10318,38,"state"],[11360,45,10318,33],[11360,46,10318,44,"startLoc"],[11360,54,10318,6],[11361,0,10319,6,"elt"],[11361,10,10319,6,"elt"],[11361,13,10319,9],[11361,16,10319,12],[11361,21,10319,17,"parseParenItem"],[11361,35,10319,12],[11361,36,10319,32],[11361,41,10319,37,"parseSpread"],[11361,52,10319,32],[11361,53,10319,49,"refShorthandDefaultPos"],[11361,75,10319,32],[11361,77,10319,73,"refNeedsArrowPos"],[11361,93,10319,32],[11361,94,10319,12],[11361,96,10319,92,"spreadNodeStartPos"],[11361,114,10319,12],[11361,116,10319,112,"spreadNodeStartLoc"],[11361,134,10319,12],[11361,135,10319,6],[11362,0,10320,5],[11362,9,10316,11],[11362,15,10320,11],[11362,19,10320,15],[11362,24,10320,20,"match"],[11362,29,10320,15],[11362,30,10320,26,"types"],[11362,35,10320,31],[11362,36,10320,32,"question"],[11362,44,10320,15],[11362,45,10320,11],[11362,47,10320,43],[11363,0,10321,6],[11363,15,10321,11,"expectPlugin"],[11363,27,10321,6],[11363,28,10321,24],[11363,48,10321,6],[11365,0,10323,6],[11365,14,10323,10],[11365,15,10323,11,"allowPlaceholder"],[11365,31,10323,6],[11365,33,10323,29],[11366,0,10324,8],[11366,17,10324,13,"raise"],[11366,22,10324,8],[11366,23,10324,19],[11366,28,10324,24,"state"],[11366,33,10324,19],[11366,34,10324,30,"start"],[11366,39,10324,8],[11366,41,10324,37],[11366,74,10324,8],[11367,0,10325,7],[11369,0,10327,6],[11369,14,10327,12,"node"],[11369,18,10327,16],[11369,21,10327,19],[11369,26,10327,24,"startNode"],[11369,35,10327,19],[11369,37,10327,6],[11370,0,10328,6],[11370,15,10328,11,"next"],[11370,19,10328,6],[11371,0,10329,6,"elt"],[11371,10,10329,6,"elt"],[11371,13,10329,9],[11371,16,10329,12],[11371,21,10329,17,"finishNode"],[11371,31,10329,12],[11371,32,10329,28,"node"],[11371,36,10329,12],[11371,38,10329,34],[11371,59,10329,12],[11371,60,10329,6],[11372,0,10330,5],[11372,9,10320,11],[11372,15,10330,11],[11373,0,10331,6,"elt"],[11373,10,10331,6,"elt"],[11373,13,10331,9],[11373,16,10331,12],[11373,21,10331,17,"parseMaybeAssign"],[11373,37,10331,12],[11373,38,10331,34],[11373,43,10331,12],[11373,45,10331,41,"refShorthandDefaultPos"],[11373,67,10331,12],[11373,69,10331,65],[11373,74,10331,70,"parseParenItem"],[11373,88,10331,12],[11373,90,10331,86,"refNeedsArrowPos"],[11373,106,10331,12],[11373,107,10331,6],[11374,0,10332,5],[11376,0,10334,4],[11376,15,10334,11,"elt"],[11376,18,10334,4],[11377,0,10335,3],[11380,38,10337,18,"liberal"],[11380,45],[11380,47,10337,27],[11381,0,10338,4],[11381,12,10338,10,"node"],[11381,16,10338,14],[11381,19,10338,17],[11381,24,10338,22,"startNode"],[11381,33,10338,17],[11381,35,10338,4],[11382,0,10339,4],[11382,12,10339,10,"name"],[11382,16,10339,14],[11382,19,10339,17],[11382,24,10339,22,"parseIdentifierName"],[11382,43,10339,17],[11382,44,10339,42,"node"],[11382,48,10339,46],[11382,49,10339,47,"start"],[11382,54,10339,17],[11382,56,10339,54,"liberal"],[11382,63,10339,17],[11382,64,10339,4],[11383,0,10340,4],[11383,15,10340,11],[11383,20,10340,16,"createIdentifier"],[11383,36,10340,11],[11383,37,10340,33,"node"],[11383,41,10340,11],[11383,43,10340,39,"name"],[11383,47,10340,11],[11383,48,10340,4],[11384,0,10341,3],[11387,39,10343,19,"node"],[11387,43],[11387,45,10343,25,"name"],[11387,49],[11387,51,10343,31],[11388,0,10344,4,"node"],[11388,8,10344,4,"node"],[11388,12,10344,8],[11388,13,10344,9,"name"],[11388,17,10344,4],[11388,20,10344,16,"name"],[11388,24,10344,4],[11389,0,10345,4,"node"],[11389,8,10345,4,"node"],[11389,12,10345,8],[11389,13,10345,9,"loc"],[11389,16,10345,4],[11389,17,10345,13,"identifierName"],[11389,31,10345,4],[11389,34,10345,30,"name"],[11389,38,10345,4],[11390,0,10346,4],[11390,15,10346,11],[11390,20,10346,16,"finishNode"],[11390,30,10346,11],[11390,31,10346,27,"node"],[11390,35,10346,11],[11390,37,10346,33],[11390,49,10346,11],[11390,50,10346,4],[11391,0,10347,3],[11394,42,10349,22,"pos"],[11394,45],[11394,47,10349,27,"liberal"],[11394,54],[11394,56,10349,36],[11395,0,10350,4],[11395,12,10350,8,"name"],[11395,16,10350,4],[11397,0,10352,4],[11397,12,10352,8],[11397,17,10352,13,"match"],[11397,22,10352,8],[11397,23,10352,19,"types"],[11397,28,10352,24],[11397,29,10352,25,"name"],[11397,33,10352,8],[11397,34,10352,4],[11397,36,10352,32],[11398,0,10353,6,"name"],[11398,10,10353,6,"name"],[11398,14,10353,10],[11398,17,10353,13],[11398,22,10353,18,"state"],[11398,27,10353,13],[11398,28,10353,24,"value"],[11398,33,10353,6],[11399,0,10354,5],[11399,9,10352,4],[11399,15,10354,11],[11399,19,10354,15],[11399,24,10354,20,"state"],[11399,29,10354,15],[11399,30,10354,26,"type"],[11399,34,10354,15],[11399,35,10354,31,"keyword"],[11399,42,10354,11],[11399,44,10354,40],[11400,0,10355,6,"name"],[11400,10,10355,6,"name"],[11400,14,10355,10],[11400,17,10355,13],[11400,22,10355,18,"state"],[11400,27,10355,13],[11400,28,10355,24,"type"],[11400,32,10355,13],[11400,33,10355,29,"keyword"],[11400,40,10355,6],[11402,0,10357,6],[11402,14,10357,10],[11402,15,10357,11,"name"],[11402,19,10357,15],[11402,24,10357,20],[11402,31,10357,11],[11402,35,10357,31,"name"],[11402,39,10357,35],[11402,44,10357,40],[11402,54,10357,10],[11402,60,10357,56],[11402,65,10357,61,"state"],[11402,70,10357,56],[11402,71,10357,67,"lastTokEnd"],[11402,81,10357,56],[11402,86,10357,82],[11402,91,10357,87,"state"],[11402,96,10357,82],[11402,97,10357,93,"lastTokStart"],[11402,109,10357,82],[11402,112,10357,108],[11402,113,10357,56],[11402,117,10357,113],[11402,122,10357,118,"input"],[11402,127,10357,113],[11402,128,10357,124,"charCodeAt"],[11402,138,10357,113],[11402,139,10357,135],[11402,144,10357,140,"state"],[11402,149,10357,135],[11402,150,10357,146,"lastTokStart"],[11402,162,10357,113],[11402,168,10357,164],[11402,170,10357,10],[11402,171,10357,6],[11402,173,10357,169],[11403,0,10358,8],[11403,17,10358,13,"state"],[11403,22,10358,8],[11403,23,10358,19,"context"],[11403,30,10358,8],[11403,31,10358,27,"pop"],[11403,34,10358,8],[11404,0,10359,7],[11405,0,10360,5],[11405,9,10354,11],[11405,15,10360,11],[11406,0,10361,6],[11406,16,10361,12],[11406,21,10361,17,"unexpected"],[11406,31,10361,12],[11406,33,10361,6],[11407,0,10362,5],[11409,0,10364,4],[11409,12,10364,8,"liberal"],[11409,19,10364,4],[11409,21,10364,17],[11410,0,10365,6],[11410,15,10365,11,"state"],[11410,20,10365,6],[11410,21,10365,17,"type"],[11410,25,10365,6],[11410,28,10365,24,"types"],[11410,33,10365,29],[11410,34,10365,30,"name"],[11410,38,10365,6],[11411,0,10366,5],[11411,9,10364,4],[11411,15,10366,11],[11412,0,10367,6],[11412,15,10367,11,"checkReservedWord"],[11412,32,10367,6],[11412,33,10367,29,"name"],[11412,37,10367,6],[11412,39,10367,35],[11412,44,10367,40,"state"],[11412,49,10367,35],[11412,50,10367,46,"start"],[11412,55,10367,6],[11412,57,10367,53],[11412,58,10367,54],[11412,59,10367,55],[11412,64,10367,60,"state"],[11412,69,10367,55],[11412,70,10367,66,"type"],[11412,74,10367,55],[11412,75,10367,71,"keyword"],[11412,82,10367,6],[11412,84,10367,80],[11412,89,10367,6],[11413,0,10368,5],[11415,0,10370,4],[11415,13,10370,9,"next"],[11415,17,10370,4],[11416,0,10371,4],[11416,15,10371,11,"name"],[11416,19,10371,4],[11417,0,10372,3],[11420,40,10374,20,"word"],[11420,44],[11420,46,10374,26,"startLoc"],[11420,54],[11420,56,10374,36,"checkKeywords"],[11420,69],[11420,71,10374,51,"isBinding"],[11420,80],[11420,82,10374,62],[11421,0,10375,4],[11421,12,10375,8],[11421,17,10375,13,"scope"],[11421,22,10375,8],[11421,23,10375,19,"inGenerator"],[11421,34,10375,8],[11421,38,10375,34,"word"],[11421,42,10375,38],[11421,47,10375,43],[11421,54,10375,4],[11421,56,10375,52],[11422,0,10376,6],[11422,15,10376,11,"raise"],[11422,20,10376,6],[11422,21,10376,17,"startLoc"],[11422,29,10376,6],[11422,31,10376,27],[11422,85,10376,6],[11423,0,10377,6],[11424,0,10378,5],[11426,0,10380,4],[11426,12,10380,8,"word"],[11426,16,10380,12],[11426,21,10380,17],[11426,28,10380,4],[11426,30,10380,26],[11427,0,10381,6],[11427,14,10381,10],[11427,19,10381,15,"scope"],[11427,24,10381,10],[11427,25,10381,21,"inAsync"],[11427,32,10381,6],[11427,34,10381,30],[11428,0,10382,8],[11428,17,10382,13,"raise"],[11428,22,10382,8],[11428,23,10382,19,"startLoc"],[11428,31,10382,8],[11428,33,10382,29],[11428,93,10382,8],[11429,0,10383,8],[11430,0,10384,7],[11432,0,10386,6],[11432,14,10386,10],[11432,19,10386,15,"state"],[11432,24,10386,10],[11432,25,10386,21,"awaitPos"],[11432,33,10386,10],[11432,38,10386,34],[11432,39,10386,35],[11432,40,10386,10],[11432,45,10386,41],[11432,50,10386,46,"state"],[11432,55,10386,41],[11432,56,10386,52,"maybeInArrowParameters"],[11432,78,10386,41],[11432,82,10386,78],[11432,87,10386,83,"isAwaitAllowed"],[11432,101,10386,78],[11432,103,10386,10],[11432,104,10386,6],[11432,106,10386,102],[11433,0,10387,8],[11433,17,10387,13,"state"],[11433,22,10387,8],[11433,23,10387,19,"awaitPos"],[11433,31,10387,8],[11433,34,10387,30],[11433,39,10387,35,"state"],[11433,44,10387,30],[11433,45,10387,41,"start"],[11433,50,10387,8],[11434,0,10388,7],[11435,0,10389,5],[11437,0,10391,4],[11437,12,10391,8],[11437,17,10391,13,"scope"],[11437,22,10391,8],[11437,23,10391,19,"inClass"],[11437,30,10391,8],[11437,34,10391,30],[11437,35,10391,31],[11437,40,10391,36,"scope"],[11437,45,10391,31],[11437,46,10391,42,"inNonArrowFunction"],[11437,64,10391,8],[11437,68,10391,64,"word"],[11437,72,10391,68],[11437,77,10391,73],[11437,88,10391,4],[11437,90,10391,86],[11438,0,10392,6],[11438,15,10392,11,"raise"],[11438,20,10392,6],[11438,21,10392,17,"startLoc"],[11438,29,10392,6],[11438,31,10392,27],[11438,86,10392,6],[11439,0,10393,6],[11440,0,10394,5],[11442,0,10396,4],[11442,12,10396,8,"checkKeywords"],[11442,25,10396,21],[11442,29,10396,25,"isKeyword"],[11442,38,10396,34],[11442,39,10396,35,"word"],[11442,43,10396,34],[11442,44,10396,4],[11442,46,10396,42],[11443,0,10397,6],[11443,15,10397,11,"raise"],[11443,20,10397,6],[11443,21,10397,17,"startLoc"],[11443,29,10397,6],[11443,56,10397,50,"word"],[11443,60,10397,6],[11444,0,10398,6],[11445,0,10399,5],[11447,0,10401,4],[11447,12,10401,10,"reservedTest"],[11447,24,10401,22],[11447,27,10401,25],[11447,28,10401,26],[11447,33,10401,31,"state"],[11447,38,10401,26],[11447,39,10401,37,"strict"],[11447,45,10401,25],[11447,48,10401,46,"isReservedWord"],[11447,62,10401,25],[11447,65,10401,63,"isBinding"],[11447,74,10401,72],[11447,77,10401,75,"isStrictBindReservedWord"],[11447,101,10401,72],[11447,104,10401,102,"isStrictReservedWord"],[11447,124,10401,4],[11449,0,10403,4],[11449,12,10403,8,"reservedTest"],[11449,24,10403,20],[11449,25,10403,21,"word"],[11449,29,10403,20],[11449,31,10403,27],[11449,36,10403,32,"inModule"],[11449,44,10403,20],[11449,45,10403,4],[11449,47,10403,43],[11450,0,10404,6],[11450,14,10404,10],[11450,15,10404,11],[11450,20,10404,16,"scope"],[11450,25,10404,11],[11450,26,10404,22,"inAsync"],[11450,33,10404,10],[11450,37,10404,33,"word"],[11450,41,10404,37],[11450,46,10404,42],[11450,53,10404,6],[11450,55,10404,51],[11451,0,10405,8],[11451,17,10405,13,"raise"],[11451,22,10405,8],[11451,23,10405,19,"startLoc"],[11451,31,10405,8],[11451,33,10405,29],[11451,88,10405,8],[11452,0,10406,7],[11452,11,10404,6],[11452,17,10406,13],[11453,0,10407,8],[11453,17,10407,13,"raise"],[11453,22,10407,8],[11453,23,10407,19,"startLoc"],[11453,31,10407,8],[11453,64,10407,58,"word"],[11453,68,10407,8],[11454,0,10408,7],[11455,0,10409,5],[11456,0,10410,3],[11459,39,10412,19],[11460,0,10413,4],[11460,12,10413,8],[11460,17,10413,13,"scope"],[11460,22,10413,8],[11460,23,10413,19,"inFunction"],[11460,33,10413,4],[11460,35,10413,31],[11460,42,10413,38],[11460,47,10413,43,"scope"],[11460,52,10413,38],[11460,53,10413,49,"inAsync"],[11460,60,10413,31],[11461,0,10414,4],[11461,12,10414,8],[11461,17,10414,13,"options"],[11461,24,10414,8],[11461,25,10414,21,"allowAwaitOutsideFunction"],[11461,50,10414,4],[11461,52,10414,48],[11461,59,10414,55],[11461,63,10414,48],[11462,0,10415,4],[11462,12,10415,8],[11462,17,10415,13,"hasPlugin"],[11462,26,10415,8],[11462,27,10415,23],[11462,42,10415,8],[11462,43,10415,4],[11462,45,10415,41],[11462,52,10415,48],[11462,57,10415,53,"inModule"],[11462,65,10415,41],[11463,0,10416,4],[11463,15,10416,11],[11463,20,10416,4],[11464,0,10417,3],[11467,35,10419,15],[11468,0,10420,4],[11468,12,10420,10,"node"],[11468,16,10420,14],[11468,19,10420,17],[11468,24,10420,22,"startNode"],[11468,33,10420,17],[11468,35,10420,4],[11469,0,10421,4],[11469,13,10421,9,"next"],[11469,17,10421,4],[11471,0,10423,4],[11471,12,10423,8],[11471,17,10423,13,"state"],[11471,22,10423,8],[11471,23,10423,19,"inParameters"],[11471,35,10423,4],[11471,37,10423,33],[11472,0,10424,6],[11472,15,10424,11,"raise"],[11472,20,10424,6],[11472,21,10424,17,"node"],[11472,25,10424,21],[11472,26,10424,22,"start"],[11472,31,10424,6],[11472,33,10424,29],[11472,84,10424,6],[11473,0,10425,5],[11473,9,10423,4],[11473,15,10425,11],[11473,19,10425,15],[11473,24,10425,20,"state"],[11473,29,10425,15],[11473,30,10425,26,"awaitPos"],[11473,38,10425,15],[11473,43,10425,39],[11473,44,10425,40],[11473,45,10425,11],[11473,47,10425,43],[11474,0,10426,6],[11474,15,10426,11,"state"],[11474,20,10426,6],[11474,21,10426,17,"awaitPos"],[11474,29,10426,6],[11474,32,10426,28,"node"],[11474,36,10426,32],[11474,37,10426,33,"start"],[11474,42,10426,6],[11475,0,10427,5],[11477,0,10429,4],[11477,12,10429,8],[11477,17,10429,13,"eat"],[11477,20,10429,8],[11477,21,10429,17,"types"],[11477,26,10429,22],[11477,27,10429,23,"star"],[11477,31,10429,8],[11477,32,10429,4],[11477,34,10429,30],[11478,0,10430,6],[11478,15,10430,11,"raise"],[11478,20,10430,6],[11478,21,10430,17,"node"],[11478,25,10430,21],[11478,26,10430,22,"start"],[11478,31,10430,6],[11478,33,10430,29],[11478,120,10430,6],[11479,0,10431,5],[11481,0,10433,4],[11481,12,10433,8],[11481,13,10433,9],[11481,18,10433,14,"scope"],[11481,23,10433,9],[11481,24,10433,20,"inFunction"],[11481,34,10433,8],[11481,38,10433,34],[11481,39,10433,35],[11481,44,10433,40,"options"],[11481,51,10433,35],[11481,52,10433,48,"allowAwaitOutsideFunction"],[11481,77,10433,4],[11481,79,10433,75],[11482,0,10434,6],[11482,14,10434,10],[11482,19,10434,15,"hasPrecedingLineBreak"],[11482,40,10434,10],[11482,46,10434,42],[11482,51,10434,47,"match"],[11482,56,10434,42],[11482,57,10434,53,"types"],[11482,62,10434,58],[11482,63,10434,59,"plusMin"],[11482,70,10434,42],[11482,71,10434,10],[11482,75,10434,71],[11482,80,10434,76,"match"],[11482,85,10434,71],[11482,86,10434,82,"types"],[11482,91,10434,87],[11482,92,10434,88,"parenL"],[11482,98,10434,71],[11482,99,10434,10],[11482,103,10434,99],[11482,108,10434,104,"match"],[11482,113,10434,99],[11482,114,10434,110,"types"],[11482,119,10434,115],[11482,120,10434,116,"bracketL"],[11482,128,10434,99],[11482,129,10434,10],[11482,133,10434,129],[11482,138,10434,134,"match"],[11482,143,10434,129],[11482,144,10434,140,"types"],[11482,149,10434,145],[11482,150,10434,146,"backQuote"],[11482,159,10434,129],[11482,160,10434,10],[11482,164,10434,160],[11482,169,10434,165,"match"],[11482,174,10434,160],[11482,175,10434,171,"types"],[11482,180,10434,176],[11482,181,10434,177,"regexp"],[11482,187,10434,160],[11482,188,10434,10],[11482,192,10434,188],[11482,197,10434,193,"match"],[11482,202,10434,188],[11482,203,10434,199,"types"],[11482,208,10434,204],[11482,209,10434,205,"slash"],[11482,214,10434,188],[11482,215,10434,10],[11482,219,10434,215],[11482,224,10434,220,"hasPlugin"],[11482,233,10434,215],[11482,234,10434,230],[11482,247,10434,215],[11482,252,10434,248],[11482,257,10434,253,"match"],[11482,262,10434,248],[11482,263,10434,259,"types"],[11482,268,10434,264],[11482,269,10434,265,"modulo"],[11482,275,10434,248],[11482,276,10434,6],[11482,278,10434,274],[11483,0,10435,8],[11483,17,10435,13,"ambiguousScriptDifferentAst"],[11483,44,10435,8],[11483,47,10435,43],[11483,51,10435,8],[11484,0,10436,7],[11484,11,10434,6],[11484,17,10436,13],[11485,0,10437,8],[11485,17,10437,13,"sawUnambiguousESM"],[11485,34,10437,8],[11485,37,10437,33],[11485,41,10437,8],[11486,0,10438,7],[11487,0,10439,5],[11489,0,10441,4],[11489,12,10441,8],[11489,13,10441,9],[11489,18,10441,14,"state"],[11489,23,10441,9],[11489,24,10441,20,"soloAwait"],[11489,33,10441,4],[11489,35,10441,31],[11490,0,10442,6,"node"],[11490,10,10442,6,"node"],[11490,14,10442,10],[11490,15,10442,11,"argument"],[11490,23,10442,6],[11490,26,10442,22],[11490,31,10442,27,"parseMaybeUnary"],[11490,46,10442,22],[11490,48,10442,6],[11491,0,10443,5],[11493,0,10445,4],[11493,15,10445,11],[11493,20,10445,16,"finishNode"],[11493,30,10445,11],[11493,31,10445,27,"node"],[11493,35,10445,11],[11493,37,10445,33],[11493,54,10445,11],[11493,55,10445,4],[11494,0,10446,3],[11497,33,10448,13,"noIn"],[11497,37],[11497,39,10448,19],[11498,0,10449,4],[11498,12,10449,10,"node"],[11498,16,10449,14],[11498,19,10449,17],[11498,24,10449,22,"startNode"],[11498,33,10449,17],[11498,35,10449,4],[11500,0,10451,4],[11500,12,10451,8],[11500,17,10451,13,"state"],[11500,22,10451,8],[11500,23,10451,19,"inParameters"],[11500,35,10451,4],[11500,37,10451,33],[11501,0,10452,6],[11501,15,10452,11,"raise"],[11501,20,10452,6],[11501,21,10452,17,"node"],[11501,25,10452,21],[11501,26,10452,22,"start"],[11501,31,10452,6],[11501,33,10452,29],[11501,79,10452,6],[11502,0,10453,5],[11502,9,10451,4],[11502,15,10453,11],[11502,19,10453,15],[11502,24,10453,20,"state"],[11502,29,10453,15],[11502,30,10453,26,"yieldPos"],[11502,38,10453,15],[11502,43,10453,39],[11502,44,10453,40],[11502,45,10453,11],[11502,47,10453,43],[11503,0,10454,6],[11503,15,10454,11,"state"],[11503,20,10454,6],[11503,21,10454,17,"yieldPos"],[11503,29,10454,6],[11503,32,10454,28,"node"],[11503,36,10454,32],[11503,37,10454,33,"start"],[11503,42,10454,6],[11504,0,10455,5],[11506,0,10457,4],[11506,13,10457,9,"next"],[11506,17,10457,4],[11508,0,10459,4],[11508,12,10459,8],[11508,17,10459,13,"match"],[11508,22,10459,8],[11508,23,10459,19,"types"],[11508,28,10459,24],[11508,29,10459,25,"semi"],[11508,33,10459,8],[11508,38,10459,34],[11508,39,10459,35],[11508,44,10459,40,"match"],[11508,49,10459,35],[11508,50,10459,46,"types"],[11508,55,10459,51],[11508,56,10459,52,"star"],[11508,60,10459,35],[11508,61,10459,34],[11508,65,10459,61],[11508,66,10459,62],[11508,71,10459,67,"state"],[11508,76,10459,62],[11508,77,10459,73,"type"],[11508,81,10459,62],[11508,82,10459,78,"startsExpr"],[11508,92,10459,8],[11508,96,10459,92],[11508,101,10459,97,"hasPrecedingLineBreak"],[11508,122,10459,92],[11508,124,10459,4],[11508,126,10459,122],[11509,0,10460,6,"node"],[11509,10,10460,6,"node"],[11509,14,10460,10],[11509,15,10460,11,"delegate"],[11509,23,10460,6],[11509,26,10460,22],[11509,31,10460,6],[11510,0,10461,6,"node"],[11510,10,10461,6,"node"],[11510,14,10461,10],[11510,15,10461,11,"argument"],[11510,23,10461,6],[11510,26,10461,22],[11510,30,10461,6],[11511,0,10462,5],[11511,9,10459,4],[11511,15,10462,11],[11512,0,10463,6,"node"],[11512,10,10463,6,"node"],[11512,14,10463,10],[11512,15,10463,11,"delegate"],[11512,23,10463,6],[11512,26,10463,22],[11512,31,10463,27,"eat"],[11512,34,10463,22],[11512,35,10463,31,"types"],[11512,40,10463,36],[11512,41,10463,37,"star"],[11512,45,10463,22],[11512,46,10463,6],[11513,0,10464,6,"node"],[11513,10,10464,6,"node"],[11513,14,10464,10],[11513,15,10464,11,"argument"],[11513,23,10464,6],[11513,26,10464,22],[11513,31,10464,27,"parseMaybeAssign"],[11513,47,10464,22],[11513,48,10464,44,"noIn"],[11513,52,10464,22],[11513,53,10464,6],[11514,0,10465,5],[11516,0,10467,4],[11516,15,10467,11],[11516,20,10467,16,"finishNode"],[11516,30,10467,11],[11516,31,10467,27,"node"],[11516,35,10467,11],[11516,37,10467,33],[11516,54,10467,11],[11516,55,10467,4],[11517,0,10468,3],[11520,51,10470,31,"left"],[11520,55],[11520,57,10470,37,"leftStartPos"],[11520,69],[11520,71,10470,51],[11521,0,10471,4],[11521,12,10471,8],[11521,17,10471,13,"getPluginOption"],[11521,32,10471,8],[11521,33,10471,29],[11521,51,10471,8],[11521,53,10471,49],[11521,63,10471,8],[11521,69,10471,65],[11521,76,10471,4],[11521,78,10471,74],[11522,0,10472,6],[11522,14,10472,10,"left"],[11522,18,10472,14],[11522,19,10472,15,"type"],[11522,23,10472,10],[11522,28,10472,24],[11522,48,10472,6],[11522,50,10472,46],[11523,0,10473,8],[11523,17,10473,13,"raise"],[11523,22,10473,8],[11523,23,10473,19,"leftStartPos"],[11523,35,10473,8],[11524,0,10474,7],[11525,0,10475,5],[11526,0,10476,3],[11529,45,10478,25,"childExpression"],[11529,60],[11529,62,10478,42,"startPos"],[11529,70],[11529,72,10478,52,"startLoc"],[11529,80],[11529,82,10478,62],[11530,0,10479,4],[11530,12,10479,10,"pipelineStyle"],[11530,25,10479,23],[11530,28,10479,26],[11530,33,10479,31,"checkSmartPipelineBodyStyle"],[11530,60,10479,26],[11530,61,10479,59,"childExpression"],[11530,76,10479,26],[11530,77,10479,4],[11531,0,10480,4],[11531,13,10480,9,"checkSmartPipelineBodyEarlyErrors"],[11531,46,10480,4],[11531,47,10480,43,"childExpression"],[11531,62,10480,4],[11531,64,10480,60,"pipelineStyle"],[11531,77,10480,4],[11531,79,10480,75,"startPos"],[11531,87,10480,4],[11532,0,10481,4],[11532,15,10481,11],[11532,20,10481,16,"parseSmartPipelineBodyInStyle"],[11532,49,10481,11],[11532,50,10481,46,"childExpression"],[11532,65,10481,11],[11532,67,10481,63,"pipelineStyle"],[11532,80,10481,11],[11532,82,10481,78,"startPos"],[11532,90,10481,11],[11532,92,10481,88,"startLoc"],[11532,100,10481,11],[11532,101,10481,4],[11533,0,10482,3],[11536,56,10484,36,"childExpression"],[11536,71],[11536,73,10484,53,"pipelineStyle"],[11536,86],[11536,88,10484,68,"startPos"],[11536,96],[11536,98,10484,78],[11537,0,10485,4],[11537,12,10485,8],[11537,17,10485,13,"match"],[11537,22,10485,8],[11537,23,10485,19,"types"],[11537,28,10485,24],[11537,29,10485,25,"arrow"],[11537,34,10485,8],[11537,35,10485,4],[11537,37,10485,33],[11538,0,10486,6],[11538,16,10486,12],[11538,21,10486,17,"raise"],[11538,26,10486,12],[11538,27,10486,23],[11538,32,10486,28,"state"],[11538,37,10486,23],[11538,38,10486,34,"start"],[11538,43,10486,12],[11538,146,10486,6],[11539,0,10487,5],[11539,9,10485,4],[11539,15,10487,11],[11539,19,10487,15,"pipelineStyle"],[11539,32,10487,28],[11539,37,10487,33],[11539,62,10487,15],[11539,66,10487,62,"childExpression"],[11539,81,10487,77],[11539,82,10487,78,"type"],[11539,86,10487,62],[11539,91,10487,87],[11539,111,10487,11],[11539,113,10487,109],[11540,0,10488,6],[11540,15,10488,11,"raise"],[11540,20,10488,6],[11540,21,10488,17,"startPos"],[11540,29,10488,6],[11541,0,10489,5],[11542,0,10490,3],[11545,52,10492,32,"childExpression"],[11545,67],[11545,69,10492,49,"pipelineStyle"],[11545,82],[11545,84,10492,64,"startPos"],[11545,92],[11545,94,10492,74,"startLoc"],[11545,102],[11545,104,10492,84],[11546,0,10493,4],[11546,12,10493,10,"bodyNode"],[11546,20,10493,18],[11546,23,10493,21],[11546,28,10493,26,"startNodeAt"],[11546,39,10493,21],[11546,40,10493,38,"startPos"],[11546,48,10493,21],[11546,50,10493,48,"startLoc"],[11546,58,10493,21],[11546,59,10493,4],[11548,0,10495,4],[11548,16,10495,12,"pipelineStyle"],[11548,29,10495,4],[11549,0,10496,6],[11549,15,10496,11],[11549,37,10496,6],[11550,0,10497,8,"bodyNode"],[11550,12,10497,8,"bodyNode"],[11550,20,10497,16],[11550,21,10497,17,"callee"],[11550,27,10497,8],[11550,30,10497,26,"childExpression"],[11550,45,10497,8],[11551,0,10498,8],[11553,0,10500,6],[11553,15,10500,11],[11553,40,10500,6],[11554,0,10501,8,"bodyNode"],[11554,12,10501,8,"bodyNode"],[11554,20,10501,16],[11554,21,10501,17,"callee"],[11554,27,10501,8],[11554,30,10501,26,"childExpression"],[11554,45,10501,41],[11554,46,10501,42,"callee"],[11554,52,10501,8],[11555,0,10502,8],[11557,0,10504,6],[11557,15,10504,11],[11557,44,10504,6],[11558,0,10505,8,"bodyNode"],[11558,12,10505,8,"bodyNode"],[11558,20,10505,16],[11558,21,10505,17,"callee"],[11558,27,10505,8],[11558,30,10505,26,"childExpression"],[11558,45,10505,41],[11558,46,10505,42,"argument"],[11558,54,10505,8],[11559,0,10506,8],[11561,0,10508,6],[11561,15,10508,11],[11561,40,10508,6],[11562,0,10509,8],[11562,16,10509,12],[11562,17,10509,13],[11562,22,10509,18,"topicReferenceWasUsedInCurrentTopicContext"],[11562,64,10509,13],[11562,66,10509,8],[11562,68,10509,64],[11563,0,10510,10],[11563,19,10510,15,"raise"],[11563,24,10510,10],[11563,25,10510,21,"startPos"],[11563,33,10510,10],[11564,0,10511,9],[11566,0,10513,8,"bodyNode"],[11566,12,10513,8,"bodyNode"],[11566,20,10513,16],[11566,21,10513,17,"expression"],[11566,31,10513,8],[11566,34,10513,30,"childExpression"],[11566,49,10513,8],[11567,0,10514,8],[11569,0,10516,6],[11570,0,10517,8],[11570,18,10517,14],[11570,22,10517,18,"Error"],[11570,27,10517,14],[11570,87,10517,81,"pipelineStyle"],[11570,100,10517,14],[11570,107,10517,8],[11571,0,10495,4],[11573,0,10520,4],[11573,15,10520,11],[11573,20,10520,16,"finishNode"],[11573,30,10520,11],[11573,31,10520,27,"bodyNode"],[11573,39,10520,11],[11573,41,10520,37,"pipelineStyle"],[11573,54,10520,11],[11573,55,10520,4],[11574,0,10521,3],[11577,50,10523,30,"expression"],[11577,60],[11577,62,10523,42],[11578,0,10524,4],[11578,16,10524,12,"expression"],[11578,26,10524,22],[11578,27,10524,23,"type"],[11578,31,10524,4],[11579,0,10525,6],[11580,0,10526,8],[11580,19,10526,15],[11580,24,10526,20,"isSimpleReference"],[11580,41,10526,15],[11580,42,10526,38,"expression"],[11580,52,10526,15],[11580,56,10526,52],[11580,78,10526,15],[11580,81,10526,77],[11580,106,10526,8],[11581,0,10524,4],[11582,0,10528,3],[11585,40,10530,20,"expression"],[11585,50],[11585,52,10530,32],[11586,0,10531,4],[11586,16,10531,12,"expression"],[11586,26,10531,22],[11586,27,10531,23,"type"],[11586,31,10531,4],[11587,0,10532,6],[11587,15,10532,11],[11587,33,10532,6],[11588,0,10533,8],[11588,19,10533,15],[11588,20,10533,16,"expression"],[11588,30,10533,26],[11588,31,10533,27,"computed"],[11588,39,10533,15],[11588,43,10533,39],[11588,48,10533,44,"isSimpleReference"],[11588,65,10533,39],[11588,66,10533,62,"expression"],[11588,76,10533,72],[11588,77,10533,73,"object"],[11588,83,10533,39],[11588,84,10533,8],[11590,0,10535,6],[11590,15,10535,11],[11590,27,10535,6],[11591,0,10536,8],[11591,19,10536,15],[11591,23,10536,8],[11593,0,10538,6],[11594,0,10539,8],[11594,19,10539,15],[11594,24,10539,8],[11595,0,10531,4],[11596,0,10541,3],[11599,49,10543,29,"callback"],[11599,57],[11599,59,10543,39],[11600,0,10544,4],[11600,12,10544,10,"outerContextTopicState"],[11600,34,10544,32],[11600,37,10544,35],[11600,42,10544,40,"state"],[11600,47,10544,35],[11600,48,10544,46,"topicContext"],[11600,60,10544,4],[11601,0,10545,4],[11601,13,10545,9,"state"],[11601,18,10545,4],[11601,19,10545,15,"topicContext"],[11601,31,10545,4],[11601,34,10545,30],[11602,0,10546,6,"maxNumOfResolvableTopics"],[11602,10,10546,6,"maxNumOfResolvableTopics"],[11602,34,10546,30],[11602,36,10546,32],[11602,37,10545,30],[11603,0,10547,6,"maxTopicIndex"],[11603,10,10547,6,"maxTopicIndex"],[11603,23,10547,19],[11603,25,10547,21],[11604,0,10545,30],[11604,9,10545,4],[11606,0,10550,4],[11606,12,10550,8],[11607,0,10551,6],[11607,17,10551,13,"callback"],[11607,25,10551,21],[11607,27,10551,6],[11608,0,10552,5],[11608,9,10550,4],[11608,18,10552,14],[11609,0,10553,6],[11609,15,10553,11,"state"],[11609,20,10553,6],[11609,21,10553,17,"topicContext"],[11609,33,10553,6],[11609,36,10553,32,"outerContextTopicState"],[11609,58,10553,6],[11610,0,10554,5],[11611,0,10555,3],[11614,49,10557,29,"callback"],[11614,57],[11614,59,10557,39],[11615,0,10558,4],[11615,12,10558,10,"outerContextTopicState"],[11615,34,10558,32],[11615,37,10558,35],[11615,42,10558,40,"state"],[11615,47,10558,35],[11615,48,10558,46,"topicContext"],[11615,60,10558,4],[11616,0,10559,4],[11616,13,10559,9,"state"],[11616,18,10559,4],[11616,19,10559,15,"topicContext"],[11616,31,10559,4],[11616,34,10559,30],[11617,0,10560,6,"maxNumOfResolvableTopics"],[11617,10,10560,6,"maxNumOfResolvableTopics"],[11617,34,10560,30],[11617,36,10560,32],[11617,37,10559,30],[11618,0,10561,6,"maxTopicIndex"],[11618,10,10561,6,"maxTopicIndex"],[11618,23,10561,19],[11618,25,10561,21],[11619,0,10559,30],[11619,9,10559,4],[11621,0,10564,4],[11621,12,10564,8],[11622,0,10565,6],[11622,17,10565,13,"callback"],[11622,25,10565,21],[11622,27,10565,6],[11623,0,10566,5],[11623,9,10564,4],[11623,18,10566,14],[11624,0,10567,6],[11624,15,10567,11,"state"],[11624,20,10567,6],[11624,21,10567,17,"topicContext"],[11624,33,10567,6],[11624,36,10567,32,"outerContextTopicState"],[11624,58,10567,6],[11625,0,10568,5],[11626,0,10569,3],[11629,53,10571,33,"callback"],[11629,61],[11629,63,10571,43],[11630,0,10572,4],[11630,12,10572,10,"outerContextSoloAwaitState"],[11630,38,10572,36],[11630,41,10572,39],[11630,46,10572,44,"state"],[11630,51,10572,39],[11630,52,10572,50,"soloAwait"],[11630,61,10572,4],[11631,0,10573,4],[11631,13,10573,9,"state"],[11631,18,10573,4],[11631,19,10573,15,"soloAwait"],[11631,28,10573,4],[11631,31,10573,27],[11631,35,10573,4],[11633,0,10575,4],[11633,12,10575,8],[11634,0,10576,6],[11634,17,10576,13,"callback"],[11634,25,10576,21],[11634,27,10576,6],[11635,0,10577,5],[11635,9,10575,4],[11635,18,10577,14],[11636,0,10578,6],[11636,15,10578,11,"state"],[11636,20,10578,6],[11636,21,10578,17,"soloAwait"],[11636,30,10578,6],[11636,33,10578,29,"outerContextSoloAwaitState"],[11636,59,10578,6],[11637,0,10579,5],[11638,0,10580,3],[11641,47,10582,27],[11642,0,10583,4],[11642,13,10583,9,"state"],[11642,18,10583,4],[11642,19,10583,15,"topicContext"],[11642,31,10583,4],[11642,32,10583,28,"maxTopicIndex"],[11642,45,10583,4],[11642,48,10583,44],[11642,49,10583,4],[11643,0,10584,3],[11646,76,10586,56],[11647,0,10587,4],[11647,15,10587,11],[11647,20,10587,16,"state"],[11647,25,10587,11],[11647,26,10587,22,"topicContext"],[11647,38,10587,11],[11647,39,10587,35,"maxNumOfResolvableTopics"],[11647,63,10587,11],[11647,67,10587,63],[11647,68,10587,4],[11648,0,10588,3],[11651,67,10590,47],[11652,0,10591,4],[11652,15,10591,11],[11652,20,10591,16,"state"],[11652,25,10591,11],[11652,26,10591,22,"topicContext"],[11652,38,10591,11],[11652,39,10591,35,"maxTopicIndex"],[11652,52,10591,11],[11652,56,10591,52],[11652,60,10591,11],[11652,64,10591,60],[11652,69,10591,65,"state"],[11652,74,10591,60],[11652,75,10591,71,"topicContext"],[11652,87,10591,60],[11652,88,10591,84,"maxTopicIndex"],[11652,101,10591,60],[11652,105,10591,101],[11652,106,10591,4],[11653,0,10592,3],[11656,46,10594,26,"prec"],[11656,50],[11656,52,10594,32,"noIn"],[11656,56],[11656,58,10594,38],[11657,0,10595,4],[11657,12,10595,10,"startPos"],[11657,20,10595,18],[11657,23,10595,21],[11657,28,10595,26,"state"],[11657,33,10595,21],[11657,34,10595,32,"start"],[11657,39,10595,4],[11658,0,10596,4],[11658,12,10596,10,"startLoc"],[11658,20,10596,18],[11658,23,10596,21],[11658,28,10596,26,"state"],[11658,33,10596,21],[11658,34,10596,32,"startLoc"],[11658,42,10596,4],[11659,0,10597,4],[11659,13,10597,9,"state"],[11659,18,10597,4],[11659,19,10597,15,"potentialArrowAt"],[11659,35,10597,4],[11659,38,10597,34],[11659,43,10597,39,"state"],[11659,48,10597,34],[11659,49,10597,45,"start"],[11659,54,10597,4],[11660,0,10598,4],[11660,12,10598,10,"oldInFSharpPipelineDirectBody"],[11660,41,10598,39],[11660,44,10598,42],[11660,49,10598,47,"state"],[11660,54,10598,42],[11660,55,10598,53,"inFSharpPipelineDirectBody"],[11660,81,10598,4],[11661,0,10599,4],[11661,13,10599,9,"state"],[11661,18,10599,4],[11661,19,10599,15,"inFSharpPipelineDirectBody"],[11661,45,10599,4],[11661,48,10599,44],[11661,52,10599,4],[11662,0,10600,4],[11662,12,10600,10,"ret"],[11662,15,10600,13],[11662,18,10600,16],[11662,23,10600,21,"parseExprOp"],[11662,34,10600,16],[11662,35,10600,33],[11662,40,10600,38,"parseMaybeUnary"],[11662,55,10600,33],[11662,57,10600,16],[11662,59,10600,57,"startPos"],[11662,67,10600,16],[11662,69,10600,67,"startLoc"],[11662,77,10600,16],[11662,79,10600,77,"prec"],[11662,83,10600,16],[11662,85,10600,83,"noIn"],[11662,89,10600,16],[11662,90,10600,4],[11663,0,10601,4],[11663,13,10601,9,"state"],[11663,18,10601,4],[11663,19,10601,15,"inFSharpPipelineDirectBody"],[11663,45,10601,4],[11663,48,10601,44,"oldInFSharpPipelineDirectBody"],[11663,77,10601,4],[11664,0,10602,4],[11664,15,10602,11,"ret"],[11664,18,10602,4],[11665,0,10603,3],[11669,4,8930,31,"LValParser"],[11669,14],[11671,0,10607,0],[11671,6,10607,6,"loopLabel"],[11671,15,10607,15],[11671,18,10607,18],[11672,0,10608,2,"kind"],[11672,4,10608,2,"kind"],[11672,8,10608,6],[11672,10,10608,8],[11673,0,10607,18],[11673,3,10607,0],[11674,0,10607,0],[11674,6,10610,6,"switchLabel"],[11674,17,10610,17],[11674,20,10610,20],[11675,0,10611,2,"kind"],[11675,4,10611,2,"kind"],[11675,8,10611,6],[11675,10,10611,8],[11676,0,10610,20],[11676,3,10607,0],[11677,0,10613,0],[11677,6,10613,6,"FUNC_NO_FLAGS"],[11677,19,10613,19],[11677,22,10613,22],[11677,23,10613,0],[11678,0,10613,0],[11678,6,10614,6,"FUNC_STATEMENT"],[11678,20,10614,20],[11678,23,10614,23],[11678,24,10613,0],[11679,0,10613,0],[11679,6,10615,6,"FUNC_HANGING_STATEMENT"],[11679,28,10615,28],[11679,31,10615,31],[11679,32,10613,0],[11680,0,10613,0],[11680,6,10616,6,"FUNC_NULLABLE_ID"],[11680,22,10616,22],[11680,25,10616,25],[11680,26,10613,0],[11682,6,10617,6,"StatementParser"],[11682,21],[11693,36,10618,16,"file"],[11693,40],[11693,42,10618,22,"program"],[11693,49],[11693,51,10618,31],[11694,0,10619,4,"program"],[11694,8,10619,4,"program"],[11694,15,10619,11],[11694,16,10619,12,"sourceType"],[11694,26,10619,4],[11694,29,10619,25],[11694,34,10619,30,"options"],[11694,41,10619,25],[11694,42,10619,38,"sourceType"],[11694,52,10619,4],[11695,0,10620,4,"program"],[11695,8,10620,4,"program"],[11695,15,10620,11],[11695,16,10620,12,"interpreter"],[11695,27,10620,4],[11695,30,10620,26],[11695,35,10620,31,"parseInterpreterDirective"],[11695,60,10620,26],[11695,62,10620,4],[11696,0,10621,4],[11696,13,10621,9,"parseBlockBody"],[11696,27,10621,4],[11696,28,10621,24,"program"],[11696,35,10621,4],[11696,37,10621,33],[11696,41,10621,4],[11696,43,10621,39],[11696,47,10621,4],[11696,49,10621,45,"types"],[11696,54,10621,50],[11696,55,10621,51,"eof"],[11696,58,10621,4],[11698,0,10623,4],[11698,12,10623,8],[11698,17,10623,13,"inModule"],[11698,25,10623,8],[11698,29,10623,25],[11698,30,10623,26],[11698,35,10623,31,"options"],[11698,42,10623,26],[11698,43,10623,39,"allowUndeclaredExports"],[11698,65,10623,8],[11698,69,10623,65],[11698,74,10623,70,"scope"],[11698,79,10623,65],[11698,80,10623,76,"undefinedExports"],[11698,96,10623,65],[11698,97,10623,93,"size"],[11698,101,10623,65],[11698,104,10623,100],[11698,105,10623,4],[11698,107,10623,103],[11699,0,10624,6],[11699,15,10624,11],[11699,19,10624,15,"_i"],[11699,21,10624,17],[11699,24,10624,20],[11699,25,10624,11],[11699,27,10624,23,"_Array$from"],[11699,38,10624,34],[11699,41,10624,37,"Array"],[11699,46,10624,42],[11699,47,10624,43,"from"],[11699,51,10624,37],[11699,52,10624,48],[11699,57,10624,53,"scope"],[11699,62,10624,48],[11699,63,10624,59,"undefinedExports"],[11699,79,10624,37],[11699,80,10624,6],[11699,82,10624,78,"_i"],[11699,84,10624,80],[11699,87,10624,83,"_Array$from"],[11699,98,10624,94],[11699,99,10624,95,"length"],[11699,105,10624,6],[11699,107,10624,103,"_i"],[11699,109,10624,105],[11699,111,10624,6],[11699,113,10624,109],[11700,0,10624,109],[11700,48,10625,23,"_Array$from"],[11700,59,10625,34],[11700,60,10625,35,"_i"],[11700,62,10625,34],[11700,63,10624,109],[11701,0,10624,109],[11701,16,10625,15,"name"],[11701,20,10624,109],[11703,0,10626,8],[11703,16,10626,14,"pos"],[11703,19,10626,17],[11703,22,10626,20],[11703,27,10626,25,"scope"],[11703,32,10626,20],[11703,33,10626,31,"undefinedExports"],[11703,49,10626,20],[11703,50,10626,48,"get"],[11703,53,10626,20],[11703,54,10626,52,"name"],[11703,58,10626,20],[11703,59,10626,8],[11704,0,10627,8],[11704,17,10627,13,"raise"],[11704,22,10627,8],[11704,23,10627,19,"pos"],[11704,26,10627,8],[11704,41,10627,35,"name"],[11704,45,10627,8],[11705,0,10628,7],[11706,0,10629,5],[11708,0,10631,4,"file"],[11708,8,10631,4,"file"],[11708,12,10631,8],[11708,13,10631,9,"program"],[11708,20,10631,4],[11708,23,10631,19],[11708,28,10631,24,"finishNode"],[11708,38,10631,19],[11708,39,10631,35,"program"],[11708,46,10631,19],[11708,48,10631,44],[11708,57,10631,19],[11708,58,10631,4],[11709,0,10632,4,"file"],[11709,8,10632,4,"file"],[11709,12,10632,8],[11709,13,10632,9,"comments"],[11709,21,10632,4],[11709,24,10632,20],[11709,29,10632,25,"state"],[11709,34,10632,20],[11709,35,10632,31,"comments"],[11709,43,10632,4],[11710,0,10633,4],[11710,12,10633,8],[11710,17,10633,13,"options"],[11710,24,10633,8],[11710,25,10633,21,"tokens"],[11710,31,10633,4],[11710,33,10633,29,"file"],[11710,37,10633,33],[11710,38,10633,34,"tokens"],[11710,44,10633,29],[11710,47,10633,43],[11710,52,10633,48,"state"],[11710,57,10633,43],[11710,58,10633,54,"tokens"],[11710,64,10633,29],[11711,0,10634,4],[11711,15,10634,11],[11711,20,10634,16,"finishNode"],[11711,30,10634,11],[11711,31,10634,27,"file"],[11711,35,10634,11],[11711,37,10634,33],[11711,43,10634,11],[11711,44,10634,4],[11712,0,10635,3],[11715,38,10637,18,"stmt"],[11715,42],[11715,44,10637,24],[11716,0,10638,4],[11716,12,10638,10,"expr"],[11716,16,10638,14],[11716,19,10638,17,"stmt"],[11716,23,10638,21],[11716,24,10638,22,"expression"],[11716,34,10638,4],[11717,0,10639,4],[11717,12,10639,10,"directiveLiteral"],[11717,28,10639,26],[11717,31,10639,29],[11717,36,10639,34,"startNodeAt"],[11717,47,10639,29],[11717,48,10639,46,"expr"],[11717,52,10639,50],[11717,53,10639,51,"start"],[11717,58,10639,29],[11717,60,10639,58,"expr"],[11717,64,10639,62],[11717,65,10639,63,"loc"],[11717,68,10639,58],[11717,69,10639,67,"start"],[11717,74,10639,29],[11717,75,10639,4],[11718,0,10640,4],[11718,12,10640,10,"directive"],[11718,21,10640,19],[11718,24,10640,22],[11718,29,10640,27,"startNodeAt"],[11718,40,10640,22],[11718,41,10640,39,"stmt"],[11718,45,10640,43],[11718,46,10640,44,"start"],[11718,51,10640,22],[11718,53,10640,51,"stmt"],[11718,57,10640,55],[11718,58,10640,56,"loc"],[11718,61,10640,51],[11718,62,10640,60,"start"],[11718,67,10640,22],[11718,68,10640,4],[11719,0,10641,4],[11719,12,10641,10,"raw"],[11719,15,10641,13],[11719,18,10641,16],[11719,23,10641,21,"input"],[11719,28,10641,16],[11719,29,10641,27,"slice"],[11719,34,10641,16],[11719,35,10641,33,"expr"],[11719,39,10641,37],[11719,40,10641,38,"start"],[11719,45,10641,16],[11719,47,10641,45,"expr"],[11719,51,10641,49],[11719,52,10641,50,"end"],[11719,55,10641,16],[11719,56,10641,4],[11720,0,10642,4],[11720,12,10642,10,"val"],[11720,15,10642,13],[11720,18,10642,16,"directiveLiteral"],[11720,34,10642,32],[11720,35,10642,33,"value"],[11720,40,10642,16],[11720,43,10642,41,"raw"],[11720,46,10642,44],[11720,47,10642,45,"slice"],[11720,52,10642,41],[11720,53,10642,51],[11720,54,10642,41],[11720,56,10642,54],[11720,57,10642,55],[11720,58,10642,41],[11720,59,10642,4],[11721,0,10643,4],[11721,13,10643,9,"addExtra"],[11721,21,10643,4],[11721,22,10643,18,"directiveLiteral"],[11721,38,10643,4],[11721,40,10643,36],[11721,45,10643,4],[11721,47,10643,43,"raw"],[11721,50,10643,4],[11722,0,10644,4],[11722,13,10644,9,"addExtra"],[11722,21,10644,4],[11722,22,10644,18,"directiveLiteral"],[11722,38,10644,4],[11722,40,10644,36],[11722,50,10644,4],[11722,52,10644,48,"val"],[11722,55,10644,4],[11723,0,10645,4,"directive"],[11723,8,10645,4,"directive"],[11723,17,10645,13],[11723,18,10645,14,"value"],[11723,23,10645,4],[11723,26,10645,22],[11723,31,10645,27,"finishNodeAt"],[11723,43,10645,22],[11723,44,10645,40,"directiveLiteral"],[11723,60,10645,22],[11723,62,10645,58],[11723,80,10645,22],[11723,82,10645,78,"expr"],[11723,86,10645,82],[11723,87,10645,83,"end"],[11723,90,10645,22],[11723,92,10645,88,"expr"],[11723,96,10645,92],[11723,97,10645,93,"loc"],[11723,100,10645,88],[11723,101,10645,97,"end"],[11723,104,10645,22],[11723,105,10645,4],[11724,0,10646,4],[11724,15,10646,11],[11724,20,10646,16,"finishNodeAt"],[11724,32,10646,11],[11724,33,10646,29,"directive"],[11724,42,10646,11],[11724,44,10646,40],[11724,55,10646,11],[11724,57,10646,53,"stmt"],[11724,61,10646,57],[11724,62,10646,58,"end"],[11724,65,10646,11],[11724,67,10646,63,"stmt"],[11724,71,10646,67],[11724,72,10646,68,"loc"],[11724,75,10646,63],[11724,76,10646,72,"end"],[11724,79,10646,11],[11724,80,10646,4],[11725,0,10647,3],[11728,50,10649,30],[11729,0,10650,4],[11729,12,10650,8],[11729,13,10650,9],[11729,18,10650,14,"match"],[11729,23,10650,9],[11729,24,10650,20,"types"],[11729,29,10650,25],[11729,30,10650,26,"interpreterDirective"],[11729,50,10650,9],[11729,51,10650,4],[11729,53,10650,49],[11730,0,10651,6],[11730,17,10651,13],[11730,21,10651,6],[11731,0,10652,5],[11733,0,10654,4],[11733,12,10654,10,"node"],[11733,16,10654,14],[11733,19,10654,17],[11733,24,10654,22,"startNode"],[11733,33,10654,17],[11733,35,10654,4],[11734,0,10655,4,"node"],[11734,8,10655,4,"node"],[11734,12,10655,8],[11734,13,10655,9,"value"],[11734,18,10655,4],[11734,21,10655,17],[11734,26,10655,22,"state"],[11734,31,10655,17],[11734,32,10655,28,"value"],[11734,37,10655,4],[11735,0,10656,4],[11735,13,10656,9,"next"],[11735,17,10656,4],[11736,0,10657,4],[11736,15,10657,11],[11736,20,10657,16,"finishNode"],[11736,30,10657,11],[11736,31,10657,27,"node"],[11736,35,10657,11],[11736,37,10657,33],[11736,59,10657,11],[11736,60,10657,4],[11737,0,10658,3],[11740,28,10660,8,"context"],[11740,35],[11740,37,10660,17],[11741,0,10661,4],[11741,12,10661,8],[11741,13,10661,9],[11741,18,10661,14,"isContextual"],[11741,30,10661,9],[11741,31,10661,27],[11741,36,10661,9],[11741,37,10661,4],[11741,39,10661,35],[11742,0,10662,6],[11742,17,10662,13],[11742,22,10662,6],[11743,0,10663,5],[11745,0,10665,4],[11745,12,10665,10,"next"],[11745,16,10665,14],[11745,19,10665,17],[11745,24,10665,22,"nextTokenStart"],[11745,38,10665,17],[11745,40,10665,4],[11746,0,10666,4],[11746,12,10666,10,"nextCh"],[11746,18,10666,16],[11746,21,10666,19],[11746,26,10666,24,"input"],[11746,31,10666,19],[11746,32,10666,30,"charCodeAt"],[11746,42,10666,19],[11746,43,10666,41,"next"],[11746,47,10666,19],[11746,48,10666,4],[11747,0,10667,4],[11747,12,10667,8,"nextCh"],[11747,18,10667,14],[11747,23,10667,19],[11747,25,10667,4],[11747,27,10667,23],[11747,34,10667,30],[11747,38,10667,23],[11748,0,10668,4],[11748,12,10668,8,"context"],[11748,19,10668,4],[11748,21,10668,17],[11748,28,10668,24],[11748,33,10668,17],[11749,0,10669,4],[11749,12,10669,8,"nextCh"],[11749,18,10669,14],[11749,23,10669,19],[11749,26,10669,4],[11749,28,10669,24],[11749,35,10669,31],[11749,39,10669,24],[11751,0,10671,4],[11751,12,10671,8,"isIdentifierStart"],[11751,29,10671,25],[11751,30,10671,26,"nextCh"],[11751,36,10671,25],[11751,37,10671,4],[11751,39,10671,35],[11752,0,10672,6],[11752,14,10672,10,"pos"],[11752,17,10672,13],[11752,20,10672,16,"next"],[11752,24,10672,20],[11752,27,10672,23],[11752,28,10672,6],[11754,0,10674,6],[11754,17,10674,13,"isIdentifierChar"],[11754,33,10674,29],[11754,34,10674,30],[11754,39,10674,35,"input"],[11754,44,10674,30],[11754,45,10674,41,"charCodeAt"],[11754,55,10674,30],[11754,56,10674,52,"pos"],[11754,59,10674,30],[11754,60,10674,29],[11754,61,10674,6],[11754,63,10674,59],[11755,0,10675,8],[11755,14,10675,10,"pos"],[11755,17,10675,8],[11756,0,10676,7],[11758,0,10678,6],[11758,14,10678,12,"ident"],[11758,19,10678,17],[11758,22,10678,20],[11758,27,10678,25,"input"],[11758,32,10678,20],[11758,33,10678,31,"slice"],[11758,38,10678,20],[11758,39,10678,37,"next"],[11758,43,10678,20],[11758,45,10678,43,"pos"],[11758,48,10678,20],[11758,49,10678,6],[11759,0,10679,6],[11759,14,10679,10],[11759,15,10679,11,"keywordRelationalOperator"],[11759,40,10679,36],[11759,41,10679,37,"test"],[11759,45,10679,11],[11759,46,10679,42,"ident"],[11759,51,10679,11],[11759,52,10679,6],[11759,54,10679,50],[11759,61,10679,57],[11759,65,10679,50],[11760,0,10680,5],[11762,0,10682,4],[11762,15,10682,11],[11762,20,10682,4],[11763,0,10683,3],[11766,37,10685,17,"context"],[11766,44],[11766,46,10685,26,"topLevel"],[11766,54],[11766,56,10685,36],[11767,0,10686,4],[11767,12,10686,8],[11767,17,10686,13,"match"],[11767,22,10686,8],[11767,23,10686,19,"types"],[11767,28,10686,24],[11767,29,10686,25,"at"],[11767,31,10686,8],[11767,32,10686,4],[11767,34,10686,30],[11768,0,10687,6],[11768,15,10687,11,"parseDecorators"],[11768,30,10687,6],[11768,31,10687,27],[11768,35,10687,6],[11769,0,10688,5],[11771,0,10690,4],[11771,15,10690,11],[11771,20,10690,16,"parseStatementContent"],[11771,41,10690,11],[11771,42,10690,38,"context"],[11771,49,10690,11],[11771,51,10690,47,"topLevel"],[11771,59,10690,11],[11771,60,10690,4],[11772,0,10691,3],[11775,44,10693,24,"context"],[11775,51],[11775,53,10693,33,"topLevel"],[11775,61],[11775,63,10693,43],[11776,0,10694,4],[11776,12,10694,8,"starttype"],[11776,21,10694,17],[11776,24,10694,20],[11776,29,10694,25,"state"],[11776,34,10694,20],[11776,35,10694,31,"type"],[11776,39,10694,4],[11777,0,10695,4],[11777,12,10695,10,"node"],[11777,16,10695,14],[11777,19,10695,17],[11777,24,10695,22,"startNode"],[11777,33,10695,17],[11777,35,10695,4],[11778,0,10696,4],[11778,12,10696,8,"kind"],[11778,16,10696,4],[11780,0,10698,4],[11780,12,10698,8],[11780,17,10698,13,"isLet"],[11780,22,10698,8],[11780,23,10698,19,"context"],[11780,30,10698,8],[11780,31,10698,4],[11780,33,10698,29],[11781,0,10699,6,"starttype"],[11781,10,10699,6,"starttype"],[11781,19,10699,15],[11781,22,10699,18,"types"],[11781,27,10699,23],[11781,28,10699,24,"_var"],[11781,32,10699,6],[11782,0,10700,6,"kind"],[11782,10,10700,6,"kind"],[11782,14,10700,10],[11782,17,10700,13],[11782,22,10700,6],[11783,0,10701,5],[11785,0,10703,4],[11785,16,10703,12,"starttype"],[11785,25,10703,4],[11786,0,10704,6],[11786,15,10704,11,"types"],[11786,20,10704,16],[11786,21,10704,17,"_break"],[11786,27,10704,6],[11787,0,10705,6],[11787,15,10705,11,"types"],[11787,20,10705,16],[11787,21,10705,17,"_continue"],[11787,30,10705,6],[11788,0,10706,8],[11788,19,10706,15],[11788,24,10706,20,"parseBreakContinueStatement"],[11788,51,10706,15],[11788,52,10706,48,"node"],[11788,56,10706,15],[11788,58,10706,54,"starttype"],[11788,67,10706,63],[11788,68,10706,64,"keyword"],[11788,75,10706,15],[11788,76,10706,8],[11790,0,10708,6],[11790,15,10708,11,"types"],[11790,20,10708,16],[11790,21,10708,17,"_debugger"],[11790,30,10708,6],[11791,0,10709,8],[11791,19,10709,15],[11791,24,10709,20,"parseDebuggerStatement"],[11791,46,10709,15],[11791,47,10709,43,"node"],[11791,51,10709,15],[11791,52,10709,8],[11793,0,10711,6],[11793,15,10711,11,"types"],[11793,20,10711,16],[11793,21,10711,17,"_do"],[11793,24,10711,6],[11794,0,10712,8],[11794,19,10712,15],[11794,24,10712,20,"parseDoStatement"],[11794,40,10712,15],[11794,41,10712,37,"node"],[11794,45,10712,15],[11794,46,10712,8],[11796,0,10714,6],[11796,15,10714,11,"types"],[11796,20,10714,16],[11796,21,10714,17,"_for"],[11796,25,10714,6],[11797,0,10715,8],[11797,19,10715,15],[11797,24,10715,20,"parseForStatement"],[11797,41,10715,15],[11797,42,10715,38,"node"],[11797,46,10715,15],[11797,47,10715,8],[11799,0,10717,6],[11799,15,10717,11,"types"],[11799,20,10717,16],[11799,21,10717,17,"_function"],[11799,30,10717,6],[11800,0,10718,8],[11800,16,10718,12],[11800,21,10718,17,"lookaheadCharCode"],[11800,38,10718,12],[11800,45,10718,41],[11800,47,10718,8],[11800,49,10718,45],[11802,0,10720,8],[11802,16,10720,12,"context"],[11802,23,10720,8],[11802,25,10720,21],[11803,0,10721,10],[11803,18,10721,14],[11803,23,10721,19,"state"],[11803,28,10721,14],[11803,29,10721,25,"strict"],[11803,35,10721,10],[11803,37,10721,33],[11804,0,10722,12],[11804,21,10722,17,"raise"],[11804,26,10722,12],[11804,27,10722,23],[11804,32,10722,28,"state"],[11804,37,10722,23],[11804,38,10722,34,"start"],[11804,43,10722,12],[11804,45,10722,41],[11804,129,10722,12],[11805,0,10723,11],[11805,15,10721,10],[11805,21,10723,17],[11805,25,10723,21,"context"],[11805,32,10723,28],[11805,37,10723,33],[11805,41,10723,21],[11805,45,10723,41,"context"],[11805,52,10723,48],[11805,57,10723,53],[11805,64,10723,17],[11805,66,10723,62],[11806,0,10724,12],[11806,21,10724,17,"raise"],[11806,26,10724,12],[11806,27,10724,23],[11806,32,10724,28,"state"],[11806,37,10724,23],[11806,38,10724,34,"start"],[11806,43,10724,12],[11806,45,10724,41],[11806,120,10724,116],[11806,171,10724,12],[11807,0,10725,11],[11808,0,10726,9],[11810,0,10728,8],[11810,19,10728,15],[11810,24,10728,20,"parseFunctionStatement"],[11810,46,10728,15],[11810,47,10728,43,"node"],[11810,51,10728,15],[11810,53,10728,49],[11810,58,10728,15],[11810,60,10728,56],[11810,61,10728,57,"context"],[11810,68,10728,15],[11810,69,10728,8],[11812,0,10730,6],[11812,15,10730,11,"types"],[11812,20,10730,16],[11812,21,10730,17,"_class"],[11812,27,10730,6],[11813,0,10731,8],[11813,16,10731,12,"context"],[11813,23,10731,8],[11813,25,10731,21],[11813,30,10731,26,"unexpected"],[11813,40,10731,21],[11814,0,10732,8],[11814,19,10732,15],[11814,24,10732,20,"parseClass"],[11814,34,10732,15],[11814,35,10732,31,"node"],[11814,39,10732,15],[11814,41,10732,37],[11814,45,10732,15],[11814,46,10732,8],[11816,0,10734,6],[11816,15,10734,11,"types"],[11816,20,10734,16],[11816,21,10734,17,"_if"],[11816,24,10734,6],[11817,0,10735,8],[11817,19,10735,15],[11817,24,10735,20,"parseIfStatement"],[11817,40,10735,15],[11817,41,10735,37,"node"],[11817,45,10735,15],[11817,46,10735,8],[11819,0,10737,6],[11819,15,10737,11,"types"],[11819,20,10737,16],[11819,21,10737,17,"_return"],[11819,28,10737,6],[11820,0,10738,8],[11820,19,10738,15],[11820,24,10738,20,"parseReturnStatement"],[11820,44,10738,15],[11820,45,10738,41,"node"],[11820,49,10738,15],[11820,50,10738,8],[11822,0,10740,6],[11822,15,10740,11,"types"],[11822,20,10740,16],[11822,21,10740,17,"_switch"],[11822,28,10740,6],[11823,0,10741,8],[11823,19,10741,15],[11823,24,10741,20,"parseSwitchStatement"],[11823,44,10741,15],[11823,45,10741,41,"node"],[11823,49,10741,15],[11823,50,10741,8],[11825,0,10743,6],[11825,15,10743,11,"types"],[11825,20,10743,16],[11825,21,10743,17,"_throw"],[11825,27,10743,6],[11826,0,10744,8],[11826,19,10744,15],[11826,24,10744,20,"parseThrowStatement"],[11826,43,10744,15],[11826,44,10744,40,"node"],[11826,48,10744,15],[11826,49,10744,8],[11828,0,10746,6],[11828,15,10746,11,"types"],[11828,20,10746,16],[11828,21,10746,17,"_try"],[11828,25,10746,6],[11829,0,10747,8],[11829,19,10747,15],[11829,24,10747,20,"parseTryStatement"],[11829,41,10747,15],[11829,42,10747,38,"node"],[11829,46,10747,15],[11829,47,10747,8],[11831,0,10749,6],[11831,15,10749,11,"types"],[11831,20,10749,16],[11831,21,10749,17,"_const"],[11831,27,10749,6],[11832,0,10750,6],[11832,15,10750,11,"types"],[11832,20,10750,16],[11832,21,10750,17,"_var"],[11832,25,10750,6],[11833,0,10751,8,"kind"],[11833,12,10751,8,"kind"],[11833,16,10751,12],[11833,19,10751,15,"kind"],[11833,23,10751,19],[11833,27,10751,23],[11833,32,10751,28,"state"],[11833,37,10751,23],[11833,38,10751,34,"value"],[11833,43,10751,8],[11835,0,10753,8],[11835,16,10753,12,"context"],[11835,23,10753,19],[11835,27,10753,23,"kind"],[11835,31,10753,27],[11835,36,10753,32],[11835,41,10753,8],[11835,43,10753,39],[11836,0,10754,10],[11836,19,10754,15,"raise"],[11836,24,10754,10],[11836,25,10754,21],[11836,30,10754,26,"state"],[11836,35,10754,21],[11836,36,10754,32,"start"],[11836,41,10754,10],[11836,43,10754,39],[11836,108,10754,10],[11837,0,10755,9],[11839,0,10757,8],[11839,19,10757,15],[11839,24,10757,20,"parseVarStatement"],[11839,41,10757,15],[11839,42,10757,38,"node"],[11839,46,10757,15],[11839,48,10757,44,"kind"],[11839,52,10757,15],[11839,53,10757,8],[11841,0,10759,6],[11841,15,10759,11,"types"],[11841,20,10759,16],[11841,21,10759,17,"_while"],[11841,27,10759,6],[11842,0,10760,8],[11842,19,10760,15],[11842,24,10760,20,"parseWhileStatement"],[11842,43,10760,15],[11842,44,10760,40,"node"],[11842,48,10760,15],[11842,49,10760,8],[11844,0,10762,6],[11844,15,10762,11,"types"],[11844,20,10762,16],[11844,21,10762,17,"_with"],[11844,26,10762,6],[11845,0,10763,8],[11845,19,10763,15],[11845,24,10763,20,"parseWithStatement"],[11845,42,10763,15],[11845,43,10763,39,"node"],[11845,47,10763,15],[11845,48,10763,8],[11847,0,10765,6],[11847,15,10765,11,"types"],[11847,20,10765,16],[11847,21,10765,17,"braceL"],[11847,27,10765,6],[11848,0,10766,8],[11848,19,10766,15],[11848,24,10766,20,"parseBlock"],[11848,34,10766,15],[11848,36,10766,8],[11850,0,10768,6],[11850,15,10768,11,"types"],[11850,20,10768,16],[11850,21,10768,17,"semi"],[11850,25,10768,6],[11851,0,10769,8],[11851,19,10769,15],[11851,24,10769,20,"parseEmptyStatement"],[11851,43,10769,15],[11851,44,10769,40,"node"],[11851,48,10769,15],[11851,49,10769,8],[11853,0,10771,6],[11853,15,10771,11,"types"],[11853,20,10771,16],[11853,21,10771,17,"_export"],[11853,28,10771,6],[11854,0,10772,6],[11854,15,10772,11,"types"],[11854,20,10772,16],[11854,21,10772,17,"_import"],[11854,28,10772,6],[11855,0,10773,8],[11856,0,10774,10],[11856,18,10774,16,"nextTokenCharCode"],[11856,35,10774,33],[11856,38,10774,36],[11856,43,10774,41,"lookaheadCharCode"],[11856,60,10774,36],[11856,62,10774,10],[11858,0,10776,10],[11858,18,10776,14,"nextTokenCharCode"],[11858,35,10776,31],[11858,40,10776,36],[11858,42,10776,14],[11858,46,10776,42,"nextTokenCharCode"],[11858,63,10776,59],[11858,68,10776,64],[11858,70,10776,10],[11858,72,10776,68],[11859,0,10777,12],[11860,0,10778,11],[11862,0,10780,10],[11862,18,10780,14],[11862,19,10780,15],[11862,24,10780,20,"options"],[11862,31,10780,15],[11862,32,10780,28,"allowImportExportEverywhere"],[11862,59,10780,14],[11862,63,10780,59],[11862,64,10780,60,"topLevel"],[11862,72,10780,10],[11862,74,10780,70],[11863,0,10781,12],[11863,21,10781,17,"raise"],[11863,26,10781,12],[11863,27,10781,23],[11863,32,10781,28,"state"],[11863,37,10781,23],[11863,38,10781,34,"start"],[11863,43,10781,12],[11863,45,10781,41],[11863,101,10781,12],[11864,0,10782,11],[11866,0,10784,10],[11866,19,10784,15,"next"],[11866,23,10784,10],[11867,0,10785,10],[11867,18,10785,14,"result"],[11867,24,10785,10],[11869,0,10787,10],[11869,18,10787,14,"starttype"],[11869,27,10787,23],[11869,32,10787,28,"types"],[11869,37,10787,33],[11869,38,10787,34,"_import"],[11869,45,10787,10],[11869,47,10787,43],[11870,0,10788,12,"result"],[11870,16,10788,12,"result"],[11870,22,10788,18],[11870,25,10788,21],[11870,30,10788,26,"parseImport"],[11870,41,10788,21],[11870,42,10788,38,"node"],[11870,46,10788,21],[11870,47,10788,12],[11872,0,10790,12],[11872,20,10790,16,"result"],[11872,26,10790,22],[11872,27,10790,23,"type"],[11872,31,10790,16],[11872,36,10790,32],[11872,55,10790,16],[11872,60,10790,56],[11872,61,10790,57,"result"],[11872,67,10790,63],[11872,68,10790,64,"importKind"],[11872,78,10790,56],[11872,82,10790,78,"result"],[11872,88,10790,84],[11872,89,10790,85,"importKind"],[11872,99,10790,78],[11872,104,10790,100],[11872,111,10790,16],[11872,112,10790,12],[11872,114,10790,110],[11873,0,10791,14],[11873,23,10791,19,"sawUnambiguousESM"],[11873,40,10791,14],[11873,43,10791,39],[11873,47,10791,14],[11874,0,10792,13],[11875,0,10793,11],[11875,15,10787,10],[11875,21,10793,17],[11876,0,10794,12,"result"],[11876,16,10794,12,"result"],[11876,22,10794,18],[11876,25,10794,21],[11876,30,10794,26,"parseExport"],[11876,41,10794,21],[11876,42,10794,38,"node"],[11876,46,10794,21],[11876,47,10794,12],[11878,0,10796,12],[11878,20,10796,16,"result"],[11878,26,10796,22],[11878,27,10796,23,"type"],[11878,31,10796,16],[11878,36,10796,32],[11878,60,10796,16],[11878,65,10796,61],[11878,66,10796,62,"result"],[11878,72,10796,68],[11878,73,10796,69,"exportKind"],[11878,83,10796,61],[11878,87,10796,83,"result"],[11878,93,10796,89],[11878,94,10796,90,"exportKind"],[11878,104,10796,83],[11878,109,10796,105],[11878,116,10796,16],[11878,121,10796,117,"result"],[11878,127,10796,123],[11878,128,10796,124,"type"],[11878,132,10796,117],[11878,137,10796,133],[11878,159,10796,117],[11878,164,10796,160],[11878,165,10796,161,"result"],[11878,171,10796,167],[11878,172,10796,168,"exportKind"],[11878,182,10796,160],[11878,186,10796,182,"result"],[11878,192,10796,188],[11878,193,10796,189,"exportKind"],[11878,203,10796,182],[11878,208,10796,204],[11878,215,10796,117],[11878,216,10796,16],[11878,220,10796,216,"result"],[11878,226,10796,222],[11878,227,10796,223,"type"],[11878,231,10796,216],[11878,236,10796,232],[11878,262,10796,12],[11878,264,10796,260],[11879,0,10797,14],[11879,23,10797,19,"sawUnambiguousESM"],[11879,40,10797,14],[11879,43,10797,39],[11879,47,10797,14],[11880,0,10798,13],[11881,0,10799,11],[11883,0,10801,10],[11883,19,10801,15,"assertModuleNodeAllowed"],[11883,42,10801,10],[11883,43,10801,39,"node"],[11883,47,10801,10],[11884,0,10802,10],[11884,21,10802,17,"result"],[11884,27,10802,10],[11885,0,10803,9],[11887,0,10805,6],[11888,0,10806,8],[11889,0,10807,10],[11889,18,10807,14],[11889,23,10807,19,"isAsyncFunction"],[11889,38,10807,14],[11889,40,10807,10],[11889,42,10807,38],[11890,0,10808,12],[11890,20,10808,16,"context"],[11890,27,10808,12],[11890,29,10808,25],[11891,0,10809,14],[11891,23,10809,19,"raise"],[11891,28,10809,14],[11891,29,10809,25],[11891,34,10809,30,"state"],[11891,39,10809,25],[11891,40,10809,36,"start"],[11891,45,10809,14],[11891,47,10809,43],[11891,120,10809,14],[11892,0,10810,13],[11894,0,10812,12],[11894,21,10812,17,"next"],[11894,25,10812,12],[11895,0,10813,12],[11895,23,10813,19],[11895,28,10813,24,"parseFunctionStatement"],[11895,50,10813,19],[11895,51,10813,47,"node"],[11895,55,10813,19],[11895,57,10813,53],[11895,61,10813,19],[11895,63,10813,59],[11895,64,10813,60,"context"],[11895,71,10813,19],[11895,72,10813,12],[11896,0,10814,11],[11897,0,10815,9],[11898,0,10703,4],[11900,0,10818,4],[11900,12,10818,10,"maybeName"],[11900,21,10818,19],[11900,24,10818,22],[11900,29,10818,27,"state"],[11900,34,10818,22],[11900,35,10818,33,"value"],[11900,40,10818,4],[11901,0,10819,4],[11901,12,10819,10,"expr"],[11901,16,10819,14],[11901,19,10819,17],[11901,24,10819,22,"parseExpression"],[11901,39,10819,17],[11901,41,10819,4],[11903,0,10821,4],[11903,12,10821,8,"starttype"],[11903,21,10821,17],[11903,26,10821,22,"types"],[11903,31,10821,27],[11903,32,10821,28,"name"],[11903,36,10821,8],[11903,40,10821,36,"expr"],[11903,44,10821,40],[11903,45,10821,41,"type"],[11903,49,10821,36],[11903,54,10821,50],[11903,66,10821,8],[11903,70,10821,66],[11903,75,10821,71,"eat"],[11903,78,10821,66],[11903,79,10821,75,"types"],[11903,84,10821,80],[11903,85,10821,81,"colon"],[11903,90,10821,66],[11903,91,10821,4],[11903,93,10821,89],[11904,0,10822,6],[11904,17,10822,13],[11904,22,10822,18,"parseLabeledStatement"],[11904,43,10822,13],[11904,44,10822,40,"node"],[11904,48,10822,13],[11904,50,10822,46,"maybeName"],[11904,59,10822,13],[11904,61,10822,57,"expr"],[11904,65,10822,13],[11904,67,10822,63,"context"],[11904,74,10822,13],[11904,75,10822,6],[11905,0,10823,5],[11905,9,10821,4],[11905,15,10823,11],[11906,0,10824,6],[11906,17,10824,13],[11906,22,10824,18,"parseExpressionStatement"],[11906,46,10824,13],[11906,47,10824,43,"node"],[11906,51,10824,13],[11906,53,10824,49,"expr"],[11906,57,10824,13],[11906,58,10824,6],[11907,0,10825,5],[11908,0,10826,3],[11911,46,10828,26,"node"],[11911,50],[11911,52,10828,32],[11912,0,10829,4],[11912,12,10829,8],[11912,13,10829,9],[11912,18,10829,14,"options"],[11912,25,10829,9],[11912,26,10829,22,"allowImportExportEverywhere"],[11912,53,10829,8],[11912,57,10829,53],[11912,58,10829,54],[11912,63,10829,59,"inModule"],[11912,71,10829,4],[11912,73,10829,69],[11913,0,10830,6],[11913,15,10830,11,"raise"],[11913,20,10830,6],[11913,21,10830,17,"node"],[11913,25,10830,21],[11913,26,10830,22,"start"],[11913,31,10830,6],[11913,104,10830,98],[11914,0,10831,8,"code"],[11914,12,10831,8,"code"],[11914,16,10831,12],[11914,18,10831,14],[11915,0,10830,98],[11915,11,10830,6],[11916,0,10833,5],[11917,0,10834,3],[11920,37,10836,17,"node"],[11920,41],[11920,43,10836,23],[11921,0,10837,4],[11921,12,10837,10,"decorators"],[11921,22,10837,20],[11921,25,10837,23],[11921,30,10837,28,"state"],[11921,35,10837,23],[11921,36,10837,34,"decoratorStack"],[11921,50,10837,23],[11921,51,10837,49],[11921,56,10837,54,"state"],[11921,61,10837,49],[11921,62,10837,60,"decoratorStack"],[11921,76,10837,49],[11921,77,10837,75,"length"],[11921,83,10837,49],[11921,86,10837,84],[11921,87,10837,23],[11921,88,10837,4],[11923,0,10839,4],[11923,12,10839,8,"decorators"],[11923,22,10839,18],[11923,23,10839,19,"length"],[11923,29,10839,4],[11923,31,10839,27],[11924,0,10840,6,"node"],[11924,10,10840,6,"node"],[11924,14,10840,10],[11924,15,10840,11,"decorators"],[11924,25,10840,6],[11924,28,10840,24,"decorators"],[11924,38,10840,6],[11925,0,10841,6],[11925,15,10841,11,"resetStartLocationFromNode"],[11925,41,10841,6],[11925,42,10841,38,"node"],[11925,46,10841,6],[11925,48,10841,44,"decorators"],[11925,58,10841,54],[11925,59,10841,55],[11925,60,10841,54],[11925,61,10841,6],[11926,0,10842,6],[11926,15,10842,11,"state"],[11926,20,10842,6],[11926,21,10842,17,"decoratorStack"],[11926,35,10842,6],[11926,36,10842,32],[11926,41,10842,37,"state"],[11926,46,10842,32],[11926,47,10842,43,"decoratorStack"],[11926,61,10842,32],[11926,62,10842,58,"length"],[11926,68,10842,32],[11926,71,10842,67],[11926,72,10842,6],[11926,76,10842,72],[11926,78,10842,6],[11927,0,10843,5],[11928,0,10844,3],[11931,48,10846,28],[11932,0,10847,4],[11932,15,10847,11],[11932,20,10847,16,"match"],[11932,25,10847,11],[11932,26,10847,22,"types"],[11932,31,10847,27],[11932,32,10847,28,"_class"],[11932,38,10847,11],[11932,39,10847,4],[11933,0,10848,3],[11936,38,10850,18,"allowExport"],[11936,49],[11936,51,10850,31],[11937,0,10851,4],[11937,12,10851,10,"currentContextDecorators"],[11937,36,10851,34],[11937,39,10851,37],[11937,44,10851,42,"state"],[11937,49,10851,37],[11937,50,10851,48,"decoratorStack"],[11937,64,10851,37],[11937,65,10851,63],[11937,70,10851,68,"state"],[11937,75,10851,63],[11937,76,10851,74,"decoratorStack"],[11937,90,10851,63],[11937,91,10851,89,"length"],[11937,97,10851,63],[11937,100,10851,98],[11937,101,10851,37],[11937,102,10851,4],[11939,0,10853,4],[11939,15,10853,11],[11939,20,10853,16,"match"],[11939,25,10853,11],[11939,26,10853,22,"types"],[11939,31,10853,27],[11939,32,10853,28,"at"],[11939,34,10853,11],[11939,35,10853,4],[11939,37,10853,33],[11940,0,10854,6],[11940,14,10854,12,"decorator"],[11940,23,10854,21],[11940,26,10854,24],[11940,31,10854,29,"parseDecorator"],[11940,45,10854,24],[11940,47,10854,6],[11941,0,10855,6,"currentContextDecorators"],[11941,10,10855,6,"currentContextDecorators"],[11941,34,10855,30],[11941,35,10855,31,"push"],[11941,39,10855,6],[11941,40,10855,36,"decorator"],[11941,49,10855,6],[11942,0,10856,5],[11944,0,10858,4],[11944,12,10858,8],[11944,17,10858,13,"match"],[11944,22,10858,8],[11944,23,10858,19,"types"],[11944,28,10858,24],[11944,29,10858,25,"_export"],[11944,36,10858,8],[11944,37,10858,4],[11944,39,10858,35],[11945,0,10859,6],[11945,14,10859,10],[11945,15,10859,11,"allowExport"],[11945,26,10859,6],[11945,28,10859,24],[11946,0,10860,8],[11946,17,10860,13,"unexpected"],[11946,27,10860,8],[11947,0,10861,7],[11949,0,10863,6],[11949,14,10863,10],[11949,19,10863,15,"hasPlugin"],[11949,28,10863,10],[11949,29,10863,25],[11949,41,10863,10],[11949,46,10863,42],[11949,47,10863,43],[11949,52,10863,48,"getPluginOption"],[11949,67,10863,43],[11949,68,10863,64],[11949,80,10863,43],[11949,82,10863,78],[11949,106,10863,43],[11949,107,10863,6],[11949,109,10863,105],[11950,0,10864,8],[11950,17,10864,13,"raise"],[11950,22,10864,8],[11950,23,10864,19],[11950,28,10864,24,"state"],[11950,33,10864,19],[11950,34,10864,30,"start"],[11950,39,10864,8],[11950,41,10864,37],[11950,119,10864,115],[11950,160,10864,8],[11951,0,10865,7],[11952,0,10866,5],[11952,9,10858,4],[11952,15,10866,11],[11952,19,10866,15],[11952,20,10866,16],[11952,25,10866,21,"canHaveLeadingDecorator"],[11952,48,10866,16],[11952,50,10866,11],[11952,52,10866,48],[11953,0,10867,6],[11953,16,10867,12],[11953,21,10867,17,"raise"],[11953,26,10867,12],[11953,27,10867,23],[11953,32,10867,28,"state"],[11953,37,10867,23],[11953,38,10867,34,"start"],[11953,43,10867,12],[11953,45,10867,41],[11953,105,10867,12],[11953,106,10867,6],[11954,0,10868,5],[11955,0,10869,3],[11958,39,10871,19],[11959,0,10872,4],[11959,13,10872,9,"expectOnePlugin"],[11959,28,10872,4],[11959,29,10872,25],[11959,30,10872,26],[11959,49,10872,25],[11959,51,10872,47],[11959,63,10872,25],[11959,64,10872,4],[11960,0,10873,4],[11960,12,10873,10,"node"],[11960,16,10873,14],[11960,19,10873,17],[11960,24,10873,22,"startNode"],[11960,33,10873,17],[11960,35,10873,4],[11961,0,10874,4],[11961,13,10874,9,"next"],[11961,17,10874,4],[11963,0,10876,4],[11963,12,10876,8],[11963,17,10876,13,"hasPlugin"],[11963,26,10876,8],[11963,27,10876,23],[11963,39,10876,8],[11963,40,10876,4],[11963,42,10876,38],[11964,0,10877,6],[11964,15,10877,11,"state"],[11964,20,10877,6],[11964,21,10877,17,"decoratorStack"],[11964,35,10877,6],[11964,36,10877,32,"push"],[11964,40,10877,6],[11964,41,10877,37],[11964,43,10877,6],[11965,0,10878,6],[11965,14,10878,12,"startPos"],[11965,22,10878,20],[11965,25,10878,23],[11965,30,10878,28,"state"],[11965,35,10878,23],[11965,36,10878,34,"start"],[11965,41,10878,6],[11966,0,10879,6],[11966,14,10879,12,"startLoc"],[11966,22,10879,20],[11966,25,10879,23],[11966,30,10879,28,"state"],[11966,35,10879,23],[11966,36,10879,34,"startLoc"],[11966,44,10879,6],[11967,0,10880,6],[11967,14,10880,10,"expr"],[11967,18,10880,6],[11969,0,10882,6],[11969,14,10882,10],[11969,19,10882,15,"eat"],[11969,22,10882,10],[11969,23,10882,19,"types"],[11969,28,10882,24],[11969,29,10882,25,"parenL"],[11969,35,10882,10],[11969,36,10882,6],[11969,38,10882,34],[11970,0,10883,8,"expr"],[11970,12,10883,8,"expr"],[11970,16,10883,12],[11970,19,10883,15],[11970,24,10883,20,"parseExpression"],[11970,39,10883,15],[11970,41,10883,8],[11971,0,10884,8],[11971,17,10884,13,"expect"],[11971,23,10884,8],[11971,24,10884,20,"types"],[11971,29,10884,25],[11971,30,10884,26,"parenR"],[11971,36,10884,8],[11972,0,10885,7],[11972,11,10882,6],[11972,17,10885,13],[11973,0,10886,8,"expr"],[11973,12,10886,8,"expr"],[11973,16,10886,12],[11973,19,10886,15],[11973,24,10886,20,"parseIdentifier"],[11973,39,10886,15],[11973,40,10886,36],[11973,45,10886,15],[11973,46,10886,8],[11975,0,10888,8],[11975,19,10888,15],[11975,24,10888,20,"eat"],[11975,27,10888,15],[11975,28,10888,24,"types"],[11975,33,10888,29],[11975,34,10888,30,"dot"],[11975,37,10888,15],[11975,38,10888,8],[11975,40,10888,36],[11976,0,10889,10],[11976,18,10889,16,"node"],[11976,25,10889,20],[11976,28,10889,23],[11976,33,10889,28,"startNodeAt"],[11976,44,10889,23],[11976,45,10889,40,"startPos"],[11976,53,10889,23],[11976,55,10889,50,"startLoc"],[11976,63,10889,23],[11976,64,10889,10],[11978,0,10890,10,"node"],[11978,14,10890,10,"node"],[11978,21,10890,14],[11978,22,10890,15,"object"],[11978,28,10890,10],[11978,31,10890,24,"expr"],[11978,35,10890,10],[11979,0,10891,10,"node"],[11979,14,10891,10,"node"],[11979,21,10891,14],[11979,22,10891,15,"property"],[11979,30,10891,10],[11979,33,10891,26],[11979,38,10891,31,"parseIdentifier"],[11979,53,10891,26],[11979,54,10891,47],[11979,58,10891,26],[11979,59,10891,10],[11980,0,10892,10,"node"],[11980,14,10892,10,"node"],[11980,21,10892,14],[11980,22,10892,15,"computed"],[11980,30,10892,10],[11980,33,10892,26],[11980,38,10892,10],[11981,0,10893,10,"expr"],[11981,14,10893,10,"expr"],[11981,18,10893,14],[11981,21,10893,17],[11981,26,10893,22,"finishNode"],[11981,36,10893,17],[11981,37,10893,33,"node"],[11981,44,10893,17],[11981,46,10893,39],[11981,64,10893,17],[11981,65,10893,10],[11982,0,10894,9],[11983,0,10895,7],[11985,0,10897,6,"node"],[11985,10,10897,6,"node"],[11985,14,10897,10],[11985,15,10897,11,"expression"],[11985,25,10897,6],[11985,28,10897,24],[11985,33,10897,29,"parseMaybeDecoratorArguments"],[11985,61,10897,24],[11985,62,10897,58,"expr"],[11985,66,10897,24],[11985,67,10897,6],[11986,0,10898,6],[11986,15,10898,11,"state"],[11986,20,10898,6],[11986,21,10898,17,"decoratorStack"],[11986,35,10898,6],[11986,36,10898,32,"pop"],[11986,39,10898,6],[11987,0,10899,5],[11987,9,10876,4],[11987,15,10899,11],[11988,0,10900,6,"node"],[11988,10,10900,6,"node"],[11988,14,10900,10],[11988,15,10900,11,"expression"],[11988,25,10900,6],[11988,28,10900,24],[11988,33,10900,29,"parseExprSubscripts"],[11988,52,10900,24],[11988,54,10900,6],[11989,0,10901,5],[11991,0,10903,4],[11991,15,10903,11],[11991,20,10903,16,"finishNode"],[11991,30,10903,11],[11991,31,10903,27,"node"],[11991,35,10903,11],[11991,37,10903,33],[11991,48,10903,11],[11991,49,10903,4],[11992,0,10904,3],[11995,51,10906,31,"expr"],[11995,55],[11995,57,10906,37],[11996,0,10907,4],[11996,12,10907,8],[11996,17,10907,13,"eat"],[11996,20,10907,8],[11996,21,10907,17,"types"],[11996,26,10907,22],[11996,27,10907,23,"parenL"],[11996,33,10907,8],[11996,34,10907,4],[11996,36,10907,32],[11997,0,10908,6],[11997,14,10908,12,"node"],[11997,18,10908,16],[11997,21,10908,19],[11997,26,10908,24,"startNodeAtNode"],[11997,41,10908,19],[11997,42,10908,40,"expr"],[11997,46,10908,19],[11997,47,10908,6],[11998,0,10909,6,"node"],[11998,10,10909,6,"node"],[11998,14,10909,10],[11998,15,10909,11,"callee"],[11998,21,10909,6],[11998,24,10909,20,"expr"],[11998,28,10909,6],[11999,0,10910,6,"node"],[11999,10,10910,6,"node"],[11999,14,10910,10],[11999,15,10910,11,"arguments"],[11999,24,10910,6],[11999,27,10910,23],[11999,32,10910,28,"parseCallExpressionArguments"],[11999,60,10910,23],[11999,61,10910,57,"types"],[11999,66,10910,62],[11999,67,10910,63,"parenR"],[11999,73,10910,23],[11999,75,10910,71],[11999,80,10910,23],[11999,81,10910,6],[12000,0,10911,6],[12000,15,10911,11,"toReferencedList"],[12000,31,10911,6],[12000,32,10911,28,"node"],[12000,36,10911,32],[12000,37,10911,33,"arguments"],[12000,46,10911,6],[12001,0,10912,6],[12001,17,10912,13],[12001,22,10912,18,"finishNode"],[12001,32,10912,13],[12001,33,10912,29,"node"],[12001,37,10912,13],[12001,39,10912,35],[12001,55,10912,13],[12001,56,10912,6],[12002,0,10913,5],[12004,0,10915,4],[12004,15,10915,11,"expr"],[12004,19,10915,4],[12005,0,10916,3],[12008,50,10918,30,"node"],[12008,54],[12008,56,10918,36,"keyword"],[12008,63],[12008,65,10918,45],[12009,0,10919,4],[12009,12,10919,10,"isBreak"],[12009,19,10919,17],[12009,22,10919,20,"keyword"],[12009,29,10919,27],[12009,34,10919,32],[12009,41,10919,4],[12010,0,10920,4],[12010,13,10920,9,"next"],[12010,17,10920,4],[12012,0,10922,4],[12012,12,10922,8],[12012,17,10922,13,"isLineTerminator"],[12012,33,10922,8],[12012,35,10922,4],[12012,37,10922,33],[12013,0,10923,6,"node"],[12013,10,10923,6,"node"],[12013,14,10923,10],[12013,15,10923,11,"label"],[12013,20,10923,6],[12013,23,10923,19],[12013,27,10923,6],[12014,0,10924,5],[12014,9,10922,4],[12014,15,10924,11],[12015,0,10925,6,"node"],[12015,10,10925,6,"node"],[12015,14,10925,10],[12015,15,10925,11,"label"],[12015,20,10925,6],[12015,23,10925,19],[12015,28,10925,24,"parseIdentifier"],[12015,43,10925,19],[12015,45,10925,6],[12016,0,10926,6],[12016,15,10926,11,"semicolon"],[12016,24,10926,6],[12017,0,10927,5],[12019,0,10929,4],[12019,13,10929,9,"verifyBreakContinue"],[12019,32,10929,4],[12019,33,10929,29,"node"],[12019,37,10929,4],[12019,39,10929,35,"keyword"],[12019,46,10929,4],[12020,0,10930,4],[12020,15,10930,11],[12020,20,10930,16,"finishNode"],[12020,30,10930,11],[12020,31,10930,27,"node"],[12020,35,10930,11],[12020,37,10930,33,"isBreak"],[12020,44,10930,40],[12020,47,10930,43],[12020,63,10930,40],[12020,66,10930,62],[12020,85,10930,11],[12020,86,10930,4],[12021,0,10931,3],[12024,42,10933,22,"node"],[12024,46],[12024,48,10933,28,"keyword"],[12024,55],[12024,57,10933,37],[12025,0,10934,4],[12025,12,10934,10,"isBreak"],[12025,19,10934,17],[12025,22,10934,20,"keyword"],[12025,29,10934,27],[12025,34,10934,32],[12025,41,10934,4],[12026,0,10935,4],[12026,12,10935,8,"i"],[12026,13,10935,4],[12028,0,10937,4],[12028,13,10937,9,"i"],[12028,14,10937,10],[12028,17,10937,13],[12028,18,10937,4],[12028,20,10937,16,"i"],[12028,21,10937,17],[12028,24,10937,20],[12028,29,10937,25,"state"],[12028,34,10937,20],[12028,35,10937,31,"labels"],[12028,41,10937,20],[12028,42,10937,38,"length"],[12028,48,10937,4],[12028,50,10937,46],[12028,52,10937,48,"i"],[12028,53,10937,4],[12028,55,10937,51],[12029,0,10938,6],[12029,14,10938,12,"lab"],[12029,17,10938,15],[12029,20,10938,18],[12029,25,10938,23,"state"],[12029,30,10938,18],[12029,31,10938,29,"labels"],[12029,37,10938,18],[12029,38,10938,36,"i"],[12029,39,10938,18],[12029,40,10938,6],[12031,0,10940,6],[12031,14,10940,10,"node"],[12031,18,10940,14],[12031,19,10940,15,"label"],[12031,24,10940,10],[12031,28,10940,24],[12031,32,10940,10],[12031,36,10940,32,"lab"],[12031,39,10940,35],[12031,40,10940,36,"name"],[12031,44,10940,32],[12031,49,10940,45,"node"],[12031,53,10940,49],[12031,54,10940,50,"label"],[12031,59,10940,45],[12031,60,10940,56,"name"],[12031,64,10940,6],[12031,66,10940,62],[12032,0,10941,8],[12032,16,10941,12,"lab"],[12032,19,10941,15],[12032,20,10941,16,"kind"],[12032,24,10941,12],[12032,28,10941,24],[12032,32,10941,12],[12032,37,10941,33,"isBreak"],[12032,44,10941,40],[12032,48,10941,44,"lab"],[12032,51,10941,47],[12032,52,10941,48,"kind"],[12032,56,10941,44],[12032,61,10941,57],[12032,67,10941,12],[12032,68,10941,8],[12032,70,10941,66],[12033,0,10942,8],[12033,16,10942,12,"node"],[12033,20,10942,16],[12033,21,10942,17,"label"],[12033,26,10942,12],[12033,30,10942,26,"isBreak"],[12033,37,10942,8],[12033,39,10942,35],[12034,0,10943,7],[12035,0,10944,5],[12037,0,10946,4],[12037,12,10946,8,"i"],[12037,13,10946,9],[12037,18,10946,14],[12037,23,10946,19,"state"],[12037,28,10946,14],[12037,29,10946,25,"labels"],[12037,35,10946,14],[12037,36,10946,32,"length"],[12037,42,10946,4],[12037,44,10946,40],[12038,0,10947,6],[12038,15,10947,11,"raise"],[12038,20,10947,6],[12038,21,10947,17,"node"],[12038,25,10947,21],[12038,26,10947,22,"start"],[12038,31,10947,6],[12038,33,10947,29],[12038,50,10947,46,"keyword"],[12038,57,10947,6],[12039,0,10948,5],[12040,0,10949,3],[12043,45,10951,25,"node"],[12043,49],[12043,51,10951,31],[12044,0,10952,4],[12044,13,10952,9,"next"],[12044,17,10952,4],[12045,0,10953,4],[12045,13,10953,9,"semicolon"],[12045,22,10953,4],[12046,0,10954,4],[12046,15,10954,11],[12046,20,10954,16,"finishNode"],[12046,30,10954,11],[12046,31,10954,27,"node"],[12046,35,10954,11],[12046,37,10954,33],[12046,56,10954,11],[12046,57,10954,4],[12047,0,10955,3],[12050,46,10957,26],[12051,0,10958,4],[12051,13,10958,9,"expect"],[12051,19,10958,4],[12051,20,10958,16,"types"],[12051,25,10958,21],[12051,26,10958,22,"parenL"],[12051,32,10958,4],[12052,0,10959,4],[12052,12,10959,10,"val"],[12052,15,10959,13],[12052,18,10959,16],[12052,23,10959,21,"parseExpression"],[12052,38,10959,16],[12052,40,10959,4],[12053,0,10960,4],[12053,13,10960,9,"expect"],[12053,19,10960,4],[12053,20,10960,16,"types"],[12053,25,10960,21],[12053,26,10960,22,"parenR"],[12053,32,10960,4],[12054,0,10961,4],[12054,15,10961,11,"val"],[12054,18,10961,4],[12055,0,10962,3],[12058,39,10964,19,"node"],[12058,43],[12058,45,10964,25],[12059,0,10964,25],[12061,0,10965,4],[12061,13,10965,9,"next"],[12061,17,10965,4],[12062,0,10966,4],[12062,13,10966,9,"state"],[12062,18,10966,4],[12062,19,10966,15,"labels"],[12062,25,10966,4],[12062,26,10966,22,"push"],[12062,30,10966,4],[12062,31,10966,27,"loopLabel"],[12062,40,10966,4],[12063,0,10967,4,"node"],[12063,8,10967,4,"node"],[12063,12,10967,8],[12063,13,10967,9,"body"],[12063,17,10967,4],[12063,20,10967,16],[12063,25,10967,21,"withTopicForbiddingContext"],[12063,51,10967,16],[12063,52,10967,48],[12064,0,10967,48],[12064,17,10967,54],[12064,24,10967,58],[12064,25,10967,59,"parseStatement"],[12064,39,10967,54],[12064,40,10967,74],[12064,44,10967,54],[12064,45,10967,48],[12065,0,10967,48],[12065,9,10967,16],[12065,10,10967,4],[12066,0,10968,4],[12066,13,10968,9,"state"],[12066,18,10968,4],[12066,19,10968,15,"labels"],[12066,25,10968,4],[12066,26,10968,22,"pop"],[12066,29,10968,4],[12067,0,10969,4],[12067,13,10969,9,"expect"],[12067,19,10969,4],[12067,20,10969,16,"types"],[12067,25,10969,21],[12067,26,10969,22,"_while"],[12067,32,10969,4],[12068,0,10970,4,"node"],[12068,8,10970,4,"node"],[12068,12,10970,8],[12068,13,10970,9,"test"],[12068,17,10970,4],[12068,20,10970,16],[12068,25,10970,21,"parseHeaderExpression"],[12068,46,10970,16],[12068,48,10970,4],[12069,0,10971,4],[12069,13,10971,9,"eat"],[12069,16,10971,4],[12069,17,10971,13,"types"],[12069,22,10971,18],[12069,23,10971,19,"semi"],[12069,27,10971,4],[12070,0,10972,4],[12070,15,10972,11],[12070,20,10972,16,"finishNode"],[12070,30,10972,11],[12070,31,10972,27,"node"],[12070,35,10972,11],[12070,37,10972,33],[12070,55,10972,11],[12070,56,10972,4],[12071,0,10973,3],[12074,40,10975,20,"node"],[12074,44],[12074,46,10975,26],[12075,0,10976,4],[12075,13,10976,9,"next"],[12075,17,10976,4],[12076,0,10977,4],[12076,13,10977,9,"state"],[12076,18,10977,4],[12076,19,10977,15,"labels"],[12076,25,10977,4],[12076,26,10977,22,"push"],[12076,30,10977,4],[12076,31,10977,27,"loopLabel"],[12076,40,10977,4],[12077,0,10978,4],[12077,12,10978,8,"awaitAt"],[12077,19,10978,15],[12077,22,10978,18],[12077,23,10978,19],[12077,24,10978,4],[12079,0,10980,4],[12079,12,10980,8],[12079,17,10980,13,"isAwaitAllowed"],[12079,31,10980,8],[12079,37,10980,33],[12079,42,10980,38,"eatContextual"],[12079,55,10980,33],[12079,56,10980,52],[12079,63,10980,33],[12079,64,10980,4],[12079,66,10980,62],[12080,0,10981,6,"awaitAt"],[12080,10,10981,6,"awaitAt"],[12080,17,10981,13],[12080,20,10981,16],[12080,25,10981,21,"state"],[12080,30,10981,16],[12080,31,10981,27,"lastTokStart"],[12080,43,10981,6],[12081,0,10982,5],[12083,0,10984,4],[12083,13,10984,9,"scope"],[12083,18,10984,4],[12083,19,10984,15,"enter"],[12083,24,10984,4],[12083,25,10984,21,"SCOPE_OTHER"],[12083,36,10984,4],[12084,0,10985,4],[12084,13,10985,9,"expect"],[12084,19,10985,4],[12084,20,10985,16,"types"],[12084,25,10985,21],[12084,26,10985,22,"parenL"],[12084,32,10985,4],[12086,0,10987,4],[12086,12,10987,8],[12086,17,10987,13,"match"],[12086,22,10987,8],[12086,23,10987,19,"types"],[12086,28,10987,24],[12086,29,10987,25,"semi"],[12086,33,10987,8],[12086,34,10987,4],[12086,36,10987,32],[12087,0,10988,6],[12087,14,10988,10,"awaitAt"],[12087,21,10988,17],[12087,24,10988,20],[12087,25,10988,21],[12087,26,10988,6],[12087,28,10988,24],[12088,0,10989,8],[12088,17,10989,13,"unexpected"],[12088,27,10989,8],[12088,28,10989,24,"awaitAt"],[12088,35,10989,8],[12089,0,10990,7],[12091,0,10992,6],[12091,17,10992,13],[12091,22,10992,18,"parseFor"],[12091,30,10992,13],[12091,31,10992,27,"node"],[12091,35,10992,13],[12091,37,10992,33],[12091,41,10992,13],[12091,42,10992,6],[12092,0,10993,5],[12094,0,10995,4],[12094,12,10995,10,"isLet"],[12094,17,10995,15],[12094,20,10995,18],[12094,25,10995,23,"isLet"],[12094,30,10995,18],[12094,32,10995,4],[12096,0,10997,4],[12096,12,10997,8],[12096,17,10997,13,"match"],[12096,22,10997,8],[12096,23,10997,19,"types"],[12096,28,10997,24],[12096,29,10997,25,"_var"],[12096,33,10997,8],[12096,38,10997,34],[12096,43,10997,39,"match"],[12096,48,10997,34],[12096,49,10997,45,"types"],[12096,54,10997,50],[12096,55,10997,51,"_const"],[12096,61,10997,34],[12096,62,10997,8],[12096,66,10997,62,"isLet"],[12096,71,10997,4],[12096,73,10997,69],[12097,0,10998,6],[12097,14,10998,12,"init"],[12097,19,10998,16],[12097,22,10998,19],[12097,27,10998,24,"startNode"],[12097,36,10998,19],[12097,38,10998,6],[12099,0,10999,6],[12099,14,10999,12,"kind"],[12099,18,10999,16],[12099,21,10999,19,"isLet"],[12099,26,10999,24],[12099,29,10999,27],[12099,34,10999,24],[12099,37,10999,35],[12099,42,10999,40,"state"],[12099,47,10999,35],[12099,48,10999,46,"value"],[12099,53,10999,6],[12100,0,11000,6],[12100,15,11000,11,"next"],[12100,19,11000,6],[12101,0,11001,6],[12101,15,11001,11,"parseVar"],[12101,23,11001,6],[12101,24,11001,20,"init"],[12101,29,11001,6],[12101,31,11001,26],[12101,35,11001,6],[12101,37,11001,32,"kind"],[12101,41,11001,6],[12102,0,11002,6],[12102,15,11002,11,"finishNode"],[12102,25,11002,6],[12102,26,11002,22,"init"],[12102,31,11002,6],[12102,33,11002,28],[12102,54,11002,6],[12104,0,11004,6],[12104,14,11004,10],[12104,15,11004,11],[12104,20,11004,16,"match"],[12104,25,11004,11],[12104,26,11004,22,"types"],[12104,31,11004,27],[12104,32,11004,28,"_in"],[12104,35,11004,11],[12104,40,11004,36],[12104,45,11004,41,"isContextual"],[12104,57,11004,36],[12104,58,11004,54],[12104,62,11004,36],[12104,63,11004,10],[12104,68,11004,64,"init"],[12104,73,11004,68],[12104,74,11004,69,"declarations"],[12104,86,11004,64],[12104,87,11004,82,"length"],[12104,93,11004,64],[12104,98,11004,93],[12104,99,11004,6],[12104,101,11004,96],[12105,0,11005,8],[12105,19,11005,15],[12105,24,11005,20,"parseForIn"],[12105,34,11005,15],[12105,35,11005,31,"node"],[12105,39,11005,15],[12105,41,11005,37,"init"],[12105,46,11005,15],[12105,48,11005,43,"awaitAt"],[12105,55,11005,15],[12105,56,11005,8],[12106,0,11006,7],[12108,0,11008,6],[12108,14,11008,10,"awaitAt"],[12108,21,11008,17],[12108,24,11008,20],[12108,25,11008,21],[12108,26,11008,6],[12108,28,11008,24],[12109,0,11009,8],[12109,17,11009,13,"unexpected"],[12109,27,11009,8],[12109,28,11009,24,"awaitAt"],[12109,35,11009,8],[12110,0,11010,7],[12112,0,11012,6],[12112,17,11012,13],[12112,22,11012,18,"parseFor"],[12112,30,11012,13],[12112,31,11012,27,"node"],[12112,35,11012,13],[12112,37,11012,33,"init"],[12112,42,11012,13],[12112,43,11012,6],[12113,0,11013,5],[12115,0,11015,4],[12115,12,11015,10,"refShorthandDefaultPos"],[12115,34,11015,32],[12115,37,11015,35],[12116,0,11016,6,"start"],[12116,10,11016,6,"start"],[12116,15,11016,11],[12116,17,11016,13],[12117,0,11015,35],[12117,9,11015,4],[12118,0,11018,4],[12118,12,11018,10,"init"],[12118,16,11018,14],[12118,19,11018,17],[12118,24,11018,22,"parseExpression"],[12118,39,11018,17],[12118,40,11018,38],[12118,44,11018,17],[12118,46,11018,44,"refShorthandDefaultPos"],[12118,68,11018,17],[12118,69,11018,4],[12120,0,11020,4],[12120,12,11020,8],[12120,17,11020,13,"match"],[12120,22,11020,8],[12120,23,11020,19,"types"],[12120,28,11020,24],[12120,29,11020,25,"_in"],[12120,32,11020,8],[12120,37,11020,33],[12120,42,11020,38,"isContextual"],[12120,54,11020,33],[12120,55,11020,51],[12120,59,11020,33],[12120,60,11020,4],[12120,62,11020,58],[12121,0,11021,6],[12121,14,11021,12,"description"],[12121,25,11021,23],[12121,28,11021,26],[12121,33,11021,31,"isContextual"],[12121,45,11021,26],[12121,46,11021,44],[12121,50,11021,26],[12121,54,11021,52],[12121,72,11021,26],[12121,75,11021,73],[12121,93,11021,6],[12122,0,11022,6],[12122,15,11022,11,"toAssignable"],[12122,27,11022,6],[12122,28,11022,24,"init"],[12122,32,11022,6],[12122,34,11022,30,"undefined"],[12122,43,11022,6],[12122,45,11022,41,"description"],[12122,56,11022,6],[12123,0,11023,6],[12123,15,11023,11,"checkLVal"],[12123,24,11023,6],[12123,25,11023,21,"init"],[12123,29,11023,6],[12123,31,11023,27,"undefined"],[12123,40,11023,6],[12123,42,11023,38,"undefined"],[12123,51,11023,6],[12123,53,11023,49,"description"],[12123,64,11023,6],[12124,0,11024,6],[12124,17,11024,13],[12124,22,11024,18,"parseForIn"],[12124,32,11024,13],[12124,33,11024,29,"node"],[12124,37,11024,13],[12124,39,11024,35,"init"],[12124,43,11024,13],[12124,45,11024,41,"awaitAt"],[12124,52,11024,13],[12124,53,11024,6],[12125,0,11025,5],[12125,9,11020,4],[12125,15,11025,11],[12125,19,11025,15,"refShorthandDefaultPos"],[12125,41,11025,37],[12125,42,11025,38,"start"],[12125,47,11025,11],[12125,49,11025,45],[12126,0,11026,6],[12126,15,11026,11,"unexpected"],[12126,25,11026,6],[12126,26,11026,22,"refShorthandDefaultPos"],[12126,48,11026,44],[12126,49,11026,45,"start"],[12126,54,11026,6],[12127,0,11027,5],[12129,0,11029,4],[12129,12,11029,8,"awaitAt"],[12129,19,11029,15],[12129,22,11029,18],[12129,23,11029,19],[12129,24,11029,4],[12129,26,11029,22],[12130,0,11030,6],[12130,15,11030,11,"unexpected"],[12130,25,11030,6],[12130,26,11030,22,"awaitAt"],[12130,33,11030,6],[12131,0,11031,5],[12133,0,11033,4],[12133,15,11033,11],[12133,20,11033,16,"parseFor"],[12133,28,11033,11],[12133,29,11033,25,"node"],[12133,33,11033,11],[12133,35,11033,31,"init"],[12133,39,11033,11],[12133,40,11033,4],[12134,0,11034,3],[12137,45,11036,25,"node"],[12137,49],[12137,51,11036,31,"isAsync"],[12137,58],[12137,60,11036,40,"declarationPosition"],[12137,79],[12137,81,11036,61],[12138,0,11037,4],[12138,13,11037,9,"next"],[12138,17,11037,4],[12139,0,11038,4],[12139,15,11038,11],[12139,20,11038,16,"parseFunction"],[12139,33,11038,11],[12139,34,11038,30,"node"],[12139,38,11038,11],[12139,40,11038,36,"FUNC_STATEMENT"],[12139,54,11038,50],[12139,58,11038,54,"declarationPosition"],[12139,77,11038,73],[12139,80,11038,76],[12139,81,11038,73],[12139,84,11038,80,"FUNC_HANGING_STATEMENT"],[12139,106,11038,50],[12139,107,11038,11],[12139,109,11038,105,"isAsync"],[12139,116,11038,11],[12139,117,11038,4],[12140,0,11039,3],[12143,39,11041,19,"node"],[12143,43],[12143,45,11041,25],[12144,0,11042,4],[12144,13,11042,9,"next"],[12144,17,11042,4],[12145,0,11043,4,"node"],[12145,8,11043,4,"node"],[12145,12,11043,8],[12145,13,11043,9,"test"],[12145,17,11043,4],[12145,20,11043,16],[12145,25,11043,21,"parseHeaderExpression"],[12145,46,11043,16],[12145,48,11043,4],[12146,0,11044,4,"node"],[12146,8,11044,4,"node"],[12146,12,11044,8],[12146,13,11044,9,"consequent"],[12146,23,11044,4],[12146,26,11044,22],[12146,31,11044,27,"parseStatement"],[12146,45,11044,22],[12146,46,11044,42],[12146,50,11044,22],[12146,51,11044,4],[12147,0,11045,4,"node"],[12147,8,11045,4,"node"],[12147,12,11045,8],[12147,13,11045,9,"alternate"],[12147,22,11045,4],[12147,25,11045,21],[12147,30,11045,26,"eat"],[12147,33,11045,21],[12147,34,11045,30,"types"],[12147,39,11045,35],[12147,40,11045,36,"_else"],[12147,45,11045,21],[12147,49,11045,45],[12147,54,11045,50,"parseStatement"],[12147,68,11045,45],[12147,69,11045,65],[12147,73,11045,45],[12147,74,11045,21],[12147,77,11045,73],[12147,81,11045,4],[12148,0,11046,4],[12148,15,11046,11],[12148,20,11046,16,"finishNode"],[12148,30,11046,11],[12148,31,11046,27,"node"],[12148,35,11046,11],[12148,37,11046,33],[12148,50,11046,11],[12148,51,11046,4],[12149,0,11047,3],[12152,43,11049,23,"node"],[12152,47],[12152,49,11049,29],[12153,0,11050,4],[12153,12,11050,8],[12153,13,11050,9],[12153,18,11050,14,"scope"],[12153,23,11050,9],[12153,24,11050,20,"inFunction"],[12153,34,11050,8],[12153,38,11050,34],[12153,39,11050,35],[12153,44,11050,40,"options"],[12153,51,11050,35],[12153,52,11050,48,"allowReturnOutsideFunction"],[12153,78,11050,4],[12153,80,11050,76],[12154,0,11051,6],[12154,15,11051,11,"raise"],[12154,20,11051,6],[12154,21,11051,17],[12154,26,11051,22,"state"],[12154,31,11051,17],[12154,32,11051,28,"start"],[12154,37,11051,6],[12154,39,11051,35],[12154,69,11051,6],[12155,0,11052,5],[12157,0,11054,4],[12157,13,11054,9,"next"],[12157,17,11054,4],[12159,0,11056,4],[12159,12,11056,8],[12159,17,11056,13,"isLineTerminator"],[12159,33,11056,8],[12159,35,11056,4],[12159,37,11056,33],[12160,0,11057,6,"node"],[12160,10,11057,6,"node"],[12160,14,11057,10],[12160,15,11057,11,"argument"],[12160,23,11057,6],[12160,26,11057,22],[12160,30,11057,6],[12161,0,11058,5],[12161,9,11056,4],[12161,15,11058,11],[12162,0,11059,6,"node"],[12162,10,11059,6,"node"],[12162,14,11059,10],[12162,15,11059,11,"argument"],[12162,23,11059,6],[12162,26,11059,22],[12162,31,11059,27,"parseExpression"],[12162,46,11059,22],[12162,48,11059,6],[12163,0,11060,6],[12163,15,11060,11,"semicolon"],[12163,24,11060,6],[12164,0,11061,5],[12166,0,11063,4],[12166,15,11063,11],[12166,20,11063,16,"finishNode"],[12166,30,11063,11],[12166,31,11063,27,"node"],[12166,35,11063,11],[12166,37,11063,33],[12166,54,11063,11],[12166,55,11063,4],[12167,0,11064,3],[12170,43,11066,23,"node"],[12170,47],[12170,49,11066,29],[12171,0,11067,4],[12171,13,11067,9,"next"],[12171,17,11067,4],[12172,0,11068,4,"node"],[12172,8,11068,4,"node"],[12172,12,11068,8],[12172,13,11068,9,"discriminant"],[12172,25,11068,4],[12172,28,11068,24],[12172,33,11068,29,"parseHeaderExpression"],[12172,54,11068,24],[12172,56,11068,4],[12173,0,11069,4],[12173,12,11069,10,"cases"],[12173,17,11069,15],[12173,20,11069,18,"node"],[12173,24,11069,22],[12173,25,11069,23,"cases"],[12173,30,11069,18],[12173,33,11069,31],[12173,35,11069,4],[12174,0,11070,4],[12174,13,11070,9,"expect"],[12174,19,11070,4],[12174,20,11070,16,"types"],[12174,25,11070,21],[12174,26,11070,22,"braceL"],[12174,32,11070,4],[12175,0,11071,4],[12175,13,11071,9,"state"],[12175,18,11071,4],[12175,19,11071,15,"labels"],[12175,25,11071,4],[12175,26,11071,22,"push"],[12175,30,11071,4],[12175,31,11071,27,"switchLabel"],[12175,42,11071,4],[12176,0,11072,4],[12176,13,11072,9,"scope"],[12176,18,11072,4],[12176,19,11072,15,"enter"],[12176,24,11072,4],[12176,25,11072,21,"SCOPE_OTHER"],[12176,36,11072,4],[12177,0,11073,4],[12177,12,11073,8,"cur"],[12177,15,11073,4],[12179,0,11075,4],[12179,13,11075,9],[12179,17,11075,13,"sawDefault"],[12179,27,11075,4],[12179,29,11075,25],[12179,30,11075,26],[12179,35,11075,31,"match"],[12179,40,11075,26],[12179,41,11075,37,"types"],[12179,46,11075,42],[12179,47,11075,43,"braceR"],[12179,53,11075,26],[12179,54,11075,4],[12179,57,11075,53],[12180,0,11076,6],[12180,14,11076,10],[12180,19,11076,15,"match"],[12180,24,11076,10],[12180,25,11076,21,"types"],[12180,30,11076,26],[12180,31,11076,27,"_case"],[12180,36,11076,10],[12180,41,11076,37],[12180,46,11076,42,"match"],[12180,51,11076,37],[12180,52,11076,48,"types"],[12180,57,11076,53],[12180,58,11076,54,"_default"],[12180,66,11076,37],[12180,67,11076,6],[12180,69,11076,65],[12181,0,11077,8],[12181,16,11077,14,"isCase"],[12181,22,11077,20],[12181,25,11077,23],[12181,30,11077,28,"match"],[12181,35,11077,23],[12181,36,11077,34,"types"],[12181,41,11077,39],[12181,42,11077,40,"_case"],[12181,47,11077,23],[12181,48,11077,8],[12182,0,11078,8],[12182,16,11078,12,"cur"],[12182,19,11078,8],[12182,21,11078,17],[12182,26,11078,22,"finishNode"],[12182,36,11078,17],[12182,37,11078,33,"cur"],[12182,40,11078,17],[12182,42,11078,38],[12182,54,11078,17],[12183,0,11079,8,"cases"],[12183,12,11079,8,"cases"],[12183,17,11079,13],[12183,18,11079,14,"push"],[12183,22,11079,8],[12183,23,11079,19,"cur"],[12183,26,11079,22],[12183,29,11079,25],[12183,34,11079,30,"startNode"],[12183,43,11079,25],[12183,45,11079,8],[12184,0,11080,8,"cur"],[12184,12,11080,8,"cur"],[12184,15,11080,11],[12184,16,11080,12,"consequent"],[12184,26,11080,8],[12184,29,11080,25],[12184,31,11080,8],[12185,0,11081,8],[12185,17,11081,13,"next"],[12185,21,11081,8],[12187,0,11083,8],[12187,16,11083,12,"isCase"],[12187,22,11083,8],[12187,24,11083,20],[12188,0,11084,10,"cur"],[12188,14,11084,10,"cur"],[12188,17,11084,13],[12188,18,11084,14,"test"],[12188,22,11084,10],[12188,25,11084,21],[12188,30,11084,26,"parseExpression"],[12188,45,11084,21],[12188,47,11084,10],[12189,0,11085,9],[12189,13,11083,8],[12189,19,11085,15],[12190,0,11086,10],[12190,18,11086,14,"sawDefault"],[12190,28,11086,10],[12190,30,11086,26],[12191,0,11087,12],[12191,21,11087,17,"raise"],[12191,26,11087,12],[12191,27,11087,23],[12191,32,11087,28,"state"],[12191,37,11087,23],[12191,38,11087,34,"lastTokStart"],[12191,50,11087,12],[12191,52,11087,48],[12191,78,11087,12],[12192,0,11088,11],[12194,0,11090,10,"sawDefault"],[12194,14,11090,10,"sawDefault"],[12194,24,11090,20],[12194,27,11090,23],[12194,31,11090,10],[12195,0,11091,10,"cur"],[12195,14,11091,10,"cur"],[12195,17,11091,13],[12195,18,11091,14,"test"],[12195,22,11091,10],[12195,25,11091,21],[12195,29,11091,10],[12196,0,11092,9],[12198,0,11094,8],[12198,17,11094,13,"expect"],[12198,23,11094,8],[12198,24,11094,20,"types"],[12198,29,11094,25],[12198,30,11094,26,"colon"],[12198,35,11094,8],[12199,0,11095,7],[12199,11,11076,6],[12199,17,11095,13],[12200,0,11096,8],[12200,16,11096,12,"cur"],[12200,19,11096,8],[12200,21,11096,17],[12201,0,11097,10,"cur"],[12201,14,11097,10,"cur"],[12201,17,11097,13],[12201,18,11097,14,"consequent"],[12201,28,11097,10],[12201,29,11097,25,"push"],[12201,33,11097,10],[12201,34,11097,30],[12201,39,11097,35,"parseStatement"],[12201,53,11097,30],[12201,54,11097,50],[12201,58,11097,30],[12201,59,11097,10],[12202,0,11098,9],[12202,13,11096,8],[12202,19,11098,15],[12203,0,11099,10],[12203,19,11099,15,"unexpected"],[12203,29,11099,10],[12204,0,11100,9],[12205,0,11101,7],[12206,0,11102,5],[12208,0,11104,4],[12208,13,11104,9,"scope"],[12208,18,11104,4],[12208,19,11104,15,"exit"],[12208,23,11104,4],[12209,0,11105,4],[12209,12,11105,8,"cur"],[12209,15,11105,4],[12209,17,11105,13],[12209,22,11105,18,"finishNode"],[12209,32,11105,13],[12209,33,11105,29,"cur"],[12209,36,11105,13],[12209,38,11105,34],[12209,50,11105,13],[12210,0,11106,4],[12210,13,11106,9,"next"],[12210,17,11106,4],[12211,0,11107,4],[12211,13,11107,9,"state"],[12211,18,11107,4],[12211,19,11107,15,"labels"],[12211,25,11107,4],[12211,26,11107,22,"pop"],[12211,29,11107,4],[12212,0,11108,4],[12212,15,11108,11],[12212,20,11108,16,"finishNode"],[12212,30,11108,11],[12212,31,11108,27,"node"],[12212,35,11108,11],[12212,37,11108,33],[12212,54,11108,11],[12212,55,11108,4],[12213,0,11109,3],[12216,42,11111,22,"node"],[12216,46],[12216,48,11111,28],[12217,0,11112,4],[12217,13,11112,9,"next"],[12217,17,11112,4],[12219,0,11114,4],[12219,12,11114,8,"lineBreak"],[12219,21,11114,17],[12219,22,11114,18,"test"],[12219,26,11114,8],[12219,27,11114,23],[12219,32,11114,28,"input"],[12219,37,11114,23],[12219,38,11114,34,"slice"],[12219,43,11114,23],[12219,44,11114,40],[12219,49,11114,45,"state"],[12219,54,11114,40],[12219,55,11114,51,"lastTokEnd"],[12219,65,11114,23],[12219,67,11114,63],[12219,72,11114,68,"state"],[12219,77,11114,63],[12219,78,11114,74,"start"],[12219,83,11114,23],[12219,84,11114,8],[12219,85,11114,4],[12219,87,11114,83],[12220,0,11115,6],[12220,15,11115,11,"raise"],[12220,20,11115,6],[12220,21,11115,17],[12220,26,11115,22,"state"],[12220,31,11115,17],[12220,32,11115,28,"lastTokEnd"],[12220,42,11115,6],[12220,44,11115,40],[12220,73,11115,6],[12221,0,11116,5],[12223,0,11118,4,"node"],[12223,8,11118,4,"node"],[12223,12,11118,8],[12223,13,11118,9,"argument"],[12223,21,11118,4],[12223,24,11118,20],[12223,29,11118,25,"parseExpression"],[12223,44,11118,20],[12223,46,11118,4],[12224,0,11119,4],[12224,13,11119,9,"semicolon"],[12224,22,11119,4],[12225,0,11120,4],[12225,15,11120,11],[12225,20,11120,16,"finishNode"],[12225,30,11120,11],[12225,31,11120,27,"node"],[12225,35,11120,11],[12225,37,11120,33],[12225,53,11120,11],[12225,54,11120,4],[12226,0,11121,3],[12229,40,11123,20,"node"],[12229,44],[12229,46,11123,26],[12230,0,11123,26],[12232,0,11124,4],[12232,13,11124,9,"next"],[12232,17,11124,4],[12233,0,11125,4,"node"],[12233,8,11125,4,"node"],[12233,12,11125,8],[12233,13,11125,9,"block"],[12233,18,11125,4],[12233,21,11125,17],[12233,26,11125,22,"parseBlock"],[12233,36,11125,17],[12233,38,11125,4],[12234,0,11126,4,"node"],[12234,8,11126,4,"node"],[12234,12,11126,8],[12234,13,11126,9,"handler"],[12234,20,11126,4],[12234,23,11126,19],[12234,27,11126,4],[12236,0,11128,4],[12236,12,11128,8],[12236,17,11128,13,"match"],[12236,22,11128,8],[12236,23,11128,19,"types"],[12236,28,11128,24],[12236,29,11128,25,"_catch"],[12236,35,11128,8],[12236,36,11128,4],[12236,38,11128,34],[12237,0,11129,6],[12237,14,11129,12,"clause"],[12237,20,11129,18],[12237,23,11129,21],[12237,28,11129,26,"startNode"],[12237,37,11129,21],[12237,39,11129,6],[12238,0,11130,6],[12238,15,11130,11,"next"],[12238,19,11130,6],[12240,0,11132,6],[12240,14,11132,10],[12240,19,11132,15,"match"],[12240,24,11132,10],[12240,25,11132,21,"types"],[12240,30,11132,26],[12240,31,11132,27,"parenL"],[12240,37,11132,10],[12240,38,11132,6],[12240,40,11132,36],[12241,0,11133,8],[12241,17,11133,13,"expect"],[12241,23,11133,8],[12241,24,11133,20,"types"],[12241,29,11133,25],[12241,30,11133,26,"parenL"],[12241,36,11133,8],[12242,0,11134,8,"clause"],[12242,12,11134,8,"clause"],[12242,18,11134,14],[12242,19,11134,15,"param"],[12242,24,11134,8],[12242,27,11134,23],[12242,32,11134,28,"parseBindingAtom"],[12242,48,11134,23],[12242,50,11134,8],[12243,0,11135,8],[12243,16,11135,14,"simple"],[12243,22,11135,20],[12243,25,11135,23,"clause"],[12243,31,11135,29],[12243,32,11135,30,"param"],[12243,37,11135,23],[12243,38,11135,36,"type"],[12243,42,11135,23],[12243,47,11135,45],[12243,59,11135,8],[12244,0,11136,8],[12244,17,11136,13,"scope"],[12244,22,11136,8],[12244,23,11136,19,"enter"],[12244,28,11136,8],[12244,29,11136,25,"simple"],[12244,35,11136,31],[12244,38,11136,34,"SCOPE_SIMPLE_CATCH"],[12244,56,11136,31],[12244,59,11136,55],[12244,60,11136,8],[12245,0,11137,8],[12245,17,11137,13,"checkLVal"],[12245,26,11137,8],[12245,27,11137,23,"clause"],[12245,33,11137,29],[12245,34,11137,30,"param"],[12245,39,11137,8],[12245,41,11137,37,"BIND_LEXICAL"],[12245,53,11137,8],[12245,55,11137,51],[12245,59,11137,8],[12245,61,11137,57],[12245,75,11137,8],[12246,0,11138,8],[12246,17,11138,13,"expect"],[12246,23,11138,8],[12246,24,11138,20,"types"],[12246,29,11138,25],[12246,30,11138,26,"parenR"],[12246,36,11138,8],[12247,0,11139,7],[12247,11,11132,6],[12247,17,11139,13],[12248,0,11140,8,"clause"],[12248,12,11140,8,"clause"],[12248,18,11140,14],[12248,19,11140,15,"param"],[12248,24,11140,8],[12248,27,11140,23],[12248,31,11140,8],[12249,0,11141,8],[12249,17,11141,13,"scope"],[12249,22,11141,8],[12249,23,11141,19,"enter"],[12249,28,11141,8],[12249,29,11141,25,"SCOPE_OTHER"],[12249,40,11141,8],[12250,0,11142,7],[12252,0,11144,6,"clause"],[12252,10,11144,6,"clause"],[12252,16,11144,12],[12252,17,11144,13,"body"],[12252,21,11144,6],[12252,24,11144,20],[12252,29,11144,25,"withTopicForbiddingContext"],[12252,55,11144,20],[12252,56,11144,52],[12253,0,11144,52],[12253,19,11144,58],[12253,26,11144,62],[12253,27,11144,63,"parseBlock"],[12253,37,11144,58],[12253,38,11144,74],[12253,43,11144,58],[12253,45,11144,81],[12253,50,11144,58],[12253,51,11144,52],[12254,0,11144,52],[12254,11,11144,20],[12254,12,11144,6],[12255,0,11145,6],[12255,15,11145,11,"scope"],[12255,20,11145,6],[12255,21,11145,17,"exit"],[12255,25,11145,6],[12256,0,11146,6,"node"],[12256,10,11146,6,"node"],[12256,14,11146,10],[12256,15,11146,11,"handler"],[12256,22,11146,6],[12256,25,11146,21],[12256,30,11146,26,"finishNode"],[12256,40,11146,21],[12256,41,11146,37,"clause"],[12256,47,11146,21],[12256,49,11146,45],[12256,62,11146,21],[12256,63,11146,6],[12257,0,11147,5],[12259,0,11149,4,"node"],[12259,8,11149,4,"node"],[12259,12,11149,8],[12259,13,11149,9,"finalizer"],[12259,22,11149,4],[12259,25,11149,21],[12259,30,11149,26,"eat"],[12259,33,11149,21],[12259,34,11149,30,"types"],[12259,39,11149,35],[12259,40,11149,36,"_finally"],[12259,48,11149,21],[12259,52,11149,48],[12259,57,11149,53,"parseBlock"],[12259,67,11149,48],[12259,69,11149,21],[12259,72,11149,68],[12259,76,11149,4],[12261,0,11151,4],[12261,12,11151,8],[12261,13,11151,9,"node"],[12261,17,11151,13],[12261,18,11151,14,"handler"],[12261,25,11151,8],[12261,29,11151,25],[12261,30,11151,26,"node"],[12261,34,11151,30],[12261,35,11151,31,"finalizer"],[12261,44,11151,4],[12261,46,11151,42],[12262,0,11152,6],[12262,15,11152,11,"raise"],[12262,20,11152,6],[12262,21,11152,17,"node"],[12262,25,11152,21],[12262,26,11152,22,"start"],[12262,31,11152,6],[12262,33,11152,29],[12262,66,11152,6],[12263,0,11153,5],[12265,0,11155,4],[12265,15,11155,11],[12265,20,11155,16,"finishNode"],[12265,30,11155,11],[12265,31,11155,27,"node"],[12265,35,11155,11],[12265,37,11155,33],[12265,51,11155,11],[12265,52,11155,4],[12266,0,11156,3],[12269,40,11158,20,"node"],[12269,44],[12269,46,11158,26,"kind"],[12269,50],[12269,52,11158,32],[12270,0,11159,4],[12270,13,11159,9,"next"],[12270,17,11159,4],[12271,0,11160,4],[12271,13,11160,9,"parseVar"],[12271,21,11160,4],[12271,22,11160,18,"node"],[12271,26,11160,4],[12271,28,11160,24],[12271,33,11160,4],[12271,35,11160,31,"kind"],[12271,39,11160,4],[12272,0,11161,4],[12272,13,11161,9,"semicolon"],[12272,22,11161,4],[12273,0,11162,4],[12273,15,11162,11],[12273,20,11162,16,"finishNode"],[12273,30,11162,11],[12273,31,11162,27,"node"],[12273,35,11162,11],[12273,37,11162,33],[12273,58,11162,11],[12273,59,11162,4],[12274,0,11163,3],[12277,42,11165,22,"node"],[12277,46],[12277,48,11165,28],[12278,0,11165,28],[12280,0,11166,4],[12280,13,11166,9,"next"],[12280,17,11166,4],[12281,0,11167,4,"node"],[12281,8,11167,4,"node"],[12281,12,11167,8],[12281,13,11167,9,"test"],[12281,17,11167,4],[12281,20,11167,16],[12281,25,11167,21,"parseHeaderExpression"],[12281,46,11167,16],[12281,48,11167,4],[12282,0,11168,4],[12282,13,11168,9,"state"],[12282,18,11168,4],[12282,19,11168,15,"labels"],[12282,25,11168,4],[12282,26,11168,22,"push"],[12282,30,11168,4],[12282,31,11168,27,"loopLabel"],[12282,40,11168,4],[12283,0,11169,4,"node"],[12283,8,11169,4,"node"],[12283,12,11169,8],[12283,13,11169,9,"body"],[12283,17,11169,4],[12283,20,11169,16],[12283,25,11169,21,"withTopicForbiddingContext"],[12283,51,11169,16],[12283,52,11169,48],[12284,0,11169,48],[12284,17,11169,54],[12284,24,11169,58],[12284,25,11169,59,"parseStatement"],[12284,39,11169,54],[12284,40,11169,74],[12284,47,11169,54],[12284,48,11169,48],[12285,0,11169,48],[12285,9,11169,16],[12285,10,11169,4],[12286,0,11170,4],[12286,13,11170,9,"state"],[12286,18,11170,4],[12286,19,11170,15,"labels"],[12286,25,11170,4],[12286,26,11170,22,"pop"],[12286,29,11170,4],[12287,0,11171,4],[12287,15,11171,11],[12287,20,11171,16,"finishNode"],[12287,30,11171,11],[12287,31,11171,27,"node"],[12287,35,11171,11],[12287,37,11171,33],[12287,53,11171,11],[12287,54,11171,4],[12288,0,11172,3],[12291,41,11174,21,"node"],[12291,45],[12291,47,11174,27],[12292,0,11174,27],[12294,0,11175,4],[12294,12,11175,8],[12294,17,11175,13,"state"],[12294,22,11175,8],[12294,23,11175,19,"strict"],[12294,29,11175,4],[12294,31,11175,27],[12295,0,11176,6],[12295,15,11176,11,"raise"],[12295,20,11176,6],[12295,21,11176,17],[12295,26,11176,22,"state"],[12295,31,11176,17],[12295,32,11176,28,"start"],[12295,37,11176,6],[12295,39,11176,35],[12295,62,11176,6],[12296,0,11177,5],[12298,0,11179,4],[12298,13,11179,9,"next"],[12298,17,11179,4],[12299,0,11180,4,"node"],[12299,8,11180,4,"node"],[12299,12,11180,8],[12299,13,11180,9,"object"],[12299,19,11180,4],[12299,22,11180,18],[12299,27,11180,23,"parseHeaderExpression"],[12299,48,11180,18],[12299,50,11180,4],[12300,0,11181,4,"node"],[12300,8,11181,4,"node"],[12300,12,11181,8],[12300,13,11181,9,"body"],[12300,17,11181,4],[12300,20,11181,16],[12300,25,11181,21,"withTopicForbiddingContext"],[12300,51,11181,16],[12300,52,11181,48],[12301,0,11181,48],[12301,17,11181,54],[12301,24,11181,58],[12301,25,11181,59,"parseStatement"],[12301,39,11181,54],[12301,40,11181,74],[12301,46,11181,54],[12301,47,11181,48],[12302,0,11181,48],[12302,9,11181,16],[12302,10,11181,4],[12303,0,11182,4],[12303,15,11182,11],[12303,20,11182,16,"finishNode"],[12303,30,11182,11],[12303,31,11182,27,"node"],[12303,35,11182,11],[12303,37,11182,33],[12303,52,11182,11],[12303,53,11182,4],[12304,0,11183,3],[12307,42,11185,22,"node"],[12307,46],[12307,48,11185,28],[12308,0,11186,4],[12308,13,11186,9,"next"],[12308,17,11186,4],[12309,0,11187,4],[12309,15,11187,11],[12309,20,11187,16,"finishNode"],[12309,30,11187,11],[12309,31,11187,27,"node"],[12309,35,11187,11],[12309,37,11187,33],[12309,53,11187,11],[12309,54,11187,4],[12310,0,11188,3],[12313,44,11190,24,"node"],[12313,48],[12313,50,11190,30,"maybeName"],[12313,59],[12313,61,11190,41,"expr"],[12313,65],[12313,67,11190,47,"context"],[12313,74],[12313,76,11190,56],[12314,0,11191,4],[12314,13,11191,9],[12314,17,11191,13,"_i2"],[12314,20,11191,16],[12314,23,11191,19],[12314,24,11191,9],[12314,26,11191,22,"_this$state$labels"],[12314,44,11191,40],[12314,47,11191,43],[12314,52,11191,48,"state"],[12314,57,11191,43],[12314,58,11191,54,"labels"],[12314,64,11191,4],[12314,66,11191,62,"_i2"],[12314,69,11191,65],[12314,72,11191,68,"_this$state$labels"],[12314,90,11191,86],[12314,91,11191,87,"length"],[12314,97,11191,4],[12314,99,11191,95,"_i2"],[12314,102,11191,98],[12314,104,11191,4],[12314,106,11191,102],[12315,0,11192,6],[12315,14,11192,12,"label"],[12315,19,11192,17],[12315,22,11192,20,"_this$state$labels"],[12315,40,11192,38],[12315,41,11192,39,"_i2"],[12315,44,11192,38],[12315,45,11192,6],[12317,0,11194,6],[12317,14,11194,10,"label"],[12317,19,11194,15],[12317,20,11194,16,"name"],[12317,24,11194,10],[12317,29,11194,25,"maybeName"],[12317,38,11194,6],[12317,40,11194,36],[12318,0,11195,8],[12318,17,11195,13,"raise"],[12318,22,11195,8],[12318,23,11195,19,"expr"],[12318,27,11195,23],[12318,28,11195,24,"start"],[12318,33,11195,8],[12318,47,11195,41,"maybeName"],[12318,56,11195,8],[12319,0,11196,7],[12320,0,11197,5],[12322,0,11199,4],[12322,12,11199,10,"kind"],[12322,16,11199,14],[12322,19,11199,17],[12322,24,11199,22,"state"],[12322,29,11199,17],[12322,30,11199,28,"type"],[12322,34,11199,17],[12322,35,11199,33,"isLoop"],[12322,41,11199,17],[12322,44,11199,42],[12322,50,11199,17],[12322,53,11199,51],[12322,58,11199,56,"match"],[12322,63,11199,51],[12322,64,11199,62,"types"],[12322,69,11199,67],[12322,70,11199,68,"_switch"],[12322,77,11199,51],[12322,81,11199,79],[12322,89,11199,51],[12322,92,11199,90],[12322,96,11199,4],[12324,0,11201,4],[12324,13,11201,9],[12324,17,11201,13,"i"],[12324,18,11201,14],[12324,21,11201,17],[12324,26,11201,22,"state"],[12324,31,11201,17],[12324,32,11201,28,"labels"],[12324,38,11201,17],[12324,39,11201,35,"length"],[12324,45,11201,17],[12324,48,11201,44],[12324,49,11201,4],[12324,51,11201,47,"i"],[12324,52,11201,48],[12324,56,11201,52],[12324,57,11201,4],[12324,59,11201,55,"i"],[12324,60,11201,56],[12324,62,11201,4],[12324,64,11201,60],[12325,0,11202,6],[12325,14,11202,12,"label"],[12325,20,11202,17],[12325,23,11202,20],[12325,28,11202,25,"state"],[12325,33,11202,20],[12325,34,11202,31,"labels"],[12325,40,11202,20],[12325,41,11202,38,"i"],[12325,42,11202,20],[12325,43,11202,6],[12327,0,11204,6],[12327,14,11204,10,"label"],[12327,20,11204,15],[12327,21,11204,16,"statementStart"],[12327,35,11204,10],[12327,40,11204,35,"node"],[12327,44,11204,39],[12327,45,11204,40,"start"],[12327,50,11204,6],[12327,52,11204,47],[12328,0,11205,8,"label"],[12328,12,11205,8,"label"],[12328,18,11205,13],[12328,19,11205,14,"statementStart"],[12328,33,11205,8],[12328,36,11205,31],[12328,41,11205,36,"state"],[12328,46,11205,31],[12328,47,11205,42,"start"],[12328,52,11205,8],[12329,0,11206,8,"label"],[12329,12,11206,8,"label"],[12329,18,11206,13],[12329,19,11206,14,"kind"],[12329,23,11206,8],[12329,26,11206,21,"kind"],[12329,30,11206,8],[12330,0,11207,7],[12330,11,11204,6],[12330,17,11207,13],[12331,0,11208,8],[12332,0,11209,7],[12333,0,11210,5],[12335,0,11212,4],[12335,13,11212,9,"state"],[12335,18,11212,4],[12335,19,11212,15,"labels"],[12335,25,11212,4],[12335,26,11212,22,"push"],[12335,30,11212,4],[12335,31,11212,27],[12336,0,11213,6,"name"],[12336,10,11213,6,"name"],[12336,14,11213,10],[12336,16,11213,12,"maybeName"],[12336,25,11212,27],[12337,0,11214,6,"kind"],[12337,10,11214,6,"kind"],[12337,14,11214,10],[12337,16,11214,12,"kind"],[12337,20,11212,27],[12338,0,11215,6,"statementStart"],[12338,10,11215,6,"statementStart"],[12338,24,11215,20],[12338,26,11215,22],[12338,31,11215,27,"state"],[12338,36,11215,22],[12338,37,11215,33,"start"],[12339,0,11212,27],[12339,9,11212,4],[12340,0,11217,4,"node"],[12340,8,11217,4,"node"],[12340,12,11217,8],[12340,13,11217,9,"body"],[12340,17,11217,4],[12340,20,11217,16],[12340,25,11217,21,"parseStatement"],[12340,39,11217,16],[12340,40,11217,36,"context"],[12340,47,11217,43],[12340,50,11217,46,"context"],[12340,57,11217,53],[12340,58,11217,54,"indexOf"],[12340,65,11217,46],[12340,66,11217,62],[12340,73,11217,46],[12340,79,11217,75],[12340,80,11217,76],[12340,81,11217,46],[12340,84,11217,80,"context"],[12340,91,11217,87],[12340,94,11217,90],[12340,101,11217,46],[12340,104,11217,100,"context"],[12340,111,11217,43],[12340,114,11217,110],[12340,121,11217,16],[12340,122,11217,4],[12341,0,11218,4],[12341,13,11218,9,"state"],[12341,18,11218,4],[12341,19,11218,15,"labels"],[12341,25,11218,4],[12341,26,11218,22,"pop"],[12341,29,11218,4],[12342,0,11219,4,"node"],[12342,8,11219,4,"node"],[12342,12,11219,8],[12342,13,11219,9,"label"],[12342,18,11219,4],[12342,21,11219,17,"expr"],[12342,25,11219,4],[12343,0,11220,4],[12343,15,11220,11],[12343,20,11220,16,"finishNode"],[12343,30,11220,11],[12343,31,11220,27,"node"],[12343,35,11220,11],[12343,37,11220,33],[12343,55,11220,11],[12343,56,11220,4],[12344,0,11221,3],[12347,47,11223,27,"node"],[12347,51],[12347,53,11223,33,"expr"],[12347,57],[12347,59,11223,39],[12348,0,11224,4,"node"],[12348,8,11224,4,"node"],[12348,12,11224,8],[12348,13,11224,9,"expression"],[12348,23,11224,4],[12348,26,11224,22,"expr"],[12348,30,11224,4],[12349,0,11225,4],[12349,13,11225,9,"semicolon"],[12349,22,11225,4],[12350,0,11226,4],[12350,15,11226,11],[12350,20,11226,16,"finishNode"],[12350,30,11226,11],[12350,31,11226,27,"node"],[12350,35,11226,11],[12350,37,11226,33],[12350,58,11226,11],[12350,59,11226,4],[12351,0,11227,3],[12354,35,11229,68],[12355,0,11229,68],[12355,12,11229,13,"allowDirectives"],[12355,27,11229,68],[12355,98,11229,31],[12355,103,11229,68],[12356,0,11229,68],[12356,12,11229,38,"createNewLexicalScope"],[12356,33,11229,68],[12356,104,11229,62],[12356,108,11229,68],[12357,0,11230,4],[12357,12,11230,10,"node"],[12357,16,11230,14],[12357,19,11230,17],[12357,24,11230,22,"startNode"],[12357,33,11230,17],[12357,35,11230,4],[12358,0,11231,4],[12358,13,11231,9,"expect"],[12358,19,11231,4],[12358,20,11231,16,"types"],[12358,25,11231,21],[12358,26,11231,22,"braceL"],[12358,32,11231,4],[12360,0,11233,4],[12360,12,11233,8,"createNewLexicalScope"],[12360,33,11233,4],[12360,35,11233,31],[12361,0,11234,6],[12361,15,11234,11,"scope"],[12361,20,11234,6],[12361,21,11234,17,"enter"],[12361,26,11234,6],[12361,27,11234,23,"SCOPE_OTHER"],[12361,38,11234,6],[12362,0,11235,5],[12364,0,11237,4],[12364,13,11237,9,"parseBlockBody"],[12364,27,11237,4],[12364,28,11237,24,"node"],[12364,32,11237,4],[12364,34,11237,30,"allowDirectives"],[12364,49,11237,4],[12364,51,11237,47],[12364,56,11237,4],[12364,58,11237,54,"types"],[12364,63,11237,59],[12364,64,11237,60,"braceR"],[12364,70,11237,4],[12366,0,11239,4],[12366,12,11239,8,"createNewLexicalScope"],[12366,33,11239,4],[12366,35,11239,31],[12367,0,11240,6],[12367,15,11240,11,"scope"],[12367,20,11240,6],[12367,21,11240,17,"exit"],[12367,25,11240,6],[12368,0,11241,5],[12370,0,11243,4],[12370,15,11243,11],[12370,20,11243,16,"finishNode"],[12370,30,11243,11],[12370,31,11243,27,"node"],[12370,35,11243,11],[12370,37,11243,33],[12370,53,11243,11],[12370,54,11243,4],[12371,0,11244,3],[12374,39,11246,19,"stmt"],[12374,43],[12374,45,11246,25],[12375,0,11247,4],[12375,15,11247,11,"stmt"],[12375,19,11247,15],[12375,20,11247,16,"type"],[12375,24,11247,11],[12375,29,11247,25],[12375,50,11247,11],[12375,54,11247,50,"stmt"],[12375,58,11247,54],[12375,59,11247,55,"expression"],[12375,69,11247,50],[12375,70,11247,66,"type"],[12375,74,11247,50],[12375,79,11247,75],[12375,94,11247,11],[12375,98,11247,94],[12375,99,11247,95,"stmt"],[12375,103,11247,99],[12375,104,11247,100,"expression"],[12375,114,11247,95],[12375,115,11247,111,"extra"],[12375,120,11247,95],[12375,121,11247,117,"parenthesized"],[12375,134,11247,4],[12376,0,11248,3],[12379,37,11250,17,"node"],[12379,41],[12379,43,11250,23,"allowDirectives"],[12379,58],[12379,60,11250,40,"topLevel"],[12379,68],[12379,70,11250,50,"end"],[12379,73],[12379,75,11250,55],[12380,0,11251,4],[12380,12,11251,10,"body"],[12380,16,11251,14],[12380,19,11251,17,"node"],[12380,23,11251,21],[12380,24,11251,22,"body"],[12380,28,11251,17],[12380,31,11251,29],[12380,33,11251,4],[12381,0,11252,4],[12381,12,11252,10,"directives"],[12381,22,11252,20],[12381,25,11252,23,"node"],[12381,29,11252,27],[12381,30,11252,28,"directives"],[12381,40,11252,23],[12381,43,11252,41],[12381,45,11252,4],[12382,0,11253,4],[12382,13,11253,9,"parseBlockOrModuleBlockBody"],[12382,40,11253,4],[12382,41,11253,37,"body"],[12382,45,11253,4],[12382,47,11253,43,"allowDirectives"],[12382,62,11253,58],[12382,65,11253,61,"directives"],[12382,75,11253,58],[12382,78,11253,74,"undefined"],[12382,87,11253,4],[12382,89,11253,85,"topLevel"],[12382,97,11253,4],[12382,99,11253,95,"end"],[12382,102,11253,4],[12383,0,11254,3],[12386,50,11256,30,"body"],[12386,54],[12386,56,11256,36,"directives"],[12386,66],[12386,68,11256,48,"topLevel"],[12386,76],[12386,78,11256,58,"end"],[12386,81],[12386,83,11256,63],[12387,0,11257,4],[12387,12,11257,8,"parsedNonDirective"],[12387,30,11257,26],[12387,33,11257,29],[12387,38,11257,4],[12388,0,11258,4],[12388,12,11258,8,"oldStrict"],[12388,21,11258,4],[12389,0,11259,4],[12389,12,11259,8,"octalPosition"],[12389,25,11259,4],[12391,0,11261,4],[12391,15,11261,11],[12391,16,11261,12],[12391,21,11261,17,"eat"],[12391,24,11261,12],[12391,25,11261,21,"end"],[12391,28,11261,12],[12391,29,11261,4],[12391,31,11261,27],[12392,0,11262,6],[12392,14,11262,10],[12392,15,11262,11,"parsedNonDirective"],[12392,33,11262,10],[12392,37,11262,33],[12392,42,11262,38,"state"],[12392,47,11262,33],[12392,48,11262,44,"containsOctal"],[12392,61,11262,10],[12392,65,11262,61],[12392,66,11262,62,"octalPosition"],[12392,79,11262,6],[12392,81,11262,77],[12393,0,11263,8,"octalPosition"],[12393,12,11263,8,"octalPosition"],[12393,25,11263,21],[12393,28,11263,24],[12393,33,11263,29,"state"],[12393,38,11263,24],[12393,39,11263,35,"octalPosition"],[12393,52,11263,8],[12394,0,11264,7],[12396,0,11266,6],[12396,14,11266,12,"stmt"],[12396,18,11266,16],[12396,21,11266,19],[12396,26,11266,24,"parseStatement"],[12396,40,11266,19],[12396,41,11266,39],[12396,45,11266,19],[12396,47,11266,45,"topLevel"],[12396,55,11266,19],[12396,56,11266,6],[12398,0,11268,6],[12398,14,11268,10,"directives"],[12398,24,11268,20],[12398,28,11268,24],[12398,29,11268,25,"parsedNonDirective"],[12398,47,11268,10],[12398,51,11268,47],[12398,56,11268,52,"isValidDirective"],[12398,72,11268,47],[12398,73,11268,69,"stmt"],[12398,77,11268,47],[12398,78,11268,6],[12398,80,11268,76],[12399,0,11269,8],[12399,16,11269,14,"directive"],[12399,25,11269,23],[12399,28,11269,26],[12399,33,11269,31,"stmtToDirective"],[12399,48,11269,26],[12399,49,11269,47,"stmt"],[12399,53,11269,26],[12399,54,11269,8],[12400,0,11270,8,"directives"],[12400,12,11270,8,"directives"],[12400,22,11270,18],[12400,23,11270,19,"push"],[12400,27,11270,8],[12400,28,11270,24,"directive"],[12400,37,11270,8],[12402,0,11272,8],[12402,16,11272,12,"oldStrict"],[12402,25,11272,21],[12402,30,11272,26,"undefined"],[12402,39,11272,12],[12402,43,11272,39,"directive"],[12402,52,11272,48],[12402,53,11272,49,"value"],[12402,58,11272,39],[12402,59,11272,55,"value"],[12402,64,11272,39],[12402,69,11272,65],[12402,81,11272,8],[12402,83,11272,79],[12403,0,11273,10,"oldStrict"],[12403,14,11273,10,"oldStrict"],[12403,23,11273,19],[12403,26,11273,22],[12403,31,11273,27,"state"],[12403,36,11273,22],[12403,37,11273,33,"strict"],[12403,43,11273,10],[12404,0,11274,10],[12404,19,11274,15,"setStrict"],[12404,28,11274,10],[12404,29,11274,25],[12404,33,11274,10],[12406,0,11276,10],[12406,18,11276,14,"octalPosition"],[12406,31,11276,10],[12406,33,11276,29],[12407,0,11277,12],[12407,21,11277,17,"raise"],[12407,26,11277,12],[12407,27,11277,23,"octalPosition"],[12407,40,11277,12],[12407,42,11277,38],[12407,72,11277,12],[12408,0,11278,11],[12409,0,11279,9],[12411,0,11281,8],[12412,0,11282,7],[12414,0,11284,6,"parsedNonDirective"],[12414,10,11284,6,"parsedNonDirective"],[12414,28,11284,24],[12414,31,11284,27],[12414,35,11284,6],[12415,0,11285,6,"body"],[12415,10,11285,6,"body"],[12415,14,11285,10],[12415,15,11285,11,"push"],[12415,19,11285,6],[12415,20,11285,16,"stmt"],[12415,24,11285,6],[12416,0,11286,5],[12418,0,11288,4],[12418,12,11288,8,"oldStrict"],[12418,21,11288,17],[12418,26,11288,22],[12418,31,11288,4],[12418,33,11288,29],[12419,0,11289,6],[12419,15,11289,11,"setStrict"],[12419,24,11289,6],[12419,25,11289,21],[12419,30,11289,6],[12420,0,11290,5],[12421,0,11291,3],[12424,31,11293,11,"node"],[12424,35],[12424,37,11293,17,"init"],[12424,41],[12424,43,11293,23],[12425,0,11293,23],[12427,0,11294,4,"node"],[12427,8,11294,4,"node"],[12427,12,11294,8],[12427,13,11294,9,"init"],[12427,17,11294,4],[12427,20,11294,16,"init"],[12427,24,11294,4],[12428,0,11295,4],[12428,13,11295,9,"expect"],[12428,19,11295,4],[12428,20,11295,16,"types"],[12428,25,11295,21],[12428,26,11295,22,"semi"],[12428,30,11295,4],[12429,0,11296,4,"node"],[12429,8,11296,4,"node"],[12429,12,11296,8],[12429,13,11296,9,"test"],[12429,17,11296,4],[12429,20,11296,16],[12429,25,11296,21,"match"],[12429,30,11296,16],[12429,31,11296,27,"types"],[12429,36,11296,32],[12429,37,11296,33,"semi"],[12429,41,11296,16],[12429,45,11296,41],[12429,49,11296,16],[12429,52,11296,48],[12429,57,11296,53,"parseExpression"],[12429,72,11296,48],[12429,74,11296,4],[12430,0,11297,4],[12430,13,11297,9,"expect"],[12430,19,11297,4],[12430,20,11297,16,"types"],[12430,25,11297,21],[12430,26,11297,22,"semi"],[12430,30,11297,4],[12431,0,11298,4,"node"],[12431,8,11298,4,"node"],[12431,12,11298,8],[12431,13,11298,9,"update"],[12431,19,11298,4],[12431,22,11298,18],[12431,27,11298,23,"match"],[12431,32,11298,18],[12431,33,11298,29,"types"],[12431,38,11298,34],[12431,39,11298,35,"parenR"],[12431,45,11298,18],[12431,49,11298,45],[12431,53,11298,18],[12431,56,11298,52],[12431,61,11298,57,"parseExpression"],[12431,76,11298,52],[12431,78,11298,4],[12432,0,11299,4],[12432,13,11299,9,"expect"],[12432,19,11299,4],[12432,20,11299,16,"types"],[12432,25,11299,21],[12432,26,11299,22,"parenR"],[12432,32,11299,4],[12433,0,11300,4,"node"],[12433,8,11300,4,"node"],[12433,12,11300,8],[12433,13,11300,9,"body"],[12433,17,11300,4],[12433,20,11300,16],[12433,25,11300,21,"withTopicForbiddingContext"],[12433,51,11300,16],[12433,52,11300,48],[12434,0,11300,48],[12434,17,11300,54],[12434,24,11300,58],[12434,25,11300,59,"parseStatement"],[12434,39,11300,54],[12434,40,11300,74],[12434,45,11300,54],[12434,46,11300,48],[12435,0,11300,48],[12435,9,11300,16],[12435,10,11300,4],[12436,0,11301,4],[12436,13,11301,9,"scope"],[12436,18,11301,4],[12436,19,11301,15,"exit"],[12436,23,11301,4],[12437,0,11302,4],[12437,13,11302,9,"state"],[12437,18,11302,4],[12437,19,11302,15,"labels"],[12437,25,11302,4],[12437,26,11302,22,"pop"],[12437,29,11302,4],[12438,0,11303,4],[12438,15,11303,11],[12438,20,11303,16,"finishNode"],[12438,30,11303,11],[12438,31,11303,27,"node"],[12438,35,11303,11],[12438,37,11303,33],[12438,51,11303,11],[12438,52,11303,4],[12439,0,11304,3],[12442,33,11306,13,"node"],[12442,37],[12442,39,11306,19,"init"],[12442,43],[12442,45,11306,25,"awaitAt"],[12442,52],[12442,54,11306,34],[12443,0,11306,34],[12445,0,11307,4],[12445,12,11307,10,"isForIn"],[12445,19,11307,17],[12445,22,11307,20],[12445,27,11307,25,"match"],[12445,32,11307,20],[12445,33,11307,31,"types"],[12445,38,11307,36],[12445,39,11307,37,"_in"],[12445,42,11307,20],[12445,43,11307,4],[12446,0,11308,4],[12446,13,11308,9,"next"],[12446,17,11308,4],[12448,0,11310,4],[12448,12,11310,8,"isForIn"],[12448,19,11310,4],[12448,21,11310,17],[12449,0,11311,6],[12449,14,11311,10,"awaitAt"],[12449,21,11311,17],[12449,24,11311,20],[12449,25,11311,21],[12449,26,11311,6],[12449,28,11311,24],[12449,33,11311,29,"unexpected"],[12449,43,11311,24],[12449,44,11311,40,"awaitAt"],[12449,51,11311,24],[12450,0,11312,5],[12450,9,11310,4],[12450,15,11312,11],[12451,0,11313,6,"node"],[12451,10,11313,6,"node"],[12451,14,11313,10],[12451,15,11313,11,"await"],[12451,20,11313,6],[12451,23,11313,19,"awaitAt"],[12451,30,11313,26],[12451,33,11313,29],[12451,34,11313,30],[12451,35,11313,6],[12452,0,11314,5],[12454,0,11316,4],[12454,12,11316,8,"init"],[12454,16,11316,12],[12454,17,11316,13,"type"],[12454,21,11316,8],[12454,26,11316,22],[12454,47,11316,8],[12454,51,11316,47,"init"],[12454,55,11316,51],[12454,56,11316,52,"declarations"],[12454,68,11316,47],[12454,69,11316,65],[12454,70,11316,47],[12454,72,11316,68,"init"],[12454,76,11316,47],[12454,80,11316,76],[12454,84,11316,8],[12454,89,11316,85],[12454,90,11316,86,"isForIn"],[12454,97,11316,85],[12454,101,11316,97],[12454,106,11316,102,"state"],[12454,111,11316,97],[12454,112,11316,108,"strict"],[12454,118,11316,85],[12454,122,11316,118,"init"],[12454,126,11316,122],[12454,127,11316,123,"kind"],[12454,131,11316,118],[12454,136,11316,132],[12454,141,11316,85],[12454,145,11316,141,"init"],[12454,149,11316,145],[12454,150,11316,146,"declarations"],[12454,162,11316,141],[12454,163,11316,159],[12454,164,11316,141],[12454,166,11316,162,"id"],[12454,168,11316,141],[12454,169,11316,165,"type"],[12454,173,11316,141],[12454,178,11316,174],[12454,190,11316,8],[12454,191,11316,4],[12454,193,11316,189],[12455,0,11317,6],[12455,15,11317,11,"raise"],[12455,20,11317,6],[12455,21,11317,17,"init"],[12455,25,11317,21],[12455,26,11317,22,"start"],[12455,31,11317,6],[12455,34,11317,32,"isForIn"],[12455,41,11317,39],[12455,44,11317,42],[12455,52,11317,39],[12455,55,11317,53],[12455,63,11317,6],[12456,0,11318,5],[12456,9,11316,4],[12456,15,11318,11],[12456,19,11318,15,"init"],[12456,23,11318,19],[12456,24,11318,20,"type"],[12456,28,11318,15],[12456,33,11318,29],[12456,52,11318,11],[12456,54,11318,50],[12457,0,11319,6],[12457,15,11319,11,"raise"],[12457,20,11319,6],[12457,21,11319,17,"init"],[12457,25,11319,21],[12457,26,11319,22,"start"],[12457,31,11319,6],[12457,33,11319,29],[12457,69,11319,6],[12458,0,11320,5],[12460,0,11322,4,"node"],[12460,8,11322,4,"node"],[12460,12,11322,8],[12460,13,11322,9,"left"],[12460,17,11322,4],[12460,20,11322,16,"init"],[12460,24,11322,4],[12461,0,11323,4,"node"],[12461,8,11323,4,"node"],[12461,12,11323,8],[12461,13,11323,9,"right"],[12461,18,11323,4],[12461,21,11323,17,"isForIn"],[12461,28,11323,24],[12461,31,11323,27],[12461,36,11323,32,"parseExpression"],[12461,51,11323,27],[12461,53,11323,24],[12461,56,11323,52],[12461,61,11323,57,"parseMaybeAssign"],[12461,77,11323,52],[12461,79,11323,4],[12462,0,11324,4],[12462,13,11324,9,"expect"],[12462,19,11324,4],[12462,20,11324,16,"types"],[12462,25,11324,21],[12462,26,11324,22,"parenR"],[12462,32,11324,4],[12463,0,11325,4,"node"],[12463,8,11325,4,"node"],[12463,12,11325,8],[12463,13,11325,9,"body"],[12463,17,11325,4],[12463,20,11325,16],[12463,25,11325,21,"withTopicForbiddingContext"],[12463,51,11325,16],[12463,52,11325,48],[12464,0,11325,48],[12464,17,11325,54],[12464,24,11325,58],[12464,25,11325,59,"parseStatement"],[12464,39,11325,54],[12464,40,11325,74],[12464,45,11325,54],[12464,46,11325,48],[12465,0,11325,48],[12465,9,11325,16],[12465,10,11325,4],[12466,0,11326,4],[12466,13,11326,9,"scope"],[12466,18,11326,4],[12466,19,11326,15,"exit"],[12466,23,11326,4],[12467,0,11327,4],[12467,13,11327,9,"state"],[12467,18,11327,4],[12467,19,11327,15,"labels"],[12467,25,11327,4],[12467,26,11327,22,"pop"],[12467,29,11327,4],[12468,0,11328,4],[12468,15,11328,11],[12468,20,11328,16,"finishNode"],[12468,30,11328,11],[12468,31,11328,27,"node"],[12468,35,11328,11],[12468,37,11328,33,"isForIn"],[12468,44,11328,40],[12468,47,11328,43],[12468,63,11328,40],[12468,66,11328,62],[12468,82,11328,11],[12468,83,11328,4],[12469,0,11329,3],[12472,31,11331,11,"node"],[12472,35],[12472,37,11331,17,"isFor"],[12472,42],[12472,44,11331,24,"kind"],[12472,48],[12472,50,11331,30],[12473,0,11332,4],[12473,12,11332,10,"declarations"],[12473,24,11332,22],[12473,27,11332,25,"node"],[12473,31,11332,29],[12473,32,11332,30,"declarations"],[12473,44,11332,25],[12473,47,11332,45],[12473,49,11332,4],[12474,0,11333,4],[12474,12,11333,10,"isTypescript"],[12474,24,11333,22],[12474,27,11333,25],[12474,32,11333,30,"hasPlugin"],[12474,41,11333,25],[12474,42,11333,40],[12474,54,11333,25],[12474,55,11333,4],[12475,0,11334,4,"node"],[12475,8,11334,4,"node"],[12475,12,11334,8],[12475,13,11334,9,"kind"],[12475,17,11334,4],[12475,20,11334,16,"kind"],[12475,24,11334,4],[12477,0,11336,4],[12477,17,11336,13],[12478,0,11337,6],[12478,14,11337,12,"decl"],[12478,18,11337,16],[12478,21,11337,19],[12478,26,11337,24,"startNode"],[12478,35,11337,19],[12478,37,11337,6],[12479,0,11338,6],[12479,15,11338,11,"parseVarId"],[12479,25,11338,6],[12479,26,11338,22,"decl"],[12479,30,11338,6],[12479,32,11338,28,"kind"],[12479,36,11338,6],[12481,0,11340,6],[12481,14,11340,10],[12481,19,11340,15,"eat"],[12481,22,11340,10],[12481,23,11340,19,"types"],[12481,28,11340,24],[12481,29,11340,25,"eq"],[12481,31,11340,10],[12481,32,11340,6],[12481,34,11340,30],[12482,0,11341,8,"decl"],[12482,12,11341,8,"decl"],[12482,16,11341,12],[12482,17,11341,13,"init"],[12482,21,11341,8],[12482,24,11341,20],[12482,29,11341,25,"parseMaybeAssign"],[12482,45,11341,20],[12482,46,11341,42,"isFor"],[12482,51,11341,20],[12482,52,11341,8],[12483,0,11342,7],[12483,11,11340,6],[12483,17,11342,13],[12484,0,11343,8],[12484,16,11343,12,"kind"],[12484,20,11343,16],[12484,25,11343,21],[12484,32,11343,12],[12484,36,11343,32],[12484,38,11343,34],[12484,43,11343,39,"match"],[12484,48,11343,34],[12484,49,11343,45,"types"],[12484,54,11343,50],[12484,55,11343,51,"_in"],[12484,58,11343,34],[12484,63,11343,59],[12484,68,11343,64,"isContextual"],[12484,80,11343,59],[12484,81,11343,77],[12484,85,11343,59],[12484,86,11343,32],[12484,87,11343,8],[12484,89,11343,85],[12485,0,11344,10],[12485,18,11344,14],[12485,19,11344,15,"isTypescript"],[12485,31,11344,10],[12485,33,11344,29],[12486,0,11345,12],[12486,21,11345,17,"unexpected"],[12486,31,11345,12],[12487,0,11346,11],[12488,0,11347,9],[12488,13,11343,8],[12488,19,11347,15],[12488,23,11347,19,"decl"],[12488,27,11347,23],[12488,28,11347,24,"id"],[12488,30,11347,19],[12488,31,11347,27,"type"],[12488,35,11347,19],[12488,40,11347,36],[12488,52,11347,19],[12488,56,11347,52],[12488,58,11347,54,"isFor"],[12488,63,11347,59],[12488,68,11347,64],[12488,73,11347,69,"match"],[12488,78,11347,64],[12488,79,11347,75,"types"],[12488,84,11347,80],[12488,85,11347,81,"_in"],[12488,88,11347,64],[12488,93,11347,89],[12488,98,11347,94,"isContextual"],[12488,110,11347,89],[12488,111,11347,107],[12488,115,11347,89],[12488,116,11347,59],[12488,117,11347,52],[12488,118,11347,15],[12488,120,11347,116],[12489,0,11348,10],[12489,19,11348,15,"raise"],[12489,24,11348,10],[12489,25,11348,21],[12489,30,11348,26,"state"],[12489,35,11348,21],[12489,36,11348,32,"lastTokEnd"],[12489,46,11348,10],[12489,48,11348,44],[12489,106,11348,10],[12490,0,11349,9],[12492,0,11351,8,"decl"],[12492,12,11351,8,"decl"],[12492,16,11351,12],[12492,17,11351,13,"init"],[12492,21,11351,8],[12492,24,11351,20],[12492,28,11351,8],[12493,0,11352,7],[12495,0,11354,6,"declarations"],[12495,10,11354,6,"declarations"],[12495,22,11354,18],[12495,23,11354,19,"push"],[12495,27,11354,6],[12495,28,11354,24],[12495,33,11354,29,"finishNode"],[12495,43,11354,24],[12495,44,11354,40,"decl"],[12495,48,11354,24],[12495,50,11354,46],[12495,70,11354,24],[12495,71,11354,6],[12496,0,11355,6],[12496,14,11355,10],[12496,15,11355,11],[12496,20,11355,16,"eat"],[12496,23,11355,11],[12496,24,11355,20,"types"],[12496,29,11355,25],[12496,30,11355,26,"comma"],[12496,35,11355,11],[12496,36,11355,6],[12496,38,11355,34],[12497,0,11356,5],[12499,0,11358,4],[12499,15,11358,11,"node"],[12499,19,11358,4],[12500,0,11359,3],[12503,33,11361,13,"decl"],[12503,37],[12503,39,11361,19,"kind"],[12503,43],[12503,45,11361,25],[12504,0,11362,4,"decl"],[12504,8,11362,4,"decl"],[12504,12,11362,8],[12504,13,11362,9,"id"],[12504,15,11362,4],[12504,18,11362,14],[12504,23,11362,19,"parseBindingAtom"],[12504,39,11362,14],[12504,41,11362,4],[12505,0,11363,4],[12505,13,11363,9,"checkLVal"],[12505,22,11363,4],[12505,23,11363,19,"decl"],[12505,27,11363,23],[12505,28,11363,24,"id"],[12505,30,11363,4],[12505,32,11363,28,"kind"],[12505,36,11363,32],[12505,41,11363,37],[12505,46,11363,28],[12505,49,11363,45,"BIND_VAR"],[12505,57,11363,28],[12505,60,11363,56,"BIND_LEXICAL"],[12505,72,11363,4],[12505,74,11363,70,"undefined"],[12505,83,11363,4],[12505,85,11363,81],[12505,107,11363,4],[12505,109,11363,105,"kind"],[12505,113,11363,109],[12505,118,11363,114],[12505,123,11363,4],[12506,0,11364,3],[12509,36,11366,16,"node"],[12509,40],[12509,42,11366,66],[12510,0,11366,66],[12512,0,11366,66],[12512,12,11366,22,"statement"],[12512,21,11366,66],[12512,92,11366,34,"FUNC_NO_FLAGS"],[12512,105,11366,66],[12513,0,11366,66],[12513,12,11366,49,"isAsync"],[12513,19,11366,66],[12513,90,11366,59],[12513,95,11366,66],[12514,0,11367,4],[12514,12,11367,10,"isStatement"],[12514,23,11367,21],[12514,26,11367,24,"statement"],[12514,35,11367,33],[12514,38,11367,36,"FUNC_STATEMENT"],[12514,52,11367,4],[12515,0,11368,4],[12515,12,11368,10,"isHangingStatement"],[12515,30,11368,28],[12515,33,11368,31,"statement"],[12515,42,11368,40],[12515,45,11368,43,"FUNC_HANGING_STATEMENT"],[12515,67,11368,4],[12516,0,11369,4],[12516,12,11369,10,"requireId"],[12516,21,11369,19],[12516,24,11369,22],[12516,25,11369,23],[12516,26,11369,24,"isStatement"],[12516,37,11369,22],[12516,41,11369,39],[12516,43,11369,41,"statement"],[12516,52,11369,50],[12516,55,11369,53,"FUNC_NULLABLE_ID"],[12516,71,11369,39],[12516,72,11369,4],[12517,0,11370,4],[12517,13,11370,9,"initFunction"],[12517,25,11370,4],[12517,26,11370,22,"node"],[12517,30,11370,4],[12517,32,11370,28,"isAsync"],[12517,39,11370,4],[12519,0,11372,4],[12519,12,11372,8],[12519,17,11372,13,"match"],[12519,22,11372,8],[12519,23,11372,19,"types"],[12519,28,11372,24],[12519,29,11372,25,"star"],[12519,33,11372,8],[12519,38,11372,34,"isHangingStatement"],[12519,56,11372,4],[12519,58,11372,54],[12520,0,11373,6],[12520,15,11373,11,"raise"],[12520,20,11373,6],[12520,21,11373,17],[12520,26,11373,22,"state"],[12520,31,11373,17],[12520,32,11373,28,"start"],[12520,37,11373,6],[12520,39,11373,35],[12520,107,11373,6],[12521,0,11374,5],[12523,0,11376,4,"node"],[12523,8,11376,4,"node"],[12523,12,11376,8],[12523,13,11376,9,"generator"],[12523,22,11376,4],[12523,25,11376,21],[12523,30,11376,26,"eat"],[12523,33,11376,21],[12523,34,11376,30,"types"],[12523,39,11376,35],[12523,40,11376,36,"star"],[12523,44,11376,21],[12523,45,11376,4],[12525,0,11378,4],[12525,12,11378,8,"isStatement"],[12525,23,11378,4],[12525,25,11378,21],[12526,0,11379,6,"node"],[12526,10,11379,6,"node"],[12526,14,11379,10],[12526,15,11379,11,"id"],[12526,17,11379,6],[12526,20,11379,16],[12526,25,11379,21,"parseFunctionId"],[12526,40,11379,16],[12526,41,11379,37,"requireId"],[12526,50,11379,16],[12526,51,11379,6],[12527,0,11380,5],[12529,0,11382,4],[12529,12,11382,10,"oldMaybeInArrowParameters"],[12529,37,11382,35],[12529,40,11382,38],[12529,45,11382,43,"state"],[12529,50,11382,38],[12529,51,11382,49,"maybeInArrowParameters"],[12529,73,11382,4],[12530,0,11383,4],[12530,12,11383,10,"oldInClassProperty"],[12530,30,11383,28],[12530,33,11383,31],[12530,38,11383,36,"state"],[12530,43,11383,31],[12530,44,11383,42,"inClassProperty"],[12530,59,11383,4],[12531,0,11384,4],[12531,12,11384,10,"oldYieldPos"],[12531,23,11384,21],[12531,26,11384,24],[12531,31,11384,29,"state"],[12531,36,11384,24],[12531,37,11384,35,"yieldPos"],[12531,45,11384,4],[12532,0,11385,4],[12532,12,11385,10,"oldAwaitPos"],[12532,23,11385,21],[12532,26,11385,24],[12532,31,11385,29,"state"],[12532,36,11385,24],[12532,37,11385,35,"awaitPos"],[12532,45,11385,4],[12533,0,11386,4],[12533,13,11386,9,"state"],[12533,18,11386,4],[12533,19,11386,15,"maybeInArrowParameters"],[12533,41,11386,4],[12533,44,11386,40],[12533,49,11386,4],[12534,0,11387,4],[12534,13,11387,9,"state"],[12534,18,11387,4],[12534,19,11387,15,"inClassProperty"],[12534,34,11387,4],[12534,37,11387,33],[12534,42,11387,4],[12535,0,11388,4],[12535,13,11388,9,"state"],[12535,18,11388,4],[12535,19,11388,15,"yieldPos"],[12535,27,11388,4],[12535,30,11388,26],[12535,31,11388,27],[12535,32,11388,4],[12536,0,11389,4],[12536,13,11389,9,"state"],[12536,18,11389,4],[12536,19,11389,15,"awaitPos"],[12536,27,11389,4],[12536,30,11389,26],[12536,31,11389,27],[12536,32,11389,4],[12537,0,11390,4],[12537,13,11390,9,"scope"],[12537,18,11390,4],[12537,19,11390,15,"enter"],[12537,24,11390,4],[12537,25,11390,21,"functionFlags"],[12537,38,11390,34],[12537,39,11390,35,"node"],[12537,43,11390,39],[12537,44,11390,40,"async"],[12537,49,11390,34],[12537,51,11390,47,"node"],[12537,55,11390,51],[12537,56,11390,52,"generator"],[12537,65,11390,34],[12537,66,11390,4],[12539,0,11392,4],[12539,12,11392,8],[12539,13,11392,9,"isStatement"],[12539,24,11392,4],[12539,26,11392,22],[12540,0,11393,6,"node"],[12540,10,11393,6,"node"],[12540,14,11393,10],[12540,15,11393,11,"id"],[12540,17,11393,6],[12540,20,11393,16],[12540,25,11393,21,"parseFunctionId"],[12540,40,11393,16],[12540,42,11393,6],[12541,0,11394,5],[12543,0,11396,4],[12543,13,11396,9,"parseFunctionParams"],[12543,32,11396,4],[12543,33,11396,29,"node"],[12543,37,11396,4],[12544,0,11397,4],[12544,13,11397,9,"withTopicForbiddingContext"],[12544,39,11397,4],[12544,40,11397,36],[12544,52,11397,42],[12545,0,11398,6],[12545,10,11398,6],[12545,17,11398,10],[12545,18,11398,11,"parseFunctionBodyAndFinish"],[12545,44,11398,6],[12545,45,11398,38,"node"],[12545,49,11398,6],[12545,51,11398,44,"isStatement"],[12545,62,11398,55],[12545,65,11398,58],[12545,86,11398,55],[12545,89,11398,82],[12545,109,11398,6],[12546,0,11399,5],[12546,9,11397,4],[12547,0,11400,4],[12547,13,11400,9,"scope"],[12547,18,11400,4],[12547,19,11400,15,"exit"],[12547,23,11400,4],[12549,0,11402,4],[12549,12,11402,8,"isStatement"],[12549,23,11402,19],[12549,27,11402,23],[12549,28,11402,24,"isHangingStatement"],[12549,46,11402,4],[12549,48,11402,44],[12550,0,11403,6],[12550,15,11403,11,"registerFunctionStatementId"],[12550,42,11403,6],[12550,43,11403,39,"node"],[12550,47,11403,6],[12551,0,11404,5],[12553,0,11406,4],[12553,13,11406,9,"state"],[12553,18,11406,4],[12553,19,11406,15,"maybeInArrowParameters"],[12553,41,11406,4],[12553,44,11406,40,"oldMaybeInArrowParameters"],[12553,69,11406,4],[12554,0,11407,4],[12554,13,11407,9,"state"],[12554,18,11407,4],[12554,19,11407,15,"inClassProperty"],[12554,34,11407,4],[12554,37,11407,33,"oldInClassProperty"],[12554,55,11407,4],[12555,0,11408,4],[12555,13,11408,9,"state"],[12555,18,11408,4],[12555,19,11408,15,"yieldPos"],[12555,27,11408,4],[12555,30,11408,26,"oldYieldPos"],[12555,41,11408,4],[12556,0,11409,4],[12556,13,11409,9,"state"],[12556,18,11409,4],[12556,19,11409,15,"awaitPos"],[12556,27,11409,4],[12556,30,11409,26,"oldAwaitPos"],[12556,41,11409,4],[12557,0,11410,4],[12557,15,11410,11,"node"],[12557,19,11410,4],[12558,0,11411,3],[12561,38,11413,18,"requireId"],[12561,47],[12561,49,11413,29],[12562,0,11414,4],[12562,15,11414,11,"requireId"],[12562,24,11414,20],[12562,28,11414,24],[12562,33,11414,29,"match"],[12562,38,11414,24],[12562,39,11414,35,"types"],[12562,44,11414,40],[12562,45,11414,41,"name"],[12562,49,11414,24],[12562,50,11414,11],[12562,53,11414,49],[12562,58,11414,54,"parseIdentifier"],[12562,73,11414,49],[12562,75,11414,11],[12562,78,11414,74],[12562,82,11414,4],[12563,0,11415,3],[12566,42,11417,22,"node"],[12566,46],[12566,48,11417,28,"allowModifiers"],[12566,62],[12566,64,11417,44],[12567,0,11418,4],[12567,12,11418,10,"oldInParameters"],[12567,27,11418,25],[12567,30,11418,28],[12567,35,11418,33,"state"],[12567,40,11418,28],[12567,41,11418,39,"inParameters"],[12567,53,11418,4],[12568,0,11419,4],[12568,13,11419,9,"state"],[12568,18,11419,4],[12568,19,11419,15,"inParameters"],[12568,31,11419,4],[12568,34,11419,30],[12568,38,11419,4],[12569,0,11420,4],[12569,13,11420,9,"expect"],[12569,19,11420,4],[12569,20,11420,16,"types"],[12569,25,11420,21],[12569,26,11420,22,"parenL"],[12569,32,11420,4],[12570,0,11421,4,"node"],[12570,8,11421,4,"node"],[12570,12,11421,8],[12570,13,11421,9,"params"],[12570,19,11421,4],[12570,22,11421,18],[12570,27,11421,23,"parseBindingList"],[12570,43,11421,18],[12570,44,11421,40,"types"],[12570,49,11421,45],[12570,50,11421,46,"parenR"],[12570,56,11421,18],[12570,58,11421,54],[12570,60,11421,18],[12570,62,11421,58],[12570,67,11421,18],[12570,69,11421,65,"allowModifiers"],[12570,83,11421,18],[12570,84,11421,4],[12571,0,11422,4],[12571,13,11422,9,"state"],[12571,18,11422,4],[12571,19,11422,15,"inParameters"],[12571,31,11422,4],[12571,34,11422,30,"oldInParameters"],[12571,49,11422,4],[12572,0,11423,4],[12572,13,11423,9,"checkYieldAwaitInDefaultParams"],[12572,43,11423,4],[12573,0,11424,3],[12576,50,11426,30,"node"],[12576,54],[12576,56,11426,36],[12577,0,11427,4],[12577,12,11427,8],[12577,13,11427,9,"node"],[12577,17,11427,13],[12577,18,11427,14,"id"],[12577,20,11427,4],[12577,22,11427,18],[12578,0,11428,4],[12578,13,11428,9,"scope"],[12578,18,11428,4],[12578,19,11428,15,"declareName"],[12578,30,11428,4],[12578,31,11428,27,"node"],[12578,35,11428,31],[12578,36,11428,32,"id"],[12578,38,11428,27],[12578,39,11428,35,"name"],[12578,43,11428,4],[12578,45,11428,41],[12578,50,11428,46,"state"],[12578,55,11428,41],[12578,56,11428,52,"strict"],[12578,62,11428,41],[12578,66,11428,62,"node"],[12578,70,11428,66],[12578,71,11428,67,"generator"],[12578,80,11428,41],[12578,84,11428,80,"node"],[12578,88,11428,84],[12578,89,11428,85,"async"],[12578,94,11428,41],[12578,97,11428,93],[12578,102,11428,98,"scope"],[12578,107,11428,93],[12578,108,11428,104,"treatFunctionsAsVar"],[12578,127,11428,93],[12578,130,11428,126,"BIND_VAR"],[12578,138,11428,93],[12578,141,11428,137,"BIND_LEXICAL"],[12578,153,11428,41],[12578,156,11428,152,"BIND_FUNCTION"],[12578,169,11428,4],[12578,171,11428,167,"node"],[12578,175,11428,171],[12578,176,11428,172,"id"],[12578,178,11428,167],[12578,179,11428,175,"start"],[12578,184,11428,4],[12579,0,11429,3],[12582,33,11431,13,"node"],[12582,37],[12582,39,11431,19,"isStatement"],[12582,50],[12582,52,11431,32,"optionalId"],[12582,62],[12582,64,11431,44],[12583,0,11432,4],[12583,13,11432,9,"next"],[12583,17,11432,4],[12584,0,11433,4],[12584,13,11433,9,"takeDecorators"],[12584,27,11433,4],[12584,28,11433,24,"node"],[12584,32,11433,4],[12585,0,11434,4],[12585,12,11434,10,"oldStrict"],[12585,21,11434,19],[12585,24,11434,22],[12585,29,11434,27,"state"],[12585,34,11434,22],[12585,35,11434,33,"strict"],[12585,41,11434,4],[12586,0,11435,4],[12586,13,11435,9,"state"],[12586,18,11435,4],[12586,19,11435,15,"strict"],[12586,25,11435,4],[12586,28,11435,24],[12586,32,11435,4],[12587,0,11436,4],[12587,13,11436,9,"parseClassId"],[12587,25,11436,4],[12587,26,11436,22,"node"],[12587,30,11436,4],[12587,32,11436,28,"isStatement"],[12587,43,11436,4],[12587,45,11436,41,"optionalId"],[12587,55,11436,4],[12588,0,11437,4],[12588,13,11437,9,"parseClassSuper"],[12588,28,11437,4],[12588,29,11437,25,"node"],[12588,33,11437,4],[12589,0,11438,4,"node"],[12589,8,11438,4,"node"],[12589,12,11438,8],[12589,13,11438,9,"body"],[12589,17,11438,4],[12589,20,11438,16],[12589,25,11438,21,"parseClassBody"],[12589,39,11438,16],[12589,40,11438,36],[12589,41,11438,37],[12589,42,11438,38,"node"],[12589,46,11438,42],[12589,47,11438,43,"superClass"],[12589,57,11438,16],[12589,58,11438,4],[12590,0,11439,4],[12590,13,11439,9,"state"],[12590,18,11439,4],[12590,19,11439,15,"strict"],[12590,25,11439,4],[12590,28,11439,24,"oldStrict"],[12590,37,11439,4],[12591,0,11440,4],[12591,15,11440,11],[12591,20,11440,16,"finishNode"],[12591,30,11440,11],[12591,31,11440,27,"node"],[12591,35,11440,11],[12591,37,11440,33,"isStatement"],[12591,48,11440,44],[12591,51,11440,47],[12591,69,11440,44],[12591,72,11440,68],[12591,89,11440,11],[12591,90,11440,4],[12592,0,11441,3],[12595,40,11443,20],[12596,0,11444,4],[12596,15,11444,11],[12596,20,11444,16,"match"],[12596,25,11444,11],[12596,26,11444,22,"types"],[12596,31,11444,27],[12596,32,11444,28,"eq"],[12596,34,11444,11],[12596,39,11444,35],[12596,44,11444,40,"match"],[12596,49,11444,35],[12596,50,11444,46,"types"],[12596,55,11444,51],[12596,56,11444,52,"semi"],[12596,60,11444,35],[12596,61,11444,11],[12596,65,11444,61],[12596,70,11444,66,"match"],[12596,75,11444,61],[12596,76,11444,72,"types"],[12596,81,11444,77],[12596,82,11444,78,"braceR"],[12596,88,11444,61],[12596,89,11444,4],[12597,0,11445,3],[12600,38,11447,18],[12601,0,11448,4],[12601,15,11448,11],[12601,20,11448,16,"match"],[12601,25,11448,11],[12601,26,11448,22,"types"],[12601,31,11448,27],[12601,32,11448,28,"parenL"],[12601,38,11448,11],[12601,39,11448,4],[12602,0,11449,3],[12605,45,11451,25,"method"],[12605,51],[12605,53,11451,33],[12606,0,11452,4],[12606,15,11452,11],[12606,16,11452,12,"method"],[12606,22,11452,18],[12606,23,11452,19,"computed"],[12606,31,11452,11],[12606,35,11452,31],[12606,36,11452,32,"method"],[12606,42,11452,38],[12606,43,11452,39,"static"],[12606,49,11452,11],[12606,54,11452,50,"method"],[12606,60,11452,56],[12606,61,11452,57,"key"],[12606,64,11452,50],[12606,65,11452,61,"name"],[12606,69,11452,50],[12606,74,11452,70],[12606,87,11452,50],[12606,91,11452,87,"method"],[12606,97,11452,93],[12606,98,11452,94,"key"],[12606,101,11452,87],[12606,102,11452,98,"value"],[12606,107,11452,87],[12606,112,11452,108],[12606,125,11452,11],[12606,126,11452,4],[12607,0,11453,3],[12610,37,11455,17,"constructorAllowsSuper"],[12610,59],[12610,61,11455,41],[12611,0,11455,41],[12613,0,11456,4],[12613,13,11456,9,"state"],[12613,18,11456,4],[12613,19,11456,15,"classLevel"],[12613,29,11456,4],[12614,0,11457,4],[12614,12,11457,10,"state"],[12614,17,11457,15],[12614,20,11457,18],[12615,0,11458,6,"hadConstructor"],[12615,10,11458,6,"hadConstructor"],[12615,24,11458,20],[12615,26,11458,22],[12616,0,11457,18],[12616,9,11457,4],[12617,0,11460,4],[12617,12,11460,8,"decorators"],[12617,22,11460,18],[12617,25,11460,21],[12617,27,11460,4],[12618,0,11461,4],[12618,12,11461,10,"classBody"],[12618,21,11461,19],[12618,24,11461,22],[12618,29,11461,27,"startNode"],[12618,38,11461,22],[12618,40,11461,4],[12619,0,11462,4,"classBody"],[12619,8,11462,4,"classBody"],[12619,17,11462,13],[12619,18,11462,14,"body"],[12619,22,11462,4],[12619,25,11462,21],[12619,27,11462,4],[12620,0,11463,4],[12620,13,11463,9,"expect"],[12620,19,11463,4],[12620,20,11463,16,"types"],[12620,25,11463,21],[12620,26,11463,22,"braceL"],[12620,32,11463,4],[12621,0,11464,4],[12621,13,11464,9,"withTopicForbiddingContext"],[12621,39,11464,4],[12621,40,11464,36],[12621,52,11464,42],[12622,0,11465,6],[12622,17,11465,13],[12622,18,11465,14],[12622,25,11465,18],[12622,26,11465,19,"eat"],[12622,29,11465,14],[12622,30,11465,23,"types"],[12622,35,11465,28],[12622,36,11465,29,"braceR"],[12622,42,11465,14],[12622,43,11465,6],[12622,45,11465,38],[12623,0,11466,8],[12623,16,11466,12],[12623,23,11466,16],[12623,24,11466,17,"eat"],[12623,27,11466,12],[12623,28,11466,21,"types"],[12623,33,11466,26],[12623,34,11466,27,"semi"],[12623,38,11466,12],[12623,39,11466,8],[12623,41,11466,34],[12624,0,11467,10],[12624,18,11467,14,"decorators"],[12624,28,11467,24],[12624,29,11467,25,"length"],[12624,35,11467,14],[12624,38,11467,34],[12624,39,11467,10],[12624,41,11467,37],[12625,0,11468,12],[12625,22,11468,18],[12625,29,11468,22],[12625,30,11468,23,"raise"],[12625,35,11468,18],[12625,36,11468,29],[12625,43,11468,33],[12625,44,11468,34,"state"],[12625,49,11468,29],[12625,50,11468,40,"lastTokEnd"],[12625,60,11468,18],[12625,62,11468,52],[12625,110,11468,18],[12625,111,11468,12],[12626,0,11469,11],[12628,0,11471,10],[12629,0,11472,9],[12631,0,11474,8],[12631,16,11474,12],[12631,23,11474,16],[12631,24,11474,17,"match"],[12631,29,11474,12],[12631,30,11474,23,"types"],[12631,35,11474,28],[12631,36,11474,29,"at"],[12631,38,11474,12],[12631,39,11474,8],[12631,41,11474,34],[12632,0,11475,10,"decorators"],[12632,14,11475,10,"decorators"],[12632,24,11475,20],[12632,25,11475,21,"push"],[12632,29,11475,10],[12632,30,11475,26],[12632,37,11475,30],[12632,38,11475,31,"parseDecorator"],[12632,52,11475,26],[12632,54,11475,10],[12633,0,11476,10],[12634,0,11477,9],[12636,0,11479,8],[12636,16,11479,14,"member"],[12636,22,11479,20],[12636,25,11479,23],[12636,32,11479,27],[12636,33,11479,28,"startNode"],[12636,42,11479,23],[12636,44,11479,8],[12638,0,11481,8],[12638,16,11481,12,"decorators"],[12638,26,11481,22],[12638,27,11481,23,"length"],[12638,33,11481,8],[12638,35,11481,31],[12639,0,11482,10,"member"],[12639,14,11482,10,"member"],[12639,20,11482,16],[12639,21,11482,17,"decorators"],[12639,31,11482,10],[12639,34,11482,30,"decorators"],[12639,44,11482,10],[12641,0,11483,10],[12641,14,11483,10],[12641,21,11483,14],[12641,22,11483,15,"resetStartLocationFromNode"],[12641,48,11483,10],[12641,49,11483,42,"member"],[12641,55,11483,10],[12641,57,11483,50,"decorators"],[12641,67,11483,60],[12641,68,11483,61],[12641,69,11483,60],[12641,70,11483,10],[12643,0,11484,10,"decorators"],[12643,14,11484,10,"decorators"],[12643,24,11484,20],[12643,27,11484,23],[12643,29,11484,10],[12644,0,11485,9],[12646,0,11487,8],[12646,12,11487,8],[12646,19,11487,12],[12646,20,11487,13,"parseClassMember"],[12646,36,11487,8],[12646,37,11487,30,"classBody"],[12646,46,11487,8],[12646,48,11487,41,"member"],[12646,54,11487,8],[12646,56,11487,49,"state"],[12646,61,11487,8],[12646,63,11487,56,"constructorAllowsSuper"],[12646,85,11487,8],[12648,0,11489,8],[12648,16,11489,12,"member"],[12648,22,11489,18],[12648,23,11489,19,"kind"],[12648,27,11489,12],[12648,32,11489,28],[12648,45,11489,12],[12648,49,11489,45,"member"],[12648,55,11489,51],[12648,56,11489,52,"decorators"],[12648,66,11489,12],[12648,70,11489,66,"member"],[12648,76,11489,72],[12648,77,11489,73,"decorators"],[12648,87,11489,66],[12648,88,11489,84,"length"],[12648,94,11489,66],[12648,97,11489,93],[12648,98,11489,8],[12648,100,11489,96],[12649,0,11490,10],[12649,14,11490,10],[12649,21,11490,14],[12649,22,11490,15,"raise"],[12649,27,11490,10],[12649,28,11490,21,"member"],[12649,34,11490,27],[12649,35,11490,28,"start"],[12649,40,11490,10],[12649,42,11490,35],[12649,123,11490,10],[12650,0,11491,9],[12651,0,11492,7],[12652,0,11493,5],[12652,9,11464,4],[12654,0,11495,4],[12654,12,11495,8,"decorators"],[12654,22,11495,18],[12654,23,11495,19,"length"],[12654,29,11495,4],[12654,31,11495,27],[12655,0,11496,6],[12655,16,11496,12],[12655,21,11496,17,"raise"],[12655,26,11496,12],[12655,27,11496,23],[12655,32,11496,28,"state"],[12655,37,11496,23],[12655,38,11496,34,"start"],[12655,43,11496,12],[12655,45,11496,41],[12655,90,11496,12],[12655,91,11496,6],[12656,0,11497,5],[12658,0,11499,4],[12658,13,11499,9,"state"],[12658,18,11499,4],[12658,19,11499,15,"classLevel"],[12658,29,11499,4],[12659,0,11500,4],[12659,15,11500,11],[12659,20,11500,16,"finishNode"],[12659,30,11500,11],[12659,31,11500,27,"classBody"],[12659,40,11500,11],[12659,42,11500,38],[12659,53,11500,11],[12659,54,11500,4],[12660,0,11501,3],[12663,39,11503,19,"classBody"],[12663,48],[12663,50,11503,30,"member"],[12663,56],[12663,58,11503,38,"state"],[12663,63],[12663,65,11503,45,"constructorAllowsSuper"],[12663,87],[12663,89,11503,69],[12664,0,11504,4],[12664,12,11504,8,"isStatic"],[12664,20,11504,16],[12664,23,11504,19],[12664,28,11504,4],[12665,0,11505,4],[12665,12,11505,10,"containsEsc"],[12665,23,11505,21],[12665,26,11505,24],[12665,31,11505,29,"state"],[12665,36,11505,24],[12665,37,11505,35,"containsEsc"],[12665,48,11505,4],[12667,0,11507,4],[12667,12,11507,8],[12667,17,11507,13,"match"],[12667,22,11507,8],[12667,23,11507,19,"types"],[12667,28,11507,24],[12667,29,11507,25,"name"],[12667,33,11507,8],[12667,38,11507,34],[12667,43,11507,39,"state"],[12667,48,11507,34],[12667,49,11507,45,"value"],[12667,54,11507,34],[12667,59,11507,55],[12667,67,11507,4],[12667,69,11507,65],[12668,0,11508,6],[12668,14,11508,12,"key"],[12668,17,11508,15],[12668,20,11508,18],[12668,25,11508,23,"parseIdentifier"],[12668,40,11508,18],[12668,41,11508,39],[12668,45,11508,18],[12668,46,11508,6],[12670,0,11510,6],[12670,14,11510,10],[12670,19,11510,15,"isClassMethod"],[12670,32,11510,10],[12670,34,11510,6],[12670,36,11510,32],[12671,0,11511,8],[12671,16,11511,14,"method"],[12671,22,11511,20],[12671,25,11511,23,"member"],[12671,31,11511,8],[12672,0,11512,8,"method"],[12672,12,11512,8,"method"],[12672,18,11512,14],[12672,19,11512,15,"kind"],[12672,23,11512,8],[12672,26,11512,22],[12672,34,11512,8],[12673,0,11513,8,"method"],[12673,12,11513,8,"method"],[12673,18,11513,14],[12673,19,11513,15,"computed"],[12673,27,11513,8],[12673,30,11513,26],[12673,35,11513,8],[12674,0,11514,8,"method"],[12674,12,11514,8,"method"],[12674,18,11514,14],[12674,19,11514,15,"key"],[12674,22,11514,8],[12674,25,11514,21,"key"],[12674,28,11514,8],[12675,0,11515,8,"method"],[12675,12,11515,8,"method"],[12675,18,11515,14],[12675,19,11515,15,"static"],[12675,25,11515,8],[12675,28,11515,24],[12675,33,11515,8],[12676,0,11516,8],[12676,17,11516,13,"pushClassMethod"],[12676,32,11516,8],[12676,33,11516,29,"classBody"],[12676,42,11516,8],[12676,44,11516,40,"method"],[12676,50,11516,8],[12676,52,11516,48],[12676,57,11516,8],[12676,59,11516,55],[12676,64,11516,8],[12676,66,11516,62],[12676,71,11516,8],[12676,73,11516,69],[12676,78,11516,8],[12677,0,11517,8],[12678,0,11518,7],[12678,11,11510,6],[12678,17,11518,13],[12678,21,11518,17],[12678,26,11518,22,"isClassProperty"],[12678,41,11518,17],[12678,43,11518,13],[12678,45,11518,41],[12679,0,11519,8],[12679,16,11519,14,"prop"],[12679,20,11519,18],[12679,23,11519,21,"member"],[12679,29,11519,8],[12680,0,11520,8,"prop"],[12680,12,11520,8,"prop"],[12680,16,11520,12],[12680,17,11520,13,"computed"],[12680,25,11520,8],[12680,28,11520,24],[12680,33,11520,8],[12681,0,11521,8,"prop"],[12681,12,11521,8,"prop"],[12681,16,11521,12],[12681,17,11521,13,"key"],[12681,20,11521,8],[12681,23,11521,19,"key"],[12681,26,11521,8],[12682,0,11522,8,"prop"],[12682,12,11522,8,"prop"],[12682,16,11522,12],[12682,17,11522,13,"static"],[12682,23,11522,8],[12682,26,11522,22],[12682,31,11522,8],[12683,0,11523,8,"classBody"],[12683,12,11523,8,"classBody"],[12683,21,11523,17],[12683,22,11523,18,"body"],[12683,26,11523,8],[12683,27,11523,23,"push"],[12683,31,11523,8],[12683,32,11523,28],[12683,37,11523,33,"parseClassProperty"],[12683,55,11523,28],[12683,56,11523,52,"prop"],[12683,60,11523,28],[12683,61,11523,8],[12684,0,11524,8],[12685,0,11525,7],[12685,11,11518,13],[12685,17,11525,13],[12685,21,11525,17,"containsEsc"],[12685,32,11525,13],[12685,34,11525,30],[12686,0,11526,8],[12686,18,11526,14],[12686,23,11526,19,"unexpected"],[12686,33,11526,14],[12686,35,11526,8],[12687,0,11527,7],[12689,0,11529,6,"isStatic"],[12689,10,11529,6,"isStatic"],[12689,18,11529,14],[12689,21,11529,17],[12689,25,11529,6],[12690,0,11530,5],[12692,0,11532,4],[12692,13,11532,9,"parseClassMemberWithIsStatic"],[12692,41,11532,4],[12692,42,11532,38,"classBody"],[12692,51,11532,4],[12692,53,11532,49,"member"],[12692,59,11532,4],[12692,61,11532,57,"state"],[12692,66,11532,4],[12692,68,11532,64,"isStatic"],[12692,76,11532,4],[12692,78,11532,74,"constructorAllowsSuper"],[12692,100,11532,4],[12693,0,11533,3],[12696,51,11535,31,"classBody"],[12696,60],[12696,62,11535,42,"member"],[12696,68],[12696,70,11535,50,"state"],[12696,75],[12696,77,11535,57,"isStatic"],[12696,85],[12696,87,11535,67,"constructorAllowsSuper"],[12696,109],[12696,111,11535,91],[12697,0,11536,4],[12697,12,11536,10,"publicMethod"],[12697,24,11536,22],[12697,27,11536,25,"member"],[12697,33,11536,4],[12698,0,11537,4],[12698,12,11537,10,"privateMethod"],[12698,25,11537,23],[12698,28,11537,26,"member"],[12698,34,11537,4],[12699,0,11538,4],[12699,12,11538,10,"publicProp"],[12699,22,11538,20],[12699,25,11538,23,"member"],[12699,31,11538,4],[12700,0,11539,4],[12700,12,11539,10,"privateProp"],[12700,23,11539,21],[12700,26,11539,24,"member"],[12700,32,11539,4],[12701,0,11540,4],[12701,12,11540,10,"method"],[12701,18,11540,16],[12701,21,11540,19,"publicMethod"],[12701,33,11540,4],[12702,0,11541,4],[12702,12,11541,10,"publicMember"],[12702,24,11541,22],[12702,27,11541,25,"publicMethod"],[12702,39,11541,4],[12703,0,11542,4,"member"],[12703,8,11542,4,"member"],[12703,14,11542,10],[12703,15,11542,11,"static"],[12703,21,11542,4],[12703,24,11542,20,"isStatic"],[12703,32,11542,4],[12705,0,11544,4],[12705,12,11544,8],[12705,17,11544,13,"eat"],[12705,20,11544,8],[12705,21,11544,17,"types"],[12705,26,11544,22],[12705,27,11544,23,"star"],[12705,31,11544,8],[12705,32,11544,4],[12705,34,11544,30],[12706,0,11545,6,"method"],[12706,10,11545,6,"method"],[12706,16,11545,12],[12706,17,11545,13,"kind"],[12706,21,11545,6],[12706,24,11545,20],[12706,32,11545,6],[12707,0,11546,6],[12707,15,11546,11,"parseClassPropertyName"],[12707,37,11546,6],[12707,38,11546,34,"method"],[12707,44,11546,6],[12709,0,11548,6],[12709,14,11548,10,"method"],[12709,20,11548,16],[12709,21,11548,17,"key"],[12709,24,11548,10],[12709,25,11548,21,"type"],[12709,29,11548,10],[12709,34,11548,30],[12709,47,11548,6],[12709,49,11548,45],[12710,0,11549,8],[12710,17,11549,13,"pushClassPrivateMethod"],[12710,39,11549,8],[12710,40,11549,36,"classBody"],[12710,49,11549,8],[12710,51,11549,47,"privateMethod"],[12710,64,11549,8],[12710,66,11549,62],[12710,70,11549,8],[12710,72,11549,68],[12710,77,11549,8],[12711,0,11550,8],[12712,0,11551,7],[12714,0,11553,6],[12714,14,11553,10],[12714,19,11553,15,"isNonstaticConstructor"],[12714,41,11553,10],[12714,42,11553,38,"publicMethod"],[12714,54,11553,10],[12714,55,11553,6],[12714,57,11553,53],[12715,0,11554,8],[12715,17,11554,13,"raise"],[12715,22,11554,8],[12715,23,11554,19,"publicMethod"],[12715,35,11554,31],[12715,36,11554,32,"key"],[12715,39,11554,19],[12715,40,11554,36,"start"],[12715,45,11554,8],[12715,47,11554,43],[12715,81,11554,8],[12716,0,11555,7],[12718,0,11557,6],[12718,15,11557,11,"pushClassMethod"],[12718,30,11557,6],[12718,31,11557,27,"classBody"],[12718,40,11557,6],[12718,42,11557,38,"publicMethod"],[12718,54,11557,6],[12718,56,11557,52],[12718,60,11557,6],[12718,62,11557,58],[12718,67,11557,6],[12718,69,11557,65],[12718,74,11557,6],[12718,76,11557,72],[12718,81,11557,6],[12719,0,11558,6],[12720,0,11559,5],[12722,0,11561,4],[12722,12,11561,10,"containsEsc"],[12722,23,11561,21],[12722,26,11561,24],[12722,31,11561,29,"state"],[12722,36,11561,24],[12722,37,11561,35,"containsEsc"],[12722,48,11561,4],[12723,0,11562,4],[12723,12,11562,10,"key"],[12723,15,11562,13],[12723,18,11562,16],[12723,23,11562,21,"parseClassPropertyName"],[12723,45,11562,16],[12723,46,11562,44,"member"],[12723,52,11562,16],[12723,53,11562,4],[12724,0,11563,4],[12724,12,11563,10,"isPrivate"],[12724,21,11563,19],[12724,24,11563,22,"key"],[12724,27,11563,25],[12724,28,11563,26,"type"],[12724,32,11563,22],[12724,37,11563,35],[12724,50,11563,4],[12725,0,11564,4],[12725,12,11564,10,"isSimple"],[12725,20,11564,18],[12725,23,11564,21,"key"],[12725,26,11564,24],[12725,27,11564,25,"type"],[12725,31,11564,21],[12725,36,11564,34],[12725,48,11564,4],[12726,0,11565,4],[12726,12,11565,10,"maybeQuestionTokenStart"],[12726,35,11565,33],[12726,38,11565,36],[12726,43,11565,41,"state"],[12726,48,11565,36],[12726,49,11565,47,"start"],[12726,54,11565,4],[12727,0,11566,4],[12727,13,11566,9,"parsePostMemberNameModifiers"],[12727,41,11566,4],[12727,42,11566,38,"publicMember"],[12727,54,11566,4],[12729,0,11568,4],[12729,12,11568,8],[12729,17,11568,13,"isClassMethod"],[12729,30,11568,8],[12729,32,11568,4],[12729,34,11568,30],[12730,0,11569,6,"method"],[12730,10,11569,6,"method"],[12730,16,11569,12],[12730,17,11569,13,"kind"],[12730,21,11569,6],[12730,24,11569,20],[12730,32,11569,6],[12732,0,11571,6],[12732,14,11571,10,"isPrivate"],[12732,23,11571,6],[12732,25,11571,21],[12733,0,11572,8],[12733,17,11572,13,"pushClassPrivateMethod"],[12733,39,11572,8],[12733,40,11572,36,"classBody"],[12733,49,11572,8],[12733,51,11572,47,"privateMethod"],[12733,64,11572,8],[12733,66,11572,62],[12733,71,11572,8],[12733,73,11572,69],[12733,78,11572,8],[12734,0,11573,8],[12735,0,11574,7],[12737,0,11576,6],[12737,14,11576,12,"isConstructor"],[12737,27,11576,25],[12737,30,11576,28],[12737,35,11576,33,"isNonstaticConstructor"],[12737,57,11576,28],[12737,58,11576,56,"publicMethod"],[12737,70,11576,28],[12737,71,11576,6],[12738,0,11577,6],[12738,14,11577,10,"allowsDirectSuper"],[12738,31,11577,27],[12738,34,11577,30],[12738,39,11577,6],[12740,0,11579,6],[12740,14,11579,10,"isConstructor"],[12740,27,11579,6],[12740,29,11579,25],[12741,0,11580,8,"publicMethod"],[12741,12,11580,8,"publicMethod"],[12741,24,11580,20],[12741,25,11580,21,"kind"],[12741,29,11580,8],[12741,32,11580,28],[12741,45,11580,8],[12743,0,11582,8],[12743,16,11582,12,"state"],[12743,21,11582,17],[12743,22,11582,18,"hadConstructor"],[12743,36,11582,12],[12743,40,11582,36],[12743,41,11582,37],[12743,46,11582,42,"hasPlugin"],[12743,55,11582,37],[12743,56,11582,52],[12743,68,11582,37],[12743,69,11582,8],[12743,71,11582,67],[12744,0,11583,10],[12744,19,11583,15,"raise"],[12744,24,11583,10],[12744,25,11583,21,"key"],[12744,28,11583,24],[12744,29,11583,25,"start"],[12744,34,11583,10],[12744,36,11583,32],[12744,77,11583,10],[12745,0,11584,9],[12747,0,11586,8,"state"],[12747,12,11586,8,"state"],[12747,17,11586,13],[12747,18,11586,14,"hadConstructor"],[12747,32,11586,8],[12747,35,11586,31],[12747,39,11586,8],[12748,0,11587,8,"allowsDirectSuper"],[12748,12,11587,8,"allowsDirectSuper"],[12748,29,11587,25],[12748,32,11587,28,"constructorAllowsSuper"],[12748,54,11587,8],[12749,0,11588,7],[12751,0,11590,6],[12751,15,11590,11,"pushClassMethod"],[12751,30,11590,6],[12751,31,11590,27,"classBody"],[12751,40,11590,6],[12751,42,11590,38,"publicMethod"],[12751,54,11590,6],[12751,56,11590,52],[12751,61,11590,6],[12751,63,11590,59],[12751,68,11590,6],[12751,70,11590,66,"isConstructor"],[12751,83,11590,6],[12751,85,11590,81,"allowsDirectSuper"],[12751,102,11590,6],[12752,0,11591,5],[12752,9,11568,4],[12752,15,11591,11],[12752,19,11591,15],[12752,24,11591,20,"isClassProperty"],[12752,39,11591,15],[12752,41,11591,11],[12752,43,11591,39],[12753,0,11592,6],[12753,14,11592,10,"isPrivate"],[12753,23,11592,6],[12753,25,11592,21],[12754,0,11593,8],[12754,17,11593,13,"pushClassPrivateProperty"],[12754,41,11593,8],[12754,42,11593,38,"classBody"],[12754,51,11593,8],[12754,53,11593,49,"privateProp"],[12754,64,11593,8],[12755,0,11594,7],[12755,11,11592,6],[12755,17,11594,13],[12756,0,11595,8],[12756,17,11595,13,"pushClassProperty"],[12756,34,11595,8],[12756,35,11595,31,"classBody"],[12756,44,11595,8],[12756,46,11595,42,"publicProp"],[12756,56,11595,8],[12757,0,11596,7],[12758,0,11597,5],[12758,9,11591,11],[12758,15,11597,11],[12758,19,11597,15,"isSimple"],[12758,27,11597,23],[12758,31,11597,27,"key"],[12758,34,11597,30],[12758,35,11597,31,"name"],[12758,39,11597,27],[12758,44,11597,40],[12758,51,11597,15],[12758,55,11597,51],[12758,56,11597,52,"containsEsc"],[12758,67,11597,15],[12758,71,11597,67],[12758,72,11597,68],[12758,77,11597,73,"isLineTerminator"],[12758,93,11597,68],[12758,95,11597,11],[12758,97,11597,93],[12759,0,11598,6],[12759,14,11598,12,"isGenerator"],[12759,25,11598,23],[12759,28,11598,26],[12759,33,11598,31,"eat"],[12759,36,11598,26],[12759,37,11598,35,"types"],[12759,42,11598,40],[12759,43,11598,41,"star"],[12759,47,11598,26],[12759,48,11598,6],[12761,0,11600,6],[12761,14,11600,10,"publicMember"],[12761,26,11600,22],[12761,27,11600,23,"optional"],[12761,35,11600,6],[12761,37,11600,33],[12762,0,11601,8],[12762,17,11601,13,"unexpected"],[12762,27,11601,8],[12762,28,11601,24,"maybeQuestionTokenStart"],[12762,51,11601,8],[12763,0,11602,7],[12765,0,11604,6,"method"],[12765,10,11604,6,"method"],[12765,16,11604,12],[12765,17,11604,13,"kind"],[12765,21,11604,6],[12765,24,11604,20],[12765,32,11604,6],[12766,0,11605,6],[12766,15,11605,11,"parseClassPropertyName"],[12766,37,11605,6],[12766,38,11605,34,"method"],[12766,44,11605,6],[12767,0,11606,6],[12767,15,11606,11,"parsePostMemberNameModifiers"],[12767,43,11606,6],[12767,44,11606,40,"publicMember"],[12767,56,11606,6],[12769,0,11608,6],[12769,14,11608,10,"method"],[12769,20,11608,16],[12769,21,11608,17,"key"],[12769,24,11608,10],[12769,25,11608,21,"type"],[12769,29,11608,10],[12769,34,11608,30],[12769,47,11608,6],[12769,49,11608,45],[12770,0,11609,8],[12770,17,11609,13,"pushClassPrivateMethod"],[12770,39,11609,8],[12770,40,11609,36,"classBody"],[12770,49,11609,8],[12770,51,11609,47,"privateMethod"],[12770,64,11609,8],[12770,66,11609,62,"isGenerator"],[12770,77,11609,8],[12770,79,11609,75],[12770,83,11609,8],[12771,0,11610,7],[12771,11,11608,6],[12771,17,11610,13],[12772,0,11611,8],[12772,16,11611,12],[12772,21,11611,17,"isNonstaticConstructor"],[12772,43,11611,12],[12772,44,11611,40,"publicMethod"],[12772,56,11611,12],[12772,57,11611,8],[12772,59,11611,55],[12773,0,11612,10],[12773,19,11612,15,"raise"],[12773,24,11612,10],[12773,25,11612,21,"publicMethod"],[12773,37,11612,33],[12773,38,11612,34,"key"],[12773,41,11612,21],[12773,42,11612,38,"start"],[12773,47,11612,10],[12773,49,11612,45],[12773,89,11612,10],[12774,0,11613,9],[12776,0,11615,8],[12776,17,11615,13,"pushClassMethod"],[12776,32,11615,8],[12776,33,11615,29,"classBody"],[12776,42,11615,8],[12776,44,11615,40,"publicMethod"],[12776,56,11615,8],[12776,58,11615,54,"isGenerator"],[12776,69,11615,8],[12776,71,11615,67],[12776,75,11615,8],[12776,77,11615,73],[12776,82,11615,8],[12776,84,11615,80],[12776,89,11615,8],[12777,0,11616,7],[12778,0,11617,5],[12778,9,11597,11],[12778,15,11617,11],[12778,19,11617,15,"isSimple"],[12778,27,11617,23],[12778,32,11617,28,"key"],[12778,35,11617,31],[12778,36,11617,32,"name"],[12778,40,11617,28],[12778,45,11617,41],[12778,50,11617,28],[12778,54,11617,50,"key"],[12778,57,11617,53],[12778,58,11617,54,"name"],[12778,62,11617,50],[12778,67,11617,63],[12778,72,11617,23],[12778,73,11617,15],[12778,77,11617,73],[12778,78,11617,74,"containsEsc"],[12778,89,11617,15],[12778,93,11617,89],[12778,95,11617,91],[12778,100,11617,96,"match"],[12778,105,11617,91],[12778,106,11617,102,"types"],[12778,111,11617,107],[12778,112,11617,108,"star"],[12778,116,11617,91],[12778,121,11617,117],[12778,126,11617,122,"isLineTerminator"],[12778,142,11617,117],[12778,144,11617,89],[12778,145,11617,11],[12778,147,11617,143],[12779,0,11618,6,"method"],[12779,10,11618,6,"method"],[12779,16,11618,12],[12779,17,11618,13,"kind"],[12779,21,11618,6],[12779,24,11618,20,"key"],[12779,27,11618,23],[12779,28,11618,24,"name"],[12779,32,11618,6],[12780,0,11619,6],[12780,15,11619,11,"parseClassPropertyName"],[12780,37,11619,6],[12780,38,11619,34,"publicMethod"],[12780,50,11619,6],[12782,0,11621,6],[12782,14,11621,10,"method"],[12782,20,11621,16],[12782,21,11621,17,"key"],[12782,24,11621,10],[12782,25,11621,21,"type"],[12782,29,11621,10],[12782,34,11621,30],[12782,47,11621,6],[12782,49,11621,45],[12783,0,11622,8],[12783,17,11622,13,"pushClassPrivateMethod"],[12783,39,11622,8],[12783,40,11622,36,"classBody"],[12783,49,11622,8],[12783,51,11622,47,"privateMethod"],[12783,64,11622,8],[12783,66,11622,62],[12783,71,11622,8],[12783,73,11622,69],[12783,78,11622,8],[12784,0,11623,7],[12784,11,11621,6],[12784,17,11623,13],[12785,0,11624,8],[12785,16,11624,12],[12785,21,11624,17,"isNonstaticConstructor"],[12785,43,11624,12],[12785,44,11624,40,"publicMethod"],[12785,56,11624,12],[12785,57,11624,8],[12785,59,11624,55],[12786,0,11625,10],[12786,19,11625,15,"raise"],[12786,24,11625,10],[12786,25,11625,21,"publicMethod"],[12786,37,11625,33],[12786,38,11625,34,"key"],[12786,41,11625,21],[12786,42,11625,38,"start"],[12786,47,11625,10],[12786,49,11625,45],[12786,90,11625,10],[12787,0,11626,9],[12789,0,11628,8],[12789,17,11628,13,"pushClassMethod"],[12789,32,11628,8],[12789,33,11628,29,"classBody"],[12789,42,11628,8],[12789,44,11628,40,"publicMethod"],[12789,56,11628,8],[12789,58,11628,54],[12789,63,11628,8],[12789,65,11628,61],[12789,70,11628,8],[12789,72,11628,68],[12789,77,11628,8],[12789,79,11628,75],[12789,84,11628,8],[12790,0,11629,7],[12792,0,11631,6],[12792,15,11631,11,"checkGetterSetterParams"],[12792,38,11631,6],[12792,39,11631,35,"publicMethod"],[12792,51,11631,6],[12793,0,11632,5],[12793,9,11617,11],[12793,15,11632,11],[12793,19,11632,15],[12793,24,11632,20,"isLineTerminator"],[12793,40,11632,15],[12793,42,11632,11],[12793,44,11632,40],[12794,0,11633,6],[12794,14,11633,10,"isPrivate"],[12794,23,11633,6],[12794,25,11633,21],[12795,0,11634,8],[12795,17,11634,13,"pushClassPrivateProperty"],[12795,41,11634,8],[12795,42,11634,38,"classBody"],[12795,51,11634,8],[12795,53,11634,49,"privateProp"],[12795,64,11634,8],[12796,0,11635,7],[12796,11,11633,6],[12796,17,11635,13],[12797,0,11636,8],[12797,17,11636,13,"pushClassProperty"],[12797,34,11636,8],[12797,35,11636,31,"classBody"],[12797,44,11636,8],[12797,46,11636,42,"publicProp"],[12797,56,11636,8],[12798,0,11637,7],[12799,0,11638,5],[12799,9,11632,11],[12799,15,11638,11],[12800,0,11639,6],[12800,15,11639,11,"unexpected"],[12800,25,11639,6],[12801,0,11640,5],[12802,0,11641,3],[12805,45,11643,25,"member"],[12805,51],[12805,53,11643,33],[12806,0,11644,4],[12806,12,11644,10,"key"],[12806,15,11644,13],[12806,18,11644,16],[12806,23,11644,21,"parsePropertyName"],[12806,40,11644,16],[12806,41,11644,39,"member"],[12806,47,11644,16],[12806,48,11644,4],[12808,0,11646,4],[12808,12,11646,8],[12808,13,11646,9,"member"],[12808,19,11646,15],[12808,20,11646,16,"computed"],[12808,28,11646,8],[12808,32,11646,28,"member"],[12808,38,11646,34],[12808,39,11646,35,"static"],[12808,45,11646,8],[12808,50,11646,46,"key"],[12808,53,11646,49],[12808,54,11646,50,"name"],[12808,58,11646,46],[12808,63,11646,59],[12808,74,11646,46],[12808,78,11646,74,"key"],[12808,81,11646,77],[12808,82,11646,78,"value"],[12808,87,11646,74],[12808,92,11646,88],[12808,103,11646,8],[12808,104,11646,4],[12808,106,11646,102],[12809,0,11647,6],[12809,15,11647,11,"raise"],[12809,20,11647,6],[12809,21,11647,17,"key"],[12809,24,11647,20],[12809,25,11647,21,"start"],[12809,30,11647,6],[12809,32,11647,28],[12809,86,11647,6],[12810,0,11648,5],[12812,0,11650,4],[12812,12,11650,8,"key"],[12812,15,11650,11],[12812,16,11650,12,"type"],[12812,20,11650,8],[12812,25,11650,21],[12812,38,11650,8],[12812,42,11650,38,"key"],[12812,45,11650,41],[12812,46,11650,42,"id"],[12812,48,11650,38],[12812,49,11650,45,"name"],[12812,53,11650,38],[12812,58,11650,54],[12812,71,11650,4],[12812,73,11650,69],[12813,0,11651,6],[12813,15,11651,11,"raise"],[12813,20,11651,6],[12813,21,11651,17,"key"],[12813,24,11651,20],[12813,25,11651,21,"start"],[12813,30,11651,6],[12813,32,11651,28],[12813,91,11651,6],[12814,0,11652,5],[12816,0,11654,4],[12816,15,11654,11,"key"],[12816,18,11654,4],[12817,0,11655,3],[12820,40,11657,20,"classBody"],[12820,49],[12820,51,11657,31,"prop"],[12820,55],[12820,57,11657,37],[12821,0,11658,4],[12821,12,11658,8],[12821,13,11658,9,"prop"],[12821,17,11658,13],[12821,18,11658,14,"computed"],[12821,26,11658,8],[12821,31,11658,27,"prop"],[12821,35,11658,31],[12821,36,11658,32,"key"],[12821,39,11658,27],[12821,40,11658,36,"name"],[12821,44,11658,27],[12821,49,11658,45],[12821,62,11658,27],[12821,66,11658,62,"prop"],[12821,70,11658,66],[12821,71,11658,67,"key"],[12821,74,11658,62],[12821,75,11658,71,"value"],[12821,80,11658,62],[12821,85,11658,81],[12821,98,11658,8],[12821,99,11658,4],[12821,101,11658,97],[12822,0,11659,6],[12822,15,11659,11,"raise"],[12822,20,11659,6],[12822,21,11659,17,"prop"],[12822,25,11659,21],[12822,26,11659,22,"key"],[12822,29,11659,17],[12822,30,11659,26,"start"],[12822,35,11659,6],[12822,37,11659,33],[12822,87,11659,6],[12823,0,11660,5],[12825,0,11662,4,"classBody"],[12825,8,11662,4,"classBody"],[12825,17,11662,13],[12825,18,11662,14,"body"],[12825,22,11662,4],[12825,23,11662,19,"push"],[12825,27,11662,4],[12825,28,11662,24],[12825,33,11662,29,"parseClassProperty"],[12825,51,11662,24],[12825,52,11662,48,"prop"],[12825,56,11662,24],[12825,57,11662,4],[12826,0,11663,3],[12829,47,11665,27,"classBody"],[12829,56],[12829,58,11665,38,"prop"],[12829,62],[12829,64,11665,44],[12830,0,11666,4],[12830,13,11666,9,"expectPlugin"],[12830,25,11666,4],[12830,26,11666,22],[12830,50,11666,4],[12830,52,11666,48,"prop"],[12830,56,11666,52],[12830,57,11666,53,"key"],[12830,60,11666,48],[12830,61,11666,57,"start"],[12830,66,11666,4],[12831,0,11667,4,"classBody"],[12831,8,11667,4,"classBody"],[12831,17,11667,13],[12831,18,11667,14,"body"],[12831,22,11667,4],[12831,23,11667,19,"push"],[12831,27,11667,4],[12831,28,11667,24],[12831,33,11667,29,"parseClassPrivateProperty"],[12831,58,11667,24],[12831,59,11667,55,"prop"],[12831,63,11667,24],[12831,64,11667,4],[12832,0,11668,3],[12835,38,11670,18,"classBody"],[12835,47],[12835,49,11670,29,"method"],[12835,55],[12835,57,11670,37,"isGenerator"],[12835,68],[12835,70,11670,50,"isAsync"],[12835,77],[12835,79,11670,59,"isConstructor"],[12835,92],[12835,94,11670,74,"allowsDirectSuper"],[12835,111],[12835,113,11670,93],[12836,0,11671,4,"classBody"],[12836,8,11671,4,"classBody"],[12836,17,11671,13],[12836,18,11671,14,"body"],[12836,22,11671,4],[12836,23,11671,19,"push"],[12836,27,11671,4],[12836,28,11671,24],[12836,33,11671,29,"parseMethod"],[12836,44,11671,24],[12836,45,11671,41,"method"],[12836,51,11671,24],[12836,53,11671,49,"isGenerator"],[12836,64,11671,24],[12836,66,11671,62,"isAsync"],[12836,73,11671,24],[12836,75,11671,71,"isConstructor"],[12836,88,11671,24],[12836,90,11671,86,"allowsDirectSuper"],[12836,107,11671,24],[12836,109,11671,105],[12836,122,11671,24],[12836,124,11671,120],[12836,128,11671,24],[12836,129,11671,4],[12837,0,11672,3],[12840,45,11674,25,"classBody"],[12840,54],[12840,56,11674,36,"method"],[12840,62],[12840,64,11674,44,"isGenerator"],[12840,75],[12840,77,11674,57,"isAsync"],[12840,84],[12840,86,11674,66],[12841,0,11675,4],[12841,13,11675,9,"expectPlugin"],[12841,25,11675,4],[12841,26,11675,22],[12841,47,11675,4],[12841,49,11675,45,"method"],[12841,55,11675,51],[12841,56,11675,52,"key"],[12841,59,11675,45],[12841,60,11675,56,"start"],[12841,65,11675,4],[12842,0,11676,4,"classBody"],[12842,8,11676,4,"classBody"],[12842,17,11676,13],[12842,18,11676,14,"body"],[12842,22,11676,4],[12842,23,11676,19,"push"],[12842,27,11676,4],[12842,28,11676,24],[12842,33,11676,29,"parseMethod"],[12842,44,11676,24],[12842,45,11676,41,"method"],[12842,51,11676,24],[12842,53,11676,49,"isGenerator"],[12842,64,11676,24],[12842,66,11676,62,"isAsync"],[12842,73,11676,24],[12842,75,11676,71],[12842,80,11676,24],[12842,82,11676,78],[12842,87,11676,24],[12842,89,11676,85],[12842,109,11676,24],[12842,111,11676,107],[12842,115,11676,24],[12842,116,11676,4],[12843,0,11677,3],[12846,51,11679,31,"methodOrProp"],[12846,63],[12846,65,11679,45],[12846,66,11679,47],[12849,44,11681,24],[12850,0,11682,4],[12850,15,11682,11,"undefined"],[12850,24,11682,4],[12851,0,11683,3],[12854,48,11685,28,"node"],[12854,52],[12854,54,11685,34],[12855,0,11686,4],[12855,13,11686,9,"state"],[12855,18,11686,4],[12855,19,11686,15,"inClassProperty"],[12855,34,11686,4],[12855,37,11686,33],[12855,41,11686,4],[12856,0,11687,4],[12856,13,11687,9,"scope"],[12856,18,11687,4],[12856,19,11687,15,"enter"],[12856,24,11687,4],[12856,25,11687,21,"SCOPE_CLASS"],[12856,36,11687,32],[12856,39,11687,35,"SCOPE_SUPER"],[12856,50,11687,4],[12857,0,11688,4,"node"],[12857,8,11688,4,"node"],[12857,12,11688,8],[12857,13,11688,9,"value"],[12857,18,11688,4],[12857,21,11688,17],[12857,26,11688,22,"eat"],[12857,29,11688,17],[12857,30,11688,26,"types"],[12857,35,11688,31],[12857,36,11688,32,"eq"],[12857,38,11688,17],[12857,42,11688,38],[12857,47,11688,43,"parseMaybeAssign"],[12857,63,11688,38],[12857,65,11688,17],[12857,68,11688,64],[12857,72,11688,4],[12858,0,11689,4],[12858,13,11689,9,"semicolon"],[12858,22,11689,4],[12859,0,11690,4],[12859,13,11690,9,"state"],[12859,18,11690,4],[12859,19,11690,15,"inClassProperty"],[12859,34,11690,4],[12859,37,11690,33],[12859,42,11690,4],[12860,0,11691,4],[12860,13,11691,9,"scope"],[12860,18,11691,4],[12860,19,11691,15,"exit"],[12860,23,11691,4],[12861,0,11692,4],[12861,15,11692,11],[12861,20,11692,16,"finishNode"],[12861,30,11692,11],[12861,31,11692,27,"node"],[12861,35,11692,11],[12861,37,11692,33],[12861,59,11692,11],[12861,60,11692,4],[12862,0,11693,3],[12865,41,11695,21,"node"],[12865,45],[12865,47,11695,27],[12866,0,11696,4],[12866,12,11696,8],[12866,13,11696,9,"node"],[12866,17,11696,13],[12866,18,11696,14,"typeAnnotation"],[12866,32,11696,4],[12866,34,11696,30],[12867,0,11697,6],[12867,15,11697,11,"expectPlugin"],[12867,27,11697,6],[12867,28,11697,24],[12867,45,11697,6],[12868,0,11698,5],[12870,0,11700,4],[12870,13,11700,9,"state"],[12870,18,11700,4],[12870,19,11700,15,"inClassProperty"],[12870,34,11700,4],[12870,37,11700,33],[12870,41,11700,4],[12871,0,11701,4],[12871,13,11701,9,"scope"],[12871,18,11701,4],[12871,19,11701,15,"enter"],[12871,24,11701,4],[12871,25,11701,21,"SCOPE_CLASS"],[12871,36,11701,32],[12871,39,11701,35,"SCOPE_SUPER"],[12871,50,11701,4],[12873,0,11703,4],[12873,12,11703,8],[12873,17,11703,13,"match"],[12873,22,11703,8],[12873,23,11703,19,"types"],[12873,28,11703,24],[12873,29,11703,25,"eq"],[12873,31,11703,8],[12873,32,11703,4],[12873,34,11703,30],[12874,0,11704,6],[12874,15,11704,11,"expectPlugin"],[12874,27,11704,6],[12874,28,11704,24],[12874,45,11704,6],[12875,0,11705,6],[12875,15,11705,11,"next"],[12875,19,11705,6],[12876,0,11706,6,"node"],[12876,10,11706,6,"node"],[12876,14,11706,10],[12876,15,11706,11,"value"],[12876,20,11706,6],[12876,23,11706,19],[12876,28,11706,24,"parseMaybeAssign"],[12876,44,11706,19],[12876,46,11706,6],[12877,0,11707,5],[12877,9,11703,4],[12877,15,11707,11],[12878,0,11708,6,"node"],[12878,10,11708,6,"node"],[12878,14,11708,10],[12878,15,11708,11,"value"],[12878,20,11708,6],[12878,23,11708,19],[12878,27,11708,6],[12879,0,11709,5],[12881,0,11711,4],[12881,13,11711,9,"semicolon"],[12881,22,11711,4],[12882,0,11712,4],[12882,13,11712,9,"state"],[12882,18,11712,4],[12882,19,11712,15,"inClassProperty"],[12882,34,11712,4],[12882,37,11712,33],[12882,42,11712,4],[12883,0,11713,4],[12883,13,11713,9,"scope"],[12883,18,11713,4],[12883,19,11713,15,"exit"],[12883,23,11713,4],[12884,0,11714,4],[12884,15,11714,11],[12884,20,11714,16,"finishNode"],[12884,30,11714,11],[12884,31,11714,27,"node"],[12884,35,11714,11],[12884,37,11714,33],[12884,52,11714,11],[12884,53,11714,4],[12885,0,11715,3],[12888,35,11717,15,"node"],[12888,39],[12888,41,11717,21,"isStatement"],[12888,52],[12888,54,11717,34,"optionalId"],[12888,64],[12888,66,11717,72],[12889,0,11717,72],[12889,12,11717,46,"bindingType"],[12889,23,11717,72],[12889,94,11717,60,"BIND_CLASS"],[12889,104,11717,72],[12891,0,11718,4],[12891,12,11718,8],[12891,17,11718,13,"match"],[12891,22,11718,8],[12891,23,11718,19,"types"],[12891,28,11718,24],[12891,29,11718,25,"name"],[12891,33,11718,8],[12891,34,11718,4],[12891,36,11718,32],[12892,0,11719,6,"node"],[12892,10,11719,6,"node"],[12892,14,11719,10],[12892,15,11719,11,"id"],[12892,17,11719,6],[12892,20,11719,16],[12892,25,11719,21,"parseIdentifier"],[12892,40,11719,16],[12892,42,11719,6],[12894,0,11721,6],[12894,14,11721,10,"isStatement"],[12894,25,11721,6],[12894,27,11721,23],[12895,0,11722,8],[12895,17,11722,13,"checkLVal"],[12895,26,11722,8],[12895,27,11722,23,"node"],[12895,31,11722,27],[12895,32,11722,28,"id"],[12895,34,11722,8],[12895,36,11722,32,"bindingType"],[12895,47,11722,8],[12895,49,11722,45,"undefined"],[12895,58,11722,8],[12895,60,11722,56],[12895,72,11722,8],[12896,0,11723,7],[12897,0,11724,5],[12897,9,11718,4],[12897,15,11724,11],[12898,0,11725,6],[12898,14,11725,10,"optionalId"],[12898,24,11725,20],[12898,28,11725,24],[12898,29,11725,25,"isStatement"],[12898,40,11725,6],[12898,42,11725,38],[12899,0,11726,8,"node"],[12899,12,11726,8,"node"],[12899,16,11726,12],[12899,17,11726,13,"id"],[12899,19,11726,8],[12899,22,11726,18],[12899,26,11726,8],[12900,0,11727,7],[12900,11,11725,6],[12900,17,11727,13],[12901,0,11728,8],[12901,17,11728,13,"unexpected"],[12901,27,11728,8],[12901,28,11728,24],[12901,32,11728,8],[12901,34,11728,30],[12901,60,11728,8],[12902,0,11729,7],[12903,0,11730,5],[12904,0,11731,3],[12907,38,11733,18,"node"],[12907,42],[12907,44,11733,24],[12908,0,11734,4,"node"],[12908,8,11734,4,"node"],[12908,12,11734,8],[12908,13,11734,9,"superClass"],[12908,23,11734,4],[12908,26,11734,22],[12908,31,11734,27,"eat"],[12908,34,11734,22],[12908,35,11734,31,"types"],[12908,40,11734,36],[12908,41,11734,37,"_extends"],[12908,49,11734,22],[12908,53,11734,49],[12908,58,11734,54,"parseExprSubscripts"],[12908,77,11734,49],[12908,79,11734,22],[12908,82,11734,78],[12908,86,11734,4],[12909,0,11735,3],[12912,34,11737,14,"node"],[12912,38],[12912,40,11737,20],[12913,0,11738,4],[12913,12,11738,10,"hasDefault"],[12913,22,11738,20],[12913,25,11738,23],[12913,30,11738,28,"maybeParseExportDefaultSpecifier"],[12913,62,11738,23],[12913,63,11738,61,"node"],[12913,67,11738,23],[12913,68,11738,4],[12914,0,11739,4],[12914,12,11739,10,"parseAfterDefault"],[12914,29,11739,27],[12914,32,11739,30],[12914,33,11739,31,"hasDefault"],[12914,43,11739,30],[12914,47,11739,45],[12914,52,11739,50,"eat"],[12914,55,11739,45],[12914,56,11739,54,"types"],[12914,61,11739,59],[12914,62,11739,60,"comma"],[12914,67,11739,45],[12914,68,11739,4],[12915,0,11740,4],[12915,12,11740,10,"hasStar"],[12915,19,11740,17],[12915,22,11740,20,"parseAfterDefault"],[12915,39,11740,37],[12915,43,11740,41],[12915,48,11740,46,"eatExportStar"],[12915,61,11740,41],[12915,62,11740,60,"node"],[12915,66,11740,41],[12915,67,11740,4],[12916,0,11741,4],[12916,12,11741,10,"hasNamespace"],[12916,24,11741,22],[12916,27,11741,25,"hasStar"],[12916,34,11741,32],[12916,38,11741,36],[12916,43,11741,41,"maybeParseExportNamespaceSpecifier"],[12916,77,11741,36],[12916,78,11741,76,"node"],[12916,82,11741,36],[12916,83,11741,4],[12917,0,11742,4],[12917,12,11742,10,"parseAfterNamespace"],[12917,31,11742,29],[12917,34,11742,32,"parseAfterDefault"],[12917,51,11742,49],[12917,56,11742,54],[12917,57,11742,55,"hasNamespace"],[12917,69,11742,54],[12917,73,11742,71],[12917,78,11742,76,"eat"],[12917,81,11742,71],[12917,82,11742,80,"types"],[12917,87,11742,85],[12917,88,11742,86,"comma"],[12917,93,11742,71],[12917,94,11742,49],[12917,95,11742,4],[12918,0,11743,4],[12918,12,11743,10,"isFromRequired"],[12918,26,11743,24],[12918,29,11743,27,"hasDefault"],[12918,39,11743,37],[12918,43,11743,41,"hasStar"],[12918,50,11743,4],[12920,0,11745,4],[12920,12,11745,8,"hasStar"],[12920,19,11745,15],[12920,23,11745,19],[12920,24,11745,20,"hasNamespace"],[12920,36,11745,4],[12920,38,11745,34],[12921,0,11746,6],[12921,14,11746,10,"hasDefault"],[12921,24,11746,6],[12921,26,11746,22],[12921,31,11746,27,"unexpected"],[12921,41,11746,22],[12922,0,11747,6],[12922,15,11747,11,"parseExportFrom"],[12922,30,11747,6],[12922,31,11747,27,"node"],[12922,35,11747,6],[12922,37,11747,33],[12922,41,11747,6],[12923,0,11748,6],[12923,17,11748,13],[12923,22,11748,18,"finishNode"],[12923,32,11748,13],[12923,33,11748,29,"node"],[12923,37,11748,13],[12923,39,11748,35],[12923,61,11748,13],[12923,62,11748,6],[12924,0,11749,5],[12926,0,11751,4],[12926,12,11751,10,"hasSpecifiers"],[12926,25,11751,23],[12926,28,11751,26],[12926,33,11751,31,"maybeParseExportNamedSpecifiers"],[12926,64,11751,26],[12926,65,11751,63,"node"],[12926,69,11751,26],[12926,70,11751,4],[12928,0,11753,4],[12928,12,11753,8,"hasDefault"],[12928,22,11753,18],[12928,26,11753,22,"parseAfterDefault"],[12928,43,11753,8],[12928,47,11753,43],[12928,48,11753,44,"hasStar"],[12928,55,11753,8],[12928,59,11753,55],[12928,60,11753,56,"hasSpecifiers"],[12928,73,11753,8],[12928,77,11753,73,"hasNamespace"],[12928,89,11753,85],[12928,93,11753,89,"parseAfterNamespace"],[12928,112,11753,73],[12928,116,11753,112],[12928,117,11753,113,"hasSpecifiers"],[12928,130,11753,4],[12928,132,11753,128],[12929,0,11754,6],[12929,16,11754,12],[12929,21,11754,17,"unexpected"],[12929,31,11754,12],[12929,32,11754,28],[12929,36,11754,12],[12929,38,11754,34,"types"],[12929,43,11754,39],[12929,44,11754,40,"braceL"],[12929,50,11754,12],[12929,51,11754,6],[12930,0,11755,5],[12932,0,11757,4],[12932,12,11757,8,"hasDeclaration"],[12932,26,11757,4],[12934,0,11759,4],[12934,12,11759,8,"isFromRequired"],[12934,26,11759,22],[12934,30,11759,26,"hasSpecifiers"],[12934,43,11759,4],[12934,45,11759,41],[12935,0,11760,6,"hasDeclaration"],[12935,10,11760,6,"hasDeclaration"],[12935,24,11760,20],[12935,27,11760,23],[12935,32,11760,6],[12936,0,11761,6],[12936,15,11761,11,"parseExportFrom"],[12936,30,11761,6],[12936,31,11761,27,"node"],[12936,35,11761,6],[12936,37,11761,33,"isFromRequired"],[12936,51,11761,6],[12937,0,11762,5],[12937,9,11759,4],[12937,15,11762,11],[12938,0,11763,6,"hasDeclaration"],[12938,10,11763,6,"hasDeclaration"],[12938,24,11763,20],[12938,27,11763,23],[12938,32,11763,28,"maybeParseExportDeclaration"],[12938,59,11763,23],[12938,60,11763,56,"node"],[12938,64,11763,23],[12938,65,11763,6],[12939,0,11764,5],[12941,0,11766,4],[12941,12,11766,8,"isFromRequired"],[12941,26,11766,22],[12941,30,11766,26,"hasSpecifiers"],[12941,43,11766,8],[12941,47,11766,43,"hasDeclaration"],[12941,61,11766,4],[12941,63,11766,59],[12942,0,11767,6],[12942,15,11767,11,"checkExport"],[12942,26,11767,6],[12942,27,11767,23,"node"],[12942,31,11767,6],[12942,33,11767,29],[12942,37,11767,6],[12942,39,11767,35],[12942,44,11767,6],[12942,46,11767,42],[12942,47,11767,43],[12942,48,11767,44,"node"],[12942,52,11767,48],[12942,53,11767,49,"source"],[12942,59,11767,6],[12943,0,11768,6],[12943,17,11768,13],[12943,22,11768,18,"finishNode"],[12943,32,11768,13],[12943,33,11768,29,"node"],[12943,37,11768,13],[12943,39,11768,35],[12943,63,11768,13],[12943,64,11768,6],[12944,0,11769,5],[12946,0,11771,4],[12946,12,11771,8],[12946,17,11771,13,"eat"],[12946,20,11771,8],[12946,21,11771,17,"types"],[12946,26,11771,22],[12946,27,11771,23,"_default"],[12946,35,11771,8],[12946,36,11771,4],[12946,38,11771,34],[12947,0,11772,6,"node"],[12947,10,11772,6,"node"],[12947,14,11772,10],[12947,15,11772,11,"declaration"],[12947,26,11772,6],[12947,29,11772,25],[12947,34,11772,30,"parseExportDefaultExpression"],[12947,62,11772,25],[12947,64,11772,6],[12948,0,11773,6],[12948,15,11773,11,"checkExport"],[12948,26,11773,6],[12948,27,11773,23,"node"],[12948,31,11773,6],[12948,33,11773,29],[12948,37,11773,6],[12948,39,11773,35],[12948,43,11773,6],[12949,0,11774,6],[12949,17,11774,13],[12949,22,11774,18,"finishNode"],[12949,32,11774,13],[12949,33,11774,29,"node"],[12949,37,11774,13],[12949,39,11774,35],[12949,65,11774,13],[12949,66,11774,6],[12950,0,11775,5],[12952,0,11777,4],[12952,14,11777,10],[12952,19,11777,15,"unexpected"],[12952,29,11777,10],[12952,30,11777,26],[12952,34,11777,10],[12952,36,11777,32,"types"],[12952,41,11777,37],[12952,42,11777,38,"braceL"],[12952,48,11777,10],[12952,49,11777,4],[12953,0,11778,3],[12956,36,11780,16,"node"],[12956,40],[12956,42,11780,22],[12957,0,11781,4],[12957,15,11781,11],[12957,20,11781,16,"eat"],[12957,23,11781,11],[12957,24,11781,20,"types"],[12957,29,11781,25],[12957,30,11781,26,"star"],[12957,34,11781,11],[12957,35,11781,4],[12958,0,11782,3],[12961,55,11784,35,"node"],[12961,59],[12961,61,11784,41],[12962,0,11785,4],[12962,12,11785,8],[12962,17,11785,13,"isExportDefaultSpecifier"],[12962,41,11785,8],[12962,43,11785,4],[12962,45,11785,41],[12963,0,11786,6],[12963,15,11786,11,"expectPlugin"],[12963,27,11786,6],[12963,28,11786,24],[12963,47,11786,6],[12964,0,11787,6],[12964,14,11787,12,"specifier"],[12964,23,11787,21],[12964,26,11787,24],[12964,31,11787,29,"startNode"],[12964,40,11787,24],[12964,42,11787,6],[12965,0,11788,6,"specifier"],[12965,10,11788,6,"specifier"],[12965,19,11788,15],[12965,20,11788,16,"exported"],[12965,28,11788,6],[12965,31,11788,27],[12965,36,11788,32,"parseIdentifier"],[12965,51,11788,27],[12965,52,11788,48],[12965,56,11788,27],[12965,57,11788,6],[12966,0,11789,6,"node"],[12966,10,11789,6,"node"],[12966,14,11789,10],[12966,15,11789,11,"specifiers"],[12966,25,11789,6],[12966,28,11789,24],[12966,29,11789,25],[12966,34,11789,30,"finishNode"],[12966,44,11789,25],[12966,45,11789,41,"specifier"],[12966,54,11789,25],[12966,56,11789,52],[12966,80,11789,25],[12966,81,11789,24],[12966,82,11789,6],[12967,0,11790,6],[12967,17,11790,13],[12967,21,11790,6],[12968,0,11791,5],[12970,0,11793,4],[12970,15,11793,11],[12970,20,11793,4],[12971,0,11794,3],[12974,57,11796,37,"node"],[12974,61],[12974,63,11796,43],[12975,0,11797,4],[12975,12,11797,8],[12975,17,11797,13,"isContextual"],[12975,29,11797,8],[12975,30,11797,26],[12975,34,11797,8],[12975,35,11797,4],[12975,37,11797,33],[12976,0,11798,6],[12976,14,11798,10],[12976,15,11798,11,"node"],[12976,19,11798,15],[12976,20,11798,16,"specifiers"],[12976,30,11798,6],[12976,32,11798,28,"node"],[12976,36,11798,32],[12976,37,11798,33,"specifiers"],[12976,47,11798,28],[12976,50,11798,46],[12976,52,11798,28],[12977,0,11799,6],[12977,14,11799,12,"specifier"],[12977,23,11799,21],[12977,26,11799,24],[12977,31,11799,29,"startNodeAt"],[12977,42,11799,24],[12977,43,11799,41],[12977,48,11799,46,"state"],[12977,53,11799,41],[12977,54,11799,52,"lastTokStart"],[12977,66,11799,24],[12977,68,11799,66],[12977,73,11799,71,"state"],[12977,78,11799,66],[12977,79,11799,77,"lastTokStartLoc"],[12977,94,11799,24],[12977,95,11799,6],[12978,0,11800,6],[12978,15,11800,11,"next"],[12978,19,11800,6],[12979,0,11801,6,"specifier"],[12979,10,11801,6,"specifier"],[12979,19,11801,15],[12979,20,11801,16,"exported"],[12979,28,11801,6],[12979,31,11801,27],[12979,36,11801,32,"parseIdentifier"],[12979,51,11801,27],[12979,52,11801,48],[12979,56,11801,27],[12979,57,11801,6],[12980,0,11802,6,"node"],[12980,10,11802,6,"node"],[12980,14,11802,10],[12980,15,11802,11,"specifiers"],[12980,25,11802,6],[12980,26,11802,22,"push"],[12980,30,11802,6],[12980,31,11802,27],[12980,36,11802,32,"finishNode"],[12980,46,11802,27],[12980,47,11802,43,"specifier"],[12980,56,11802,27],[12980,58,11802,54],[12980,84,11802,27],[12980,85,11802,6],[12981,0,11803,6],[12981,17,11803,13],[12981,21,11803,6],[12982,0,11804,5],[12984,0,11806,4],[12984,15,11806,11],[12984,20,11806,4],[12985,0,11807,3],[12988,54,11809,34,"node"],[12988,58],[12988,60,11809,40],[12989,0,11810,4],[12989,12,11810,8],[12989,17,11810,13,"match"],[12989,22,11810,8],[12989,23,11810,19,"types"],[12989,28,11810,24],[12989,29,11810,25,"braceL"],[12989,35,11810,8],[12989,36,11810,4],[12989,38,11810,34],[12990,0,11810,34],[12992,0,11811,6],[12992,14,11811,10],[12992,15,11811,11,"node"],[12992,19,11811,15],[12992,20,11811,16,"specifiers"],[12992,30,11811,6],[12992,32,11811,28,"node"],[12992,36,11811,32],[12992,37,11811,33,"specifiers"],[12992,47,11811,28],[12992,50,11811,46],[12992,52,11811,28],[12994,0,11812,6],[12994,31,11812,6,"node"],[12994,35,11812,10],[12994,36,11812,11,"specifiers"],[12994,46,11812,6],[12994,48,11812,22,"push"],[12994,52,11812,6],[12994,97,11812,30],[12994,102,11812,35,"parseExportSpecifiers"],[12994,123,11812,30],[12994,125,11812,6],[12996,0,11813,6,"node"],[12996,10,11813,6,"node"],[12996,14,11813,10],[12996,15,11813,11,"source"],[12996,21,11813,6],[12996,24,11813,20],[12996,28,11813,6],[12997,0,11814,6,"node"],[12997,10,11814,6,"node"],[12997,14,11814,10],[12997,15,11814,11,"declaration"],[12997,26,11814,6],[12997,29,11814,25],[12997,33,11814,6],[12998,0,11815,6],[12998,17,11815,13],[12998,21,11815,6],[12999,0,11816,5],[13001,0,11818,4],[13001,15,11818,11],[13001,20,11818,4],[13002,0,11819,3],[13005,50,11821,30,"node"],[13005,54],[13005,56,11821,36],[13006,0,11822,4],[13006,12,11822,8],[13006,17,11822,13,"shouldParseExportDeclaration"],[13006,45,11822,8],[13006,47,11822,4],[13006,49,11822,45],[13007,0,11823,6],[13007,14,11823,10],[13007,19,11823,15,"isContextual"],[13007,31,11823,10],[13007,32,11823,28],[13007,39,11823,10],[13007,40,11823,6],[13007,42,11823,38],[13008,0,11824,8],[13008,16,11824,14,"next"],[13008,20,11824,18],[13008,23,11824,21],[13008,28,11824,26,"nextTokenStart"],[13008,42,11824,21],[13008,44,11824,8],[13010,0,11826,8],[13010,16,11826,12],[13010,17,11826,13],[13010,22,11826,18,"isUnparsedContextual"],[13010,42,11826,13],[13010,43,11826,39,"next"],[13010,47,11826,13],[13010,49,11826,45],[13010,59,11826,13],[13010,60,11826,8],[13010,62,11826,58],[13011,0,11827,10],[13011,19,11827,15,"unexpected"],[13011,29,11827,10],[13011,30,11827,26,"next"],[13011,34,11827,10],[13012,0,11828,9],[13013,0,11829,7],[13015,0,11831,6,"node"],[13015,10,11831,6,"node"],[13015,14,11831,10],[13015,15,11831,11,"specifiers"],[13015,25,11831,6],[13015,28,11831,24],[13015,30,11831,6],[13016,0,11832,6,"node"],[13016,10,11832,6,"node"],[13016,14,11832,10],[13016,15,11832,11,"source"],[13016,21,11832,6],[13016,24,11832,20],[13016,28,11832,6],[13017,0,11833,6,"node"],[13017,10,11833,6,"node"],[13017,14,11833,10],[13017,15,11833,11,"declaration"],[13017,26,11833,6],[13017,29,11833,25],[13017,34,11833,30,"parseExportDeclaration"],[13017,56,11833,25],[13017,57,11833,53,"node"],[13017,61,11833,25],[13017,62,11833,6],[13018,0,11834,6],[13018,17,11834,13],[13018,21,11834,6],[13019,0,11835,5],[13021,0,11837,4],[13021,15,11837,11],[13021,20,11837,4],[13022,0,11838,3],[13025,40,11840,20],[13026,0,11841,4],[13026,12,11841,8],[13026,13,11841,9],[13026,18,11841,14,"isContextual"],[13026,30,11841,9],[13026,31,11841,27],[13026,38,11841,9],[13026,39,11841,4],[13026,41,11841,37],[13026,48,11841,44],[13026,53,11841,37],[13027,0,11842,4],[13027,12,11842,10,"next"],[13027,16,11842,14],[13027,19,11842,17],[13027,24,11842,22,"nextTokenStart"],[13027,38,11842,17],[13027,40,11842,4],[13028,0,11843,4],[13028,15,11843,11],[13028,16,11843,12,"lineBreak"],[13028,25,11843,21],[13028,26,11843,22,"test"],[13028,30,11843,12],[13028,31,11843,27],[13028,36,11843,32,"input"],[13028,41,11843,27],[13028,42,11843,38,"slice"],[13028,47,11843,27],[13028,48,11843,44],[13028,53,11843,49,"state"],[13028,58,11843,44],[13028,59,11843,55,"pos"],[13028,62,11843,27],[13028,64,11843,60,"next"],[13028,68,11843,27],[13028,69,11843,12],[13028,70,11843,11],[13028,74,11843,70],[13028,79,11843,75,"isUnparsedContextual"],[13028,99,11843,70],[13028,100,11843,96,"next"],[13028,104,11843,70],[13028,106,11843,102],[13028,116,11843,70],[13028,117,11843,4],[13029,0,11844,3],[13032,53,11846,33],[13033,0,11847,4],[13033,12,11847,10,"expr"],[13033,16,11847,14],[13033,19,11847,17],[13033,24,11847,22,"startNode"],[13033,33,11847,17],[13033,35,11847,4],[13034,0,11848,4],[13034,12,11848,10,"isAsync"],[13034,19,11848,17],[13034,22,11848,20],[13034,27,11848,25,"isAsyncFunction"],[13034,42,11848,20],[13034,44,11848,4],[13036,0,11850,4],[13036,12,11850,8],[13036,17,11850,13,"match"],[13036,22,11850,8],[13036,23,11850,19,"types"],[13036,28,11850,24],[13036,29,11850,25,"_function"],[13036,38,11850,8],[13036,43,11850,39,"isAsync"],[13036,50,11850,4],[13036,52,11850,48],[13037,0,11851,6],[13037,15,11851,11,"next"],[13037,19,11851,6],[13039,0,11853,6],[13039,14,11853,10,"isAsync"],[13039,21,11853,6],[13039,23,11853,19],[13040,0,11854,8],[13040,17,11854,13,"next"],[13040,21,11854,8],[13041,0,11855,7],[13043,0,11857,6],[13043,17,11857,13],[13043,22,11857,18,"parseFunction"],[13043,35,11857,13],[13043,36,11857,32,"expr"],[13043,40,11857,13],[13043,42,11857,38,"FUNC_STATEMENT"],[13043,56,11857,52],[13043,59,11857,55,"FUNC_NULLABLE_ID"],[13043,75,11857,13],[13043,77,11857,73,"isAsync"],[13043,84,11857,13],[13043,85,11857,6],[13044,0,11858,5],[13044,9,11850,4],[13044,15,11858,11],[13044,19,11858,15],[13044,24,11858,20,"match"],[13044,29,11858,15],[13044,30,11858,26,"types"],[13044,35,11858,31],[13044,36,11858,32,"_class"],[13044,42,11858,15],[13044,43,11858,11],[13044,45,11858,41],[13045,0,11859,6],[13045,17,11859,13],[13045,22,11859,18,"parseClass"],[13045,32,11859,13],[13045,33,11859,29,"expr"],[13045,37,11859,13],[13045,39,11859,35],[13045,43,11859,13],[13045,45,11859,41],[13045,49,11859,13],[13045,50,11859,6],[13046,0,11860,5],[13046,9,11858,11],[13046,15,11860,11],[13046,19,11860,15],[13046,24,11860,20,"match"],[13046,29,11860,15],[13046,30,11860,26,"types"],[13046,35,11860,31],[13046,36,11860,32,"at"],[13046,38,11860,15],[13046,39,11860,11],[13046,41,11860,37],[13047,0,11861,6],[13047,14,11861,10],[13047,19,11861,15,"hasPlugin"],[13047,28,11861,10],[13047,29,11861,25],[13047,41,11861,10],[13047,46,11861,42],[13047,51,11861,47,"getPluginOption"],[13047,66,11861,42],[13047,67,11861,63],[13047,79,11861,42],[13047,81,11861,77],[13047,105,11861,42],[13047,106,11861,6],[13047,108,11861,104],[13048,0,11862,8],[13048,17,11862,13,"raise"],[13048,22,11862,8],[13048,23,11862,19],[13048,28,11862,24,"state"],[13048,33,11862,19],[13048,34,11862,30,"start"],[13048,39,11862,8],[13048,41,11862,37],[13048,102,11862,98],[13048,168,11862,37],[13048,171,11862,167],[13048,213,11862,8],[13049,0,11863,7],[13051,0,11865,6],[13051,15,11865,11,"parseDecorators"],[13051,30,11865,6],[13051,31,11865,27],[13051,36,11865,6],[13052,0,11866,6],[13052,17,11866,13],[13052,22,11866,18,"parseClass"],[13052,32,11866,13],[13052,33,11866,29,"expr"],[13052,37,11866,13],[13052,39,11866,35],[13052,43,11866,13],[13052,45,11866,41],[13052,49,11866,13],[13052,50,11866,6],[13053,0,11867,5],[13053,9,11860,11],[13053,15,11867,11],[13053,19,11867,15],[13053,24,11867,20,"match"],[13053,29,11867,15],[13053,30,11867,26,"types"],[13053,35,11867,31],[13053,36,11867,32,"_const"],[13053,42,11867,15],[13053,47,11867,43],[13053,52,11867,48,"match"],[13053,57,11867,43],[13053,58,11867,54,"types"],[13053,63,11867,59],[13053,64,11867,60,"_var"],[13053,68,11867,43],[13053,69,11867,15],[13053,73,11867,69],[13053,78,11867,74,"isLet"],[13053,83,11867,69],[13053,85,11867,11],[13053,87,11867,83],[13054,0,11868,6],[13054,16,11868,12],[13054,21,11868,17,"raise"],[13054,26,11868,12],[13054,27,11868,23],[13054,32,11868,28,"state"],[13054,37,11868,23],[13054,38,11868,34,"start"],[13054,43,11868,12],[13054,45,11868,41],[13054,122,11868,12],[13054,123,11868,6],[13055,0,11869,5],[13055,9,11867,11],[13055,15,11869,11],[13056,0,11870,6],[13056,14,11870,12,"res"],[13056,17,11870,15],[13056,20,11870,18],[13056,25,11870,23,"parseMaybeAssign"],[13056,41,11870,18],[13056,43,11870,6],[13057,0,11871,6],[13057,15,11871,11,"semicolon"],[13057,24,11871,6],[13058,0,11872,6],[13058,17,11872,13,"res"],[13058,20,11872,6],[13059,0,11873,5],[13060,0,11874,3],[13063,45,11876,25,"node"],[13063,49],[13063,51,11876,31],[13064,0,11877,4],[13064,15,11877,11],[13064,20,11877,16,"parseStatement"],[13064,34,11877,11],[13064,35,11877,31],[13064,39,11877,11],[13064,40,11877,4],[13065,0,11878,3],[13068,49,11880,29],[13069,0,11881,4],[13069,12,11881,8],[13069,17,11881,13,"match"],[13069,22,11881,8],[13069,23,11881,19,"types"],[13069,28,11881,24],[13069,29,11881,25,"name"],[13069,33,11881,8],[13069,34,11881,4],[13069,36,11881,32],[13070,0,11882,6],[13070,17,11882,13],[13070,22,11882,18,"state"],[13070,27,11882,13],[13070,28,11882,24,"value"],[13070,33,11882,13],[13070,38,11882,34],[13070,45,11882,13],[13070,49,11882,45],[13070,54,11882,50,"state"],[13070,59,11882,45],[13070,60,11882,56,"value"],[13070,65,11882,45],[13070,70,11882,66],[13070,75,11882,6],[13071,0,11883,5],[13073,0,11885,4],[13073,12,11885,8],[13073,13,11885,9],[13073,18,11885,14,"match"],[13073,23,11885,9],[13073,24,11885,20,"types"],[13073,29,11885,25],[13073,30,11885,26,"_default"],[13073,38,11885,9],[13073,39,11885,4],[13073,41,11885,37],[13074,0,11886,6],[13074,17,11886,13],[13074,22,11886,6],[13075,0,11887,5],[13077,0,11889,4],[13077,12,11889,10,"next"],[13077,16,11889,14],[13077,19,11889,17],[13077,24,11889,22,"nextTokenStart"],[13077,38,11889,17],[13077,40,11889,4],[13078,0,11890,4],[13078,15,11890,11],[13078,20,11890,16,"input"],[13078,25,11890,11],[13078,26,11890,22,"charCodeAt"],[13078,36,11890,11],[13078,37,11890,33,"next"],[13078,41,11890,11],[13078,47,11890,43],[13078,49,11890,11],[13078,53,11890,49],[13078,58,11890,54,"isUnparsedContextual"],[13078,78,11890,49],[13078,79,11890,75,"next"],[13078,83,11890,49],[13078,85,11890,81],[13078,91,11890,49],[13078,92,11890,4],[13079,0,11891,3],[13082,38,11893,18,"node"],[13082,42],[13082,44,11893,24,"expect"],[13082,50],[13082,52,11893,32],[13083,0,11894,4],[13083,12,11894,8],[13083,17,11894,13,"eatContextual"],[13083,30,11894,8],[13083,31,11894,27],[13083,37,11894,8],[13083,38,11894,4],[13083,40,11894,36],[13084,0,11895,6,"node"],[13084,10,11895,6,"node"],[13084,14,11895,10],[13084,15,11895,11,"source"],[13084,21,11895,6],[13084,24,11895,20],[13084,29,11895,25,"parseImportSource"],[13084,46,11895,20],[13084,48,11895,6],[13085,0,11896,6],[13085,15,11896,11,"checkExport"],[13085,26,11896,6],[13085,27,11896,23,"node"],[13085,31,11896,6],[13086,0,11897,5],[13086,9,11894,4],[13086,15,11897,11],[13087,0,11898,6],[13087,14,11898,10,"expect"],[13087,20,11898,6],[13087,22,11898,18],[13088,0,11899,8],[13088,17,11899,13,"unexpected"],[13088,27,11899,8],[13089,0,11900,7],[13089,11,11898,6],[13089,17,11900,13],[13090,0,11901,8,"node"],[13090,12,11901,8,"node"],[13090,16,11901,12],[13090,17,11901,13,"source"],[13090,23,11901,8],[13090,26,11901,22],[13090,30,11901,8],[13091,0,11902,7],[13092,0,11903,5],[13094,0,11905,4],[13094,13,11905,9,"semicolon"],[13094,22,11905,4],[13095,0,11906,3],[13098,53,11908,33],[13099,0,11909,4],[13099,12,11909,8],[13099,17,11909,13,"match"],[13099,22,11909,8],[13099,23,11909,19,"types"],[13099,28,11909,24],[13099,29,11909,25,"at"],[13099,31,11909,8],[13099,32,11909,4],[13099,34,11909,30],[13100,0,11910,6],[13100,15,11910,11,"expectOnePlugin"],[13100,30,11910,6],[13100,31,11910,27],[13100,32,11910,28],[13100,44,11910,27],[13100,46,11910,42],[13100,65,11910,27],[13100,66,11910,6],[13102,0,11912,6],[13102,14,11912,10],[13102,19,11912,15,"hasPlugin"],[13102,28,11912,10],[13102,29,11912,25],[13102,41,11912,10],[13102,42,11912,6],[13102,44,11912,40],[13103,0,11913,8],[13103,16,11913,12],[13103,21,11913,17,"getPluginOption"],[13103,36,11913,12],[13103,37,11913,33],[13103,49,11913,12],[13103,51,11913,47],[13103,75,11913,12],[13103,76,11913,8],[13103,78,11913,74],[13104,0,11914,10],[13104,19,11914,15,"unexpected"],[13104,29,11914,10],[13104,30,11914,26],[13104,35,11914,31,"state"],[13104,40,11914,26],[13104,41,11914,37,"start"],[13104,46,11914,10],[13104,48,11914,44],[13104,109,11914,105],[13104,175,11914,44],[13104,178,11914,174],[13104,220,11914,10],[13105,0,11915,9],[13105,13,11913,8],[13105,19,11915,15],[13106,0,11916,10],[13106,21,11916,17],[13106,25,11916,10],[13107,0,11917,9],[13108,0,11918,7],[13109,0,11919,5],[13111,0,11921,4],[13111,15,11921,11],[13111,20,11921,16,"state"],[13111,25,11921,11],[13111,26,11921,22,"type"],[13111,30,11921,11],[13111,31,11921,27,"keyword"],[13111,38,11921,11],[13111,43,11921,39],[13111,48,11921,11],[13111,52,11921,48],[13111,57,11921,53,"state"],[13111,62,11921,48],[13111,63,11921,59,"type"],[13111,67,11921,48],[13111,68,11921,64,"keyword"],[13111,75,11921,48],[13111,80,11921,76],[13111,87,11921,11],[13111,91,11921,87],[13111,96,11921,92,"state"],[13111,101,11921,87],[13111,102,11921,98,"type"],[13111,106,11921,87],[13111,107,11921,103,"keyword"],[13111,114,11921,87],[13111,119,11921,115],[13111,129,11921,11],[13111,133,11921,129],[13111,138,11921,134,"state"],[13111,143,11921,129],[13111,144,11921,140,"type"],[13111,148,11921,129],[13111,149,11921,145,"keyword"],[13111,156,11921,129],[13111,161,11921,157],[13111,168,11921,11],[13111,172,11921,168],[13111,177,11921,173,"isLet"],[13111,182,11921,168],[13111,184,11921,11],[13111,188,11921,184],[13111,193,11921,189,"isAsyncFunction"],[13111,208,11921,184],[13111,210,11921,4],[13112,0,11922,3],[13115,34,11924,14,"node"],[13115,38],[13115,40,11924,20,"checkNames"],[13115,50],[13115,52,11924,32,"isDefault"],[13115,61],[13115,63,11924,43,"isFrom"],[13115,69],[13115,71,11924,51],[13116,0,11925,4],[13116,12,11925,8,"checkNames"],[13116,22,11925,4],[13116,24,11925,20],[13117,0,11926,6],[13117,14,11926,10,"isDefault"],[13117,23,11926,6],[13117,25,11926,21],[13118,0,11927,8],[13118,17,11927,13,"checkDuplicateExports"],[13118,38,11927,8],[13118,39,11927,35,"node"],[13118,43,11927,8],[13118,45,11927,41],[13118,54,11927,8],[13119,0,11928,7],[13119,11,11926,6],[13119,17,11928,13],[13119,21,11928,17,"node"],[13119,25,11928,21],[13119,26,11928,22,"specifiers"],[13119,36,11928,17],[13119,40,11928,36,"node"],[13119,44,11928,40],[13119,45,11928,41,"specifiers"],[13119,55,11928,36],[13119,56,11928,52,"length"],[13119,62,11928,13],[13119,64,11928,60],[13120,0,11929,8],[13120,17,11929,13],[13120,21,11929,17,"_i3"],[13120,24,11929,20],[13120,27,11929,23],[13120,28,11929,13],[13120,30,11929,26,"_node$specifiers"],[13120,46,11929,42],[13120,49,11929,45,"node"],[13120,53,11929,49],[13120,54,11929,50,"specifiers"],[13120,64,11929,8],[13120,66,11929,62,"_i3"],[13120,69,11929,65],[13120,72,11929,68,"_node$specifiers"],[13120,88,11929,84],[13120,89,11929,85,"length"],[13120,95,11929,8],[13120,97,11929,93,"_i3"],[13120,100,11929,96],[13120,102,11929,8],[13120,104,11929,100],[13121,0,11930,10],[13121,18,11930,16,"specifier"],[13121,27,11930,25],[13121,30,11930,28,"_node$specifiers"],[13121,46,11930,44],[13121,47,11930,45,"_i3"],[13121,50,11930,44],[13121,51,11930,10],[13122,0,11931,10],[13122,19,11931,15,"checkDuplicateExports"],[13122,40,11931,10],[13122,41,11931,37,"specifier"],[13122,50,11931,10],[13122,52,11931,48,"specifier"],[13122,61,11931,57],[13122,62,11931,58,"exported"],[13122,70,11931,48],[13122,71,11931,67,"name"],[13122,75,11931,10],[13124,0,11933,10],[13124,18,11933,14],[13124,19,11933,15,"isFrom"],[13124,25,11933,14],[13124,29,11933,25,"specifier"],[13124,38,11933,34],[13124,39,11933,35,"local"],[13124,44,11933,10],[13124,46,11933,42],[13125,0,11934,12],[13125,21,11934,17,"checkReservedWord"],[13125,38,11934,12],[13125,39,11934,35,"specifier"],[13125,48,11934,44],[13125,49,11934,45,"local"],[13125,54,11934,35],[13125,55,11934,51,"name"],[13125,59,11934,12],[13125,61,11934,57,"specifier"],[13125,70,11934,66],[13125,71,11934,67,"local"],[13125,76,11934,57],[13125,77,11934,73,"start"],[13125,82,11934,12],[13125,84,11934,80],[13125,88,11934,12],[13125,90,11934,86],[13125,95,11934,12],[13126,0,11935,12],[13126,21,11935,17,"scope"],[13126,26,11935,12],[13126,27,11935,23,"checkLocalExport"],[13126,43,11935,12],[13126,44,11935,40,"specifier"],[13126,53,11935,49],[13126,54,11935,50,"local"],[13126,59,11935,12],[13127,0,11936,11],[13128,0,11937,9],[13129,0,11938,7],[13129,11,11928,13],[13129,17,11938,13],[13129,21,11938,17,"node"],[13129,25,11938,21],[13129,26,11938,22,"declaration"],[13129,37,11938,13],[13129,39,11938,35],[13130,0,11939,8],[13130,16,11939,12,"node"],[13130,20,11939,16],[13130,21,11939,17,"declaration"],[13130,32,11939,12],[13130,33,11939,29,"type"],[13130,37,11939,12],[13130,42,11939,38],[13130,63,11939,12],[13130,67,11939,63,"node"],[13130,71,11939,67],[13130,72,11939,68,"declaration"],[13130,83,11939,63],[13130,84,11939,80,"type"],[13130,88,11939,63],[13130,93,11939,89],[13130,111,11939,8],[13130,113,11939,109],[13131,0,11940,10],[13131,18,11940,16,"id"],[13131,20,11940,18],[13131,23,11940,21,"node"],[13131,27,11940,25],[13131,28,11940,26,"declaration"],[13131,39,11940,21],[13131,40,11940,38,"id"],[13131,42,11940,10],[13132,0,11941,10],[13132,18,11941,14],[13132,19,11941,15,"id"],[13132,21,11941,10],[13132,23,11941,19],[13132,29,11941,25],[13132,33,11941,29,"Error"],[13132,38,11941,25],[13132,39,11941,35],[13132,58,11941,25],[13132,59,11941,19],[13133,0,11942,10],[13133,19,11942,15,"checkDuplicateExports"],[13133,40,11942,10],[13133,41,11942,37,"node"],[13133,45,11942,10],[13133,47,11942,43,"id"],[13133,49,11942,45],[13133,50,11942,46,"name"],[13133,54,11942,10],[13134,0,11943,9],[13134,13,11939,8],[13134,19,11943,15],[13134,23,11943,19,"node"],[13134,27,11943,23],[13134,28,11943,24,"declaration"],[13134,39,11943,19],[13134,40,11943,36,"type"],[13134,44,11943,19],[13134,49,11943,45],[13134,70,11943,15],[13134,72,11943,68],[13135,0,11944,10],[13135,19,11944,15],[13135,23,11944,19,"_i4"],[13135,26,11944,22],[13135,29,11944,25],[13135,30,11944,15],[13135,32,11944,28,"_node$declaration$dec"],[13135,53,11944,49],[13135,56,11944,52,"node"],[13135,60,11944,56],[13135,61,11944,57,"declaration"],[13135,72,11944,52],[13135,73,11944,69,"declarations"],[13135,85,11944,10],[13135,87,11944,83,"_i4"],[13135,90,11944,86],[13135,93,11944,89,"_node$declaration$dec"],[13135,114,11944,110],[13135,115,11944,111,"length"],[13135,121,11944,10],[13135,123,11944,119,"_i4"],[13135,126,11944,122],[13135,128,11944,10],[13135,130,11944,126],[13136,0,11945,12],[13136,20,11945,18,"declaration"],[13136,31,11945,29],[13136,34,11945,32,"_node$declaration$dec"],[13136,55,11945,53],[13136,56,11945,54,"_i4"],[13136,59,11945,53],[13136,60,11945,12],[13137,0,11946,12],[13137,21,11946,17,"checkDeclaration"],[13137,37,11946,12],[13137,38,11946,34,"declaration"],[13137,49,11946,45],[13137,50,11946,46,"id"],[13137,52,11946,12],[13138,0,11947,11],[13139,0,11948,9],[13140,0,11949,7],[13141,0,11950,5],[13143,0,11952,4],[13143,12,11952,10,"currentContextDecorators"],[13143,36,11952,34],[13143,39,11952,37],[13143,44,11952,42,"state"],[13143,49,11952,37],[13143,50,11952,48,"decoratorStack"],[13143,64,11952,37],[13143,65,11952,63],[13143,70,11952,68,"state"],[13143,75,11952,63],[13143,76,11952,74,"decoratorStack"],[13143,90,11952,63],[13143,91,11952,89,"length"],[13143,97,11952,63],[13143,100,11952,98],[13143,101,11952,37],[13143,102,11952,4],[13145,0,11954,4],[13145,12,11954,8,"currentContextDecorators"],[13145,36,11954,32],[13145,37,11954,33,"length"],[13145,43,11954,4],[13145,45,11954,41],[13146,0,11955,6],[13146,14,11955,12,"isClass"],[13146,21,11955,19],[13146,24,11955,22,"node"],[13146,28,11955,26],[13146,29,11955,27,"declaration"],[13146,40,11955,22],[13146,45,11955,43,"node"],[13146,49,11955,47],[13146,50,11955,48,"declaration"],[13146,61,11955,43],[13146,62,11955,60,"type"],[13146,66,11955,43],[13146,71,11955,69],[13146,89,11955,43],[13146,93,11955,91,"node"],[13146,97,11955,95],[13146,98,11955,96,"declaration"],[13146,109,11955,91],[13146,110,11955,108,"type"],[13146,114,11955,91],[13146,119,11955,117],[13146,136,11955,22],[13146,137,11955,6],[13148,0,11957,6],[13148,14,11957,10],[13148,15,11957,11,"node"],[13148,19,11957,15],[13148,20,11957,16,"declaration"],[13148,31,11957,10],[13148,35,11957,31],[13148,36,11957,32,"isClass"],[13148,43,11957,6],[13148,45,11957,41],[13149,0,11958,8],[13149,18,11958,14],[13149,23,11958,19,"raise"],[13149,28,11958,14],[13149,29,11958,25,"node"],[13149,33,11958,29],[13149,34,11958,30,"start"],[13149,39,11958,14],[13149,41,11958,37],[13149,106,11958,14],[13149,107,11958,8],[13150,0,11959,7],[13152,0,11961,6],[13152,15,11961,11,"takeDecorators"],[13152,29,11961,6],[13152,30,11961,26,"node"],[13152,34,11961,30],[13152,35,11961,31,"declaration"],[13152,46,11961,6],[13153,0,11962,5],[13154,0,11963,3],[13157,39,11965,19,"node"],[13157,43],[13157,45,11965,25],[13158,0,11966,4],[13158,12,11966,8,"node"],[13158,16,11966,12],[13158,17,11966,13,"type"],[13158,21,11966,8],[13158,26,11966,22],[13158,38,11966,4],[13158,40,11966,36],[13159,0,11967,6],[13159,15,11967,11,"checkDuplicateExports"],[13159,36,11967,6],[13159,37,11967,33,"node"],[13159,41,11967,6],[13159,43,11967,39,"node"],[13159,47,11967,43],[13159,48,11967,44,"name"],[13159,52,11967,6],[13160,0,11968,5],[13160,9,11966,4],[13160,15,11968,11],[13160,19,11968,15,"node"],[13160,23,11968,19],[13160,24,11968,20,"type"],[13160,28,11968,15],[13160,33,11968,29],[13160,48,11968,11],[13160,50,11968,46],[13161,0,11969,6],[13161,15,11969,11],[13161,19,11969,15,"_i5"],[13161,22,11969,18],[13161,25,11969,21],[13161,26,11969,11],[13161,28,11969,24,"_node$properties"],[13161,44,11969,40],[13161,47,11969,43,"node"],[13161,51,11969,47],[13161,52,11969,48,"properties"],[13161,62,11969,6],[13161,64,11969,60,"_i5"],[13161,67,11969,63],[13161,70,11969,66,"_node$properties"],[13161,86,11969,82],[13161,87,11969,83,"length"],[13161,93,11969,6],[13161,95,11969,91,"_i5"],[13161,98,11969,94],[13161,100,11969,6],[13161,102,11969,98],[13162,0,11970,8],[13162,16,11970,14,"prop"],[13162,20,11970,18],[13162,23,11970,21,"_node$properties"],[13162,39,11970,37],[13162,40,11970,38,"_i5"],[13162,43,11970,37],[13162,44,11970,8],[13163,0,11971,8],[13163,17,11971,13,"checkDeclaration"],[13163,33,11971,8],[13163,34,11971,30,"prop"],[13163,38,11971,8],[13164,0,11972,7],[13165,0,11973,5],[13165,9,11968,11],[13165,15,11973,11],[13165,19,11973,15,"node"],[13165,23,11973,19],[13165,24,11973,20,"type"],[13165,28,11973,15],[13165,33,11973,29],[13165,47,11973,11],[13165,49,11973,45],[13166,0,11974,6],[13166,15,11974,11],[13166,19,11974,15,"_i6"],[13166,22,11974,18],[13166,25,11974,21],[13166,26,11974,11],[13166,28,11974,24,"_node$elements"],[13166,42,11974,38],[13166,45,11974,41,"node"],[13166,49,11974,45],[13166,50,11974,46,"elements"],[13166,58,11974,6],[13166,60,11974,56,"_i6"],[13166,63,11974,59],[13166,66,11974,62,"_node$elements"],[13166,80,11974,76],[13166,81,11974,77,"length"],[13166,87,11974,6],[13166,89,11974,85,"_i6"],[13166,92,11974,88],[13166,94,11974,6],[13166,96,11974,92],[13167,0,11975,8],[13167,16,11975,14,"elem"],[13167,20,11975,18],[13167,23,11975,21,"_node$elements"],[13167,37,11975,35],[13167,38,11975,36,"_i6"],[13167,41,11975,35],[13167,42,11975,8],[13169,0,11977,8],[13169,16,11977,12,"elem"],[13169,20,11977,8],[13169,22,11977,18],[13170,0,11978,10],[13170,19,11978,15,"checkDeclaration"],[13170,35,11978,10],[13170,36,11978,32,"elem"],[13170,40,11978,10],[13171,0,11979,9],[13172,0,11980,7],[13173,0,11981,5],[13173,9,11973,11],[13173,15,11981,11],[13173,19,11981,15,"node"],[13173,23,11981,19],[13173,24,11981,20,"type"],[13173,28,11981,15],[13173,33,11981,29],[13173,49,11981,11],[13173,51,11981,47],[13174,0,11982,6],[13174,15,11982,11,"checkDeclaration"],[13174,31,11982,6],[13174,32,11982,28,"node"],[13174,36,11982,32],[13174,37,11982,33,"value"],[13174,42,11982,6],[13175,0,11983,5],[13175,9,11981,11],[13175,15,11983,11],[13175,19,11983,15,"node"],[13175,23,11983,19],[13175,24,11983,20,"type"],[13175,28,11983,15],[13175,33,11983,29],[13175,46,11983,11],[13175,48,11983,44],[13176,0,11984,6],[13176,15,11984,11,"checkDeclaration"],[13176,31,11984,6],[13176,32,11984,28,"node"],[13176,36,11984,32],[13176,37,11984,33,"argument"],[13176,45,11984,6],[13177,0,11985,5],[13177,9,11983,11],[13177,15,11985,11],[13177,19,11985,15,"node"],[13177,23,11985,19],[13177,24,11985,20,"type"],[13177,28,11985,15],[13177,33,11985,29],[13177,52,11985,11],[13177,54,11985,50],[13178,0,11986,6],[13178,15,11986,11,"checkDeclaration"],[13178,31,11986,6],[13178,32,11986,28,"node"],[13178,36,11986,32],[13178,37,11986,33,"left"],[13178,41,11986,6],[13179,0,11987,5],[13180,0,11988,3],[13183,44,11990,24,"node"],[13183,48],[13183,50,11990,30,"name"],[13183,54],[13183,56,11990,36],[13184,0,11991,4],[13184,12,11991,8],[13184,17,11991,13,"state"],[13184,22,11991,8],[13184,23,11991,19,"exportedIdentifiers"],[13184,42,11991,8],[13184,43,11991,39,"indexOf"],[13184,50,11991,8],[13184,51,11991,47,"name"],[13184,55,11991,8],[13184,59,11991,55],[13184,60,11991,56],[13184,61,11991,4],[13184,63,11991,59],[13185,0,11992,6],[13185,15,11992,11,"raise"],[13185,20,11992,6],[13185,21,11992,17,"node"],[13185,25,11992,21],[13185,26,11992,22,"start"],[13185,31,11992,6],[13185,33,11992,29,"name"],[13185,37,11992,33],[13185,42,11992,38],[13185,51,11992,29],[13185,54,11992,50],[13185,99,11992,29],[13185,108,11992,103,"name"],[13185,112,11992,29],[13185,182,11992,6],[13186,0,11993,5],[13188,0,11995,4],[13188,13,11995,9,"state"],[13188,18,11995,4],[13188,19,11995,15,"exportedIdentifiers"],[13188,38,11995,4],[13188,39,11995,35,"push"],[13188,43,11995,4],[13188,44,11995,40,"name"],[13188,48,11995,4],[13189,0,11996,3],[13192,46,11998,26],[13193,0,11999,4],[13193,12,11999,10,"nodes"],[13193,17,11999,15],[13193,20,11999,18],[13193,22,11999,4],[13194,0,12000,4],[13194,12,12000,8,"first"],[13194,17,12000,13],[13194,20,12000,16],[13194,24,12000,4],[13195,0,12001,4],[13195,13,12001,9,"expect"],[13195,19,12001,4],[13195,20,12001,16,"types"],[13195,25,12001,21],[13195,26,12001,22,"braceL"],[13195,32,12001,4],[13197,0,12003,4],[13197,15,12003,11],[13197,16,12003,12],[13197,21,12003,17,"eat"],[13197,24,12003,12],[13197,25,12003,21,"types"],[13197,30,12003,26],[13197,31,12003,27,"braceR"],[13197,37,12003,12],[13197,38,12003,4],[13197,40,12003,36],[13198,0,12004,6],[13198,14,12004,10,"first"],[13198,19,12004,6],[13198,21,12004,17],[13199,0,12005,8,"first"],[13199,12,12005,8,"first"],[13199,17,12005,13],[13199,20,12005,16],[13199,25,12005,8],[13200,0,12006,7],[13200,11,12004,6],[13200,17,12006,13],[13201,0,12007,8],[13201,17,12007,13,"expect"],[13201,23,12007,8],[13201,24,12007,20,"types"],[13201,29,12007,25],[13201,30,12007,26,"comma"],[13201,35,12007,8],[13202,0,12008,8],[13202,16,12008,12],[13202,21,12008,17,"eat"],[13202,24,12008,12],[13202,25,12008,21,"types"],[13202,30,12008,26],[13202,31,12008,27,"braceR"],[13202,37,12008,12],[13202,38,12008,8],[13202,40,12008,36],[13203,0,12009,7],[13205,0,12011,6],[13205,14,12011,12,"node"],[13205,18,12011,16],[13205,21,12011,19],[13205,26,12011,24,"startNode"],[13205,35,12011,19],[13205,37,12011,6],[13206,0,12012,6,"node"],[13206,10,12012,6,"node"],[13206,14,12012,10],[13206,15,12012,11,"local"],[13206,20,12012,6],[13206,23,12012,19],[13206,28,12012,24,"parseIdentifier"],[13206,43,12012,19],[13206,44,12012,40],[13206,48,12012,19],[13206,49,12012,6],[13207,0,12013,6,"node"],[13207,10,12013,6,"node"],[13207,14,12013,10],[13207,15,12013,11,"exported"],[13207,23,12013,6],[13207,26,12013,22],[13207,31,12013,27,"eatContextual"],[13207,44,12013,22],[13207,45,12013,41],[13207,49,12013,22],[13207,53,12013,49],[13207,58,12013,54,"parseIdentifier"],[13207,73,12013,49],[13207,74,12013,70],[13207,78,12013,49],[13207,79,12013,22],[13207,82,12013,78,"node"],[13207,86,12013,82],[13207,87,12013,83,"local"],[13207,92,12013,78],[13207,93,12013,89,"__clone"],[13207,100,12013,78],[13207,102,12013,6],[13208,0,12014,6,"nodes"],[13208,10,12014,6,"nodes"],[13208,15,12014,11],[13208,16,12014,12,"push"],[13208,20,12014,6],[13208,21,12014,17],[13208,26,12014,22,"finishNode"],[13208,36,12014,17],[13208,37,12014,33,"node"],[13208,41,12014,17],[13208,43,12014,39],[13208,60,12014,17],[13208,61,12014,6],[13209,0,12015,5],[13211,0,12017,4],[13211,15,12017,11,"nodes"],[13211,20,12017,4],[13212,0,12018,3],[13215,34,12020,14,"node"],[13215,38],[13215,40,12020,20],[13216,0,12021,4,"node"],[13216,8,12021,4,"node"],[13216,12,12021,8],[13216,13,12021,9,"specifiers"],[13216,23,12021,4],[13216,26,12021,22],[13216,28,12021,4],[13218,0,12023,4],[13218,12,12023,8],[13218,13,12023,9],[13218,18,12023,14,"match"],[13218,23,12023,9],[13218,24,12023,20,"types"],[13218,29,12023,25],[13218,30,12023,26,"string"],[13218,36,12023,9],[13218,37,12023,4],[13218,39,12023,35],[13219,0,12024,6],[13219,14,12024,12,"hasDefault"],[13219,24,12024,22],[13219,27,12024,25],[13219,32,12024,30,"maybeParseDefaultImportSpecifier"],[13219,64,12024,25],[13219,65,12024,63,"node"],[13219,69,12024,25],[13219,70,12024,6],[13220,0,12025,6],[13220,14,12025,12,"parseNext"],[13220,23,12025,21],[13220,26,12025,24],[13220,27,12025,25,"hasDefault"],[13220,37,12025,24],[13220,41,12025,39],[13220,46,12025,44,"eat"],[13220,49,12025,39],[13220,50,12025,48,"types"],[13220,55,12025,53],[13220,56,12025,54,"comma"],[13220,61,12025,39],[13220,62,12025,6],[13221,0,12026,6],[13221,14,12026,12,"hasStar"],[13221,21,12026,19],[13221,24,12026,22,"parseNext"],[13221,33,12026,31],[13221,37,12026,35],[13221,42,12026,40,"maybeParseStarImportSpecifier"],[13221,71,12026,35],[13221,72,12026,70,"node"],[13221,76,12026,35],[13221,77,12026,6],[13222,0,12027,6],[13222,14,12027,10,"parseNext"],[13222,23,12027,19],[13222,27,12027,23],[13222,28,12027,24,"hasStar"],[13222,35,12027,6],[13222,37,12027,33],[13222,42,12027,38,"parseNamedImportSpecifiers"],[13222,68,12027,33],[13222,69,12027,65,"node"],[13222,73,12027,33],[13223,0,12028,6],[13223,15,12028,11,"expectContextual"],[13223,31,12028,6],[13223,32,12028,28],[13223,38,12028,6],[13224,0,12029,5],[13226,0,12031,4,"node"],[13226,8,12031,4,"node"],[13226,12,12031,8],[13226,13,12031,9,"source"],[13226,19,12031,4],[13226,22,12031,18],[13226,27,12031,23,"parseImportSource"],[13226,44,12031,18],[13226,46,12031,4],[13227,0,12032,4],[13227,13,12032,9,"semicolon"],[13227,22,12032,4],[13228,0,12033,4],[13228,15,12033,11],[13228,20,12033,16,"finishNode"],[13228,30,12033,11],[13228,31,12033,27,"node"],[13228,35,12033,11],[13228,37,12033,33],[13228,56,12033,11],[13228,57,12033,4],[13229,0,12034,3],[13232,42,12036,22],[13233,0,12037,4],[13233,12,12037,8],[13233,13,12037,9],[13233,18,12037,14,"match"],[13233,23,12037,9],[13233,24,12037,20,"types"],[13233,29,12037,25],[13233,30,12037,26,"string"],[13233,36,12037,9],[13233,37,12037,4],[13233,39,12037,35],[13233,44,12037,40,"unexpected"],[13233,54,12037,35],[13234,0,12038,4],[13234,15,12038,11],[13234,20,12038,16,"parseExprAtom"],[13234,33,12038,11],[13234,35,12038,4],[13235,0,12039,3],[13238,47,12041,27,"node"],[13238,51],[13238,53,12041,33],[13239,0,12042,4],[13239,15,12042,11],[13239,20,12042,16,"match"],[13239,25,12042,11],[13239,26,12042,22,"types"],[13239,31,12042,27],[13239,32,12042,28,"name"],[13239,36,12042,11],[13239,37,12042,4],[13240,0,12043,3],[13243,48,12045,28,"node"],[13243,52],[13243,54,12045,34,"specifier"],[13243,63],[13243,65,12045,45,"type"],[13243,69],[13243,71,12045,51,"contextDescription"],[13243,89],[13243,91,12045,71],[13244,0,12046,4,"specifier"],[13244,8,12046,4,"specifier"],[13244,17,12046,13],[13244,18,12046,14,"local"],[13244,23,12046,4],[13244,26,12046,22],[13244,31,12046,27,"parseIdentifier"],[13244,46,12046,22],[13244,48,12046,4],[13245,0,12047,4],[13245,13,12047,9,"checkLVal"],[13245,22,12047,4],[13245,23,12047,19,"specifier"],[13245,32,12047,28],[13245,33,12047,29,"local"],[13245,38,12047,4],[13245,40,12047,36,"BIND_LEXICAL"],[13245,52,12047,4],[13245,54,12047,50,"undefined"],[13245,63,12047,4],[13245,65,12047,61,"contextDescription"],[13245,83,12047,4],[13246,0,12048,4,"node"],[13246,8,12048,4,"node"],[13246,12,12048,8],[13246,13,12048,9,"specifiers"],[13246,23,12048,4],[13246,24,12048,20,"push"],[13246,28,12048,4],[13246,29,12048,25],[13246,34,12048,30,"finishNode"],[13246,44,12048,25],[13246,45,12048,41,"specifier"],[13246,54,12048,25],[13246,56,12048,52,"type"],[13246,60,12048,25],[13246,61,12048,4],[13247,0,12049,3],[13250,55,12051,35,"node"],[13250,59],[13250,61,12051,41],[13251,0,12052,4],[13251,12,12052,8],[13251,17,12052,13,"shouldParseDefaultImport"],[13251,41,12052,8],[13251,42,12052,38,"node"],[13251,46,12052,8],[13251,47,12052,4],[13251,49,12052,45],[13252,0,12053,6],[13252,15,12053,11,"parseImportSpecifierLocal"],[13252,40,12053,6],[13252,41,12053,37,"node"],[13252,45,12053,6],[13252,47,12053,43],[13252,52,12053,48,"startNode"],[13252,61,12053,43],[13252,63,12053,6],[13252,65,12053,61],[13252,89,12053,6],[13252,91,12053,87],[13252,117,12053,6],[13253,0,12054,6],[13253,17,12054,13],[13253,21,12054,6],[13254,0,12055,5],[13256,0,12057,4],[13256,15,12057,11],[13256,20,12057,4],[13257,0,12058,3],[13260,52,12060,32,"node"],[13260,56],[13260,58,12060,38],[13261,0,12061,4],[13261,12,12061,8],[13261,17,12061,13,"match"],[13261,22,12061,8],[13261,23,12061,19,"types"],[13261,28,12061,24],[13261,29,12061,25,"star"],[13261,33,12061,8],[13261,34,12061,4],[13261,36,12061,32],[13262,0,12062,6],[13262,14,12062,12,"specifier"],[13262,23,12062,21],[13262,26,12062,24],[13262,31,12062,29,"startNode"],[13262,40,12062,24],[13262,42,12062,6],[13263,0,12063,6],[13263,15,12063,11,"next"],[13263,19,12063,6],[13264,0,12064,6],[13264,15,12064,11,"expectContextual"],[13264,31,12064,6],[13264,32,12064,28],[13264,36,12064,6],[13265,0,12065,6],[13265,15,12065,11,"parseImportSpecifierLocal"],[13265,40,12065,6],[13265,41,12065,37,"node"],[13265,45,12065,6],[13265,47,12065,43,"specifier"],[13265,56,12065,6],[13265,58,12065,54],[13265,84,12065,6],[13265,86,12065,82],[13265,114,12065,6],[13266,0,12066,6],[13266,17,12066,13],[13266,21,12066,6],[13267,0,12067,5],[13269,0,12069,4],[13269,15,12069,11],[13269,20,12069,4],[13270,0,12070,3],[13273,49,12072,29,"node"],[13273,53],[13273,55,12072,35],[13274,0,12073,4],[13274,12,12073,8,"first"],[13274,17,12073,13],[13274,20,12073,16],[13274,24,12073,4],[13275,0,12074,4],[13275,13,12074,9,"expect"],[13275,19,12074,4],[13275,20,12074,16,"types"],[13275,25,12074,21],[13275,26,12074,22,"braceL"],[13275,32,12074,4],[13277,0,12076,4],[13277,15,12076,11],[13277,16,12076,12],[13277,21,12076,17,"eat"],[13277,24,12076,12],[13277,25,12076,21,"types"],[13277,30,12076,26],[13277,31,12076,27,"braceR"],[13277,37,12076,12],[13277,38,12076,4],[13277,40,12076,36],[13278,0,12077,6],[13278,14,12077,10,"first"],[13278,19,12077,6],[13278,21,12077,17],[13279,0,12078,8,"first"],[13279,12,12078,8,"first"],[13279,17,12078,13],[13279,20,12078,16],[13279,25,12078,8],[13280,0,12079,7],[13280,11,12077,6],[13280,17,12079,13],[13281,0,12080,8],[13281,16,12080,12],[13281,21,12080,17,"eat"],[13281,24,12080,12],[13281,25,12080,21,"types"],[13281,30,12080,26],[13281,31,12080,27,"colon"],[13281,36,12080,12],[13281,37,12080,8],[13281,39,12080,35],[13282,0,12081,10],[13282,20,12081,16],[13282,25,12081,21,"raise"],[13282,30,12081,16],[13282,31,12081,27],[13282,36,12081,32,"state"],[13282,41,12081,27],[13282,42,12081,38,"start"],[13282,47,12081,16],[13282,49,12081,45],[13282,95,12081,91],[13282,154,12081,16],[13282,155,12081,10],[13283,0,12082,9],[13285,0,12084,8],[13285,17,12084,13,"expect"],[13285,23,12084,8],[13285,24,12084,20,"types"],[13285,29,12084,25],[13285,30,12084,26,"comma"],[13285,35,12084,8],[13286,0,12085,8],[13286,16,12085,12],[13286,21,12085,17,"eat"],[13286,24,12085,12],[13286,25,12085,21,"types"],[13286,30,12085,26],[13286,31,12085,27,"braceR"],[13286,37,12085,12],[13286,38,12085,8],[13286,40,12085,36],[13287,0,12086,7],[13289,0,12088,6],[13289,15,12088,11,"parseImportSpecifier"],[13289,35,12088,6],[13289,36,12088,32,"node"],[13289,40,12088,6],[13290,0,12089,5],[13291,0,12090,3],[13294,43,12092,23,"node"],[13294,47],[13294,49,12092,29],[13295,0,12093,4],[13295,12,12093,10,"specifier"],[13295,21,12093,19],[13295,24,12093,22],[13295,29,12093,27,"startNode"],[13295,38,12093,22],[13295,40,12093,4],[13296,0,12094,4,"specifier"],[13296,8,12094,4,"specifier"],[13296,17,12094,13],[13296,18,12094,14,"imported"],[13296,26,12094,4],[13296,29,12094,25],[13296,34,12094,30,"parseIdentifier"],[13296,49,12094,25],[13296,50,12094,46],[13296,54,12094,25],[13296,55,12094,4],[13298,0,12096,4],[13298,12,12096,8],[13298,17,12096,13,"eatContextual"],[13298,30,12096,8],[13298,31,12096,27],[13298,35,12096,8],[13298,36,12096,4],[13298,38,12096,34],[13299,0,12097,6,"specifier"],[13299,10,12097,6,"specifier"],[13299,19,12097,15],[13299,20,12097,16,"local"],[13299,25,12097,6],[13299,28,12097,24],[13299,33,12097,29,"parseIdentifier"],[13299,48,12097,24],[13299,50,12097,6],[13300,0,12098,5],[13300,9,12096,4],[13300,15,12098,11],[13301,0,12099,6],[13301,15,12099,11,"checkReservedWord"],[13301,32,12099,6],[13301,33,12099,29,"specifier"],[13301,42,12099,38],[13301,43,12099,39,"imported"],[13301,51,12099,29],[13301,52,12099,48,"name"],[13301,56,12099,6],[13301,58,12099,54,"specifier"],[13301,67,12099,63],[13301,68,12099,64,"start"],[13301,73,12099,6],[13301,75,12099,71],[13301,79,12099,6],[13301,81,12099,77],[13301,85,12099,6],[13302,0,12100,6,"specifier"],[13302,10,12100,6,"specifier"],[13302,19,12100,15],[13302,20,12100,16,"local"],[13302,25,12100,6],[13302,28,12100,24,"specifier"],[13302,37,12100,33],[13302,38,12100,34,"imported"],[13302,46,12100,24],[13302,47,12100,43,"__clone"],[13302,54,12100,24],[13302,56,12100,6],[13303,0,12101,5],[13305,0,12103,4],[13305,13,12103,9,"checkLVal"],[13305,22,12103,4],[13305,23,12103,19,"specifier"],[13305,32,12103,28],[13305,33,12103,29,"local"],[13305,38,12103,4],[13305,40,12103,36,"BIND_LEXICAL"],[13305,52,12103,4],[13305,54,12103,50,"undefined"],[13305,63,12103,4],[13305,65,12103,61],[13305,83,12103,4],[13306,0,12104,4,"node"],[13306,8,12104,4,"node"],[13306,12,12104,8],[13306,13,12104,9,"specifiers"],[13306,23,12104,4],[13306,24,12104,20,"push"],[13306,28,12104,4],[13306,29,12104,25],[13306,34,12104,30,"finishNode"],[13306,44,12104,25],[13306,45,12104,41,"specifier"],[13306,54,12104,25],[13306,56,12104,52],[13306,73,12104,25],[13306,74,12104,4],[13307,0,12105,3],[13311,4,10617,30,"ExpressionParser"],[13311,20],[13313,6,12109,6,"Parser"],[13313,12],[13316,0,12110,2],[13316,20,12110,14,"options"],[13316,27,12110,2],[13316,29,12110,23,"input"],[13316,34,12110,2],[13316,36,12110,30],[13317,0,12110,30],[13319,0,12110,30],[13321,0,12111,4,"options"],[13321,6,12111,4,"options"],[13321,13,12111,11],[13321,16,12111,14,"getOptions"],[13321,26,12111,24],[13321,27,12111,25,"options"],[13321,34,12111,24],[13321,35,12111,4],[13322,0,12112,4],[13322,84,12112,10,"options"],[13322,91,12112,4],[13322,93,12112,19,"input"],[13322,98,12112,4],[13324,0,12113,4],[13324,10,12113,10,"ScopeHandler"],[13324,22,12113,22],[13324,25,12113,25],[13324,33,12113,30,"getScopeHandler"],[13324,48,12113,25],[13324,50,12113,4],[13326,0,12114,4],[13326,14,12114,9,"options"],[13326,21,12114,4],[13326,24,12114,19,"options"],[13326,31,12114,4],[13327,0,12115,4],[13327,14,12115,9,"inModule"],[13327,22,12115,4],[13327,25,12115,20],[13327,33,12115,25,"options"],[13327,40,12115,20],[13327,41,12115,33,"sourceType"],[13327,51,12115,20],[13327,56,12115,48],[13327,64,12115,4],[13328,0,12116,4],[13328,14,12116,9,"scope"],[13328,19,12116,4],[13328,22,12116,17],[13328,26,12116,21,"ScopeHandler"],[13328,38,12116,17],[13328,39,12116,34],[13328,47,12116,39,"raise"],[13328,52,12116,34],[13328,53,12116,45,"bind"],[13328,57,12116,34],[13328,90,12116,17],[13328,92,12116,57],[13328,100,12116,62,"inModule"],[13328,108,12116,17],[13328,109,12116,4],[13329,0,12117,4],[13329,14,12117,9,"plugins"],[13329,21,12117,4],[13329,24,12117,19,"pluginsMap"],[13329,34,12117,29],[13329,35,12117,30],[13329,43,12117,35,"options"],[13329,50,12117,30],[13329,51,12117,43,"plugins"],[13329,58,12117,29],[13329,59,12117,4],[13330,0,12118,4],[13330,14,12118,9,"filename"],[13330,22,12118,4],[13330,25,12118,20,"options"],[13330,32,12118,27],[13330,33,12118,28,"sourceFilename"],[13330,47,12118,4],[13331,0,12110,30],[13332,0,12119,3],[13336,40,12121,20],[13337,0,12122,4],[13337,15,12122,11,"ScopeHandler"],[13337,27,12122,4],[13338,0,12123,3],[13341,30,12125,10],[13342,0,12126,4],[13342,13,12126,9,"scope"],[13342,18,12126,4],[13342,19,12126,15,"enter"],[13342,24,12126,4],[13342,25,12126,21,"SCOPE_PROGRAM"],[13342,38,12126,4],[13343,0,12127,4],[13343,12,12127,10,"file"],[13343,16,12127,14],[13343,19,12127,17],[13343,24,12127,22,"startNode"],[13343,33,12127,17],[13343,35,12127,4],[13344,0,12128,4],[13344,12,12128,10,"program"],[13344,19,12128,17],[13344,22,12128,20],[13344,27,12128,25,"startNode"],[13344,36,12128,20],[13344,38,12128,4],[13345,0,12129,4],[13345,13,12129,9,"nextToken"],[13345,22,12129,4],[13346,0,12130,4,"file"],[13346,8,12130,4,"file"],[13346,12,12130,8],[13346,13,12130,9,"errors"],[13346,19,12130,4],[13346,22,12130,18],[13346,26,12130,4],[13347,0,12131,4],[13347,13,12131,9,"parseTopLevel"],[13347,26,12131,4],[13347,27,12131,23,"file"],[13347,31,12131,4],[13347,33,12131,29,"program"],[13347,40,12131,4],[13348,0,12132,4,"file"],[13348,8,12132,4,"file"],[13348,12,12132,8],[13348,13,12132,9,"errors"],[13348,19,12132,4],[13348,22,12132,18],[13348,27,12132,23,"state"],[13348,32,12132,18],[13348,33,12132,29,"errors"],[13348,39,12132,4],[13349,0,12133,4],[13349,15,12133,11,"file"],[13349,19,12133,4],[13350,0,12134,3],[13354,4,12109,21,"StatementParser"],[13354,19],[13356,0,12138,0],[13356,11,12138,9,"pluginsMap"],[13356,21,12138,0],[13356,22,12138,20,"plugins"],[13356,29,12138,0],[13356,31,12138,29],[13357,0,12139,2],[13357,8,12139,8,"pluginMap"],[13357,17,12139,17],[13357,20,12139,20],[13357,24,12139,24,"Map"],[13357,27,12139,20],[13357,29,12139,2],[13359,0,12141,2],[13359,9,12141,7],[13359,13,12141,11,"_i"],[13359,15,12141,13],[13359,18,12141,16],[13359,19,12141,2],[13359,21,12141,19,"_i"],[13359,23,12141,21],[13359,26,12141,24,"plugins"],[13359,33,12141,31],[13359,34,12141,32,"length"],[13359,40,12141,2],[13359,42,12141,40,"_i"],[13359,44,12141,42],[13359,46,12141,2],[13359,48,12141,46],[13360,0,12142,4],[13360,10,12142,10,"plugin"],[13360,16,12142,16],[13360,19,12142,19,"plugins"],[13360,26,12142,26],[13360,27,12142,27,"_i"],[13360,29,12142,26],[13360,30,12142,4],[13362,0,12141,46],[13362,19,12143,28,"Array"],[13362,24,12143,33],[13362,25,12143,34,"isArray"],[13362,32,12143,28],[13362,33,12143,42,"plugin"],[13362,39,12143,28],[13362,43,12143,52,"plugin"],[13362,49,12143,28],[13362,52,12143,61],[13362,53,12143,62,"plugin"],[13362,59,12143,61],[13362,61,12143,70],[13362,63,12143,61],[13362,64,12141,46],[13363,0,12141,46],[13364,0,12141,46],[13364,10,12143,11,"name"],[13364,14,12141,46],[13365,0,12141,46],[13365,10,12143,17,"options"],[13365,17,12141,46],[13367,0,12144,4],[13367,10,12144,8],[13367,11,12144,9,"pluginMap"],[13367,20,12144,18],[13367,21,12144,19,"has"],[13367,24,12144,9],[13367,25,12144,23,"name"],[13367,29,12144,9],[13367,30,12144,4],[13367,32,12144,30,"pluginMap"],[13367,41,12144,39],[13367,42,12144,40,"set"],[13367,45,12144,30],[13367,46,12144,44,"name"],[13367,50,12144,30],[13367,52,12144,50,"options"],[13367,59,12144,57],[13367,63,12144,61],[13367,65,12144,30],[13368,0,12145,3],[13370,0,12147,2],[13370,11,12147,9,"pluginMap"],[13370,20,12147,2],[13371,0,12148,1],[13373,0,12150,0],[13373,11,12150,9,"parse"],[13373,16,12150,0],[13373,17,12150,15,"input"],[13373,22,12150,0],[13373,24,12150,22,"options"],[13373,31,12150,0],[13373,33,12150,31],[13374,0,12151,2],[13374,8,12151,6,"options"],[13374,15,12151,13],[13374,19,12151,17,"options"],[13374,26,12151,24],[13374,27,12151,25,"sourceType"],[13374,37,12151,17],[13374,42,12151,40],[13374,55,12151,2],[13374,57,12151,55],[13375,0,12152,4,"options"],[13375,6,12152,4,"options"],[13375,13,12152,11],[13375,16,12152,14],[13375,25,12152,28],[13375,27,12152,14],[13375,29,12152,32,"options"],[13375,36,12152,14],[13375,37,12152,4],[13377,0,12154,4],[13377,10,12154,8],[13378,0,12155,6,"options"],[13378,8,12155,6,"options"],[13378,15,12155,13],[13378,16,12155,14,"sourceType"],[13378,26,12155,6],[13378,29,12155,27],[13378,37,12155,6],[13379,0,12156,6],[13379,12,12156,12,"parser"],[13379,18,12156,18],[13379,21,12156,21,"getParser"],[13379,30,12156,30],[13379,31,12156,31,"options"],[13379,38,12156,30],[13379,40,12156,40,"input"],[13379,45,12156,30],[13379,46,12156,6],[13380,0,12157,6],[13380,12,12157,12,"ast"],[13380,15,12157,15],[13380,18,12157,18,"parser"],[13380,24,12157,24],[13380,25,12157,25,"parse"],[13380,30,12157,18],[13380,32,12157,6],[13382,0,12159,6],[13382,12,12159,10,"parser"],[13382,18,12159,16],[13382,19,12159,17,"sawUnambiguousESM"],[13382,36,12159,6],[13382,38,12159,36],[13383,0,12160,8],[13383,17,12160,15,"ast"],[13383,20,12160,8],[13384,0,12161,7],[13386,0,12163,6],[13386,12,12163,10,"parser"],[13386,18,12163,16],[13386,19,12163,17,"ambiguousScriptDifferentAst"],[13386,46,12163,6],[13386,48,12163,46],[13387,0,12164,8],[13387,14,12164,12],[13388,0,12165,10,"options"],[13388,12,12165,10,"options"],[13388,19,12165,17],[13388,20,12165,18,"sourceType"],[13388,30,12165,10],[13388,33,12165,31],[13388,41,12165,10],[13389,0,12166,10],[13389,19,12166,17,"getParser"],[13389,28,12166,26],[13389,29,12166,27,"options"],[13389,36,12166,26],[13389,38,12166,36,"input"],[13389,43,12166,26],[13389,44,12166,17],[13389,45,12166,43,"parse"],[13389,50,12166,17],[13389,52,12166,10],[13390,0,12167,9],[13390,11,12164,8],[13390,12,12167,10],[13390,19,12167,17,"_unused"],[13390,26,12167,10],[13390,28,12167,26],[13390,29,12167,28],[13391,0,12168,7],[13391,9,12163,6],[13391,15,12168,13],[13392,0,12169,8,"ast"],[13392,10,12169,8,"ast"],[13392,13,12169,11],[13392,14,12169,12,"program"],[13392,21,12169,8],[13392,22,12169,20,"sourceType"],[13392,32,12169,8],[13392,35,12169,33],[13392,43,12169,8],[13393,0,12170,7],[13395,0,12172,6],[13395,15,12172,13,"ast"],[13395,18,12172,6],[13396,0,12173,5],[13396,7,12154,4],[13396,8,12173,6],[13396,15,12173,13,"moduleError"],[13396,26,12173,6],[13396,28,12173,26],[13397,0,12174,6],[13397,12,12174,10],[13398,0,12175,8,"options"],[13398,10,12175,8,"options"],[13398,17,12175,15],[13398,18,12175,16,"sourceType"],[13398,28,12175,8],[13398,31,12175,29],[13398,39,12175,8],[13399,0,12176,8],[13399,17,12176,15,"getParser"],[13399,26,12176,24],[13399,27,12176,25,"options"],[13399,34,12176,24],[13399,36,12176,34,"input"],[13399,41,12176,24],[13399,42,12176,15],[13399,43,12176,41,"parse"],[13399,48,12176,15],[13399,50,12176,8],[13400,0,12177,7],[13400,9,12174,6],[13400,10,12177,8],[13400,17,12177,15,"_unused2"],[13400,25,12177,8],[13400,27,12177,25],[13400,28,12177,27],[13402,0,12179,6],[13402,14,12179,12,"moduleError"],[13402,25,12179,6],[13403,0,12180,5],[13404,0,12181,3],[13404,5,12151,2],[13404,11,12181,9],[13405,0,12182,4],[13405,13,12182,11,"getParser"],[13405,22,12182,20],[13405,23,12182,21,"options"],[13405,30,12182,20],[13405,32,12182,30,"input"],[13405,37,12182,20],[13405,38,12182,11],[13405,39,12182,37,"parse"],[13405,44,12182,11],[13405,46,12182,4],[13406,0,12183,3],[13407,0,12184,1],[13409,0,12185,0],[13409,11,12185,9,"parseExpression"],[13409,26,12185,0],[13409,27,12185,25,"input"],[13409,32,12185,0],[13409,34,12185,32,"options"],[13409,41,12185,0],[13409,43,12185,41],[13410,0,12186,2],[13410,8,12186,8,"parser"],[13410,14,12186,14],[13410,17,12186,17,"getParser"],[13410,26,12186,26],[13410,27,12186,27,"options"],[13410,34,12186,26],[13410,36,12186,36,"input"],[13410,41,12186,26],[13410,42,12186,2],[13412,0,12188,2],[13412,8,12188,6,"parser"],[13412,14,12188,12],[13412,15,12188,13,"options"],[13412,22,12188,6],[13412,23,12188,21,"strictMode"],[13412,33,12188,2],[13412,35,12188,33],[13413,0,12189,4,"parser"],[13413,6,12189,4,"parser"],[13413,12,12189,10],[13413,13,12189,11,"state"],[13413,18,12189,4],[13413,19,12189,17,"strict"],[13413,25,12189,4],[13413,28,12189,26],[13413,32,12189,4],[13414,0,12190,3],[13416,0,12192,2],[13416,11,12192,9,"parser"],[13416,17,12192,15],[13416,18,12192,16,"getExpression"],[13416,31,12192,9],[13416,33,12192,2],[13417,0,12193,1],[13419,0,12195,0],[13419,11,12195,9,"getParser"],[13419,20,12195,0],[13419,21,12195,19,"options"],[13419,28,12195,0],[13419,30,12195,28,"input"],[13419,35,12195,0],[13419,37,12195,35],[13420,0,12196,2],[13420,8,12196,6,"cls"],[13420,11,12196,9],[13420,14,12196,12,"Parser"],[13420,20,12196,2],[13422,0,12198,2],[13422,8,12198,6,"options"],[13422,15,12198,13],[13422,19,12198,17,"options"],[13422,26,12198,24],[13422,27,12198,25,"plugins"],[13422,34,12198,2],[13422,36,12198,34],[13423,0,12199,4,"validatePlugins"],[13423,6,12199,4,"validatePlugins"],[13423,21,12199,19],[13423,22,12199,20,"options"],[13423,29,12199,27],[13423,30,12199,28,"plugins"],[13423,37,12199,19],[13423,38,12199,4],[13424,0,12200,4,"cls"],[13424,6,12200,4,"cls"],[13424,9,12200,7],[13424,12,12200,10,"getParserClass"],[13424,26,12200,24],[13424,27,12200,25,"options"],[13424,34,12200,32],[13424,35,12200,33,"plugins"],[13424,42,12200,24],[13424,43,12200,4],[13425,0,12201,3],[13427,0,12203,2],[13427,11,12203,9],[13427,15,12203,13,"cls"],[13427,18,12203,9],[13427,19,12203,17,"options"],[13427,26,12203,9],[13427,28,12203,26,"input"],[13427,33,12203,9],[13427,34,12203,2],[13428,0,12204,1],[13430,0,12206,0],[13430,6,12206,6,"parserClassCache"],[13430,22,12206,22],[13430,25,12206,25],[13430,27,12206,0],[13432,0,12208,0],[13432,11,12208,9,"getParserClass"],[13432,25,12208,0],[13432,26,12208,24,"pluginsFromOptions"],[13432,44,12208,0],[13432,46,12208,44],[13433,0,12209,2],[13433,8,12209,8,"pluginList"],[13433,18,12209,18],[13433,21,12209,21,"mixinPluginNames"],[13433,37,12209,37],[13433,38,12209,38,"filter"],[13433,44,12209,21],[13433,45,12209,45],[13433,55,12209,45,"name"],[13433,59,12209,49],[13434,0,12209,49],[13434,13,12209,53,"hasPlugin"],[13434,22,12209,62],[13434,23,12209,63,"pluginsFromOptions"],[13434,41,12209,62],[13434,43,12209,83,"name"],[13434,47,12209,62],[13434,48,12209,49],[13435,0,12209,49],[13435,5,12209,21],[13435,6,12209,2],[13436,0,12210,2],[13436,8,12210,8,"key"],[13436,11,12210,11],[13436,14,12210,14,"pluginList"],[13436,24,12210,24],[13436,25,12210,25,"join"],[13436,29,12210,14],[13436,30,12210,30],[13436,33,12210,14],[13436,34,12210,2],[13437,0,12211,2],[13437,8,12211,6,"cls"],[13437,11,12211,9],[13437,14,12211,12,"parserClassCache"],[13437,30,12211,28],[13437,31,12211,29,"key"],[13437,34,12211,28],[13437,35,12211,2],[13439,0,12213,2],[13439,8,12213,6],[13439,9,12213,7,"cls"],[13439,12,12213,2],[13439,14,12213,12],[13440,0,12214,4,"cls"],[13440,6,12214,4,"cls"],[13440,9,12214,7],[13440,12,12214,10,"Parser"],[13440,18,12214,4],[13442,0,12216,4],[13442,11,12216,9],[13442,15,12216,13,"_i"],[13442,17,12216,15],[13442,20,12216,18],[13442,21,12216,4],[13442,23,12216,21,"_i"],[13442,25,12216,23],[13442,28,12216,26,"pluginList"],[13442,38,12216,36],[13442,39,12216,37,"length"],[13442,45,12216,4],[13442,47,12216,45,"_i"],[13442,49,12216,47],[13442,51,12216,4],[13442,53,12216,51],[13443,0,12217,6],[13443,12,12217,12,"plugin"],[13443,18,12217,18],[13443,21,12217,21,"pluginList"],[13443,31,12217,31],[13443,32,12217,32,"_i"],[13443,34,12217,31],[13443,35,12217,6],[13444,0,12218,6,"cls"],[13444,8,12218,6,"cls"],[13444,11,12218,9],[13444,14,12218,12,"mixinPlugins"],[13444,26,12218,24],[13444,27,12218,25,"plugin"],[13444,33,12218,24],[13444,34,12218,12],[13444,35,12218,33,"cls"],[13444,38,12218,12],[13444,39,12218,6],[13445,0,12219,5],[13447,0,12221,4,"parserClassCache"],[13447,6,12221,4,"parserClassCache"],[13447,22,12221,20],[13447,23,12221,21,"key"],[13447,26,12221,20],[13447,27,12221,4],[13447,30,12221,28,"cls"],[13447,33,12221,4],[13448,0,12222,3],[13450,0,12224,2],[13450,11,12224,9,"cls"],[13450,14,12224,2],[13451,0,12225,1],[13453,0,12227,0,"exports"],[13453,2,12227,0,"exports"],[13453,9,12227,7],[13453,10,12227,8,"parse"],[13453,15,12227,0],[13453,18,12227,16,"parse"],[13453,23,12227,0],[13454,0,12228,0,"exports"],[13454,2,12228,0,"exports"],[13454,9,12228,7],[13454,10,12228,8,"parseExpression"],[13454,25,12228,0],[13454,28,12228,26,"parseExpression"],[13454,43,12228,0],[13455,0,12229,0,"exports"],[13455,2,12229,0,"exports"],[13455,9,12229,7],[13455,10,12229,8,"tokTypes"],[13455,18,12229,0],[13455,21,12229,19,"types"],[13455,26,12229,0]]},"type":"js/module"}]}