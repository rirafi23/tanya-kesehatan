{"dependencies":[{"name":"@babel/types","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = _default;\n\n  var t = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], \"@babel/types\"));\n\n  function _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n\n    _getRequireWildcardCache = function _getRequireWildcardCache() {\n      return cache;\n    };\n\n    return cache;\n  }\n\n  function _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n      return obj;\n    }\n\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n      return {\n        default: obj\n      };\n    }\n\n    var cache = _getRequireWildcardCache();\n\n    if (cache && cache.has(obj)) {\n      return cache.get(obj);\n    }\n\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n    for (var key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n        if (desc && (desc.get || desc.set)) {\n          Object.defineProperty(newObj, key, desc);\n        } else {\n          newObj[key] = obj[key];\n        }\n      }\n    }\n\n    newObj.default = obj;\n\n    if (cache) {\n      cache.set(obj, newObj);\n    }\n\n    return newObj;\n  }\n\n  function _default(node) {\n    if (!this.isReferenced()) return;\n    var binding = this.scope.getBinding(node.name);\n\n    if (binding) {\n      if (binding.identifier.typeAnnotation) {\n        return binding.identifier.typeAnnotation;\n      } else {\n        return getTypeAnnotationBindingConstantViolations(binding, this, node.name);\n      }\n    }\n\n    if (node.name === \"undefined\") {\n      return t.voidTypeAnnotation();\n    } else if (node.name === \"NaN\" || node.name === \"Infinity\") {\n      return t.numberTypeAnnotation();\n    } else if (node.name === \"arguments\") {}\n  }\n\n  function getTypeAnnotationBindingConstantViolations(binding, path, name) {\n    var types = [];\n    var functionConstantViolations = [];\n    var constantViolations = getConstantViolationsBefore(binding, path, functionConstantViolations);\n    var testType = getConditionalAnnotation(binding, path, name);\n\n    if (testType) {\n      var testConstantViolations = getConstantViolationsBefore(binding, testType.ifStatement);\n      constantViolations = constantViolations.filter(function (path) {\n        return testConstantViolations.indexOf(path) < 0;\n      });\n      types.push(testType.typeAnnotation);\n    }\n\n    if (constantViolations.length) {\n      constantViolations = constantViolations.concat(functionConstantViolations);\n\n      for (var _iterator = constantViolations, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"]();;) {\n        var _ref;\n\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref = _i.value;\n        }\n\n        var _violation = _ref;\n        types.push(_violation.getTypeAnnotation());\n      }\n    }\n\n    if (types.length) {\n      return t.createUnionTypeAnnotation(types);\n    }\n  }\n\n  function getConstantViolationsBefore(binding, path, functions) {\n    var violations = binding.constantViolations.slice();\n    violations.unshift(binding.path);\n    return violations.filter(function (violation) {\n      violation = violation.resolve();\n\n      var status = violation._guessExecutionStatusRelativeTo(path);\n\n      if (functions && status === \"unknown\") functions.push(violation);\n      return status === \"before\";\n    });\n  }\n\n  function inferAnnotationFromBinaryExpression(name, path) {\n    var operator = path.node.operator;\n    var right = path.get(\"right\").resolve();\n    var left = path.get(\"left\").resolve();\n    var target;\n\n    if (left.isIdentifier({\n      name: name\n    })) {\n      target = right;\n    } else if (right.isIdentifier({\n      name: name\n    })) {\n      target = left;\n    }\n\n    if (target) {\n      if (operator === \"===\") {\n        return target.getTypeAnnotation();\n      }\n\n      if (t.BOOLEAN_NUMBER_BINARY_OPERATORS.indexOf(operator) >= 0) {\n        return t.numberTypeAnnotation();\n      }\n\n      return;\n    }\n\n    if (operator !== \"===\" && operator !== \"==\") return;\n    var typeofPath;\n    var typePath;\n\n    if (left.isUnaryExpression({\n      operator: \"typeof\"\n    })) {\n      typeofPath = left;\n      typePath = right;\n    } else if (right.isUnaryExpression({\n      operator: \"typeof\"\n    })) {\n      typeofPath = right;\n      typePath = left;\n    }\n\n    if (!typeofPath) return;\n    if (!typeofPath.get(\"argument\").isIdentifier({\n      name: name\n    })) return;\n    typePath = typePath.resolve();\n    if (!typePath.isLiteral()) return;\n    var typeValue = typePath.node.value;\n    if (typeof typeValue !== \"string\") return;\n    return t.createTypeAnnotationBasedOnTypeof(typeValue);\n  }\n\n  function getParentConditionalPath(binding, path, name) {\n    var parentPath;\n\n    while (parentPath = path.parentPath) {\n      if (parentPath.isIfStatement() || parentPath.isConditionalExpression()) {\n        if (path.key === \"test\") {\n          return;\n        }\n\n        return parentPath;\n      }\n\n      if (parentPath.isFunction()) {\n        if (parentPath.parentPath.scope.getBinding(name) !== binding) return;\n      }\n\n      path = parentPath;\n    }\n  }\n\n  function getConditionalAnnotation(binding, path, name) {\n    var ifStatement = getParentConditionalPath(binding, path, name);\n    if (!ifStatement) return;\n    var test = ifStatement.get(\"test\");\n    var paths = [test];\n    var types = [];\n\n    for (var i = 0; i < paths.length; i++) {\n      var _path = paths[i];\n\n      if (_path.isLogicalExpression()) {\n        if (_path.node.operator === \"&&\") {\n          paths.push(_path.get(\"left\"));\n          paths.push(_path.get(\"right\"));\n        }\n      } else if (_path.isBinaryExpression()) {\n        var type = inferAnnotationFromBinaryExpression(name, _path);\n        if (type) types.push(type);\n      }\n    }\n\n    if (types.length) {\n      return {\n        typeAnnotation: t.createUnionTypeAnnotation(types),\n        ifStatement: ifStatement\n      };\n    }\n\n    return getConditionalAnnotation(ifStatement, name);\n  }\n});","map":[[2,0,1,0],[4,0,3,0,"Object"],[4,2,3,0,"Object"],[4,8,3,6],[4,9,3,7,"defineProperty"],[4,23,3,0],[4,24,3,22,"exports"],[4,31,3,0],[4,33,3,31],[4,45,3,0],[4,47,3,45],[5,0,4,2,"value"],[5,4,4,2,"value"],[5,9,4,7],[5,11,4,9],[6,0,3,45],[6,3,3,0],[7,0,6,0,"exports"],[7,2,6,0,"exports"],[7,9,6,7],[7,10,6,8,"default"],[7,17,6,0],[7,20,6,18,"_default"],[7,28,6,0],[9,0,8,0],[9,6,8,4,"t"],[9,7,8,5],[9,10,8,8,"_interopRequireWildcard"],[9,33,8,31],[9,34,8,32,"require"],[9,45,8,39],[9,80,8,31],[9,81,8,0],[11,0,10,0],[11,11,10,9,"_getRequireWildcardCache"],[11,35,10,0],[11,38,10,36],[12,0,10,38],[12,8,10,42],[12,15,10,49,"WeakMap"],[12,22,10,42],[12,27,10,61],[12,37,10,38],[12,39,10,73],[12,46,10,80],[12,50,10,73],[13,0,10,86],[13,8,10,90,"cache"],[13,13,10,95],[13,16,10,98],[13,20,10,102,"WeakMap"],[13,27,10,98],[13,29,10,86],[15,0,10,113,"_getRequireWildcardCache"],[15,4,10,113,"_getRequireWildcardCache"],[15,28,10,137],[15,31,10,140],[15,67,10,152],[16,0,10,154],[16,13,10,161,"cache"],[16,18,10,154],[17,0,10,169],[17,5,10,113],[19,0,10,171],[19,11,10,178,"cache"],[19,16,10,171],[20,0,10,186],[22,0,12,0],[22,11,12,9,"_interopRequireWildcard"],[22,34,12,0],[22,35,12,33,"obj"],[22,38,12,0],[22,40,12,38],[23,0,12,40],[23,8,12,44,"obj"],[23,11,12,47],[23,15,12,51,"obj"],[23,18,12,54],[23,19,12,55,"__esModule"],[23,29,12,40],[23,31,12,67],[24,0,12,69],[24,13,12,76,"obj"],[24,16,12,69],[25,0,12,82],[27,0,12,83],[27,8,12,87,"obj"],[27,11,12,90],[27,16,12,95],[27,20,12,87],[27,24,12,103],[27,31,12,110,"obj"],[27,34,12,103],[27,39,12,118],[27,47,12,103],[27,51,12,130],[27,58,12,137,"obj"],[27,61,12,130],[27,66,12,145],[27,76,12,83],[27,78,12,157],[28,0,12,159],[28,13,12,166],[29,0,12,168,"default"],[29,8,12,168,"default"],[29,15,12,175],[29,17,12,177,"obj"],[30,0,12,166],[30,7,12,159],[31,0,12,185],[33,0,12,186],[33,8,12,190,"cache"],[33,13,12,195],[33,16,12,198,"_getRequireWildcardCache"],[33,40,12,222],[33,42,12,186],[35,0,12,226],[35,8,12,230,"cache"],[35,13,12,235],[35,17,12,239,"cache"],[35,22,12,244],[35,23,12,245,"has"],[35,26,12,239],[35,27,12,249,"obj"],[35,30,12,239],[35,31,12,226],[35,33,12,255],[36,0,12,257],[36,13,12,264,"cache"],[36,18,12,269],[36,19,12,270,"get"],[36,22,12,264],[36,23,12,274,"obj"],[36,26,12,264],[36,27,12,257],[37,0,12,281],[39,0,12,282],[39,8,12,286,"newObj"],[39,14,12,292],[39,17,12,295],[39,19,12,282],[40,0,12,299],[40,8,12,303,"hasPropertyDescriptor"],[40,29,12,324],[40,32,12,327,"Object"],[40,38,12,333],[40,39,12,334,"defineProperty"],[40,53,12,327],[40,57,12,352,"Object"],[40,63,12,358],[40,64,12,359,"getOwnPropertyDescriptor"],[40,88,12,299],[42,0,12,385],[42,9,12,390],[42,13,12,394,"key"],[42,16,12,385],[42,20,12,401,"obj"],[42,23,12,385],[42,25,12,406],[43,0,12,408],[43,10,12,412,"Object"],[43,16,12,418],[43,17,12,419,"prototype"],[43,26,12,412],[43,27,12,429,"hasOwnProperty"],[43,41,12,412],[43,42,12,444,"call"],[43,46,12,412],[43,47,12,449,"obj"],[43,50,12,412],[43,52,12,454,"key"],[43,55,12,412],[43,56,12,408],[43,58,12,460],[44,0,12,462],[44,12,12,466,"desc"],[44,16,12,470],[44,19,12,473,"hasPropertyDescriptor"],[44,40,12,494],[44,43,12,497,"Object"],[44,49,12,503],[44,50,12,504,"getOwnPropertyDescriptor"],[44,74,12,497],[44,75,12,529,"obj"],[44,78,12,497],[44,80,12,534,"key"],[44,83,12,497],[44,84,12,494],[44,87,12,541],[44,91,12,462],[46,0,12,547],[46,12,12,551,"desc"],[46,16,12,555],[46,21,12,560,"desc"],[46,25,12,564],[46,26,12,565,"get"],[46,29,12,560],[46,33,12,572,"desc"],[46,37,12,576],[46,38,12,577,"set"],[46,41,12,555],[46,42,12,547],[46,44,12,583],[47,0,12,585,"Object"],[47,10,12,585,"Object"],[47,16,12,591],[47,17,12,592,"defineProperty"],[47,31,12,585],[47,32,12,607,"newObj"],[47,38,12,585],[47,40,12,615,"key"],[47,43,12,585],[47,45,12,620,"desc"],[47,49,12,585],[48,0,12,628],[48,9,12,547],[48,15,12,634],[49,0,12,636,"newObj"],[49,10,12,636,"newObj"],[49,16,12,642],[49,17,12,643,"key"],[49,20,12,642],[49,21,12,636],[49,24,12,650,"obj"],[49,27,12,653],[49,28,12,654,"key"],[49,31,12,653],[49,32,12,636],[50,0,12,661],[51,0,12,663],[52,0,12,665],[54,0,12,666,"newObj"],[54,4,12,666,"newObj"],[54,10,12,672],[54,11,12,673,"default"],[54,18,12,666],[54,21,12,683,"obj"],[54,24,12,666],[56,0,12,688],[56,8,12,692,"cache"],[56,13,12,688],[56,15,12,699],[57,0,12,701,"cache"],[57,6,12,701,"cache"],[57,11,12,706],[57,12,12,707,"set"],[57,15,12,701],[57,16,12,711,"obj"],[57,19,12,701],[57,21,12,716,"newObj"],[57,27,12,701],[58,0,12,726],[60,0,12,727],[60,11,12,734,"newObj"],[60,17,12,727],[61,0,12,743],[63,0,14,0],[63,11,14,9,"_default"],[63,19,14,0],[63,20,14,18,"node"],[63,24,14,0],[63,26,14,24],[64,0,15,2],[64,8,15,6],[64,9,15,7],[64,14,15,12,"isReferenced"],[64,26,15,7],[64,28,15,2],[64,30,15,28],[65,0,16,2],[65,8,16,8,"binding"],[65,15,16,15],[65,18,16,18],[65,23,16,23,"scope"],[65,28,16,18],[65,29,16,29,"getBinding"],[65,39,16,18],[65,40,16,40,"node"],[65,44,16,44],[65,45,16,45,"name"],[65,49,16,18],[65,50,16,2],[67,0,18,2],[67,8,18,6,"binding"],[67,15,18,2],[67,17,18,15],[68,0,19,4],[68,10,19,8,"binding"],[68,17,19,15],[68,18,19,16,"identifier"],[68,28,19,8],[68,29,19,27,"typeAnnotation"],[68,43,19,4],[68,45,19,43],[69,0,20,6],[69,15,20,13,"binding"],[69,22,20,20],[69,23,20,21,"identifier"],[69,33,20,13],[69,34,20,32,"typeAnnotation"],[69,48,20,6],[70,0,21,5],[70,7,19,4],[70,13,21,11],[71,0,22,6],[71,15,22,13,"getTypeAnnotationBindingConstantViolations"],[71,57,22,55],[71,58,22,56,"binding"],[71,65,22,55],[71,67,22,65],[71,71,22,55],[71,73,22,71,"node"],[71,77,22,75],[71,78,22,76,"name"],[71,82,22,55],[71,83,22,6],[72,0,23,5],[73,0,24,3],[75,0,26,2],[75,8,26,6,"node"],[75,12,26,10],[75,13,26,11,"name"],[75,17,26,6],[75,22,26,20],[75,33,26,2],[75,35,26,33],[76,0,27,4],[76,13,27,11,"t"],[76,14,27,12],[76,15,27,13,"voidTypeAnnotation"],[76,33,27,11],[76,35,27,4],[77,0,28,3],[77,5,26,2],[77,11,28,9],[77,15,28,13,"node"],[77,19,28,17],[77,20,28,18,"name"],[77,24,28,13],[77,29,28,27],[77,34,28,13],[77,38,28,36,"node"],[77,42,28,40],[77,43,28,41,"name"],[77,47,28,36],[77,52,28,50],[77,62,28,9],[77,64,28,62],[78,0,29,4],[78,13,29,11,"t"],[78,14,29,12],[78,15,29,13,"numberTypeAnnotation"],[78,35,29,11],[78,37,29,4],[79,0,30,3],[79,5,28,9],[79,11,30,9],[79,15,30,13,"node"],[79,19,30,17],[79,20,30,18,"name"],[79,24,30,13],[79,29,30,27],[79,40,30,9],[79,42,30,40],[79,43,30,42],[80,0,31,1],[82,0,33,0],[82,11,33,9,"getTypeAnnotationBindingConstantViolations"],[82,53,33,0],[82,54,33,52,"binding"],[82,61,33,0],[82,63,33,61,"path"],[82,67,33,0],[82,69,33,67,"name"],[82,73,33,0],[82,75,33,73],[83,0,34,2],[83,8,34,8,"types"],[83,13,34,13],[83,16,34,16],[83,18,34,2],[84,0,35,2],[84,8,35,8,"functionConstantViolations"],[84,34,35,34],[84,37,35,37],[84,39,35,2],[85,0,36,2],[85,8,36,6,"constantViolations"],[85,26,36,24],[85,29,36,27,"getConstantViolationsBefore"],[85,56,36,54],[85,57,36,55,"binding"],[85,64,36,54],[85,66,36,64,"path"],[85,70,36,54],[85,72,36,70,"functionConstantViolations"],[85,98,36,54],[85,99,36,2],[86,0,37,2],[86,8,37,8,"testType"],[86,16,37,16],[86,19,37,19,"getConditionalAnnotation"],[86,43,37,43],[86,44,37,44,"binding"],[86,51,37,43],[86,53,37,53,"path"],[86,57,37,43],[86,59,37,59,"name"],[86,63,37,43],[86,64,37,2],[88,0,39,2],[88,8,39,6,"testType"],[88,16,39,2],[88,18,39,16],[89,0,40,4],[89,10,40,10,"testConstantViolations"],[89,32,40,32],[89,35,40,35,"getConstantViolationsBefore"],[89,62,40,62],[89,63,40,63,"binding"],[89,70,40,62],[89,72,40,72,"testType"],[89,80,40,80],[89,81,40,81,"ifStatement"],[89,92,40,62],[89,93,40,4],[90,0,41,4,"constantViolations"],[90,6,41,4,"constantViolations"],[90,24,41,22],[90,27,41,25,"constantViolations"],[90,45,41,43],[90,46,41,44,"filter"],[90,52,41,25],[90,53,41,51],[90,63,41,51,"path"],[90,67,41,55],[91,0,41,55],[91,15,41,59,"testConstantViolations"],[91,37,41,81],[91,38,41,82,"indexOf"],[91,45,41,59],[91,46,41,90,"path"],[91,50,41,59],[91,54,41,98],[91,55,41,55],[92,0,41,55],[92,7,41,25],[92,8,41,4],[93,0,42,4,"types"],[93,6,42,4,"types"],[93,11,42,9],[93,12,42,10,"push"],[93,16,42,4],[93,17,42,15,"testType"],[93,25,42,23],[93,26,42,24,"typeAnnotation"],[93,40,42,4],[94,0,43,3],[96,0,45,2],[96,8,45,6,"constantViolations"],[96,26,45,24],[96,27,45,25,"length"],[96,33,45,2],[96,35,45,33],[97,0,46,4,"constantViolations"],[97,6,46,4,"constantViolations"],[97,24,46,22],[97,27,46,25,"constantViolations"],[97,45,46,43],[97,46,46,44,"concat"],[97,52,46,25],[97,53,46,51,"functionConstantViolations"],[97,79,46,25],[97,80,46,4],[99,0,48,4],[99,27,48,28,"constantViolations"],[99,45,48,4],[99,205,48,48],[100,0,48,48],[102,0,48,48],[103,0,48,48],[104,0,48,48],[105,0,48,48],[106,0,48,48],[107,0,48,48],[108,0,48,48],[109,0,48,48],[111,0,48,48],[111,12,48,15,"violation"],[111,22,48,48],[112,0,49,6,"types"],[112,8,49,6,"types"],[112,13,49,11],[112,14,49,12,"push"],[112,18,49,6],[112,19,49,17,"violation"],[112,29,49,26],[112,30,49,27,"getTypeAnnotation"],[112,47,49,17],[112,49,49,6],[113,0,50,5],[114,0,51,3],[116,0,53,2],[116,8,53,6,"types"],[116,13,53,11],[116,14,53,12,"length"],[116,20,53,2],[116,22,53,20],[117,0,54,4],[117,13,54,11,"t"],[117,14,54,12],[117,15,54,13,"createUnionTypeAnnotation"],[117,40,54,11],[117,41,54,39,"types"],[117,46,54,11],[117,47,54,4],[118,0,55,3],[119,0,56,1],[121,0,58,0],[121,11,58,9,"getConstantViolationsBefore"],[121,38,58,0],[121,39,58,37,"binding"],[121,46,58,0],[121,48,58,46,"path"],[121,52,58,0],[121,54,58,52,"functions"],[121,63,58,0],[121,65,58,63],[122,0,59,2],[122,8,59,8,"violations"],[122,18,59,18],[122,21,59,21,"binding"],[122,28,59,28],[122,29,59,29,"constantViolations"],[122,47,59,21],[122,48,59,48,"slice"],[122,53,59,21],[122,55,59,2],[123,0,60,2,"violations"],[123,4,60,2,"violations"],[123,14,60,12],[123,15,60,13,"unshift"],[123,22,60,2],[123,23,60,21,"binding"],[123,30,60,28],[123,31,60,29,"path"],[123,35,60,2],[124,0,61,2],[124,11,61,9,"violations"],[124,21,61,19],[124,22,61,20,"filter"],[124,28,61,9],[124,29,61,27],[124,39,61,27,"violation"],[124,48,61,36],[124,50,61,40],[125,0,62,4,"violation"],[125,6,62,4,"violation"],[125,15,62,13],[125,18,62,16,"violation"],[125,27,62,25],[125,28,62,26,"resolve"],[125,35,62,16],[125,37,62,4],[127,0,64,4],[127,10,64,10,"status"],[127,16,64,16],[127,19,64,19,"violation"],[127,28,64,28],[127,29,64,29,"_guessExecutionStatusRelativeTo"],[127,60,64,19],[127,61,64,61,"path"],[127,65,64,19],[127,66,64,4],[129,0,66,4],[129,10,66,8,"functions"],[129,19,66,17],[129,23,66,21,"status"],[129,29,66,27],[129,34,66,32],[129,43,66,4],[129,45,66,43,"functions"],[129,54,66,52],[129,55,66,53,"push"],[129,59,66,43],[129,60,66,58,"violation"],[129,69,66,43],[130,0,67,4],[130,13,67,11,"status"],[130,19,67,17],[130,24,67,22],[130,32,67,4],[131,0,68,3],[131,5,61,9],[131,6,61,2],[132,0,69,1],[134,0,71,0],[134,11,71,9,"inferAnnotationFromBinaryExpression"],[134,46,71,0],[134,47,71,45,"name"],[134,51,71,0],[134,53,71,51,"path"],[134,57,71,0],[134,59,71,57],[135,0,72,2],[135,8,72,8,"operator"],[135,16,72,16],[135,19,72,19,"path"],[135,23,72,23],[135,24,72,24,"node"],[135,28,72,19],[135,29,72,29,"operator"],[135,37,72,2],[136,0,73,2],[136,8,73,8,"right"],[136,13,73,13],[136,16,73,16,"path"],[136,20,73,20],[136,21,73,21,"get"],[136,24,73,16],[136,25,73,25],[136,32,73,16],[136,34,73,34,"resolve"],[136,41,73,16],[136,43,73,2],[137,0,74,2],[137,8,74,8,"left"],[137,12,74,12],[137,15,74,15,"path"],[137,19,74,19],[137,20,74,20,"get"],[137,23,74,15],[137,24,74,24],[137,30,74,15],[137,32,74,32,"resolve"],[137,39,74,15],[137,41,74,2],[138,0,75,2],[138,8,75,6,"target"],[138,14,75,2],[140,0,77,2],[140,8,77,6,"left"],[140,12,77,10],[140,13,77,11,"isIdentifier"],[140,25,77,6],[140,26,77,24],[141,0,78,4,"name"],[141,6,78,4,"name"],[141,10,78,8],[141,12,78,4,"name"],[142,0,77,24],[142,5,77,6],[142,6,77,2],[142,8,79,6],[143,0,80,4,"target"],[143,6,80,4,"target"],[143,12,80,10],[143,15,80,13,"right"],[143,20,80,4],[144,0,81,3],[144,5,77,2],[144,11,81,9],[144,15,81,13,"right"],[144,20,81,18],[144,21,81,19,"isIdentifier"],[144,33,81,13],[144,34,81,32],[145,0,82,4,"name"],[145,6,82,4,"name"],[145,10,82,8],[145,12,82,4,"name"],[146,0,81,32],[146,5,81,13],[146,6,81,9],[146,8,83,6],[147,0,84,4,"target"],[147,6,84,4,"target"],[147,12,84,10],[147,15,84,13,"left"],[147,19,84,4],[148,0,85,3],[150,0,87,2],[150,8,87,6,"target"],[150,14,87,2],[150,16,87,14],[151,0,88,4],[151,10,88,8,"operator"],[151,18,88,16],[151,23,88,21],[151,28,88,4],[151,30,88,28],[152,0,89,6],[152,15,89,13,"target"],[152,21,89,19],[152,22,89,20,"getTypeAnnotation"],[152,39,89,13],[152,41,89,6],[153,0,90,5],[155,0,92,4],[155,10,92,8,"t"],[155,11,92,9],[155,12,92,10,"BOOLEAN_NUMBER_BINARY_OPERATORS"],[155,43,92,8],[155,44,92,42,"indexOf"],[155,51,92,8],[155,52,92,50,"operator"],[155,60,92,8],[155,65,92,63],[155,66,92,4],[155,68,92,66],[156,0,93,6],[156,15,93,13,"t"],[156,16,93,14],[156,17,93,15,"numberTypeAnnotation"],[156,37,93,13],[156,39,93,6],[157,0,94,5],[159,0,96,4],[160,0,97,3],[162,0,99,2],[162,8,99,6,"operator"],[162,16,99,14],[162,21,99,19],[162,26,99,6],[162,30,99,28,"operator"],[162,38,99,36],[162,43,99,41],[162,47,99,2],[162,49,99,47],[163,0,100,2],[163,8,100,6,"typeofPath"],[163,18,100,2],[164,0,101,2],[164,8,101,6,"typePath"],[164,16,101,2],[166,0,103,2],[166,8,103,6,"left"],[166,12,103,10],[166,13,103,11,"isUnaryExpression"],[166,30,103,6],[166,31,103,29],[167,0,104,4,"operator"],[167,6,104,4,"operator"],[167,14,104,12],[167,16,104,14],[168,0,103,29],[168,5,103,6],[168,6,103,2],[168,8,105,6],[169,0,106,4,"typeofPath"],[169,6,106,4,"typeofPath"],[169,16,106,14],[169,19,106,17,"left"],[169,23,106,4],[170,0,107,4,"typePath"],[170,6,107,4,"typePath"],[170,14,107,12],[170,17,107,15,"right"],[170,22,107,4],[171,0,108,3],[171,5,103,2],[171,11,108,9],[171,15,108,13,"right"],[171,20,108,18],[171,21,108,19,"isUnaryExpression"],[171,38,108,13],[171,39,108,37],[172,0,109,4,"operator"],[172,6,109,4,"operator"],[172,14,109,12],[172,16,109,14],[173,0,108,37],[173,5,108,13],[173,6,108,9],[173,8,110,6],[174,0,111,4,"typeofPath"],[174,6,111,4,"typeofPath"],[174,16,111,14],[174,19,111,17,"right"],[174,24,111,4],[175,0,112,4,"typePath"],[175,6,112,4,"typePath"],[175,14,112,12],[175,17,112,15,"left"],[175,21,112,4],[176,0,113,3],[178,0,115,2],[178,8,115,6],[178,9,115,7,"typeofPath"],[178,19,115,2],[178,21,115,19],[179,0,116,2],[179,8,116,6],[179,9,116,7,"typeofPath"],[179,19,116,17],[179,20,116,18,"get"],[179,23,116,7],[179,24,116,22],[179,34,116,7],[179,36,116,34,"isIdentifier"],[179,48,116,7],[179,49,116,47],[180,0,117,4,"name"],[180,6,117,4,"name"],[180,10,117,8],[180,12,117,4,"name"],[181,0,116,47],[181,5,116,7],[181,6,116,2],[181,8,118,6],[182,0,119,2,"typePath"],[182,4,119,2,"typePath"],[182,12,119,10],[182,15,119,13,"typePath"],[182,23,119,21],[182,24,119,22,"resolve"],[182,31,119,13],[182,33,119,2],[183,0,120,2],[183,8,120,6],[183,9,120,7,"typePath"],[183,17,120,15],[183,18,120,16,"isLiteral"],[183,27,120,7],[183,29,120,2],[183,31,120,29],[184,0,121,2],[184,8,121,8,"typeValue"],[184,17,121,17],[184,20,121,20,"typePath"],[184,28,121,28],[184,29,121,29,"node"],[184,33,121,20],[184,34,121,34,"value"],[184,39,121,2],[185,0,122,2],[185,8,122,6],[185,15,122,13,"typeValue"],[185,24,122,6],[185,29,122,27],[185,37,122,2],[185,39,122,37],[186,0,123,2],[186,11,123,9,"t"],[186,12,123,10],[186,13,123,11,"createTypeAnnotationBasedOnTypeof"],[186,46,123,9],[186,47,123,45,"typeValue"],[186,56,123,9],[186,57,123,2],[187,0,124,1],[189,0,126,0],[189,11,126,9,"getParentConditionalPath"],[189,35,126,0],[189,36,126,34,"binding"],[189,43,126,0],[189,45,126,43,"path"],[189,49,126,0],[189,51,126,49,"name"],[189,55,126,0],[189,57,126,55],[190,0,127,2],[190,8,127,6,"parentPath"],[190,18,127,2],[192,0,129,2],[192,11,129,9,"parentPath"],[192,21,129,19],[192,24,129,22,"path"],[192,28,129,26],[192,29,129,27,"parentPath"],[192,39,129,2],[192,41,129,39],[193,0,130,4],[193,10,130,8,"parentPath"],[193,20,130,18],[193,21,130,19,"isIfStatement"],[193,34,130,8],[193,40,130,38,"parentPath"],[193,50,130,48],[193,51,130,49,"isConditionalExpression"],[193,74,130,38],[193,76,130,4],[193,78,130,76],[194,0,131,6],[194,12,131,10,"path"],[194,16,131,14],[194,17,131,15,"key"],[194,20,131,10],[194,25,131,23],[194,31,131,6],[194,33,131,31],[195,0,132,8],[196,0,133,7],[198,0,135,6],[198,15,135,13,"parentPath"],[198,25,135,6],[199,0,136,5],[201,0,138,4],[201,10,138,8,"parentPath"],[201,20,138,18],[201,21,138,19,"isFunction"],[201,31,138,8],[201,33,138,4],[201,35,138,33],[202,0,139,6],[202,12,139,10,"parentPath"],[202,22,139,20],[202,23,139,21,"parentPath"],[202,33,139,10],[202,34,139,32,"scope"],[202,39,139,10],[202,40,139,38,"getBinding"],[202,50,139,10],[202,51,139,49,"name"],[202,55,139,10],[202,61,139,59,"binding"],[202,68,139,6],[202,70,139,68],[203,0,140,5],[205,0,142,4,"path"],[205,6,142,4,"path"],[205,10,142,8],[205,13,142,11,"parentPath"],[205,23,142,4],[206,0,143,3],[207,0,144,1],[209,0,146,0],[209,11,146,9,"getConditionalAnnotation"],[209,35,146,0],[209,36,146,34,"binding"],[209,43,146,0],[209,45,146,43,"path"],[209,49,146,0],[209,51,146,49,"name"],[209,55,146,0],[209,57,146,55],[210,0,147,2],[210,8,147,8,"ifStatement"],[210,19,147,19],[210,22,147,22,"getParentConditionalPath"],[210,46,147,46],[210,47,147,47,"binding"],[210,54,147,46],[210,56,147,56,"path"],[210,60,147,46],[210,62,147,62,"name"],[210,66,147,46],[210,67,147,2],[211,0,148,2],[211,8,148,6],[211,9,148,7,"ifStatement"],[211,20,148,2],[211,22,148,20],[212,0,149,2],[212,8,149,8,"test"],[212,12,149,12],[212,15,149,15,"ifStatement"],[212,26,149,26],[212,27,149,27,"get"],[212,30,149,15],[212,31,149,31],[212,37,149,15],[212,38,149,2],[213,0,150,2],[213,8,150,8,"paths"],[213,13,150,13],[213,16,150,16],[213,17,150,17,"test"],[213,21,150,16],[213,22,150,2],[214,0,151,2],[214,8,151,8,"types"],[214,13,151,13],[214,16,151,16],[214,18,151,2],[216,0,153,2],[216,9,153,7],[216,13,153,11,"i"],[216,14,153,12],[216,17,153,15],[216,18,153,2],[216,20,153,18,"i"],[216,21,153,19],[216,24,153,22,"paths"],[216,29,153,27],[216,30,153,28,"length"],[216,36,153,2],[216,38,153,36,"i"],[216,39,153,37],[216,41,153,2],[216,43,153,41],[217,0,154,4],[217,10,154,10,"path"],[217,15,154,14],[217,18,154,17,"paths"],[217,23,154,22],[217,24,154,23,"i"],[217,25,154,22],[217,26,154,4],[219,0,156,4],[219,10,156,8,"path"],[219,15,156,12],[219,16,156,13,"isLogicalExpression"],[219,35,156,8],[219,37,156,4],[219,39,156,36],[220,0,157,6],[220,12,157,10,"path"],[220,17,157,14],[220,18,157,15,"node"],[220,22,157,10],[220,23,157,20,"operator"],[220,31,157,10],[220,36,157,33],[220,40,157,6],[220,42,157,39],[221,0,158,8,"paths"],[221,10,158,8,"paths"],[221,15,158,13],[221,16,158,14,"push"],[221,20,158,8],[221,21,158,19,"path"],[221,26,158,23],[221,27,158,24,"get"],[221,30,158,19],[221,31,158,28],[221,37,158,19],[221,38,158,8],[222,0,159,8,"paths"],[222,10,159,8,"paths"],[222,15,159,13],[222,16,159,14,"push"],[222,20,159,8],[222,21,159,19,"path"],[222,26,159,23],[222,27,159,24,"get"],[222,30,159,19],[222,31,159,28],[222,38,159,19],[222,39,159,8],[223,0,160,7],[224,0,161,5],[224,7,156,4],[224,13,161,11],[224,17,161,15,"path"],[224,22,161,19],[224,23,161,20,"isBinaryExpression"],[224,41,161,15],[224,43,161,11],[224,45,161,42],[225,0,162,6],[225,12,162,12,"type"],[225,16,162,16],[225,19,162,19,"inferAnnotationFromBinaryExpression"],[225,54,162,54],[225,55,162,55,"name"],[225,59,162,54],[225,61,162,61,"path"],[225,66,162,54],[225,67,162,6],[226,0,163,6],[226,12,163,10,"type"],[226,16,163,6],[226,18,163,16,"types"],[226,23,163,21],[226,24,163,22,"push"],[226,28,163,16],[226,29,163,27,"type"],[226,33,163,16],[227,0,164,5],[228,0,165,3],[230,0,167,2],[230,8,167,6,"types"],[230,13,167,11],[230,14,167,12,"length"],[230,20,167,2],[230,22,167,20],[231,0,168,4],[231,13,168,11],[232,0,169,6,"typeAnnotation"],[232,8,169,6,"typeAnnotation"],[232,22,169,20],[232,24,169,22,"t"],[232,25,169,23],[232,26,169,24,"createUnionTypeAnnotation"],[232,51,169,22],[232,52,169,50,"types"],[232,57,169,22],[232,58,168,11],[233,0,170,6,"ifStatement"],[233,8,170,6,"ifStatement"],[233,19,170,17],[233,21,170,6,"ifStatement"],[234,0,168,11],[234,7,168,4],[235,0,172,3],[237,0,174,2],[237,11,174,9,"getConditionalAnnotation"],[237,35,174,33],[237,36,174,34,"ifStatement"],[237,47,174,33],[237,49,174,47,"name"],[237,53,174,33],[237,54,174,2],[238,0,175,1]]},"type":"js/module"}]}