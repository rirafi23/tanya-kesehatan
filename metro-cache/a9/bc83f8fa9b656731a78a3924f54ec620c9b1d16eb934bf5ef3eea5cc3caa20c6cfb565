{"dependencies":[{"name":"@babel/types","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.WithStatement = WithStatement;\n  exports.IfStatement = IfStatement;\n  exports.ForStatement = ForStatement;\n  exports.WhileStatement = WhileStatement;\n  exports.DoWhileStatement = DoWhileStatement;\n  exports.LabeledStatement = LabeledStatement;\n  exports.TryStatement = TryStatement;\n  exports.CatchClause = CatchClause;\n  exports.SwitchStatement = SwitchStatement;\n  exports.SwitchCase = SwitchCase;\n  exports.DebuggerStatement = DebuggerStatement;\n  exports.VariableDeclaration = VariableDeclaration;\n  exports.VariableDeclarator = VariableDeclarator;\n  exports.ThrowStatement = exports.BreakStatement = exports.ReturnStatement = exports.ContinueStatement = exports.ForOfStatement = exports.ForInStatement = void 0;\n\n  var t = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], \"@babel/types\"));\n\n  function _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n\n    _getRequireWildcardCache = function _getRequireWildcardCache() {\n      return cache;\n    };\n\n    return cache;\n  }\n\n  function _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n      return obj;\n    }\n\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n      return {\n        default: obj\n      };\n    }\n\n    var cache = _getRequireWildcardCache();\n\n    if (cache && cache.has(obj)) {\n      return cache.get(obj);\n    }\n\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n    for (var key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n        if (desc && (desc.get || desc.set)) {\n          Object.defineProperty(newObj, key, desc);\n        } else {\n          newObj[key] = obj[key];\n        }\n      }\n    }\n\n    newObj.default = obj;\n\n    if (cache) {\n      cache.set(obj, newObj);\n    }\n\n    return newObj;\n  }\n\n  function WithStatement(node) {\n    this.word(\"with\");\n    this.space();\n    this.token(\"(\");\n    this.print(node.object, node);\n    this.token(\")\");\n    this.printBlock(node);\n  }\n\n  function IfStatement(node) {\n    this.word(\"if\");\n    this.space();\n    this.token(\"(\");\n    this.print(node.test, node);\n    this.token(\")\");\n    this.space();\n    var needsBlock = node.alternate && t.isIfStatement(getLastStatement(node.consequent));\n\n    if (needsBlock) {\n      this.token(\"{\");\n      this.newline();\n      this.indent();\n    }\n\n    this.printAndIndentOnComments(node.consequent, node);\n\n    if (needsBlock) {\n      this.dedent();\n      this.newline();\n      this.token(\"}\");\n    }\n\n    if (node.alternate) {\n      if (this.endsWith(\"}\")) this.space();\n      this.word(\"else\");\n      this.space();\n      this.printAndIndentOnComments(node.alternate, node);\n    }\n  }\n\n  function getLastStatement(statement) {\n    if (!t.isStatement(statement.body)) return statement;\n    return getLastStatement(statement.body);\n  }\n\n  function ForStatement(node) {\n    this.word(\"for\");\n    this.space();\n    this.token(\"(\");\n    this.inForStatementInitCounter++;\n    this.print(node.init, node);\n    this.inForStatementInitCounter--;\n    this.token(\";\");\n\n    if (node.test) {\n      this.space();\n      this.print(node.test, node);\n    }\n\n    this.token(\";\");\n\n    if (node.update) {\n      this.space();\n      this.print(node.update, node);\n    }\n\n    this.token(\")\");\n    this.printBlock(node);\n  }\n\n  function WhileStatement(node) {\n    this.word(\"while\");\n    this.space();\n    this.token(\"(\");\n    this.print(node.test, node);\n    this.token(\")\");\n    this.printBlock(node);\n  }\n\n  var buildForXStatement = function buildForXStatement(op) {\n    return function (node) {\n      this.word(\"for\");\n      this.space();\n\n      if (op === \"of\" && node.await) {\n        this.word(\"await\");\n        this.space();\n      }\n\n      this.token(\"(\");\n      this.print(node.left, node);\n      this.space();\n      this.word(op);\n      this.space();\n      this.print(node.right, node);\n      this.token(\")\");\n      this.printBlock(node);\n    };\n  };\n\n  var ForInStatement = buildForXStatement(\"in\");\n  exports.ForInStatement = ForInStatement;\n  var ForOfStatement = buildForXStatement(\"of\");\n  exports.ForOfStatement = ForOfStatement;\n\n  function DoWhileStatement(node) {\n    this.word(\"do\");\n    this.space();\n    this.print(node.body, node);\n    this.space();\n    this.word(\"while\");\n    this.space();\n    this.token(\"(\");\n    this.print(node.test, node);\n    this.token(\")\");\n    this.semicolon();\n  }\n\n  function buildLabelStatement(prefix) {\n    var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"label\";\n    return function (node) {\n      this.word(prefix);\n      var label = node[key];\n\n      if (label) {\n        this.space();\n        var isLabel = key == \"label\";\n        var terminatorState = this.startTerminatorless(isLabel);\n        this.print(label, node);\n        this.endTerminatorless(terminatorState);\n      }\n\n      this.semicolon();\n    };\n  }\n\n  var ContinueStatement = buildLabelStatement(\"continue\");\n  exports.ContinueStatement = ContinueStatement;\n  var ReturnStatement = buildLabelStatement(\"return\", \"argument\");\n  exports.ReturnStatement = ReturnStatement;\n  var BreakStatement = buildLabelStatement(\"break\");\n  exports.BreakStatement = BreakStatement;\n  var ThrowStatement = buildLabelStatement(\"throw\", \"argument\");\n  exports.ThrowStatement = ThrowStatement;\n\n  function LabeledStatement(node) {\n    this.print(node.label, node);\n    this.token(\":\");\n    this.space();\n    this.print(node.body, node);\n  }\n\n  function TryStatement(node) {\n    this.word(\"try\");\n    this.space();\n    this.print(node.block, node);\n    this.space();\n\n    if (node.handlers) {\n      this.print(node.handlers[0], node);\n    } else {\n      this.print(node.handler, node);\n    }\n\n    if (node.finalizer) {\n      this.space();\n      this.word(\"finally\");\n      this.space();\n      this.print(node.finalizer, node);\n    }\n  }\n\n  function CatchClause(node) {\n    this.word(\"catch\");\n    this.space();\n\n    if (node.param) {\n      this.token(\"(\");\n      this.print(node.param, node);\n      this.token(\")\");\n      this.space();\n    }\n\n    this.print(node.body, node);\n  }\n\n  function SwitchStatement(node) {\n    this.word(\"switch\");\n    this.space();\n    this.token(\"(\");\n    this.print(node.discriminant, node);\n    this.token(\")\");\n    this.space();\n    this.token(\"{\");\n    this.printSequence(node.cases, node, {\n      indent: true,\n      addNewlines: function addNewlines(leading, cas) {\n        if (!leading && node.cases[node.cases.length - 1] === cas) return -1;\n      }\n    });\n    this.token(\"}\");\n  }\n\n  function SwitchCase(node) {\n    if (node.test) {\n      this.word(\"case\");\n      this.space();\n      this.print(node.test, node);\n      this.token(\":\");\n    } else {\n      this.word(\"default\");\n      this.token(\":\");\n    }\n\n    if (node.consequent.length) {\n      this.newline();\n      this.printSequence(node.consequent, node, {\n        indent: true\n      });\n    }\n  }\n\n  function DebuggerStatement() {\n    this.word(\"debugger\");\n    this.semicolon();\n  }\n\n  function variableDeclarationIndent() {\n    this.token(\",\");\n    this.newline();\n    if (this.endsWith(\"\\n\")) for (var i = 0; i < 4; i++) {\n      this.space(true);\n    }\n  }\n\n  function constDeclarationIndent() {\n    this.token(\",\");\n    this.newline();\n    if (this.endsWith(\"\\n\")) for (var i = 0; i < 6; i++) {\n      this.space(true);\n    }\n  }\n\n  function VariableDeclaration(node, parent) {\n    if (node.declare) {\n      this.word(\"declare\");\n      this.space();\n    }\n\n    this.word(node.kind);\n    this.space();\n    var hasInits = false;\n\n    if (!t.isFor(parent)) {\n      for (var _iterator = node.declarations, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"]();;) {\n        var _ref;\n\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref = _i.value;\n        }\n\n        var _declar = _ref;\n\n        if (_declar.init) {\n          hasInits = true;\n        }\n      }\n    }\n\n    var separator;\n\n    if (hasInits) {\n      separator = node.kind === \"const\" ? constDeclarationIndent : variableDeclarationIndent;\n    }\n\n    this.printList(node.declarations, node, {\n      separator: separator\n    });\n\n    if (t.isFor(parent)) {\n      if (parent.left === node || parent.init === node) return;\n    }\n\n    this.semicolon();\n  }\n\n  function VariableDeclarator(node) {\n    this.print(node.id, node);\n    if (node.definite) this.token(\"!\");\n    this.print(node.id.typeAnnotation, node);\n\n    if (node.init) {\n      this.space();\n      this.token(\"=\");\n      this.space();\n      this.print(node.init, node);\n    }\n  }\n});","map":[[2,0,1,0],[4,0,3,0,"Object"],[4,2,3,0,"Object"],[4,8,3,6],[4,9,3,7,"defineProperty"],[4,23,3,0],[4,24,3,22,"exports"],[4,31,3,0],[4,33,3,31],[4,45,3,0],[4,47,3,45],[5,0,4,2,"value"],[5,4,4,2,"value"],[5,9,4,7],[5,11,4,9],[6,0,3,45],[6,3,3,0],[7,0,6,0,"exports"],[7,2,6,0,"exports"],[7,9,6,7],[7,10,6,8,"WithStatement"],[7,23,6,0],[7,26,6,24,"WithStatement"],[7,39,6,0],[8,0,7,0,"exports"],[8,2,7,0,"exports"],[8,9,7,7],[8,10,7,8,"IfStatement"],[8,21,7,0],[8,24,7,22,"IfStatement"],[8,35,7,0],[9,0,8,0,"exports"],[9,2,8,0,"exports"],[9,9,8,7],[9,10,8,8,"ForStatement"],[9,22,8,0],[9,25,8,23,"ForStatement"],[9,37,8,0],[10,0,9,0,"exports"],[10,2,9,0,"exports"],[10,9,9,7],[10,10,9,8,"WhileStatement"],[10,24,9,0],[10,27,9,25,"WhileStatement"],[10,41,9,0],[11,0,10,0,"exports"],[11,2,10,0,"exports"],[11,9,10,7],[11,10,10,8,"DoWhileStatement"],[11,26,10,0],[11,29,10,27,"DoWhileStatement"],[11,45,10,0],[12,0,11,0,"exports"],[12,2,11,0,"exports"],[12,9,11,7],[12,10,11,8,"LabeledStatement"],[12,26,11,0],[12,29,11,27,"LabeledStatement"],[12,45,11,0],[13,0,12,0,"exports"],[13,2,12,0,"exports"],[13,9,12,7],[13,10,12,8,"TryStatement"],[13,22,12,0],[13,25,12,23,"TryStatement"],[13,37,12,0],[14,0,13,0,"exports"],[14,2,13,0,"exports"],[14,9,13,7],[14,10,13,8,"CatchClause"],[14,21,13,0],[14,24,13,22,"CatchClause"],[14,35,13,0],[15,0,14,0,"exports"],[15,2,14,0,"exports"],[15,9,14,7],[15,10,14,8,"SwitchStatement"],[15,25,14,0],[15,28,14,26,"SwitchStatement"],[15,43,14,0],[16,0,15,0,"exports"],[16,2,15,0,"exports"],[16,9,15,7],[16,10,15,8,"SwitchCase"],[16,20,15,0],[16,23,15,21,"SwitchCase"],[16,33,15,0],[17,0,16,0,"exports"],[17,2,16,0,"exports"],[17,9,16,7],[17,10,16,8,"DebuggerStatement"],[17,27,16,0],[17,30,16,28,"DebuggerStatement"],[17,47,16,0],[18,0,17,0,"exports"],[18,2,17,0,"exports"],[18,9,17,7],[18,10,17,8,"VariableDeclaration"],[18,29,17,0],[18,32,17,30,"VariableDeclaration"],[18,51,17,0],[19,0,18,0,"exports"],[19,2,18,0,"exports"],[19,9,18,7],[19,10,18,8,"VariableDeclarator"],[19,28,18,0],[19,31,18,29,"VariableDeclarator"],[19,49,18,0],[20,0,19,0,"exports"],[20,2,19,0,"exports"],[20,9,19,7],[20,10,19,8,"ThrowStatement"],[20,24,19,0],[20,27,19,25,"exports"],[20,34,19,32],[20,35,19,33,"BreakStatement"],[20,49,19,25],[20,52,19,50,"exports"],[20,59,19,57],[20,60,19,58,"ReturnStatement"],[20,75,19,50],[20,78,19,76,"exports"],[20,85,19,83],[20,86,19,84,"ContinueStatement"],[20,103,19,76],[20,106,19,104,"exports"],[20,113,19,111],[20,114,19,112,"ForOfStatement"],[20,128,19,104],[20,131,19,129,"exports"],[20,138,19,136],[20,139,19,137,"ForInStatement"],[20,153,19,129],[20,156,19,154],[20,161,19,159],[20,162,19,0],[22,0,21,0],[22,6,21,4,"t"],[22,7,21,5],[22,10,21,8,"_interopRequireWildcard"],[22,33,21,31],[22,34,21,32,"require"],[22,45,21,39],[22,80,21,31],[22,81,21,0],[24,0,23,0],[24,11,23,9,"_getRequireWildcardCache"],[24,35,23,0],[24,38,23,36],[25,0,23,38],[25,8,23,42],[25,15,23,49,"WeakMap"],[25,22,23,42],[25,27,23,61],[25,37,23,38],[25,39,23,73],[25,46,23,80],[25,50,23,73],[26,0,23,86],[26,8,23,90,"cache"],[26,13,23,95],[26,16,23,98],[26,20,23,102,"WeakMap"],[26,27,23,98],[26,29,23,86],[28,0,23,113,"_getRequireWildcardCache"],[28,4,23,113,"_getRequireWildcardCache"],[28,28,23,137],[28,31,23,140],[28,67,23,152],[29,0,23,154],[29,13,23,161,"cache"],[29,18,23,154],[30,0,23,169],[30,5,23,113],[32,0,23,171],[32,11,23,178,"cache"],[32,16,23,171],[33,0,23,186],[35,0,25,0],[35,11,25,9,"_interopRequireWildcard"],[35,34,25,0],[35,35,25,33,"obj"],[35,38,25,0],[35,40,25,38],[36,0,25,40],[36,8,25,44,"obj"],[36,11,25,47],[36,15,25,51,"obj"],[36,18,25,54],[36,19,25,55,"__esModule"],[36,29,25,40],[36,31,25,67],[37,0,25,69],[37,13,25,76,"obj"],[37,16,25,69],[38,0,25,82],[40,0,25,83],[40,8,25,87,"obj"],[40,11,25,90],[40,16,25,95],[40,20,25,87],[40,24,25,103],[40,31,25,110,"obj"],[40,34,25,103],[40,39,25,118],[40,47,25,103],[40,51,25,130],[40,58,25,137,"obj"],[40,61,25,130],[40,66,25,145],[40,76,25,83],[40,78,25,157],[41,0,25,159],[41,13,25,166],[42,0,25,168,"default"],[42,8,25,168,"default"],[42,15,25,175],[42,17,25,177,"obj"],[43,0,25,166],[43,7,25,159],[44,0,25,185],[46,0,25,186],[46,8,25,190,"cache"],[46,13,25,195],[46,16,25,198,"_getRequireWildcardCache"],[46,40,25,222],[46,42,25,186],[48,0,25,226],[48,8,25,230,"cache"],[48,13,25,235],[48,17,25,239,"cache"],[48,22,25,244],[48,23,25,245,"has"],[48,26,25,239],[48,27,25,249,"obj"],[48,30,25,239],[48,31,25,226],[48,33,25,255],[49,0,25,257],[49,13,25,264,"cache"],[49,18,25,269],[49,19,25,270,"get"],[49,22,25,264],[49,23,25,274,"obj"],[49,26,25,264],[49,27,25,257],[50,0,25,281],[52,0,25,282],[52,8,25,286,"newObj"],[52,14,25,292],[52,17,25,295],[52,19,25,282],[53,0,25,299],[53,8,25,303,"hasPropertyDescriptor"],[53,29,25,324],[53,32,25,327,"Object"],[53,38,25,333],[53,39,25,334,"defineProperty"],[53,53,25,327],[53,57,25,352,"Object"],[53,63,25,358],[53,64,25,359,"getOwnPropertyDescriptor"],[53,88,25,299],[55,0,25,385],[55,9,25,390],[55,13,25,394,"key"],[55,16,25,385],[55,20,25,401,"obj"],[55,23,25,385],[55,25,25,406],[56,0,25,408],[56,10,25,412,"Object"],[56,16,25,418],[56,17,25,419,"prototype"],[56,26,25,412],[56,27,25,429,"hasOwnProperty"],[56,41,25,412],[56,42,25,444,"call"],[56,46,25,412],[56,47,25,449,"obj"],[56,50,25,412],[56,52,25,454,"key"],[56,55,25,412],[56,56,25,408],[56,58,25,460],[57,0,25,462],[57,12,25,466,"desc"],[57,16,25,470],[57,19,25,473,"hasPropertyDescriptor"],[57,40,25,494],[57,43,25,497,"Object"],[57,49,25,503],[57,50,25,504,"getOwnPropertyDescriptor"],[57,74,25,497],[57,75,25,529,"obj"],[57,78,25,497],[57,80,25,534,"key"],[57,83,25,497],[57,84,25,494],[57,87,25,541],[57,91,25,462],[59,0,25,547],[59,12,25,551,"desc"],[59,16,25,555],[59,21,25,560,"desc"],[59,25,25,564],[59,26,25,565,"get"],[59,29,25,560],[59,33,25,572,"desc"],[59,37,25,576],[59,38,25,577,"set"],[59,41,25,555],[59,42,25,547],[59,44,25,583],[60,0,25,585,"Object"],[60,10,25,585,"Object"],[60,16,25,591],[60,17,25,592,"defineProperty"],[60,31,25,585],[60,32,25,607,"newObj"],[60,38,25,585],[60,40,25,615,"key"],[60,43,25,585],[60,45,25,620,"desc"],[60,49,25,585],[61,0,25,628],[61,9,25,547],[61,15,25,634],[62,0,25,636,"newObj"],[62,10,25,636,"newObj"],[62,16,25,642],[62,17,25,643,"key"],[62,20,25,642],[62,21,25,636],[62,24,25,650,"obj"],[62,27,25,653],[62,28,25,654,"key"],[62,31,25,653],[62,32,25,636],[63,0,25,661],[64,0,25,663],[65,0,25,665],[67,0,25,666,"newObj"],[67,4,25,666,"newObj"],[67,10,25,672],[67,11,25,673,"default"],[67,18,25,666],[67,21,25,683,"obj"],[67,24,25,666],[69,0,25,688],[69,8,25,692,"cache"],[69,13,25,688],[69,15,25,699],[70,0,25,701,"cache"],[70,6,25,701,"cache"],[70,11,25,706],[70,12,25,707,"set"],[70,15,25,701],[70,16,25,711,"obj"],[70,19,25,701],[70,21,25,716,"newObj"],[70,27,25,701],[71,0,25,726],[73,0,25,727],[73,11,25,734,"newObj"],[73,17,25,727],[74,0,25,743],[76,0,27,0],[76,11,27,9,"WithStatement"],[76,24,27,0],[76,25,27,23,"node"],[76,29,27,0],[76,31,27,29],[77,0,28,2],[77,9,28,7,"word"],[77,13,28,2],[77,14,28,12],[77,20,28,2],[78,0,29,2],[78,9,29,7,"space"],[78,14,29,2],[79,0,30,2],[79,9,30,7,"token"],[79,14,30,2],[79,15,30,13],[79,18,30,2],[80,0,31,2],[80,9,31,7,"print"],[80,14,31,2],[80,15,31,13,"node"],[80,19,31,17],[80,20,31,18,"object"],[80,26,31,2],[80,28,31,26,"node"],[80,32,31,2],[81,0,32,2],[81,9,32,7,"token"],[81,14,32,2],[81,15,32,13],[81,18,32,2],[82,0,33,2],[82,9,33,7,"printBlock"],[82,19,33,2],[82,20,33,18,"node"],[82,24,33,2],[83,0,34,1],[85,0,36,0],[85,11,36,9,"IfStatement"],[85,22,36,0],[85,23,36,21,"node"],[85,27,36,0],[85,29,36,27],[86,0,37,2],[86,9,37,7,"word"],[86,13,37,2],[86,14,37,12],[86,18,37,2],[87,0,38,2],[87,9,38,7,"space"],[87,14,38,2],[88,0,39,2],[88,9,39,7,"token"],[88,14,39,2],[88,15,39,13],[88,18,39,2],[89,0,40,2],[89,9,40,7,"print"],[89,14,40,2],[89,15,40,13,"node"],[89,19,40,17],[89,20,40,18,"test"],[89,24,40,2],[89,26,40,24,"node"],[89,30,40,2],[90,0,41,2],[90,9,41,7,"token"],[90,14,41,2],[90,15,41,13],[90,18,41,2],[91,0,42,2],[91,9,42,7,"space"],[91,14,42,2],[92,0,43,2],[92,8,43,8,"needsBlock"],[92,18,43,18],[92,21,43,21,"node"],[92,25,43,25],[92,26,43,26,"alternate"],[92,35,43,21],[92,39,43,39,"t"],[92,40,43,40],[92,41,43,41,"isIfStatement"],[92,54,43,39],[92,55,43,55,"getLastStatement"],[92,71,43,71],[92,72,43,72,"node"],[92,76,43,76],[92,77,43,77,"consequent"],[92,87,43,71],[92,88,43,39],[92,89,43,2],[94,0,45,2],[94,8,45,6,"needsBlock"],[94,18,45,2],[94,20,45,18],[95,0,46,4],[95,11,46,9,"token"],[95,16,46,4],[95,17,46,15],[95,20,46,4],[96,0,47,4],[96,11,47,9,"newline"],[96,18,47,4],[97,0,48,4],[97,11,48,9,"indent"],[97,17,48,4],[98,0,49,3],[100,0,51,2],[100,9,51,7,"printAndIndentOnComments"],[100,33,51,2],[100,34,51,32,"node"],[100,38,51,36],[100,39,51,37,"consequent"],[100,49,51,2],[100,51,51,49,"node"],[100,55,51,2],[102,0,53,2],[102,8,53,6,"needsBlock"],[102,18,53,2],[102,20,53,18],[103,0,54,4],[103,11,54,9,"dedent"],[103,17,54,4],[104,0,55,4],[104,11,55,9,"newline"],[104,18,55,4],[105,0,56,4],[105,11,56,9,"token"],[105,16,56,4],[105,17,56,15],[105,20,56,4],[106,0,57,3],[108,0,59,2],[108,8,59,6,"node"],[108,12,59,10],[108,13,59,11,"alternate"],[108,22,59,2],[108,24,59,22],[109,0,60,4],[109,10,60,8],[109,15,60,13,"endsWith"],[109,23,60,8],[109,24,60,22],[109,27,60,8],[109,28,60,4],[109,30,60,28],[109,35,60,33,"space"],[109,40,60,28],[110,0,61,4],[110,11,61,9,"word"],[110,15,61,4],[110,16,61,14],[110,22,61,4],[111,0,62,4],[111,11,62,9,"space"],[111,16,62,4],[112,0,63,4],[112,11,63,9,"printAndIndentOnComments"],[112,35,63,4],[112,36,63,34,"node"],[112,40,63,38],[112,41,63,39,"alternate"],[112,50,63,4],[112,52,63,50,"node"],[112,56,63,4],[113,0,64,3],[114,0,65,1],[116,0,67,0],[116,11,67,9,"getLastStatement"],[116,27,67,0],[116,28,67,26,"statement"],[116,37,67,0],[116,39,67,37],[117,0,68,2],[117,8,68,6],[117,9,68,7,"t"],[117,10,68,8],[117,11,68,9,"isStatement"],[117,22,68,7],[117,23,68,21,"statement"],[117,32,68,30],[117,33,68,31,"body"],[117,37,68,7],[117,38,68,2],[117,40,68,38],[117,47,68,45,"statement"],[117,56,68,38],[118,0,69,2],[118,11,69,9,"getLastStatement"],[118,27,69,25],[118,28,69,26,"statement"],[118,37,69,35],[118,38,69,36,"body"],[118,42,69,25],[118,43,69,2],[119,0,70,1],[121,0,72,0],[121,11,72,9,"ForStatement"],[121,23,72,0],[121,24,72,22,"node"],[121,28,72,0],[121,30,72,28],[122,0,73,2],[122,9,73,7,"word"],[122,13,73,2],[122,14,73,12],[122,19,73,2],[123,0,74,2],[123,9,74,7,"space"],[123,14,74,2],[124,0,75,2],[124,9,75,7,"token"],[124,14,75,2],[124,15,75,13],[124,18,75,2],[125,0,76,2],[125,9,76,7,"inForStatementInitCounter"],[125,34,76,2],[126,0,77,2],[126,9,77,7,"print"],[126,14,77,2],[126,15,77,13,"node"],[126,19,77,17],[126,20,77,18,"init"],[126,24,77,2],[126,26,77,24,"node"],[126,30,77,2],[127,0,78,2],[127,9,78,7,"inForStatementInitCounter"],[127,34,78,2],[128,0,79,2],[128,9,79,7,"token"],[128,14,79,2],[128,15,79,13],[128,18,79,2],[130,0,81,2],[130,8,81,6,"node"],[130,12,81,10],[130,13,81,11,"test"],[130,17,81,2],[130,19,81,17],[131,0,82,4],[131,11,82,9,"space"],[131,16,82,4],[132,0,83,4],[132,11,83,9,"print"],[132,16,83,4],[132,17,83,15,"node"],[132,21,83,19],[132,22,83,20,"test"],[132,26,83,4],[132,28,83,26,"node"],[132,32,83,4],[133,0,84,3],[135,0,86,2],[135,9,86,7,"token"],[135,14,86,2],[135,15,86,13],[135,18,86,2],[137,0,88,2],[137,8,88,6,"node"],[137,12,88,10],[137,13,88,11,"update"],[137,19,88,2],[137,21,88,19],[138,0,89,4],[138,11,89,9,"space"],[138,16,89,4],[139,0,90,4],[139,11,90,9,"print"],[139,16,90,4],[139,17,90,15,"node"],[139,21,90,19],[139,22,90,20,"update"],[139,28,90,4],[139,30,90,28,"node"],[139,34,90,4],[140,0,91,3],[142,0,93,2],[142,9,93,7,"token"],[142,14,93,2],[142,15,93,13],[142,18,93,2],[143,0,94,2],[143,9,94,7,"printBlock"],[143,19,94,2],[143,20,94,18,"node"],[143,24,94,2],[144,0,95,1],[146,0,97,0],[146,11,97,9,"WhileStatement"],[146,25,97,0],[146,26,97,24,"node"],[146,30,97,0],[146,32,97,30],[147,0,98,2],[147,9,98,7,"word"],[147,13,98,2],[147,14,98,12],[147,21,98,2],[148,0,99,2],[148,9,99,7,"space"],[148,14,99,2],[149,0,100,2],[149,9,100,7,"token"],[149,14,100,2],[149,15,100,13],[149,18,100,2],[150,0,101,2],[150,9,101,7,"print"],[150,14,101,2],[150,15,101,13,"node"],[150,19,101,17],[150,20,101,18,"test"],[150,24,101,2],[150,26,101,24,"node"],[150,30,101,2],[151,0,102,2],[151,9,102,7,"token"],[151,14,102,2],[151,15,102,13],[151,18,102,2],[152,0,103,2],[152,9,103,7,"printBlock"],[152,19,103,2],[152,20,103,18,"node"],[152,24,103,2],[153,0,104,1],[155,0,106,0],[155,6,106,6,"buildForXStatement"],[155,24,106,24],[155,27,106,27],[155,36,106,6,"buildForXStatement"],[155,54,106,27],[155,55,106,37,"op"],[155,57,106,27],[155,59,106,41],[156,0,107,2],[156,11,107,9],[156,21,107,19,"node"],[156,25,107,9],[156,27,107,25],[157,0,108,4],[157,11,108,9,"word"],[157,15,108,4],[157,16,108,14],[157,21,108,4],[158,0,109,4],[158,11,109,9,"space"],[158,16,109,4],[160,0,111,4],[160,10,111,8,"op"],[160,12,111,10],[160,17,111,15],[160,21,111,8],[160,25,111,23,"node"],[160,29,111,27],[160,30,111,28,"await"],[160,35,111,4],[160,37,111,35],[161,0,112,6],[161,13,112,11,"word"],[161,17,112,6],[161,18,112,16],[161,25,112,6],[162,0,113,6],[162,13,113,11,"space"],[162,18,113,6],[163,0,114,5],[165,0,116,4],[165,11,116,9,"token"],[165,16,116,4],[165,17,116,15],[165,20,116,4],[166,0,117,4],[166,11,117,9,"print"],[166,16,117,4],[166,17,117,15,"node"],[166,21,117,19],[166,22,117,20,"left"],[166,26,117,4],[166,28,117,26,"node"],[166,32,117,4],[167,0,118,4],[167,11,118,9,"space"],[167,16,118,4],[168,0,119,4],[168,11,119,9,"word"],[168,15,119,4],[168,16,119,14,"op"],[168,18,119,4],[169,0,120,4],[169,11,120,9,"space"],[169,16,120,4],[170,0,121,4],[170,11,121,9,"print"],[170,16,121,4],[170,17,121,15,"node"],[170,21,121,19],[170,22,121,20,"right"],[170,27,121,4],[170,29,121,27,"node"],[170,33,121,4],[171,0,122,4],[171,11,122,9,"token"],[171,16,122,4],[171,17,122,15],[171,20,122,4],[172,0,123,4],[172,11,123,9,"printBlock"],[172,21,123,4],[172,22,123,20,"node"],[172,26,123,4],[173,0,124,3],[173,5,107,2],[174,0,125,1],[174,3,106,0],[176,0,127,0],[176,6,127,6,"ForInStatement"],[176,20,127,20],[176,23,127,23,"buildForXStatement"],[176,41,127,41],[176,42,127,42],[176,46,127,41],[176,47,127,0],[177,0,128,0,"exports"],[177,2,128,0,"exports"],[177,9,128,7],[177,10,128,8,"ForInStatement"],[177,24,128,0],[177,27,128,25,"ForInStatement"],[177,41,128,0],[178,0,129,0],[178,6,129,6,"ForOfStatement"],[178,20,129,20],[178,23,129,23,"buildForXStatement"],[178,41,129,41],[178,42,129,42],[178,46,129,41],[178,47,129,0],[179,0,130,0,"exports"],[179,2,130,0,"exports"],[179,9,130,7],[179,10,130,8,"ForOfStatement"],[179,24,130,0],[179,27,130,25,"ForOfStatement"],[179,41,130,0],[181,0,132,0],[181,11,132,9,"DoWhileStatement"],[181,27,132,0],[181,28,132,26,"node"],[181,32,132,0],[181,34,132,32],[182,0,133,2],[182,9,133,7,"word"],[182,13,133,2],[182,14,133,12],[182,18,133,2],[183,0,134,2],[183,9,134,7,"space"],[183,14,134,2],[184,0,135,2],[184,9,135,7,"print"],[184,14,135,2],[184,15,135,13,"node"],[184,19,135,17],[184,20,135,18,"body"],[184,24,135,2],[184,26,135,24,"node"],[184,30,135,2],[185,0,136,2],[185,9,136,7,"space"],[185,14,136,2],[186,0,137,2],[186,9,137,7,"word"],[186,13,137,2],[186,14,137,12],[186,21,137,2],[187,0,138,2],[187,9,138,7,"space"],[187,14,138,2],[188,0,139,2],[188,9,139,7,"token"],[188,14,139,2],[188,15,139,13],[188,18,139,2],[189,0,140,2],[189,9,140,7,"print"],[189,14,140,2],[189,15,140,13,"node"],[189,19,140,17],[189,20,140,18,"test"],[189,24,140,2],[189,26,140,24,"node"],[189,30,140,2],[190,0,141,2],[190,9,141,7,"token"],[190,14,141,2],[190,15,141,13],[190,18,141,2],[191,0,142,2],[191,9,142,7,"semicolon"],[191,18,142,2],[192,0,143,1],[194,0,145,0],[194,11,145,9,"buildLabelStatement"],[194,30,145,0],[194,31,145,29,"prefix"],[194,37,145,0],[194,39,145,52],[195,0,145,52],[195,8,145,37,"key"],[195,11,145,52],[195,82,145,43],[195,89,145,52],[196,0,146,2],[196,11,146,9],[196,21,146,19,"node"],[196,25,146,9],[196,27,146,25],[197,0,147,4],[197,11,147,9,"word"],[197,15,147,4],[197,16,147,14,"prefix"],[197,22,147,4],[198,0,148,4],[198,10,148,10,"label"],[198,15,148,15],[198,18,148,18,"node"],[198,22,148,22],[198,23,148,23,"key"],[198,26,148,22],[198,27,148,4],[200,0,150,4],[200,10,150,8,"label"],[200,15,150,4],[200,17,150,15],[201,0,151,6],[201,13,151,11,"space"],[201,18,151,6],[202,0,152,6],[202,12,152,12,"isLabel"],[202,19,152,19],[202,22,152,22,"key"],[202,25,152,25],[202,29,152,29],[202,36,152,6],[203,0,153,6],[203,12,153,12,"terminatorState"],[203,27,153,27],[203,30,153,30],[203,35,153,35,"startTerminatorless"],[203,54,153,30],[203,55,153,55,"isLabel"],[203,62,153,30],[203,63,153,6],[204,0,154,6],[204,13,154,11,"print"],[204,18,154,6],[204,19,154,17,"label"],[204,24,154,6],[204,26,154,24,"node"],[204,30,154,6],[205,0,155,6],[205,13,155,11,"endTerminatorless"],[205,30,155,6],[205,31,155,29,"terminatorState"],[205,46,155,6],[206,0,156,5],[208,0,158,4],[208,11,158,9,"semicolon"],[208,20,158,4],[209,0,159,3],[209,5,146,2],[210,0,160,1],[212,0,162,0],[212,6,162,6,"ContinueStatement"],[212,23,162,23],[212,26,162,26,"buildLabelStatement"],[212,45,162,45],[212,46,162,46],[212,56,162,45],[212,57,162,0],[213,0,163,0,"exports"],[213,2,163,0,"exports"],[213,9,163,7],[213,10,163,8,"ContinueStatement"],[213,27,163,0],[213,30,163,28,"ContinueStatement"],[213,47,163,0],[214,0,164,0],[214,6,164,6,"ReturnStatement"],[214,21,164,21],[214,24,164,24,"buildLabelStatement"],[214,43,164,43],[214,44,164,44],[214,52,164,43],[214,54,164,54],[214,64,164,43],[214,65,164,0],[215,0,165,0,"exports"],[215,2,165,0,"exports"],[215,9,165,7],[215,10,165,8,"ReturnStatement"],[215,25,165,0],[215,28,165,26,"ReturnStatement"],[215,43,165,0],[216,0,166,0],[216,6,166,6,"BreakStatement"],[216,20,166,20],[216,23,166,23,"buildLabelStatement"],[216,42,166,42],[216,43,166,43],[216,50,166,42],[216,51,166,0],[217,0,167,0,"exports"],[217,2,167,0,"exports"],[217,9,167,7],[217,10,167,8,"BreakStatement"],[217,24,167,0],[217,27,167,25,"BreakStatement"],[217,41,167,0],[218,0,168,0],[218,6,168,6,"ThrowStatement"],[218,20,168,20],[218,23,168,23,"buildLabelStatement"],[218,42,168,42],[218,43,168,43],[218,50,168,42],[218,52,168,52],[218,62,168,42],[218,63,168,0],[219,0,169,0,"exports"],[219,2,169,0,"exports"],[219,9,169,7],[219,10,169,8,"ThrowStatement"],[219,24,169,0],[219,27,169,25,"ThrowStatement"],[219,41,169,0],[221,0,171,0],[221,11,171,9,"LabeledStatement"],[221,27,171,0],[221,28,171,26,"node"],[221,32,171,0],[221,34,171,32],[222,0,172,2],[222,9,172,7,"print"],[222,14,172,2],[222,15,172,13,"node"],[222,19,172,17],[222,20,172,18,"label"],[222,25,172,2],[222,27,172,25,"node"],[222,31,172,2],[223,0,173,2],[223,9,173,7,"token"],[223,14,173,2],[223,15,173,13],[223,18,173,2],[224,0,174,2],[224,9,174,7,"space"],[224,14,174,2],[225,0,175,2],[225,9,175,7,"print"],[225,14,175,2],[225,15,175,13,"node"],[225,19,175,17],[225,20,175,18,"body"],[225,24,175,2],[225,26,175,24,"node"],[225,30,175,2],[226,0,176,1],[228,0,178,0],[228,11,178,9,"TryStatement"],[228,23,178,0],[228,24,178,22,"node"],[228,28,178,0],[228,30,178,28],[229,0,179,2],[229,9,179,7,"word"],[229,13,179,2],[229,14,179,12],[229,19,179,2],[230,0,180,2],[230,9,180,7,"space"],[230,14,180,2],[231,0,181,2],[231,9,181,7,"print"],[231,14,181,2],[231,15,181,13,"node"],[231,19,181,17],[231,20,181,18,"block"],[231,25,181,2],[231,27,181,25,"node"],[231,31,181,2],[232,0,182,2],[232,9,182,7,"space"],[232,14,182,2],[234,0,184,2],[234,8,184,6,"node"],[234,12,184,10],[234,13,184,11,"handlers"],[234,21,184,2],[234,23,184,21],[235,0,185,4],[235,11,185,9,"print"],[235,16,185,4],[235,17,185,15,"node"],[235,21,185,19],[235,22,185,20,"handlers"],[235,30,185,15],[235,31,185,29],[235,32,185,15],[235,33,185,4],[235,35,185,33,"node"],[235,39,185,4],[236,0,186,3],[236,5,184,2],[236,11,186,9],[237,0,187,4],[237,11,187,9,"print"],[237,16,187,4],[237,17,187,15,"node"],[237,21,187,19],[237,22,187,20,"handler"],[237,29,187,4],[237,31,187,29,"node"],[237,35,187,4],[238,0,188,3],[240,0,190,2],[240,8,190,6,"node"],[240,12,190,10],[240,13,190,11,"finalizer"],[240,22,190,2],[240,24,190,22],[241,0,191,4],[241,11,191,9,"space"],[241,16,191,4],[242,0,192,4],[242,11,192,9,"word"],[242,15,192,4],[242,16,192,14],[242,25,192,4],[243,0,193,4],[243,11,193,9,"space"],[243,16,193,4],[244,0,194,4],[244,11,194,9,"print"],[244,16,194,4],[244,17,194,15,"node"],[244,21,194,19],[244,22,194,20,"finalizer"],[244,31,194,4],[244,33,194,31,"node"],[244,37,194,4],[245,0,195,3],[246,0,196,1],[248,0,198,0],[248,11,198,9,"CatchClause"],[248,22,198,0],[248,23,198,21,"node"],[248,27,198,0],[248,29,198,27],[249,0,199,2],[249,9,199,7,"word"],[249,13,199,2],[249,14,199,12],[249,21,199,2],[250,0,200,2],[250,9,200,7,"space"],[250,14,200,2],[252,0,202,2],[252,8,202,6,"node"],[252,12,202,10],[252,13,202,11,"param"],[252,18,202,2],[252,20,202,18],[253,0,203,4],[253,11,203,9,"token"],[253,16,203,4],[253,17,203,15],[253,20,203,4],[254,0,204,4],[254,11,204,9,"print"],[254,16,204,4],[254,17,204,15,"node"],[254,21,204,19],[254,22,204,20,"param"],[254,27,204,4],[254,29,204,27,"node"],[254,33,204,4],[255,0,205,4],[255,11,205,9,"token"],[255,16,205,4],[255,17,205,15],[255,20,205,4],[256,0,206,4],[256,11,206,9,"space"],[256,16,206,4],[257,0,207,3],[259,0,209,2],[259,9,209,7,"print"],[259,14,209,2],[259,15,209,13,"node"],[259,19,209,17],[259,20,209,18,"body"],[259,24,209,2],[259,26,209,24,"node"],[259,30,209,2],[260,0,210,1],[262,0,212,0],[262,11,212,9,"SwitchStatement"],[262,26,212,0],[262,27,212,25,"node"],[262,31,212,0],[262,33,212,31],[263,0,213,2],[263,9,213,7,"word"],[263,13,213,2],[263,14,213,12],[263,22,213,2],[264,0,214,2],[264,9,214,7,"space"],[264,14,214,2],[265,0,215,2],[265,9,215,7,"token"],[265,14,215,2],[265,15,215,13],[265,18,215,2],[266,0,216,2],[266,9,216,7,"print"],[266,14,216,2],[266,15,216,13,"node"],[266,19,216,17],[266,20,216,18,"discriminant"],[266,32,216,2],[266,34,216,32,"node"],[266,38,216,2],[267,0,217,2],[267,9,217,7,"token"],[267,14,217,2],[267,15,217,13],[267,18,217,2],[268,0,218,2],[268,9,218,7,"space"],[268,14,218,2],[269,0,219,2],[269,9,219,7,"token"],[269,14,219,2],[269,15,219,13],[269,18,219,2],[270,0,220,2],[270,9,220,7,"printSequence"],[270,22,220,2],[270,23,220,21,"node"],[270,27,220,25],[270,28,220,26,"cases"],[270,33,220,2],[270,35,220,33,"node"],[270,39,220,2],[270,41,220,39],[271,0,221,4,"indent"],[271,6,221,4,"indent"],[271,12,221,10],[271,14,221,12],[271,18,220,39],[272,0,223,4,"addNewlines"],[272,6,223,4,"addNewlines"],[272,17,220,39],[272,40,223,16,"leading"],[272,47,220,39],[272,49,223,25,"cas"],[272,52,220,39],[272,54,223,30],[273,0,224,6],[273,12,224,10],[273,13,224,11,"leading"],[273,20,224,10],[273,24,224,22,"node"],[273,28,224,26],[273,29,224,27,"cases"],[273,34,224,22],[273,35,224,33,"node"],[273,39,224,37],[273,40,224,38,"cases"],[273,45,224,33],[273,46,224,44,"length"],[273,52,224,33],[273,55,224,53],[273,56,224,22],[273,62,224,60,"cas"],[273,65,224,6],[273,67,224,65],[273,74,224,72],[273,75,224,73],[273,76,224,65],[274,0,225,5],[275,0,220,39],[275,5,220,2],[276,0,228,2],[276,9,228,7,"token"],[276,14,228,2],[276,15,228,13],[276,18,228,2],[277,0,229,1],[279,0,231,0],[279,11,231,9,"SwitchCase"],[279,21,231,0],[279,22,231,20,"node"],[279,26,231,0],[279,28,231,26],[280,0,232,2],[280,8,232,6,"node"],[280,12,232,10],[280,13,232,11,"test"],[280,17,232,2],[280,19,232,17],[281,0,233,4],[281,11,233,9,"word"],[281,15,233,4],[281,16,233,14],[281,22,233,4],[282,0,234,4],[282,11,234,9,"space"],[282,16,234,4],[283,0,235,4],[283,11,235,9,"print"],[283,16,235,4],[283,17,235,15,"node"],[283,21,235,19],[283,22,235,20,"test"],[283,26,235,4],[283,28,235,26,"node"],[283,32,235,4],[284,0,236,4],[284,11,236,9,"token"],[284,16,236,4],[284,17,236,15],[284,20,236,4],[285,0,237,3],[285,5,232,2],[285,11,237,9],[286,0,238,4],[286,11,238,9,"word"],[286,15,238,4],[286,16,238,14],[286,25,238,4],[287,0,239,4],[287,11,239,9,"token"],[287,16,239,4],[287,17,239,15],[287,20,239,4],[288,0,240,3],[290,0,242,2],[290,8,242,6,"node"],[290,12,242,10],[290,13,242,11,"consequent"],[290,23,242,6],[290,24,242,22,"length"],[290,30,242,2],[290,32,242,30],[291,0,243,4],[291,11,243,9,"newline"],[291,18,243,4],[292,0,244,4],[292,11,244,9,"printSequence"],[292,24,244,4],[292,25,244,23,"node"],[292,29,244,27],[292,30,244,28,"consequent"],[292,40,244,4],[292,42,244,40,"node"],[292,46,244,4],[292,48,244,46],[293,0,245,6,"indent"],[293,8,245,6,"indent"],[293,14,245,12],[293,16,245,14],[294,0,244,46],[294,7,244,4],[295,0,247,3],[296,0,248,1],[298,0,250,0],[298,11,250,9,"DebuggerStatement"],[298,28,250,0],[298,31,250,29],[299,0,251,2],[299,9,251,7,"word"],[299,13,251,2],[299,14,251,12],[299,24,251,2],[300,0,252,2],[300,9,252,7,"semicolon"],[300,18,252,2],[301,0,253,1],[303,0,255,0],[303,11,255,9,"variableDeclarationIndent"],[303,36,255,0],[303,39,255,37],[304,0,256,2],[304,9,256,7,"token"],[304,14,256,2],[304,15,256,13],[304,18,256,2],[305,0,257,2],[305,9,257,7,"newline"],[305,16,257,2],[306,0,258,2],[306,8,258,6],[306,13,258,11,"endsWith"],[306,21,258,6],[306,22,258,20],[306,26,258,6],[306,27,258,2],[306,29,258,27],[306,34,258,32],[306,38,258,36,"i"],[306,39,258,37],[306,42,258,40],[306,43,258,27],[306,45,258,43,"i"],[306,46,258,44],[306,49,258,47],[306,50,258,27],[306,52,258,50,"i"],[306,53,258,51],[306,55,258,27],[307,0,258,55],[307,11,258,60,"space"],[307,16,258,55],[307,17,258,66],[307,21,258,55],[308,0,258,27],[309,0,259,1],[311,0,261,0],[311,11,261,9,"constDeclarationIndent"],[311,33,261,0],[311,36,261,34],[312,0,262,2],[312,9,262,7,"token"],[312,14,262,2],[312,15,262,13],[312,18,262,2],[313,0,263,2],[313,9,263,7,"newline"],[313,16,263,2],[314,0,264,2],[314,8,264,6],[314,13,264,11,"endsWith"],[314,21,264,6],[314,22,264,20],[314,26,264,6],[314,27,264,2],[314,29,264,27],[314,34,264,32],[314,38,264,36,"i"],[314,39,264,37],[314,42,264,40],[314,43,264,27],[314,45,264,43,"i"],[314,46,264,44],[314,49,264,47],[314,50,264,27],[314,52,264,50,"i"],[314,53,264,51],[314,55,264,27],[315,0,264,55],[315,11,264,60,"space"],[315,16,264,55],[315,17,264,66],[315,21,264,55],[316,0,264,27],[317,0,265,1],[319,0,267,0],[319,11,267,9,"VariableDeclaration"],[319,30,267,0],[319,31,267,29,"node"],[319,35,267,0],[319,37,267,35,"parent"],[319,43,267,0],[319,45,267,43],[320,0,268,2],[320,8,268,6,"node"],[320,12,268,10],[320,13,268,11,"declare"],[320,20,268,2],[320,22,268,20],[321,0,269,4],[321,11,269,9,"word"],[321,15,269,4],[321,16,269,14],[321,25,269,4],[322,0,270,4],[322,11,270,9,"space"],[322,16,270,4],[323,0,271,3],[325,0,273,2],[325,9,273,7,"word"],[325,13,273,2],[325,14,273,12,"node"],[325,18,273,16],[325,19,273,17,"kind"],[325,23,273,2],[326,0,274,2],[326,9,274,7,"space"],[326,14,274,2],[327,0,275,2],[327,8,275,6,"hasInits"],[327,16,275,14],[327,19,275,17],[327,24,275,2],[329,0,277,2],[329,8,277,6],[329,9,277,7,"t"],[329,10,277,8],[329,11,277,9,"isFor"],[329,16,277,7],[329,17,277,15,"parent"],[329,23,277,7],[329,24,277,2],[329,26,277,24],[330,0,278,4],[330,27,278,25,"node"],[330,31,278,29],[330,32,278,30,"declarations"],[330,44,278,4],[330,204,278,44],[331,0,278,44],[333,0,278,44],[334,0,278,44],[335,0,278,44],[336,0,278,44],[337,0,278,44],[338,0,278,44],[339,0,278,44],[340,0,278,44],[342,0,278,44],[342,12,278,15,"declar"],[342,19,278,44],[344,0,279,6],[344,12,279,10,"declar"],[344,19,279,16],[344,20,279,17,"init"],[344,24,279,6],[344,26,279,23],[345,0,280,8,"hasInits"],[345,10,280,8,"hasInits"],[345,18,280,16],[345,21,280,19],[345,25,280,8],[346,0,281,7],[347,0,282,5],[348,0,283,3],[350,0,285,2],[350,8,285,6,"separator"],[350,17,285,2],[352,0,287,2],[352,8,287,6,"hasInits"],[352,16,287,2],[352,18,287,16],[353,0,288,4,"separator"],[353,6,288,4,"separator"],[353,15,288,13],[353,18,288,16,"node"],[353,22,288,20],[353,23,288,21,"kind"],[353,27,288,16],[353,32,288,30],[353,39,288,16],[353,42,288,40,"constDeclarationIndent"],[353,64,288,16],[353,67,288,65,"variableDeclarationIndent"],[353,92,288,4],[354,0,289,3],[356,0,291,2],[356,9,291,7,"printList"],[356,18,291,2],[356,19,291,17,"node"],[356,23,291,21],[356,24,291,22,"declarations"],[356,36,291,2],[356,38,291,36,"node"],[356,42,291,2],[356,44,291,42],[357,0,292,4,"separator"],[357,6,292,4,"separator"],[357,15,292,13],[357,17,292,4,"separator"],[358,0,291,42],[358,5,291,2],[360,0,295,2],[360,8,295,6,"t"],[360,9,295,7],[360,10,295,8,"isFor"],[360,15,295,6],[360,16,295,14,"parent"],[360,22,295,6],[360,23,295,2],[360,25,295,23],[361,0,296,4],[361,10,296,8,"parent"],[361,16,296,14],[361,17,296,15,"left"],[361,21,296,8],[361,26,296,24,"node"],[361,30,296,8],[361,34,296,32,"parent"],[361,40,296,38],[361,41,296,39,"init"],[361,45,296,32],[361,50,296,48,"node"],[361,54,296,4],[361,56,296,54],[362,0,297,3],[364,0,299,2],[364,9,299,7,"semicolon"],[364,18,299,2],[365,0,300,1],[367,0,302,0],[367,11,302,9,"VariableDeclarator"],[367,29,302,0],[367,30,302,28,"node"],[367,34,302,0],[367,36,302,34],[368,0,303,2],[368,9,303,7,"print"],[368,14,303,2],[368,15,303,13,"node"],[368,19,303,17],[368,20,303,18,"id"],[368,22,303,2],[368,24,303,22,"node"],[368,28,303,2],[369,0,304,2],[369,8,304,6,"node"],[369,12,304,10],[369,13,304,11,"definite"],[369,21,304,2],[369,23,304,21],[369,28,304,26,"token"],[369,33,304,21],[369,34,304,32],[369,37,304,21],[370,0,305,2],[370,9,305,7,"print"],[370,14,305,2],[370,15,305,13,"node"],[370,19,305,17],[370,20,305,18,"id"],[370,22,305,13],[370,23,305,21,"typeAnnotation"],[370,37,305,2],[370,39,305,37,"node"],[370,43,305,2],[372,0,307,2],[372,8,307,6,"node"],[372,12,307,10],[372,13,307,11,"init"],[372,17,307,2],[372,19,307,17],[373,0,308,4],[373,11,308,9,"space"],[373,16,308,4],[374,0,309,4],[374,11,309,9,"token"],[374,16,309,4],[374,17,309,15],[374,20,309,4],[375,0,310,4],[375,11,310,9,"space"],[375,16,310,4],[376,0,311,4],[376,11,311,9,"print"],[376,16,311,4],[376,17,311,15,"node"],[376,21,311,19],[376,22,311,20,"init"],[376,26,311,4],[376,28,311,26,"node"],[376,32,311,4],[377,0,312,3],[378,0,313,1]]},"type":"js/module"}]}