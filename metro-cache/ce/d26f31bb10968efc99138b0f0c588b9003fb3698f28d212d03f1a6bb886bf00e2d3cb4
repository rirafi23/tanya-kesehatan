{"dependencies":[{"name":"@babel/runtime/helpers/toConsumableArray","data":{"isAsync":false}},{"name":"../cache","data":{"isAsync":false}},{"name":"./lib/hoister","data":{"isAsync":false}},{"name":"./index","data":{"isAsync":false}},{"name":"@babel/types","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _toConsumableArray = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/toConsumableArray\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.insertBefore = insertBefore;\n  exports._containerInsert = _containerInsert;\n  exports._containerInsertBefore = _containerInsertBefore;\n  exports._containerInsertAfter = _containerInsertAfter;\n  exports.insertAfter = insertAfter;\n  exports.updateSiblingKeys = updateSiblingKeys;\n  exports._verifyNodeList = _verifyNodeList;\n  exports.unshiftContainer = unshiftContainer;\n  exports.pushContainer = pushContainer;\n  exports.hoist = hoist;\n\n  var _cache = _$$_REQUIRE(_dependencyMap[1], \"../cache\");\n\n  var _hoister = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"./lib/hoister\"));\n\n  var _index = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"./index\"));\n\n  var t = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[4], \"@babel/types\"));\n\n  function _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n\n    _getRequireWildcardCache = function _getRequireWildcardCache() {\n      return cache;\n    };\n\n    return cache;\n  }\n\n  function _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n      return obj;\n    }\n\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n      return {\n        default: obj\n      };\n    }\n\n    var cache = _getRequireWildcardCache();\n\n    if (cache && cache.has(obj)) {\n      return cache.get(obj);\n    }\n\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n    for (var key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n        if (desc && (desc.get || desc.set)) {\n          Object.defineProperty(newObj, key, desc);\n        } else {\n          newObj[key] = obj[key];\n        }\n      }\n    }\n\n    newObj.default = obj;\n\n    if (cache) {\n      cache.set(obj, newObj);\n    }\n\n    return newObj;\n  }\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      default: obj\n    };\n  }\n\n  function insertBefore(nodes) {\n    this._assertUnremoved();\n\n    nodes = this._verifyNodeList(nodes);\n    var parentPath = this.parentPath;\n\n    if (parentPath.isExpressionStatement() || parentPath.isLabeledStatement() || parentPath.isExportNamedDeclaration() || parentPath.isExportDefaultDeclaration() && this.isDeclaration()) {\n      return parentPath.insertBefore(nodes);\n    } else if (this.isNodeType(\"Expression\") && !this.isJSXElement() || parentPath.isForStatement() && this.key === \"init\") {\n      if (this.node) nodes.push(this.node);\n      return this.replaceExpressionWithStatements(nodes);\n    } else if (Array.isArray(this.container)) {\n      return this._containerInsertBefore(nodes);\n    } else if (this.isStatementOrBlock()) {\n      var shouldInsertCurrentNode = this.node && (!this.isExpressionStatement() || this.node.expression != null);\n      this.replaceWith(t.blockStatement(shouldInsertCurrentNode ? [this.node] : []));\n      return this.unshiftContainer(\"body\", nodes);\n    } else {\n      throw new Error(\"We don't know what to do with this node type. \" + \"We were previously a Statement but we can't fit in here?\");\n    }\n  }\n\n  function _containerInsert(from, nodes) {\n    var _this$container;\n\n    this.updateSiblingKeys(from, nodes.length);\n    var paths = [];\n\n    (_this$container = this.container).splice.apply(_this$container, [from, 0].concat(_toConsumableArray(nodes)));\n\n    for (var i = 0; i < nodes.length; i++) {\n      var to = from + i;\n      var path = this.getSibling(to);\n      paths.push(path);\n\n      if (this.context && this.context.queue) {\n        path.pushContext(this.context);\n      }\n    }\n\n    var contexts = this._getQueueContexts();\n\n    for (var _i = 0, _paths = paths; _i < _paths.length; _i++) {\n      var _path = _paths[_i];\n\n      _path.setScope();\n\n      _path.debug(\"Inserted.\");\n\n      for (var _iterator = contexts, _isArray = Array.isArray(_iterator), _i2 = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"]();;) {\n        var _ref;\n\n        if (_isArray) {\n          if (_i2 >= _iterator.length) break;\n          _ref = _iterator[_i2++];\n        } else {\n          _i2 = _iterator.next();\n          if (_i2.done) break;\n          _ref = _i2.value;\n        }\n\n        var _context = _ref;\n\n        _context.maybeQueue(_path, true);\n      }\n    }\n\n    return paths;\n  }\n\n  function _containerInsertBefore(nodes) {\n    return this._containerInsert(this.key, nodes);\n  }\n\n  function _containerInsertAfter(nodes) {\n    return this._containerInsert(this.key + 1, nodes);\n  }\n\n  function insertAfter(nodes) {\n    this._assertUnremoved();\n\n    nodes = this._verifyNodeList(nodes);\n    var parentPath = this.parentPath;\n\n    if (parentPath.isExpressionStatement() || parentPath.isLabeledStatement() || parentPath.isExportNamedDeclaration() || parentPath.isExportDefaultDeclaration() && this.isDeclaration()) {\n      return parentPath.insertAfter(nodes.map(function (node) {\n        return t.isExpression(node) ? t.expressionStatement(node) : node;\n      }));\n    } else if (this.isNodeType(\"Expression\") && !this.isJSXElement() && !parentPath.isJSXElement() || parentPath.isForStatement() && this.key === \"init\") {\n      if (this.node) {\n        var scope = this.scope;\n\n        if (parentPath.isMethod({\n          computed: true,\n          key: this.node\n        })) {\n          scope = scope.parent;\n        }\n\n        var temp = scope.generateDeclaredUidIdentifier();\n        nodes.unshift(t.expressionStatement(t.assignmentExpression(\"=\", t.cloneNode(temp), this.node)));\n        nodes.push(t.expressionStatement(t.cloneNode(temp)));\n      }\n\n      return this.replaceExpressionWithStatements(nodes);\n    } else if (Array.isArray(this.container)) {\n      return this._containerInsertAfter(nodes);\n    } else if (this.isStatementOrBlock()) {\n      var shouldInsertCurrentNode = this.node && (!this.isExpressionStatement() || this.node.expression != null);\n      this.replaceWith(t.blockStatement(shouldInsertCurrentNode ? [this.node] : []));\n      return this.pushContainer(\"body\", nodes);\n    } else {\n      throw new Error(\"We don't know what to do with this node type. \" + \"We were previously a Statement but we can't fit in here?\");\n    }\n  }\n\n  function updateSiblingKeys(fromIndex, incrementBy) {\n    if (!this.parent) return;\n\n    var paths = _cache.path.get(this.parent);\n\n    for (var i = 0; i < paths.length; i++) {\n      var path = paths[i];\n\n      if (path.key >= fromIndex) {\n        path.key += incrementBy;\n      }\n    }\n  }\n\n  function _verifyNodeList(nodes) {\n    if (!nodes) {\n      return [];\n    }\n\n    if (nodes.constructor !== Array) {\n      nodes = [nodes];\n    }\n\n    for (var i = 0; i < nodes.length; i++) {\n      var node = nodes[i];\n      var msg = void 0;\n\n      if (!node) {\n        msg = \"has falsy node\";\n      } else if (typeof node !== \"object\") {\n        msg = \"contains a non-object node\";\n      } else if (!node.type) {\n        msg = \"without a type\";\n      } else if (node instanceof _index.default) {\n        msg = \"has a NodePath when it expected a raw object\";\n      }\n\n      if (msg) {\n        var type = Array.isArray(node) ? \"array\" : typeof node;\n        throw new Error(\"Node list \" + msg + \" with the index of \" + i + \" and type of \" + type);\n      }\n    }\n\n    return nodes;\n  }\n\n  function unshiftContainer(listKey, nodes) {\n    this._assertUnremoved();\n\n    nodes = this._verifyNodeList(nodes);\n\n    var path = _index.default.get({\n      parentPath: this,\n      parent: this.node,\n      container: this.node[listKey],\n      listKey: listKey,\n      key: 0\n    });\n\n    return path._containerInsertBefore(nodes);\n  }\n\n  function pushContainer(listKey, nodes) {\n    this._assertUnremoved();\n\n    nodes = this._verifyNodeList(nodes);\n    var container = this.node[listKey];\n\n    var path = _index.default.get({\n      parentPath: this,\n      parent: this.node,\n      container: container,\n      listKey: listKey,\n      key: container.length\n    });\n\n    return path.replaceWithMultiple(nodes);\n  }\n\n  function hoist() {\n    var scope = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.scope;\n    var hoister = new _hoister.default(this, scope);\n    return hoister.run();\n  }\n});","map":[[2,0,1,0],[6,0,3,0,"Object"],[6,2,3,0,"Object"],[6,8,3,6],[6,9,3,7,"defineProperty"],[6,23,3,0],[6,24,3,22,"exports"],[6,31,3,0],[6,33,3,31],[6,45,3,0],[6,47,3,45],[7,0,4,2,"value"],[7,4,4,2,"value"],[7,9,4,7],[7,11,4,9],[8,0,3,45],[8,3,3,0],[9,0,6,0,"exports"],[9,2,6,0,"exports"],[9,9,6,7],[9,10,6,8,"insertBefore"],[9,22,6,0],[9,25,6,23,"insertBefore"],[9,37,6,0],[10,0,7,0,"exports"],[10,2,7,0,"exports"],[10,9,7,7],[10,10,7,8,"_containerInsert"],[10,26,7,0],[10,29,7,27,"_containerInsert"],[10,45,7,0],[11,0,8,0,"exports"],[11,2,8,0,"exports"],[11,9,8,7],[11,10,8,8,"_containerInsertBefore"],[11,32,8,0],[11,35,8,33,"_containerInsertBefore"],[11,57,8,0],[12,0,9,0,"exports"],[12,2,9,0,"exports"],[12,9,9,7],[12,10,9,8,"_containerInsertAfter"],[12,31,9,0],[12,34,9,32,"_containerInsertAfter"],[12,55,9,0],[13,0,10,0,"exports"],[13,2,10,0,"exports"],[13,9,10,7],[13,10,10,8,"insertAfter"],[13,21,10,0],[13,24,10,22,"insertAfter"],[13,35,10,0],[14,0,11,0,"exports"],[14,2,11,0,"exports"],[14,9,11,7],[14,10,11,8,"updateSiblingKeys"],[14,27,11,0],[14,30,11,28,"updateSiblingKeys"],[14,47,11,0],[15,0,12,0,"exports"],[15,2,12,0,"exports"],[15,9,12,7],[15,10,12,8,"_verifyNodeList"],[15,25,12,0],[15,28,12,26,"_verifyNodeList"],[15,43,12,0],[16,0,13,0,"exports"],[16,2,13,0,"exports"],[16,9,13,7],[16,10,13,8,"unshiftContainer"],[16,26,13,0],[16,29,13,27,"unshiftContainer"],[16,45,13,0],[17,0,14,0,"exports"],[17,2,14,0,"exports"],[17,9,14,7],[17,10,14,8,"pushContainer"],[17,23,14,0],[17,26,14,24,"pushContainer"],[17,39,14,0],[18,0,15,0,"exports"],[18,2,15,0,"exports"],[18,9,15,7],[18,10,15,8,"hoist"],[18,15,15,0],[18,18,15,16,"hoist"],[18,23,15,0],[20,0,17,0],[20,6,17,4,"_cache"],[20,12,17,10],[20,15,17,13,"require"],[20,26,17,20],[20,57,17,0],[22,0,19,0],[22,6,19,4,"_hoister"],[22,14,19,12],[22,17,19,15,"_interopRequireDefault"],[22,39,19,37],[22,40,19,38,"require"],[22,51,19,45],[22,87,19,37],[22,88,19,0],[24,0,21,0],[24,6,21,4,"_index"],[24,12,21,10],[24,15,21,13,"_interopRequireDefault"],[24,37,21,35],[24,38,21,36,"require"],[24,49,21,43],[24,79,21,35],[24,80,21,0],[26,0,23,0],[26,6,23,4,"t"],[26,7,23,5],[26,10,23,8,"_interopRequireWildcard"],[26,33,23,31],[26,34,23,32,"require"],[26,45,23,39],[26,80,23,31],[26,81,23,0],[28,0,25,0],[28,11,25,9,"_getRequireWildcardCache"],[28,35,25,0],[28,38,25,36],[29,0,25,38],[29,8,25,42],[29,15,25,49,"WeakMap"],[29,22,25,42],[29,27,25,61],[29,37,25,38],[29,39,25,73],[29,46,25,80],[29,50,25,73],[30,0,25,86],[30,8,25,90,"cache"],[30,13,25,95],[30,16,25,98],[30,20,25,102,"WeakMap"],[30,27,25,98],[30,29,25,86],[32,0,25,113,"_getRequireWildcardCache"],[32,4,25,113,"_getRequireWildcardCache"],[32,28,25,137],[32,31,25,140],[32,67,25,152],[33,0,25,154],[33,13,25,161,"cache"],[33,18,25,154],[34,0,25,169],[34,5,25,113],[36,0,25,171],[36,11,25,178,"cache"],[36,16,25,171],[37,0,25,186],[39,0,27,0],[39,11,27,9,"_interopRequireWildcard"],[39,34,27,0],[39,35,27,33,"obj"],[39,38,27,0],[39,40,27,38],[40,0,27,40],[40,8,27,44,"obj"],[40,11,27,47],[40,15,27,51,"obj"],[40,18,27,54],[40,19,27,55,"__esModule"],[40,29,27,40],[40,31,27,67],[41,0,27,69],[41,13,27,76,"obj"],[41,16,27,69],[42,0,27,82],[44,0,27,83],[44,8,27,87,"obj"],[44,11,27,90],[44,16,27,95],[44,20,27,87],[44,24,27,103],[44,31,27,110,"obj"],[44,34,27,103],[44,39,27,118],[44,47,27,103],[44,51,27,130],[44,58,27,137,"obj"],[44,61,27,130],[44,66,27,145],[44,76,27,83],[44,78,27,157],[45,0,27,159],[45,13,27,166],[46,0,27,168,"default"],[46,8,27,168,"default"],[46,15,27,175],[46,17,27,177,"obj"],[47,0,27,166],[47,7,27,159],[48,0,27,185],[50,0,27,186],[50,8,27,190,"cache"],[50,13,27,195],[50,16,27,198,"_getRequireWildcardCache"],[50,40,27,222],[50,42,27,186],[52,0,27,226],[52,8,27,230,"cache"],[52,13,27,235],[52,17,27,239,"cache"],[52,22,27,244],[52,23,27,245,"has"],[52,26,27,239],[52,27,27,249,"obj"],[52,30,27,239],[52,31,27,226],[52,33,27,255],[53,0,27,257],[53,13,27,264,"cache"],[53,18,27,269],[53,19,27,270,"get"],[53,22,27,264],[53,23,27,274,"obj"],[53,26,27,264],[53,27,27,257],[54,0,27,281],[56,0,27,282],[56,8,27,286,"newObj"],[56,14,27,292],[56,17,27,295],[56,19,27,282],[57,0,27,299],[57,8,27,303,"hasPropertyDescriptor"],[57,29,27,324],[57,32,27,327,"Object"],[57,38,27,333],[57,39,27,334,"defineProperty"],[57,53,27,327],[57,57,27,352,"Object"],[57,63,27,358],[57,64,27,359,"getOwnPropertyDescriptor"],[57,88,27,299],[59,0,27,385],[59,9,27,390],[59,13,27,394,"key"],[59,16,27,385],[59,20,27,401,"obj"],[59,23,27,385],[59,25,27,406],[60,0,27,408],[60,10,27,412,"Object"],[60,16,27,418],[60,17,27,419,"prototype"],[60,26,27,412],[60,27,27,429,"hasOwnProperty"],[60,41,27,412],[60,42,27,444,"call"],[60,46,27,412],[60,47,27,449,"obj"],[60,50,27,412],[60,52,27,454,"key"],[60,55,27,412],[60,56,27,408],[60,58,27,460],[61,0,27,462],[61,12,27,466,"desc"],[61,16,27,470],[61,19,27,473,"hasPropertyDescriptor"],[61,40,27,494],[61,43,27,497,"Object"],[61,49,27,503],[61,50,27,504,"getOwnPropertyDescriptor"],[61,74,27,497],[61,75,27,529,"obj"],[61,78,27,497],[61,80,27,534,"key"],[61,83,27,497],[61,84,27,494],[61,87,27,541],[61,91,27,462],[63,0,27,547],[63,12,27,551,"desc"],[63,16,27,555],[63,21,27,560,"desc"],[63,25,27,564],[63,26,27,565,"get"],[63,29,27,560],[63,33,27,572,"desc"],[63,37,27,576],[63,38,27,577,"set"],[63,41,27,555],[63,42,27,547],[63,44,27,583],[64,0,27,585,"Object"],[64,10,27,585,"Object"],[64,16,27,591],[64,17,27,592,"defineProperty"],[64,31,27,585],[64,32,27,607,"newObj"],[64,38,27,585],[64,40,27,615,"key"],[64,43,27,585],[64,45,27,620,"desc"],[64,49,27,585],[65,0,27,628],[65,9,27,547],[65,15,27,634],[66,0,27,636,"newObj"],[66,10,27,636,"newObj"],[66,16,27,642],[66,17,27,643,"key"],[66,20,27,642],[66,21,27,636],[66,24,27,650,"obj"],[66,27,27,653],[66,28,27,654,"key"],[66,31,27,653],[66,32,27,636],[67,0,27,661],[68,0,27,663],[69,0,27,665],[71,0,27,666,"newObj"],[71,4,27,666,"newObj"],[71,10,27,672],[71,11,27,673,"default"],[71,18,27,666],[71,21,27,683,"obj"],[71,24,27,666],[73,0,27,688],[73,8,27,692,"cache"],[73,13,27,688],[73,15,27,699],[74,0,27,701,"cache"],[74,6,27,701,"cache"],[74,11,27,706],[74,12,27,707,"set"],[74,15,27,701],[74,16,27,711,"obj"],[74,19,27,701],[74,21,27,716,"newObj"],[74,27,27,701],[75,0,27,726],[77,0,27,727],[77,11,27,734,"newObj"],[77,17,27,727],[78,0,27,743],[80,0,29,0],[80,11,29,9,"_interopRequireDefault"],[80,33,29,0],[80,34,29,32,"obj"],[80,37,29,0],[80,39,29,37],[81,0,29,39],[81,11,29,46,"obj"],[81,14,29,49],[81,18,29,53,"obj"],[81,21,29,56],[81,22,29,57,"__esModule"],[81,32,29,46],[81,35,29,70,"obj"],[81,38,29,46],[81,41,29,76],[82,0,29,78,"default"],[82,6,29,78,"default"],[82,13,29,85],[82,15,29,87,"obj"],[83,0,29,76],[83,5,29,39],[84,0,29,95],[86,0,31,0],[86,11,31,9,"insertBefore"],[86,23,31,0],[86,24,31,22,"nodes"],[86,29,31,0],[86,31,31,29],[87,0,32,2],[87,9,32,7,"_assertUnremoved"],[87,25,32,2],[89,0,34,2,"nodes"],[89,4,34,2,"nodes"],[89,9,34,7],[89,12,34,10],[89,17,34,15,"_verifyNodeList"],[89,32,34,10],[89,33,34,31,"nodes"],[89,38,34,10],[89,39,34,2],[90,0,31,29],[90,8,36,4,"parentPath"],[90,18,31,29],[90,21,37,6],[90,25,31,29],[90,26,36,4,"parentPath"],[90,36,31,29],[92,0,39,2],[92,8,39,6,"parentPath"],[92,18,39,16],[92,19,39,17,"isExpressionStatement"],[92,40,39,6],[92,46,39,44,"parentPath"],[92,56,39,54],[92,57,39,55,"isLabeledStatement"],[92,75,39,44],[92,77,39,6],[92,81,39,79,"parentPath"],[92,91,39,89],[92,92,39,90,"isExportNamedDeclaration"],[92,116,39,79],[92,118,39,6],[92,122,39,120,"parentPath"],[92,132,39,130],[92,133,39,131,"isExportDefaultDeclaration"],[92,159,39,120],[92,165,39,163],[92,170,39,168,"isDeclaration"],[92,183,39,163],[92,185,39,2],[92,187,39,185],[93,0,40,4],[93,13,40,11,"parentPath"],[93,23,40,21],[93,24,40,22,"insertBefore"],[93,36,40,11],[93,37,40,35,"nodes"],[93,42,40,11],[93,43,40,4],[94,0,41,3],[94,5,39,2],[94,11,41,9],[94,15,41,13],[94,20,41,18,"isNodeType"],[94,30,41,13],[94,31,41,29],[94,43,41,13],[94,48,41,46],[94,49,41,47],[94,54,41,52,"isJSXElement"],[94,66,41,47],[94,68,41,13],[94,72,41,70,"parentPath"],[94,82,41,80],[94,83,41,81,"isForStatement"],[94,97,41,70],[94,103,41,101],[94,108,41,106,"key"],[94,111,41,101],[94,116,41,114],[94,122,41,9],[94,124,41,122],[95,0,42,4],[95,10,42,8],[95,15,42,13,"node"],[95,19,42,4],[95,21,42,19,"nodes"],[95,26,42,24],[95,27,42,25,"push"],[95,31,42,19],[95,32,42,30],[95,37,42,35,"node"],[95,41,42,19],[96,0,43,4],[96,13,43,11],[96,18,43,16,"replaceExpressionWithStatements"],[96,49,43,11],[96,50,43,48,"nodes"],[96,55,43,11],[96,56,43,4],[97,0,44,3],[97,5,41,9],[97,11,44,9],[97,15,44,13,"Array"],[97,20,44,18],[97,21,44,19,"isArray"],[97,28,44,13],[97,29,44,27],[97,34,44,32,"container"],[97,43,44,13],[97,44,44,9],[97,46,44,44],[98,0,45,4],[98,13,45,11],[98,18,45,16,"_containerInsertBefore"],[98,40,45,11],[98,41,45,39,"nodes"],[98,46,45,11],[98,47,45,4],[99,0,46,3],[99,5,44,9],[99,11,46,9],[99,15,46,13],[99,20,46,18,"isStatementOrBlock"],[99,38,46,13],[99,40,46,9],[99,42,46,40],[100,0,47,4],[100,10,47,10,"shouldInsertCurrentNode"],[100,33,47,33],[100,36,47,36],[100,41,47,41,"node"],[100,45,47,36],[100,50,47,50],[100,51,47,51],[100,56,47,56,"isExpressionStatement"],[100,77,47,51],[100,79,47,50],[100,83,47,83],[100,88,47,88,"node"],[100,92,47,83],[100,93,47,93,"expression"],[100,103,47,83],[100,107,47,107],[100,111,47,36],[100,112,47,4],[101,0,48,4],[101,11,48,9,"replaceWith"],[101,22,48,4],[101,23,48,21,"t"],[101,24,48,22],[101,25,48,23,"blockStatement"],[101,39,48,21],[101,40,48,38,"shouldInsertCurrentNode"],[101,63,48,61],[101,66,48,64],[101,67,48,65],[101,72,48,70,"node"],[101,76,48,64],[101,77,48,61],[101,80,48,78],[101,82,48,21],[101,83,48,4],[102,0,49,4],[102,13,49,11],[102,18,49,16,"unshiftContainer"],[102,34,49,11],[102,35,49,33],[102,41,49,11],[102,43,49,41,"nodes"],[102,48,49,11],[102,49,49,4],[103,0,50,3],[103,5,46,9],[103,11,50,9],[104,0,51,4],[104,12,51,10],[104,16,51,14,"Error"],[104,21,51,10],[104,22,51,20],[104,73,51,71],[104,131,51,10],[104,132,51,4],[105,0,52,3],[106,0,53,1],[108,0,55,0],[108,11,55,9,"_containerInsert"],[108,27,55,0],[108,28,55,26,"from"],[108,32,55,0],[108,34,55,32,"nodes"],[108,39,55,0],[108,41,55,39],[109,0,55,39],[111,0,56,2],[111,9,56,7,"updateSiblingKeys"],[111,26,56,2],[111,27,56,25,"from"],[111,31,56,2],[111,33,56,31,"nodes"],[111,38,56,36],[111,39,56,37,"length"],[111,45,56,2],[112,0,57,2],[112,8,57,8,"paths"],[112,13,57,13],[112,16,57,16],[112,18,57,2],[114,0,58,2],[114,28,58,7,"container"],[114,37,58,2],[114,39,58,17,"splice"],[114,45,58,2],[114,70,58,24,"from"],[114,74,58,2],[114,76,58,30],[114,77,58,2],[114,105,58,36,"nodes"],[114,110,58,2],[116,0,60,2],[116,9,60,7],[116,13,60,11,"i"],[116,14,60,12],[116,17,60,15],[116,18,60,2],[116,20,60,18,"i"],[116,21,60,19],[116,24,60,22,"nodes"],[116,29,60,27],[116,30,60,28,"length"],[116,36,60,2],[116,38,60,36,"i"],[116,39,60,37],[116,41,60,2],[116,43,60,41],[117,0,61,4],[117,10,61,10,"to"],[117,12,61,12],[117,15,61,15,"from"],[117,19,61,19],[117,22,61,22,"i"],[117,23,61,4],[118,0,62,4],[118,10,62,10,"path"],[118,14,62,14],[118,17,62,17],[118,22,62,22,"getSibling"],[118,32,62,17],[118,33,62,33,"to"],[118,35,62,17],[118,36,62,4],[119,0,63,4,"paths"],[119,6,63,4,"paths"],[119,11,63,9],[119,12,63,10,"push"],[119,16,63,4],[119,17,63,15,"path"],[119,21,63,4],[121,0,65,4],[121,10,65,8],[121,15,65,13,"context"],[121,22,65,8],[121,26,65,24],[121,31,65,29,"context"],[121,38,65,24],[121,39,65,37,"queue"],[121,44,65,4],[121,46,65,44],[122,0,66,6,"path"],[122,8,66,6,"path"],[122,12,66,10],[122,13,66,11,"pushContext"],[122,24,66,6],[122,25,66,23],[122,30,66,28,"context"],[122,37,66,6],[123,0,67,5],[124,0,68,3],[126,0,70,2],[126,8,70,8,"contexts"],[126,16,70,16],[126,19,70,19],[126,24,70,24,"_getQueueContexts"],[126,41,70,19],[126,43,70,2],[128,0,72,2],[128,30,72,21,"paths"],[128,35,72,2],[128,63,72,28],[129,0,72,7],[129,10,72,13,"path"],[129,15,72,17],[129,28,72,7],[131,0,73,4,"path"],[131,6,73,4,"path"],[131,11,73,8],[131,12,73,9,"setScope"],[131,20,73,4],[133,0,74,4,"path"],[133,6,74,4,"path"],[133,11,74,8],[133,12,74,9,"debug"],[133,17,74,4],[133,18,74,15],[133,29,74,4],[135,0,76,4],[135,27,76,26,"contexts"],[135,35,76,4],[135,196,76,36],[136,0,76,36],[138,0,76,36],[139,0,76,36],[140,0,76,36],[141,0,76,36],[142,0,76,36],[143,0,76,36],[144,0,76,36],[145,0,76,36],[147,0,76,36],[147,12,76,15,"context"],[147,20,76,36],[149,0,77,6,"context"],[149,8,77,6,"context"],[149,16,77,13],[149,17,77,14,"maybeQueue"],[149,27,77,6],[149,28,77,25,"path"],[149,33,77,6],[149,35,77,31],[149,39,77,6],[150,0,78,5],[151,0,79,3],[153,0,81,2],[153,11,81,9,"paths"],[153,16,81,2],[154,0,82,1],[156,0,84,0],[156,11,84,9,"_containerInsertBefore"],[156,33,84,0],[156,34,84,32,"nodes"],[156,39,84,0],[156,41,84,39],[157,0,85,2],[157,11,85,9],[157,16,85,14,"_containerInsert"],[157,32,85,9],[157,33,85,31],[157,38,85,36,"key"],[157,41,85,9],[157,43,85,41,"nodes"],[157,48,85,9],[157,49,85,2],[158,0,86,1],[160,0,88,0],[160,11,88,9,"_containerInsertAfter"],[160,32,88,0],[160,33,88,31,"nodes"],[160,38,88,0],[160,40,88,38],[161,0,89,2],[161,11,89,9],[161,16,89,14,"_containerInsert"],[161,32,89,9],[161,33,89,31],[161,38,89,36,"key"],[161,41,89,31],[161,44,89,42],[161,45,89,9],[161,47,89,45,"nodes"],[161,52,89,9],[161,53,89,2],[162,0,90,1],[164,0,92,0],[164,11,92,9,"insertAfter"],[164,22,92,0],[164,23,92,21,"nodes"],[164,28,92,0],[164,30,92,28],[165,0,93,2],[165,9,93,7,"_assertUnremoved"],[165,25,93,2],[167,0,95,2,"nodes"],[167,4,95,2,"nodes"],[167,9,95,7],[167,12,95,10],[167,17,95,15,"_verifyNodeList"],[167,32,95,10],[167,33,95,31,"nodes"],[167,38,95,10],[167,39,95,2],[168,0,92,28],[168,8,97,4,"parentPath"],[168,18,92,28],[168,21,98,6],[168,25,92,28],[168,26,97,4,"parentPath"],[168,36,92,28],[170,0,100,2],[170,8,100,6,"parentPath"],[170,18,100,16],[170,19,100,17,"isExpressionStatement"],[170,40,100,6],[170,46,100,44,"parentPath"],[170,56,100,54],[170,57,100,55,"isLabeledStatement"],[170,75,100,44],[170,77,100,6],[170,81,100,79,"parentPath"],[170,91,100,89],[170,92,100,90,"isExportNamedDeclaration"],[170,116,100,79],[170,118,100,6],[170,122,100,120,"parentPath"],[170,132,100,130],[170,133,100,131,"isExportDefaultDeclaration"],[170,159,100,120],[170,165,100,163],[170,170,100,168,"isDeclaration"],[170,183,100,163],[170,185,100,2],[170,187,100,185],[171,0,101,4],[171,13,101,11,"parentPath"],[171,23,101,21],[171,24,101,22,"insertAfter"],[171,35,101,11],[171,36,101,34,"nodes"],[171,41,101,39],[171,42,101,40,"map"],[171,45,101,34],[171,46,101,44],[171,56,101,44,"node"],[171,60,101,48],[171,62,101,52],[172,0,102,6],[172,15,102,13,"t"],[172,16,102,14],[172,17,102,15,"isExpression"],[172,29,102,13],[172,30,102,28,"node"],[172,34,102,13],[172,38,102,36,"t"],[172,39,102,37],[172,40,102,38,"expressionStatement"],[172,59,102,36],[172,60,102,58,"node"],[172,64,102,36],[172,65,102,13],[172,68,102,66,"node"],[172,72,102,6],[173,0,103,5],[173,7,101,34],[173,8,101,11],[173,9,101,4],[174,0,104,3],[174,5,100,2],[174,11,104,9],[174,15,104,13],[174,20,104,18,"isNodeType"],[174,30,104,13],[174,31,104,29],[174,43,104,13],[174,48,104,46],[174,49,104,47],[174,54,104,52,"isJSXElement"],[174,66,104,47],[174,68,104,13],[174,72,104,70],[174,73,104,71,"parentPath"],[174,83,104,81],[174,84,104,82,"isJSXElement"],[174,96,104,71],[174,98,104,13],[174,102,104,100,"parentPath"],[174,112,104,110],[174,113,104,111,"isForStatement"],[174,127,104,100],[174,133,104,131],[174,138,104,136,"key"],[174,141,104,131],[174,146,104,144],[174,152,104,9],[174,154,104,152],[175,0,105,4],[175,10,105,8],[175,15,105,13,"node"],[175,19,105,4],[175,21,105,19],[176,0,105,19],[176,12,107,8,"scope"],[176,17,105,19],[176,20,108,10],[176,24,105,19],[176,25,107,8,"scope"],[176,30,105,19],[178,0,110,6],[178,12,110,10,"parentPath"],[178,22,110,20],[178,23,110,21,"isMethod"],[178,31,110,10],[178,32,110,30],[179,0,111,8,"computed"],[179,10,111,8,"computed"],[179,18,111,16],[179,20,111,18],[179,24,110,30],[180,0,112,8,"key"],[180,10,112,8,"key"],[180,13,112,11],[180,15,112,13],[180,20,112,18,"node"],[181,0,110,30],[181,9,110,10],[181,10,110,6],[181,12,113,10],[182,0,114,8,"scope"],[182,10,114,8,"scope"],[182,15,114,13],[182,18,114,16,"scope"],[182,23,114,21],[182,24,114,22,"parent"],[182,30,114,8],[183,0,115,7],[185,0,117,6],[185,12,117,12,"temp"],[185,16,117,16],[185,19,117,19,"scope"],[185,24,117,24],[185,25,117,25,"generateDeclaredUidIdentifier"],[185,54,117,19],[185,56,117,6],[186,0,118,6,"nodes"],[186,8,118,6,"nodes"],[186,13,118,11],[186,14,118,12,"unshift"],[186,21,118,6],[186,22,118,20,"t"],[186,23,118,21],[186,24,118,22,"expressionStatement"],[186,43,118,20],[186,44,118,42,"t"],[186,45,118,43],[186,46,118,44,"assignmentExpression"],[186,66,118,42],[186,67,118,65],[186,70,118,42],[186,72,118,70,"t"],[186,73,118,71],[186,74,118,72,"cloneNode"],[186,83,118,70],[186,84,118,82,"temp"],[186,88,118,70],[186,89,118,42],[186,91,118,89],[186,96,118,94,"node"],[186,100,118,42],[186,101,118,20],[186,102,118,6],[187,0,119,6,"nodes"],[187,8,119,6,"nodes"],[187,13,119,11],[187,14,119,12,"push"],[187,18,119,6],[187,19,119,17,"t"],[187,20,119,18],[187,21,119,19,"expressionStatement"],[187,40,119,17],[187,41,119,39,"t"],[187,42,119,40],[187,43,119,41,"cloneNode"],[187,52,119,39],[187,53,119,51,"temp"],[187,57,119,39],[187,58,119,17],[187,59,119,6],[188,0,120,5],[190,0,122,4],[190,13,122,11],[190,18,122,16,"replaceExpressionWithStatements"],[190,49,122,11],[190,50,122,48,"nodes"],[190,55,122,11],[190,56,122,4],[191,0,123,3],[191,5,104,9],[191,11,123,9],[191,15,123,13,"Array"],[191,20,123,18],[191,21,123,19,"isArray"],[191,28,123,13],[191,29,123,27],[191,34,123,32,"container"],[191,43,123,13],[191,44,123,9],[191,46,123,44],[192,0,124,4],[192,13,124,11],[192,18,124,16,"_containerInsertAfter"],[192,39,124,11],[192,40,124,38,"nodes"],[192,45,124,11],[192,46,124,4],[193,0,125,3],[193,5,123,9],[193,11,125,9],[193,15,125,13],[193,20,125,18,"isStatementOrBlock"],[193,38,125,13],[193,40,125,9],[193,42,125,40],[194,0,126,4],[194,10,126,10,"shouldInsertCurrentNode"],[194,33,126,33],[194,36,126,36],[194,41,126,41,"node"],[194,45,126,36],[194,50,126,50],[194,51,126,51],[194,56,126,56,"isExpressionStatement"],[194,77,126,51],[194,79,126,50],[194,83,126,83],[194,88,126,88,"node"],[194,92,126,83],[194,93,126,93,"expression"],[194,103,126,83],[194,107,126,107],[194,111,126,36],[194,112,126,4],[195,0,127,4],[195,11,127,9,"replaceWith"],[195,22,127,4],[195,23,127,21,"t"],[195,24,127,22],[195,25,127,23,"blockStatement"],[195,39,127,21],[195,40,127,38,"shouldInsertCurrentNode"],[195,63,127,61],[195,66,127,64],[195,67,127,65],[195,72,127,70,"node"],[195,76,127,64],[195,77,127,61],[195,80,127,78],[195,82,127,21],[195,83,127,4],[196,0,128,4],[196,13,128,11],[196,18,128,16,"pushContainer"],[196,31,128,11],[196,32,128,30],[196,38,128,11],[196,40,128,38,"nodes"],[196,45,128,11],[196,46,128,4],[197,0,129,3],[197,5,125,9],[197,11,129,9],[198,0,130,4],[198,12,130,10],[198,16,130,14,"Error"],[198,21,130,10],[198,22,130,20],[198,73,130,71],[198,131,130,10],[198,132,130,4],[199,0,131,3],[200,0,132,1],[202,0,134,0],[202,11,134,9,"updateSiblingKeys"],[202,28,134,0],[202,29,134,27,"fromIndex"],[202,38,134,0],[202,40,134,38,"incrementBy"],[202,51,134,0],[202,53,134,51],[203,0,135,2],[203,8,135,6],[203,9,135,7],[203,14,135,12,"parent"],[203,20,135,2],[203,22,135,20],[205,0,137,2],[205,8,137,8,"paths"],[205,13,137,13],[205,16,137,16,"_cache"],[205,22,137,22],[205,23,137,23,"path"],[205,27,137,16],[205,28,137,28,"get"],[205,31,137,16],[205,32,137,32],[205,37,137,37,"parent"],[205,43,137,16],[205,44,137,2],[207,0,139,2],[207,9,139,7],[207,13,139,11,"i"],[207,14,139,12],[207,17,139,15],[207,18,139,2],[207,20,139,18,"i"],[207,21,139,19],[207,24,139,22,"paths"],[207,29,139,27],[207,30,139,28,"length"],[207,36,139,2],[207,38,139,36,"i"],[207,39,139,37],[207,41,139,2],[207,43,139,41],[208,0,140,4],[208,10,140,10,"path"],[208,14,140,14],[208,17,140,17,"paths"],[208,22,140,22],[208,23,140,23,"i"],[208,24,140,22],[208,25,140,4],[210,0,142,4],[210,10,142,8,"path"],[210,14,142,12],[210,15,142,13,"key"],[210,18,142,8],[210,22,142,20,"fromIndex"],[210,31,142,4],[210,33,142,31],[211,0,143,6,"path"],[211,8,143,6,"path"],[211,12,143,10],[211,13,143,11,"key"],[211,16,143,6],[211,20,143,18,"incrementBy"],[211,31,143,6],[212,0,144,5],[213,0,145,3],[214,0,146,1],[216,0,148,0],[216,11,148,9,"_verifyNodeList"],[216,26,148,0],[216,27,148,25,"nodes"],[216,32,148,0],[216,34,148,32],[217,0,149,2],[217,8,149,6],[217,9,149,7,"nodes"],[217,14,149,2],[217,16,149,14],[218,0,150,4],[218,13,150,11],[218,15,150,4],[219,0,151,3],[221,0,153,2],[221,8,153,6,"nodes"],[221,13,153,11],[221,14,153,12,"constructor"],[221,25,153,6],[221,30,153,28,"Array"],[221,35,153,2],[221,37,153,35],[222,0,154,4,"nodes"],[222,6,154,4,"nodes"],[222,11,154,9],[222,14,154,12],[222,15,154,13,"nodes"],[222,20,154,12],[222,21,154,4],[223,0,155,3],[225,0,157,2],[225,9,157,7],[225,13,157,11,"i"],[225,14,157,12],[225,17,157,15],[225,18,157,2],[225,20,157,18,"i"],[225,21,157,19],[225,24,157,22,"nodes"],[225,29,157,27],[225,30,157,28,"length"],[225,36,157,2],[225,38,157,36,"i"],[225,39,157,37],[225,41,157,2],[225,43,157,41],[226,0,158,4],[226,10,158,10,"node"],[226,14,158,14],[226,17,158,17,"nodes"],[226,22,158,22],[226,23,158,23,"i"],[226,24,158,22],[226,25,158,4],[227,0,159,4],[227,10,159,8,"msg"],[227,13,159,11],[227,22,159,4],[229,0,161,4],[229,10,161,8],[229,11,161,9,"node"],[229,15,161,4],[229,17,161,15],[230,0,162,6,"msg"],[230,8,162,6,"msg"],[230,11,162,9],[230,14,162,12],[230,30,162,6],[231,0,163,5],[231,7,161,4],[231,13,163,11],[231,17,163,15],[231,24,163,22,"node"],[231,28,163,15],[231,33,163,31],[231,41,163,11],[231,43,163,41],[232,0,164,6,"msg"],[232,8,164,6,"msg"],[232,11,164,9],[232,14,164,12],[232,42,164,6],[233,0,165,5],[233,7,163,11],[233,13,165,11],[233,17,165,15],[233,18,165,16,"node"],[233,22,165,20],[233,23,165,21,"type"],[233,27,165,11],[233,29,165,27],[234,0,166,6,"msg"],[234,8,166,6,"msg"],[234,11,166,9],[234,14,166,12],[234,30,166,6],[235,0,167,5],[235,7,165,11],[235,13,167,11],[235,17,167,15,"node"],[235,21,167,19],[235,33,167,31,"_index"],[235,39,167,37],[235,40,167,38,"default"],[235,47,167,11],[235,49,167,47],[236,0,168,6,"msg"],[236,8,168,6,"msg"],[236,11,168,9],[236,14,168,12],[236,60,168,6],[237,0,169,5],[239,0,171,4],[239,10,171,8,"msg"],[239,13,171,4],[239,15,171,13],[240,0,172,6],[240,12,172,12,"type"],[240,16,172,16],[240,19,172,19,"Array"],[240,24,172,24],[240,25,172,25,"isArray"],[240,32,172,19],[240,33,172,33,"node"],[240,37,172,19],[240,41,172,41],[240,48,172,19],[240,51,172,51],[240,58,172,58,"node"],[240,62,172,6],[241,0,173,6],[241,14,173,12],[241,18,173,16,"Error"],[241,23,173,12],[241,39,173,35,"msg"],[241,42,173,12],[241,69,173,60,"i"],[241,70,173,12],[241,91,173,77,"type"],[241,95,173,12],[241,96,173,6],[242,0,174,5],[243,0,175,3],[245,0,177,2],[245,11,177,9,"nodes"],[245,16,177,2],[246,0,178,1],[248,0,180,0],[248,11,180,9,"unshiftContainer"],[248,27,180,0],[248,28,180,26,"listKey"],[248,35,180,0],[248,37,180,35,"nodes"],[248,42,180,0],[248,44,180,42],[249,0,181,2],[249,9,181,7,"_assertUnremoved"],[249,25,181,2],[251,0,183,2,"nodes"],[251,4,183,2,"nodes"],[251,9,183,7],[251,12,183,10],[251,17,183,15,"_verifyNodeList"],[251,32,183,10],[251,33,183,31,"nodes"],[251,38,183,10],[251,39,183,2],[253,0,185,2],[253,8,185,8,"path"],[253,12,185,12],[253,15,185,15,"_index"],[253,21,185,21],[253,22,185,22,"default"],[253,29,185,15],[253,30,185,30,"get"],[253,33,185,15],[253,34,185,34],[254,0,186,4,"parentPath"],[254,6,186,4,"parentPath"],[254,16,186,14],[254,18,186,16],[254,22,185,34],[255,0,187,4,"parent"],[255,6,187,4,"parent"],[255,12,187,10],[255,14,187,12],[255,19,187,17,"node"],[255,23,185,34],[256,0,188,4,"container"],[256,6,188,4,"container"],[256,15,188,13],[256,17,188,15],[256,22,188,20,"node"],[256,26,188,15],[256,27,188,25,"listKey"],[256,34,188,15],[256,35,185,34],[257,0,189,4,"listKey"],[257,6,189,4,"listKey"],[257,13,189,11],[257,15,189,4,"listKey"],[257,22,185,34],[258,0,190,4,"key"],[258,6,190,4,"key"],[258,9,190,7],[258,11,190,9],[259,0,185,34],[259,5,185,15],[259,6,185,2],[261,0,193,2],[261,11,193,9,"path"],[261,15,193,13],[261,16,193,14,"_containerInsertBefore"],[261,38,193,9],[261,39,193,37,"nodes"],[261,44,193,9],[261,45,193,2],[262,0,194,1],[264,0,196,0],[264,11,196,9,"pushContainer"],[264,24,196,0],[264,25,196,23,"listKey"],[264,32,196,0],[264,34,196,32,"nodes"],[264,39,196,0],[264,41,196,39],[265,0,197,2],[265,9,197,7,"_assertUnremoved"],[265,25,197,2],[267,0,199,2,"nodes"],[267,4,199,2,"nodes"],[267,9,199,7],[267,12,199,10],[267,17,199,15,"_verifyNodeList"],[267,32,199,10],[267,33,199,31,"nodes"],[267,38,199,10],[267,39,199,2],[268,0,200,2],[268,8,200,8,"container"],[268,17,200,17],[268,20,200,20],[268,25,200,25,"node"],[268,29,200,20],[268,30,200,30,"listKey"],[268,37,200,20],[268,38,200,2],[270,0,202,2],[270,8,202,8,"path"],[270,12,202,12],[270,15,202,15,"_index"],[270,21,202,21],[270,22,202,22,"default"],[270,29,202,15],[270,30,202,30,"get"],[270,33,202,15],[270,34,202,34],[271,0,203,4,"parentPath"],[271,6,203,4,"parentPath"],[271,16,203,14],[271,18,203,16],[271,22,202,34],[272,0,204,4,"parent"],[272,6,204,4,"parent"],[272,12,204,10],[272,14,204,12],[272,19,204,17,"node"],[272,23,202,34],[273,0,205,4,"container"],[273,6,205,4,"container"],[273,15,205,13],[273,17,205,15,"container"],[273,26,202,34],[274,0,206,4,"listKey"],[274,6,206,4,"listKey"],[274,13,206,11],[274,15,206,4,"listKey"],[274,22,202,34],[275,0,207,4,"key"],[275,6,207,4,"key"],[275,9,207,7],[275,11,207,9,"container"],[275,20,207,18],[275,21,207,19,"length"],[276,0,202,34],[276,5,202,15],[276,6,202,2],[278,0,210,2],[278,11,210,9,"path"],[278,15,210,13],[278,16,210,14,"replaceWithMultiple"],[278,35,210,9],[278,36,210,34,"nodes"],[278,41,210,9],[278,42,210,2],[279,0,211,1],[281,0,213,0],[281,11,213,9,"hoist"],[281,16,213,0],[281,19,213,35],[282,0,213,35],[282,8,213,15,"scope"],[282,13,213,35],[282,84,213,23],[282,89,213,28,"scope"],[282,94,213,35],[283,0,214,2],[283,8,214,8,"hoister"],[283,15,214,15],[283,18,214,18],[283,22,214,22,"_hoister"],[283,30,214,30],[283,31,214,31,"default"],[283,38,214,18],[283,39,214,39],[283,43,214,18],[283,45,214,45,"scope"],[283,50,214,18],[283,51,214,2],[284,0,215,2],[284,11,215,9,"hoister"],[284,18,215,16],[284,19,215,17,"run"],[284,22,215,9],[284,24,215,2],[285,0,216,1]]},"type":"js/module"}]}