{"dependencies":[{"name":"@babel/runtime/helpers/toConsumableArray","data":{"isAsync":false}},{"name":"../validators/is","data":{"isAsync":false}},{"name":"../validators/validate","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _toConsumableArray = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/toConsumableArray\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.validate = validate;\n  exports.typeIs = typeIs;\n  exports.validateType = validateType;\n  exports.validateOptional = validateOptional;\n  exports.validateOptionalType = validateOptionalType;\n  exports.arrayOf = arrayOf;\n  exports.arrayOfType = arrayOfType;\n  exports.validateArrayOfType = validateArrayOfType;\n  exports.assertEach = assertEach;\n  exports.assertOneOf = assertOneOf;\n  exports.assertNodeType = assertNodeType;\n  exports.assertNodeOrValueType = assertNodeOrValueType;\n  exports.assertValueType = assertValueType;\n  exports.assertShape = assertShape;\n  exports.chain = chain;\n  exports.default = defineType;\n  exports.DEPRECATED_KEYS = exports.BUILDER_KEYS = exports.NODE_FIELDS = exports.FLIPPED_ALIAS_KEYS = exports.ALIAS_KEYS = exports.VISITOR_KEYS = void 0;\n\n  var _is = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"../validators/is\"));\n\n  var _validate = _$$_REQUIRE(_dependencyMap[2], \"../validators/validate\");\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      default: obj\n    };\n  }\n\n  var VISITOR_KEYS = {};\n  exports.VISITOR_KEYS = VISITOR_KEYS;\n  var ALIAS_KEYS = {};\n  exports.ALIAS_KEYS = ALIAS_KEYS;\n  var FLIPPED_ALIAS_KEYS = {};\n  exports.FLIPPED_ALIAS_KEYS = FLIPPED_ALIAS_KEYS;\n  var NODE_FIELDS = {};\n  exports.NODE_FIELDS = NODE_FIELDS;\n  var BUILDER_KEYS = {};\n  exports.BUILDER_KEYS = BUILDER_KEYS;\n  var DEPRECATED_KEYS = {};\n  exports.DEPRECATED_KEYS = DEPRECATED_KEYS;\n\n  function getType(val) {\n    if (Array.isArray(val)) {\n      return \"array\";\n    } else if (val === null) {\n      return \"null\";\n    } else if (val === undefined) {\n      return \"undefined\";\n    } else {\n      return typeof val;\n    }\n  }\n\n  function validate(validate) {\n    return {\n      validate: validate\n    };\n  }\n\n  function typeIs(typeName) {\n    return typeof typeName === \"string\" ? assertNodeType(typeName) : assertNodeType.apply(void 0, _toConsumableArray(typeName));\n  }\n\n  function validateType(typeName) {\n    return validate(typeIs(typeName));\n  }\n\n  function validateOptional(validate) {\n    return {\n      validate: validate,\n      optional: true\n    };\n  }\n\n  function validateOptionalType(typeName) {\n    return {\n      validate: typeIs(typeName),\n      optional: true\n    };\n  }\n\n  function arrayOf(elementType) {\n    return chain(assertValueType(\"array\"), assertEach(elementType));\n  }\n\n  function arrayOfType(typeName) {\n    return arrayOf(typeIs(typeName));\n  }\n\n  function validateArrayOfType(typeName) {\n    return validate(arrayOfType(typeName));\n  }\n\n  function assertEach(callback) {\n    function validator(node, key, val) {\n      if (!Array.isArray(val)) return;\n\n      for (var i = 0; i < val.length; i++) {\n        callback(node, key + \"[\" + i + \"]\", val[i]);\n      }\n    }\n\n    validator.each = callback;\n    return validator;\n  }\n\n  function assertOneOf() {\n    for (var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++) {\n      values[_key] = arguments[_key];\n    }\n\n    function validate(node, key, val) {\n      if (values.indexOf(val) < 0) {\n        throw new TypeError(\"Property \" + key + \" expected value to be one of \" + JSON.stringify(values) + \" but got \" + JSON.stringify(val));\n      }\n    }\n\n    validate.oneOf = values;\n    return validate;\n  }\n\n  function assertNodeType() {\n    for (var _len2 = arguments.length, types = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      types[_key2] = arguments[_key2];\n    }\n\n    function validate(node, key, val) {\n      var valid = false;\n\n      for (var _iterator = types, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"]();;) {\n        var _ref;\n\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref = _i.value;\n        }\n\n        var _type = _ref;\n\n        if ((0, _is.default)(_type, val)) {\n          valid = true;\n          break;\n        }\n      }\n\n      if (!valid) {\n        throw new TypeError(\"Property \" + key + \" of \" + node.type + \" expected node to be of a type \" + JSON.stringify(types) + \" \" + (\"but instead got \" + JSON.stringify(val && val.type)));\n      }\n    }\n\n    validate.oneOfNodeTypes = types;\n    return validate;\n  }\n\n  function assertNodeOrValueType() {\n    for (var _len3 = arguments.length, types = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      types[_key3] = arguments[_key3];\n    }\n\n    function validate(node, key, val) {\n      var valid = false;\n\n      for (var _iterator2 = types, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"]();;) {\n        var _ref2;\n\n        if (_isArray2) {\n          if (_i2 >= _iterator2.length) break;\n          _ref2 = _iterator2[_i2++];\n        } else {\n          _i2 = _iterator2.next();\n          if (_i2.done) break;\n          _ref2 = _i2.value;\n        }\n\n        var _type2 = _ref2;\n\n        if (getType(val) === _type2 || (0, _is.default)(_type2, val)) {\n          valid = true;\n          break;\n        }\n      }\n\n      if (!valid) {\n        throw new TypeError(\"Property \" + key + \" of \" + node.type + \" expected node to be of a type \" + JSON.stringify(types) + \" \" + (\"but instead got \" + JSON.stringify(val && val.type)));\n      }\n    }\n\n    validate.oneOfNodeOrValueTypes = types;\n    return validate;\n  }\n\n  function assertValueType(type) {\n    function validate(node, key, val) {\n      var valid = getType(val) === type;\n\n      if (!valid) {\n        throw new TypeError(\"Property \" + key + \" expected type of \" + type + \" but got \" + getType(val));\n      }\n    }\n\n    validate.type = type;\n    return validate;\n  }\n\n  function assertShape(shape) {\n    function validate(node, key, val) {\n      var errors = [];\n\n      for (var _i3 = 0, _Object$keys = Object.keys(shape); _i3 < _Object$keys.length; _i3++) {\n        var property = _Object$keys[_i3];\n\n        try {\n          (0, _validate.validateField)(node, property, val[property], shape[property]);\n        } catch (error) {\n          if (error instanceof TypeError) {\n            errors.push(error.message);\n            continue;\n          }\n\n          throw error;\n        }\n      }\n\n      if (errors.length) {\n        throw new TypeError(\"Property \" + key + \" of \" + node.type + \" expected to have the following:\\n\" + errors.join(\"\\n\"));\n      }\n    }\n\n    validate.shapeOf = shape;\n    return validate;\n  }\n\n  function chain() {\n    for (var _len4 = arguments.length, fns = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      fns[_key4] = arguments[_key4];\n    }\n\n    function validate() {\n      for (var _iterator3 = fns, _isArray3 = Array.isArray(_iterator3), _i4 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"]();;) {\n        var _ref3;\n\n        if (_isArray3) {\n          if (_i4 >= _iterator3.length) break;\n          _ref3 = _iterator3[_i4++];\n        } else {\n          _i4 = _iterator3.next();\n          if (_i4.done) break;\n          _ref3 = _i4.value;\n        }\n\n        var _fn = _ref3;\n\n        _fn.apply(void 0, arguments);\n      }\n    }\n\n    validate.chainOf = fns;\n    return validate;\n  }\n\n  function defineType(type) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var inherits = opts.inherits && store[opts.inherits] || {};\n    var fields = opts.fields || inherits.fields || {};\n    var visitor = opts.visitor || inherits.visitor || [];\n    var aliases = opts.aliases || inherits.aliases || [];\n    var builder = opts.builder || inherits.builder || opts.visitor || [];\n\n    if (opts.deprecatedAlias) {\n      DEPRECATED_KEYS[opts.deprecatedAlias] = type;\n    }\n\n    for (var _iterator4 = visitor.concat(builder), _isArray4 = Array.isArray(_iterator4), _i5 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"]();;) {\n      var _ref4;\n\n      if (_isArray4) {\n        if (_i5 >= _iterator4.length) break;\n        _ref4 = _iterator4[_i5++];\n      } else {\n        _i5 = _iterator4.next();\n        if (_i5.done) break;\n        _ref4 = _i5.value;\n      }\n\n      var _key6 = _ref4;\n      fields[_key6] = fields[_key6] || {};\n    }\n\n    for (var _i6 = 0, _Object$keys2 = Object.keys(fields); _i6 < _Object$keys2.length; _i6++) {\n      var _key5 = _Object$keys2[_i6];\n      var field = fields[_key5];\n\n      if (builder.indexOf(_key5) === -1) {\n        field.optional = true;\n      }\n\n      if (field.default === undefined) {\n        field.default = null;\n      } else if (!field.validate) {\n        field.validate = assertValueType(getType(field.default));\n      }\n    }\n\n    VISITOR_KEYS[type] = opts.visitor = visitor;\n    BUILDER_KEYS[type] = opts.builder = builder;\n    NODE_FIELDS[type] = opts.fields = fields;\n    ALIAS_KEYS[type] = opts.aliases = aliases;\n    aliases.forEach(function (alias) {\n      FLIPPED_ALIAS_KEYS[alias] = FLIPPED_ALIAS_KEYS[alias] || [];\n      FLIPPED_ALIAS_KEYS[alias].push(type);\n    });\n    store[type] = opts;\n  }\n\n  var store = {};\n});","map":[[2,0,1,0],[6,0,3,0,"Object"],[6,2,3,0,"Object"],[6,8,3,6],[6,9,3,7,"defineProperty"],[6,23,3,0],[6,24,3,22,"exports"],[6,31,3,0],[6,33,3,31],[6,45,3,0],[6,47,3,45],[7,0,4,2,"value"],[7,4,4,2,"value"],[7,9,4,7],[7,11,4,9],[8,0,3,45],[8,3,3,0],[9,0,6,0,"exports"],[9,2,6,0,"exports"],[9,9,6,7],[9,10,6,8,"validate"],[9,18,6,0],[9,21,6,19,"validate"],[9,29,6,0],[10,0,7,0,"exports"],[10,2,7,0,"exports"],[10,9,7,7],[10,10,7,8,"typeIs"],[10,16,7,0],[10,19,7,17,"typeIs"],[10,25,7,0],[11,0,8,0,"exports"],[11,2,8,0,"exports"],[11,9,8,7],[11,10,8,8,"validateType"],[11,22,8,0],[11,25,8,23,"validateType"],[11,37,8,0],[12,0,9,0,"exports"],[12,2,9,0,"exports"],[12,9,9,7],[12,10,9,8,"validateOptional"],[12,26,9,0],[12,29,9,27,"validateOptional"],[12,45,9,0],[13,0,10,0,"exports"],[13,2,10,0,"exports"],[13,9,10,7],[13,10,10,8,"validateOptionalType"],[13,30,10,0],[13,33,10,31,"validateOptionalType"],[13,53,10,0],[14,0,11,0,"exports"],[14,2,11,0,"exports"],[14,9,11,7],[14,10,11,8,"arrayOf"],[14,17,11,0],[14,20,11,18,"arrayOf"],[14,27,11,0],[15,0,12,0,"exports"],[15,2,12,0,"exports"],[15,9,12,7],[15,10,12,8,"arrayOfType"],[15,21,12,0],[15,24,12,22,"arrayOfType"],[15,35,12,0],[16,0,13,0,"exports"],[16,2,13,0,"exports"],[16,9,13,7],[16,10,13,8,"validateArrayOfType"],[16,29,13,0],[16,32,13,30,"validateArrayOfType"],[16,51,13,0],[17,0,14,0,"exports"],[17,2,14,0,"exports"],[17,9,14,7],[17,10,14,8,"assertEach"],[17,20,14,0],[17,23,14,21,"assertEach"],[17,33,14,0],[18,0,15,0,"exports"],[18,2,15,0,"exports"],[18,9,15,7],[18,10,15,8,"assertOneOf"],[18,21,15,0],[18,24,15,22,"assertOneOf"],[18,35,15,0],[19,0,16,0,"exports"],[19,2,16,0,"exports"],[19,9,16,7],[19,10,16,8,"assertNodeType"],[19,24,16,0],[19,27,16,25,"assertNodeType"],[19,41,16,0],[20,0,17,0,"exports"],[20,2,17,0,"exports"],[20,9,17,7],[20,10,17,8,"assertNodeOrValueType"],[20,31,17,0],[20,34,17,32,"assertNodeOrValueType"],[20,55,17,0],[21,0,18,0,"exports"],[21,2,18,0,"exports"],[21,9,18,7],[21,10,18,8,"assertValueType"],[21,25,18,0],[21,28,18,26,"assertValueType"],[21,43,18,0],[22,0,19,0,"exports"],[22,2,19,0,"exports"],[22,9,19,7],[22,10,19,8,"assertShape"],[22,21,19,0],[22,24,19,22,"assertShape"],[22,35,19,0],[23,0,20,0,"exports"],[23,2,20,0,"exports"],[23,9,20,7],[23,10,20,8,"chain"],[23,15,20,0],[23,18,20,16,"chain"],[23,23,20,0],[24,0,21,0,"exports"],[24,2,21,0,"exports"],[24,9,21,7],[24,10,21,8,"default"],[24,17,21,0],[24,20,21,18,"defineType"],[24,30,21,0],[25,0,22,0,"exports"],[25,2,22,0,"exports"],[25,9,22,7],[25,10,22,8,"DEPRECATED_KEYS"],[25,25,22,0],[25,28,22,26,"exports"],[25,35,22,33],[25,36,22,34,"BUILDER_KEYS"],[25,48,22,26],[25,51,22,49,"exports"],[25,58,22,56],[25,59,22,57,"NODE_FIELDS"],[25,70,22,49],[25,73,22,71,"exports"],[25,80,22,78],[25,81,22,79,"FLIPPED_ALIAS_KEYS"],[25,99,22,71],[25,102,22,100,"exports"],[25,109,22,107],[25,110,22,108,"ALIAS_KEYS"],[25,120,22,100],[25,123,22,121,"exports"],[25,130,22,128],[25,131,22,129,"VISITOR_KEYS"],[25,143,22,121],[25,146,22,144],[25,151,22,149],[25,152,22,0],[27,0,24,0],[27,6,24,4,"_is"],[27,9,24,7],[27,12,24,10,"_interopRequireDefault"],[27,34,24,32],[27,35,24,33,"require"],[27,46,24,40],[27,85,24,32],[27,86,24,0],[29,0,26,0],[29,6,26,4,"_validate"],[29,15,26,13],[29,18,26,16,"require"],[29,29,26,23],[29,74,26,0],[31,0,28,0],[31,11,28,9,"_interopRequireDefault"],[31,33,28,0],[31,34,28,32,"obj"],[31,37,28,0],[31,39,28,37],[32,0,28,39],[32,11,28,46,"obj"],[32,14,28,49],[32,18,28,53,"obj"],[32,21,28,56],[32,22,28,57,"__esModule"],[32,32,28,46],[32,35,28,70,"obj"],[32,38,28,46],[32,41,28,76],[33,0,28,78,"default"],[33,6,28,78,"default"],[33,13,28,85],[33,15,28,87,"obj"],[34,0,28,76],[34,5,28,39],[35,0,28,95],[37,0,30,0],[37,6,30,6,"VISITOR_KEYS"],[37,18,30,18],[37,21,30,21],[37,23,30,0],[38,0,31,0,"exports"],[38,2,31,0,"exports"],[38,9,31,7],[38,10,31,8,"VISITOR_KEYS"],[38,22,31,0],[38,25,31,23,"VISITOR_KEYS"],[38,37,31,0],[39,0,32,0],[39,6,32,6,"ALIAS_KEYS"],[39,16,32,16],[39,19,32,19],[39,21,32,0],[40,0,33,0,"exports"],[40,2,33,0,"exports"],[40,9,33,7],[40,10,33,8,"ALIAS_KEYS"],[40,20,33,0],[40,23,33,21,"ALIAS_KEYS"],[40,33,33,0],[41,0,34,0],[41,6,34,6,"FLIPPED_ALIAS_KEYS"],[41,24,34,24],[41,27,34,27],[41,29,34,0],[42,0,35,0,"exports"],[42,2,35,0,"exports"],[42,9,35,7],[42,10,35,8,"FLIPPED_ALIAS_KEYS"],[42,28,35,0],[42,31,35,29,"FLIPPED_ALIAS_KEYS"],[42,49,35,0],[43,0,36,0],[43,6,36,6,"NODE_FIELDS"],[43,17,36,17],[43,20,36,20],[43,22,36,0],[44,0,37,0,"exports"],[44,2,37,0,"exports"],[44,9,37,7],[44,10,37,8,"NODE_FIELDS"],[44,21,37,0],[44,24,37,22,"NODE_FIELDS"],[44,35,37,0],[45,0,38,0],[45,6,38,6,"BUILDER_KEYS"],[45,18,38,18],[45,21,38,21],[45,23,38,0],[46,0,39,0,"exports"],[46,2,39,0,"exports"],[46,9,39,7],[46,10,39,8,"BUILDER_KEYS"],[46,22,39,0],[46,25,39,23,"BUILDER_KEYS"],[46,37,39,0],[47,0,40,0],[47,6,40,6,"DEPRECATED_KEYS"],[47,21,40,21],[47,24,40,24],[47,26,40,0],[48,0,41,0,"exports"],[48,2,41,0,"exports"],[48,9,41,7],[48,10,41,8,"DEPRECATED_KEYS"],[48,25,41,0],[48,28,41,26,"DEPRECATED_KEYS"],[48,43,41,0],[50,0,43,0],[50,11,43,9,"getType"],[50,18,43,0],[50,19,43,17,"val"],[50,22,43,0],[50,24,43,22],[51,0,44,2],[51,8,44,6,"Array"],[51,13,44,11],[51,14,44,12,"isArray"],[51,21,44,6],[51,22,44,20,"val"],[51,25,44,6],[51,26,44,2],[51,28,44,26],[52,0,45,4],[52,13,45,11],[52,20,45,4],[53,0,46,3],[53,5,44,2],[53,11,46,9],[53,15,46,13,"val"],[53,18,46,16],[53,23,46,21],[53,27,46,9],[53,29,46,27],[54,0,47,4],[54,13,47,11],[54,19,47,4],[55,0,48,3],[55,5,46,9],[55,11,48,9],[55,15,48,13,"val"],[55,18,48,16],[55,23,48,21,"undefined"],[55,32,48,9],[55,34,48,32],[56,0,49,4],[56,13,49,11],[56,24,49,4],[57,0,50,3],[57,5,48,9],[57,11,50,9],[58,0,51,4],[58,13,51,11],[58,20,51,18,"val"],[58,23,51,4],[59,0,52,3],[60,0,53,1],[62,0,55,0],[62,11,55,9,"validate"],[62,19,55,0],[62,20,55,18,"validate"],[62,28,55,0],[62,30,55,28],[63,0,56,2],[63,11,56,9],[64,0,57,4,"validate"],[64,6,57,4,"validate"],[64,14,57,12],[64,16,57,4,"validate"],[65,0,56,9],[65,5,56,2],[66,0,59,1],[68,0,61,0],[68,11,61,9,"typeIs"],[68,17,61,0],[68,18,61,16,"typeName"],[68,26,61,0],[68,28,61,26],[69,0,62,2],[69,11,62,9],[69,18,62,16,"typeName"],[69,26,62,9],[69,31,62,29],[69,39,62,9],[69,42,62,40,"assertNodeType"],[69,56,62,54],[69,57,62,55,"typeName"],[69,65,62,54],[69,66,62,9],[69,69,62,67,"assertNodeType"],[69,83,62,81],[69,89,62,67],[69,117,62,85,"typeName"],[69,125,62,67],[69,127,62,2],[70,0,63,1],[72,0,65,0],[72,11,65,9,"validateType"],[72,23,65,0],[72,24,65,22,"typeName"],[72,32,65,0],[72,34,65,32],[73,0,66,2],[73,11,66,9,"validate"],[73,19,66,17],[73,20,66,18,"typeIs"],[73,26,66,24],[73,27,66,25,"typeName"],[73,35,66,24],[73,36,66,17],[73,37,66,2],[74,0,67,1],[76,0,69,0],[76,11,69,9,"validateOptional"],[76,27,69,0],[76,28,69,26,"validate"],[76,36,69,0],[76,38,69,36],[77,0,70,2],[77,11,70,9],[78,0,71,4,"validate"],[78,6,71,4,"validate"],[78,14,71,12],[78,16,71,4,"validate"],[78,24,70,9],[79,0,72,4,"optional"],[79,6,72,4,"optional"],[79,14,72,12],[79,16,72,14],[80,0,70,9],[80,5,70,2],[81,0,74,1],[83,0,76,0],[83,11,76,9,"validateOptionalType"],[83,31,76,0],[83,32,76,30,"typeName"],[83,40,76,0],[83,42,76,40],[84,0,77,2],[84,11,77,9],[85,0,78,4,"validate"],[85,6,78,4,"validate"],[85,14,78,12],[85,16,78,14,"typeIs"],[85,22,78,20],[85,23,78,21,"typeName"],[85,31,78,20],[85,32,77,9],[86,0,79,4,"optional"],[86,6,79,4,"optional"],[86,14,79,12],[86,16,79,14],[87,0,77,9],[87,5,77,2],[88,0,81,1],[90,0,83,0],[90,11,83,9,"arrayOf"],[90,18,83,0],[90,19,83,17,"elementType"],[90,30,83,0],[90,32,83,30],[91,0,84,2],[91,11,84,9,"chain"],[91,16,84,14],[91,17,84,15,"assertValueType"],[91,32,84,30],[91,33,84,31],[91,40,84,30],[91,41,84,14],[91,43,84,41,"assertEach"],[91,53,84,51],[91,54,84,52,"elementType"],[91,65,84,51],[91,66,84,14],[91,67,84,2],[92,0,85,1],[94,0,87,0],[94,11,87,9,"arrayOfType"],[94,22,87,0],[94,23,87,21,"typeName"],[94,31,87,0],[94,33,87,31],[95,0,88,2],[95,11,88,9,"arrayOf"],[95,18,88,16],[95,19,88,17,"typeIs"],[95,25,88,23],[95,26,88,24,"typeName"],[95,34,88,23],[95,35,88,16],[95,36,88,2],[96,0,89,1],[98,0,91,0],[98,11,91,9,"validateArrayOfType"],[98,30,91,0],[98,31,91,29,"typeName"],[98,39,91,0],[98,41,91,39],[99,0,92,2],[99,11,92,9,"validate"],[99,19,92,17],[99,20,92,18,"arrayOfType"],[99,31,92,29],[99,32,92,30,"typeName"],[99,40,92,29],[99,41,92,17],[99,42,92,2],[100,0,93,1],[102,0,95,0],[102,11,95,9,"assertEach"],[102,21,95,0],[102,22,95,20,"callback"],[102,30,95,0],[102,32,95,30],[103,0,96,2],[103,13,96,11,"validator"],[103,22,96,2],[103,23,96,21,"node"],[103,27,96,2],[103,29,96,27,"key"],[103,32,96,2],[103,34,96,32,"val"],[103,37,96,2],[103,39,96,37],[104,0,97,4],[104,10,97,8],[104,11,97,9,"Array"],[104,16,97,14],[104,17,97,15,"isArray"],[104,24,97,9],[104,25,97,23,"val"],[104,28,97,9],[104,29,97,4],[104,31,97,29],[106,0,99,4],[106,11,99,9],[106,15,99,13,"i"],[106,16,99,14],[106,19,99,17],[106,20,99,4],[106,22,99,20,"i"],[106,23,99,21],[106,26,99,24,"val"],[106,29,99,27],[106,30,99,28,"length"],[106,36,99,4],[106,38,99,36,"i"],[106,39,99,37],[106,41,99,4],[106,43,99,41],[107,0,100,6,"callback"],[107,8,100,6,"callback"],[107,16,100,14],[107,17,100,15,"node"],[107,21,100,14],[107,23,100,24,"key"],[107,26,100,14],[107,35,100,31,"i"],[107,36,100,14],[107,44,100,37,"val"],[107,47,100,40],[107,48,100,41,"i"],[107,49,100,40],[107,50,100,14],[107,51,100,6],[108,0,101,5],[109,0,102,3],[111,0,104,2,"validator"],[111,4,104,2,"validator"],[111,13,104,11],[111,14,104,12,"each"],[111,18,104,2],[111,21,104,19,"callback"],[111,29,104,2],[112,0,105,2],[112,11,105,9,"validator"],[112,20,105,2],[113,0,106,1],[115,0,108,0],[115,11,108,9,"assertOneOf"],[115,22,108,0],[115,25,108,32],[116,0,108,32],[116,38,108,24,"values"],[116,44,108,32],[117,0,108,24,"values"],[117,6,108,24,"values"],[117,12,108,32],[118,0,108,32],[120,0,109,2],[120,13,109,11,"validate"],[120,21,109,2],[120,22,109,20,"node"],[120,26,109,2],[120,28,109,26,"key"],[120,31,109,2],[120,33,109,31,"val"],[120,36,109,2],[120,38,109,36],[121,0,110,4],[121,10,110,8,"values"],[121,16,110,14],[121,17,110,15,"indexOf"],[121,24,110,8],[121,25,110,23,"val"],[121,28,110,8],[121,32,110,30],[121,33,110,4],[121,35,110,33],[122,0,111,6],[122,14,111,12],[122,18,111,16,"TypeError"],[122,27,111,12],[122,42,111,38,"key"],[122,45,111,12],[122,82,111,73,"JSON"],[122,86,111,77],[122,87,111,78,"stringify"],[122,96,111,73],[122,97,111,88,"values"],[122,103,111,73],[122,104,111,12],[122,121,111,107,"JSON"],[122,125,111,111],[122,126,111,112,"stringify"],[122,135,111,107],[122,136,111,122,"val"],[122,139,111,107],[122,140,111,12],[122,141,111,6],[123,0,112,5],[124,0,113,3],[126,0,115,2,"validate"],[126,4,115,2,"validate"],[126,12,115,10],[126,13,115,11,"oneOf"],[126,18,115,2],[126,21,115,19,"values"],[126,27,115,2],[127,0,116,2],[127,11,116,9,"validate"],[127,19,116,2],[128,0,117,1],[130,0,119,0],[130,11,119,9,"assertNodeType"],[130,25,119,0],[130,28,119,34],[131,0,119,34],[131,39,119,27,"types"],[131,44,119,34],[132,0,119,27,"types"],[132,6,119,27,"types"],[132,11,119,34],[133,0,119,34],[135,0,120,2],[135,13,120,11,"validate"],[135,21,120,2],[135,22,120,20,"node"],[135,26,120,2],[135,28,120,26,"key"],[135,31,120,2],[135,33,120,31,"val"],[135,36,120,2],[135,38,120,36],[136,0,121,4],[136,10,121,8,"valid"],[136,15,121,13],[136,18,121,16],[136,23,121,4],[138,0,123,4],[138,27,123,23,"types"],[138,32,123,4],[138,192,123,30],[139,0,123,30],[141,0,123,30],[142,0,123,30],[143,0,123,30],[144,0,123,30],[145,0,123,30],[146,0,123,30],[147,0,123,30],[148,0,123,30],[150,0,123,30],[150,12,123,15,"type"],[150,17,123,30],[152,0,124,6],[152,12,124,10],[152,13,124,11],[152,16,124,14,"_is"],[152,19,124,17],[152,20,124,18,"default"],[152,27,124,10],[152,29,124,27,"type"],[152,34,124,10],[152,36,124,33,"val"],[152,39,124,10],[152,40,124,6],[152,42,124,39],[153,0,125,8,"valid"],[153,10,125,8,"valid"],[153,15,125,13],[153,18,125,16],[153,22,125,8],[154,0,126,8],[155,0,127,7],[156,0,128,5],[158,0,130,4],[158,10,130,8],[158,11,130,9,"valid"],[158,16,130,4],[158,18,130,16],[159,0,131,6],[159,14,131,12],[159,18,131,16,"TypeError"],[159,27,131,12],[159,28,131,26],[159,42,131,38,"key"],[159,45,131,26],[159,57,131,48,"node"],[159,61,131,52],[159,62,131,53,"type"],[159,66,131,26],[159,105,131,91,"JSON"],[159,109,131,95],[159,110,131,96,"stringify"],[159,119,131,91],[159,120,131,106,"types"],[159,125,131,91],[159,126,131,26],[159,157,131,137,"JSON"],[159,161,131,141],[159,162,131,142,"stringify"],[159,171,131,137],[159,172,131,152,"val"],[159,175,131,155],[159,179,131,159,"val"],[159,182,131,162],[159,183,131,163,"type"],[159,187,131,137],[159,188,131,26],[159,189,131,12],[159,190,131,6],[160,0,132,5],[161,0,133,3],[163,0,135,2,"validate"],[163,4,135,2,"validate"],[163,12,135,10],[163,13,135,11,"oneOfNodeTypes"],[163,27,135,2],[163,30,135,28,"types"],[163,35,135,2],[164,0,136,2],[164,11,136,9,"validate"],[164,19,136,2],[165,0,137,1],[167,0,139,0],[167,11,139,9,"assertNodeOrValueType"],[167,32,139,0],[167,35,139,41],[168,0,139,41],[168,39,139,34,"types"],[168,44,139,41],[169,0,139,34,"types"],[169,6,139,34,"types"],[169,11,139,41],[170,0,139,41],[172,0,140,2],[172,13,140,11,"validate"],[172,21,140,2],[172,22,140,20,"node"],[172,26,140,2],[172,28,140,26,"key"],[172,31,140,2],[172,33,140,31,"val"],[172,36,140,2],[172,38,140,36],[173,0,141,4],[173,10,141,8,"valid"],[173,15,141,13],[173,18,141,16],[173,23,141,4],[175,0,143,4],[175,28,143,23,"types"],[175,33,143,4],[175,200,143,30],[176,0,143,30],[178,0,143,30],[179,0,143,30],[180,0,143,30],[181,0,143,30],[182,0,143,30],[183,0,143,30],[184,0,143,30],[185,0,143,30],[187,0,143,30],[187,12,143,15,"type"],[187,18,143,30],[189,0,144,6],[189,12,144,10,"getType"],[189,19,144,17],[189,20,144,18,"val"],[189,23,144,17],[189,24,144,10],[189,29,144,27,"type"],[189,35,144,10],[189,39,144,35],[189,40,144,36],[189,43,144,39,"_is"],[189,46,144,42],[189,47,144,43,"default"],[189,54,144,35],[189,56,144,52,"type"],[189,62,144,35],[189,64,144,58,"val"],[189,67,144,35],[189,68,144,6],[189,70,144,64],[190,0,145,8,"valid"],[190,10,145,8,"valid"],[190,15,145,13],[190,18,145,16],[190,22,145,8],[191,0,146,8],[192,0,147,7],[193,0,148,5],[195,0,150,4],[195,10,150,8],[195,11,150,9,"valid"],[195,16,150,4],[195,18,150,16],[196,0,151,6],[196,14,151,12],[196,18,151,16,"TypeError"],[196,27,151,12],[196,28,151,26],[196,42,151,38,"key"],[196,45,151,26],[196,57,151,48,"node"],[196,61,151,52],[196,62,151,53,"type"],[196,66,151,26],[196,105,151,91,"JSON"],[196,109,151,95],[196,110,151,96,"stringify"],[196,119,151,91],[196,120,151,106,"types"],[196,125,151,91],[196,126,151,26],[196,157,151,137,"JSON"],[196,161,151,141],[196,162,151,142,"stringify"],[196,171,151,137],[196,172,151,152,"val"],[196,175,151,155],[196,179,151,159,"val"],[196,182,151,162],[196,183,151,163,"type"],[196,187,151,137],[196,188,151,26],[196,189,151,12],[196,190,151,6],[197,0,152,5],[198,0,153,3],[200,0,155,2,"validate"],[200,4,155,2,"validate"],[200,12,155,10],[200,13,155,11,"oneOfNodeOrValueTypes"],[200,34,155,2],[200,37,155,35,"types"],[200,42,155,2],[201,0,156,2],[201,11,156,9,"validate"],[201,19,156,2],[202,0,157,1],[204,0,159,0],[204,11,159,9,"assertValueType"],[204,26,159,0],[204,27,159,25,"type"],[204,31,159,0],[204,33,159,31],[205,0,160,2],[205,13,160,11,"validate"],[205,21,160,2],[205,22,160,20,"node"],[205,26,160,2],[205,28,160,26,"key"],[205,31,160,2],[205,33,160,31,"val"],[205,36,160,2],[205,38,160,36],[206,0,161,4],[206,10,161,10,"valid"],[206,15,161,15],[206,18,161,18,"getType"],[206,25,161,25],[206,26,161,26,"val"],[206,29,161,25],[206,30,161,18],[206,35,161,35,"type"],[206,39,161,4],[208,0,163,4],[208,10,163,8],[208,11,163,9,"valid"],[208,16,163,4],[208,18,163,16],[209,0,164,6],[209,14,164,12],[209,18,164,16,"TypeError"],[209,27,164,12],[209,42,164,38,"key"],[209,45,164,12],[209,71,164,62,"type"],[209,75,164,12],[209,92,164,78,"getType"],[209,99,164,85],[209,100,164,86,"val"],[209,103,164,85],[209,104,164,12],[209,105,164,6],[210,0,165,5],[211,0,166,3],[213,0,168,2,"validate"],[213,4,168,2,"validate"],[213,12,168,10],[213,13,168,11,"type"],[213,17,168,2],[213,20,168,18,"type"],[213,24,168,2],[214,0,169,2],[214,11,169,9,"validate"],[214,19,169,2],[215,0,170,1],[217,0,172,0],[217,11,172,9,"assertShape"],[217,22,172,0],[217,23,172,21,"shape"],[217,28,172,0],[217,30,172,28],[218,0,173,2],[218,13,173,11,"validate"],[218,21,173,2],[218,22,173,20,"node"],[218,26,173,2],[218,28,173,26,"key"],[218,31,173,2],[218,33,173,31,"val"],[218,36,173,2],[218,38,173,36],[219,0,174,4],[219,10,174,10,"errors"],[219,16,174,16],[219,19,174,19],[219,21,174,4],[221,0,176,4],[221,39,176,27,"Object"],[221,45,176,33],[221,46,176,34,"keys"],[221,50,176,27],[221,51,176,39,"shape"],[221,56,176,27],[221,57,176,4],[221,93,176,47],[222,0,176,9],[222,12,176,15,"property"],[222,20,176,23],[222,40,176,9],[224,0,177,6],[224,12,177,10],[225,0,178,8],[225,11,178,9],[225,14,178,12,"_validate"],[225,23,178,21],[225,24,178,22,"validateField"],[225,37,178,8],[225,39,178,37,"node"],[225,43,178,8],[225,45,178,43,"property"],[225,53,178,8],[225,55,178,53,"val"],[225,58,178,56],[225,59,178,57,"property"],[225,67,178,56],[225,68,178,8],[225,70,178,68,"shape"],[225,75,178,73],[225,76,178,74,"property"],[225,84,178,73],[225,85,178,8],[226,0,179,7],[226,9,177,6],[226,10,179,8],[226,17,179,15,"error"],[226,22,179,8],[226,24,179,22],[227,0,180,8],[227,14,180,12,"error"],[227,19,180,17],[227,31,180,29,"TypeError"],[227,40,180,8],[227,42,180,40],[228,0,181,10,"errors"],[228,12,181,10,"errors"],[228,18,181,16],[228,19,181,17,"push"],[228,23,181,10],[228,24,181,22,"error"],[228,29,181,27],[228,30,181,28,"message"],[228,37,181,10],[229,0,182,10],[230,0,183,9],[232,0,185,8],[232,16,185,14,"error"],[232,21,185,8],[233,0,186,7],[234,0,187,5],[236,0,189,4],[236,10,189,8,"errors"],[236,16,189,14],[236,17,189,15,"length"],[236,23,189,4],[236,25,189,23],[237,0,190,6],[237,14,190,12],[237,18,190,16,"TypeError"],[237,27,190,12],[237,42,190,38,"key"],[237,45,190,12],[237,57,190,48,"node"],[237,61,190,52],[237,62,190,53,"type"],[237,66,190,12],[237,108,190,94,"errors"],[237,114,190,100],[237,115,190,101,"join"],[237,119,190,94],[237,120,190,106],[237,124,190,94],[237,125,190,12],[237,126,190,6],[238,0,191,5],[239,0,192,3],[241,0,194,2,"validate"],[241,4,194,2,"validate"],[241,12,194,10],[241,13,194,11,"shapeOf"],[241,20,194,2],[241,23,194,21,"shape"],[241,28,194,2],[242,0,195,2],[242,11,195,9,"validate"],[242,19,195,2],[243,0,196,1],[245,0,198,0],[245,11,198,9,"chain"],[245,16,198,0],[245,19,198,23],[246,0,198,23],[246,39,198,18,"fns"],[246,42,198,23],[247,0,198,18,"fns"],[247,6,198,18,"fns"],[247,9,198,23],[248,0,198,23],[250,0,199,2],[250,13,199,11,"validate"],[250,21,199,2],[250,24,199,29],[251,0,200,4],[251,28,200,21,"fns"],[251,31,200,4],[251,198,200,26],[252,0,200,26],[254,0,200,26],[255,0,200,26],[256,0,200,26],[257,0,200,26],[258,0,200,26],[259,0,200,26],[260,0,200,26],[261,0,200,26],[263,0,200,26],[263,12,200,15,"fn"],[263,15,200,26],[265,0,201,6,"fn"],[265,8,201,6,"fn"],[265,11,201,8],[265,17,201,6],[266,0,202,5],[267,0,203,3],[269,0,205,2,"validate"],[269,4,205,2,"validate"],[269,12,205,10],[269,13,205,11,"chainOf"],[269,20,205,2],[269,23,205,21,"fns"],[269,26,205,2],[270,0,206,2],[270,11,206,9,"validate"],[270,19,206,2],[271,0,207,1],[273,0,209,0],[273,11,209,9,"defineType"],[273,21,209,0],[273,22,209,20,"type"],[273,26,209,0],[273,28,209,37],[274,0,209,37],[274,8,209,26,"opts"],[274,12,209,37],[274,83,209,33],[274,85,209,37],[275,0,210,2],[275,8,210,8,"inherits"],[275,16,210,16],[275,19,210,19,"opts"],[275,23,210,23],[275,24,210,24,"inherits"],[275,32,210,19],[275,36,210,36,"store"],[275,41,210,41],[275,42,210,42,"opts"],[275,46,210,46],[275,47,210,47,"inherits"],[275,55,210,41],[275,56,210,19],[275,60,210,60],[275,62,210,2],[276,0,211,2],[276,8,211,8,"fields"],[276,14,211,14],[276,17,211,17,"opts"],[276,21,211,21],[276,22,211,22,"fields"],[276,28,211,17],[276,32,211,32,"inherits"],[276,40,211,40],[276,41,211,41,"fields"],[276,47,211,17],[276,51,211,51],[276,53,211,2],[277,0,212,2],[277,8,212,8,"visitor"],[277,15,212,15],[277,18,212,18,"opts"],[277,22,212,22],[277,23,212,23,"visitor"],[277,30,212,18],[277,34,212,34,"inherits"],[277,42,212,42],[277,43,212,43,"visitor"],[277,50,212,18],[277,54,212,54],[277,56,212,2],[278,0,213,2],[278,8,213,8,"aliases"],[278,15,213,15],[278,18,213,18,"opts"],[278,22,213,22],[278,23,213,23,"aliases"],[278,30,213,18],[278,34,213,34,"inherits"],[278,42,213,42],[278,43,213,43,"aliases"],[278,50,213,18],[278,54,213,54],[278,56,213,2],[279,0,214,2],[279,8,214,8,"builder"],[279,15,214,15],[279,18,214,18,"opts"],[279,22,214,22],[279,23,214,23,"builder"],[279,30,214,18],[279,34,214,34,"inherits"],[279,42,214,42],[279,43,214,43,"builder"],[279,50,214,18],[279,54,214,54,"opts"],[279,58,214,58],[279,59,214,59,"visitor"],[279,66,214,18],[279,70,214,70],[279,72,214,2],[281,0,216,2],[281,8,216,6,"opts"],[281,12,216,10],[281,13,216,11,"deprecatedAlias"],[281,28,216,2],[281,30,216,28],[282,0,217,4,"DEPRECATED_KEYS"],[282,6,217,4,"DEPRECATED_KEYS"],[282,21,217,19],[282,22,217,20,"opts"],[282,26,217,24],[282,27,217,25,"deprecatedAlias"],[282,42,217,19],[282,43,217,4],[282,46,217,44,"type"],[282,50,217,4],[283,0,218,3],[285,0,220,2],[285,26,220,20,"visitor"],[285,33,220,27],[285,34,220,28,"concat"],[285,40,220,20],[285,41,220,35,"builder"],[285,48,220,20],[285,49,220,2],[285,216,220,45],[286,0,220,45],[288,0,220,45],[289,0,220,45],[290,0,220,45],[291,0,220,45],[292,0,220,45],[293,0,220,45],[294,0,220,45],[295,0,220,45],[297,0,220,45],[297,10,220,13,"key"],[297,15,220,45],[298,0,221,4,"fields"],[298,6,221,4,"fields"],[298,12,221,10],[298,13,221,11,"key"],[298,18,221,10],[298,19,221,4],[298,22,221,18,"fields"],[298,28,221,24],[298,29,221,25,"key"],[298,34,221,24],[298,35,221,18],[298,39,221,33],[298,41,221,4],[299,0,222,3],[301,0,224,2],[301,38,224,20,"Object"],[301,44,224,26],[301,45,224,27,"keys"],[301,49,224,20],[301,50,224,32,"fields"],[301,56,224,20],[301,57,224,2],[301,94,224,41],[302,0,224,7],[302,10,224,13,"key"],[302,15,224,16],[302,36,224,7],[303,0,225,4],[303,10,225,10,"field"],[303,15,225,15],[303,18,225,18,"fields"],[303,24,225,24],[303,25,225,25,"key"],[303,30,225,24],[303,31,225,4],[305,0,227,4],[305,10,227,8,"builder"],[305,17,227,15],[305,18,227,16,"indexOf"],[305,25,227,8],[305,26,227,24,"key"],[305,31,227,8],[305,37,227,33],[305,38,227,34],[305,39,227,4],[305,41,227,37],[306,0,228,6,"field"],[306,8,228,6,"field"],[306,13,228,11],[306,14,228,12,"optional"],[306,22,228,6],[306,25,228,23],[306,29,228,6],[307,0,229,5],[309,0,231,4],[309,10,231,8,"field"],[309,15,231,13],[309,16,231,14,"default"],[309,23,231,8],[309,28,231,26,"undefined"],[309,37,231,4],[309,39,231,37],[310,0,232,6,"field"],[310,8,232,6,"field"],[310,13,232,11],[310,14,232,12,"default"],[310,21,232,6],[310,24,232,22],[310,28,232,6],[311,0,233,5],[311,7,231,4],[311,13,233,11],[311,17,233,15],[311,18,233,16,"field"],[311,23,233,21],[311,24,233,22,"validate"],[311,32,233,11],[311,34,233,32],[312,0,234,6,"field"],[312,8,234,6,"field"],[312,13,234,11],[312,14,234,12,"validate"],[312,22,234,6],[312,25,234,23,"assertValueType"],[312,40,234,38],[312,41,234,39,"getType"],[312,48,234,46],[312,49,234,47,"field"],[312,54,234,52],[312,55,234,53,"default"],[312,62,234,46],[312,63,234,38],[312,64,234,6],[313,0,235,5],[314,0,236,3],[316,0,238,2,"VISITOR_KEYS"],[316,4,238,2,"VISITOR_KEYS"],[316,16,238,14],[316,17,238,15,"type"],[316,21,238,14],[316,22,238,2],[316,25,238,23,"opts"],[316,29,238,27],[316,30,238,28,"visitor"],[316,37,238,23],[316,40,238,38,"visitor"],[316,47,238,2],[317,0,239,2,"BUILDER_KEYS"],[317,4,239,2,"BUILDER_KEYS"],[317,16,239,14],[317,17,239,15,"type"],[317,21,239,14],[317,22,239,2],[317,25,239,23,"opts"],[317,29,239,27],[317,30,239,28,"builder"],[317,37,239,23],[317,40,239,38,"builder"],[317,47,239,2],[318,0,240,2,"NODE_FIELDS"],[318,4,240,2,"NODE_FIELDS"],[318,15,240,13],[318,16,240,14,"type"],[318,20,240,13],[318,21,240,2],[318,24,240,22,"opts"],[318,28,240,26],[318,29,240,27,"fields"],[318,35,240,22],[318,38,240,36,"fields"],[318,44,240,2],[319,0,241,2,"ALIAS_KEYS"],[319,4,241,2,"ALIAS_KEYS"],[319,14,241,12],[319,15,241,13,"type"],[319,19,241,12],[319,20,241,2],[319,23,241,21,"opts"],[319,27,241,25],[319,28,241,26,"aliases"],[319,35,241,21],[319,38,241,36,"aliases"],[319,45,241,2],[320,0,242,2,"aliases"],[320,4,242,2,"aliases"],[320,11,242,9],[320,12,242,10,"forEach"],[320,19,242,2],[320,20,242,18],[320,30,242,18,"alias"],[320,35,242,23],[320,37,242,27],[321,0,243,4,"FLIPPED_ALIAS_KEYS"],[321,6,243,4,"FLIPPED_ALIAS_KEYS"],[321,24,243,22],[321,25,243,23,"alias"],[321,30,243,22],[321,31,243,4],[321,34,243,32,"FLIPPED_ALIAS_KEYS"],[321,52,243,50],[321,53,243,51,"alias"],[321,58,243,50],[321,59,243,32],[321,63,243,61],[321,65,243,4],[322,0,244,4,"FLIPPED_ALIAS_KEYS"],[322,6,244,4,"FLIPPED_ALIAS_KEYS"],[322,24,244,22],[322,25,244,23,"alias"],[322,30,244,22],[322,31,244,4],[322,32,244,30,"push"],[322,36,244,4],[322,37,244,35,"type"],[322,41,244,4],[323,0,245,3],[323,5,242,2],[324,0,246,2,"store"],[324,4,246,2,"store"],[324,9,246,7],[324,10,246,8,"type"],[324,14,246,7],[324,15,246,2],[324,18,246,16,"opts"],[324,22,246,2],[325,0,247,1],[327,0,249,0],[327,6,249,6,"store"],[327,11,249,11],[327,14,249,14],[327,16,249,0]]},"type":"js/module"}]}