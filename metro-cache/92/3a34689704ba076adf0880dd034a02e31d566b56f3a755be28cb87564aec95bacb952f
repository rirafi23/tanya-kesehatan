{"dependencies":[{"name":"@babel/types","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.NullableTypeAnnotation = NullableTypeAnnotation;\n  exports.FunctionTypeAnnotation = FunctionTypeAnnotation;\n  exports.UpdateExpression = UpdateExpression;\n  exports.ObjectExpression = ObjectExpression;\n  exports.DoExpression = DoExpression;\n  exports.Binary = Binary;\n  exports.IntersectionTypeAnnotation = exports.UnionTypeAnnotation = UnionTypeAnnotation;\n  exports.TSAsExpression = TSAsExpression;\n  exports.TSTypeAssertion = TSTypeAssertion;\n  exports.TSIntersectionType = exports.TSUnionType = TSUnionType;\n  exports.BinaryExpression = BinaryExpression;\n  exports.SequenceExpression = SequenceExpression;\n  exports.AwaitExpression = exports.YieldExpression = YieldExpression;\n  exports.ClassExpression = ClassExpression;\n  exports.UnaryLike = UnaryLike;\n  exports.FunctionExpression = FunctionExpression;\n  exports.ArrowFunctionExpression = ArrowFunctionExpression;\n  exports.ConditionalExpression = ConditionalExpression;\n  exports.OptionalMemberExpression = OptionalMemberExpression;\n  exports.AssignmentExpression = AssignmentExpression;\n  exports.NewExpression = NewExpression;\n\n  var t = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], \"@babel/types\"));\n\n  function _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n\n    _getRequireWildcardCache = function _getRequireWildcardCache() {\n      return cache;\n    };\n\n    return cache;\n  }\n\n  function _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n      return obj;\n    }\n\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n      return {\n        default: obj\n      };\n    }\n\n    var cache = _getRequireWildcardCache();\n\n    if (cache && cache.has(obj)) {\n      return cache.get(obj);\n    }\n\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n    for (var key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n        if (desc && (desc.get || desc.set)) {\n          Object.defineProperty(newObj, key, desc);\n        } else {\n          newObj[key] = obj[key];\n        }\n      }\n    }\n\n    newObj.default = obj;\n\n    if (cache) {\n      cache.set(obj, newObj);\n    }\n\n    return newObj;\n  }\n\n  var PRECEDENCE = {\n    \"||\": 0,\n    \"&&\": 1,\n    \"|\": 2,\n    \"^\": 3,\n    \"&\": 4,\n    \"==\": 5,\n    \"===\": 5,\n    \"!=\": 5,\n    \"!==\": 5,\n    \"<\": 6,\n    \">\": 6,\n    \"<=\": 6,\n    \">=\": 6,\n    in: 6,\n    instanceof: 6,\n    \">>\": 7,\n    \"<<\": 7,\n    \">>>\": 7,\n    \"+\": 8,\n    \"-\": 8,\n    \"*\": 9,\n    \"/\": 9,\n    \"%\": 9,\n    \"**\": 10\n  };\n\n  var isClassExtendsClause = function isClassExtendsClause(node, parent) {\n    return (t.isClassDeclaration(parent) || t.isClassExpression(parent)) && parent.superClass === node;\n  };\n\n  function NullableTypeAnnotation(node, parent) {\n    return t.isArrayTypeAnnotation(parent);\n  }\n\n  function FunctionTypeAnnotation(node, parent, printStack) {\n    return t.isUnionTypeAnnotation(parent) || t.isIntersectionTypeAnnotation(parent) || t.isArrayTypeAnnotation(parent) || t.isTypeAnnotation(parent) && t.isArrowFunctionExpression(printStack[printStack.length - 3]);\n  }\n\n  function UpdateExpression(node, parent) {\n    return t.isMemberExpression(parent, {\n      object: node\n    }) || t.isCallExpression(parent, {\n      callee: node\n    }) || t.isNewExpression(parent, {\n      callee: node\n    }) || isClassExtendsClause(node, parent);\n  }\n\n  function ObjectExpression(node, parent, printStack) {\n    return isFirstInStatement(printStack, {\n      considerArrow: true\n    });\n  }\n\n  function DoExpression(node, parent, printStack) {\n    return isFirstInStatement(printStack);\n  }\n\n  function Binary(node, parent) {\n    if (node.operator === \"**\" && t.isBinaryExpression(parent, {\n      operator: \"**\"\n    })) {\n      return parent.left === node;\n    }\n\n    if (isClassExtendsClause(node, parent)) {\n      return true;\n    }\n\n    if ((t.isCallExpression(parent) || t.isNewExpression(parent)) && parent.callee === node || t.isUnaryLike(parent) || t.isMemberExpression(parent) && parent.object === node || t.isAwaitExpression(parent)) {\n      return true;\n    }\n\n    if (t.isBinary(parent)) {\n      var parentOp = parent.operator;\n      var parentPos = PRECEDENCE[parentOp];\n      var nodeOp = node.operator;\n      var nodePos = PRECEDENCE[nodeOp];\n\n      if (parentPos === nodePos && parent.right === node && !t.isLogicalExpression(parent) || parentPos > nodePos) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  function UnionTypeAnnotation(node, parent) {\n    return t.isArrayTypeAnnotation(parent) || t.isNullableTypeAnnotation(parent) || t.isIntersectionTypeAnnotation(parent) || t.isUnionTypeAnnotation(parent);\n  }\n\n  function TSAsExpression() {\n    return true;\n  }\n\n  function TSTypeAssertion() {\n    return true;\n  }\n\n  function TSUnionType(node, parent) {\n    return t.isTSArrayType(parent) || t.isTSOptionalType(parent) || t.isTSIntersectionType(parent) || t.isTSUnionType(parent) || t.isTSRestType(parent);\n  }\n\n  function BinaryExpression(node, parent) {\n    return node.operator === \"in\" && (t.isVariableDeclarator(parent) || t.isFor(parent));\n  }\n\n  function SequenceExpression(node, parent) {\n    if (t.isForStatement(parent) || t.isThrowStatement(parent) || t.isReturnStatement(parent) || t.isIfStatement(parent) && parent.test === node || t.isWhileStatement(parent) && parent.test === node || t.isForInStatement(parent) && parent.right === node || t.isSwitchStatement(parent) && parent.discriminant === node || t.isExpressionStatement(parent) && parent.expression === node) {\n      return false;\n    }\n\n    return true;\n  }\n\n  function YieldExpression(node, parent) {\n    return t.isBinary(parent) || t.isUnaryLike(parent) || t.isCallExpression(parent) || t.isMemberExpression(parent) || t.isNewExpression(parent) || t.isAwaitExpression(parent) && t.isYieldExpression(node) || t.isConditionalExpression(parent) && node === parent.test || isClassExtendsClause(node, parent);\n  }\n\n  function ClassExpression(node, parent, printStack) {\n    return isFirstInStatement(printStack, {\n      considerDefaultExports: true\n    });\n  }\n\n  function UnaryLike(node, parent) {\n    return t.isMemberExpression(parent, {\n      object: node\n    }) || t.isCallExpression(parent, {\n      callee: node\n    }) || t.isNewExpression(parent, {\n      callee: node\n    }) || t.isBinaryExpression(parent, {\n      operator: \"**\",\n      left: node\n    }) || isClassExtendsClause(node, parent);\n  }\n\n  function FunctionExpression(node, parent, printStack) {\n    return isFirstInStatement(printStack, {\n      considerDefaultExports: true\n    });\n  }\n\n  function ArrowFunctionExpression(node, parent) {\n    return t.isExportDeclaration(parent) || ConditionalExpression(node, parent);\n  }\n\n  function ConditionalExpression(node, parent) {\n    if (t.isUnaryLike(parent) || t.isBinary(parent) || t.isConditionalExpression(parent, {\n      test: node\n    }) || t.isAwaitExpression(parent) || t.isOptionalMemberExpression(parent) || t.isTaggedTemplateExpression(parent) || t.isTSTypeAssertion(parent) || t.isTSAsExpression(parent)) {\n      return true;\n    }\n\n    return UnaryLike(node, parent);\n  }\n\n  function OptionalMemberExpression(node, parent) {\n    return t.isCallExpression(parent) || t.isMemberExpression(parent);\n  }\n\n  function AssignmentExpression(node) {\n    if (t.isObjectPattern(node.left)) {\n      return true;\n    } else {\n      return ConditionalExpression.apply(void 0, arguments);\n    }\n  }\n\n  function NewExpression(node, parent) {\n    return isClassExtendsClause(node, parent);\n  }\n\n  function isFirstInStatement(printStack) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$considerArrow = _ref.considerArrow,\n        considerArrow = _ref$considerArrow === void 0 ? false : _ref$considerArrow,\n        _ref$considerDefaultE = _ref.considerDefaultExports,\n        considerDefaultExports = _ref$considerDefaultE === void 0 ? false : _ref$considerDefaultE;\n\n    var i = printStack.length - 1;\n    var node = printStack[i];\n    i--;\n    var parent = printStack[i];\n\n    while (i > 0) {\n      if (t.isExpressionStatement(parent, {\n        expression: node\n      }) || t.isTaggedTemplateExpression(parent) || considerDefaultExports && t.isExportDefaultDeclaration(parent, {\n        declaration: node\n      }) || considerArrow && t.isArrowFunctionExpression(parent, {\n        body: node\n      })) {\n        return true;\n      }\n\n      if (t.isCallExpression(parent, {\n        callee: node\n      }) || t.isSequenceExpression(parent) && parent.expressions[0] === node || t.isMemberExpression(parent, {\n        object: node\n      }) || t.isConditional(parent, {\n        test: node\n      }) || t.isBinary(parent, {\n        left: node\n      }) || t.isAssignmentExpression(parent, {\n        left: node\n      })) {\n        node = parent;\n        i--;\n        parent = printStack[i];\n      } else {\n        return false;\n      }\n    }\n\n    return false;\n  }\n});","map":[[2,0,1,0],[4,0,3,0,"Object"],[4,2,3,0,"Object"],[4,8,3,6],[4,9,3,7,"defineProperty"],[4,23,3,0],[4,24,3,22,"exports"],[4,31,3,0],[4,33,3,31],[4,45,3,0],[4,47,3,45],[5,0,4,2,"value"],[5,4,4,2,"value"],[5,9,4,7],[5,11,4,9],[6,0,3,45],[6,3,3,0],[7,0,6,0,"exports"],[7,2,6,0,"exports"],[7,9,6,7],[7,10,6,8,"NullableTypeAnnotation"],[7,32,6,0],[7,35,6,33,"NullableTypeAnnotation"],[7,57,6,0],[8,0,7,0,"exports"],[8,2,7,0,"exports"],[8,9,7,7],[8,10,7,8,"FunctionTypeAnnotation"],[8,32,7,0],[8,35,7,33,"FunctionTypeAnnotation"],[8,57,7,0],[9,0,8,0,"exports"],[9,2,8,0,"exports"],[9,9,8,7],[9,10,8,8,"UpdateExpression"],[9,26,8,0],[9,29,8,27,"UpdateExpression"],[9,45,8,0],[10,0,9,0,"exports"],[10,2,9,0,"exports"],[10,9,9,7],[10,10,9,8,"ObjectExpression"],[10,26,9,0],[10,29,9,27,"ObjectExpression"],[10,45,9,0],[11,0,10,0,"exports"],[11,2,10,0,"exports"],[11,9,10,7],[11,10,10,8,"DoExpression"],[11,22,10,0],[11,25,10,23,"DoExpression"],[11,37,10,0],[12,0,11,0,"exports"],[12,2,11,0,"exports"],[12,9,11,7],[12,10,11,8,"Binary"],[12,16,11,0],[12,19,11,17,"Binary"],[12,25,11,0],[13,0,12,0,"exports"],[13,2,12,0,"exports"],[13,9,12,7],[13,10,12,8,"IntersectionTypeAnnotation"],[13,36,12,0],[13,39,12,37,"exports"],[13,46,12,44],[13,47,12,45,"UnionTypeAnnotation"],[13,66,12,37],[13,69,12,67,"UnionTypeAnnotation"],[13,88,12,0],[14,0,13,0,"exports"],[14,2,13,0,"exports"],[14,9,13,7],[14,10,13,8,"TSAsExpression"],[14,24,13,0],[14,27,13,25,"TSAsExpression"],[14,41,13,0],[15,0,14,0,"exports"],[15,2,14,0,"exports"],[15,9,14,7],[15,10,14,8,"TSTypeAssertion"],[15,25,14,0],[15,28,14,26,"TSTypeAssertion"],[15,43,14,0],[16,0,15,0,"exports"],[16,2,15,0,"exports"],[16,9,15,7],[16,10,15,8,"TSIntersectionType"],[16,28,15,0],[16,31,15,29,"exports"],[16,38,15,36],[16,39,15,37,"TSUnionType"],[16,50,15,29],[16,53,15,51,"TSUnionType"],[16,64,15,0],[17,0,16,0,"exports"],[17,2,16,0,"exports"],[17,9,16,7],[17,10,16,8,"BinaryExpression"],[17,26,16,0],[17,29,16,27,"BinaryExpression"],[17,45,16,0],[18,0,17,0,"exports"],[18,2,17,0,"exports"],[18,9,17,7],[18,10,17,8,"SequenceExpression"],[18,28,17,0],[18,31,17,29,"SequenceExpression"],[18,49,17,0],[19,0,18,0,"exports"],[19,2,18,0,"exports"],[19,9,18,7],[19,10,18,8,"AwaitExpression"],[19,25,18,0],[19,28,18,26,"exports"],[19,35,18,33],[19,36,18,34,"YieldExpression"],[19,51,18,26],[19,54,18,52,"YieldExpression"],[19,69,18,0],[20,0,19,0,"exports"],[20,2,19,0,"exports"],[20,9,19,7],[20,10,19,8,"ClassExpression"],[20,25,19,0],[20,28,19,26,"ClassExpression"],[20,43,19,0],[21,0,20,0,"exports"],[21,2,20,0,"exports"],[21,9,20,7],[21,10,20,8,"UnaryLike"],[21,19,20,0],[21,22,20,20,"UnaryLike"],[21,31,20,0],[22,0,21,0,"exports"],[22,2,21,0,"exports"],[22,9,21,7],[22,10,21,8,"FunctionExpression"],[22,28,21,0],[22,31,21,29,"FunctionExpression"],[22,49,21,0],[23,0,22,0,"exports"],[23,2,22,0,"exports"],[23,9,22,7],[23,10,22,8,"ArrowFunctionExpression"],[23,33,22,0],[23,36,22,34,"ArrowFunctionExpression"],[23,59,22,0],[24,0,23,0,"exports"],[24,2,23,0,"exports"],[24,9,23,7],[24,10,23,8,"ConditionalExpression"],[24,31,23,0],[24,34,23,32,"ConditionalExpression"],[24,55,23,0],[25,0,24,0,"exports"],[25,2,24,0,"exports"],[25,9,24,7],[25,10,24,8,"OptionalMemberExpression"],[25,34,24,0],[25,37,24,35,"OptionalMemberExpression"],[25,61,24,0],[26,0,25,0,"exports"],[26,2,25,0,"exports"],[26,9,25,7],[26,10,25,8,"AssignmentExpression"],[26,30,25,0],[26,33,25,31,"AssignmentExpression"],[26,53,25,0],[27,0,26,0,"exports"],[27,2,26,0,"exports"],[27,9,26,7],[27,10,26,8,"NewExpression"],[27,23,26,0],[27,26,26,24,"NewExpression"],[27,39,26,0],[29,0,28,0],[29,6,28,4,"t"],[29,7,28,5],[29,10,28,8,"_interopRequireWildcard"],[29,33,28,31],[29,34,28,32,"require"],[29,45,28,39],[29,80,28,31],[29,81,28,0],[31,0,30,0],[31,11,30,9,"_getRequireWildcardCache"],[31,35,30,0],[31,38,30,36],[32,0,30,38],[32,8,30,42],[32,15,30,49,"WeakMap"],[32,22,30,42],[32,27,30,61],[32,37,30,38],[32,39,30,73],[32,46,30,80],[32,50,30,73],[33,0,30,86],[33,8,30,90,"cache"],[33,13,30,95],[33,16,30,98],[33,20,30,102,"WeakMap"],[33,27,30,98],[33,29,30,86],[35,0,30,113,"_getRequireWildcardCache"],[35,4,30,113,"_getRequireWildcardCache"],[35,28,30,137],[35,31,30,140],[35,67,30,152],[36,0,30,154],[36,13,30,161,"cache"],[36,18,30,154],[37,0,30,169],[37,5,30,113],[39,0,30,171],[39,11,30,178,"cache"],[39,16,30,171],[40,0,30,186],[42,0,32,0],[42,11,32,9,"_interopRequireWildcard"],[42,34,32,0],[42,35,32,33,"obj"],[42,38,32,0],[42,40,32,38],[43,0,32,40],[43,8,32,44,"obj"],[43,11,32,47],[43,15,32,51,"obj"],[43,18,32,54],[43,19,32,55,"__esModule"],[43,29,32,40],[43,31,32,67],[44,0,32,69],[44,13,32,76,"obj"],[44,16,32,69],[45,0,32,82],[47,0,32,83],[47,8,32,87,"obj"],[47,11,32,90],[47,16,32,95],[47,20,32,87],[47,24,32,103],[47,31,32,110,"obj"],[47,34,32,103],[47,39,32,118],[47,47,32,103],[47,51,32,130],[47,58,32,137,"obj"],[47,61,32,130],[47,66,32,145],[47,76,32,83],[47,78,32,157],[48,0,32,159],[48,13,32,166],[49,0,32,168,"default"],[49,8,32,168,"default"],[49,15,32,175],[49,17,32,177,"obj"],[50,0,32,166],[50,7,32,159],[51,0,32,185],[53,0,32,186],[53,8,32,190,"cache"],[53,13,32,195],[53,16,32,198,"_getRequireWildcardCache"],[53,40,32,222],[53,42,32,186],[55,0,32,226],[55,8,32,230,"cache"],[55,13,32,235],[55,17,32,239,"cache"],[55,22,32,244],[55,23,32,245,"has"],[55,26,32,239],[55,27,32,249,"obj"],[55,30,32,239],[55,31,32,226],[55,33,32,255],[56,0,32,257],[56,13,32,264,"cache"],[56,18,32,269],[56,19,32,270,"get"],[56,22,32,264],[56,23,32,274,"obj"],[56,26,32,264],[56,27,32,257],[57,0,32,281],[59,0,32,282],[59,8,32,286,"newObj"],[59,14,32,292],[59,17,32,295],[59,19,32,282],[60,0,32,299],[60,8,32,303,"hasPropertyDescriptor"],[60,29,32,324],[60,32,32,327,"Object"],[60,38,32,333],[60,39,32,334,"defineProperty"],[60,53,32,327],[60,57,32,352,"Object"],[60,63,32,358],[60,64,32,359,"getOwnPropertyDescriptor"],[60,88,32,299],[62,0,32,385],[62,9,32,390],[62,13,32,394,"key"],[62,16,32,385],[62,20,32,401,"obj"],[62,23,32,385],[62,25,32,406],[63,0,32,408],[63,10,32,412,"Object"],[63,16,32,418],[63,17,32,419,"prototype"],[63,26,32,412],[63,27,32,429,"hasOwnProperty"],[63,41,32,412],[63,42,32,444,"call"],[63,46,32,412],[63,47,32,449,"obj"],[63,50,32,412],[63,52,32,454,"key"],[63,55,32,412],[63,56,32,408],[63,58,32,460],[64,0,32,462],[64,12,32,466,"desc"],[64,16,32,470],[64,19,32,473,"hasPropertyDescriptor"],[64,40,32,494],[64,43,32,497,"Object"],[64,49,32,503],[64,50,32,504,"getOwnPropertyDescriptor"],[64,74,32,497],[64,75,32,529,"obj"],[64,78,32,497],[64,80,32,534,"key"],[64,83,32,497],[64,84,32,494],[64,87,32,541],[64,91,32,462],[66,0,32,547],[66,12,32,551,"desc"],[66,16,32,555],[66,21,32,560,"desc"],[66,25,32,564],[66,26,32,565,"get"],[66,29,32,560],[66,33,32,572,"desc"],[66,37,32,576],[66,38,32,577,"set"],[66,41,32,555],[66,42,32,547],[66,44,32,583],[67,0,32,585,"Object"],[67,10,32,585,"Object"],[67,16,32,591],[67,17,32,592,"defineProperty"],[67,31,32,585],[67,32,32,607,"newObj"],[67,38,32,585],[67,40,32,615,"key"],[67,43,32,585],[67,45,32,620,"desc"],[67,49,32,585],[68,0,32,628],[68,9,32,547],[68,15,32,634],[69,0,32,636,"newObj"],[69,10,32,636,"newObj"],[69,16,32,642],[69,17,32,643,"key"],[69,20,32,642],[69,21,32,636],[69,24,32,650,"obj"],[69,27,32,653],[69,28,32,654,"key"],[69,31,32,653],[69,32,32,636],[70,0,32,661],[71,0,32,663],[72,0,32,665],[74,0,32,666,"newObj"],[74,4,32,666,"newObj"],[74,10,32,672],[74,11,32,673,"default"],[74,18,32,666],[74,21,32,683,"obj"],[74,24,32,666],[76,0,32,688],[76,8,32,692,"cache"],[76,13,32,688],[76,15,32,699],[77,0,32,701,"cache"],[77,6,32,701,"cache"],[77,11,32,706],[77,12,32,707,"set"],[77,15,32,701],[77,16,32,711,"obj"],[77,19,32,701],[77,21,32,716,"newObj"],[77,27,32,701],[78,0,32,726],[80,0,32,727],[80,11,32,734,"newObj"],[80,17,32,727],[81,0,32,743],[83,0,34,0],[83,6,34,6,"PRECEDENCE"],[83,16,34,16],[83,19,34,19],[84,0,35,2],[84,10,35,8],[84,11,34,19],[85,0,36,2],[85,10,36,8],[85,11,34,19],[86,0,37,2],[86,9,37,7],[86,10,34,19],[87,0,38,2],[87,9,38,7],[87,10,34,19],[88,0,39,2],[88,9,39,7],[88,10,34,19],[89,0,40,2],[89,10,40,8],[89,11,34,19],[90,0,41,2],[90,11,41,9],[90,12,34,19],[91,0,42,2],[91,10,42,8],[91,11,34,19],[92,0,43,2],[92,11,43,9],[92,12,34,19],[93,0,44,2],[93,9,44,7],[93,10,34,19],[94,0,45,2],[94,9,45,7],[94,10,34,19],[95,0,46,2],[95,10,46,8],[95,11,34,19],[96,0,47,2],[96,10,47,8],[96,11,34,19],[97,0,48,2,"in"],[97,4,48,2,"in"],[97,6,48,4],[97,8,48,6],[97,9,34,19],[98,0,49,2,"instanceof"],[98,4,49,2,"instanceof"],[98,14,49,12],[98,16,49,14],[98,17,34,19],[99,0,50,2],[99,10,50,8],[99,11,34,19],[100,0,51,2],[100,10,51,8],[100,11,34,19],[101,0,52,2],[101,11,52,9],[101,12,34,19],[102,0,53,2],[102,9,53,7],[102,10,34,19],[103,0,54,2],[103,9,54,7],[103,10,34,19],[104,0,55,2],[104,9,55,7],[104,10,34,19],[105,0,56,2],[105,9,56,7],[105,10,34,19],[106,0,57,2],[106,9,57,7],[106,10,34,19],[107,0,58,2],[107,10,58,8],[108,0,34,19],[108,3,34,0],[110,0,61,0],[110,6,61,6,"isClassExtendsClause"],[110,26,61,26],[110,29,61,29],[110,38,61,6,"isClassExtendsClause"],[110,58,61,29],[110,59,61,30,"node"],[110,63,61,29],[110,65,61,36,"parent"],[110,71,61,29],[111,0,61,29],[111,11,61,47],[111,12,61,48,"t"],[111,13,61,49],[111,14,61,50,"isClassDeclaration"],[111,32,61,48],[111,33,61,69,"parent"],[111,39,61,48],[111,44,61,80,"t"],[111,45,61,81],[111,46,61,82,"isClassExpression"],[111,63,61,80],[111,64,61,100,"parent"],[111,70,61,80],[111,71,61,47],[111,76,61,112,"parent"],[111,82,61,118],[111,83,61,119,"superClass"],[111,93,61,112],[111,98,61,134,"node"],[111,102,61,29],[112,0,61,29],[112,3,61,0],[114,0,63,0],[114,11,63,9,"NullableTypeAnnotation"],[114,33,63,0],[114,34,63,32,"node"],[114,38,63,0],[114,40,63,38,"parent"],[114,46,63,0],[114,48,63,46],[115,0,64,2],[115,11,64,9,"t"],[115,12,64,10],[115,13,64,11,"isArrayTypeAnnotation"],[115,34,64,9],[115,35,64,33,"parent"],[115,41,64,9],[115,42,64,2],[116,0,65,1],[118,0,67,0],[118,11,67,9,"FunctionTypeAnnotation"],[118,33,67,0],[118,34,67,32,"node"],[118,38,67,0],[118,40,67,38,"parent"],[118,46,67,0],[118,48,67,46,"printStack"],[118,58,67,0],[118,60,67,58],[119,0,68,2],[119,11,68,9,"t"],[119,12,68,10],[119,13,68,11,"isUnionTypeAnnotation"],[119,34,68,9],[119,35,68,33,"parent"],[119,41,68,9],[119,46,68,44,"t"],[119,47,68,45],[119,48,68,46,"isIntersectionTypeAnnotation"],[119,76,68,44],[119,77,68,75,"parent"],[119,83,68,44],[119,84,68,9],[119,88,68,86,"t"],[119,89,68,87],[119,90,68,88,"isArrayTypeAnnotation"],[119,111,68,86],[119,112,68,110,"parent"],[119,118,68,86],[119,119,68,9],[119,123,68,121,"t"],[119,124,68,122],[119,125,68,123,"isTypeAnnotation"],[119,141,68,121],[119,142,68,140,"parent"],[119,148,68,121],[119,153,68,151,"t"],[119,154,68,152],[119,155,68,153,"isArrowFunctionExpression"],[119,180,68,151],[119,181,68,179,"printStack"],[119,191,68,189],[119,192,68,190,"printStack"],[119,202,68,200],[119,203,68,201,"length"],[119,209,68,190],[119,212,68,210],[119,213,68,189],[119,214,68,151],[119,215,68,2],[120,0,69,1],[122,0,71,0],[122,11,71,9,"UpdateExpression"],[122,27,71,0],[122,28,71,26,"node"],[122,32,71,0],[122,34,71,32,"parent"],[122,40,71,0],[122,42,71,40],[123,0,72,2],[123,11,72,9,"t"],[123,12,72,10],[123,13,72,11,"isMemberExpression"],[123,31,72,9],[123,32,72,30,"parent"],[123,38,72,9],[123,40,72,38],[124,0,73,4,"object"],[124,6,73,4,"object"],[124,12,73,10],[124,14,73,12,"node"],[125,0,72,38],[125,5,72,9],[125,10,74,8,"t"],[125,11,74,9],[125,12,74,10,"isCallExpression"],[125,28,74,8],[125,29,74,27,"parent"],[125,35,74,8],[125,37,74,35],[126,0,75,4,"callee"],[126,6,75,4,"callee"],[126,12,75,10],[126,14,75,12,"node"],[127,0,74,35],[127,5,74,8],[127,6,72,9],[127,10,76,8,"t"],[127,11,76,9],[127,12,76,10,"isNewExpression"],[127,27,76,8],[127,28,76,26,"parent"],[127,34,76,8],[127,36,76,34],[128,0,77,4,"callee"],[128,6,77,4,"callee"],[128,12,77,10],[128,14,77,12,"node"],[129,0,76,34],[129,5,76,8],[129,6,72,9],[129,10,78,8,"isClassExtendsClause"],[129,30,78,28],[129,31,78,29,"node"],[129,35,78,28],[129,37,78,35,"parent"],[129,43,78,28],[129,44,72,2],[130,0,79,1],[132,0,81,0],[132,11,81,9,"ObjectExpression"],[132,27,81,0],[132,28,81,26,"node"],[132,32,81,0],[132,34,81,32,"parent"],[132,40,81,0],[132,42,81,40,"printStack"],[132,52,81,0],[132,54,81,52],[133,0,82,2],[133,11,82,9,"isFirstInStatement"],[133,29,82,27],[133,30,82,28,"printStack"],[133,40,82,27],[133,42,82,40],[134,0,83,4,"considerArrow"],[134,6,83,4,"considerArrow"],[134,19,83,17],[134,21,83,19],[135,0,82,40],[135,5,82,27],[135,6,82,2],[136,0,85,1],[138,0,87,0],[138,11,87,9,"DoExpression"],[138,23,87,0],[138,24,87,22,"node"],[138,28,87,0],[138,30,87,28,"parent"],[138,36,87,0],[138,38,87,36,"printStack"],[138,48,87,0],[138,50,87,48],[139,0,88,2],[139,11,88,9,"isFirstInStatement"],[139,29,88,27],[139,30,88,28,"printStack"],[139,40,88,27],[139,41,88,2],[140,0,89,1],[142,0,91,0],[142,11,91,9,"Binary"],[142,17,91,0],[142,18,91,16,"node"],[142,22,91,0],[142,24,91,22,"parent"],[142,30,91,0],[142,32,91,30],[143,0,92,2],[143,8,92,6,"node"],[143,12,92,10],[143,13,92,11,"operator"],[143,21,92,6],[143,26,92,24],[143,30,92,6],[143,34,92,32,"t"],[143,35,92,33],[143,36,92,34,"isBinaryExpression"],[143,54,92,32],[143,55,92,53,"parent"],[143,61,92,32],[143,63,92,61],[144,0,93,4,"operator"],[144,6,93,4,"operator"],[144,14,93,12],[144,16,93,14],[145,0,92,61],[145,5,92,32],[145,6,92,2],[145,8,94,6],[146,0,95,4],[146,13,95,11,"parent"],[146,19,95,17],[146,20,95,18,"left"],[146,24,95,11],[146,29,95,27,"node"],[146,33,95,4],[147,0,96,3],[149,0,98,2],[149,8,98,6,"isClassExtendsClause"],[149,28,98,26],[149,29,98,27,"node"],[149,33,98,26],[149,35,98,33,"parent"],[149,41,98,26],[149,42,98,2],[149,44,98,42],[150,0,99,4],[150,13,99,11],[150,17,99,4],[151,0,100,3],[153,0,102,2],[153,8,102,6],[153,9,102,7,"t"],[153,10,102,8],[153,11,102,9,"isCallExpression"],[153,27,102,7],[153,28,102,26,"parent"],[153,34,102,7],[153,39,102,37,"t"],[153,40,102,38],[153,41,102,39,"isNewExpression"],[153,56,102,37],[153,57,102,55,"parent"],[153,63,102,37],[153,64,102,6],[153,69,102,67,"parent"],[153,75,102,73],[153,76,102,74,"callee"],[153,82,102,67],[153,87,102,85,"node"],[153,91,102,6],[153,95,102,93,"t"],[153,96,102,94],[153,97,102,95,"isUnaryLike"],[153,108,102,93],[153,109,102,107,"parent"],[153,115,102,93],[153,116,102,6],[153,120,102,118,"t"],[153,121,102,119],[153,122,102,120,"isMemberExpression"],[153,140,102,118],[153,141,102,139,"parent"],[153,147,102,118],[153,152,102,150,"parent"],[153,158,102,156],[153,159,102,157,"object"],[153,165,102,150],[153,170,102,168,"node"],[153,174,102,6],[153,178,102,176,"t"],[153,179,102,177],[153,180,102,178,"isAwaitExpression"],[153,197,102,176],[153,198,102,196,"parent"],[153,204,102,176],[153,205,102,2],[153,207,102,205],[154,0,103,4],[154,13,103,11],[154,17,103,4],[155,0,104,3],[157,0,106,2],[157,8,106,6,"t"],[157,9,106,7],[157,10,106,8,"isBinary"],[157,18,106,6],[157,19,106,17,"parent"],[157,25,106,6],[157,26,106,2],[157,28,106,26],[158,0,107,4],[158,10,107,10,"parentOp"],[158,18,107,18],[158,21,107,21,"parent"],[158,27,107,27],[158,28,107,28,"operator"],[158,36,107,4],[159,0,108,4],[159,10,108,10,"parentPos"],[159,19,108,19],[159,22,108,22,"PRECEDENCE"],[159,32,108,32],[159,33,108,33,"parentOp"],[159,41,108,32],[159,42,108,4],[160,0,109,4],[160,10,109,10,"nodeOp"],[160,16,109,16],[160,19,109,19,"node"],[160,23,109,23],[160,24,109,24,"operator"],[160,32,109,4],[161,0,110,4],[161,10,110,10,"nodePos"],[161,17,110,17],[161,20,110,20,"PRECEDENCE"],[161,30,110,30],[161,31,110,31,"nodeOp"],[161,37,110,30],[161,38,110,4],[163,0,112,4],[163,10,112,8,"parentPos"],[163,19,112,17],[163,24,112,22,"nodePos"],[163,31,112,8],[163,35,112,33,"parent"],[163,41,112,39],[163,42,112,40,"right"],[163,47,112,33],[163,52,112,50,"node"],[163,56,112,8],[163,60,112,58],[163,61,112,59,"t"],[163,62,112,60],[163,63,112,61,"isLogicalExpression"],[163,82,112,59],[163,83,112,81,"parent"],[163,89,112,59],[163,90,112,8],[163,94,112,92,"parentPos"],[163,103,112,101],[163,106,112,104,"nodePos"],[163,113,112,4],[163,115,112,113],[164,0,113,6],[164,15,113,13],[164,19,113,6],[165,0,114,5],[166,0,115,3],[168,0,117,2],[168,11,117,9],[168,16,117,2],[169,0,118,1],[171,0,120,0],[171,11,120,9,"UnionTypeAnnotation"],[171,30,120,0],[171,31,120,29,"node"],[171,35,120,0],[171,37,120,35,"parent"],[171,43,120,0],[171,45,120,43],[172,0,121,2],[172,11,121,9,"t"],[172,12,121,10],[172,13,121,11,"isArrayTypeAnnotation"],[172,34,121,9],[172,35,121,33,"parent"],[172,41,121,9],[172,46,121,44,"t"],[172,47,121,45],[172,48,121,46,"isNullableTypeAnnotation"],[172,72,121,44],[172,73,121,71,"parent"],[172,79,121,44],[172,80,121,9],[172,84,121,82,"t"],[172,85,121,83],[172,86,121,84,"isIntersectionTypeAnnotation"],[172,114,121,82],[172,115,121,113,"parent"],[172,121,121,82],[172,122,121,9],[172,126,121,124,"t"],[172,127,121,125],[172,128,121,126,"isUnionTypeAnnotation"],[172,149,121,124],[172,150,121,148,"parent"],[172,156,121,124],[172,157,121,2],[173,0,122,1],[175,0,124,0],[175,11,124,9,"TSAsExpression"],[175,25,124,0],[175,28,124,26],[176,0,125,2],[176,11,125,9],[176,15,125,2],[177,0,126,1],[179,0,128,0],[179,11,128,9,"TSTypeAssertion"],[179,26,128,0],[179,29,128,27],[180,0,129,2],[180,11,129,9],[180,15,129,2],[181,0,130,1],[183,0,132,0],[183,11,132,9,"TSUnionType"],[183,22,132,0],[183,23,132,21,"node"],[183,27,132,0],[183,29,132,27,"parent"],[183,35,132,0],[183,37,132,35],[184,0,133,2],[184,11,133,9,"t"],[184,12,133,10],[184,13,133,11,"isTSArrayType"],[184,26,133,9],[184,27,133,25,"parent"],[184,33,133,9],[184,38,133,36,"t"],[184,39,133,37],[184,40,133,38,"isTSOptionalType"],[184,56,133,36],[184,57,133,55,"parent"],[184,63,133,36],[184,64,133,9],[184,68,133,66,"t"],[184,69,133,67],[184,70,133,68,"isTSIntersectionType"],[184,90,133,66],[184,91,133,89,"parent"],[184,97,133,66],[184,98,133,9],[184,102,133,100,"t"],[184,103,133,101],[184,104,133,102,"isTSUnionType"],[184,117,133,100],[184,118,133,116,"parent"],[184,124,133,100],[184,125,133,9],[184,129,133,127,"t"],[184,130,133,128],[184,131,133,129,"isTSRestType"],[184,143,133,127],[184,144,133,142,"parent"],[184,150,133,127],[184,151,133,2],[185,0,134,1],[187,0,136,0],[187,11,136,9,"BinaryExpression"],[187,27,136,0],[187,28,136,26,"node"],[187,32,136,0],[187,34,136,32,"parent"],[187,40,136,0],[187,42,136,40],[188,0,137,2],[188,11,137,9,"node"],[188,15,137,13],[188,16,137,14,"operator"],[188,24,137,9],[188,29,137,27],[188,33,137,9],[188,38,137,36,"t"],[188,39,137,37],[188,40,137,38,"isVariableDeclarator"],[188,60,137,36],[188,61,137,59,"parent"],[188,67,137,36],[188,72,137,70,"t"],[188,73,137,71],[188,74,137,72,"isFor"],[188,79,137,70],[188,80,137,78,"parent"],[188,86,137,70],[188,87,137,9],[188,88,137,2],[189,0,138,1],[191,0,140,0],[191,11,140,9,"SequenceExpression"],[191,29,140,0],[191,30,140,28,"node"],[191,34,140,0],[191,36,140,34,"parent"],[191,42,140,0],[191,44,140,42],[192,0,141,2],[192,8,141,6,"t"],[192,9,141,7],[192,10,141,8,"isForStatement"],[192,24,141,6],[192,25,141,23,"parent"],[192,31,141,6],[192,36,141,34,"t"],[192,37,141,35],[192,38,141,36,"isThrowStatement"],[192,54,141,34],[192,55,141,53,"parent"],[192,61,141,34],[192,62,141,6],[192,66,141,64,"t"],[192,67,141,65],[192,68,141,66,"isReturnStatement"],[192,85,141,64],[192,86,141,84,"parent"],[192,92,141,64],[192,93,141,6],[192,97,141,95,"t"],[192,98,141,96],[192,99,141,97,"isIfStatement"],[192,112,141,95],[192,113,141,111,"parent"],[192,119,141,95],[192,124,141,122,"parent"],[192,130,141,128],[192,131,141,129,"test"],[192,135,141,122],[192,140,141,138,"node"],[192,144,141,6],[192,148,141,146,"t"],[192,149,141,147],[192,150,141,148,"isWhileStatement"],[192,166,141,146],[192,167,141,165,"parent"],[192,173,141,146],[192,178,141,176,"parent"],[192,184,141,182],[192,185,141,183,"test"],[192,189,141,176],[192,194,141,192,"node"],[192,198,141,6],[192,202,141,200,"t"],[192,203,141,201],[192,204,141,202,"isForInStatement"],[192,220,141,200],[192,221,141,219,"parent"],[192,227,141,200],[192,232,141,230,"parent"],[192,238,141,236],[192,239,141,237,"right"],[192,244,141,230],[192,249,141,247,"node"],[192,253,141,6],[192,257,141,255,"t"],[192,258,141,256],[192,259,141,257,"isSwitchStatement"],[192,276,141,255],[192,277,141,275,"parent"],[192,283,141,255],[192,288,141,286,"parent"],[192,294,141,292],[192,295,141,293,"discriminant"],[192,307,141,286],[192,312,141,310,"node"],[192,316,141,6],[192,320,141,318,"t"],[192,321,141,319],[192,322,141,320,"isExpressionStatement"],[192,343,141,318],[192,344,141,342,"parent"],[192,350,141,318],[192,355,141,353,"parent"],[192,361,141,359],[192,362,141,360,"expression"],[192,372,141,353],[192,377,141,375,"node"],[192,381,141,2],[192,383,141,381],[193,0,142,4],[193,13,142,11],[193,18,142,4],[194,0,143,3],[196,0,145,2],[196,11,145,9],[196,15,145,2],[197,0,146,1],[199,0,148,0],[199,11,148,9,"YieldExpression"],[199,26,148,0],[199,27,148,25,"node"],[199,31,148,0],[199,33,148,31,"parent"],[199,39,148,0],[199,41,148,39],[200,0,149,2],[200,11,149,9,"t"],[200,12,149,10],[200,13,149,11,"isBinary"],[200,21,149,9],[200,22,149,20,"parent"],[200,28,149,9],[200,33,149,31,"t"],[200,34,149,32],[200,35,149,33,"isUnaryLike"],[200,46,149,31],[200,47,149,45,"parent"],[200,53,149,31],[200,54,149,9],[200,58,149,56,"t"],[200,59,149,57],[200,60,149,58,"isCallExpression"],[200,76,149,56],[200,77,149,75,"parent"],[200,83,149,56],[200,84,149,9],[200,88,149,86,"t"],[200,89,149,87],[200,90,149,88,"isMemberExpression"],[200,108,149,86],[200,109,149,107,"parent"],[200,115,149,86],[200,116,149,9],[200,120,149,118,"t"],[200,121,149,119],[200,122,149,120,"isNewExpression"],[200,137,149,118],[200,138,149,136,"parent"],[200,144,149,118],[200,145,149,9],[200,149,149,147,"t"],[200,150,149,148],[200,151,149,149,"isAwaitExpression"],[200,168,149,147],[200,169,149,167,"parent"],[200,175,149,147],[200,180,149,178,"t"],[200,181,149,179],[200,182,149,180,"isYieldExpression"],[200,199,149,178],[200,200,149,198,"node"],[200,204,149,178],[200,205,149,9],[200,209,149,207,"t"],[200,210,149,208],[200,211,149,209,"isConditionalExpression"],[200,234,149,207],[200,235,149,233,"parent"],[200,241,149,207],[200,246,149,244,"node"],[200,250,149,248],[200,255,149,253,"parent"],[200,261,149,259],[200,262,149,260,"test"],[200,266,149,9],[200,270,149,268,"isClassExtendsClause"],[200,290,149,288],[200,291,149,289,"node"],[200,295,149,288],[200,297,149,295,"parent"],[200,303,149,288],[200,304,149,2],[201,0,150,1],[203,0,152,0],[203,11,152,9,"ClassExpression"],[203,26,152,0],[203,27,152,25,"node"],[203,31,152,0],[203,33,152,31,"parent"],[203,39,152,0],[203,41,152,39,"printStack"],[203,51,152,0],[203,53,152,51],[204,0,153,2],[204,11,153,9,"isFirstInStatement"],[204,29,153,27],[204,30,153,28,"printStack"],[204,40,153,27],[204,42,153,40],[205,0,154,4,"considerDefaultExports"],[205,6,154,4,"considerDefaultExports"],[205,28,154,26],[205,30,154,28],[206,0,153,40],[206,5,153,27],[206,6,153,2],[207,0,156,1],[209,0,158,0],[209,11,158,9,"UnaryLike"],[209,20,158,0],[209,21,158,19,"node"],[209,25,158,0],[209,27,158,25,"parent"],[209,33,158,0],[209,35,158,33],[210,0,159,2],[210,11,159,9,"t"],[210,12,159,10],[210,13,159,11,"isMemberExpression"],[210,31,159,9],[210,32,159,30,"parent"],[210,38,159,9],[210,40,159,38],[211,0,160,4,"object"],[211,6,160,4,"object"],[211,12,160,10],[211,14,160,12,"node"],[212,0,159,38],[212,5,159,9],[212,10,161,8,"t"],[212,11,161,9],[212,12,161,10,"isCallExpression"],[212,28,161,8],[212,29,161,27,"parent"],[212,35,161,8],[212,37,161,35],[213,0,162,4,"callee"],[213,6,162,4,"callee"],[213,12,162,10],[213,14,162,12,"node"],[214,0,161,35],[214,5,161,8],[214,6,159,9],[214,10,163,8,"t"],[214,11,163,9],[214,12,163,10,"isNewExpression"],[214,27,163,8],[214,28,163,26,"parent"],[214,34,163,8],[214,36,163,34],[215,0,164,4,"callee"],[215,6,164,4,"callee"],[215,12,164,10],[215,14,164,12,"node"],[216,0,163,34],[216,5,163,8],[216,6,159,9],[216,10,165,8,"t"],[216,11,165,9],[216,12,165,10,"isBinaryExpression"],[216,30,165,8],[216,31,165,29,"parent"],[216,37,165,8],[216,39,165,37],[217,0,166,4,"operator"],[217,6,166,4,"operator"],[217,14,166,12],[217,16,166,14],[217,20,165,37],[218,0,167,4,"left"],[218,6,167,4,"left"],[218,10,167,8],[218,12,167,10,"node"],[219,0,165,37],[219,5,165,8],[219,6,159,9],[219,10,168,8,"isClassExtendsClause"],[219,30,168,28],[219,31,168,29,"node"],[219,35,168,28],[219,37,168,35,"parent"],[219,43,168,28],[219,44,159,2],[220,0,169,1],[222,0,171,0],[222,11,171,9,"FunctionExpression"],[222,29,171,0],[222,30,171,28,"node"],[222,34,171,0],[222,36,171,34,"parent"],[222,42,171,0],[222,44,171,42,"printStack"],[222,54,171,0],[222,56,171,54],[223,0,172,2],[223,11,172,9,"isFirstInStatement"],[223,29,172,27],[223,30,172,28,"printStack"],[223,40,172,27],[223,42,172,40],[224,0,173,4,"considerDefaultExports"],[224,6,173,4,"considerDefaultExports"],[224,28,173,26],[224,30,173,28],[225,0,172,40],[225,5,172,27],[225,6,172,2],[226,0,175,1],[228,0,177,0],[228,11,177,9,"ArrowFunctionExpression"],[228,34,177,0],[228,35,177,33,"node"],[228,39,177,0],[228,41,177,39,"parent"],[228,47,177,0],[228,49,177,47],[229,0,178,2],[229,11,178,9,"t"],[229,12,178,10],[229,13,178,11,"isExportDeclaration"],[229,32,178,9],[229,33,178,31,"parent"],[229,39,178,9],[229,44,178,42,"ConditionalExpression"],[229,65,178,63],[229,66,178,64,"node"],[229,70,178,63],[229,72,178,70,"parent"],[229,78,178,63],[229,79,178,2],[230,0,179,1],[232,0,181,0],[232,11,181,9,"ConditionalExpression"],[232,32,181,0],[232,33,181,31,"node"],[232,37,181,0],[232,39,181,37,"parent"],[232,45,181,0],[232,47,181,45],[233,0,182,2],[233,8,182,6,"t"],[233,9,182,7],[233,10,182,8,"isUnaryLike"],[233,21,182,6],[233,22,182,20,"parent"],[233,28,182,6],[233,33,182,31,"t"],[233,34,182,32],[233,35,182,33,"isBinary"],[233,43,182,31],[233,44,182,42,"parent"],[233,50,182,31],[233,51,182,6],[233,55,182,53,"t"],[233,56,182,54],[233,57,182,55,"isConditionalExpression"],[233,80,182,53],[233,81,182,79,"parent"],[233,87,182,53],[233,89,182,87],[234,0,183,4,"test"],[234,6,183,4,"test"],[234,10,183,8],[234,12,183,10,"node"],[235,0,182,87],[235,5,182,53],[235,6,182,6],[235,10,184,8,"t"],[235,11,184,9],[235,12,184,10,"isAwaitExpression"],[235,29,184,8],[235,30,184,28,"parent"],[235,36,184,8],[235,37,182,6],[235,41,184,39,"t"],[235,42,184,40],[235,43,184,41,"isOptionalMemberExpression"],[235,69,184,39],[235,70,184,68,"parent"],[235,76,184,39],[235,77,182,6],[235,81,184,79,"t"],[235,82,184,80],[235,83,184,81,"isTaggedTemplateExpression"],[235,109,184,79],[235,110,184,108,"parent"],[235,116,184,79],[235,117,182,6],[235,121,184,119,"t"],[235,122,184,120],[235,123,184,121,"isTSTypeAssertion"],[235,140,184,119],[235,141,184,139,"parent"],[235,147,184,119],[235,148,182,6],[235,152,184,150,"t"],[235,153,184,151],[235,154,184,152,"isTSAsExpression"],[235,170,184,150],[235,171,184,169,"parent"],[235,177,184,150],[235,178,182,2],[235,180,184,178],[236,0,185,4],[236,13,185,11],[236,17,185,4],[237,0,186,3],[239,0,188,2],[239,11,188,9,"UnaryLike"],[239,20,188,18],[239,21,188,19,"node"],[239,25,188,18],[239,27,188,25,"parent"],[239,33,188,18],[239,34,188,2],[240,0,189,1],[242,0,191,0],[242,11,191,9,"OptionalMemberExpression"],[242,35,191,0],[242,36,191,34,"node"],[242,40,191,0],[242,42,191,40,"parent"],[242,48,191,0],[242,50,191,48],[243,0,192,2],[243,11,192,9,"t"],[243,12,192,10],[243,13,192,11,"isCallExpression"],[243,29,192,9],[243,30,192,28,"parent"],[243,36,192,9],[243,41,192,39,"t"],[243,42,192,40],[243,43,192,41,"isMemberExpression"],[243,61,192,39],[243,62,192,60,"parent"],[243,68,192,39],[243,69,192,2],[244,0,193,1],[246,0,195,0],[246,11,195,9,"AssignmentExpression"],[246,31,195,0],[246,32,195,30,"node"],[246,36,195,0],[246,38,195,36],[247,0,196,2],[247,8,196,6,"t"],[247,9,196,7],[247,10,196,8,"isObjectPattern"],[247,25,196,6],[247,26,196,24,"node"],[247,30,196,28],[247,31,196,29,"left"],[247,35,196,6],[247,36,196,2],[247,38,196,36],[248,0,197,4],[248,13,197,11],[248,17,197,4],[249,0,198,3],[249,5,196,2],[249,11,198,9],[250,0,199,4],[250,13,199,11,"ConditionalExpression"],[250,34,199,32],[250,40,199,11],[250,49,199,36,"arguments"],[250,58,199,11],[250,59,199,4],[251,0,200,3],[252,0,201,1],[254,0,203,0],[254,11,203,9,"NewExpression"],[254,24,203,0],[254,25,203,23,"node"],[254,29,203,0],[254,31,203,29,"parent"],[254,37,203,0],[254,39,203,37],[255,0,204,2],[255,11,204,9,"isClassExtendsClause"],[255,31,204,29],[255,32,204,30,"node"],[255,36,204,29],[255,38,204,36,"parent"],[255,44,204,29],[255,45,204,2],[256,0,205,1],[258,0,207,0],[258,11,207,9,"isFirstInStatement"],[258,29,207,0],[258,30,207,28,"printStack"],[258,40,207,0],[258,42,210,8],[259,0,210,8],[259,83,210,4],[259,85,210,8],[260,0,210,8],[260,34,208,2,"considerArrow"],[260,47,210,8],[261,0,210,8],[261,8,208,2,"considerArrow"],[261,21,210,8],[261,56,208,18],[261,61,210,8],[262,0,210,8],[262,37,209,2,"considerDefaultExports"],[262,59,210,8],[263,0,210,8],[263,8,209,2,"considerDefaultExports"],[263,30,210,8],[263,68,209,27],[263,73,210,8],[265,0,211,2],[265,8,211,6,"i"],[265,9,211,7],[265,12,211,10,"printStack"],[265,22,211,20],[265,23,211,21,"length"],[265,29,211,10],[265,32,211,30],[265,33,211,2],[266,0,212,2],[266,8,212,6,"node"],[266,12,212,10],[266,15,212,13,"printStack"],[266,25,212,23],[266,26,212,24,"i"],[266,27,212,23],[266,28,212,2],[267,0,213,2,"i"],[267,4,213,2,"i"],[267,5,213,3],[268,0,214,2],[268,8,214,6,"parent"],[268,14,214,12],[268,17,214,15,"printStack"],[268,27,214,25],[268,28,214,26,"i"],[268,29,214,25],[268,30,214,2],[270,0,216,2],[270,11,216,9,"i"],[270,12,216,10],[270,15,216,13],[270,16,216,2],[270,18,216,16],[271,0,217,4],[271,10,217,8,"t"],[271,11,217,9],[271,12,217,10,"isExpressionStatement"],[271,33,217,8],[271,34,217,32,"parent"],[271,40,217,8],[271,42,217,40],[272,0,218,6,"expression"],[272,8,218,6,"expression"],[272,18,218,16],[272,20,218,18,"node"],[273,0,217,40],[273,7,217,8],[273,12,219,10,"t"],[273,13,219,11],[273,14,219,12,"isTaggedTemplateExpression"],[273,40,219,10],[273,41,219,39,"parent"],[273,47,219,10],[273,48,217,8],[273,52,219,50,"considerDefaultExports"],[273,74,219,72],[273,78,219,76,"t"],[273,79,219,77],[273,80,219,78,"isExportDefaultDeclaration"],[273,106,219,76],[273,107,219,105,"parent"],[273,113,219,76],[273,115,219,113],[274,0,220,6,"declaration"],[274,8,220,6,"declaration"],[274,19,220,17],[274,21,220,19,"node"],[275,0,219,113],[275,7,219,76],[275,8,217,8],[275,12,221,10,"considerArrow"],[275,25,221,23],[275,29,221,27,"t"],[275,30,221,28],[275,31,221,29,"isArrowFunctionExpression"],[275,56,221,27],[275,57,221,55,"parent"],[275,63,221,27],[275,65,221,63],[276,0,222,6,"body"],[276,8,222,6,"body"],[276,12,222,10],[276,14,222,12,"node"],[277,0,221,63],[277,7,221,27],[277,8,217,4],[277,10,223,8],[278,0,224,6],[278,15,224,13],[278,19,224,6],[279,0,225,5],[281,0,227,4],[281,10,227,8,"t"],[281,11,227,9],[281,12,227,10,"isCallExpression"],[281,28,227,8],[281,29,227,27,"parent"],[281,35,227,8],[281,37,227,35],[282,0,228,6,"callee"],[282,8,228,6,"callee"],[282,14,228,12],[282,16,228,14,"node"],[283,0,227,35],[283,7,227,8],[283,12,229,10,"t"],[283,13,229,11],[283,14,229,12,"isSequenceExpression"],[283,34,229,10],[283,35,229,33,"parent"],[283,41,229,10],[283,46,229,44,"parent"],[283,52,229,50],[283,53,229,51,"expressions"],[283,64,229,44],[283,65,229,63],[283,66,229,44],[283,72,229,70,"node"],[283,76,227,8],[283,80,229,78,"t"],[283,81,229,79],[283,82,229,80,"isMemberExpression"],[283,100,229,78],[283,101,229,99,"parent"],[283,107,229,78],[283,109,229,107],[284,0,230,6,"object"],[284,8,230,6,"object"],[284,14,230,12],[284,16,230,14,"node"],[285,0,229,107],[285,7,229,78],[285,8,227,8],[285,12,231,10,"t"],[285,13,231,11],[285,14,231,12,"isConditional"],[285,27,231,10],[285,28,231,26,"parent"],[285,34,231,10],[285,36,231,34],[286,0,232,6,"test"],[286,8,232,6,"test"],[286,12,232,10],[286,14,232,12,"node"],[287,0,231,34],[287,7,231,10],[287,8,227,8],[287,12,233,10,"t"],[287,13,233,11],[287,14,233,12,"isBinary"],[287,22,233,10],[287,23,233,21,"parent"],[287,29,233,10],[287,31,233,29],[288,0,234,6,"left"],[288,8,234,6,"left"],[288,12,234,10],[288,14,234,12,"node"],[289,0,233,29],[289,7,233,10],[289,8,227,8],[289,12,235,10,"t"],[289,13,235,11],[289,14,235,12,"isAssignmentExpression"],[289,36,235,10],[289,37,235,35,"parent"],[289,43,235,10],[289,45,235,43],[290,0,236,6,"left"],[290,8,236,6,"left"],[290,12,236,10],[290,14,236,12,"node"],[291,0,235,43],[291,7,235,10],[291,8,227,4],[291,10,237,8],[292,0,238,6,"node"],[292,8,238,6,"node"],[292,12,238,10],[292,15,238,13,"parent"],[292,21,238,6],[293,0,239,6,"i"],[293,8,239,6,"i"],[293,9,239,7],[294,0,240,6,"parent"],[294,8,240,6,"parent"],[294,14,240,12],[294,17,240,15,"printStack"],[294,27,240,25],[294,28,240,26,"i"],[294,29,240,25],[294,30,240,6],[295,0,241,5],[295,7,227,4],[295,13,241,11],[296,0,242,6],[296,15,242,13],[296,20,242,6],[297,0,243,5],[298,0,244,3],[300,0,246,2],[300,11,246,9],[300,16,246,2],[301,0,247,1]]},"type":"js/module"}]}