{"dependencies":[{"name":"../../validators/generated","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = removeTypeDuplicates;\n\n  var _generated = _$$_REQUIRE(_dependencyMap[0], \"../../validators/generated\");\n\n  function removeTypeDuplicates(nodes) {\n    var generics = {};\n    var bases = {};\n    var typeGroups = [];\n    var types = [];\n\n    for (var i = 0; i < nodes.length; i++) {\n      var node = nodes[i];\n      if (!node) continue;\n\n      if (types.indexOf(node) >= 0) {\n        continue;\n      }\n\n      if ((0, _generated.isAnyTypeAnnotation)(node)) {\n        return [node];\n      }\n\n      if ((0, _generated.isFlowBaseAnnotation)(node)) {\n        bases[node.type] = node;\n        continue;\n      }\n\n      if ((0, _generated.isUnionTypeAnnotation)(node)) {\n        if (typeGroups.indexOf(node.types) < 0) {\n          nodes = nodes.concat(node.types);\n          typeGroups.push(node.types);\n        }\n\n        continue;\n      }\n\n      if ((0, _generated.isGenericTypeAnnotation)(node)) {\n        var name = node.id.name;\n\n        if (generics[name]) {\n          var existing = generics[name];\n\n          if (existing.typeParameters) {\n            if (node.typeParameters) {\n              existing.typeParameters.params = removeTypeDuplicates(existing.typeParameters.params.concat(node.typeParameters.params));\n            }\n          } else {\n            existing = node.typeParameters;\n          }\n        } else {\n          generics[name] = node;\n        }\n\n        continue;\n      }\n\n      types.push(node);\n    }\n\n    for (var _i = 0, _Object$keys = Object.keys(bases); _i < _Object$keys.length; _i++) {\n      var type = _Object$keys[_i];\n      types.push(bases[type]);\n    }\n\n    for (var _i2 = 0, _Object$keys2 = Object.keys(generics); _i2 < _Object$keys2.length; _i2++) {\n      var _name = _Object$keys2[_i2];\n      types.push(generics[_name]);\n    }\n\n    return types;\n  }\n});","map":[[2,0,1,0],[4,0,3,0,"Object"],[4,2,3,0,"Object"],[4,8,3,6],[4,9,3,7,"defineProperty"],[4,23,3,0],[4,24,3,22,"exports"],[4,31,3,0],[4,33,3,31],[4,45,3,0],[4,47,3,45],[5,0,4,2,"value"],[5,4,4,2,"value"],[5,9,4,7],[5,11,4,9],[6,0,3,45],[6,3,3,0],[7,0,6,0,"exports"],[7,2,6,0,"exports"],[7,9,6,7],[7,10,6,8,"default"],[7,17,6,0],[7,20,6,18,"removeTypeDuplicates"],[7,40,6,0],[9,0,8,0],[9,6,8,4,"_generated"],[9,16,8,14],[9,19,8,17,"require"],[9,30,8,24],[9,79,8,0],[11,0,10,0],[11,11,10,9,"removeTypeDuplicates"],[11,31,10,0],[11,32,10,30,"nodes"],[11,37,10,0],[11,39,10,37],[12,0,11,2],[12,8,11,8,"generics"],[12,16,11,16],[12,19,11,19],[12,21,11,2],[13,0,12,2],[13,8,12,8,"bases"],[13,13,12,13],[13,16,12,16],[13,18,12,2],[14,0,13,2],[14,8,13,8,"typeGroups"],[14,18,13,18],[14,21,13,21],[14,23,13,2],[15,0,14,2],[15,8,14,8,"types"],[15,13,14,13],[15,16,14,16],[15,18,14,2],[17,0,16,2],[17,9,16,7],[17,13,16,11,"i"],[17,14,16,12],[17,17,16,15],[17,18,16,2],[17,20,16,18,"i"],[17,21,16,19],[17,24,16,22,"nodes"],[17,29,16,27],[17,30,16,28,"length"],[17,36,16,2],[17,38,16,36,"i"],[17,39,16,37],[17,41,16,2],[17,43,16,41],[18,0,17,4],[18,10,17,10,"node"],[18,14,17,14],[18,17,17,17,"nodes"],[18,22,17,22],[18,23,17,23,"i"],[18,24,17,22],[18,25,17,4],[19,0,18,4],[19,10,18,8],[19,11,18,9,"node"],[19,15,18,4],[19,17,18,15],[21,0,20,4],[21,10,20,8,"types"],[21,15,20,13],[21,16,20,14,"indexOf"],[21,23,20,8],[21,24,20,22,"node"],[21,28,20,8],[21,33,20,31],[21,34,20,4],[21,36,20,34],[22,0,21,6],[23,0,22,5],[25,0,24,4],[25,10,24,8],[25,11,24,9],[25,14,24,12,"_generated"],[25,24,24,22],[25,25,24,23,"isAnyTypeAnnotation"],[25,44,24,8],[25,46,24,44,"node"],[25,50,24,8],[25,51,24,4],[25,53,24,51],[26,0,25,6],[26,15,25,13],[26,16,25,14,"node"],[26,20,25,13],[26,21,25,6],[27,0,26,5],[29,0,28,4],[29,10,28,8],[29,11,28,9],[29,14,28,12,"_generated"],[29,24,28,22],[29,25,28,23,"isFlowBaseAnnotation"],[29,45,28,8],[29,47,28,45,"node"],[29,51,28,8],[29,52,28,4],[29,54,28,52],[30,0,29,6,"bases"],[30,8,29,6,"bases"],[30,13,29,11],[30,14,29,12,"node"],[30,18,29,16],[30,19,29,17,"type"],[30,23,29,11],[30,24,29,6],[30,27,29,25,"node"],[30,31,29,6],[31,0,30,6],[32,0,31,5],[34,0,33,4],[34,10,33,8],[34,11,33,9],[34,14,33,12,"_generated"],[34,24,33,22],[34,25,33,23,"isUnionTypeAnnotation"],[34,46,33,8],[34,48,33,46,"node"],[34,52,33,8],[34,53,33,4],[34,55,33,53],[35,0,34,6],[35,12,34,10,"typeGroups"],[35,22,34,20],[35,23,34,21,"indexOf"],[35,30,34,10],[35,31,34,29,"node"],[35,35,34,33],[35,36,34,34,"types"],[35,41,34,10],[35,45,34,43],[35,46,34,6],[35,48,34,46],[36,0,35,8,"nodes"],[36,10,35,8,"nodes"],[36,15,35,13],[36,18,35,16,"nodes"],[36,23,35,21],[36,24,35,22,"concat"],[36,30,35,16],[36,31,35,29,"node"],[36,35,35,33],[36,36,35,34,"types"],[36,41,35,16],[36,42,35,8],[37,0,36,8,"typeGroups"],[37,10,36,8,"typeGroups"],[37,20,36,18],[37,21,36,19,"push"],[37,25,36,8],[37,26,36,24,"node"],[37,30,36,28],[37,31,36,29,"types"],[37,36,36,8],[38,0,37,7],[40,0,39,6],[41,0,40,5],[43,0,42,4],[43,10,42,8],[43,11,42,9],[43,14,42,12,"_generated"],[43,24,42,22],[43,25,42,23,"isGenericTypeAnnotation"],[43,48,42,8],[43,50,42,48,"node"],[43,54,42,8],[43,55,42,4],[43,57,42,55],[44,0,43,6],[44,12,43,12,"name"],[44,16,43,16],[44,19,43,19,"node"],[44,23,43,23],[44,24,43,24,"id"],[44,26,43,19],[44,27,43,27,"name"],[44,31,43,6],[46,0,45,6],[46,12,45,10,"generics"],[46,20,45,18],[46,21,45,19,"name"],[46,25,45,18],[46,26,45,6],[46,28,45,26],[47,0,46,8],[47,14,46,12,"existing"],[47,22,46,20],[47,25,46,23,"generics"],[47,33,46,31],[47,34,46,32,"name"],[47,38,46,31],[47,39,46,8],[49,0,48,8],[49,14,48,12,"existing"],[49,22,48,20],[49,23,48,21,"typeParameters"],[49,37,48,8],[49,39,48,37],[50,0,49,10],[50,16,49,14,"node"],[50,20,49,18],[50,21,49,19,"typeParameters"],[50,35,49,10],[50,37,49,35],[51,0,50,12,"existing"],[51,14,50,12,"existing"],[51,22,50,20],[51,23,50,21,"typeParameters"],[51,37,50,12],[51,38,50,36,"params"],[51,44,50,12],[51,47,50,45,"removeTypeDuplicates"],[51,67,50,65],[51,68,50,66,"existing"],[51,76,50,74],[51,77,50,75,"typeParameters"],[51,91,50,66],[51,92,50,90,"params"],[51,98,50,66],[51,99,50,97,"concat"],[51,105,50,66],[51,106,50,104,"node"],[51,110,50,108],[51,111,50,109,"typeParameters"],[51,125,50,104],[51,126,50,124,"params"],[51,132,50,66],[51,133,50,65],[51,134,50,12],[52,0,51,11],[53,0,52,9],[53,11,48,8],[53,17,52,15],[54,0,53,10,"existing"],[54,12,53,10,"existing"],[54,20,53,18],[54,23,53,21,"node"],[54,27,53,25],[54,28,53,26,"typeParameters"],[54,42,53,10],[55,0,54,9],[56,0,55,7],[56,9,45,6],[56,15,55,13],[57,0,56,8,"generics"],[57,10,56,8,"generics"],[57,18,56,16],[57,19,56,17,"name"],[57,23,56,16],[57,24,56,8],[57,27,56,25,"node"],[57,31,56,8],[58,0,57,7],[60,0,59,6],[61,0,60,5],[63,0,62,4,"types"],[63,6,62,4,"types"],[63,11,62,9],[63,12,62,10,"push"],[63,16,62,4],[63,17,62,15,"node"],[63,21,62,4],[64,0,63,3],[66,0,65,2],[66,36,65,21,"Object"],[66,42,65,27],[66,43,65,28,"keys"],[66,47,65,21],[66,48,65,33,"bases"],[66,53,65,21],[66,54,65,2],[66,88,65,41],[67,0,65,7],[67,10,65,13,"type"],[67,14,65,17],[67,33,65,7],[68,0,66,4,"types"],[68,6,66,4,"types"],[68,11,66,9],[68,12,66,10,"push"],[68,16,66,4],[68,17,66,15,"bases"],[68,22,66,20],[68,23,66,21,"type"],[68,27,66,20],[68,28,66,4],[69,0,67,3],[71,0,69,2],[71,38,69,21,"Object"],[71,44,69,27],[71,45,69,28,"keys"],[71,49,69,21],[71,50,69,33,"generics"],[71,58,69,21],[71,59,69,2],[71,96,69,44],[72,0,69,7],[72,10,69,13,"name"],[72,15,69,17],[72,36,69,7],[73,0,70,4,"types"],[73,6,70,4,"types"],[73,11,70,9],[73,12,70,10,"push"],[73,16,70,4],[73,17,70,15,"generics"],[73,25,70,23],[73,26,70,24,"name"],[73,31,70,23],[73,32,70,4],[74,0,71,3],[76,0,73,2],[76,11,73,9,"types"],[76,16,73,2],[77,0,74,1]]},"type":"js/module"}]}