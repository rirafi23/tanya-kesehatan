{"dependencies":[{"name":"@babel/runtime/helpers/slicedToArray","data":{"isAsync":false}},{"name":"../plugin","data":{"isAsync":false}},{"name":"./removed","data":{"isAsync":false}},{"name":"./option-assertions","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _slicedToArray = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/slicedToArray\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.validate = validate;\n\n  var _plugin = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"../plugin\"));\n\n  var _removed = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"./removed\"));\n\n  var _optionAssertions = _$$_REQUIRE(_dependencyMap[3], \"./option-assertions\");\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      default: obj\n    };\n  }\n\n  var ROOT_VALIDATORS = {\n    cwd: _optionAssertions.assertString,\n    root: _optionAssertions.assertString,\n    rootMode: _optionAssertions.assertRootMode,\n    configFile: _optionAssertions.assertConfigFileSearch,\n    caller: _optionAssertions.assertCallerMetadata,\n    filename: _optionAssertions.assertString,\n    filenameRelative: _optionAssertions.assertString,\n    code: _optionAssertions.assertBoolean,\n    ast: _optionAssertions.assertBoolean,\n    envName: _optionAssertions.assertString\n  };\n  var BABELRC_VALIDATORS = {\n    babelrc: _optionAssertions.assertBoolean,\n    babelrcRoots: _optionAssertions.assertBabelrcSearch\n  };\n  var NONPRESET_VALIDATORS = {\n    extends: _optionAssertions.assertString,\n    ignore: _optionAssertions.assertIgnoreList,\n    only: _optionAssertions.assertIgnoreList\n  };\n  var COMMON_VALIDATORS = {\n    inputSourceMap: _optionAssertions.assertInputSourceMap,\n    presets: _optionAssertions.assertPluginList,\n    plugins: _optionAssertions.assertPluginList,\n    passPerPreset: _optionAssertions.assertBoolean,\n    env: assertEnvSet,\n    overrides: assertOverridesList,\n    test: _optionAssertions.assertConfigApplicableTest,\n    include: _optionAssertions.assertConfigApplicableTest,\n    exclude: _optionAssertions.assertConfigApplicableTest,\n    retainLines: _optionAssertions.assertBoolean,\n    comments: _optionAssertions.assertBoolean,\n    shouldPrintComment: _optionAssertions.assertFunction,\n    compact: _optionAssertions.assertCompact,\n    minified: _optionAssertions.assertBoolean,\n    auxiliaryCommentBefore: _optionAssertions.assertString,\n    auxiliaryCommentAfter: _optionAssertions.assertString,\n    sourceType: _optionAssertions.assertSourceType,\n    wrapPluginVisitorMethod: _optionAssertions.assertFunction,\n    highlightCode: _optionAssertions.assertBoolean,\n    sourceMaps: _optionAssertions.assertSourceMaps,\n    sourceMap: _optionAssertions.assertSourceMaps,\n    sourceFileName: _optionAssertions.assertString,\n    sourceRoot: _optionAssertions.assertString,\n    getModuleId: _optionAssertions.assertFunction,\n    moduleRoot: _optionAssertions.assertString,\n    moduleIds: _optionAssertions.assertBoolean,\n    moduleId: _optionAssertions.assertString,\n    parserOpts: _optionAssertions.assertObject,\n    generatorOpts: _optionAssertions.assertObject\n  };\n\n  function getSource(loc) {\n    return loc.type === \"root\" ? loc.source : getSource(loc.parent);\n  }\n\n  function validate(type, opts) {\n    return validateNested({\n      type: \"root\",\n      source: type\n    }, opts);\n  }\n\n  function validateNested(loc, opts) {\n    var type = getSource(loc);\n    assertNoDuplicateSourcemap(opts);\n    Object.keys(opts).forEach(function (key) {\n      var optLoc = {\n        type: \"option\",\n        name: key,\n        parent: loc\n      };\n\n      if (type === \"preset\" && NONPRESET_VALIDATORS[key]) {\n        throw new Error((0, _optionAssertions.msg)(optLoc) + \" is not allowed in preset options\");\n      }\n\n      if (type !== \"arguments\" && ROOT_VALIDATORS[key]) {\n        throw new Error((0, _optionAssertions.msg)(optLoc) + \" is only allowed in root programmatic options\");\n      }\n\n      if (type !== \"arguments\" && type !== \"configfile\" && BABELRC_VALIDATORS[key]) {\n        if (type === \"babelrcfile\" || type === \"extendsfile\") {\n          throw new Error((0, _optionAssertions.msg)(optLoc) + \" is not allowed in .babelrc or \\\"extends\\\"ed files, only in root programmatic options, \" + \"or babel.config.js/config file options\");\n        }\n\n        throw new Error((0, _optionAssertions.msg)(optLoc) + \" is only allowed in root programmatic options, or babel.config.js/config file options\");\n      }\n\n      var validator = COMMON_VALIDATORS[key] || NONPRESET_VALIDATORS[key] || BABELRC_VALIDATORS[key] || ROOT_VALIDATORS[key] || throwUnknownError;\n      validator(optLoc, opts[key]);\n    });\n    return opts;\n  }\n\n  function throwUnknownError(loc) {\n    var key = loc.name;\n\n    if (_removed.default[key]) {\n      var _removed$default$key = _removed.default[key],\n          message = _removed$default$key.message,\n          _removed$default$key$ = _removed$default$key.version,\n          version = _removed$default$key$ === void 0 ? 5 : _removed$default$key$;\n      throw new ReferenceError(\"Using removed Babel \" + version + \" option: \" + (0, _optionAssertions.msg)(loc) + \" - \" + message);\n    } else {\n      var unknownOptErr = \"Unknown option: \" + (0, _optionAssertions.msg)(loc) + \". Check out https://babeljs.io/docs/en/babel-core/#options for more information about options.\";\n      throw new ReferenceError(unknownOptErr);\n    }\n  }\n\n  function has(obj, key) {\n    return Object.prototype.hasOwnProperty.call(obj, key);\n  }\n\n  function assertNoDuplicateSourcemap(opts) {\n    if (has(opts, \"sourceMap\") && has(opts, \"sourceMaps\")) {\n      throw new Error(\".sourceMap is an alias for .sourceMaps, cannot use both\");\n    }\n  }\n\n  function assertEnvSet(loc, value) {\n    if (loc.parent.type === \"env\") {\n      throw new Error((0, _optionAssertions.msg)(loc) + \" is not allowed inside of another .env block\");\n    }\n\n    var parent = loc.parent;\n    var obj = (0, _optionAssertions.assertObject)(loc, value);\n\n    if (obj) {\n      for (var _i = 0, _Object$keys = Object.keys(obj); _i < _Object$keys.length; _i++) {\n        var envName = _Object$keys[_i];\n        var env = (0, _optionAssertions.assertObject)((0, _optionAssertions.access)(loc, envName), obj[envName]);\n        if (!env) continue;\n        var envLoc = {\n          type: \"env\",\n          name: envName,\n          parent: parent\n        };\n        validateNested(envLoc, env);\n      }\n    }\n\n    return obj;\n  }\n\n  function assertOverridesList(loc, value) {\n    if (loc.parent.type === \"env\") {\n      throw new Error((0, _optionAssertions.msg)(loc) + \" is not allowed inside an .env block\");\n    }\n\n    if (loc.parent.type === \"overrides\") {\n      throw new Error((0, _optionAssertions.msg)(loc) + \" is not allowed inside an .overrides block\");\n    }\n\n    var parent = loc.parent;\n    var arr = (0, _optionAssertions.assertArray)(loc, value);\n\n    if (arr) {\n      for (var _iterator = arr.entries(), _isArray = Array.isArray(_iterator), _i2 = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"]();;) {\n        var _ref3;\n\n        if (_isArray) {\n          if (_i2 >= _iterator.length) break;\n          _ref3 = _iterator[_i2++];\n        } else {\n          _i2 = _iterator.next();\n          if (_i2.done) break;\n          _ref3 = _i2.value;\n        }\n\n        var _ref4 = _ref3;\n\n        var _ref2 = _slicedToArray(_ref4, 2);\n\n        var _index = _ref2[0];\n        var _item = _ref2[1];\n\n        var _objLoc = (0, _optionAssertions.access)(loc, _index);\n\n        var _env = (0, _optionAssertions.assertObject)(_objLoc, _item);\n\n        if (!_env) throw new Error((0, _optionAssertions.msg)(_objLoc) + \" must be an object\");\n        var _overridesLoc = {\n          type: \"overrides\",\n          index: _index,\n          parent: parent\n        };\n        validateNested(_overridesLoc, _env);\n      }\n    }\n\n    return arr;\n  }\n});","map":[[2,0,1,0],[6,0,3,0,"Object"],[6,2,3,0,"Object"],[6,8,3,6],[6,9,3,7,"defineProperty"],[6,23,3,0],[6,24,3,22,"exports"],[6,31,3,0],[6,33,3,31],[6,45,3,0],[6,47,3,45],[7,0,4,2,"value"],[7,4,4,2,"value"],[7,9,4,7],[7,11,4,9],[8,0,3,45],[8,3,3,0],[9,0,6,0,"exports"],[9,2,6,0,"exports"],[9,9,6,7],[9,10,6,8,"validate"],[9,18,6,0],[9,21,6,19,"validate"],[9,29,6,0],[11,0,8,0],[11,6,8,4,"_plugin"],[11,13,8,11],[11,16,8,14,"_interopRequireDefault"],[11,38,8,36],[11,39,8,37,"require"],[11,50,8,44],[11,82,8,36],[11,83,8,0],[13,0,10,0],[13,6,10,4,"_removed"],[13,14,10,12],[13,17,10,15,"_interopRequireDefault"],[13,39,10,37],[13,40,10,38,"require"],[13,51,10,45],[13,83,10,37],[13,84,10,0],[15,0,12,0],[15,6,12,4,"_optionAssertions"],[15,23,12,21],[15,26,12,24,"require"],[15,37,12,31],[15,79,12,0],[17,0,14,0],[17,11,14,9,"_interopRequireDefault"],[17,33,14,0],[17,34,14,32,"obj"],[17,37,14,0],[17,39,14,37],[18,0,14,39],[18,11,14,46,"obj"],[18,14,14,49],[18,18,14,53,"obj"],[18,21,14,56],[18,22,14,57,"__esModule"],[18,32,14,46],[18,35,14,70,"obj"],[18,38,14,46],[18,41,14,76],[19,0,14,78,"default"],[19,6,14,78,"default"],[19,13,14,85],[19,15,14,87,"obj"],[20,0,14,76],[20,5,14,39],[21,0,14,95],[23,0,16,0],[23,6,16,6,"ROOT_VALIDATORS"],[23,21,16,21],[23,24,16,24],[24,0,17,2,"cwd"],[24,4,17,2,"cwd"],[24,7,17,5],[24,9,17,7,"_optionAssertions"],[24,26,17,24],[24,27,17,25,"assertString"],[24,39,16,24],[25,0,18,2,"root"],[25,4,18,2,"root"],[25,8,18,6],[25,10,18,8,"_optionAssertions"],[25,27,18,25],[25,28,18,26,"assertString"],[25,40,16,24],[26,0,19,2,"rootMode"],[26,4,19,2,"rootMode"],[26,12,19,10],[26,14,19,12,"_optionAssertions"],[26,31,19,29],[26,32,19,30,"assertRootMode"],[26,46,16,24],[27,0,20,2,"configFile"],[27,4,20,2,"configFile"],[27,14,20,12],[27,16,20,14,"_optionAssertions"],[27,33,20,31],[27,34,20,32,"assertConfigFileSearch"],[27,56,16,24],[28,0,21,2,"caller"],[28,4,21,2,"caller"],[28,10,21,8],[28,12,21,10,"_optionAssertions"],[28,29,21,27],[28,30,21,28,"assertCallerMetadata"],[28,50,16,24],[29,0,22,2,"filename"],[29,4,22,2,"filename"],[29,12,22,10],[29,14,22,12,"_optionAssertions"],[29,31,22,29],[29,32,22,30,"assertString"],[29,44,16,24],[30,0,23,2,"filenameRelative"],[30,4,23,2,"filenameRelative"],[30,20,23,18],[30,22,23,20,"_optionAssertions"],[30,39,23,37],[30,40,23,38,"assertString"],[30,52,16,24],[31,0,24,2,"code"],[31,4,24,2,"code"],[31,8,24,6],[31,10,24,8,"_optionAssertions"],[31,27,24,25],[31,28,24,26,"assertBoolean"],[31,41,16,24],[32,0,25,2,"ast"],[32,4,25,2,"ast"],[32,7,25,5],[32,9,25,7,"_optionAssertions"],[32,26,25,24],[32,27,25,25,"assertBoolean"],[32,40,16,24],[33,0,26,2,"envName"],[33,4,26,2,"envName"],[33,11,26,9],[33,13,26,11,"_optionAssertions"],[33,30,26,28],[33,31,26,29,"assertString"],[34,0,16,24],[34,3,16,0],[35,0,28,0],[35,6,28,6,"BABELRC_VALIDATORS"],[35,24,28,24],[35,27,28,27],[36,0,29,2,"babelrc"],[36,4,29,2,"babelrc"],[36,11,29,9],[36,13,29,11,"_optionAssertions"],[36,30,29,28],[36,31,29,29,"assertBoolean"],[36,44,28,27],[37,0,30,2,"babelrcRoots"],[37,4,30,2,"babelrcRoots"],[37,16,30,14],[37,18,30,16,"_optionAssertions"],[37,35,30,33],[37,36,30,34,"assertBabelrcSearch"],[38,0,28,27],[38,3,28,0],[39,0,32,0],[39,6,32,6,"NONPRESET_VALIDATORS"],[39,26,32,26],[39,29,32,29],[40,0,33,2,"extends"],[40,4,33,2,"extends"],[40,11,33,9],[40,13,33,11,"_optionAssertions"],[40,30,33,28],[40,31,33,29,"assertString"],[40,43,32,29],[41,0,34,2,"ignore"],[41,4,34,2,"ignore"],[41,10,34,8],[41,12,34,10,"_optionAssertions"],[41,29,34,27],[41,30,34,28,"assertIgnoreList"],[41,46,32,29],[42,0,35,2,"only"],[42,4,35,2,"only"],[42,8,35,6],[42,10,35,8,"_optionAssertions"],[42,27,35,25],[42,28,35,26,"assertIgnoreList"],[43,0,32,29],[43,3,32,0],[44,0,37,0],[44,6,37,6,"COMMON_VALIDATORS"],[44,23,37,23],[44,26,37,26],[45,0,38,2,"inputSourceMap"],[45,4,38,2,"inputSourceMap"],[45,18,38,16],[45,20,38,18,"_optionAssertions"],[45,37,38,35],[45,38,38,36,"assertInputSourceMap"],[45,58,37,26],[46,0,39,2,"presets"],[46,4,39,2,"presets"],[46,11,39,9],[46,13,39,11,"_optionAssertions"],[46,30,39,28],[46,31,39,29,"assertPluginList"],[46,47,37,26],[47,0,40,2,"plugins"],[47,4,40,2,"plugins"],[47,11,40,9],[47,13,40,11,"_optionAssertions"],[47,30,40,28],[47,31,40,29,"assertPluginList"],[47,47,37,26],[48,0,41,2,"passPerPreset"],[48,4,41,2,"passPerPreset"],[48,17,41,15],[48,19,41,17,"_optionAssertions"],[48,36,41,34],[48,37,41,35,"assertBoolean"],[48,50,37,26],[49,0,42,2,"env"],[49,4,42,2,"env"],[49,7,42,5],[49,9,42,7,"assertEnvSet"],[49,21,37,26],[50,0,43,2,"overrides"],[50,4,43,2,"overrides"],[50,13,43,11],[50,15,43,13,"assertOverridesList"],[50,34,37,26],[51,0,44,2,"test"],[51,4,44,2,"test"],[51,8,44,6],[51,10,44,8,"_optionAssertions"],[51,27,44,25],[51,28,44,26,"assertConfigApplicableTest"],[51,54,37,26],[52,0,45,2,"include"],[52,4,45,2,"include"],[52,11,45,9],[52,13,45,11,"_optionAssertions"],[52,30,45,28],[52,31,45,29,"assertConfigApplicableTest"],[52,57,37,26],[53,0,46,2,"exclude"],[53,4,46,2,"exclude"],[53,11,46,9],[53,13,46,11,"_optionAssertions"],[53,30,46,28],[53,31,46,29,"assertConfigApplicableTest"],[53,57,37,26],[54,0,47,2,"retainLines"],[54,4,47,2,"retainLines"],[54,15,47,13],[54,17,47,15,"_optionAssertions"],[54,34,47,32],[54,35,47,33,"assertBoolean"],[54,48,37,26],[55,0,48,2,"comments"],[55,4,48,2,"comments"],[55,12,48,10],[55,14,48,12,"_optionAssertions"],[55,31,48,29],[55,32,48,30,"assertBoolean"],[55,45,37,26],[56,0,49,2,"shouldPrintComment"],[56,4,49,2,"shouldPrintComment"],[56,22,49,20],[56,24,49,22,"_optionAssertions"],[56,41,49,39],[56,42,49,40,"assertFunction"],[56,56,37,26],[57,0,50,2,"compact"],[57,4,50,2,"compact"],[57,11,50,9],[57,13,50,11,"_optionAssertions"],[57,30,50,28],[57,31,50,29,"assertCompact"],[57,44,37,26],[58,0,51,2,"minified"],[58,4,51,2,"minified"],[58,12,51,10],[58,14,51,12,"_optionAssertions"],[58,31,51,29],[58,32,51,30,"assertBoolean"],[58,45,37,26],[59,0,52,2,"auxiliaryCommentBefore"],[59,4,52,2,"auxiliaryCommentBefore"],[59,26,52,24],[59,28,52,26,"_optionAssertions"],[59,45,52,43],[59,46,52,44,"assertString"],[59,58,37,26],[60,0,53,2,"auxiliaryCommentAfter"],[60,4,53,2,"auxiliaryCommentAfter"],[60,25,53,23],[60,27,53,25,"_optionAssertions"],[60,44,53,42],[60,45,53,43,"assertString"],[60,57,37,26],[61,0,54,2,"sourceType"],[61,4,54,2,"sourceType"],[61,14,54,12],[61,16,54,14,"_optionAssertions"],[61,33,54,31],[61,34,54,32,"assertSourceType"],[61,50,37,26],[62,0,55,2,"wrapPluginVisitorMethod"],[62,4,55,2,"wrapPluginVisitorMethod"],[62,27,55,25],[62,29,55,27,"_optionAssertions"],[62,46,55,44],[62,47,55,45,"assertFunction"],[62,61,37,26],[63,0,56,2,"highlightCode"],[63,4,56,2,"highlightCode"],[63,17,56,15],[63,19,56,17,"_optionAssertions"],[63,36,56,34],[63,37,56,35,"assertBoolean"],[63,50,37,26],[64,0,57,2,"sourceMaps"],[64,4,57,2,"sourceMaps"],[64,14,57,12],[64,16,57,14,"_optionAssertions"],[64,33,57,31],[64,34,57,32,"assertSourceMaps"],[64,50,37,26],[65,0,58,2,"sourceMap"],[65,4,58,2,"sourceMap"],[65,13,58,11],[65,15,58,13,"_optionAssertions"],[65,32,58,30],[65,33,58,31,"assertSourceMaps"],[65,49,37,26],[66,0,59,2,"sourceFileName"],[66,4,59,2,"sourceFileName"],[66,18,59,16],[66,20,59,18,"_optionAssertions"],[66,37,59,35],[66,38,59,36,"assertString"],[66,50,37,26],[67,0,60,2,"sourceRoot"],[67,4,60,2,"sourceRoot"],[67,14,60,12],[67,16,60,14,"_optionAssertions"],[67,33,60,31],[67,34,60,32,"assertString"],[67,46,37,26],[68,0,61,2,"getModuleId"],[68,4,61,2,"getModuleId"],[68,15,61,13],[68,17,61,15,"_optionAssertions"],[68,34,61,32],[68,35,61,33,"assertFunction"],[68,49,37,26],[69,0,62,2,"moduleRoot"],[69,4,62,2,"moduleRoot"],[69,14,62,12],[69,16,62,14,"_optionAssertions"],[69,33,62,31],[69,34,62,32,"assertString"],[69,46,37,26],[70,0,63,2,"moduleIds"],[70,4,63,2,"moduleIds"],[70,13,63,11],[70,15,63,13,"_optionAssertions"],[70,32,63,30],[70,33,63,31,"assertBoolean"],[70,46,37,26],[71,0,64,2,"moduleId"],[71,4,64,2,"moduleId"],[71,12,64,10],[71,14,64,12,"_optionAssertions"],[71,31,64,29],[71,32,64,30,"assertString"],[71,44,37,26],[72,0,65,2,"parserOpts"],[72,4,65,2,"parserOpts"],[72,14,65,12],[72,16,65,14,"_optionAssertions"],[72,33,65,31],[72,34,65,32,"assertObject"],[72,46,37,26],[73,0,66,2,"generatorOpts"],[73,4,66,2,"generatorOpts"],[73,17,66,15],[73,19,66,17,"_optionAssertions"],[73,36,66,34],[73,37,66,35,"assertObject"],[74,0,37,26],[74,3,37,0],[76,0,69,0],[76,11,69,9,"getSource"],[76,20,69,0],[76,21,69,19,"loc"],[76,24,69,0],[76,26,69,24],[77,0,70,2],[77,11,70,9,"loc"],[77,14,70,12],[77,15,70,13,"type"],[77,19,70,9],[77,24,70,22],[77,30,70,9],[77,33,70,31,"loc"],[77,36,70,34],[77,37,70,35,"source"],[77,43,70,9],[77,46,70,44,"getSource"],[77,55,70,53],[77,56,70,54,"loc"],[77,59,70,57],[77,60,70,58,"parent"],[77,66,70,53],[77,67,70,2],[78,0,71,1],[80,0,73,0],[80,11,73,9,"validate"],[80,19,73,0],[80,20,73,18,"type"],[80,24,73,0],[80,26,73,24,"opts"],[80,30,73,0],[80,32,73,30],[81,0,74,2],[81,11,74,9,"validateNested"],[81,25,74,23],[81,26,74,24],[82,0,75,4,"type"],[82,6,75,4,"type"],[82,10,75,8],[82,12,75,10],[82,18,74,24],[83,0,76,4,"source"],[83,6,76,4,"source"],[83,12,76,10],[83,14,76,12,"type"],[84,0,74,24],[84,5,74,23],[84,7,77,5,"opts"],[84,11,74,23],[84,12,74,2],[85,0,78,1],[87,0,80,0],[87,11,80,9,"validateNested"],[87,25,80,0],[87,26,80,24,"loc"],[87,29,80,0],[87,31,80,29,"opts"],[87,35,80,0],[87,37,80,35],[88,0,81,2],[88,8,81,8,"type"],[88,12,81,12],[88,15,81,15,"getSource"],[88,24,81,24],[88,25,81,25,"loc"],[88,28,81,24],[88,29,81,2],[89,0,82,2,"assertNoDuplicateSourcemap"],[89,4,82,2,"assertNoDuplicateSourcemap"],[89,30,82,28],[89,31,82,29,"opts"],[89,35,82,28],[89,36,82,2],[90,0,83,2,"Object"],[90,4,83,2,"Object"],[90,10,83,8],[90,11,83,9,"keys"],[90,15,83,2],[90,16,83,14,"opts"],[90,20,83,2],[90,22,83,20,"forEach"],[90,29,83,2],[90,30,83,28],[90,40,83,28,"key"],[90,43,83,31],[90,45,83,35],[91,0,84,4],[91,10,84,10,"optLoc"],[91,16,84,16],[91,19,84,19],[92,0,85,6,"type"],[92,8,85,6,"type"],[92,12,85,10],[92,14,85,12],[92,22,84,19],[93,0,86,6,"name"],[93,8,86,6,"name"],[93,12,86,10],[93,14,86,12,"key"],[93,17,84,19],[94,0,87,6,"parent"],[94,8,87,6,"parent"],[94,14,87,12],[94,16,87,14,"loc"],[95,0,84,19],[95,7,84,4],[97,0,90,4],[97,10,90,8,"type"],[97,14,90,12],[97,19,90,17],[97,27,90,8],[97,31,90,29,"NONPRESET_VALIDATORS"],[97,51,90,49],[97,52,90,50,"key"],[97,55,90,49],[97,56,90,4],[97,58,90,56],[98,0,91,6],[98,14,91,12],[98,18,91,16,"Error"],[98,23,91,12],[98,24,91,25],[98,25,91,26],[98,28,91,29,"_optionAssertions"],[98,45,91,46],[98,46,91,47,"msg"],[98,49,91,25],[98,51,91,52,"optLoc"],[98,57,91,25],[98,58,91,12],[98,97,91,6],[99,0,92,5],[101,0,94,4],[101,10,94,8,"type"],[101,14,94,12],[101,19,94,17],[101,30,94,8],[101,34,94,32,"ROOT_VALIDATORS"],[101,49,94,47],[101,50,94,48,"key"],[101,53,94,47],[101,54,94,4],[101,56,94,54],[102,0,95,6],[102,14,95,12],[102,18,95,16,"Error"],[102,23,95,12],[102,24,95,25],[102,25,95,26],[102,28,95,29,"_optionAssertions"],[102,45,95,46],[102,46,95,47,"msg"],[102,49,95,25],[102,51,95,52,"optLoc"],[102,57,95,25],[102,58,95,12],[102,109,95,6],[103,0,96,5],[105,0,98,4],[105,10,98,8,"type"],[105,14,98,12],[105,19,98,17],[105,30,98,8],[105,34,98,32,"type"],[105,38,98,36],[105,43,98,41],[105,55,98,8],[105,59,98,57,"BABELRC_VALIDATORS"],[105,77,98,75],[105,78,98,76,"key"],[105,81,98,75],[105,82,98,4],[105,84,98,82],[106,0,99,6],[106,12,99,10,"type"],[106,16,99,14],[106,21,99,19],[106,34,99,10],[106,38,99,36,"type"],[106,42,99,40],[106,47,99,45],[106,60,99,6],[106,62,99,60],[107,0,100,8],[107,16,100,14],[107,20,100,18,"Error"],[107,25,100,14],[107,26,100,27],[107,27,100,28],[107,30,100,31,"_optionAssertions"],[107,47,100,48],[107,48,100,49,"msg"],[107,51,100,27],[107,53,100,54,"optLoc"],[107,59,100,27],[107,60,100,24],[107,195,100,14],[107,196,100,8],[108,0,101,7],[110,0,103,6],[110,14,103,12],[110,18,103,16,"Error"],[110,23,103,12],[110,24,103,25],[110,25,103,26],[110,28,103,29,"_optionAssertions"],[110,45,103,46],[110,46,103,47,"msg"],[110,49,103,25],[110,51,103,52,"optLoc"],[110,57,103,25],[110,58,103,12],[110,149,103,6],[111,0,104,5],[113,0,106,4],[113,10,106,10,"validator"],[113,19,106,19],[113,22,106,22,"COMMON_VALIDATORS"],[113,39,106,39],[113,40,106,40,"key"],[113,43,106,39],[113,44,106,22],[113,48,106,48,"NONPRESET_VALIDATORS"],[113,68,106,68],[113,69,106,69,"key"],[113,72,106,68],[113,73,106,22],[113,77,106,77,"BABELRC_VALIDATORS"],[113,95,106,95],[113,96,106,96,"key"],[113,99,106,95],[113,100,106,22],[113,104,106,104,"ROOT_VALIDATORS"],[113,119,106,119],[113,120,106,120,"key"],[113,123,106,119],[113,124,106,22],[113,128,106,128,"throwUnknownError"],[113,145,106,4],[114,0,107,4,"validator"],[114,6,107,4,"validator"],[114,15,107,13],[114,16,107,14,"optLoc"],[114,22,107,13],[114,24,107,22,"opts"],[114,28,107,26],[114,29,107,27,"key"],[114,32,107,26],[114,33,107,13],[114,34,107,4],[115,0,108,3],[115,5,83,2],[116,0,109,2],[116,11,109,9,"opts"],[116,15,109,2],[117,0,110,1],[119,0,112,0],[119,11,112,9,"throwUnknownError"],[119,28,112,0],[119,29,112,27,"loc"],[119,32,112,0],[119,34,112,32],[120,0,113,2],[120,8,113,8,"key"],[120,11,113,11],[120,14,113,14,"loc"],[120,17,113,17],[120,18,113,18,"name"],[120,22,113,2],[122,0,115,2],[122,8,115,6,"_removed"],[122,16,115,14],[122,17,115,15,"default"],[122,24,115,6],[122,25,115,23,"key"],[122,28,115,6],[122,29,115,2],[122,31,115,29],[123,0,115,29],[123,33,119,8,"_removed"],[123,41,119,16],[123,42,119,17,"default"],[123,49,119,8],[123,50,119,25,"key"],[123,53,119,8],[123,54,115,29],[124,0,115,29],[124,10,117,6,"message"],[124,17,115,29],[124,41,117,6,"message"],[124,48,115,29],[125,0,115,29],[125,55,118,6,"version"],[125,62,115,29],[126,0,115,29],[126,10,118,6,"version"],[126,17,115,29],[126,55,118,16],[126,56,115,29],[127,0,120,4],[127,12,120,10],[127,16,120,14,"ReferenceError"],[127,30,120,10],[127,56,120,52,"version"],[127,63,120,10],[127,80,120,71],[127,81,120,72],[127,84,120,75,"_optionAssertions"],[127,101,120,92],[127,102,120,93,"msg"],[127,105,120,71],[127,107,120,98,"loc"],[127,110,120,71],[127,111,120,10],[127,122,120,108,"message"],[127,129,120,10],[127,130,120,4],[128,0,121,3],[128,5,115,2],[128,11,121,9],[129,0,122,4],[129,10,122,10,"unknownOptErr"],[129,23,122,23],[129,47,122,45],[129,48,122,46],[129,51,122,49,"_optionAssertions"],[129,68,122,66],[129,69,122,67,"msg"],[129,72,122,45],[129,74,122,72,"loc"],[129,77,122,45],[129,78,122,23],[129,177,122,4],[130,0,123,4],[130,12,123,10],[130,16,123,14,"ReferenceError"],[130,30,123,10],[130,31,123,29,"unknownOptErr"],[130,44,123,10],[130,45,123,4],[131,0,124,3],[132,0,125,1],[134,0,127,0],[134,11,127,9,"has"],[134,14,127,0],[134,15,127,13,"obj"],[134,18,127,0],[134,20,127,18,"key"],[134,23,127,0],[134,25,127,23],[135,0,128,2],[135,11,128,9,"Object"],[135,17,128,15],[135,18,128,16,"prototype"],[135,27,128,9],[135,28,128,26,"hasOwnProperty"],[135,42,128,9],[135,43,128,41,"call"],[135,47,128,9],[135,48,128,46,"obj"],[135,51,128,9],[135,53,128,51,"key"],[135,56,128,9],[135,57,128,2],[136,0,129,1],[138,0,131,0],[138,11,131,9,"assertNoDuplicateSourcemap"],[138,37,131,0],[138,38,131,36,"opts"],[138,42,131,0],[138,44,131,42],[139,0,132,2],[139,8,132,6,"has"],[139,11,132,9],[139,12,132,10,"opts"],[139,16,132,9],[139,18,132,16],[139,29,132,9],[139,30,132,6],[139,34,132,32,"has"],[139,37,132,35],[139,38,132,36,"opts"],[139,42,132,35],[139,44,132,42],[139,56,132,35],[139,57,132,2],[139,59,132,57],[140,0,133,4],[140,12,133,10],[140,16,133,14,"Error"],[140,21,133,10],[140,22,133,20],[140,79,133,10],[140,80,133,4],[141,0,134,3],[142,0,135,1],[144,0,137,0],[144,11,137,9,"assertEnvSet"],[144,23,137,0],[144,24,137,22,"loc"],[144,27,137,0],[144,29,137,27,"value"],[144,34,137,0],[144,36,137,34],[145,0,138,2],[145,8,138,6,"loc"],[145,11,138,9],[145,12,138,10,"parent"],[145,18,138,6],[145,19,138,17,"type"],[145,23,138,6],[145,28,138,26],[145,33,138,2],[145,35,138,33],[146,0,139,4],[146,12,139,10],[146,16,139,14,"Error"],[146,21,139,10],[146,22,139,23],[146,23,139,24],[146,26,139,27,"_optionAssertions"],[146,43,139,44],[146,44,139,45,"msg"],[146,47,139,23],[146,49,139,50,"loc"],[146,52,139,23],[146,53,139,10],[146,103,139,4],[147,0,140,3],[149,0,142,2],[149,8,142,8,"parent"],[149,14,142,14],[149,17,142,17,"loc"],[149,20,142,20],[149,21,142,21,"parent"],[149,27,142,2],[150,0,143,2],[150,8,143,8,"obj"],[150,11,143,11],[150,14,143,14],[150,15,143,15],[150,18,143,18,"_optionAssertions"],[150,35,143,35],[150,36,143,36,"assertObject"],[150,48,143,14],[150,50,143,50,"loc"],[150,53,143,14],[150,55,143,55,"value"],[150,60,143,14],[150,61,143,2],[152,0,145,2],[152,8,145,6,"obj"],[152,11,145,2],[152,13,145,11],[153,0,146,4],[153,38,146,26,"Object"],[153,44,146,32],[153,45,146,33,"keys"],[153,49,146,26],[153,50,146,38,"obj"],[153,53,146,26],[153,54,146,4],[153,88,146,44],[154,0,146,9],[154,12,146,15,"envName"],[154,19,146,22],[154,38,146,9],[155,0,147,6],[155,12,147,12,"env"],[155,15,147,15],[155,18,147,18],[155,19,147,19],[155,22,147,22,"_optionAssertions"],[155,39,147,39],[155,40,147,40,"assertObject"],[155,52,147,18],[155,54,147,54],[155,55,147,55],[155,58,147,58,"_optionAssertions"],[155,75,147,75],[155,76,147,76,"access"],[155,82,147,54],[155,84,147,84,"loc"],[155,87,147,54],[155,89,147,89,"envName"],[155,96,147,54],[155,97,147,18],[155,99,147,99,"obj"],[155,102,147,102],[155,103,147,103,"envName"],[155,110,147,102],[155,111,147,18],[155,112,147,6],[156,0,148,6],[156,12,148,10],[156,13,148,11,"env"],[156,16,148,6],[156,18,148,16],[157,0,149,6],[157,12,149,12,"envLoc"],[157,18,149,18],[157,21,149,21],[158,0,150,8,"type"],[158,10,150,8,"type"],[158,14,150,12],[158,16,150,14],[158,21,149,21],[159,0,151,8,"name"],[159,10,151,8,"name"],[159,14,151,12],[159,16,151,14,"envName"],[159,23,149,21],[160,0,152,8,"parent"],[160,10,152,8,"parent"],[160,16,152,14],[160,18,152,8,"parent"],[161,0,149,21],[161,9,149,6],[162,0,154,6,"validateNested"],[162,8,154,6,"validateNested"],[162,22,154,20],[162,23,154,21,"envLoc"],[162,29,154,20],[162,31,154,29,"env"],[162,34,154,20],[162,35,154,6],[163,0,155,5],[164,0,156,3],[166,0,158,2],[166,11,158,9,"obj"],[166,14,158,2],[167,0,159,1],[169,0,161,0],[169,11,161,9,"assertOverridesList"],[169,30,161,0],[169,31,161,29,"loc"],[169,34,161,0],[169,36,161,34,"value"],[169,41,161,0],[169,43,161,41],[170,0,162,2],[170,8,162,6,"loc"],[170,11,162,9],[170,12,162,10,"parent"],[170,18,162,6],[170,19,162,17,"type"],[170,23,162,6],[170,28,162,26],[170,33,162,2],[170,35,162,33],[171,0,163,4],[171,12,163,10],[171,16,163,14,"Error"],[171,21,163,10],[171,22,163,23],[171,23,163,24],[171,26,163,27,"_optionAssertions"],[171,43,163,44],[171,44,163,45,"msg"],[171,47,163,23],[171,49,163,50,"loc"],[171,52,163,23],[171,53,163,10],[171,95,163,4],[172,0,164,3],[174,0,166,2],[174,8,166,6,"loc"],[174,11,166,9],[174,12,166,10,"parent"],[174,18,166,6],[174,19,166,17,"type"],[174,23,166,6],[174,28,166,26],[174,39,166,2],[174,41,166,39],[175,0,167,4],[175,12,167,10],[175,16,167,14,"Error"],[175,21,167,10],[175,22,167,23],[175,23,167,24],[175,26,167,27,"_optionAssertions"],[175,43,167,44],[175,44,167,45,"msg"],[175,47,167,23],[175,49,167,50,"loc"],[175,52,167,23],[175,53,167,10],[175,101,167,4],[176,0,168,3],[178,0,170,2],[178,8,170,8,"parent"],[178,14,170,14],[178,17,170,17,"loc"],[178,20,170,20],[178,21,170,21,"parent"],[178,27,170,2],[179,0,171,2],[179,8,171,8,"arr"],[179,11,171,11],[179,14,171,14],[179,15,171,15],[179,18,171,18,"_optionAssertions"],[179,35,171,35],[179,36,171,36,"assertArray"],[179,47,171,14],[179,49,171,49,"loc"],[179,52,171,14],[179,54,171,54,"value"],[179,59,171,14],[179,60,171,2],[181,0,173,2],[181,8,173,6,"arr"],[181,11,173,2],[181,13,173,11],[182,0,174,4],[182,27,174,32,"arr"],[182,30,174,35],[182,31,174,36,"entries"],[182,38,174,32],[182,40,174,4],[182,201,174,47],[183,0,174,47],[185,0,174,47],[186,0,174,47],[187,0,174,47],[188,0,174,47],[189,0,174,47],[190,0,174,47],[191,0,174,47],[192,0,174,47],[194,0,174,47],[196,0,174,47],[198,0,174,47],[198,12,174,16,"index"],[198,18,174,47],[199,0,174,47],[199,12,174,23,"item"],[199,17,174,47],[201,0,175,6],[201,12,175,12,"objLoc"],[201,19,175,18],[201,22,175,21],[201,23,175,22],[201,26,175,25,"_optionAssertions"],[201,43,175,42],[201,44,175,43,"access"],[201,50,175,21],[201,52,175,51,"loc"],[201,55,175,21],[201,57,175,56,"index"],[201,63,175,21],[201,64,175,6],[203,0,176,6],[203,12,176,12,"env"],[203,16,176,15],[203,19,176,18],[203,20,176,19],[203,23,176,22,"_optionAssertions"],[203,40,176,39],[203,41,176,40,"assertObject"],[203,53,176,18],[203,55,176,54,"objLoc"],[203,62,176,18],[203,64,176,62,"item"],[203,69,176,18],[203,70,176,6],[205,0,177,6],[205,12,177,10],[205,13,177,11,"env"],[205,17,177,6],[205,19,177,16],[205,25,177,22],[205,29,177,26,"Error"],[205,34,177,22],[205,35,177,35],[205,36,177,36],[205,39,177,39,"_optionAssertions"],[205,56,177,56],[205,57,177,57,"msg"],[205,60,177,35],[205,62,177,62,"objLoc"],[205,69,177,35],[205,70,177,22],[205,94,177,16],[206,0,178,6],[206,12,178,12,"overridesLoc"],[206,25,178,24],[206,28,178,27],[207,0,179,8,"type"],[207,10,179,8,"type"],[207,14,179,12],[207,16,179,14],[207,27,178,27],[208,0,180,8,"index"],[208,10,180,8,"index"],[208,15,180,13],[208,17,180,8,"index"],[208,23,178,27],[209,0,181,8,"parent"],[209,10,181,8,"parent"],[209,16,181,14],[209,18,181,8,"parent"],[210,0,178,27],[210,9,178,6],[211,0,183,6,"validateNested"],[211,8,183,6,"validateNested"],[211,22,183,20],[211,23,183,21,"overridesLoc"],[211,36,183,20],[211,38,183,35,"env"],[211,42,183,20],[211,43,183,6],[212,0,184,5],[213,0,185,3],[215,0,187,2],[215,11,187,9,"arr"],[215,14,187,2],[216,0,188,1]]},"type":"js/module"}]}