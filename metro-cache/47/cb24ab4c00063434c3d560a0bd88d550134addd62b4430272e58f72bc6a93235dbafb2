{"dependencies":[{"name":"../../validators/is","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.assertArrayExpression = assertArrayExpression;\n  exports.assertAssignmentExpression = assertAssignmentExpression;\n  exports.assertBinaryExpression = assertBinaryExpression;\n  exports.assertInterpreterDirective = assertInterpreterDirective;\n  exports.assertDirective = assertDirective;\n  exports.assertDirectiveLiteral = assertDirectiveLiteral;\n  exports.assertBlockStatement = assertBlockStatement;\n  exports.assertBreakStatement = assertBreakStatement;\n  exports.assertCallExpression = assertCallExpression;\n  exports.assertCatchClause = assertCatchClause;\n  exports.assertConditionalExpression = assertConditionalExpression;\n  exports.assertContinueStatement = assertContinueStatement;\n  exports.assertDebuggerStatement = assertDebuggerStatement;\n  exports.assertDoWhileStatement = assertDoWhileStatement;\n  exports.assertEmptyStatement = assertEmptyStatement;\n  exports.assertExpressionStatement = assertExpressionStatement;\n  exports.assertFile = assertFile;\n  exports.assertForInStatement = assertForInStatement;\n  exports.assertForStatement = assertForStatement;\n  exports.assertFunctionDeclaration = assertFunctionDeclaration;\n  exports.assertFunctionExpression = assertFunctionExpression;\n  exports.assertIdentifier = assertIdentifier;\n  exports.assertIfStatement = assertIfStatement;\n  exports.assertLabeledStatement = assertLabeledStatement;\n  exports.assertStringLiteral = assertStringLiteral;\n  exports.assertNumericLiteral = assertNumericLiteral;\n  exports.assertNullLiteral = assertNullLiteral;\n  exports.assertBooleanLiteral = assertBooleanLiteral;\n  exports.assertRegExpLiteral = assertRegExpLiteral;\n  exports.assertLogicalExpression = assertLogicalExpression;\n  exports.assertMemberExpression = assertMemberExpression;\n  exports.assertNewExpression = assertNewExpression;\n  exports.assertProgram = assertProgram;\n  exports.assertObjectExpression = assertObjectExpression;\n  exports.assertObjectMethod = assertObjectMethod;\n  exports.assertObjectProperty = assertObjectProperty;\n  exports.assertRestElement = assertRestElement;\n  exports.assertReturnStatement = assertReturnStatement;\n  exports.assertSequenceExpression = assertSequenceExpression;\n  exports.assertParenthesizedExpression = assertParenthesizedExpression;\n  exports.assertSwitchCase = assertSwitchCase;\n  exports.assertSwitchStatement = assertSwitchStatement;\n  exports.assertThisExpression = assertThisExpression;\n  exports.assertThrowStatement = assertThrowStatement;\n  exports.assertTryStatement = assertTryStatement;\n  exports.assertUnaryExpression = assertUnaryExpression;\n  exports.assertUpdateExpression = assertUpdateExpression;\n  exports.assertVariableDeclaration = assertVariableDeclaration;\n  exports.assertVariableDeclarator = assertVariableDeclarator;\n  exports.assertWhileStatement = assertWhileStatement;\n  exports.assertWithStatement = assertWithStatement;\n  exports.assertAssignmentPattern = assertAssignmentPattern;\n  exports.assertArrayPattern = assertArrayPattern;\n  exports.assertArrowFunctionExpression = assertArrowFunctionExpression;\n  exports.assertClassBody = assertClassBody;\n  exports.assertClassDeclaration = assertClassDeclaration;\n  exports.assertClassExpression = assertClassExpression;\n  exports.assertExportAllDeclaration = assertExportAllDeclaration;\n  exports.assertExportDefaultDeclaration = assertExportDefaultDeclaration;\n  exports.assertExportNamedDeclaration = assertExportNamedDeclaration;\n  exports.assertExportSpecifier = assertExportSpecifier;\n  exports.assertForOfStatement = assertForOfStatement;\n  exports.assertImportDeclaration = assertImportDeclaration;\n  exports.assertImportDefaultSpecifier = assertImportDefaultSpecifier;\n  exports.assertImportNamespaceSpecifier = assertImportNamespaceSpecifier;\n  exports.assertImportSpecifier = assertImportSpecifier;\n  exports.assertMetaProperty = assertMetaProperty;\n  exports.assertClassMethod = assertClassMethod;\n  exports.assertObjectPattern = assertObjectPattern;\n  exports.assertSpreadElement = assertSpreadElement;\n  exports.assertSuper = assertSuper;\n  exports.assertTaggedTemplateExpression = assertTaggedTemplateExpression;\n  exports.assertTemplateElement = assertTemplateElement;\n  exports.assertTemplateLiteral = assertTemplateLiteral;\n  exports.assertYieldExpression = assertYieldExpression;\n  exports.assertAnyTypeAnnotation = assertAnyTypeAnnotation;\n  exports.assertArrayTypeAnnotation = assertArrayTypeAnnotation;\n  exports.assertBooleanTypeAnnotation = assertBooleanTypeAnnotation;\n  exports.assertBooleanLiteralTypeAnnotation = assertBooleanLiteralTypeAnnotation;\n  exports.assertNullLiteralTypeAnnotation = assertNullLiteralTypeAnnotation;\n  exports.assertClassImplements = assertClassImplements;\n  exports.assertDeclareClass = assertDeclareClass;\n  exports.assertDeclareFunction = assertDeclareFunction;\n  exports.assertDeclareInterface = assertDeclareInterface;\n  exports.assertDeclareModule = assertDeclareModule;\n  exports.assertDeclareModuleExports = assertDeclareModuleExports;\n  exports.assertDeclareTypeAlias = assertDeclareTypeAlias;\n  exports.assertDeclareOpaqueType = assertDeclareOpaqueType;\n  exports.assertDeclareVariable = assertDeclareVariable;\n  exports.assertDeclareExportDeclaration = assertDeclareExportDeclaration;\n  exports.assertDeclareExportAllDeclaration = assertDeclareExportAllDeclaration;\n  exports.assertDeclaredPredicate = assertDeclaredPredicate;\n  exports.assertExistsTypeAnnotation = assertExistsTypeAnnotation;\n  exports.assertFunctionTypeAnnotation = assertFunctionTypeAnnotation;\n  exports.assertFunctionTypeParam = assertFunctionTypeParam;\n  exports.assertGenericTypeAnnotation = assertGenericTypeAnnotation;\n  exports.assertInferredPredicate = assertInferredPredicate;\n  exports.assertInterfaceExtends = assertInterfaceExtends;\n  exports.assertInterfaceDeclaration = assertInterfaceDeclaration;\n  exports.assertInterfaceTypeAnnotation = assertInterfaceTypeAnnotation;\n  exports.assertIntersectionTypeAnnotation = assertIntersectionTypeAnnotation;\n  exports.assertMixedTypeAnnotation = assertMixedTypeAnnotation;\n  exports.assertEmptyTypeAnnotation = assertEmptyTypeAnnotation;\n  exports.assertNullableTypeAnnotation = assertNullableTypeAnnotation;\n  exports.assertNumberLiteralTypeAnnotation = assertNumberLiteralTypeAnnotation;\n  exports.assertNumberTypeAnnotation = assertNumberTypeAnnotation;\n  exports.assertObjectTypeAnnotation = assertObjectTypeAnnotation;\n  exports.assertObjectTypeInternalSlot = assertObjectTypeInternalSlot;\n  exports.assertObjectTypeCallProperty = assertObjectTypeCallProperty;\n  exports.assertObjectTypeIndexer = assertObjectTypeIndexer;\n  exports.assertObjectTypeProperty = assertObjectTypeProperty;\n  exports.assertObjectTypeSpreadProperty = assertObjectTypeSpreadProperty;\n  exports.assertOpaqueType = assertOpaqueType;\n  exports.assertQualifiedTypeIdentifier = assertQualifiedTypeIdentifier;\n  exports.assertStringLiteralTypeAnnotation = assertStringLiteralTypeAnnotation;\n  exports.assertStringTypeAnnotation = assertStringTypeAnnotation;\n  exports.assertThisTypeAnnotation = assertThisTypeAnnotation;\n  exports.assertTupleTypeAnnotation = assertTupleTypeAnnotation;\n  exports.assertTypeofTypeAnnotation = assertTypeofTypeAnnotation;\n  exports.assertTypeAlias = assertTypeAlias;\n  exports.assertTypeAnnotation = assertTypeAnnotation;\n  exports.assertTypeCastExpression = assertTypeCastExpression;\n  exports.assertTypeParameter = assertTypeParameter;\n  exports.assertTypeParameterDeclaration = assertTypeParameterDeclaration;\n  exports.assertTypeParameterInstantiation = assertTypeParameterInstantiation;\n  exports.assertUnionTypeAnnotation = assertUnionTypeAnnotation;\n  exports.assertVariance = assertVariance;\n  exports.assertVoidTypeAnnotation = assertVoidTypeAnnotation;\n  exports.assertEnumDeclaration = assertEnumDeclaration;\n  exports.assertEnumBooleanBody = assertEnumBooleanBody;\n  exports.assertEnumNumberBody = assertEnumNumberBody;\n  exports.assertEnumStringBody = assertEnumStringBody;\n  exports.assertEnumSymbolBody = assertEnumSymbolBody;\n  exports.assertEnumBooleanMember = assertEnumBooleanMember;\n  exports.assertEnumNumberMember = assertEnumNumberMember;\n  exports.assertEnumStringMember = assertEnumStringMember;\n  exports.assertEnumDefaultedMember = assertEnumDefaultedMember;\n  exports.assertJSXAttribute = assertJSXAttribute;\n  exports.assertJSXClosingElement = assertJSXClosingElement;\n  exports.assertJSXElement = assertJSXElement;\n  exports.assertJSXEmptyExpression = assertJSXEmptyExpression;\n  exports.assertJSXExpressionContainer = assertJSXExpressionContainer;\n  exports.assertJSXSpreadChild = assertJSXSpreadChild;\n  exports.assertJSXIdentifier = assertJSXIdentifier;\n  exports.assertJSXMemberExpression = assertJSXMemberExpression;\n  exports.assertJSXNamespacedName = assertJSXNamespacedName;\n  exports.assertJSXOpeningElement = assertJSXOpeningElement;\n  exports.assertJSXSpreadAttribute = assertJSXSpreadAttribute;\n  exports.assertJSXText = assertJSXText;\n  exports.assertJSXFragment = assertJSXFragment;\n  exports.assertJSXOpeningFragment = assertJSXOpeningFragment;\n  exports.assertJSXClosingFragment = assertJSXClosingFragment;\n  exports.assertNoop = assertNoop;\n  exports.assertPlaceholder = assertPlaceholder;\n  exports.assertV8IntrinsicIdentifier = assertV8IntrinsicIdentifier;\n  exports.assertArgumentPlaceholder = assertArgumentPlaceholder;\n  exports.assertAwaitExpression = assertAwaitExpression;\n  exports.assertBindExpression = assertBindExpression;\n  exports.assertClassProperty = assertClassProperty;\n  exports.assertOptionalMemberExpression = assertOptionalMemberExpression;\n  exports.assertPipelineTopicExpression = assertPipelineTopicExpression;\n  exports.assertPipelineBareFunction = assertPipelineBareFunction;\n  exports.assertPipelinePrimaryTopicReference = assertPipelinePrimaryTopicReference;\n  exports.assertOptionalCallExpression = assertOptionalCallExpression;\n  exports.assertClassPrivateProperty = assertClassPrivateProperty;\n  exports.assertClassPrivateMethod = assertClassPrivateMethod;\n  exports.assertImport = assertImport;\n  exports.assertDecorator = assertDecorator;\n  exports.assertDoExpression = assertDoExpression;\n  exports.assertExportDefaultSpecifier = assertExportDefaultSpecifier;\n  exports.assertExportNamespaceSpecifier = assertExportNamespaceSpecifier;\n  exports.assertPrivateName = assertPrivateName;\n  exports.assertBigIntLiteral = assertBigIntLiteral;\n  exports.assertTSParameterProperty = assertTSParameterProperty;\n  exports.assertTSDeclareFunction = assertTSDeclareFunction;\n  exports.assertTSDeclareMethod = assertTSDeclareMethod;\n  exports.assertTSQualifiedName = assertTSQualifiedName;\n  exports.assertTSCallSignatureDeclaration = assertTSCallSignatureDeclaration;\n  exports.assertTSConstructSignatureDeclaration = assertTSConstructSignatureDeclaration;\n  exports.assertTSPropertySignature = assertTSPropertySignature;\n  exports.assertTSMethodSignature = assertTSMethodSignature;\n  exports.assertTSIndexSignature = assertTSIndexSignature;\n  exports.assertTSAnyKeyword = assertTSAnyKeyword;\n  exports.assertTSBooleanKeyword = assertTSBooleanKeyword;\n  exports.assertTSBigIntKeyword = assertTSBigIntKeyword;\n  exports.assertTSNeverKeyword = assertTSNeverKeyword;\n  exports.assertTSNullKeyword = assertTSNullKeyword;\n  exports.assertTSNumberKeyword = assertTSNumberKeyword;\n  exports.assertTSObjectKeyword = assertTSObjectKeyword;\n  exports.assertTSStringKeyword = assertTSStringKeyword;\n  exports.assertTSSymbolKeyword = assertTSSymbolKeyword;\n  exports.assertTSUndefinedKeyword = assertTSUndefinedKeyword;\n  exports.assertTSUnknownKeyword = assertTSUnknownKeyword;\n  exports.assertTSVoidKeyword = assertTSVoidKeyword;\n  exports.assertTSThisType = assertTSThisType;\n  exports.assertTSFunctionType = assertTSFunctionType;\n  exports.assertTSConstructorType = assertTSConstructorType;\n  exports.assertTSTypeReference = assertTSTypeReference;\n  exports.assertTSTypePredicate = assertTSTypePredicate;\n  exports.assertTSTypeQuery = assertTSTypeQuery;\n  exports.assertTSTypeLiteral = assertTSTypeLiteral;\n  exports.assertTSArrayType = assertTSArrayType;\n  exports.assertTSTupleType = assertTSTupleType;\n  exports.assertTSOptionalType = assertTSOptionalType;\n  exports.assertTSRestType = assertTSRestType;\n  exports.assertTSUnionType = assertTSUnionType;\n  exports.assertTSIntersectionType = assertTSIntersectionType;\n  exports.assertTSConditionalType = assertTSConditionalType;\n  exports.assertTSInferType = assertTSInferType;\n  exports.assertTSParenthesizedType = assertTSParenthesizedType;\n  exports.assertTSTypeOperator = assertTSTypeOperator;\n  exports.assertTSIndexedAccessType = assertTSIndexedAccessType;\n  exports.assertTSMappedType = assertTSMappedType;\n  exports.assertTSLiteralType = assertTSLiteralType;\n  exports.assertTSExpressionWithTypeArguments = assertTSExpressionWithTypeArguments;\n  exports.assertTSInterfaceDeclaration = assertTSInterfaceDeclaration;\n  exports.assertTSInterfaceBody = assertTSInterfaceBody;\n  exports.assertTSTypeAliasDeclaration = assertTSTypeAliasDeclaration;\n  exports.assertTSAsExpression = assertTSAsExpression;\n  exports.assertTSTypeAssertion = assertTSTypeAssertion;\n  exports.assertTSEnumDeclaration = assertTSEnumDeclaration;\n  exports.assertTSEnumMember = assertTSEnumMember;\n  exports.assertTSModuleDeclaration = assertTSModuleDeclaration;\n  exports.assertTSModuleBlock = assertTSModuleBlock;\n  exports.assertTSImportType = assertTSImportType;\n  exports.assertTSImportEqualsDeclaration = assertTSImportEqualsDeclaration;\n  exports.assertTSExternalModuleReference = assertTSExternalModuleReference;\n  exports.assertTSNonNullExpression = assertTSNonNullExpression;\n  exports.assertTSExportAssignment = assertTSExportAssignment;\n  exports.assertTSNamespaceExportDeclaration = assertTSNamespaceExportDeclaration;\n  exports.assertTSTypeAnnotation = assertTSTypeAnnotation;\n  exports.assertTSTypeParameterInstantiation = assertTSTypeParameterInstantiation;\n  exports.assertTSTypeParameterDeclaration = assertTSTypeParameterDeclaration;\n  exports.assertTSTypeParameter = assertTSTypeParameter;\n  exports.assertExpression = assertExpression;\n  exports.assertBinary = assertBinary;\n  exports.assertScopable = assertScopable;\n  exports.assertBlockParent = assertBlockParent;\n  exports.assertBlock = assertBlock;\n  exports.assertStatement = assertStatement;\n  exports.assertTerminatorless = assertTerminatorless;\n  exports.assertCompletionStatement = assertCompletionStatement;\n  exports.assertConditional = assertConditional;\n  exports.assertLoop = assertLoop;\n  exports.assertWhile = assertWhile;\n  exports.assertExpressionWrapper = assertExpressionWrapper;\n  exports.assertFor = assertFor;\n  exports.assertForXStatement = assertForXStatement;\n  exports.assertFunction = assertFunction;\n  exports.assertFunctionParent = assertFunctionParent;\n  exports.assertPureish = assertPureish;\n  exports.assertDeclaration = assertDeclaration;\n  exports.assertPatternLike = assertPatternLike;\n  exports.assertLVal = assertLVal;\n  exports.assertTSEntityName = assertTSEntityName;\n  exports.assertLiteral = assertLiteral;\n  exports.assertImmutable = assertImmutable;\n  exports.assertUserWhitespacable = assertUserWhitespacable;\n  exports.assertMethod = assertMethod;\n  exports.assertObjectMember = assertObjectMember;\n  exports.assertProperty = assertProperty;\n  exports.assertUnaryLike = assertUnaryLike;\n  exports.assertPattern = assertPattern;\n  exports.assertClass = assertClass;\n  exports.assertModuleDeclaration = assertModuleDeclaration;\n  exports.assertExportDeclaration = assertExportDeclaration;\n  exports.assertModuleSpecifier = assertModuleSpecifier;\n  exports.assertFlow = assertFlow;\n  exports.assertFlowType = assertFlowType;\n  exports.assertFlowBaseAnnotation = assertFlowBaseAnnotation;\n  exports.assertFlowDeclaration = assertFlowDeclaration;\n  exports.assertFlowPredicate = assertFlowPredicate;\n  exports.assertEnumBody = assertEnumBody;\n  exports.assertEnumMember = assertEnumMember;\n  exports.assertJSX = assertJSX;\n  exports.assertPrivate = assertPrivate;\n  exports.assertTSTypeElement = assertTSTypeElement;\n  exports.assertTSType = assertTSType;\n  exports.assertNumberLiteral = assertNumberLiteral;\n  exports.assertRegexLiteral = assertRegexLiteral;\n  exports.assertRestProperty = assertRestProperty;\n  exports.assertSpreadProperty = assertSpreadProperty;\n\n  var _is = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0], \"../../validators/is\"));\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      default: obj\n    };\n  }\n\n  function assert(type, node, opts) {\n    if (!(0, _is.default)(type, node, opts)) {\n      throw new Error(\"Expected type \\\"\" + type + \"\\\" with option \" + JSON.stringify(opts) + \", \" + (\"but instead got \\\"\" + node.type + \"\\\".\"));\n    }\n  }\n\n  function assertArrayExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ArrayExpression\", node, opts);\n  }\n\n  function assertAssignmentExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"AssignmentExpression\", node, opts);\n  }\n\n  function assertBinaryExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"BinaryExpression\", node, opts);\n  }\n\n  function assertInterpreterDirective(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"InterpreterDirective\", node, opts);\n  }\n\n  function assertDirective(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Directive\", node, opts);\n  }\n\n  function assertDirectiveLiteral(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"DirectiveLiteral\", node, opts);\n  }\n\n  function assertBlockStatement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"BlockStatement\", node, opts);\n  }\n\n  function assertBreakStatement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"BreakStatement\", node, opts);\n  }\n\n  function assertCallExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"CallExpression\", node, opts);\n  }\n\n  function assertCatchClause(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"CatchClause\", node, opts);\n  }\n\n  function assertConditionalExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ConditionalExpression\", node, opts);\n  }\n\n  function assertContinueStatement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ContinueStatement\", node, opts);\n  }\n\n  function assertDebuggerStatement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"DebuggerStatement\", node, opts);\n  }\n\n  function assertDoWhileStatement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"DoWhileStatement\", node, opts);\n  }\n\n  function assertEmptyStatement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"EmptyStatement\", node, opts);\n  }\n\n  function assertExpressionStatement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ExpressionStatement\", node, opts);\n  }\n\n  function assertFile(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"File\", node, opts);\n  }\n\n  function assertForInStatement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ForInStatement\", node, opts);\n  }\n\n  function assertForStatement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ForStatement\", node, opts);\n  }\n\n  function assertFunctionDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"FunctionDeclaration\", node, opts);\n  }\n\n  function assertFunctionExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"FunctionExpression\", node, opts);\n  }\n\n  function assertIdentifier(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Identifier\", node, opts);\n  }\n\n  function assertIfStatement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"IfStatement\", node, opts);\n  }\n\n  function assertLabeledStatement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"LabeledStatement\", node, opts);\n  }\n\n  function assertStringLiteral(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"StringLiteral\", node, opts);\n  }\n\n  function assertNumericLiteral(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"NumericLiteral\", node, opts);\n  }\n\n  function assertNullLiteral(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"NullLiteral\", node, opts);\n  }\n\n  function assertBooleanLiteral(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"BooleanLiteral\", node, opts);\n  }\n\n  function assertRegExpLiteral(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"RegExpLiteral\", node, opts);\n  }\n\n  function assertLogicalExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"LogicalExpression\", node, opts);\n  }\n\n  function assertMemberExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"MemberExpression\", node, opts);\n  }\n\n  function assertNewExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"NewExpression\", node, opts);\n  }\n\n  function assertProgram(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Program\", node, opts);\n  }\n\n  function assertObjectExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ObjectExpression\", node, opts);\n  }\n\n  function assertObjectMethod(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ObjectMethod\", node, opts);\n  }\n\n  function assertObjectProperty(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ObjectProperty\", node, opts);\n  }\n\n  function assertRestElement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"RestElement\", node, opts);\n  }\n\n  function assertReturnStatement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ReturnStatement\", node, opts);\n  }\n\n  function assertSequenceExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"SequenceExpression\", node, opts);\n  }\n\n  function assertParenthesizedExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ParenthesizedExpression\", node, opts);\n  }\n\n  function assertSwitchCase(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"SwitchCase\", node, opts);\n  }\n\n  function assertSwitchStatement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"SwitchStatement\", node, opts);\n  }\n\n  function assertThisExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ThisExpression\", node, opts);\n  }\n\n  function assertThrowStatement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ThrowStatement\", node, opts);\n  }\n\n  function assertTryStatement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TryStatement\", node, opts);\n  }\n\n  function assertUnaryExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"UnaryExpression\", node, opts);\n  }\n\n  function assertUpdateExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"UpdateExpression\", node, opts);\n  }\n\n  function assertVariableDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"VariableDeclaration\", node, opts);\n  }\n\n  function assertVariableDeclarator(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"VariableDeclarator\", node, opts);\n  }\n\n  function assertWhileStatement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"WhileStatement\", node, opts);\n  }\n\n  function assertWithStatement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"WithStatement\", node, opts);\n  }\n\n  function assertAssignmentPattern(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"AssignmentPattern\", node, opts);\n  }\n\n  function assertArrayPattern(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ArrayPattern\", node, opts);\n  }\n\n  function assertArrowFunctionExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ArrowFunctionExpression\", node, opts);\n  }\n\n  function assertClassBody(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ClassBody\", node, opts);\n  }\n\n  function assertClassDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ClassDeclaration\", node, opts);\n  }\n\n  function assertClassExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ClassExpression\", node, opts);\n  }\n\n  function assertExportAllDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ExportAllDeclaration\", node, opts);\n  }\n\n  function assertExportDefaultDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ExportDefaultDeclaration\", node, opts);\n  }\n\n  function assertExportNamedDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ExportNamedDeclaration\", node, opts);\n  }\n\n  function assertExportSpecifier(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ExportSpecifier\", node, opts);\n  }\n\n  function assertForOfStatement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ForOfStatement\", node, opts);\n  }\n\n  function assertImportDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ImportDeclaration\", node, opts);\n  }\n\n  function assertImportDefaultSpecifier(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ImportDefaultSpecifier\", node, opts);\n  }\n\n  function assertImportNamespaceSpecifier(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ImportNamespaceSpecifier\", node, opts);\n  }\n\n  function assertImportSpecifier(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ImportSpecifier\", node, opts);\n  }\n\n  function assertMetaProperty(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"MetaProperty\", node, opts);\n  }\n\n  function assertClassMethod(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ClassMethod\", node, opts);\n  }\n\n  function assertObjectPattern(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ObjectPattern\", node, opts);\n  }\n\n  function assertSpreadElement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"SpreadElement\", node, opts);\n  }\n\n  function assertSuper(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Super\", node, opts);\n  }\n\n  function assertTaggedTemplateExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TaggedTemplateExpression\", node, opts);\n  }\n\n  function assertTemplateElement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TemplateElement\", node, opts);\n  }\n\n  function assertTemplateLiteral(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TemplateLiteral\", node, opts);\n  }\n\n  function assertYieldExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"YieldExpression\", node, opts);\n  }\n\n  function assertAnyTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"AnyTypeAnnotation\", node, opts);\n  }\n\n  function assertArrayTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ArrayTypeAnnotation\", node, opts);\n  }\n\n  function assertBooleanTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"BooleanTypeAnnotation\", node, opts);\n  }\n\n  function assertBooleanLiteralTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"BooleanLiteralTypeAnnotation\", node, opts);\n  }\n\n  function assertNullLiteralTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"NullLiteralTypeAnnotation\", node, opts);\n  }\n\n  function assertClassImplements(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ClassImplements\", node, opts);\n  }\n\n  function assertDeclareClass(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"DeclareClass\", node, opts);\n  }\n\n  function assertDeclareFunction(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"DeclareFunction\", node, opts);\n  }\n\n  function assertDeclareInterface(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"DeclareInterface\", node, opts);\n  }\n\n  function assertDeclareModule(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"DeclareModule\", node, opts);\n  }\n\n  function assertDeclareModuleExports(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"DeclareModuleExports\", node, opts);\n  }\n\n  function assertDeclareTypeAlias(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"DeclareTypeAlias\", node, opts);\n  }\n\n  function assertDeclareOpaqueType(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"DeclareOpaqueType\", node, opts);\n  }\n\n  function assertDeclareVariable(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"DeclareVariable\", node, opts);\n  }\n\n  function assertDeclareExportDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"DeclareExportDeclaration\", node, opts);\n  }\n\n  function assertDeclareExportAllDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"DeclareExportAllDeclaration\", node, opts);\n  }\n\n  function assertDeclaredPredicate(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"DeclaredPredicate\", node, opts);\n  }\n\n  function assertExistsTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ExistsTypeAnnotation\", node, opts);\n  }\n\n  function assertFunctionTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"FunctionTypeAnnotation\", node, opts);\n  }\n\n  function assertFunctionTypeParam(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"FunctionTypeParam\", node, opts);\n  }\n\n  function assertGenericTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"GenericTypeAnnotation\", node, opts);\n  }\n\n  function assertInferredPredicate(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"InferredPredicate\", node, opts);\n  }\n\n  function assertInterfaceExtends(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"InterfaceExtends\", node, opts);\n  }\n\n  function assertInterfaceDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"InterfaceDeclaration\", node, opts);\n  }\n\n  function assertInterfaceTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"InterfaceTypeAnnotation\", node, opts);\n  }\n\n  function assertIntersectionTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"IntersectionTypeAnnotation\", node, opts);\n  }\n\n  function assertMixedTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"MixedTypeAnnotation\", node, opts);\n  }\n\n  function assertEmptyTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"EmptyTypeAnnotation\", node, opts);\n  }\n\n  function assertNullableTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"NullableTypeAnnotation\", node, opts);\n  }\n\n  function assertNumberLiteralTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"NumberLiteralTypeAnnotation\", node, opts);\n  }\n\n  function assertNumberTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"NumberTypeAnnotation\", node, opts);\n  }\n\n  function assertObjectTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ObjectTypeAnnotation\", node, opts);\n  }\n\n  function assertObjectTypeInternalSlot(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ObjectTypeInternalSlot\", node, opts);\n  }\n\n  function assertObjectTypeCallProperty(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ObjectTypeCallProperty\", node, opts);\n  }\n\n  function assertObjectTypeIndexer(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ObjectTypeIndexer\", node, opts);\n  }\n\n  function assertObjectTypeProperty(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ObjectTypeProperty\", node, opts);\n  }\n\n  function assertObjectTypeSpreadProperty(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ObjectTypeSpreadProperty\", node, opts);\n  }\n\n  function assertOpaqueType(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"OpaqueType\", node, opts);\n  }\n\n  function assertQualifiedTypeIdentifier(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"QualifiedTypeIdentifier\", node, opts);\n  }\n\n  function assertStringLiteralTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"StringLiteralTypeAnnotation\", node, opts);\n  }\n\n  function assertStringTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"StringTypeAnnotation\", node, opts);\n  }\n\n  function assertThisTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ThisTypeAnnotation\", node, opts);\n  }\n\n  function assertTupleTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TupleTypeAnnotation\", node, opts);\n  }\n\n  function assertTypeofTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TypeofTypeAnnotation\", node, opts);\n  }\n\n  function assertTypeAlias(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TypeAlias\", node, opts);\n  }\n\n  function assertTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TypeAnnotation\", node, opts);\n  }\n\n  function assertTypeCastExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TypeCastExpression\", node, opts);\n  }\n\n  function assertTypeParameter(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TypeParameter\", node, opts);\n  }\n\n  function assertTypeParameterDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TypeParameterDeclaration\", node, opts);\n  }\n\n  function assertTypeParameterInstantiation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TypeParameterInstantiation\", node, opts);\n  }\n\n  function assertUnionTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"UnionTypeAnnotation\", node, opts);\n  }\n\n  function assertVariance(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Variance\", node, opts);\n  }\n\n  function assertVoidTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"VoidTypeAnnotation\", node, opts);\n  }\n\n  function assertEnumDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"EnumDeclaration\", node, opts);\n  }\n\n  function assertEnumBooleanBody(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"EnumBooleanBody\", node, opts);\n  }\n\n  function assertEnumNumberBody(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"EnumNumberBody\", node, opts);\n  }\n\n  function assertEnumStringBody(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"EnumStringBody\", node, opts);\n  }\n\n  function assertEnumSymbolBody(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"EnumSymbolBody\", node, opts);\n  }\n\n  function assertEnumBooleanMember(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"EnumBooleanMember\", node, opts);\n  }\n\n  function assertEnumNumberMember(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"EnumNumberMember\", node, opts);\n  }\n\n  function assertEnumStringMember(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"EnumStringMember\", node, opts);\n  }\n\n  function assertEnumDefaultedMember(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"EnumDefaultedMember\", node, opts);\n  }\n\n  function assertJSXAttribute(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"JSXAttribute\", node, opts);\n  }\n\n  function assertJSXClosingElement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"JSXClosingElement\", node, opts);\n  }\n\n  function assertJSXElement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"JSXElement\", node, opts);\n  }\n\n  function assertJSXEmptyExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"JSXEmptyExpression\", node, opts);\n  }\n\n  function assertJSXExpressionContainer(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"JSXExpressionContainer\", node, opts);\n  }\n\n  function assertJSXSpreadChild(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"JSXSpreadChild\", node, opts);\n  }\n\n  function assertJSXIdentifier(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"JSXIdentifier\", node, opts);\n  }\n\n  function assertJSXMemberExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"JSXMemberExpression\", node, opts);\n  }\n\n  function assertJSXNamespacedName(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"JSXNamespacedName\", node, opts);\n  }\n\n  function assertJSXOpeningElement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"JSXOpeningElement\", node, opts);\n  }\n\n  function assertJSXSpreadAttribute(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"JSXSpreadAttribute\", node, opts);\n  }\n\n  function assertJSXText(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"JSXText\", node, opts);\n  }\n\n  function assertJSXFragment(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"JSXFragment\", node, opts);\n  }\n\n  function assertJSXOpeningFragment(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"JSXOpeningFragment\", node, opts);\n  }\n\n  function assertJSXClosingFragment(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"JSXClosingFragment\", node, opts);\n  }\n\n  function assertNoop(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Noop\", node, opts);\n  }\n\n  function assertPlaceholder(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Placeholder\", node, opts);\n  }\n\n  function assertV8IntrinsicIdentifier(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"V8IntrinsicIdentifier\", node, opts);\n  }\n\n  function assertArgumentPlaceholder(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ArgumentPlaceholder\", node, opts);\n  }\n\n  function assertAwaitExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"AwaitExpression\", node, opts);\n  }\n\n  function assertBindExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"BindExpression\", node, opts);\n  }\n\n  function assertClassProperty(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ClassProperty\", node, opts);\n  }\n\n  function assertOptionalMemberExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"OptionalMemberExpression\", node, opts);\n  }\n\n  function assertPipelineTopicExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"PipelineTopicExpression\", node, opts);\n  }\n\n  function assertPipelineBareFunction(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"PipelineBareFunction\", node, opts);\n  }\n\n  function assertPipelinePrimaryTopicReference(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"PipelinePrimaryTopicReference\", node, opts);\n  }\n\n  function assertOptionalCallExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"OptionalCallExpression\", node, opts);\n  }\n\n  function assertClassPrivateProperty(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ClassPrivateProperty\", node, opts);\n  }\n\n  function assertClassPrivateMethod(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ClassPrivateMethod\", node, opts);\n  }\n\n  function assertImport(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Import\", node, opts);\n  }\n\n  function assertDecorator(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Decorator\", node, opts);\n  }\n\n  function assertDoExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"DoExpression\", node, opts);\n  }\n\n  function assertExportDefaultSpecifier(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ExportDefaultSpecifier\", node, opts);\n  }\n\n  function assertExportNamespaceSpecifier(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ExportNamespaceSpecifier\", node, opts);\n  }\n\n  function assertPrivateName(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"PrivateName\", node, opts);\n  }\n\n  function assertBigIntLiteral(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"BigIntLiteral\", node, opts);\n  }\n\n  function assertTSParameterProperty(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSParameterProperty\", node, opts);\n  }\n\n  function assertTSDeclareFunction(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSDeclareFunction\", node, opts);\n  }\n\n  function assertTSDeclareMethod(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSDeclareMethod\", node, opts);\n  }\n\n  function assertTSQualifiedName(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSQualifiedName\", node, opts);\n  }\n\n  function assertTSCallSignatureDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSCallSignatureDeclaration\", node, opts);\n  }\n\n  function assertTSConstructSignatureDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSConstructSignatureDeclaration\", node, opts);\n  }\n\n  function assertTSPropertySignature(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSPropertySignature\", node, opts);\n  }\n\n  function assertTSMethodSignature(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSMethodSignature\", node, opts);\n  }\n\n  function assertTSIndexSignature(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSIndexSignature\", node, opts);\n  }\n\n  function assertTSAnyKeyword(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSAnyKeyword\", node, opts);\n  }\n\n  function assertTSBooleanKeyword(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSBooleanKeyword\", node, opts);\n  }\n\n  function assertTSBigIntKeyword(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSBigIntKeyword\", node, opts);\n  }\n\n  function assertTSNeverKeyword(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSNeverKeyword\", node, opts);\n  }\n\n  function assertTSNullKeyword(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSNullKeyword\", node, opts);\n  }\n\n  function assertTSNumberKeyword(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSNumberKeyword\", node, opts);\n  }\n\n  function assertTSObjectKeyword(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSObjectKeyword\", node, opts);\n  }\n\n  function assertTSStringKeyword(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSStringKeyword\", node, opts);\n  }\n\n  function assertTSSymbolKeyword(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSSymbolKeyword\", node, opts);\n  }\n\n  function assertTSUndefinedKeyword(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSUndefinedKeyword\", node, opts);\n  }\n\n  function assertTSUnknownKeyword(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSUnknownKeyword\", node, opts);\n  }\n\n  function assertTSVoidKeyword(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSVoidKeyword\", node, opts);\n  }\n\n  function assertTSThisType(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSThisType\", node, opts);\n  }\n\n  function assertTSFunctionType(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSFunctionType\", node, opts);\n  }\n\n  function assertTSConstructorType(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSConstructorType\", node, opts);\n  }\n\n  function assertTSTypeReference(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSTypeReference\", node, opts);\n  }\n\n  function assertTSTypePredicate(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSTypePredicate\", node, opts);\n  }\n\n  function assertTSTypeQuery(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSTypeQuery\", node, opts);\n  }\n\n  function assertTSTypeLiteral(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSTypeLiteral\", node, opts);\n  }\n\n  function assertTSArrayType(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSArrayType\", node, opts);\n  }\n\n  function assertTSTupleType(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSTupleType\", node, opts);\n  }\n\n  function assertTSOptionalType(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSOptionalType\", node, opts);\n  }\n\n  function assertTSRestType(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSRestType\", node, opts);\n  }\n\n  function assertTSUnionType(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSUnionType\", node, opts);\n  }\n\n  function assertTSIntersectionType(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSIntersectionType\", node, opts);\n  }\n\n  function assertTSConditionalType(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSConditionalType\", node, opts);\n  }\n\n  function assertTSInferType(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSInferType\", node, opts);\n  }\n\n  function assertTSParenthesizedType(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSParenthesizedType\", node, opts);\n  }\n\n  function assertTSTypeOperator(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSTypeOperator\", node, opts);\n  }\n\n  function assertTSIndexedAccessType(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSIndexedAccessType\", node, opts);\n  }\n\n  function assertTSMappedType(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSMappedType\", node, opts);\n  }\n\n  function assertTSLiteralType(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSLiteralType\", node, opts);\n  }\n\n  function assertTSExpressionWithTypeArguments(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSExpressionWithTypeArguments\", node, opts);\n  }\n\n  function assertTSInterfaceDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSInterfaceDeclaration\", node, opts);\n  }\n\n  function assertTSInterfaceBody(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSInterfaceBody\", node, opts);\n  }\n\n  function assertTSTypeAliasDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSTypeAliasDeclaration\", node, opts);\n  }\n\n  function assertTSAsExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSAsExpression\", node, opts);\n  }\n\n  function assertTSTypeAssertion(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSTypeAssertion\", node, opts);\n  }\n\n  function assertTSEnumDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSEnumDeclaration\", node, opts);\n  }\n\n  function assertTSEnumMember(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSEnumMember\", node, opts);\n  }\n\n  function assertTSModuleDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSModuleDeclaration\", node, opts);\n  }\n\n  function assertTSModuleBlock(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSModuleBlock\", node, opts);\n  }\n\n  function assertTSImportType(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSImportType\", node, opts);\n  }\n\n  function assertTSImportEqualsDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSImportEqualsDeclaration\", node, opts);\n  }\n\n  function assertTSExternalModuleReference(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSExternalModuleReference\", node, opts);\n  }\n\n  function assertTSNonNullExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSNonNullExpression\", node, opts);\n  }\n\n  function assertTSExportAssignment(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSExportAssignment\", node, opts);\n  }\n\n  function assertTSNamespaceExportDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSNamespaceExportDeclaration\", node, opts);\n  }\n\n  function assertTSTypeAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSTypeAnnotation\", node, opts);\n  }\n\n  function assertTSTypeParameterInstantiation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSTypeParameterInstantiation\", node, opts);\n  }\n\n  function assertTSTypeParameterDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSTypeParameterDeclaration\", node, opts);\n  }\n\n  function assertTSTypeParameter(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSTypeParameter\", node, opts);\n  }\n\n  function assertExpression(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Expression\", node, opts);\n  }\n\n  function assertBinary(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Binary\", node, opts);\n  }\n\n  function assertScopable(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Scopable\", node, opts);\n  }\n\n  function assertBlockParent(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"BlockParent\", node, opts);\n  }\n\n  function assertBlock(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Block\", node, opts);\n  }\n\n  function assertStatement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Statement\", node, opts);\n  }\n\n  function assertTerminatorless(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Terminatorless\", node, opts);\n  }\n\n  function assertCompletionStatement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"CompletionStatement\", node, opts);\n  }\n\n  function assertConditional(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Conditional\", node, opts);\n  }\n\n  function assertLoop(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Loop\", node, opts);\n  }\n\n  function assertWhile(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"While\", node, opts);\n  }\n\n  function assertExpressionWrapper(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ExpressionWrapper\", node, opts);\n  }\n\n  function assertFor(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"For\", node, opts);\n  }\n\n  function assertForXStatement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ForXStatement\", node, opts);\n  }\n\n  function assertFunction(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Function\", node, opts);\n  }\n\n  function assertFunctionParent(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"FunctionParent\", node, opts);\n  }\n\n  function assertPureish(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Pureish\", node, opts);\n  }\n\n  function assertDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Declaration\", node, opts);\n  }\n\n  function assertPatternLike(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"PatternLike\", node, opts);\n  }\n\n  function assertLVal(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"LVal\", node, opts);\n  }\n\n  function assertTSEntityName(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSEntityName\", node, opts);\n  }\n\n  function assertLiteral(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Literal\", node, opts);\n  }\n\n  function assertImmutable(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Immutable\", node, opts);\n  }\n\n  function assertUserWhitespacable(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"UserWhitespacable\", node, opts);\n  }\n\n  function assertMethod(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Method\", node, opts);\n  }\n\n  function assertObjectMember(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ObjectMember\", node, opts);\n  }\n\n  function assertProperty(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Property\", node, opts);\n  }\n\n  function assertUnaryLike(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"UnaryLike\", node, opts);\n  }\n\n  function assertPattern(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Pattern\", node, opts);\n  }\n\n  function assertClass(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Class\", node, opts);\n  }\n\n  function assertModuleDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ModuleDeclaration\", node, opts);\n  }\n\n  function assertExportDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ExportDeclaration\", node, opts);\n  }\n\n  function assertModuleSpecifier(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"ModuleSpecifier\", node, opts);\n  }\n\n  function assertFlow(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Flow\", node, opts);\n  }\n\n  function assertFlowType(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"FlowType\", node, opts);\n  }\n\n  function assertFlowBaseAnnotation(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"FlowBaseAnnotation\", node, opts);\n  }\n\n  function assertFlowDeclaration(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"FlowDeclaration\", node, opts);\n  }\n\n  function assertFlowPredicate(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"FlowPredicate\", node, opts);\n  }\n\n  function assertEnumBody(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"EnumBody\", node, opts);\n  }\n\n  function assertEnumMember(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"EnumMember\", node, opts);\n  }\n\n  function assertJSX(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"JSX\", node, opts);\n  }\n\n  function assertPrivate(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"Private\", node, opts);\n  }\n\n  function assertTSTypeElement(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSTypeElement\", node, opts);\n  }\n\n  function assertTSType(node) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assert(\"TSType\", node, opts);\n  }\n\n  function assertNumberLiteral(node, opts) {\n    console.trace(\"The node type NumberLiteral has been renamed to NumericLiteral\");\n    assert(\"NumberLiteral\", node, opts);\n  }\n\n  function assertRegexLiteral(node, opts) {\n    console.trace(\"The node type RegexLiteral has been renamed to RegExpLiteral\");\n    assert(\"RegexLiteral\", node, opts);\n  }\n\n  function assertRestProperty(node, opts) {\n    console.trace(\"The node type RestProperty has been renamed to RestElement\");\n    assert(\"RestProperty\", node, opts);\n  }\n\n  function assertSpreadProperty(node, opts) {\n    console.trace(\"The node type SpreadProperty has been renamed to SpreadElement\");\n    assert(\"SpreadProperty\", node, opts);\n  }\n});","map":[[2,0,1,0],[4,0,3,0,"Object"],[4,2,3,0,"Object"],[4,8,3,6],[4,9,3,7,"defineProperty"],[4,23,3,0],[4,24,3,22,"exports"],[4,31,3,0],[4,33,3,31],[4,45,3,0],[4,47,3,45],[5,0,4,2,"value"],[5,4,4,2,"value"],[5,9,4,7],[5,11,4,9],[6,0,3,45],[6,3,3,0],[7,0,6,0,"exports"],[7,2,6,0,"exports"],[7,9,6,7],[7,10,6,8,"assertArrayExpression"],[7,31,6,0],[7,34,6,32,"assertArrayExpression"],[7,55,6,0],[8,0,7,0,"exports"],[8,2,7,0,"exports"],[8,9,7,7],[8,10,7,8,"assertAssignmentExpression"],[8,36,7,0],[8,39,7,37,"assertAssignmentExpression"],[8,65,7,0],[9,0,8,0,"exports"],[9,2,8,0,"exports"],[9,9,8,7],[9,10,8,8,"assertBinaryExpression"],[9,32,8,0],[9,35,8,33,"assertBinaryExpression"],[9,57,8,0],[10,0,9,0,"exports"],[10,2,9,0,"exports"],[10,9,9,7],[10,10,9,8,"assertInterpreterDirective"],[10,36,9,0],[10,39,9,37,"assertInterpreterDirective"],[10,65,9,0],[11,0,10,0,"exports"],[11,2,10,0,"exports"],[11,9,10,7],[11,10,10,8,"assertDirective"],[11,25,10,0],[11,28,10,26,"assertDirective"],[11,43,10,0],[12,0,11,0,"exports"],[12,2,11,0,"exports"],[12,9,11,7],[12,10,11,8,"assertDirectiveLiteral"],[12,32,11,0],[12,35,11,33,"assertDirectiveLiteral"],[12,57,11,0],[13,0,12,0,"exports"],[13,2,12,0,"exports"],[13,9,12,7],[13,10,12,8,"assertBlockStatement"],[13,30,12,0],[13,33,12,31,"assertBlockStatement"],[13,53,12,0],[14,0,13,0,"exports"],[14,2,13,0,"exports"],[14,9,13,7],[14,10,13,8,"assertBreakStatement"],[14,30,13,0],[14,33,13,31,"assertBreakStatement"],[14,53,13,0],[15,0,14,0,"exports"],[15,2,14,0,"exports"],[15,9,14,7],[15,10,14,8,"assertCallExpression"],[15,30,14,0],[15,33,14,31,"assertCallExpression"],[15,53,14,0],[16,0,15,0,"exports"],[16,2,15,0,"exports"],[16,9,15,7],[16,10,15,8,"assertCatchClause"],[16,27,15,0],[16,30,15,28,"assertCatchClause"],[16,47,15,0],[17,0,16,0,"exports"],[17,2,16,0,"exports"],[17,9,16,7],[17,10,16,8,"assertConditionalExpression"],[17,37,16,0],[17,40,16,38,"assertConditionalExpression"],[17,67,16,0],[18,0,17,0,"exports"],[18,2,17,0,"exports"],[18,9,17,7],[18,10,17,8,"assertContinueStatement"],[18,33,17,0],[18,36,17,34,"assertContinueStatement"],[18,59,17,0],[19,0,18,0,"exports"],[19,2,18,0,"exports"],[19,9,18,7],[19,10,18,8,"assertDebuggerStatement"],[19,33,18,0],[19,36,18,34,"assertDebuggerStatement"],[19,59,18,0],[20,0,19,0,"exports"],[20,2,19,0,"exports"],[20,9,19,7],[20,10,19,8,"assertDoWhileStatement"],[20,32,19,0],[20,35,19,33,"assertDoWhileStatement"],[20,57,19,0],[21,0,20,0,"exports"],[21,2,20,0,"exports"],[21,9,20,7],[21,10,20,8,"assertEmptyStatement"],[21,30,20,0],[21,33,20,31,"assertEmptyStatement"],[21,53,20,0],[22,0,21,0,"exports"],[22,2,21,0,"exports"],[22,9,21,7],[22,10,21,8,"assertExpressionStatement"],[22,35,21,0],[22,38,21,36,"assertExpressionStatement"],[22,63,21,0],[23,0,22,0,"exports"],[23,2,22,0,"exports"],[23,9,22,7],[23,10,22,8,"assertFile"],[23,20,22,0],[23,23,22,21,"assertFile"],[23,33,22,0],[24,0,23,0,"exports"],[24,2,23,0,"exports"],[24,9,23,7],[24,10,23,8,"assertForInStatement"],[24,30,23,0],[24,33,23,31,"assertForInStatement"],[24,53,23,0],[25,0,24,0,"exports"],[25,2,24,0,"exports"],[25,9,24,7],[25,10,24,8,"assertForStatement"],[25,28,24,0],[25,31,24,29,"assertForStatement"],[25,49,24,0],[26,0,25,0,"exports"],[26,2,25,0,"exports"],[26,9,25,7],[26,10,25,8,"assertFunctionDeclaration"],[26,35,25,0],[26,38,25,36,"assertFunctionDeclaration"],[26,63,25,0],[27,0,26,0,"exports"],[27,2,26,0,"exports"],[27,9,26,7],[27,10,26,8,"assertFunctionExpression"],[27,34,26,0],[27,37,26,35,"assertFunctionExpression"],[27,61,26,0],[28,0,27,0,"exports"],[28,2,27,0,"exports"],[28,9,27,7],[28,10,27,8,"assertIdentifier"],[28,26,27,0],[28,29,27,27,"assertIdentifier"],[28,45,27,0],[29,0,28,0,"exports"],[29,2,28,0,"exports"],[29,9,28,7],[29,10,28,8,"assertIfStatement"],[29,27,28,0],[29,30,28,28,"assertIfStatement"],[29,47,28,0],[30,0,29,0,"exports"],[30,2,29,0,"exports"],[30,9,29,7],[30,10,29,8,"assertLabeledStatement"],[30,32,29,0],[30,35,29,33,"assertLabeledStatement"],[30,57,29,0],[31,0,30,0,"exports"],[31,2,30,0,"exports"],[31,9,30,7],[31,10,30,8,"assertStringLiteral"],[31,29,30,0],[31,32,30,30,"assertStringLiteral"],[31,51,30,0],[32,0,31,0,"exports"],[32,2,31,0,"exports"],[32,9,31,7],[32,10,31,8,"assertNumericLiteral"],[32,30,31,0],[32,33,31,31,"assertNumericLiteral"],[32,53,31,0],[33,0,32,0,"exports"],[33,2,32,0,"exports"],[33,9,32,7],[33,10,32,8,"assertNullLiteral"],[33,27,32,0],[33,30,32,28,"assertNullLiteral"],[33,47,32,0],[34,0,33,0,"exports"],[34,2,33,0,"exports"],[34,9,33,7],[34,10,33,8,"assertBooleanLiteral"],[34,30,33,0],[34,33,33,31,"assertBooleanLiteral"],[34,53,33,0],[35,0,34,0,"exports"],[35,2,34,0,"exports"],[35,9,34,7],[35,10,34,8,"assertRegExpLiteral"],[35,29,34,0],[35,32,34,30,"assertRegExpLiteral"],[35,51,34,0],[36,0,35,0,"exports"],[36,2,35,0,"exports"],[36,9,35,7],[36,10,35,8,"assertLogicalExpression"],[36,33,35,0],[36,36,35,34,"assertLogicalExpression"],[36,59,35,0],[37,0,36,0,"exports"],[37,2,36,0,"exports"],[37,9,36,7],[37,10,36,8,"assertMemberExpression"],[37,32,36,0],[37,35,36,33,"assertMemberExpression"],[37,57,36,0],[38,0,37,0,"exports"],[38,2,37,0,"exports"],[38,9,37,7],[38,10,37,8,"assertNewExpression"],[38,29,37,0],[38,32,37,30,"assertNewExpression"],[38,51,37,0],[39,0,38,0,"exports"],[39,2,38,0,"exports"],[39,9,38,7],[39,10,38,8,"assertProgram"],[39,23,38,0],[39,26,38,24,"assertProgram"],[39,39,38,0],[40,0,39,0,"exports"],[40,2,39,0,"exports"],[40,9,39,7],[40,10,39,8,"assertObjectExpression"],[40,32,39,0],[40,35,39,33,"assertObjectExpression"],[40,57,39,0],[41,0,40,0,"exports"],[41,2,40,0,"exports"],[41,9,40,7],[41,10,40,8,"assertObjectMethod"],[41,28,40,0],[41,31,40,29,"assertObjectMethod"],[41,49,40,0],[42,0,41,0,"exports"],[42,2,41,0,"exports"],[42,9,41,7],[42,10,41,8,"assertObjectProperty"],[42,30,41,0],[42,33,41,31,"assertObjectProperty"],[42,53,41,0],[43,0,42,0,"exports"],[43,2,42,0,"exports"],[43,9,42,7],[43,10,42,8,"assertRestElement"],[43,27,42,0],[43,30,42,28,"assertRestElement"],[43,47,42,0],[44,0,43,0,"exports"],[44,2,43,0,"exports"],[44,9,43,7],[44,10,43,8,"assertReturnStatement"],[44,31,43,0],[44,34,43,32,"assertReturnStatement"],[44,55,43,0],[45,0,44,0,"exports"],[45,2,44,0,"exports"],[45,9,44,7],[45,10,44,8,"assertSequenceExpression"],[45,34,44,0],[45,37,44,35,"assertSequenceExpression"],[45,61,44,0],[46,0,45,0,"exports"],[46,2,45,0,"exports"],[46,9,45,7],[46,10,45,8,"assertParenthesizedExpression"],[46,39,45,0],[46,42,45,40,"assertParenthesizedExpression"],[46,71,45,0],[47,0,46,0,"exports"],[47,2,46,0,"exports"],[47,9,46,7],[47,10,46,8,"assertSwitchCase"],[47,26,46,0],[47,29,46,27,"assertSwitchCase"],[47,45,46,0],[48,0,47,0,"exports"],[48,2,47,0,"exports"],[48,9,47,7],[48,10,47,8,"assertSwitchStatement"],[48,31,47,0],[48,34,47,32,"assertSwitchStatement"],[48,55,47,0],[49,0,48,0,"exports"],[49,2,48,0,"exports"],[49,9,48,7],[49,10,48,8,"assertThisExpression"],[49,30,48,0],[49,33,48,31,"assertThisExpression"],[49,53,48,0],[50,0,49,0,"exports"],[50,2,49,0,"exports"],[50,9,49,7],[50,10,49,8,"assertThrowStatement"],[50,30,49,0],[50,33,49,31,"assertThrowStatement"],[50,53,49,0],[51,0,50,0,"exports"],[51,2,50,0,"exports"],[51,9,50,7],[51,10,50,8,"assertTryStatement"],[51,28,50,0],[51,31,50,29,"assertTryStatement"],[51,49,50,0],[52,0,51,0,"exports"],[52,2,51,0,"exports"],[52,9,51,7],[52,10,51,8,"assertUnaryExpression"],[52,31,51,0],[52,34,51,32,"assertUnaryExpression"],[52,55,51,0],[53,0,52,0,"exports"],[53,2,52,0,"exports"],[53,9,52,7],[53,10,52,8,"assertUpdateExpression"],[53,32,52,0],[53,35,52,33,"assertUpdateExpression"],[53,57,52,0],[54,0,53,0,"exports"],[54,2,53,0,"exports"],[54,9,53,7],[54,10,53,8,"assertVariableDeclaration"],[54,35,53,0],[54,38,53,36,"assertVariableDeclaration"],[54,63,53,0],[55,0,54,0,"exports"],[55,2,54,0,"exports"],[55,9,54,7],[55,10,54,8,"assertVariableDeclarator"],[55,34,54,0],[55,37,54,35,"assertVariableDeclarator"],[55,61,54,0],[56,0,55,0,"exports"],[56,2,55,0,"exports"],[56,9,55,7],[56,10,55,8,"assertWhileStatement"],[56,30,55,0],[56,33,55,31,"assertWhileStatement"],[56,53,55,0],[57,0,56,0,"exports"],[57,2,56,0,"exports"],[57,9,56,7],[57,10,56,8,"assertWithStatement"],[57,29,56,0],[57,32,56,30,"assertWithStatement"],[57,51,56,0],[58,0,57,0,"exports"],[58,2,57,0,"exports"],[58,9,57,7],[58,10,57,8,"assertAssignmentPattern"],[58,33,57,0],[58,36,57,34,"assertAssignmentPattern"],[58,59,57,0],[59,0,58,0,"exports"],[59,2,58,0,"exports"],[59,9,58,7],[59,10,58,8,"assertArrayPattern"],[59,28,58,0],[59,31,58,29,"assertArrayPattern"],[59,49,58,0],[60,0,59,0,"exports"],[60,2,59,0,"exports"],[60,9,59,7],[60,10,59,8,"assertArrowFunctionExpression"],[60,39,59,0],[60,42,59,40,"assertArrowFunctionExpression"],[60,71,59,0],[61,0,60,0,"exports"],[61,2,60,0,"exports"],[61,9,60,7],[61,10,60,8,"assertClassBody"],[61,25,60,0],[61,28,60,26,"assertClassBody"],[61,43,60,0],[62,0,61,0,"exports"],[62,2,61,0,"exports"],[62,9,61,7],[62,10,61,8,"assertClassDeclaration"],[62,32,61,0],[62,35,61,33,"assertClassDeclaration"],[62,57,61,0],[63,0,62,0,"exports"],[63,2,62,0,"exports"],[63,9,62,7],[63,10,62,8,"assertClassExpression"],[63,31,62,0],[63,34,62,32,"assertClassExpression"],[63,55,62,0],[64,0,63,0,"exports"],[64,2,63,0,"exports"],[64,9,63,7],[64,10,63,8,"assertExportAllDeclaration"],[64,36,63,0],[64,39,63,37,"assertExportAllDeclaration"],[64,65,63,0],[65,0,64,0,"exports"],[65,2,64,0,"exports"],[65,9,64,7],[65,10,64,8,"assertExportDefaultDeclaration"],[65,40,64,0],[65,43,64,41,"assertExportDefaultDeclaration"],[65,73,64,0],[66,0,65,0,"exports"],[66,2,65,0,"exports"],[66,9,65,7],[66,10,65,8,"assertExportNamedDeclaration"],[66,38,65,0],[66,41,65,39,"assertExportNamedDeclaration"],[66,69,65,0],[67,0,66,0,"exports"],[67,2,66,0,"exports"],[67,9,66,7],[67,10,66,8,"assertExportSpecifier"],[67,31,66,0],[67,34,66,32,"assertExportSpecifier"],[67,55,66,0],[68,0,67,0,"exports"],[68,2,67,0,"exports"],[68,9,67,7],[68,10,67,8,"assertForOfStatement"],[68,30,67,0],[68,33,67,31,"assertForOfStatement"],[68,53,67,0],[69,0,68,0,"exports"],[69,2,68,0,"exports"],[69,9,68,7],[69,10,68,8,"assertImportDeclaration"],[69,33,68,0],[69,36,68,34,"assertImportDeclaration"],[69,59,68,0],[70,0,69,0,"exports"],[70,2,69,0,"exports"],[70,9,69,7],[70,10,69,8,"assertImportDefaultSpecifier"],[70,38,69,0],[70,41,69,39,"assertImportDefaultSpecifier"],[70,69,69,0],[71,0,70,0,"exports"],[71,2,70,0,"exports"],[71,9,70,7],[71,10,70,8,"assertImportNamespaceSpecifier"],[71,40,70,0],[71,43,70,41,"assertImportNamespaceSpecifier"],[71,73,70,0],[72,0,71,0,"exports"],[72,2,71,0,"exports"],[72,9,71,7],[72,10,71,8,"assertImportSpecifier"],[72,31,71,0],[72,34,71,32,"assertImportSpecifier"],[72,55,71,0],[73,0,72,0,"exports"],[73,2,72,0,"exports"],[73,9,72,7],[73,10,72,8,"assertMetaProperty"],[73,28,72,0],[73,31,72,29,"assertMetaProperty"],[73,49,72,0],[74,0,73,0,"exports"],[74,2,73,0,"exports"],[74,9,73,7],[74,10,73,8,"assertClassMethod"],[74,27,73,0],[74,30,73,28,"assertClassMethod"],[74,47,73,0],[75,0,74,0,"exports"],[75,2,74,0,"exports"],[75,9,74,7],[75,10,74,8,"assertObjectPattern"],[75,29,74,0],[75,32,74,30,"assertObjectPattern"],[75,51,74,0],[76,0,75,0,"exports"],[76,2,75,0,"exports"],[76,9,75,7],[76,10,75,8,"assertSpreadElement"],[76,29,75,0],[76,32,75,30,"assertSpreadElement"],[76,51,75,0],[77,0,76,0,"exports"],[77,2,76,0,"exports"],[77,9,76,7],[77,10,76,8,"assertSuper"],[77,21,76,0],[77,24,76,22,"assertSuper"],[77,35,76,0],[78,0,77,0,"exports"],[78,2,77,0,"exports"],[78,9,77,7],[78,10,77,8,"assertTaggedTemplateExpression"],[78,40,77,0],[78,43,77,41,"assertTaggedTemplateExpression"],[78,73,77,0],[79,0,78,0,"exports"],[79,2,78,0,"exports"],[79,9,78,7],[79,10,78,8,"assertTemplateElement"],[79,31,78,0],[79,34,78,32,"assertTemplateElement"],[79,55,78,0],[80,0,79,0,"exports"],[80,2,79,0,"exports"],[80,9,79,7],[80,10,79,8,"assertTemplateLiteral"],[80,31,79,0],[80,34,79,32,"assertTemplateLiteral"],[80,55,79,0],[81,0,80,0,"exports"],[81,2,80,0,"exports"],[81,9,80,7],[81,10,80,8,"assertYieldExpression"],[81,31,80,0],[81,34,80,32,"assertYieldExpression"],[81,55,80,0],[82,0,81,0,"exports"],[82,2,81,0,"exports"],[82,9,81,7],[82,10,81,8,"assertAnyTypeAnnotation"],[82,33,81,0],[82,36,81,34,"assertAnyTypeAnnotation"],[82,59,81,0],[83,0,82,0,"exports"],[83,2,82,0,"exports"],[83,9,82,7],[83,10,82,8,"assertArrayTypeAnnotation"],[83,35,82,0],[83,38,82,36,"assertArrayTypeAnnotation"],[83,63,82,0],[84,0,83,0,"exports"],[84,2,83,0,"exports"],[84,9,83,7],[84,10,83,8,"assertBooleanTypeAnnotation"],[84,37,83,0],[84,40,83,38,"assertBooleanTypeAnnotation"],[84,67,83,0],[85,0,84,0,"exports"],[85,2,84,0,"exports"],[85,9,84,7],[85,10,84,8,"assertBooleanLiteralTypeAnnotation"],[85,44,84,0],[85,47,84,45,"assertBooleanLiteralTypeAnnotation"],[85,81,84,0],[86,0,85,0,"exports"],[86,2,85,0,"exports"],[86,9,85,7],[86,10,85,8,"assertNullLiteralTypeAnnotation"],[86,41,85,0],[86,44,85,42,"assertNullLiteralTypeAnnotation"],[86,75,85,0],[87,0,86,0,"exports"],[87,2,86,0,"exports"],[87,9,86,7],[87,10,86,8,"assertClassImplements"],[87,31,86,0],[87,34,86,32,"assertClassImplements"],[87,55,86,0],[88,0,87,0,"exports"],[88,2,87,0,"exports"],[88,9,87,7],[88,10,87,8,"assertDeclareClass"],[88,28,87,0],[88,31,87,29,"assertDeclareClass"],[88,49,87,0],[89,0,88,0,"exports"],[89,2,88,0,"exports"],[89,9,88,7],[89,10,88,8,"assertDeclareFunction"],[89,31,88,0],[89,34,88,32,"assertDeclareFunction"],[89,55,88,0],[90,0,89,0,"exports"],[90,2,89,0,"exports"],[90,9,89,7],[90,10,89,8,"assertDeclareInterface"],[90,32,89,0],[90,35,89,33,"assertDeclareInterface"],[90,57,89,0],[91,0,90,0,"exports"],[91,2,90,0,"exports"],[91,9,90,7],[91,10,90,8,"assertDeclareModule"],[91,29,90,0],[91,32,90,30,"assertDeclareModule"],[91,51,90,0],[92,0,91,0,"exports"],[92,2,91,0,"exports"],[92,9,91,7],[92,10,91,8,"assertDeclareModuleExports"],[92,36,91,0],[92,39,91,37,"assertDeclareModuleExports"],[92,65,91,0],[93,0,92,0,"exports"],[93,2,92,0,"exports"],[93,9,92,7],[93,10,92,8,"assertDeclareTypeAlias"],[93,32,92,0],[93,35,92,33,"assertDeclareTypeAlias"],[93,57,92,0],[94,0,93,0,"exports"],[94,2,93,0,"exports"],[94,9,93,7],[94,10,93,8,"assertDeclareOpaqueType"],[94,33,93,0],[94,36,93,34,"assertDeclareOpaqueType"],[94,59,93,0],[95,0,94,0,"exports"],[95,2,94,0,"exports"],[95,9,94,7],[95,10,94,8,"assertDeclareVariable"],[95,31,94,0],[95,34,94,32,"assertDeclareVariable"],[95,55,94,0],[96,0,95,0,"exports"],[96,2,95,0,"exports"],[96,9,95,7],[96,10,95,8,"assertDeclareExportDeclaration"],[96,40,95,0],[96,43,95,41,"assertDeclareExportDeclaration"],[96,73,95,0],[97,0,96,0,"exports"],[97,2,96,0,"exports"],[97,9,96,7],[97,10,96,8,"assertDeclareExportAllDeclaration"],[97,43,96,0],[97,46,96,44,"assertDeclareExportAllDeclaration"],[97,79,96,0],[98,0,97,0,"exports"],[98,2,97,0,"exports"],[98,9,97,7],[98,10,97,8,"assertDeclaredPredicate"],[98,33,97,0],[98,36,97,34,"assertDeclaredPredicate"],[98,59,97,0],[99,0,98,0,"exports"],[99,2,98,0,"exports"],[99,9,98,7],[99,10,98,8,"assertExistsTypeAnnotation"],[99,36,98,0],[99,39,98,37,"assertExistsTypeAnnotation"],[99,65,98,0],[100,0,99,0,"exports"],[100,2,99,0,"exports"],[100,9,99,7],[100,10,99,8,"assertFunctionTypeAnnotation"],[100,38,99,0],[100,41,99,39,"assertFunctionTypeAnnotation"],[100,69,99,0],[101,0,100,0,"exports"],[101,2,100,0,"exports"],[101,9,100,7],[101,10,100,8,"assertFunctionTypeParam"],[101,33,100,0],[101,36,100,34,"assertFunctionTypeParam"],[101,59,100,0],[102,0,101,0,"exports"],[102,2,101,0,"exports"],[102,9,101,7],[102,10,101,8,"assertGenericTypeAnnotation"],[102,37,101,0],[102,40,101,38,"assertGenericTypeAnnotation"],[102,67,101,0],[103,0,102,0,"exports"],[103,2,102,0,"exports"],[103,9,102,7],[103,10,102,8,"assertInferredPredicate"],[103,33,102,0],[103,36,102,34,"assertInferredPredicate"],[103,59,102,0],[104,0,103,0,"exports"],[104,2,103,0,"exports"],[104,9,103,7],[104,10,103,8,"assertInterfaceExtends"],[104,32,103,0],[104,35,103,33,"assertInterfaceExtends"],[104,57,103,0],[105,0,104,0,"exports"],[105,2,104,0,"exports"],[105,9,104,7],[105,10,104,8,"assertInterfaceDeclaration"],[105,36,104,0],[105,39,104,37,"assertInterfaceDeclaration"],[105,65,104,0],[106,0,105,0,"exports"],[106,2,105,0,"exports"],[106,9,105,7],[106,10,105,8,"assertInterfaceTypeAnnotation"],[106,39,105,0],[106,42,105,40,"assertInterfaceTypeAnnotation"],[106,71,105,0],[107,0,106,0,"exports"],[107,2,106,0,"exports"],[107,9,106,7],[107,10,106,8,"assertIntersectionTypeAnnotation"],[107,42,106,0],[107,45,106,43,"assertIntersectionTypeAnnotation"],[107,77,106,0],[108,0,107,0,"exports"],[108,2,107,0,"exports"],[108,9,107,7],[108,10,107,8,"assertMixedTypeAnnotation"],[108,35,107,0],[108,38,107,36,"assertMixedTypeAnnotation"],[108,63,107,0],[109,0,108,0,"exports"],[109,2,108,0,"exports"],[109,9,108,7],[109,10,108,8,"assertEmptyTypeAnnotation"],[109,35,108,0],[109,38,108,36,"assertEmptyTypeAnnotation"],[109,63,108,0],[110,0,109,0,"exports"],[110,2,109,0,"exports"],[110,9,109,7],[110,10,109,8,"assertNullableTypeAnnotation"],[110,38,109,0],[110,41,109,39,"assertNullableTypeAnnotation"],[110,69,109,0],[111,0,110,0,"exports"],[111,2,110,0,"exports"],[111,9,110,7],[111,10,110,8,"assertNumberLiteralTypeAnnotation"],[111,43,110,0],[111,46,110,44,"assertNumberLiteralTypeAnnotation"],[111,79,110,0],[112,0,111,0,"exports"],[112,2,111,0,"exports"],[112,9,111,7],[112,10,111,8,"assertNumberTypeAnnotation"],[112,36,111,0],[112,39,111,37,"assertNumberTypeAnnotation"],[112,65,111,0],[113,0,112,0,"exports"],[113,2,112,0,"exports"],[113,9,112,7],[113,10,112,8,"assertObjectTypeAnnotation"],[113,36,112,0],[113,39,112,37,"assertObjectTypeAnnotation"],[113,65,112,0],[114,0,113,0,"exports"],[114,2,113,0,"exports"],[114,9,113,7],[114,10,113,8,"assertObjectTypeInternalSlot"],[114,38,113,0],[114,41,113,39,"assertObjectTypeInternalSlot"],[114,69,113,0],[115,0,114,0,"exports"],[115,2,114,0,"exports"],[115,9,114,7],[115,10,114,8,"assertObjectTypeCallProperty"],[115,38,114,0],[115,41,114,39,"assertObjectTypeCallProperty"],[115,69,114,0],[116,0,115,0,"exports"],[116,2,115,0,"exports"],[116,9,115,7],[116,10,115,8,"assertObjectTypeIndexer"],[116,33,115,0],[116,36,115,34,"assertObjectTypeIndexer"],[116,59,115,0],[117,0,116,0,"exports"],[117,2,116,0,"exports"],[117,9,116,7],[117,10,116,8,"assertObjectTypeProperty"],[117,34,116,0],[117,37,116,35,"assertObjectTypeProperty"],[117,61,116,0],[118,0,117,0,"exports"],[118,2,117,0,"exports"],[118,9,117,7],[118,10,117,8,"assertObjectTypeSpreadProperty"],[118,40,117,0],[118,43,117,41,"assertObjectTypeSpreadProperty"],[118,73,117,0],[119,0,118,0,"exports"],[119,2,118,0,"exports"],[119,9,118,7],[119,10,118,8,"assertOpaqueType"],[119,26,118,0],[119,29,118,27,"assertOpaqueType"],[119,45,118,0],[120,0,119,0,"exports"],[120,2,119,0,"exports"],[120,9,119,7],[120,10,119,8,"assertQualifiedTypeIdentifier"],[120,39,119,0],[120,42,119,40,"assertQualifiedTypeIdentifier"],[120,71,119,0],[121,0,120,0,"exports"],[121,2,120,0,"exports"],[121,9,120,7],[121,10,120,8,"assertStringLiteralTypeAnnotation"],[121,43,120,0],[121,46,120,44,"assertStringLiteralTypeAnnotation"],[121,79,120,0],[122,0,121,0,"exports"],[122,2,121,0,"exports"],[122,9,121,7],[122,10,121,8,"assertStringTypeAnnotation"],[122,36,121,0],[122,39,121,37,"assertStringTypeAnnotation"],[122,65,121,0],[123,0,122,0,"exports"],[123,2,122,0,"exports"],[123,9,122,7],[123,10,122,8,"assertThisTypeAnnotation"],[123,34,122,0],[123,37,122,35,"assertThisTypeAnnotation"],[123,61,122,0],[124,0,123,0,"exports"],[124,2,123,0,"exports"],[124,9,123,7],[124,10,123,8,"assertTupleTypeAnnotation"],[124,35,123,0],[124,38,123,36,"assertTupleTypeAnnotation"],[124,63,123,0],[125,0,124,0,"exports"],[125,2,124,0,"exports"],[125,9,124,7],[125,10,124,8,"assertTypeofTypeAnnotation"],[125,36,124,0],[125,39,124,37,"assertTypeofTypeAnnotation"],[125,65,124,0],[126,0,125,0,"exports"],[126,2,125,0,"exports"],[126,9,125,7],[126,10,125,8,"assertTypeAlias"],[126,25,125,0],[126,28,125,26,"assertTypeAlias"],[126,43,125,0],[127,0,126,0,"exports"],[127,2,126,0,"exports"],[127,9,126,7],[127,10,126,8,"assertTypeAnnotation"],[127,30,126,0],[127,33,126,31,"assertTypeAnnotation"],[127,53,126,0],[128,0,127,0,"exports"],[128,2,127,0,"exports"],[128,9,127,7],[128,10,127,8,"assertTypeCastExpression"],[128,34,127,0],[128,37,127,35,"assertTypeCastExpression"],[128,61,127,0],[129,0,128,0,"exports"],[129,2,128,0,"exports"],[129,9,128,7],[129,10,128,8,"assertTypeParameter"],[129,29,128,0],[129,32,128,30,"assertTypeParameter"],[129,51,128,0],[130,0,129,0,"exports"],[130,2,129,0,"exports"],[130,9,129,7],[130,10,129,8,"assertTypeParameterDeclaration"],[130,40,129,0],[130,43,129,41,"assertTypeParameterDeclaration"],[130,73,129,0],[131,0,130,0,"exports"],[131,2,130,0,"exports"],[131,9,130,7],[131,10,130,8,"assertTypeParameterInstantiation"],[131,42,130,0],[131,45,130,43,"assertTypeParameterInstantiation"],[131,77,130,0],[132,0,131,0,"exports"],[132,2,131,0,"exports"],[132,9,131,7],[132,10,131,8,"assertUnionTypeAnnotation"],[132,35,131,0],[132,38,131,36,"assertUnionTypeAnnotation"],[132,63,131,0],[133,0,132,0,"exports"],[133,2,132,0,"exports"],[133,9,132,7],[133,10,132,8,"assertVariance"],[133,24,132,0],[133,27,132,25,"assertVariance"],[133,41,132,0],[134,0,133,0,"exports"],[134,2,133,0,"exports"],[134,9,133,7],[134,10,133,8,"assertVoidTypeAnnotation"],[134,34,133,0],[134,37,133,35,"assertVoidTypeAnnotation"],[134,61,133,0],[135,0,134,0,"exports"],[135,2,134,0,"exports"],[135,9,134,7],[135,10,134,8,"assertEnumDeclaration"],[135,31,134,0],[135,34,134,32,"assertEnumDeclaration"],[135,55,134,0],[136,0,135,0,"exports"],[136,2,135,0,"exports"],[136,9,135,7],[136,10,135,8,"assertEnumBooleanBody"],[136,31,135,0],[136,34,135,32,"assertEnumBooleanBody"],[136,55,135,0],[137,0,136,0,"exports"],[137,2,136,0,"exports"],[137,9,136,7],[137,10,136,8,"assertEnumNumberBody"],[137,30,136,0],[137,33,136,31,"assertEnumNumberBody"],[137,53,136,0],[138,0,137,0,"exports"],[138,2,137,0,"exports"],[138,9,137,7],[138,10,137,8,"assertEnumStringBody"],[138,30,137,0],[138,33,137,31,"assertEnumStringBody"],[138,53,137,0],[139,0,138,0,"exports"],[139,2,138,0,"exports"],[139,9,138,7],[139,10,138,8,"assertEnumSymbolBody"],[139,30,138,0],[139,33,138,31,"assertEnumSymbolBody"],[139,53,138,0],[140,0,139,0,"exports"],[140,2,139,0,"exports"],[140,9,139,7],[140,10,139,8,"assertEnumBooleanMember"],[140,33,139,0],[140,36,139,34,"assertEnumBooleanMember"],[140,59,139,0],[141,0,140,0,"exports"],[141,2,140,0,"exports"],[141,9,140,7],[141,10,140,8,"assertEnumNumberMember"],[141,32,140,0],[141,35,140,33,"assertEnumNumberMember"],[141,57,140,0],[142,0,141,0,"exports"],[142,2,141,0,"exports"],[142,9,141,7],[142,10,141,8,"assertEnumStringMember"],[142,32,141,0],[142,35,141,33,"assertEnumStringMember"],[142,57,141,0],[143,0,142,0,"exports"],[143,2,142,0,"exports"],[143,9,142,7],[143,10,142,8,"assertEnumDefaultedMember"],[143,35,142,0],[143,38,142,36,"assertEnumDefaultedMember"],[143,63,142,0],[144,0,143,0,"exports"],[144,2,143,0,"exports"],[144,9,143,7],[144,10,143,8,"assertJSXAttribute"],[144,28,143,0],[144,31,143,29,"assertJSXAttribute"],[144,49,143,0],[145,0,144,0,"exports"],[145,2,144,0,"exports"],[145,9,144,7],[145,10,144,8,"assertJSXClosingElement"],[145,33,144,0],[145,36,144,34,"assertJSXClosingElement"],[145,59,144,0],[146,0,145,0,"exports"],[146,2,145,0,"exports"],[146,9,145,7],[146,10,145,8,"assertJSXElement"],[146,26,145,0],[146,29,145,27,"assertJSXElement"],[146,45,145,0],[147,0,146,0,"exports"],[147,2,146,0,"exports"],[147,9,146,7],[147,10,146,8,"assertJSXEmptyExpression"],[147,34,146,0],[147,37,146,35,"assertJSXEmptyExpression"],[147,61,146,0],[148,0,147,0,"exports"],[148,2,147,0,"exports"],[148,9,147,7],[148,10,147,8,"assertJSXExpressionContainer"],[148,38,147,0],[148,41,147,39,"assertJSXExpressionContainer"],[148,69,147,0],[149,0,148,0,"exports"],[149,2,148,0,"exports"],[149,9,148,7],[149,10,148,8,"assertJSXSpreadChild"],[149,30,148,0],[149,33,148,31,"assertJSXSpreadChild"],[149,53,148,0],[150,0,149,0,"exports"],[150,2,149,0,"exports"],[150,9,149,7],[150,10,149,8,"assertJSXIdentifier"],[150,29,149,0],[150,32,149,30,"assertJSXIdentifier"],[150,51,149,0],[151,0,150,0,"exports"],[151,2,150,0,"exports"],[151,9,150,7],[151,10,150,8,"assertJSXMemberExpression"],[151,35,150,0],[151,38,150,36,"assertJSXMemberExpression"],[151,63,150,0],[152,0,151,0,"exports"],[152,2,151,0,"exports"],[152,9,151,7],[152,10,151,8,"assertJSXNamespacedName"],[152,33,151,0],[152,36,151,34,"assertJSXNamespacedName"],[152,59,151,0],[153,0,152,0,"exports"],[153,2,152,0,"exports"],[153,9,152,7],[153,10,152,8,"assertJSXOpeningElement"],[153,33,152,0],[153,36,152,34,"assertJSXOpeningElement"],[153,59,152,0],[154,0,153,0,"exports"],[154,2,153,0,"exports"],[154,9,153,7],[154,10,153,8,"assertJSXSpreadAttribute"],[154,34,153,0],[154,37,153,35,"assertJSXSpreadAttribute"],[154,61,153,0],[155,0,154,0,"exports"],[155,2,154,0,"exports"],[155,9,154,7],[155,10,154,8,"assertJSXText"],[155,23,154,0],[155,26,154,24,"assertJSXText"],[155,39,154,0],[156,0,155,0,"exports"],[156,2,155,0,"exports"],[156,9,155,7],[156,10,155,8,"assertJSXFragment"],[156,27,155,0],[156,30,155,28,"assertJSXFragment"],[156,47,155,0],[157,0,156,0,"exports"],[157,2,156,0,"exports"],[157,9,156,7],[157,10,156,8,"assertJSXOpeningFragment"],[157,34,156,0],[157,37,156,35,"assertJSXOpeningFragment"],[157,61,156,0],[158,0,157,0,"exports"],[158,2,157,0,"exports"],[158,9,157,7],[158,10,157,8,"assertJSXClosingFragment"],[158,34,157,0],[158,37,157,35,"assertJSXClosingFragment"],[158,61,157,0],[159,0,158,0,"exports"],[159,2,158,0,"exports"],[159,9,158,7],[159,10,158,8,"assertNoop"],[159,20,158,0],[159,23,158,21,"assertNoop"],[159,33,158,0],[160,0,159,0,"exports"],[160,2,159,0,"exports"],[160,9,159,7],[160,10,159,8,"assertPlaceholder"],[160,27,159,0],[160,30,159,28,"assertPlaceholder"],[160,47,159,0],[161,0,160,0,"exports"],[161,2,160,0,"exports"],[161,9,160,7],[161,10,160,8,"assertV8IntrinsicIdentifier"],[161,37,160,0],[161,40,160,38,"assertV8IntrinsicIdentifier"],[161,67,160,0],[162,0,161,0,"exports"],[162,2,161,0,"exports"],[162,9,161,7],[162,10,161,8,"assertArgumentPlaceholder"],[162,35,161,0],[162,38,161,36,"assertArgumentPlaceholder"],[162,63,161,0],[163,0,162,0,"exports"],[163,2,162,0,"exports"],[163,9,162,7],[163,10,162,8,"assertAwaitExpression"],[163,31,162,0],[163,34,162,32,"assertAwaitExpression"],[163,55,162,0],[164,0,163,0,"exports"],[164,2,163,0,"exports"],[164,9,163,7],[164,10,163,8,"assertBindExpression"],[164,30,163,0],[164,33,163,31,"assertBindExpression"],[164,53,163,0],[165,0,164,0,"exports"],[165,2,164,0,"exports"],[165,9,164,7],[165,10,164,8,"assertClassProperty"],[165,29,164,0],[165,32,164,30,"assertClassProperty"],[165,51,164,0],[166,0,165,0,"exports"],[166,2,165,0,"exports"],[166,9,165,7],[166,10,165,8,"assertOptionalMemberExpression"],[166,40,165,0],[166,43,165,41,"assertOptionalMemberExpression"],[166,73,165,0],[167,0,166,0,"exports"],[167,2,166,0,"exports"],[167,9,166,7],[167,10,166,8,"assertPipelineTopicExpression"],[167,39,166,0],[167,42,166,40,"assertPipelineTopicExpression"],[167,71,166,0],[168,0,167,0,"exports"],[168,2,167,0,"exports"],[168,9,167,7],[168,10,167,8,"assertPipelineBareFunction"],[168,36,167,0],[168,39,167,37,"assertPipelineBareFunction"],[168,65,167,0],[169,0,168,0,"exports"],[169,2,168,0,"exports"],[169,9,168,7],[169,10,168,8,"assertPipelinePrimaryTopicReference"],[169,45,168,0],[169,48,168,46,"assertPipelinePrimaryTopicReference"],[169,83,168,0],[170,0,169,0,"exports"],[170,2,169,0,"exports"],[170,9,169,7],[170,10,169,8,"assertOptionalCallExpression"],[170,38,169,0],[170,41,169,39,"assertOptionalCallExpression"],[170,69,169,0],[171,0,170,0,"exports"],[171,2,170,0,"exports"],[171,9,170,7],[171,10,170,8,"assertClassPrivateProperty"],[171,36,170,0],[171,39,170,37,"assertClassPrivateProperty"],[171,65,170,0],[172,0,171,0,"exports"],[172,2,171,0,"exports"],[172,9,171,7],[172,10,171,8,"assertClassPrivateMethod"],[172,34,171,0],[172,37,171,35,"assertClassPrivateMethod"],[172,61,171,0],[173,0,172,0,"exports"],[173,2,172,0,"exports"],[173,9,172,7],[173,10,172,8,"assertImport"],[173,22,172,0],[173,25,172,23,"assertImport"],[173,37,172,0],[174,0,173,0,"exports"],[174,2,173,0,"exports"],[174,9,173,7],[174,10,173,8,"assertDecorator"],[174,25,173,0],[174,28,173,26,"assertDecorator"],[174,43,173,0],[175,0,174,0,"exports"],[175,2,174,0,"exports"],[175,9,174,7],[175,10,174,8,"assertDoExpression"],[175,28,174,0],[175,31,174,29,"assertDoExpression"],[175,49,174,0],[176,0,175,0,"exports"],[176,2,175,0,"exports"],[176,9,175,7],[176,10,175,8,"assertExportDefaultSpecifier"],[176,38,175,0],[176,41,175,39,"assertExportDefaultSpecifier"],[176,69,175,0],[177,0,176,0,"exports"],[177,2,176,0,"exports"],[177,9,176,7],[177,10,176,8,"assertExportNamespaceSpecifier"],[177,40,176,0],[177,43,176,41,"assertExportNamespaceSpecifier"],[177,73,176,0],[178,0,177,0,"exports"],[178,2,177,0,"exports"],[178,9,177,7],[178,10,177,8,"assertPrivateName"],[178,27,177,0],[178,30,177,28,"assertPrivateName"],[178,47,177,0],[179,0,178,0,"exports"],[179,2,178,0,"exports"],[179,9,178,7],[179,10,178,8,"assertBigIntLiteral"],[179,29,178,0],[179,32,178,30,"assertBigIntLiteral"],[179,51,178,0],[180,0,179,0,"exports"],[180,2,179,0,"exports"],[180,9,179,7],[180,10,179,8,"assertTSParameterProperty"],[180,35,179,0],[180,38,179,36,"assertTSParameterProperty"],[180,63,179,0],[181,0,180,0,"exports"],[181,2,180,0,"exports"],[181,9,180,7],[181,10,180,8,"assertTSDeclareFunction"],[181,33,180,0],[181,36,180,34,"assertTSDeclareFunction"],[181,59,180,0],[182,0,181,0,"exports"],[182,2,181,0,"exports"],[182,9,181,7],[182,10,181,8,"assertTSDeclareMethod"],[182,31,181,0],[182,34,181,32,"assertTSDeclareMethod"],[182,55,181,0],[183,0,182,0,"exports"],[183,2,182,0,"exports"],[183,9,182,7],[183,10,182,8,"assertTSQualifiedName"],[183,31,182,0],[183,34,182,32,"assertTSQualifiedName"],[183,55,182,0],[184,0,183,0,"exports"],[184,2,183,0,"exports"],[184,9,183,7],[184,10,183,8,"assertTSCallSignatureDeclaration"],[184,42,183,0],[184,45,183,43,"assertTSCallSignatureDeclaration"],[184,77,183,0],[185,0,184,0,"exports"],[185,2,184,0,"exports"],[185,9,184,7],[185,10,184,8,"assertTSConstructSignatureDeclaration"],[185,47,184,0],[185,50,184,48,"assertTSConstructSignatureDeclaration"],[185,87,184,0],[186,0,185,0,"exports"],[186,2,185,0,"exports"],[186,9,185,7],[186,10,185,8,"assertTSPropertySignature"],[186,35,185,0],[186,38,185,36,"assertTSPropertySignature"],[186,63,185,0],[187,0,186,0,"exports"],[187,2,186,0,"exports"],[187,9,186,7],[187,10,186,8,"assertTSMethodSignature"],[187,33,186,0],[187,36,186,34,"assertTSMethodSignature"],[187,59,186,0],[188,0,187,0,"exports"],[188,2,187,0,"exports"],[188,9,187,7],[188,10,187,8,"assertTSIndexSignature"],[188,32,187,0],[188,35,187,33,"assertTSIndexSignature"],[188,57,187,0],[189,0,188,0,"exports"],[189,2,188,0,"exports"],[189,9,188,7],[189,10,188,8,"assertTSAnyKeyword"],[189,28,188,0],[189,31,188,29,"assertTSAnyKeyword"],[189,49,188,0],[190,0,189,0,"exports"],[190,2,189,0,"exports"],[190,9,189,7],[190,10,189,8,"assertTSBooleanKeyword"],[190,32,189,0],[190,35,189,33,"assertTSBooleanKeyword"],[190,57,189,0],[191,0,190,0,"exports"],[191,2,190,0,"exports"],[191,9,190,7],[191,10,190,8,"assertTSBigIntKeyword"],[191,31,190,0],[191,34,190,32,"assertTSBigIntKeyword"],[191,55,190,0],[192,0,191,0,"exports"],[192,2,191,0,"exports"],[192,9,191,7],[192,10,191,8,"assertTSNeverKeyword"],[192,30,191,0],[192,33,191,31,"assertTSNeverKeyword"],[192,53,191,0],[193,0,192,0,"exports"],[193,2,192,0,"exports"],[193,9,192,7],[193,10,192,8,"assertTSNullKeyword"],[193,29,192,0],[193,32,192,30,"assertTSNullKeyword"],[193,51,192,0],[194,0,193,0,"exports"],[194,2,193,0,"exports"],[194,9,193,7],[194,10,193,8,"assertTSNumberKeyword"],[194,31,193,0],[194,34,193,32,"assertTSNumberKeyword"],[194,55,193,0],[195,0,194,0,"exports"],[195,2,194,0,"exports"],[195,9,194,7],[195,10,194,8,"assertTSObjectKeyword"],[195,31,194,0],[195,34,194,32,"assertTSObjectKeyword"],[195,55,194,0],[196,0,195,0,"exports"],[196,2,195,0,"exports"],[196,9,195,7],[196,10,195,8,"assertTSStringKeyword"],[196,31,195,0],[196,34,195,32,"assertTSStringKeyword"],[196,55,195,0],[197,0,196,0,"exports"],[197,2,196,0,"exports"],[197,9,196,7],[197,10,196,8,"assertTSSymbolKeyword"],[197,31,196,0],[197,34,196,32,"assertTSSymbolKeyword"],[197,55,196,0],[198,0,197,0,"exports"],[198,2,197,0,"exports"],[198,9,197,7],[198,10,197,8,"assertTSUndefinedKeyword"],[198,34,197,0],[198,37,197,35,"assertTSUndefinedKeyword"],[198,61,197,0],[199,0,198,0,"exports"],[199,2,198,0,"exports"],[199,9,198,7],[199,10,198,8,"assertTSUnknownKeyword"],[199,32,198,0],[199,35,198,33,"assertTSUnknownKeyword"],[199,57,198,0],[200,0,199,0,"exports"],[200,2,199,0,"exports"],[200,9,199,7],[200,10,199,8,"assertTSVoidKeyword"],[200,29,199,0],[200,32,199,30,"assertTSVoidKeyword"],[200,51,199,0],[201,0,200,0,"exports"],[201,2,200,0,"exports"],[201,9,200,7],[201,10,200,8,"assertTSThisType"],[201,26,200,0],[201,29,200,27,"assertTSThisType"],[201,45,200,0],[202,0,201,0,"exports"],[202,2,201,0,"exports"],[202,9,201,7],[202,10,201,8,"assertTSFunctionType"],[202,30,201,0],[202,33,201,31,"assertTSFunctionType"],[202,53,201,0],[203,0,202,0,"exports"],[203,2,202,0,"exports"],[203,9,202,7],[203,10,202,8,"assertTSConstructorType"],[203,33,202,0],[203,36,202,34,"assertTSConstructorType"],[203,59,202,0],[204,0,203,0,"exports"],[204,2,203,0,"exports"],[204,9,203,7],[204,10,203,8,"assertTSTypeReference"],[204,31,203,0],[204,34,203,32,"assertTSTypeReference"],[204,55,203,0],[205,0,204,0,"exports"],[205,2,204,0,"exports"],[205,9,204,7],[205,10,204,8,"assertTSTypePredicate"],[205,31,204,0],[205,34,204,32,"assertTSTypePredicate"],[205,55,204,0],[206,0,205,0,"exports"],[206,2,205,0,"exports"],[206,9,205,7],[206,10,205,8,"assertTSTypeQuery"],[206,27,205,0],[206,30,205,28,"assertTSTypeQuery"],[206,47,205,0],[207,0,206,0,"exports"],[207,2,206,0,"exports"],[207,9,206,7],[207,10,206,8,"assertTSTypeLiteral"],[207,29,206,0],[207,32,206,30,"assertTSTypeLiteral"],[207,51,206,0],[208,0,207,0,"exports"],[208,2,207,0,"exports"],[208,9,207,7],[208,10,207,8,"assertTSArrayType"],[208,27,207,0],[208,30,207,28,"assertTSArrayType"],[208,47,207,0],[209,0,208,0,"exports"],[209,2,208,0,"exports"],[209,9,208,7],[209,10,208,8,"assertTSTupleType"],[209,27,208,0],[209,30,208,28,"assertTSTupleType"],[209,47,208,0],[210,0,209,0,"exports"],[210,2,209,0,"exports"],[210,9,209,7],[210,10,209,8,"assertTSOptionalType"],[210,30,209,0],[210,33,209,31,"assertTSOptionalType"],[210,53,209,0],[211,0,210,0,"exports"],[211,2,210,0,"exports"],[211,9,210,7],[211,10,210,8,"assertTSRestType"],[211,26,210,0],[211,29,210,27,"assertTSRestType"],[211,45,210,0],[212,0,211,0,"exports"],[212,2,211,0,"exports"],[212,9,211,7],[212,10,211,8,"assertTSUnionType"],[212,27,211,0],[212,30,211,28,"assertTSUnionType"],[212,47,211,0],[213,0,212,0,"exports"],[213,2,212,0,"exports"],[213,9,212,7],[213,10,212,8,"assertTSIntersectionType"],[213,34,212,0],[213,37,212,35,"assertTSIntersectionType"],[213,61,212,0],[214,0,213,0,"exports"],[214,2,213,0,"exports"],[214,9,213,7],[214,10,213,8,"assertTSConditionalType"],[214,33,213,0],[214,36,213,34,"assertTSConditionalType"],[214,59,213,0],[215,0,214,0,"exports"],[215,2,214,0,"exports"],[215,9,214,7],[215,10,214,8,"assertTSInferType"],[215,27,214,0],[215,30,214,28,"assertTSInferType"],[215,47,214,0],[216,0,215,0,"exports"],[216,2,215,0,"exports"],[216,9,215,7],[216,10,215,8,"assertTSParenthesizedType"],[216,35,215,0],[216,38,215,36,"assertTSParenthesizedType"],[216,63,215,0],[217,0,216,0,"exports"],[217,2,216,0,"exports"],[217,9,216,7],[217,10,216,8,"assertTSTypeOperator"],[217,30,216,0],[217,33,216,31,"assertTSTypeOperator"],[217,53,216,0],[218,0,217,0,"exports"],[218,2,217,0,"exports"],[218,9,217,7],[218,10,217,8,"assertTSIndexedAccessType"],[218,35,217,0],[218,38,217,36,"assertTSIndexedAccessType"],[218,63,217,0],[219,0,218,0,"exports"],[219,2,218,0,"exports"],[219,9,218,7],[219,10,218,8,"assertTSMappedType"],[219,28,218,0],[219,31,218,29,"assertTSMappedType"],[219,49,218,0],[220,0,219,0,"exports"],[220,2,219,0,"exports"],[220,9,219,7],[220,10,219,8,"assertTSLiteralType"],[220,29,219,0],[220,32,219,30,"assertTSLiteralType"],[220,51,219,0],[221,0,220,0,"exports"],[221,2,220,0,"exports"],[221,9,220,7],[221,10,220,8,"assertTSExpressionWithTypeArguments"],[221,45,220,0],[221,48,220,46,"assertTSExpressionWithTypeArguments"],[221,83,220,0],[222,0,221,0,"exports"],[222,2,221,0,"exports"],[222,9,221,7],[222,10,221,8,"assertTSInterfaceDeclaration"],[222,38,221,0],[222,41,221,39,"assertTSInterfaceDeclaration"],[222,69,221,0],[223,0,222,0,"exports"],[223,2,222,0,"exports"],[223,9,222,7],[223,10,222,8,"assertTSInterfaceBody"],[223,31,222,0],[223,34,222,32,"assertTSInterfaceBody"],[223,55,222,0],[224,0,223,0,"exports"],[224,2,223,0,"exports"],[224,9,223,7],[224,10,223,8,"assertTSTypeAliasDeclaration"],[224,38,223,0],[224,41,223,39,"assertTSTypeAliasDeclaration"],[224,69,223,0],[225,0,224,0,"exports"],[225,2,224,0,"exports"],[225,9,224,7],[225,10,224,8,"assertTSAsExpression"],[225,30,224,0],[225,33,224,31,"assertTSAsExpression"],[225,53,224,0],[226,0,225,0,"exports"],[226,2,225,0,"exports"],[226,9,225,7],[226,10,225,8,"assertTSTypeAssertion"],[226,31,225,0],[226,34,225,32,"assertTSTypeAssertion"],[226,55,225,0],[227,0,226,0,"exports"],[227,2,226,0,"exports"],[227,9,226,7],[227,10,226,8,"assertTSEnumDeclaration"],[227,33,226,0],[227,36,226,34,"assertTSEnumDeclaration"],[227,59,226,0],[228,0,227,0,"exports"],[228,2,227,0,"exports"],[228,9,227,7],[228,10,227,8,"assertTSEnumMember"],[228,28,227,0],[228,31,227,29,"assertTSEnumMember"],[228,49,227,0],[229,0,228,0,"exports"],[229,2,228,0,"exports"],[229,9,228,7],[229,10,228,8,"assertTSModuleDeclaration"],[229,35,228,0],[229,38,228,36,"assertTSModuleDeclaration"],[229,63,228,0],[230,0,229,0,"exports"],[230,2,229,0,"exports"],[230,9,229,7],[230,10,229,8,"assertTSModuleBlock"],[230,29,229,0],[230,32,229,30,"assertTSModuleBlock"],[230,51,229,0],[231,0,230,0,"exports"],[231,2,230,0,"exports"],[231,9,230,7],[231,10,230,8,"assertTSImportType"],[231,28,230,0],[231,31,230,29,"assertTSImportType"],[231,49,230,0],[232,0,231,0,"exports"],[232,2,231,0,"exports"],[232,9,231,7],[232,10,231,8,"assertTSImportEqualsDeclaration"],[232,41,231,0],[232,44,231,42,"assertTSImportEqualsDeclaration"],[232,75,231,0],[233,0,232,0,"exports"],[233,2,232,0,"exports"],[233,9,232,7],[233,10,232,8,"assertTSExternalModuleReference"],[233,41,232,0],[233,44,232,42,"assertTSExternalModuleReference"],[233,75,232,0],[234,0,233,0,"exports"],[234,2,233,0,"exports"],[234,9,233,7],[234,10,233,8,"assertTSNonNullExpression"],[234,35,233,0],[234,38,233,36,"assertTSNonNullExpression"],[234,63,233,0],[235,0,234,0,"exports"],[235,2,234,0,"exports"],[235,9,234,7],[235,10,234,8,"assertTSExportAssignment"],[235,34,234,0],[235,37,234,35,"assertTSExportAssignment"],[235,61,234,0],[236,0,235,0,"exports"],[236,2,235,0,"exports"],[236,9,235,7],[236,10,235,8,"assertTSNamespaceExportDeclaration"],[236,44,235,0],[236,47,235,45,"assertTSNamespaceExportDeclaration"],[236,81,235,0],[237,0,236,0,"exports"],[237,2,236,0,"exports"],[237,9,236,7],[237,10,236,8,"assertTSTypeAnnotation"],[237,32,236,0],[237,35,236,33,"assertTSTypeAnnotation"],[237,57,236,0],[238,0,237,0,"exports"],[238,2,237,0,"exports"],[238,9,237,7],[238,10,237,8,"assertTSTypeParameterInstantiation"],[238,44,237,0],[238,47,237,45,"assertTSTypeParameterInstantiation"],[238,81,237,0],[239,0,238,0,"exports"],[239,2,238,0,"exports"],[239,9,238,7],[239,10,238,8,"assertTSTypeParameterDeclaration"],[239,42,238,0],[239,45,238,43,"assertTSTypeParameterDeclaration"],[239,77,238,0],[240,0,239,0,"exports"],[240,2,239,0,"exports"],[240,9,239,7],[240,10,239,8,"assertTSTypeParameter"],[240,31,239,0],[240,34,239,32,"assertTSTypeParameter"],[240,55,239,0],[241,0,240,0,"exports"],[241,2,240,0,"exports"],[241,9,240,7],[241,10,240,8,"assertExpression"],[241,26,240,0],[241,29,240,27,"assertExpression"],[241,45,240,0],[242,0,241,0,"exports"],[242,2,241,0,"exports"],[242,9,241,7],[242,10,241,8,"assertBinary"],[242,22,241,0],[242,25,241,23,"assertBinary"],[242,37,241,0],[243,0,242,0,"exports"],[243,2,242,0,"exports"],[243,9,242,7],[243,10,242,8,"assertScopable"],[243,24,242,0],[243,27,242,25,"assertScopable"],[243,41,242,0],[244,0,243,0,"exports"],[244,2,243,0,"exports"],[244,9,243,7],[244,10,243,8,"assertBlockParent"],[244,27,243,0],[244,30,243,28,"assertBlockParent"],[244,47,243,0],[245,0,244,0,"exports"],[245,2,244,0,"exports"],[245,9,244,7],[245,10,244,8,"assertBlock"],[245,21,244,0],[245,24,244,22,"assertBlock"],[245,35,244,0],[246,0,245,0,"exports"],[246,2,245,0,"exports"],[246,9,245,7],[246,10,245,8,"assertStatement"],[246,25,245,0],[246,28,245,26,"assertStatement"],[246,43,245,0],[247,0,246,0,"exports"],[247,2,246,0,"exports"],[247,9,246,7],[247,10,246,8,"assertTerminatorless"],[247,30,246,0],[247,33,246,31,"assertTerminatorless"],[247,53,246,0],[248,0,247,0,"exports"],[248,2,247,0,"exports"],[248,9,247,7],[248,10,247,8,"assertCompletionStatement"],[248,35,247,0],[248,38,247,36,"assertCompletionStatement"],[248,63,247,0],[249,0,248,0,"exports"],[249,2,248,0,"exports"],[249,9,248,7],[249,10,248,8,"assertConditional"],[249,27,248,0],[249,30,248,28,"assertConditional"],[249,47,248,0],[250,0,249,0,"exports"],[250,2,249,0,"exports"],[250,9,249,7],[250,10,249,8,"assertLoop"],[250,20,249,0],[250,23,249,21,"assertLoop"],[250,33,249,0],[251,0,250,0,"exports"],[251,2,250,0,"exports"],[251,9,250,7],[251,10,250,8,"assertWhile"],[251,21,250,0],[251,24,250,22,"assertWhile"],[251,35,250,0],[252,0,251,0,"exports"],[252,2,251,0,"exports"],[252,9,251,7],[252,10,251,8,"assertExpressionWrapper"],[252,33,251,0],[252,36,251,34,"assertExpressionWrapper"],[252,59,251,0],[253,0,252,0,"exports"],[253,2,252,0,"exports"],[253,9,252,7],[253,10,252,8,"assertFor"],[253,19,252,0],[253,22,252,20,"assertFor"],[253,31,252,0],[254,0,253,0,"exports"],[254,2,253,0,"exports"],[254,9,253,7],[254,10,253,8,"assertForXStatement"],[254,29,253,0],[254,32,253,30,"assertForXStatement"],[254,51,253,0],[255,0,254,0,"exports"],[255,2,254,0,"exports"],[255,9,254,7],[255,10,254,8,"assertFunction"],[255,24,254,0],[255,27,254,25,"assertFunction"],[255,41,254,0],[256,0,255,0,"exports"],[256,2,255,0,"exports"],[256,9,255,7],[256,10,255,8,"assertFunctionParent"],[256,30,255,0],[256,33,255,31,"assertFunctionParent"],[256,53,255,0],[257,0,256,0,"exports"],[257,2,256,0,"exports"],[257,9,256,7],[257,10,256,8,"assertPureish"],[257,23,256,0],[257,26,256,24,"assertPureish"],[257,39,256,0],[258,0,257,0,"exports"],[258,2,257,0,"exports"],[258,9,257,7],[258,10,257,8,"assertDeclaration"],[258,27,257,0],[258,30,257,28,"assertDeclaration"],[258,47,257,0],[259,0,258,0,"exports"],[259,2,258,0,"exports"],[259,9,258,7],[259,10,258,8,"assertPatternLike"],[259,27,258,0],[259,30,258,28,"assertPatternLike"],[259,47,258,0],[260,0,259,0,"exports"],[260,2,259,0,"exports"],[260,9,259,7],[260,10,259,8,"assertLVal"],[260,20,259,0],[260,23,259,21,"assertLVal"],[260,33,259,0],[261,0,260,0,"exports"],[261,2,260,0,"exports"],[261,9,260,7],[261,10,260,8,"assertTSEntityName"],[261,28,260,0],[261,31,260,29,"assertTSEntityName"],[261,49,260,0],[262,0,261,0,"exports"],[262,2,261,0,"exports"],[262,9,261,7],[262,10,261,8,"assertLiteral"],[262,23,261,0],[262,26,261,24,"assertLiteral"],[262,39,261,0],[263,0,262,0,"exports"],[263,2,262,0,"exports"],[263,9,262,7],[263,10,262,8,"assertImmutable"],[263,25,262,0],[263,28,262,26,"assertImmutable"],[263,43,262,0],[264,0,263,0,"exports"],[264,2,263,0,"exports"],[264,9,263,7],[264,10,263,8,"assertUserWhitespacable"],[264,33,263,0],[264,36,263,34,"assertUserWhitespacable"],[264,59,263,0],[265,0,264,0,"exports"],[265,2,264,0,"exports"],[265,9,264,7],[265,10,264,8,"assertMethod"],[265,22,264,0],[265,25,264,23,"assertMethod"],[265,37,264,0],[266,0,265,0,"exports"],[266,2,265,0,"exports"],[266,9,265,7],[266,10,265,8,"assertObjectMember"],[266,28,265,0],[266,31,265,29,"assertObjectMember"],[266,49,265,0],[267,0,266,0,"exports"],[267,2,266,0,"exports"],[267,9,266,7],[267,10,266,8,"assertProperty"],[267,24,266,0],[267,27,266,25,"assertProperty"],[267,41,266,0],[268,0,267,0,"exports"],[268,2,267,0,"exports"],[268,9,267,7],[268,10,267,8,"assertUnaryLike"],[268,25,267,0],[268,28,267,26,"assertUnaryLike"],[268,43,267,0],[269,0,268,0,"exports"],[269,2,268,0,"exports"],[269,9,268,7],[269,10,268,8,"assertPattern"],[269,23,268,0],[269,26,268,24,"assertPattern"],[269,39,268,0],[270,0,269,0,"exports"],[270,2,269,0,"exports"],[270,9,269,7],[270,10,269,8,"assertClass"],[270,21,269,0],[270,24,269,22,"assertClass"],[270,35,269,0],[271,0,270,0,"exports"],[271,2,270,0,"exports"],[271,9,270,7],[271,10,270,8,"assertModuleDeclaration"],[271,33,270,0],[271,36,270,34,"assertModuleDeclaration"],[271,59,270,0],[272,0,271,0,"exports"],[272,2,271,0,"exports"],[272,9,271,7],[272,10,271,8,"assertExportDeclaration"],[272,33,271,0],[272,36,271,34,"assertExportDeclaration"],[272,59,271,0],[273,0,272,0,"exports"],[273,2,272,0,"exports"],[273,9,272,7],[273,10,272,8,"assertModuleSpecifier"],[273,31,272,0],[273,34,272,32,"assertModuleSpecifier"],[273,55,272,0],[274,0,273,0,"exports"],[274,2,273,0,"exports"],[274,9,273,7],[274,10,273,8,"assertFlow"],[274,20,273,0],[274,23,273,21,"assertFlow"],[274,33,273,0],[275,0,274,0,"exports"],[275,2,274,0,"exports"],[275,9,274,7],[275,10,274,8,"assertFlowType"],[275,24,274,0],[275,27,274,25,"assertFlowType"],[275,41,274,0],[276,0,275,0,"exports"],[276,2,275,0,"exports"],[276,9,275,7],[276,10,275,8,"assertFlowBaseAnnotation"],[276,34,275,0],[276,37,275,35,"assertFlowBaseAnnotation"],[276,61,275,0],[277,0,276,0,"exports"],[277,2,276,0,"exports"],[277,9,276,7],[277,10,276,8,"assertFlowDeclaration"],[277,31,276,0],[277,34,276,32,"assertFlowDeclaration"],[277,55,276,0],[278,0,277,0,"exports"],[278,2,277,0,"exports"],[278,9,277,7],[278,10,277,8,"assertFlowPredicate"],[278,29,277,0],[278,32,277,30,"assertFlowPredicate"],[278,51,277,0],[279,0,278,0,"exports"],[279,2,278,0,"exports"],[279,9,278,7],[279,10,278,8,"assertEnumBody"],[279,24,278,0],[279,27,278,25,"assertEnumBody"],[279,41,278,0],[280,0,279,0,"exports"],[280,2,279,0,"exports"],[280,9,279,7],[280,10,279,8,"assertEnumMember"],[280,26,279,0],[280,29,279,27,"assertEnumMember"],[280,45,279,0],[281,0,280,0,"exports"],[281,2,280,0,"exports"],[281,9,280,7],[281,10,280,8,"assertJSX"],[281,19,280,0],[281,22,280,20,"assertJSX"],[281,31,280,0],[282,0,281,0,"exports"],[282,2,281,0,"exports"],[282,9,281,7],[282,10,281,8,"assertPrivate"],[282,23,281,0],[282,26,281,24,"assertPrivate"],[282,39,281,0],[283,0,282,0,"exports"],[283,2,282,0,"exports"],[283,9,282,7],[283,10,282,8,"assertTSTypeElement"],[283,29,282,0],[283,32,282,30,"assertTSTypeElement"],[283,51,282,0],[284,0,283,0,"exports"],[284,2,283,0,"exports"],[284,9,283,7],[284,10,283,8,"assertTSType"],[284,22,283,0],[284,25,283,23,"assertTSType"],[284,37,283,0],[285,0,284,0,"exports"],[285,2,284,0,"exports"],[285,9,284,7],[285,10,284,8,"assertNumberLiteral"],[285,29,284,0],[285,32,284,30,"assertNumberLiteral"],[285,51,284,0],[286,0,285,0,"exports"],[286,2,285,0,"exports"],[286,9,285,7],[286,10,285,8,"assertRegexLiteral"],[286,28,285,0],[286,31,285,29,"assertRegexLiteral"],[286,49,285,0],[287,0,286,0,"exports"],[287,2,286,0,"exports"],[287,9,286,7],[287,10,286,8,"assertRestProperty"],[287,28,286,0],[287,31,286,29,"assertRestProperty"],[287,49,286,0],[288,0,287,0,"exports"],[288,2,287,0,"exports"],[288,9,287,7],[288,10,287,8,"assertSpreadProperty"],[288,30,287,0],[288,33,287,31,"assertSpreadProperty"],[288,53,287,0],[290,0,289,0],[290,6,289,4,"_is"],[290,9,289,7],[290,12,289,10,"_interopRequireDefault"],[290,34,289,32],[290,35,289,33,"require"],[290,46,289,40],[290,88,289,32],[290,89,289,0],[292,0,291,0],[292,11,291,9,"_interopRequireDefault"],[292,33,291,0],[292,34,291,32,"obj"],[292,37,291,0],[292,39,291,37],[293,0,291,39],[293,11,291,46,"obj"],[293,14,291,49],[293,18,291,53,"obj"],[293,21,291,56],[293,22,291,57,"__esModule"],[293,32,291,46],[293,35,291,70,"obj"],[293,38,291,46],[293,41,291,76],[294,0,291,78,"default"],[294,6,291,78,"default"],[294,13,291,85],[294,15,291,87,"obj"],[295,0,291,76],[295,5,291,39],[296,0,291,95],[298,0,293,0],[298,11,293,9,"assert"],[298,17,293,0],[298,18,293,16,"type"],[298,22,293,0],[298,24,293,22,"node"],[298,28,293,0],[298,30,293,28,"opts"],[298,34,293,0],[298,36,293,34],[299,0,294,2],[299,8,294,6],[299,9,294,7],[299,10,294,8],[299,13,294,11,"_is"],[299,16,294,14],[299,17,294,15,"default"],[299,24,294,7],[299,26,294,24,"type"],[299,30,294,7],[299,32,294,30,"node"],[299,36,294,7],[299,38,294,36,"opts"],[299,42,294,7],[299,43,294,2],[299,45,294,43],[300,0,295,4],[300,12,295,10],[300,16,295,14,"Error"],[300,21,295,10],[300,22,295,20],[300,43,295,38,"type"],[300,47,295,20],[300,70,295,59,"JSON"],[300,74,295,63],[300,75,295,64,"stringify"],[300,84,295,59],[300,85,295,74,"opts"],[300,89,295,59],[300,90,295,20],[300,124,295,106,"node"],[300,128,295,110],[300,129,295,111,"type"],[300,133,295,20],[300,142,295,10],[300,143,295,4],[301,0,296,3],[302,0,297,1],[304,0,299,0],[304,11,299,9,"assertArrayExpression"],[304,32,299,0],[304,33,299,31,"node"],[304,37,299,0],[304,39,299,48],[305,0,299,48],[305,8,299,37,"opts"],[305,12,299,48],[305,83,299,44],[305,85,299,48],[306,0,300,2,"assert"],[306,4,300,2,"assert"],[306,10,300,8],[306,11,300,9],[306,28,300,8],[306,30,300,28,"node"],[306,34,300,8],[306,36,300,34,"opts"],[306,40,300,8],[306,41,300,2],[307,0,301,1],[309,0,303,0],[309,11,303,9,"assertAssignmentExpression"],[309,37,303,0],[309,38,303,36,"node"],[309,42,303,0],[309,44,303,53],[310,0,303,53],[310,8,303,42,"opts"],[310,12,303,53],[310,83,303,49],[310,85,303,53],[311,0,304,2,"assert"],[311,4,304,2,"assert"],[311,10,304,8],[311,11,304,9],[311,33,304,8],[311,35,304,33,"node"],[311,39,304,8],[311,41,304,39,"opts"],[311,45,304,8],[311,46,304,2],[312,0,305,1],[314,0,307,0],[314,11,307,9,"assertBinaryExpression"],[314,33,307,0],[314,34,307,32,"node"],[314,38,307,0],[314,40,307,49],[315,0,307,49],[315,8,307,38,"opts"],[315,12,307,49],[315,83,307,45],[315,85,307,49],[316,0,308,2,"assert"],[316,4,308,2,"assert"],[316,10,308,8],[316,11,308,9],[316,29,308,8],[316,31,308,29,"node"],[316,35,308,8],[316,37,308,35,"opts"],[316,41,308,8],[316,42,308,2],[317,0,309,1],[319,0,311,0],[319,11,311,9,"assertInterpreterDirective"],[319,37,311,0],[319,38,311,36,"node"],[319,42,311,0],[319,44,311,53],[320,0,311,53],[320,8,311,42,"opts"],[320,12,311,53],[320,83,311,49],[320,85,311,53],[321,0,312,2,"assert"],[321,4,312,2,"assert"],[321,10,312,8],[321,11,312,9],[321,33,312,8],[321,35,312,33,"node"],[321,39,312,8],[321,41,312,39,"opts"],[321,45,312,8],[321,46,312,2],[322,0,313,1],[324,0,315,0],[324,11,315,9,"assertDirective"],[324,26,315,0],[324,27,315,25,"node"],[324,31,315,0],[324,33,315,42],[325,0,315,42],[325,8,315,31,"opts"],[325,12,315,42],[325,83,315,38],[325,85,315,42],[326,0,316,2,"assert"],[326,4,316,2,"assert"],[326,10,316,8],[326,11,316,9],[326,22,316,8],[326,24,316,22,"node"],[326,28,316,8],[326,30,316,28,"opts"],[326,34,316,8],[326,35,316,2],[327,0,317,1],[329,0,319,0],[329,11,319,9,"assertDirectiveLiteral"],[329,33,319,0],[329,34,319,32,"node"],[329,38,319,0],[329,40,319,49],[330,0,319,49],[330,8,319,38,"opts"],[330,12,319,49],[330,83,319,45],[330,85,319,49],[331,0,320,2,"assert"],[331,4,320,2,"assert"],[331,10,320,8],[331,11,320,9],[331,29,320,8],[331,31,320,29,"node"],[331,35,320,8],[331,37,320,35,"opts"],[331,41,320,8],[331,42,320,2],[332,0,321,1],[334,0,323,0],[334,11,323,9,"assertBlockStatement"],[334,31,323,0],[334,32,323,30,"node"],[334,36,323,0],[334,38,323,47],[335,0,323,47],[335,8,323,36,"opts"],[335,12,323,47],[335,83,323,43],[335,85,323,47],[336,0,324,2,"assert"],[336,4,324,2,"assert"],[336,10,324,8],[336,11,324,9],[336,27,324,8],[336,29,324,27,"node"],[336,33,324,8],[336,35,324,33,"opts"],[336,39,324,8],[336,40,324,2],[337,0,325,1],[339,0,327,0],[339,11,327,9,"assertBreakStatement"],[339,31,327,0],[339,32,327,30,"node"],[339,36,327,0],[339,38,327,47],[340,0,327,47],[340,8,327,36,"opts"],[340,12,327,47],[340,83,327,43],[340,85,327,47],[341,0,328,2,"assert"],[341,4,328,2,"assert"],[341,10,328,8],[341,11,328,9],[341,27,328,8],[341,29,328,27,"node"],[341,33,328,8],[341,35,328,33,"opts"],[341,39,328,8],[341,40,328,2],[342,0,329,1],[344,0,331,0],[344,11,331,9,"assertCallExpression"],[344,31,331,0],[344,32,331,30,"node"],[344,36,331,0],[344,38,331,47],[345,0,331,47],[345,8,331,36,"opts"],[345,12,331,47],[345,83,331,43],[345,85,331,47],[346,0,332,2,"assert"],[346,4,332,2,"assert"],[346,10,332,8],[346,11,332,9],[346,27,332,8],[346,29,332,27,"node"],[346,33,332,8],[346,35,332,33,"opts"],[346,39,332,8],[346,40,332,2],[347,0,333,1],[349,0,335,0],[349,11,335,9,"assertCatchClause"],[349,28,335,0],[349,29,335,27,"node"],[349,33,335,0],[349,35,335,44],[350,0,335,44],[350,8,335,33,"opts"],[350,12,335,44],[350,83,335,40],[350,85,335,44],[351,0,336,2,"assert"],[351,4,336,2,"assert"],[351,10,336,8],[351,11,336,9],[351,24,336,8],[351,26,336,24,"node"],[351,30,336,8],[351,32,336,30,"opts"],[351,36,336,8],[351,37,336,2],[352,0,337,1],[354,0,339,0],[354,11,339,9,"assertConditionalExpression"],[354,38,339,0],[354,39,339,37,"node"],[354,43,339,0],[354,45,339,54],[355,0,339,54],[355,8,339,43,"opts"],[355,12,339,54],[355,83,339,50],[355,85,339,54],[356,0,340,2,"assert"],[356,4,340,2,"assert"],[356,10,340,8],[356,11,340,9],[356,34,340,8],[356,36,340,34,"node"],[356,40,340,8],[356,42,340,40,"opts"],[356,46,340,8],[356,47,340,2],[357,0,341,1],[359,0,343,0],[359,11,343,9,"assertContinueStatement"],[359,34,343,0],[359,35,343,33,"node"],[359,39,343,0],[359,41,343,50],[360,0,343,50],[360,8,343,39,"opts"],[360,12,343,50],[360,83,343,46],[360,85,343,50],[361,0,344,2,"assert"],[361,4,344,2,"assert"],[361,10,344,8],[361,11,344,9],[361,30,344,8],[361,32,344,30,"node"],[361,36,344,8],[361,38,344,36,"opts"],[361,42,344,8],[361,43,344,2],[362,0,345,1],[364,0,347,0],[364,11,347,9,"assertDebuggerStatement"],[364,34,347,0],[364,35,347,33,"node"],[364,39,347,0],[364,41,347,50],[365,0,347,50],[365,8,347,39,"opts"],[365,12,347,50],[365,83,347,46],[365,85,347,50],[366,0,348,2,"assert"],[366,4,348,2,"assert"],[366,10,348,8],[366,11,348,9],[366,30,348,8],[366,32,348,30,"node"],[366,36,348,8],[366,38,348,36,"opts"],[366,42,348,8],[366,43,348,2],[367,0,349,1],[369,0,351,0],[369,11,351,9,"assertDoWhileStatement"],[369,33,351,0],[369,34,351,32,"node"],[369,38,351,0],[369,40,351,49],[370,0,351,49],[370,8,351,38,"opts"],[370,12,351,49],[370,83,351,45],[370,85,351,49],[371,0,352,2,"assert"],[371,4,352,2,"assert"],[371,10,352,8],[371,11,352,9],[371,29,352,8],[371,31,352,29,"node"],[371,35,352,8],[371,37,352,35,"opts"],[371,41,352,8],[371,42,352,2],[372,0,353,1],[374,0,355,0],[374,11,355,9,"assertEmptyStatement"],[374,31,355,0],[374,32,355,30,"node"],[374,36,355,0],[374,38,355,47],[375,0,355,47],[375,8,355,36,"opts"],[375,12,355,47],[375,83,355,43],[375,85,355,47],[376,0,356,2,"assert"],[376,4,356,2,"assert"],[376,10,356,8],[376,11,356,9],[376,27,356,8],[376,29,356,27,"node"],[376,33,356,8],[376,35,356,33,"opts"],[376,39,356,8],[376,40,356,2],[377,0,357,1],[379,0,359,0],[379,11,359,9,"assertExpressionStatement"],[379,36,359,0],[379,37,359,35,"node"],[379,41,359,0],[379,43,359,52],[380,0,359,52],[380,8,359,41,"opts"],[380,12,359,52],[380,83,359,48],[380,85,359,52],[381,0,360,2,"assert"],[381,4,360,2,"assert"],[381,10,360,8],[381,11,360,9],[381,32,360,8],[381,34,360,32,"node"],[381,38,360,8],[381,40,360,38,"opts"],[381,44,360,8],[381,45,360,2],[382,0,361,1],[384,0,363,0],[384,11,363,9,"assertFile"],[384,21,363,0],[384,22,363,20,"node"],[384,26,363,0],[384,28,363,37],[385,0,363,37],[385,8,363,26,"opts"],[385,12,363,37],[385,83,363,33],[385,85,363,37],[386,0,364,2,"assert"],[386,4,364,2,"assert"],[386,10,364,8],[386,11,364,9],[386,17,364,8],[386,19,364,17,"node"],[386,23,364,8],[386,25,364,23,"opts"],[386,29,364,8],[386,30,364,2],[387,0,365,1],[389,0,367,0],[389,11,367,9,"assertForInStatement"],[389,31,367,0],[389,32,367,30,"node"],[389,36,367,0],[389,38,367,47],[390,0,367,47],[390,8,367,36,"opts"],[390,12,367,47],[390,83,367,43],[390,85,367,47],[391,0,368,2,"assert"],[391,4,368,2,"assert"],[391,10,368,8],[391,11,368,9],[391,27,368,8],[391,29,368,27,"node"],[391,33,368,8],[391,35,368,33,"opts"],[391,39,368,8],[391,40,368,2],[392,0,369,1],[394,0,371,0],[394,11,371,9,"assertForStatement"],[394,29,371,0],[394,30,371,28,"node"],[394,34,371,0],[394,36,371,45],[395,0,371,45],[395,8,371,34,"opts"],[395,12,371,45],[395,83,371,41],[395,85,371,45],[396,0,372,2,"assert"],[396,4,372,2,"assert"],[396,10,372,8],[396,11,372,9],[396,25,372,8],[396,27,372,25,"node"],[396,31,372,8],[396,33,372,31,"opts"],[396,37,372,8],[396,38,372,2],[397,0,373,1],[399,0,375,0],[399,11,375,9,"assertFunctionDeclaration"],[399,36,375,0],[399,37,375,35,"node"],[399,41,375,0],[399,43,375,52],[400,0,375,52],[400,8,375,41,"opts"],[400,12,375,52],[400,83,375,48],[400,85,375,52],[401,0,376,2,"assert"],[401,4,376,2,"assert"],[401,10,376,8],[401,11,376,9],[401,32,376,8],[401,34,376,32,"node"],[401,38,376,8],[401,40,376,38,"opts"],[401,44,376,8],[401,45,376,2],[402,0,377,1],[404,0,379,0],[404,11,379,9,"assertFunctionExpression"],[404,35,379,0],[404,36,379,34,"node"],[404,40,379,0],[404,42,379,51],[405,0,379,51],[405,8,379,40,"opts"],[405,12,379,51],[405,83,379,47],[405,85,379,51],[406,0,380,2,"assert"],[406,4,380,2,"assert"],[406,10,380,8],[406,11,380,9],[406,31,380,8],[406,33,380,31,"node"],[406,37,380,8],[406,39,380,37,"opts"],[406,43,380,8],[406,44,380,2],[407,0,381,1],[409,0,383,0],[409,11,383,9,"assertIdentifier"],[409,27,383,0],[409,28,383,26,"node"],[409,32,383,0],[409,34,383,43],[410,0,383,43],[410,8,383,32,"opts"],[410,12,383,43],[410,83,383,39],[410,85,383,43],[411,0,384,2,"assert"],[411,4,384,2,"assert"],[411,10,384,8],[411,11,384,9],[411,23,384,8],[411,25,384,23,"node"],[411,29,384,8],[411,31,384,29,"opts"],[411,35,384,8],[411,36,384,2],[412,0,385,1],[414,0,387,0],[414,11,387,9,"assertIfStatement"],[414,28,387,0],[414,29,387,27,"node"],[414,33,387,0],[414,35,387,44],[415,0,387,44],[415,8,387,33,"opts"],[415,12,387,44],[415,83,387,40],[415,85,387,44],[416,0,388,2,"assert"],[416,4,388,2,"assert"],[416,10,388,8],[416,11,388,9],[416,24,388,8],[416,26,388,24,"node"],[416,30,388,8],[416,32,388,30,"opts"],[416,36,388,8],[416,37,388,2],[417,0,389,1],[419,0,391,0],[419,11,391,9,"assertLabeledStatement"],[419,33,391,0],[419,34,391,32,"node"],[419,38,391,0],[419,40,391,49],[420,0,391,49],[420,8,391,38,"opts"],[420,12,391,49],[420,83,391,45],[420,85,391,49],[421,0,392,2,"assert"],[421,4,392,2,"assert"],[421,10,392,8],[421,11,392,9],[421,29,392,8],[421,31,392,29,"node"],[421,35,392,8],[421,37,392,35,"opts"],[421,41,392,8],[421,42,392,2],[422,0,393,1],[424,0,395,0],[424,11,395,9,"assertStringLiteral"],[424,30,395,0],[424,31,395,29,"node"],[424,35,395,0],[424,37,395,46],[425,0,395,46],[425,8,395,35,"opts"],[425,12,395,46],[425,83,395,42],[425,85,395,46],[426,0,396,2,"assert"],[426,4,396,2,"assert"],[426,10,396,8],[426,11,396,9],[426,26,396,8],[426,28,396,26,"node"],[426,32,396,8],[426,34,396,32,"opts"],[426,38,396,8],[426,39,396,2],[427,0,397,1],[429,0,399,0],[429,11,399,9,"assertNumericLiteral"],[429,31,399,0],[429,32,399,30,"node"],[429,36,399,0],[429,38,399,47],[430,0,399,47],[430,8,399,36,"opts"],[430,12,399,47],[430,83,399,43],[430,85,399,47],[431,0,400,2,"assert"],[431,4,400,2,"assert"],[431,10,400,8],[431,11,400,9],[431,27,400,8],[431,29,400,27,"node"],[431,33,400,8],[431,35,400,33,"opts"],[431,39,400,8],[431,40,400,2],[432,0,401,1],[434,0,403,0],[434,11,403,9,"assertNullLiteral"],[434,28,403,0],[434,29,403,27,"node"],[434,33,403,0],[434,35,403,44],[435,0,403,44],[435,8,403,33,"opts"],[435,12,403,44],[435,83,403,40],[435,85,403,44],[436,0,404,2,"assert"],[436,4,404,2,"assert"],[436,10,404,8],[436,11,404,9],[436,24,404,8],[436,26,404,24,"node"],[436,30,404,8],[436,32,404,30,"opts"],[436,36,404,8],[436,37,404,2],[437,0,405,1],[439,0,407,0],[439,11,407,9,"assertBooleanLiteral"],[439,31,407,0],[439,32,407,30,"node"],[439,36,407,0],[439,38,407,47],[440,0,407,47],[440,8,407,36,"opts"],[440,12,407,47],[440,83,407,43],[440,85,407,47],[441,0,408,2,"assert"],[441,4,408,2,"assert"],[441,10,408,8],[441,11,408,9],[441,27,408,8],[441,29,408,27,"node"],[441,33,408,8],[441,35,408,33,"opts"],[441,39,408,8],[441,40,408,2],[442,0,409,1],[444,0,411,0],[444,11,411,9,"assertRegExpLiteral"],[444,30,411,0],[444,31,411,29,"node"],[444,35,411,0],[444,37,411,46],[445,0,411,46],[445,8,411,35,"opts"],[445,12,411,46],[445,83,411,42],[445,85,411,46],[446,0,412,2,"assert"],[446,4,412,2,"assert"],[446,10,412,8],[446,11,412,9],[446,26,412,8],[446,28,412,26,"node"],[446,32,412,8],[446,34,412,32,"opts"],[446,38,412,8],[446,39,412,2],[447,0,413,1],[449,0,415,0],[449,11,415,9,"assertLogicalExpression"],[449,34,415,0],[449,35,415,33,"node"],[449,39,415,0],[449,41,415,50],[450,0,415,50],[450,8,415,39,"opts"],[450,12,415,50],[450,83,415,46],[450,85,415,50],[451,0,416,2,"assert"],[451,4,416,2,"assert"],[451,10,416,8],[451,11,416,9],[451,30,416,8],[451,32,416,30,"node"],[451,36,416,8],[451,38,416,36,"opts"],[451,42,416,8],[451,43,416,2],[452,0,417,1],[454,0,419,0],[454,11,419,9,"assertMemberExpression"],[454,33,419,0],[454,34,419,32,"node"],[454,38,419,0],[454,40,419,49],[455,0,419,49],[455,8,419,38,"opts"],[455,12,419,49],[455,83,419,45],[455,85,419,49],[456,0,420,2,"assert"],[456,4,420,2,"assert"],[456,10,420,8],[456,11,420,9],[456,29,420,8],[456,31,420,29,"node"],[456,35,420,8],[456,37,420,35,"opts"],[456,41,420,8],[456,42,420,2],[457,0,421,1],[459,0,423,0],[459,11,423,9,"assertNewExpression"],[459,30,423,0],[459,31,423,29,"node"],[459,35,423,0],[459,37,423,46],[460,0,423,46],[460,8,423,35,"opts"],[460,12,423,46],[460,83,423,42],[460,85,423,46],[461,0,424,2,"assert"],[461,4,424,2,"assert"],[461,10,424,8],[461,11,424,9],[461,26,424,8],[461,28,424,26,"node"],[461,32,424,8],[461,34,424,32,"opts"],[461,38,424,8],[461,39,424,2],[462,0,425,1],[464,0,427,0],[464,11,427,9,"assertProgram"],[464,24,427,0],[464,25,427,23,"node"],[464,29,427,0],[464,31,427,40],[465,0,427,40],[465,8,427,29,"opts"],[465,12,427,40],[465,83,427,36],[465,85,427,40],[466,0,428,2,"assert"],[466,4,428,2,"assert"],[466,10,428,8],[466,11,428,9],[466,20,428,8],[466,22,428,20,"node"],[466,26,428,8],[466,28,428,26,"opts"],[466,32,428,8],[466,33,428,2],[467,0,429,1],[469,0,431,0],[469,11,431,9,"assertObjectExpression"],[469,33,431,0],[469,34,431,32,"node"],[469,38,431,0],[469,40,431,49],[470,0,431,49],[470,8,431,38,"opts"],[470,12,431,49],[470,83,431,45],[470,85,431,49],[471,0,432,2,"assert"],[471,4,432,2,"assert"],[471,10,432,8],[471,11,432,9],[471,29,432,8],[471,31,432,29,"node"],[471,35,432,8],[471,37,432,35,"opts"],[471,41,432,8],[471,42,432,2],[472,0,433,1],[474,0,435,0],[474,11,435,9,"assertObjectMethod"],[474,29,435,0],[474,30,435,28,"node"],[474,34,435,0],[474,36,435,45],[475,0,435,45],[475,8,435,34,"opts"],[475,12,435,45],[475,83,435,41],[475,85,435,45],[476,0,436,2,"assert"],[476,4,436,2,"assert"],[476,10,436,8],[476,11,436,9],[476,25,436,8],[476,27,436,25,"node"],[476,31,436,8],[476,33,436,31,"opts"],[476,37,436,8],[476,38,436,2],[477,0,437,1],[479,0,439,0],[479,11,439,9,"assertObjectProperty"],[479,31,439,0],[479,32,439,30,"node"],[479,36,439,0],[479,38,439,47],[480,0,439,47],[480,8,439,36,"opts"],[480,12,439,47],[480,83,439,43],[480,85,439,47],[481,0,440,2,"assert"],[481,4,440,2,"assert"],[481,10,440,8],[481,11,440,9],[481,27,440,8],[481,29,440,27,"node"],[481,33,440,8],[481,35,440,33,"opts"],[481,39,440,8],[481,40,440,2],[482,0,441,1],[484,0,443,0],[484,11,443,9,"assertRestElement"],[484,28,443,0],[484,29,443,27,"node"],[484,33,443,0],[484,35,443,44],[485,0,443,44],[485,8,443,33,"opts"],[485,12,443,44],[485,83,443,40],[485,85,443,44],[486,0,444,2,"assert"],[486,4,444,2,"assert"],[486,10,444,8],[486,11,444,9],[486,24,444,8],[486,26,444,24,"node"],[486,30,444,8],[486,32,444,30,"opts"],[486,36,444,8],[486,37,444,2],[487,0,445,1],[489,0,447,0],[489,11,447,9,"assertReturnStatement"],[489,32,447,0],[489,33,447,31,"node"],[489,37,447,0],[489,39,447,48],[490,0,447,48],[490,8,447,37,"opts"],[490,12,447,48],[490,83,447,44],[490,85,447,48],[491,0,448,2,"assert"],[491,4,448,2,"assert"],[491,10,448,8],[491,11,448,9],[491,28,448,8],[491,30,448,28,"node"],[491,34,448,8],[491,36,448,34,"opts"],[491,40,448,8],[491,41,448,2],[492,0,449,1],[494,0,451,0],[494,11,451,9,"assertSequenceExpression"],[494,35,451,0],[494,36,451,34,"node"],[494,40,451,0],[494,42,451,51],[495,0,451,51],[495,8,451,40,"opts"],[495,12,451,51],[495,83,451,47],[495,85,451,51],[496,0,452,2,"assert"],[496,4,452,2,"assert"],[496,10,452,8],[496,11,452,9],[496,31,452,8],[496,33,452,31,"node"],[496,37,452,8],[496,39,452,37,"opts"],[496,43,452,8],[496,44,452,2],[497,0,453,1],[499,0,455,0],[499,11,455,9,"assertParenthesizedExpression"],[499,40,455,0],[499,41,455,39,"node"],[499,45,455,0],[499,47,455,56],[500,0,455,56],[500,8,455,45,"opts"],[500,12,455,56],[500,83,455,52],[500,85,455,56],[501,0,456,2,"assert"],[501,4,456,2,"assert"],[501,10,456,8],[501,11,456,9],[501,36,456,8],[501,38,456,36,"node"],[501,42,456,8],[501,44,456,42,"opts"],[501,48,456,8],[501,49,456,2],[502,0,457,1],[504,0,459,0],[504,11,459,9,"assertSwitchCase"],[504,27,459,0],[504,28,459,26,"node"],[504,32,459,0],[504,34,459,43],[505,0,459,43],[505,8,459,32,"opts"],[505,12,459,43],[505,83,459,39],[505,85,459,43],[506,0,460,2,"assert"],[506,4,460,2,"assert"],[506,10,460,8],[506,11,460,9],[506,23,460,8],[506,25,460,23,"node"],[506,29,460,8],[506,31,460,29,"opts"],[506,35,460,8],[506,36,460,2],[507,0,461,1],[509,0,463,0],[509,11,463,9,"assertSwitchStatement"],[509,32,463,0],[509,33,463,31,"node"],[509,37,463,0],[509,39,463,48],[510,0,463,48],[510,8,463,37,"opts"],[510,12,463,48],[510,83,463,44],[510,85,463,48],[511,0,464,2,"assert"],[511,4,464,2,"assert"],[511,10,464,8],[511,11,464,9],[511,28,464,8],[511,30,464,28,"node"],[511,34,464,8],[511,36,464,34,"opts"],[511,40,464,8],[511,41,464,2],[512,0,465,1],[514,0,467,0],[514,11,467,9,"assertThisExpression"],[514,31,467,0],[514,32,467,30,"node"],[514,36,467,0],[514,38,467,47],[515,0,467,47],[515,8,467,36,"opts"],[515,12,467,47],[515,83,467,43],[515,85,467,47],[516,0,468,2,"assert"],[516,4,468,2,"assert"],[516,10,468,8],[516,11,468,9],[516,27,468,8],[516,29,468,27,"node"],[516,33,468,8],[516,35,468,33,"opts"],[516,39,468,8],[516,40,468,2],[517,0,469,1],[519,0,471,0],[519,11,471,9,"assertThrowStatement"],[519,31,471,0],[519,32,471,30,"node"],[519,36,471,0],[519,38,471,47],[520,0,471,47],[520,8,471,36,"opts"],[520,12,471,47],[520,83,471,43],[520,85,471,47],[521,0,472,2,"assert"],[521,4,472,2,"assert"],[521,10,472,8],[521,11,472,9],[521,27,472,8],[521,29,472,27,"node"],[521,33,472,8],[521,35,472,33,"opts"],[521,39,472,8],[521,40,472,2],[522,0,473,1],[524,0,475,0],[524,11,475,9,"assertTryStatement"],[524,29,475,0],[524,30,475,28,"node"],[524,34,475,0],[524,36,475,45],[525,0,475,45],[525,8,475,34,"opts"],[525,12,475,45],[525,83,475,41],[525,85,475,45],[526,0,476,2,"assert"],[526,4,476,2,"assert"],[526,10,476,8],[526,11,476,9],[526,25,476,8],[526,27,476,25,"node"],[526,31,476,8],[526,33,476,31,"opts"],[526,37,476,8],[526,38,476,2],[527,0,477,1],[529,0,479,0],[529,11,479,9,"assertUnaryExpression"],[529,32,479,0],[529,33,479,31,"node"],[529,37,479,0],[529,39,479,48],[530,0,479,48],[530,8,479,37,"opts"],[530,12,479,48],[530,83,479,44],[530,85,479,48],[531,0,480,2,"assert"],[531,4,480,2,"assert"],[531,10,480,8],[531,11,480,9],[531,28,480,8],[531,30,480,28,"node"],[531,34,480,8],[531,36,480,34,"opts"],[531,40,480,8],[531,41,480,2],[532,0,481,1],[534,0,483,0],[534,11,483,9,"assertUpdateExpression"],[534,33,483,0],[534,34,483,32,"node"],[534,38,483,0],[534,40,483,49],[535,0,483,49],[535,8,483,38,"opts"],[535,12,483,49],[535,83,483,45],[535,85,483,49],[536,0,484,2,"assert"],[536,4,484,2,"assert"],[536,10,484,8],[536,11,484,9],[536,29,484,8],[536,31,484,29,"node"],[536,35,484,8],[536,37,484,35,"opts"],[536,41,484,8],[536,42,484,2],[537,0,485,1],[539,0,487,0],[539,11,487,9,"assertVariableDeclaration"],[539,36,487,0],[539,37,487,35,"node"],[539,41,487,0],[539,43,487,52],[540,0,487,52],[540,8,487,41,"opts"],[540,12,487,52],[540,83,487,48],[540,85,487,52],[541,0,488,2,"assert"],[541,4,488,2,"assert"],[541,10,488,8],[541,11,488,9],[541,32,488,8],[541,34,488,32,"node"],[541,38,488,8],[541,40,488,38,"opts"],[541,44,488,8],[541,45,488,2],[542,0,489,1],[544,0,491,0],[544,11,491,9,"assertVariableDeclarator"],[544,35,491,0],[544,36,491,34,"node"],[544,40,491,0],[544,42,491,51],[545,0,491,51],[545,8,491,40,"opts"],[545,12,491,51],[545,83,491,47],[545,85,491,51],[546,0,492,2,"assert"],[546,4,492,2,"assert"],[546,10,492,8],[546,11,492,9],[546,31,492,8],[546,33,492,31,"node"],[546,37,492,8],[546,39,492,37,"opts"],[546,43,492,8],[546,44,492,2],[547,0,493,1],[549,0,495,0],[549,11,495,9,"assertWhileStatement"],[549,31,495,0],[549,32,495,30,"node"],[549,36,495,0],[549,38,495,47],[550,0,495,47],[550,8,495,36,"opts"],[550,12,495,47],[550,83,495,43],[550,85,495,47],[551,0,496,2,"assert"],[551,4,496,2,"assert"],[551,10,496,8],[551,11,496,9],[551,27,496,8],[551,29,496,27,"node"],[551,33,496,8],[551,35,496,33,"opts"],[551,39,496,8],[551,40,496,2],[552,0,497,1],[554,0,499,0],[554,11,499,9,"assertWithStatement"],[554,30,499,0],[554,31,499,29,"node"],[554,35,499,0],[554,37,499,46],[555,0,499,46],[555,8,499,35,"opts"],[555,12,499,46],[555,83,499,42],[555,85,499,46],[556,0,500,2,"assert"],[556,4,500,2,"assert"],[556,10,500,8],[556,11,500,9],[556,26,500,8],[556,28,500,26,"node"],[556,32,500,8],[556,34,500,32,"opts"],[556,38,500,8],[556,39,500,2],[557,0,501,1],[559,0,503,0],[559,11,503,9,"assertAssignmentPattern"],[559,34,503,0],[559,35,503,33,"node"],[559,39,503,0],[559,41,503,50],[560,0,503,50],[560,8,503,39,"opts"],[560,12,503,50],[560,83,503,46],[560,85,503,50],[561,0,504,2,"assert"],[561,4,504,2,"assert"],[561,10,504,8],[561,11,504,9],[561,30,504,8],[561,32,504,30,"node"],[561,36,504,8],[561,38,504,36,"opts"],[561,42,504,8],[561,43,504,2],[562,0,505,1],[564,0,507,0],[564,11,507,9,"assertArrayPattern"],[564,29,507,0],[564,30,507,28,"node"],[564,34,507,0],[564,36,507,45],[565,0,507,45],[565,8,507,34,"opts"],[565,12,507,45],[565,83,507,41],[565,85,507,45],[566,0,508,2,"assert"],[566,4,508,2,"assert"],[566,10,508,8],[566,11,508,9],[566,25,508,8],[566,27,508,25,"node"],[566,31,508,8],[566,33,508,31,"opts"],[566,37,508,8],[566,38,508,2],[567,0,509,1],[569,0,511,0],[569,11,511,9,"assertArrowFunctionExpression"],[569,40,511,0],[569,41,511,39,"node"],[569,45,511,0],[569,47,511,56],[570,0,511,56],[570,8,511,45,"opts"],[570,12,511,56],[570,83,511,52],[570,85,511,56],[571,0,512,2,"assert"],[571,4,512,2,"assert"],[571,10,512,8],[571,11,512,9],[571,36,512,8],[571,38,512,36,"node"],[571,42,512,8],[571,44,512,42,"opts"],[571,48,512,8],[571,49,512,2],[572,0,513,1],[574,0,515,0],[574,11,515,9,"assertClassBody"],[574,26,515,0],[574,27,515,25,"node"],[574,31,515,0],[574,33,515,42],[575,0,515,42],[575,8,515,31,"opts"],[575,12,515,42],[575,83,515,38],[575,85,515,42],[576,0,516,2,"assert"],[576,4,516,2,"assert"],[576,10,516,8],[576,11,516,9],[576,22,516,8],[576,24,516,22,"node"],[576,28,516,8],[576,30,516,28,"opts"],[576,34,516,8],[576,35,516,2],[577,0,517,1],[579,0,519,0],[579,11,519,9,"assertClassDeclaration"],[579,33,519,0],[579,34,519,32,"node"],[579,38,519,0],[579,40,519,49],[580,0,519,49],[580,8,519,38,"opts"],[580,12,519,49],[580,83,519,45],[580,85,519,49],[581,0,520,2,"assert"],[581,4,520,2,"assert"],[581,10,520,8],[581,11,520,9],[581,29,520,8],[581,31,520,29,"node"],[581,35,520,8],[581,37,520,35,"opts"],[581,41,520,8],[581,42,520,2],[582,0,521,1],[584,0,523,0],[584,11,523,9,"assertClassExpression"],[584,32,523,0],[584,33,523,31,"node"],[584,37,523,0],[584,39,523,48],[585,0,523,48],[585,8,523,37,"opts"],[585,12,523,48],[585,83,523,44],[585,85,523,48],[586,0,524,2,"assert"],[586,4,524,2,"assert"],[586,10,524,8],[586,11,524,9],[586,28,524,8],[586,30,524,28,"node"],[586,34,524,8],[586,36,524,34,"opts"],[586,40,524,8],[586,41,524,2],[587,0,525,1],[589,0,527,0],[589,11,527,9,"assertExportAllDeclaration"],[589,37,527,0],[589,38,527,36,"node"],[589,42,527,0],[589,44,527,53],[590,0,527,53],[590,8,527,42,"opts"],[590,12,527,53],[590,83,527,49],[590,85,527,53],[591,0,528,2,"assert"],[591,4,528,2,"assert"],[591,10,528,8],[591,11,528,9],[591,33,528,8],[591,35,528,33,"node"],[591,39,528,8],[591,41,528,39,"opts"],[591,45,528,8],[591,46,528,2],[592,0,529,1],[594,0,531,0],[594,11,531,9,"assertExportDefaultDeclaration"],[594,41,531,0],[594,42,531,40,"node"],[594,46,531,0],[594,48,531,57],[595,0,531,57],[595,8,531,46,"opts"],[595,12,531,57],[595,83,531,53],[595,85,531,57],[596,0,532,2,"assert"],[596,4,532,2,"assert"],[596,10,532,8],[596,11,532,9],[596,37,532,8],[596,39,532,37,"node"],[596,43,532,8],[596,45,532,43,"opts"],[596,49,532,8],[596,50,532,2],[597,0,533,1],[599,0,535,0],[599,11,535,9,"assertExportNamedDeclaration"],[599,39,535,0],[599,40,535,38,"node"],[599,44,535,0],[599,46,535,55],[600,0,535,55],[600,8,535,44,"opts"],[600,12,535,55],[600,83,535,51],[600,85,535,55],[601,0,536,2,"assert"],[601,4,536,2,"assert"],[601,10,536,8],[601,11,536,9],[601,35,536,8],[601,37,536,35,"node"],[601,41,536,8],[601,43,536,41,"opts"],[601,47,536,8],[601,48,536,2],[602,0,537,1],[604,0,539,0],[604,11,539,9,"assertExportSpecifier"],[604,32,539,0],[604,33,539,31,"node"],[604,37,539,0],[604,39,539,48],[605,0,539,48],[605,8,539,37,"opts"],[605,12,539,48],[605,83,539,44],[605,85,539,48],[606,0,540,2,"assert"],[606,4,540,2,"assert"],[606,10,540,8],[606,11,540,9],[606,28,540,8],[606,30,540,28,"node"],[606,34,540,8],[606,36,540,34,"opts"],[606,40,540,8],[606,41,540,2],[607,0,541,1],[609,0,543,0],[609,11,543,9,"assertForOfStatement"],[609,31,543,0],[609,32,543,30,"node"],[609,36,543,0],[609,38,543,47],[610,0,543,47],[610,8,543,36,"opts"],[610,12,543,47],[610,83,543,43],[610,85,543,47],[611,0,544,2,"assert"],[611,4,544,2,"assert"],[611,10,544,8],[611,11,544,9],[611,27,544,8],[611,29,544,27,"node"],[611,33,544,8],[611,35,544,33,"opts"],[611,39,544,8],[611,40,544,2],[612,0,545,1],[614,0,547,0],[614,11,547,9,"assertImportDeclaration"],[614,34,547,0],[614,35,547,33,"node"],[614,39,547,0],[614,41,547,50],[615,0,547,50],[615,8,547,39,"opts"],[615,12,547,50],[615,83,547,46],[615,85,547,50],[616,0,548,2,"assert"],[616,4,548,2,"assert"],[616,10,548,8],[616,11,548,9],[616,30,548,8],[616,32,548,30,"node"],[616,36,548,8],[616,38,548,36,"opts"],[616,42,548,8],[616,43,548,2],[617,0,549,1],[619,0,551,0],[619,11,551,9,"assertImportDefaultSpecifier"],[619,39,551,0],[619,40,551,38,"node"],[619,44,551,0],[619,46,551,55],[620,0,551,55],[620,8,551,44,"opts"],[620,12,551,55],[620,83,551,51],[620,85,551,55],[621,0,552,2,"assert"],[621,4,552,2,"assert"],[621,10,552,8],[621,11,552,9],[621,35,552,8],[621,37,552,35,"node"],[621,41,552,8],[621,43,552,41,"opts"],[621,47,552,8],[621,48,552,2],[622,0,553,1],[624,0,555,0],[624,11,555,9,"assertImportNamespaceSpecifier"],[624,41,555,0],[624,42,555,40,"node"],[624,46,555,0],[624,48,555,57],[625,0,555,57],[625,8,555,46,"opts"],[625,12,555,57],[625,83,555,53],[625,85,555,57],[626,0,556,2,"assert"],[626,4,556,2,"assert"],[626,10,556,8],[626,11,556,9],[626,37,556,8],[626,39,556,37,"node"],[626,43,556,8],[626,45,556,43,"opts"],[626,49,556,8],[626,50,556,2],[627,0,557,1],[629,0,559,0],[629,11,559,9,"assertImportSpecifier"],[629,32,559,0],[629,33,559,31,"node"],[629,37,559,0],[629,39,559,48],[630,0,559,48],[630,8,559,37,"opts"],[630,12,559,48],[630,83,559,44],[630,85,559,48],[631,0,560,2,"assert"],[631,4,560,2,"assert"],[631,10,560,8],[631,11,560,9],[631,28,560,8],[631,30,560,28,"node"],[631,34,560,8],[631,36,560,34,"opts"],[631,40,560,8],[631,41,560,2],[632,0,561,1],[634,0,563,0],[634,11,563,9,"assertMetaProperty"],[634,29,563,0],[634,30,563,28,"node"],[634,34,563,0],[634,36,563,45],[635,0,563,45],[635,8,563,34,"opts"],[635,12,563,45],[635,83,563,41],[635,85,563,45],[636,0,564,2,"assert"],[636,4,564,2,"assert"],[636,10,564,8],[636,11,564,9],[636,25,564,8],[636,27,564,25,"node"],[636,31,564,8],[636,33,564,31,"opts"],[636,37,564,8],[636,38,564,2],[637,0,565,1],[639,0,567,0],[639,11,567,9,"assertClassMethod"],[639,28,567,0],[639,29,567,27,"node"],[639,33,567,0],[639,35,567,44],[640,0,567,44],[640,8,567,33,"opts"],[640,12,567,44],[640,83,567,40],[640,85,567,44],[641,0,568,2,"assert"],[641,4,568,2,"assert"],[641,10,568,8],[641,11,568,9],[641,24,568,8],[641,26,568,24,"node"],[641,30,568,8],[641,32,568,30,"opts"],[641,36,568,8],[641,37,568,2],[642,0,569,1],[644,0,571,0],[644,11,571,9,"assertObjectPattern"],[644,30,571,0],[644,31,571,29,"node"],[644,35,571,0],[644,37,571,46],[645,0,571,46],[645,8,571,35,"opts"],[645,12,571,46],[645,83,571,42],[645,85,571,46],[646,0,572,2,"assert"],[646,4,572,2,"assert"],[646,10,572,8],[646,11,572,9],[646,26,572,8],[646,28,572,26,"node"],[646,32,572,8],[646,34,572,32,"opts"],[646,38,572,8],[646,39,572,2],[647,0,573,1],[649,0,575,0],[649,11,575,9,"assertSpreadElement"],[649,30,575,0],[649,31,575,29,"node"],[649,35,575,0],[649,37,575,46],[650,0,575,46],[650,8,575,35,"opts"],[650,12,575,46],[650,83,575,42],[650,85,575,46],[651,0,576,2,"assert"],[651,4,576,2,"assert"],[651,10,576,8],[651,11,576,9],[651,26,576,8],[651,28,576,26,"node"],[651,32,576,8],[651,34,576,32,"opts"],[651,38,576,8],[651,39,576,2],[652,0,577,1],[654,0,579,0],[654,11,579,9,"assertSuper"],[654,22,579,0],[654,23,579,21,"node"],[654,27,579,0],[654,29,579,38],[655,0,579,38],[655,8,579,27,"opts"],[655,12,579,38],[655,83,579,34],[655,85,579,38],[656,0,580,2,"assert"],[656,4,580,2,"assert"],[656,10,580,8],[656,11,580,9],[656,18,580,8],[656,20,580,18,"node"],[656,24,580,8],[656,26,580,24,"opts"],[656,30,580,8],[656,31,580,2],[657,0,581,1],[659,0,583,0],[659,11,583,9,"assertTaggedTemplateExpression"],[659,41,583,0],[659,42,583,40,"node"],[659,46,583,0],[659,48,583,57],[660,0,583,57],[660,8,583,46,"opts"],[660,12,583,57],[660,83,583,53],[660,85,583,57],[661,0,584,2,"assert"],[661,4,584,2,"assert"],[661,10,584,8],[661,11,584,9],[661,37,584,8],[661,39,584,37,"node"],[661,43,584,8],[661,45,584,43,"opts"],[661,49,584,8],[661,50,584,2],[662,0,585,1],[664,0,587,0],[664,11,587,9,"assertTemplateElement"],[664,32,587,0],[664,33,587,31,"node"],[664,37,587,0],[664,39,587,48],[665,0,587,48],[665,8,587,37,"opts"],[665,12,587,48],[665,83,587,44],[665,85,587,48],[666,0,588,2,"assert"],[666,4,588,2,"assert"],[666,10,588,8],[666,11,588,9],[666,28,588,8],[666,30,588,28,"node"],[666,34,588,8],[666,36,588,34,"opts"],[666,40,588,8],[666,41,588,2],[667,0,589,1],[669,0,591,0],[669,11,591,9,"assertTemplateLiteral"],[669,32,591,0],[669,33,591,31,"node"],[669,37,591,0],[669,39,591,48],[670,0,591,48],[670,8,591,37,"opts"],[670,12,591,48],[670,83,591,44],[670,85,591,48],[671,0,592,2,"assert"],[671,4,592,2,"assert"],[671,10,592,8],[671,11,592,9],[671,28,592,8],[671,30,592,28,"node"],[671,34,592,8],[671,36,592,34,"opts"],[671,40,592,8],[671,41,592,2],[672,0,593,1],[674,0,595,0],[674,11,595,9,"assertYieldExpression"],[674,32,595,0],[674,33,595,31,"node"],[674,37,595,0],[674,39,595,48],[675,0,595,48],[675,8,595,37,"opts"],[675,12,595,48],[675,83,595,44],[675,85,595,48],[676,0,596,2,"assert"],[676,4,596,2,"assert"],[676,10,596,8],[676,11,596,9],[676,28,596,8],[676,30,596,28,"node"],[676,34,596,8],[676,36,596,34,"opts"],[676,40,596,8],[676,41,596,2],[677,0,597,1],[679,0,599,0],[679,11,599,9,"assertAnyTypeAnnotation"],[679,34,599,0],[679,35,599,33,"node"],[679,39,599,0],[679,41,599,50],[680,0,599,50],[680,8,599,39,"opts"],[680,12,599,50],[680,83,599,46],[680,85,599,50],[681,0,600,2,"assert"],[681,4,600,2,"assert"],[681,10,600,8],[681,11,600,9],[681,30,600,8],[681,32,600,30,"node"],[681,36,600,8],[681,38,600,36,"opts"],[681,42,600,8],[681,43,600,2],[682,0,601,1],[684,0,603,0],[684,11,603,9,"assertArrayTypeAnnotation"],[684,36,603,0],[684,37,603,35,"node"],[684,41,603,0],[684,43,603,52],[685,0,603,52],[685,8,603,41,"opts"],[685,12,603,52],[685,83,603,48],[685,85,603,52],[686,0,604,2,"assert"],[686,4,604,2,"assert"],[686,10,604,8],[686,11,604,9],[686,32,604,8],[686,34,604,32,"node"],[686,38,604,8],[686,40,604,38,"opts"],[686,44,604,8],[686,45,604,2],[687,0,605,1],[689,0,607,0],[689,11,607,9,"assertBooleanTypeAnnotation"],[689,38,607,0],[689,39,607,37,"node"],[689,43,607,0],[689,45,607,54],[690,0,607,54],[690,8,607,43,"opts"],[690,12,607,54],[690,83,607,50],[690,85,607,54],[691,0,608,2,"assert"],[691,4,608,2,"assert"],[691,10,608,8],[691,11,608,9],[691,34,608,8],[691,36,608,34,"node"],[691,40,608,8],[691,42,608,40,"opts"],[691,46,608,8],[691,47,608,2],[692,0,609,1],[694,0,611,0],[694,11,611,9,"assertBooleanLiteralTypeAnnotation"],[694,45,611,0],[694,46,611,44,"node"],[694,50,611,0],[694,52,611,61],[695,0,611,61],[695,8,611,50,"opts"],[695,12,611,61],[695,83,611,57],[695,85,611,61],[696,0,612,2,"assert"],[696,4,612,2,"assert"],[696,10,612,8],[696,11,612,9],[696,41,612,8],[696,43,612,41,"node"],[696,47,612,8],[696,49,612,47,"opts"],[696,53,612,8],[696,54,612,2],[697,0,613,1],[699,0,615,0],[699,11,615,9,"assertNullLiteralTypeAnnotation"],[699,42,615,0],[699,43,615,41,"node"],[699,47,615,0],[699,49,615,58],[700,0,615,58],[700,8,615,47,"opts"],[700,12,615,58],[700,83,615,54],[700,85,615,58],[701,0,616,2,"assert"],[701,4,616,2,"assert"],[701,10,616,8],[701,11,616,9],[701,38,616,8],[701,40,616,38,"node"],[701,44,616,8],[701,46,616,44,"opts"],[701,50,616,8],[701,51,616,2],[702,0,617,1],[704,0,619,0],[704,11,619,9,"assertClassImplements"],[704,32,619,0],[704,33,619,31,"node"],[704,37,619,0],[704,39,619,48],[705,0,619,48],[705,8,619,37,"opts"],[705,12,619,48],[705,83,619,44],[705,85,619,48],[706,0,620,2,"assert"],[706,4,620,2,"assert"],[706,10,620,8],[706,11,620,9],[706,28,620,8],[706,30,620,28,"node"],[706,34,620,8],[706,36,620,34,"opts"],[706,40,620,8],[706,41,620,2],[707,0,621,1],[709,0,623,0],[709,11,623,9,"assertDeclareClass"],[709,29,623,0],[709,30,623,28,"node"],[709,34,623,0],[709,36,623,45],[710,0,623,45],[710,8,623,34,"opts"],[710,12,623,45],[710,83,623,41],[710,85,623,45],[711,0,624,2,"assert"],[711,4,624,2,"assert"],[711,10,624,8],[711,11,624,9],[711,25,624,8],[711,27,624,25,"node"],[711,31,624,8],[711,33,624,31,"opts"],[711,37,624,8],[711,38,624,2],[712,0,625,1],[714,0,627,0],[714,11,627,9,"assertDeclareFunction"],[714,32,627,0],[714,33,627,31,"node"],[714,37,627,0],[714,39,627,48],[715,0,627,48],[715,8,627,37,"opts"],[715,12,627,48],[715,83,627,44],[715,85,627,48],[716,0,628,2,"assert"],[716,4,628,2,"assert"],[716,10,628,8],[716,11,628,9],[716,28,628,8],[716,30,628,28,"node"],[716,34,628,8],[716,36,628,34,"opts"],[716,40,628,8],[716,41,628,2],[717,0,629,1],[719,0,631,0],[719,11,631,9,"assertDeclareInterface"],[719,33,631,0],[719,34,631,32,"node"],[719,38,631,0],[719,40,631,49],[720,0,631,49],[720,8,631,38,"opts"],[720,12,631,49],[720,83,631,45],[720,85,631,49],[721,0,632,2,"assert"],[721,4,632,2,"assert"],[721,10,632,8],[721,11,632,9],[721,29,632,8],[721,31,632,29,"node"],[721,35,632,8],[721,37,632,35,"opts"],[721,41,632,8],[721,42,632,2],[722,0,633,1],[724,0,635,0],[724,11,635,9,"assertDeclareModule"],[724,30,635,0],[724,31,635,29,"node"],[724,35,635,0],[724,37,635,46],[725,0,635,46],[725,8,635,35,"opts"],[725,12,635,46],[725,83,635,42],[725,85,635,46],[726,0,636,2,"assert"],[726,4,636,2,"assert"],[726,10,636,8],[726,11,636,9],[726,26,636,8],[726,28,636,26,"node"],[726,32,636,8],[726,34,636,32,"opts"],[726,38,636,8],[726,39,636,2],[727,0,637,1],[729,0,639,0],[729,11,639,9,"assertDeclareModuleExports"],[729,37,639,0],[729,38,639,36,"node"],[729,42,639,0],[729,44,639,53],[730,0,639,53],[730,8,639,42,"opts"],[730,12,639,53],[730,83,639,49],[730,85,639,53],[731,0,640,2,"assert"],[731,4,640,2,"assert"],[731,10,640,8],[731,11,640,9],[731,33,640,8],[731,35,640,33,"node"],[731,39,640,8],[731,41,640,39,"opts"],[731,45,640,8],[731,46,640,2],[732,0,641,1],[734,0,643,0],[734,11,643,9,"assertDeclareTypeAlias"],[734,33,643,0],[734,34,643,32,"node"],[734,38,643,0],[734,40,643,49],[735,0,643,49],[735,8,643,38,"opts"],[735,12,643,49],[735,83,643,45],[735,85,643,49],[736,0,644,2,"assert"],[736,4,644,2,"assert"],[736,10,644,8],[736,11,644,9],[736,29,644,8],[736,31,644,29,"node"],[736,35,644,8],[736,37,644,35,"opts"],[736,41,644,8],[736,42,644,2],[737,0,645,1],[739,0,647,0],[739,11,647,9,"assertDeclareOpaqueType"],[739,34,647,0],[739,35,647,33,"node"],[739,39,647,0],[739,41,647,50],[740,0,647,50],[740,8,647,39,"opts"],[740,12,647,50],[740,83,647,46],[740,85,647,50],[741,0,648,2,"assert"],[741,4,648,2,"assert"],[741,10,648,8],[741,11,648,9],[741,30,648,8],[741,32,648,30,"node"],[741,36,648,8],[741,38,648,36,"opts"],[741,42,648,8],[741,43,648,2],[742,0,649,1],[744,0,651,0],[744,11,651,9,"assertDeclareVariable"],[744,32,651,0],[744,33,651,31,"node"],[744,37,651,0],[744,39,651,48],[745,0,651,48],[745,8,651,37,"opts"],[745,12,651,48],[745,83,651,44],[745,85,651,48],[746,0,652,2,"assert"],[746,4,652,2,"assert"],[746,10,652,8],[746,11,652,9],[746,28,652,8],[746,30,652,28,"node"],[746,34,652,8],[746,36,652,34,"opts"],[746,40,652,8],[746,41,652,2],[747,0,653,1],[749,0,655,0],[749,11,655,9,"assertDeclareExportDeclaration"],[749,41,655,0],[749,42,655,40,"node"],[749,46,655,0],[749,48,655,57],[750,0,655,57],[750,8,655,46,"opts"],[750,12,655,57],[750,83,655,53],[750,85,655,57],[751,0,656,2,"assert"],[751,4,656,2,"assert"],[751,10,656,8],[751,11,656,9],[751,37,656,8],[751,39,656,37,"node"],[751,43,656,8],[751,45,656,43,"opts"],[751,49,656,8],[751,50,656,2],[752,0,657,1],[754,0,659,0],[754,11,659,9,"assertDeclareExportAllDeclaration"],[754,44,659,0],[754,45,659,43,"node"],[754,49,659,0],[754,51,659,60],[755,0,659,60],[755,8,659,49,"opts"],[755,12,659,60],[755,83,659,56],[755,85,659,60],[756,0,660,2,"assert"],[756,4,660,2,"assert"],[756,10,660,8],[756,11,660,9],[756,40,660,8],[756,42,660,40,"node"],[756,46,660,8],[756,48,660,46,"opts"],[756,52,660,8],[756,53,660,2],[757,0,661,1],[759,0,663,0],[759,11,663,9,"assertDeclaredPredicate"],[759,34,663,0],[759,35,663,33,"node"],[759,39,663,0],[759,41,663,50],[760,0,663,50],[760,8,663,39,"opts"],[760,12,663,50],[760,83,663,46],[760,85,663,50],[761,0,664,2,"assert"],[761,4,664,2,"assert"],[761,10,664,8],[761,11,664,9],[761,30,664,8],[761,32,664,30,"node"],[761,36,664,8],[761,38,664,36,"opts"],[761,42,664,8],[761,43,664,2],[762,0,665,1],[764,0,667,0],[764,11,667,9,"assertExistsTypeAnnotation"],[764,37,667,0],[764,38,667,36,"node"],[764,42,667,0],[764,44,667,53],[765,0,667,53],[765,8,667,42,"opts"],[765,12,667,53],[765,83,667,49],[765,85,667,53],[766,0,668,2,"assert"],[766,4,668,2,"assert"],[766,10,668,8],[766,11,668,9],[766,33,668,8],[766,35,668,33,"node"],[766,39,668,8],[766,41,668,39,"opts"],[766,45,668,8],[766,46,668,2],[767,0,669,1],[769,0,671,0],[769,11,671,9,"assertFunctionTypeAnnotation"],[769,39,671,0],[769,40,671,38,"node"],[769,44,671,0],[769,46,671,55],[770,0,671,55],[770,8,671,44,"opts"],[770,12,671,55],[770,83,671,51],[770,85,671,55],[771,0,672,2,"assert"],[771,4,672,2,"assert"],[771,10,672,8],[771,11,672,9],[771,35,672,8],[771,37,672,35,"node"],[771,41,672,8],[771,43,672,41,"opts"],[771,47,672,8],[771,48,672,2],[772,0,673,1],[774,0,675,0],[774,11,675,9,"assertFunctionTypeParam"],[774,34,675,0],[774,35,675,33,"node"],[774,39,675,0],[774,41,675,50],[775,0,675,50],[775,8,675,39,"opts"],[775,12,675,50],[775,83,675,46],[775,85,675,50],[776,0,676,2,"assert"],[776,4,676,2,"assert"],[776,10,676,8],[776,11,676,9],[776,30,676,8],[776,32,676,30,"node"],[776,36,676,8],[776,38,676,36,"opts"],[776,42,676,8],[776,43,676,2],[777,0,677,1],[779,0,679,0],[779,11,679,9,"assertGenericTypeAnnotation"],[779,38,679,0],[779,39,679,37,"node"],[779,43,679,0],[779,45,679,54],[780,0,679,54],[780,8,679,43,"opts"],[780,12,679,54],[780,83,679,50],[780,85,679,54],[781,0,680,2,"assert"],[781,4,680,2,"assert"],[781,10,680,8],[781,11,680,9],[781,34,680,8],[781,36,680,34,"node"],[781,40,680,8],[781,42,680,40,"opts"],[781,46,680,8],[781,47,680,2],[782,0,681,1],[784,0,683,0],[784,11,683,9,"assertInferredPredicate"],[784,34,683,0],[784,35,683,33,"node"],[784,39,683,0],[784,41,683,50],[785,0,683,50],[785,8,683,39,"opts"],[785,12,683,50],[785,83,683,46],[785,85,683,50],[786,0,684,2,"assert"],[786,4,684,2,"assert"],[786,10,684,8],[786,11,684,9],[786,30,684,8],[786,32,684,30,"node"],[786,36,684,8],[786,38,684,36,"opts"],[786,42,684,8],[786,43,684,2],[787,0,685,1],[789,0,687,0],[789,11,687,9,"assertInterfaceExtends"],[789,33,687,0],[789,34,687,32,"node"],[789,38,687,0],[789,40,687,49],[790,0,687,49],[790,8,687,38,"opts"],[790,12,687,49],[790,83,687,45],[790,85,687,49],[791,0,688,2,"assert"],[791,4,688,2,"assert"],[791,10,688,8],[791,11,688,9],[791,29,688,8],[791,31,688,29,"node"],[791,35,688,8],[791,37,688,35,"opts"],[791,41,688,8],[791,42,688,2],[792,0,689,1],[794,0,691,0],[794,11,691,9,"assertInterfaceDeclaration"],[794,37,691,0],[794,38,691,36,"node"],[794,42,691,0],[794,44,691,53],[795,0,691,53],[795,8,691,42,"opts"],[795,12,691,53],[795,83,691,49],[795,85,691,53],[796,0,692,2,"assert"],[796,4,692,2,"assert"],[796,10,692,8],[796,11,692,9],[796,33,692,8],[796,35,692,33,"node"],[796,39,692,8],[796,41,692,39,"opts"],[796,45,692,8],[796,46,692,2],[797,0,693,1],[799,0,695,0],[799,11,695,9,"assertInterfaceTypeAnnotation"],[799,40,695,0],[799,41,695,39,"node"],[799,45,695,0],[799,47,695,56],[800,0,695,56],[800,8,695,45,"opts"],[800,12,695,56],[800,83,695,52],[800,85,695,56],[801,0,696,2,"assert"],[801,4,696,2,"assert"],[801,10,696,8],[801,11,696,9],[801,36,696,8],[801,38,696,36,"node"],[801,42,696,8],[801,44,696,42,"opts"],[801,48,696,8],[801,49,696,2],[802,0,697,1],[804,0,699,0],[804,11,699,9,"assertIntersectionTypeAnnotation"],[804,43,699,0],[804,44,699,42,"node"],[804,48,699,0],[804,50,699,59],[805,0,699,59],[805,8,699,48,"opts"],[805,12,699,59],[805,83,699,55],[805,85,699,59],[806,0,700,2,"assert"],[806,4,700,2,"assert"],[806,10,700,8],[806,11,700,9],[806,39,700,8],[806,41,700,39,"node"],[806,45,700,8],[806,47,700,45,"opts"],[806,51,700,8],[806,52,700,2],[807,0,701,1],[809,0,703,0],[809,11,703,9,"assertMixedTypeAnnotation"],[809,36,703,0],[809,37,703,35,"node"],[809,41,703,0],[809,43,703,52],[810,0,703,52],[810,8,703,41,"opts"],[810,12,703,52],[810,83,703,48],[810,85,703,52],[811,0,704,2,"assert"],[811,4,704,2,"assert"],[811,10,704,8],[811,11,704,9],[811,32,704,8],[811,34,704,32,"node"],[811,38,704,8],[811,40,704,38,"opts"],[811,44,704,8],[811,45,704,2],[812,0,705,1],[814,0,707,0],[814,11,707,9,"assertEmptyTypeAnnotation"],[814,36,707,0],[814,37,707,35,"node"],[814,41,707,0],[814,43,707,52],[815,0,707,52],[815,8,707,41,"opts"],[815,12,707,52],[815,83,707,48],[815,85,707,52],[816,0,708,2,"assert"],[816,4,708,2,"assert"],[816,10,708,8],[816,11,708,9],[816,32,708,8],[816,34,708,32,"node"],[816,38,708,8],[816,40,708,38,"opts"],[816,44,708,8],[816,45,708,2],[817,0,709,1],[819,0,711,0],[819,11,711,9,"assertNullableTypeAnnotation"],[819,39,711,0],[819,40,711,38,"node"],[819,44,711,0],[819,46,711,55],[820,0,711,55],[820,8,711,44,"opts"],[820,12,711,55],[820,83,711,51],[820,85,711,55],[821,0,712,2,"assert"],[821,4,712,2,"assert"],[821,10,712,8],[821,11,712,9],[821,35,712,8],[821,37,712,35,"node"],[821,41,712,8],[821,43,712,41,"opts"],[821,47,712,8],[821,48,712,2],[822,0,713,1],[824,0,715,0],[824,11,715,9,"assertNumberLiteralTypeAnnotation"],[824,44,715,0],[824,45,715,43,"node"],[824,49,715,0],[824,51,715,60],[825,0,715,60],[825,8,715,49,"opts"],[825,12,715,60],[825,83,715,56],[825,85,715,60],[826,0,716,2,"assert"],[826,4,716,2,"assert"],[826,10,716,8],[826,11,716,9],[826,40,716,8],[826,42,716,40,"node"],[826,46,716,8],[826,48,716,46,"opts"],[826,52,716,8],[826,53,716,2],[827,0,717,1],[829,0,719,0],[829,11,719,9,"assertNumberTypeAnnotation"],[829,37,719,0],[829,38,719,36,"node"],[829,42,719,0],[829,44,719,53],[830,0,719,53],[830,8,719,42,"opts"],[830,12,719,53],[830,83,719,49],[830,85,719,53],[831,0,720,2,"assert"],[831,4,720,2,"assert"],[831,10,720,8],[831,11,720,9],[831,33,720,8],[831,35,720,33,"node"],[831,39,720,8],[831,41,720,39,"opts"],[831,45,720,8],[831,46,720,2],[832,0,721,1],[834,0,723,0],[834,11,723,9,"assertObjectTypeAnnotation"],[834,37,723,0],[834,38,723,36,"node"],[834,42,723,0],[834,44,723,53],[835,0,723,53],[835,8,723,42,"opts"],[835,12,723,53],[835,83,723,49],[835,85,723,53],[836,0,724,2,"assert"],[836,4,724,2,"assert"],[836,10,724,8],[836,11,724,9],[836,33,724,8],[836,35,724,33,"node"],[836,39,724,8],[836,41,724,39,"opts"],[836,45,724,8],[836,46,724,2],[837,0,725,1],[839,0,727,0],[839,11,727,9,"assertObjectTypeInternalSlot"],[839,39,727,0],[839,40,727,38,"node"],[839,44,727,0],[839,46,727,55],[840,0,727,55],[840,8,727,44,"opts"],[840,12,727,55],[840,83,727,51],[840,85,727,55],[841,0,728,2,"assert"],[841,4,728,2,"assert"],[841,10,728,8],[841,11,728,9],[841,35,728,8],[841,37,728,35,"node"],[841,41,728,8],[841,43,728,41,"opts"],[841,47,728,8],[841,48,728,2],[842,0,729,1],[844,0,731,0],[844,11,731,9,"assertObjectTypeCallProperty"],[844,39,731,0],[844,40,731,38,"node"],[844,44,731,0],[844,46,731,55],[845,0,731,55],[845,8,731,44,"opts"],[845,12,731,55],[845,83,731,51],[845,85,731,55],[846,0,732,2,"assert"],[846,4,732,2,"assert"],[846,10,732,8],[846,11,732,9],[846,35,732,8],[846,37,732,35,"node"],[846,41,732,8],[846,43,732,41,"opts"],[846,47,732,8],[846,48,732,2],[847,0,733,1],[849,0,735,0],[849,11,735,9,"assertObjectTypeIndexer"],[849,34,735,0],[849,35,735,33,"node"],[849,39,735,0],[849,41,735,50],[850,0,735,50],[850,8,735,39,"opts"],[850,12,735,50],[850,83,735,46],[850,85,735,50],[851,0,736,2,"assert"],[851,4,736,2,"assert"],[851,10,736,8],[851,11,736,9],[851,30,736,8],[851,32,736,30,"node"],[851,36,736,8],[851,38,736,36,"opts"],[851,42,736,8],[851,43,736,2],[852,0,737,1],[854,0,739,0],[854,11,739,9,"assertObjectTypeProperty"],[854,35,739,0],[854,36,739,34,"node"],[854,40,739,0],[854,42,739,51],[855,0,739,51],[855,8,739,40,"opts"],[855,12,739,51],[855,83,739,47],[855,85,739,51],[856,0,740,2,"assert"],[856,4,740,2,"assert"],[856,10,740,8],[856,11,740,9],[856,31,740,8],[856,33,740,31,"node"],[856,37,740,8],[856,39,740,37,"opts"],[856,43,740,8],[856,44,740,2],[857,0,741,1],[859,0,743,0],[859,11,743,9,"assertObjectTypeSpreadProperty"],[859,41,743,0],[859,42,743,40,"node"],[859,46,743,0],[859,48,743,57],[860,0,743,57],[860,8,743,46,"opts"],[860,12,743,57],[860,83,743,53],[860,85,743,57],[861,0,744,2,"assert"],[861,4,744,2,"assert"],[861,10,744,8],[861,11,744,9],[861,37,744,8],[861,39,744,37,"node"],[861,43,744,8],[861,45,744,43,"opts"],[861,49,744,8],[861,50,744,2],[862,0,745,1],[864,0,747,0],[864,11,747,9,"assertOpaqueType"],[864,27,747,0],[864,28,747,26,"node"],[864,32,747,0],[864,34,747,43],[865,0,747,43],[865,8,747,32,"opts"],[865,12,747,43],[865,83,747,39],[865,85,747,43],[866,0,748,2,"assert"],[866,4,748,2,"assert"],[866,10,748,8],[866,11,748,9],[866,23,748,8],[866,25,748,23,"node"],[866,29,748,8],[866,31,748,29,"opts"],[866,35,748,8],[866,36,748,2],[867,0,749,1],[869,0,751,0],[869,11,751,9,"assertQualifiedTypeIdentifier"],[869,40,751,0],[869,41,751,39,"node"],[869,45,751,0],[869,47,751,56],[870,0,751,56],[870,8,751,45,"opts"],[870,12,751,56],[870,83,751,52],[870,85,751,56],[871,0,752,2,"assert"],[871,4,752,2,"assert"],[871,10,752,8],[871,11,752,9],[871,36,752,8],[871,38,752,36,"node"],[871,42,752,8],[871,44,752,42,"opts"],[871,48,752,8],[871,49,752,2],[872,0,753,1],[874,0,755,0],[874,11,755,9,"assertStringLiteralTypeAnnotation"],[874,44,755,0],[874,45,755,43,"node"],[874,49,755,0],[874,51,755,60],[875,0,755,60],[875,8,755,49,"opts"],[875,12,755,60],[875,83,755,56],[875,85,755,60],[876,0,756,2,"assert"],[876,4,756,2,"assert"],[876,10,756,8],[876,11,756,9],[876,40,756,8],[876,42,756,40,"node"],[876,46,756,8],[876,48,756,46,"opts"],[876,52,756,8],[876,53,756,2],[877,0,757,1],[879,0,759,0],[879,11,759,9,"assertStringTypeAnnotation"],[879,37,759,0],[879,38,759,36,"node"],[879,42,759,0],[879,44,759,53],[880,0,759,53],[880,8,759,42,"opts"],[880,12,759,53],[880,83,759,49],[880,85,759,53],[881,0,760,2,"assert"],[881,4,760,2,"assert"],[881,10,760,8],[881,11,760,9],[881,33,760,8],[881,35,760,33,"node"],[881,39,760,8],[881,41,760,39,"opts"],[881,45,760,8],[881,46,760,2],[882,0,761,1],[884,0,763,0],[884,11,763,9,"assertThisTypeAnnotation"],[884,35,763,0],[884,36,763,34,"node"],[884,40,763,0],[884,42,763,51],[885,0,763,51],[885,8,763,40,"opts"],[885,12,763,51],[885,83,763,47],[885,85,763,51],[886,0,764,2,"assert"],[886,4,764,2,"assert"],[886,10,764,8],[886,11,764,9],[886,31,764,8],[886,33,764,31,"node"],[886,37,764,8],[886,39,764,37,"opts"],[886,43,764,8],[886,44,764,2],[887,0,765,1],[889,0,767,0],[889,11,767,9,"assertTupleTypeAnnotation"],[889,36,767,0],[889,37,767,35,"node"],[889,41,767,0],[889,43,767,52],[890,0,767,52],[890,8,767,41,"opts"],[890,12,767,52],[890,83,767,48],[890,85,767,52],[891,0,768,2,"assert"],[891,4,768,2,"assert"],[891,10,768,8],[891,11,768,9],[891,32,768,8],[891,34,768,32,"node"],[891,38,768,8],[891,40,768,38,"opts"],[891,44,768,8],[891,45,768,2],[892,0,769,1],[894,0,771,0],[894,11,771,9,"assertTypeofTypeAnnotation"],[894,37,771,0],[894,38,771,36,"node"],[894,42,771,0],[894,44,771,53],[895,0,771,53],[895,8,771,42,"opts"],[895,12,771,53],[895,83,771,49],[895,85,771,53],[896,0,772,2,"assert"],[896,4,772,2,"assert"],[896,10,772,8],[896,11,772,9],[896,33,772,8],[896,35,772,33,"node"],[896,39,772,8],[896,41,772,39,"opts"],[896,45,772,8],[896,46,772,2],[897,0,773,1],[899,0,775,0],[899,11,775,9,"assertTypeAlias"],[899,26,775,0],[899,27,775,25,"node"],[899,31,775,0],[899,33,775,42],[900,0,775,42],[900,8,775,31,"opts"],[900,12,775,42],[900,83,775,38],[900,85,775,42],[901,0,776,2,"assert"],[901,4,776,2,"assert"],[901,10,776,8],[901,11,776,9],[901,22,776,8],[901,24,776,22,"node"],[901,28,776,8],[901,30,776,28,"opts"],[901,34,776,8],[901,35,776,2],[902,0,777,1],[904,0,779,0],[904,11,779,9,"assertTypeAnnotation"],[904,31,779,0],[904,32,779,30,"node"],[904,36,779,0],[904,38,779,47],[905,0,779,47],[905,8,779,36,"opts"],[905,12,779,47],[905,83,779,43],[905,85,779,47],[906,0,780,2,"assert"],[906,4,780,2,"assert"],[906,10,780,8],[906,11,780,9],[906,27,780,8],[906,29,780,27,"node"],[906,33,780,8],[906,35,780,33,"opts"],[906,39,780,8],[906,40,780,2],[907,0,781,1],[909,0,783,0],[909,11,783,9,"assertTypeCastExpression"],[909,35,783,0],[909,36,783,34,"node"],[909,40,783,0],[909,42,783,51],[910,0,783,51],[910,8,783,40,"opts"],[910,12,783,51],[910,83,783,47],[910,85,783,51],[911,0,784,2,"assert"],[911,4,784,2,"assert"],[911,10,784,8],[911,11,784,9],[911,31,784,8],[911,33,784,31,"node"],[911,37,784,8],[911,39,784,37,"opts"],[911,43,784,8],[911,44,784,2],[912,0,785,1],[914,0,787,0],[914,11,787,9,"assertTypeParameter"],[914,30,787,0],[914,31,787,29,"node"],[914,35,787,0],[914,37,787,46],[915,0,787,46],[915,8,787,35,"opts"],[915,12,787,46],[915,83,787,42],[915,85,787,46],[916,0,788,2,"assert"],[916,4,788,2,"assert"],[916,10,788,8],[916,11,788,9],[916,26,788,8],[916,28,788,26,"node"],[916,32,788,8],[916,34,788,32,"opts"],[916,38,788,8],[916,39,788,2],[917,0,789,1],[919,0,791,0],[919,11,791,9,"assertTypeParameterDeclaration"],[919,41,791,0],[919,42,791,40,"node"],[919,46,791,0],[919,48,791,57],[920,0,791,57],[920,8,791,46,"opts"],[920,12,791,57],[920,83,791,53],[920,85,791,57],[921,0,792,2,"assert"],[921,4,792,2,"assert"],[921,10,792,8],[921,11,792,9],[921,37,792,8],[921,39,792,37,"node"],[921,43,792,8],[921,45,792,43,"opts"],[921,49,792,8],[921,50,792,2],[922,0,793,1],[924,0,795,0],[924,11,795,9,"assertTypeParameterInstantiation"],[924,43,795,0],[924,44,795,42,"node"],[924,48,795,0],[924,50,795,59],[925,0,795,59],[925,8,795,48,"opts"],[925,12,795,59],[925,83,795,55],[925,85,795,59],[926,0,796,2,"assert"],[926,4,796,2,"assert"],[926,10,796,8],[926,11,796,9],[926,39,796,8],[926,41,796,39,"node"],[926,45,796,8],[926,47,796,45,"opts"],[926,51,796,8],[926,52,796,2],[927,0,797,1],[929,0,799,0],[929,11,799,9,"assertUnionTypeAnnotation"],[929,36,799,0],[929,37,799,35,"node"],[929,41,799,0],[929,43,799,52],[930,0,799,52],[930,8,799,41,"opts"],[930,12,799,52],[930,83,799,48],[930,85,799,52],[931,0,800,2,"assert"],[931,4,800,2,"assert"],[931,10,800,8],[931,11,800,9],[931,32,800,8],[931,34,800,32,"node"],[931,38,800,8],[931,40,800,38,"opts"],[931,44,800,8],[931,45,800,2],[932,0,801,1],[934,0,803,0],[934,11,803,9,"assertVariance"],[934,25,803,0],[934,26,803,24,"node"],[934,30,803,0],[934,32,803,41],[935,0,803,41],[935,8,803,30,"opts"],[935,12,803,41],[935,83,803,37],[935,85,803,41],[936,0,804,2,"assert"],[936,4,804,2,"assert"],[936,10,804,8],[936,11,804,9],[936,21,804,8],[936,23,804,21,"node"],[936,27,804,8],[936,29,804,27,"opts"],[936,33,804,8],[936,34,804,2],[937,0,805,1],[939,0,807,0],[939,11,807,9,"assertVoidTypeAnnotation"],[939,35,807,0],[939,36,807,34,"node"],[939,40,807,0],[939,42,807,51],[940,0,807,51],[940,8,807,40,"opts"],[940,12,807,51],[940,83,807,47],[940,85,807,51],[941,0,808,2,"assert"],[941,4,808,2,"assert"],[941,10,808,8],[941,11,808,9],[941,31,808,8],[941,33,808,31,"node"],[941,37,808,8],[941,39,808,37,"opts"],[941,43,808,8],[941,44,808,2],[942,0,809,1],[944,0,811,0],[944,11,811,9,"assertEnumDeclaration"],[944,32,811,0],[944,33,811,31,"node"],[944,37,811,0],[944,39,811,48],[945,0,811,48],[945,8,811,37,"opts"],[945,12,811,48],[945,83,811,44],[945,85,811,48],[946,0,812,2,"assert"],[946,4,812,2,"assert"],[946,10,812,8],[946,11,812,9],[946,28,812,8],[946,30,812,28,"node"],[946,34,812,8],[946,36,812,34,"opts"],[946,40,812,8],[946,41,812,2],[947,0,813,1],[949,0,815,0],[949,11,815,9,"assertEnumBooleanBody"],[949,32,815,0],[949,33,815,31,"node"],[949,37,815,0],[949,39,815,48],[950,0,815,48],[950,8,815,37,"opts"],[950,12,815,48],[950,83,815,44],[950,85,815,48],[951,0,816,2,"assert"],[951,4,816,2,"assert"],[951,10,816,8],[951,11,816,9],[951,28,816,8],[951,30,816,28,"node"],[951,34,816,8],[951,36,816,34,"opts"],[951,40,816,8],[951,41,816,2],[952,0,817,1],[954,0,819,0],[954,11,819,9,"assertEnumNumberBody"],[954,31,819,0],[954,32,819,30,"node"],[954,36,819,0],[954,38,819,47],[955,0,819,47],[955,8,819,36,"opts"],[955,12,819,47],[955,83,819,43],[955,85,819,47],[956,0,820,2,"assert"],[956,4,820,2,"assert"],[956,10,820,8],[956,11,820,9],[956,27,820,8],[956,29,820,27,"node"],[956,33,820,8],[956,35,820,33,"opts"],[956,39,820,8],[956,40,820,2],[957,0,821,1],[959,0,823,0],[959,11,823,9,"assertEnumStringBody"],[959,31,823,0],[959,32,823,30,"node"],[959,36,823,0],[959,38,823,47],[960,0,823,47],[960,8,823,36,"opts"],[960,12,823,47],[960,83,823,43],[960,85,823,47],[961,0,824,2,"assert"],[961,4,824,2,"assert"],[961,10,824,8],[961,11,824,9],[961,27,824,8],[961,29,824,27,"node"],[961,33,824,8],[961,35,824,33,"opts"],[961,39,824,8],[961,40,824,2],[962,0,825,1],[964,0,827,0],[964,11,827,9,"assertEnumSymbolBody"],[964,31,827,0],[964,32,827,30,"node"],[964,36,827,0],[964,38,827,47],[965,0,827,47],[965,8,827,36,"opts"],[965,12,827,47],[965,83,827,43],[965,85,827,47],[966,0,828,2,"assert"],[966,4,828,2,"assert"],[966,10,828,8],[966,11,828,9],[966,27,828,8],[966,29,828,27,"node"],[966,33,828,8],[966,35,828,33,"opts"],[966,39,828,8],[966,40,828,2],[967,0,829,1],[969,0,831,0],[969,11,831,9,"assertEnumBooleanMember"],[969,34,831,0],[969,35,831,33,"node"],[969,39,831,0],[969,41,831,50],[970,0,831,50],[970,8,831,39,"opts"],[970,12,831,50],[970,83,831,46],[970,85,831,50],[971,0,832,2,"assert"],[971,4,832,2,"assert"],[971,10,832,8],[971,11,832,9],[971,30,832,8],[971,32,832,30,"node"],[971,36,832,8],[971,38,832,36,"opts"],[971,42,832,8],[971,43,832,2],[972,0,833,1],[974,0,835,0],[974,11,835,9,"assertEnumNumberMember"],[974,33,835,0],[974,34,835,32,"node"],[974,38,835,0],[974,40,835,49],[975,0,835,49],[975,8,835,38,"opts"],[975,12,835,49],[975,83,835,45],[975,85,835,49],[976,0,836,2,"assert"],[976,4,836,2,"assert"],[976,10,836,8],[976,11,836,9],[976,29,836,8],[976,31,836,29,"node"],[976,35,836,8],[976,37,836,35,"opts"],[976,41,836,8],[976,42,836,2],[977,0,837,1],[979,0,839,0],[979,11,839,9,"assertEnumStringMember"],[979,33,839,0],[979,34,839,32,"node"],[979,38,839,0],[979,40,839,49],[980,0,839,49],[980,8,839,38,"opts"],[980,12,839,49],[980,83,839,45],[980,85,839,49],[981,0,840,2,"assert"],[981,4,840,2,"assert"],[981,10,840,8],[981,11,840,9],[981,29,840,8],[981,31,840,29,"node"],[981,35,840,8],[981,37,840,35,"opts"],[981,41,840,8],[981,42,840,2],[982,0,841,1],[984,0,843,0],[984,11,843,9,"assertEnumDefaultedMember"],[984,36,843,0],[984,37,843,35,"node"],[984,41,843,0],[984,43,843,52],[985,0,843,52],[985,8,843,41,"opts"],[985,12,843,52],[985,83,843,48],[985,85,843,52],[986,0,844,2,"assert"],[986,4,844,2,"assert"],[986,10,844,8],[986,11,844,9],[986,32,844,8],[986,34,844,32,"node"],[986,38,844,8],[986,40,844,38,"opts"],[986,44,844,8],[986,45,844,2],[987,0,845,1],[989,0,847,0],[989,11,847,9,"assertJSXAttribute"],[989,29,847,0],[989,30,847,28,"node"],[989,34,847,0],[989,36,847,45],[990,0,847,45],[990,8,847,34,"opts"],[990,12,847,45],[990,83,847,41],[990,85,847,45],[991,0,848,2,"assert"],[991,4,848,2,"assert"],[991,10,848,8],[991,11,848,9],[991,25,848,8],[991,27,848,25,"node"],[991,31,848,8],[991,33,848,31,"opts"],[991,37,848,8],[991,38,848,2],[992,0,849,1],[994,0,851,0],[994,11,851,9,"assertJSXClosingElement"],[994,34,851,0],[994,35,851,33,"node"],[994,39,851,0],[994,41,851,50],[995,0,851,50],[995,8,851,39,"opts"],[995,12,851,50],[995,83,851,46],[995,85,851,50],[996,0,852,2,"assert"],[996,4,852,2,"assert"],[996,10,852,8],[996,11,852,9],[996,30,852,8],[996,32,852,30,"node"],[996,36,852,8],[996,38,852,36,"opts"],[996,42,852,8],[996,43,852,2],[997,0,853,1],[999,0,855,0],[999,11,855,9,"assertJSXElement"],[999,27,855,0],[999,28,855,26,"node"],[999,32,855,0],[999,34,855,43],[1000,0,855,43],[1000,8,855,32,"opts"],[1000,12,855,43],[1000,83,855,39],[1000,85,855,43],[1001,0,856,2,"assert"],[1001,4,856,2,"assert"],[1001,10,856,8],[1001,11,856,9],[1001,23,856,8],[1001,25,856,23,"node"],[1001,29,856,8],[1001,31,856,29,"opts"],[1001,35,856,8],[1001,36,856,2],[1002,0,857,1],[1004,0,859,0],[1004,11,859,9,"assertJSXEmptyExpression"],[1004,35,859,0],[1004,36,859,34,"node"],[1004,40,859,0],[1004,42,859,51],[1005,0,859,51],[1005,8,859,40,"opts"],[1005,12,859,51],[1005,83,859,47],[1005,85,859,51],[1006,0,860,2,"assert"],[1006,4,860,2,"assert"],[1006,10,860,8],[1006,11,860,9],[1006,31,860,8],[1006,33,860,31,"node"],[1006,37,860,8],[1006,39,860,37,"opts"],[1006,43,860,8],[1006,44,860,2],[1007,0,861,1],[1009,0,863,0],[1009,11,863,9,"assertJSXExpressionContainer"],[1009,39,863,0],[1009,40,863,38,"node"],[1009,44,863,0],[1009,46,863,55],[1010,0,863,55],[1010,8,863,44,"opts"],[1010,12,863,55],[1010,83,863,51],[1010,85,863,55],[1011,0,864,2,"assert"],[1011,4,864,2,"assert"],[1011,10,864,8],[1011,11,864,9],[1011,35,864,8],[1011,37,864,35,"node"],[1011,41,864,8],[1011,43,864,41,"opts"],[1011,47,864,8],[1011,48,864,2],[1012,0,865,1],[1014,0,867,0],[1014,11,867,9,"assertJSXSpreadChild"],[1014,31,867,0],[1014,32,867,30,"node"],[1014,36,867,0],[1014,38,867,47],[1015,0,867,47],[1015,8,867,36,"opts"],[1015,12,867,47],[1015,83,867,43],[1015,85,867,47],[1016,0,868,2,"assert"],[1016,4,868,2,"assert"],[1016,10,868,8],[1016,11,868,9],[1016,27,868,8],[1016,29,868,27,"node"],[1016,33,868,8],[1016,35,868,33,"opts"],[1016,39,868,8],[1016,40,868,2],[1017,0,869,1],[1019,0,871,0],[1019,11,871,9,"assertJSXIdentifier"],[1019,30,871,0],[1019,31,871,29,"node"],[1019,35,871,0],[1019,37,871,46],[1020,0,871,46],[1020,8,871,35,"opts"],[1020,12,871,46],[1020,83,871,42],[1020,85,871,46],[1021,0,872,2,"assert"],[1021,4,872,2,"assert"],[1021,10,872,8],[1021,11,872,9],[1021,26,872,8],[1021,28,872,26,"node"],[1021,32,872,8],[1021,34,872,32,"opts"],[1021,38,872,8],[1021,39,872,2],[1022,0,873,1],[1024,0,875,0],[1024,11,875,9,"assertJSXMemberExpression"],[1024,36,875,0],[1024,37,875,35,"node"],[1024,41,875,0],[1024,43,875,52],[1025,0,875,52],[1025,8,875,41,"opts"],[1025,12,875,52],[1025,83,875,48],[1025,85,875,52],[1026,0,876,2,"assert"],[1026,4,876,2,"assert"],[1026,10,876,8],[1026,11,876,9],[1026,32,876,8],[1026,34,876,32,"node"],[1026,38,876,8],[1026,40,876,38,"opts"],[1026,44,876,8],[1026,45,876,2],[1027,0,877,1],[1029,0,879,0],[1029,11,879,9,"assertJSXNamespacedName"],[1029,34,879,0],[1029,35,879,33,"node"],[1029,39,879,0],[1029,41,879,50],[1030,0,879,50],[1030,8,879,39,"opts"],[1030,12,879,50],[1030,83,879,46],[1030,85,879,50],[1031,0,880,2,"assert"],[1031,4,880,2,"assert"],[1031,10,880,8],[1031,11,880,9],[1031,30,880,8],[1031,32,880,30,"node"],[1031,36,880,8],[1031,38,880,36,"opts"],[1031,42,880,8],[1031,43,880,2],[1032,0,881,1],[1034,0,883,0],[1034,11,883,9,"assertJSXOpeningElement"],[1034,34,883,0],[1034,35,883,33,"node"],[1034,39,883,0],[1034,41,883,50],[1035,0,883,50],[1035,8,883,39,"opts"],[1035,12,883,50],[1035,83,883,46],[1035,85,883,50],[1036,0,884,2,"assert"],[1036,4,884,2,"assert"],[1036,10,884,8],[1036,11,884,9],[1036,30,884,8],[1036,32,884,30,"node"],[1036,36,884,8],[1036,38,884,36,"opts"],[1036,42,884,8],[1036,43,884,2],[1037,0,885,1],[1039,0,887,0],[1039,11,887,9,"assertJSXSpreadAttribute"],[1039,35,887,0],[1039,36,887,34,"node"],[1039,40,887,0],[1039,42,887,51],[1040,0,887,51],[1040,8,887,40,"opts"],[1040,12,887,51],[1040,83,887,47],[1040,85,887,51],[1041,0,888,2,"assert"],[1041,4,888,2,"assert"],[1041,10,888,8],[1041,11,888,9],[1041,31,888,8],[1041,33,888,31,"node"],[1041,37,888,8],[1041,39,888,37,"opts"],[1041,43,888,8],[1041,44,888,2],[1042,0,889,1],[1044,0,891,0],[1044,11,891,9,"assertJSXText"],[1044,24,891,0],[1044,25,891,23,"node"],[1044,29,891,0],[1044,31,891,40],[1045,0,891,40],[1045,8,891,29,"opts"],[1045,12,891,40],[1045,83,891,36],[1045,85,891,40],[1046,0,892,2,"assert"],[1046,4,892,2,"assert"],[1046,10,892,8],[1046,11,892,9],[1046,20,892,8],[1046,22,892,20,"node"],[1046,26,892,8],[1046,28,892,26,"opts"],[1046,32,892,8],[1046,33,892,2],[1047,0,893,1],[1049,0,895,0],[1049,11,895,9,"assertJSXFragment"],[1049,28,895,0],[1049,29,895,27,"node"],[1049,33,895,0],[1049,35,895,44],[1050,0,895,44],[1050,8,895,33,"opts"],[1050,12,895,44],[1050,83,895,40],[1050,85,895,44],[1051,0,896,2,"assert"],[1051,4,896,2,"assert"],[1051,10,896,8],[1051,11,896,9],[1051,24,896,8],[1051,26,896,24,"node"],[1051,30,896,8],[1051,32,896,30,"opts"],[1051,36,896,8],[1051,37,896,2],[1052,0,897,1],[1054,0,899,0],[1054,11,899,9,"assertJSXOpeningFragment"],[1054,35,899,0],[1054,36,899,34,"node"],[1054,40,899,0],[1054,42,899,51],[1055,0,899,51],[1055,8,899,40,"opts"],[1055,12,899,51],[1055,83,899,47],[1055,85,899,51],[1056,0,900,2,"assert"],[1056,4,900,2,"assert"],[1056,10,900,8],[1056,11,900,9],[1056,31,900,8],[1056,33,900,31,"node"],[1056,37,900,8],[1056,39,900,37,"opts"],[1056,43,900,8],[1056,44,900,2],[1057,0,901,1],[1059,0,903,0],[1059,11,903,9,"assertJSXClosingFragment"],[1059,35,903,0],[1059,36,903,34,"node"],[1059,40,903,0],[1059,42,903,51],[1060,0,903,51],[1060,8,903,40,"opts"],[1060,12,903,51],[1060,83,903,47],[1060,85,903,51],[1061,0,904,2,"assert"],[1061,4,904,2,"assert"],[1061,10,904,8],[1061,11,904,9],[1061,31,904,8],[1061,33,904,31,"node"],[1061,37,904,8],[1061,39,904,37,"opts"],[1061,43,904,8],[1061,44,904,2],[1062,0,905,1],[1064,0,907,0],[1064,11,907,9,"assertNoop"],[1064,21,907,0],[1064,22,907,20,"node"],[1064,26,907,0],[1064,28,907,37],[1065,0,907,37],[1065,8,907,26,"opts"],[1065,12,907,37],[1065,83,907,33],[1065,85,907,37],[1066,0,908,2,"assert"],[1066,4,908,2,"assert"],[1066,10,908,8],[1066,11,908,9],[1066,17,908,8],[1066,19,908,17,"node"],[1066,23,908,8],[1066,25,908,23,"opts"],[1066,29,908,8],[1066,30,908,2],[1067,0,909,1],[1069,0,911,0],[1069,11,911,9,"assertPlaceholder"],[1069,28,911,0],[1069,29,911,27,"node"],[1069,33,911,0],[1069,35,911,44],[1070,0,911,44],[1070,8,911,33,"opts"],[1070,12,911,44],[1070,83,911,40],[1070,85,911,44],[1071,0,912,2,"assert"],[1071,4,912,2,"assert"],[1071,10,912,8],[1071,11,912,9],[1071,24,912,8],[1071,26,912,24,"node"],[1071,30,912,8],[1071,32,912,30,"opts"],[1071,36,912,8],[1071,37,912,2],[1072,0,913,1],[1074,0,915,0],[1074,11,915,9,"assertV8IntrinsicIdentifier"],[1074,38,915,0],[1074,39,915,37,"node"],[1074,43,915,0],[1074,45,915,54],[1075,0,915,54],[1075,8,915,43,"opts"],[1075,12,915,54],[1075,83,915,50],[1075,85,915,54],[1076,0,916,2,"assert"],[1076,4,916,2,"assert"],[1076,10,916,8],[1076,11,916,9],[1076,34,916,8],[1076,36,916,34,"node"],[1076,40,916,8],[1076,42,916,40,"opts"],[1076,46,916,8],[1076,47,916,2],[1077,0,917,1],[1079,0,919,0],[1079,11,919,9,"assertArgumentPlaceholder"],[1079,36,919,0],[1079,37,919,35,"node"],[1079,41,919,0],[1079,43,919,52],[1080,0,919,52],[1080,8,919,41,"opts"],[1080,12,919,52],[1080,83,919,48],[1080,85,919,52],[1081,0,920,2,"assert"],[1081,4,920,2,"assert"],[1081,10,920,8],[1081,11,920,9],[1081,32,920,8],[1081,34,920,32,"node"],[1081,38,920,8],[1081,40,920,38,"opts"],[1081,44,920,8],[1081,45,920,2],[1082,0,921,1],[1084,0,923,0],[1084,11,923,9,"assertAwaitExpression"],[1084,32,923,0],[1084,33,923,31,"node"],[1084,37,923,0],[1084,39,923,48],[1085,0,923,48],[1085,8,923,37,"opts"],[1085,12,923,48],[1085,83,923,44],[1085,85,923,48],[1086,0,924,2,"assert"],[1086,4,924,2,"assert"],[1086,10,924,8],[1086,11,924,9],[1086,28,924,8],[1086,30,924,28,"node"],[1086,34,924,8],[1086,36,924,34,"opts"],[1086,40,924,8],[1086,41,924,2],[1087,0,925,1],[1089,0,927,0],[1089,11,927,9,"assertBindExpression"],[1089,31,927,0],[1089,32,927,30,"node"],[1089,36,927,0],[1089,38,927,47],[1090,0,927,47],[1090,8,927,36,"opts"],[1090,12,927,47],[1090,83,927,43],[1090,85,927,47],[1091,0,928,2,"assert"],[1091,4,928,2,"assert"],[1091,10,928,8],[1091,11,928,9],[1091,27,928,8],[1091,29,928,27,"node"],[1091,33,928,8],[1091,35,928,33,"opts"],[1091,39,928,8],[1091,40,928,2],[1092,0,929,1],[1094,0,931,0],[1094,11,931,9,"assertClassProperty"],[1094,30,931,0],[1094,31,931,29,"node"],[1094,35,931,0],[1094,37,931,46],[1095,0,931,46],[1095,8,931,35,"opts"],[1095,12,931,46],[1095,83,931,42],[1095,85,931,46],[1096,0,932,2,"assert"],[1096,4,932,2,"assert"],[1096,10,932,8],[1096,11,932,9],[1096,26,932,8],[1096,28,932,26,"node"],[1096,32,932,8],[1096,34,932,32,"opts"],[1096,38,932,8],[1096,39,932,2],[1097,0,933,1],[1099,0,935,0],[1099,11,935,9,"assertOptionalMemberExpression"],[1099,41,935,0],[1099,42,935,40,"node"],[1099,46,935,0],[1099,48,935,57],[1100,0,935,57],[1100,8,935,46,"opts"],[1100,12,935,57],[1100,83,935,53],[1100,85,935,57],[1101,0,936,2,"assert"],[1101,4,936,2,"assert"],[1101,10,936,8],[1101,11,936,9],[1101,37,936,8],[1101,39,936,37,"node"],[1101,43,936,8],[1101,45,936,43,"opts"],[1101,49,936,8],[1101,50,936,2],[1102,0,937,1],[1104,0,939,0],[1104,11,939,9,"assertPipelineTopicExpression"],[1104,40,939,0],[1104,41,939,39,"node"],[1104,45,939,0],[1104,47,939,56],[1105,0,939,56],[1105,8,939,45,"opts"],[1105,12,939,56],[1105,83,939,52],[1105,85,939,56],[1106,0,940,2,"assert"],[1106,4,940,2,"assert"],[1106,10,940,8],[1106,11,940,9],[1106,36,940,8],[1106,38,940,36,"node"],[1106,42,940,8],[1106,44,940,42,"opts"],[1106,48,940,8],[1106,49,940,2],[1107,0,941,1],[1109,0,943,0],[1109,11,943,9,"assertPipelineBareFunction"],[1109,37,943,0],[1109,38,943,36,"node"],[1109,42,943,0],[1109,44,943,53],[1110,0,943,53],[1110,8,943,42,"opts"],[1110,12,943,53],[1110,83,943,49],[1110,85,943,53],[1111,0,944,2,"assert"],[1111,4,944,2,"assert"],[1111,10,944,8],[1111,11,944,9],[1111,33,944,8],[1111,35,944,33,"node"],[1111,39,944,8],[1111,41,944,39,"opts"],[1111,45,944,8],[1111,46,944,2],[1112,0,945,1],[1114,0,947,0],[1114,11,947,9,"assertPipelinePrimaryTopicReference"],[1114,46,947,0],[1114,47,947,45,"node"],[1114,51,947,0],[1114,53,947,62],[1115,0,947,62],[1115,8,947,51,"opts"],[1115,12,947,62],[1115,83,947,58],[1115,85,947,62],[1116,0,948,2,"assert"],[1116,4,948,2,"assert"],[1116,10,948,8],[1116,11,948,9],[1116,42,948,8],[1116,44,948,42,"node"],[1116,48,948,8],[1116,50,948,48,"opts"],[1116,54,948,8],[1116,55,948,2],[1117,0,949,1],[1119,0,951,0],[1119,11,951,9,"assertOptionalCallExpression"],[1119,39,951,0],[1119,40,951,38,"node"],[1119,44,951,0],[1119,46,951,55],[1120,0,951,55],[1120,8,951,44,"opts"],[1120,12,951,55],[1120,83,951,51],[1120,85,951,55],[1121,0,952,2,"assert"],[1121,4,952,2,"assert"],[1121,10,952,8],[1121,11,952,9],[1121,35,952,8],[1121,37,952,35,"node"],[1121,41,952,8],[1121,43,952,41,"opts"],[1121,47,952,8],[1121,48,952,2],[1122,0,953,1],[1124,0,955,0],[1124,11,955,9,"assertClassPrivateProperty"],[1124,37,955,0],[1124,38,955,36,"node"],[1124,42,955,0],[1124,44,955,53],[1125,0,955,53],[1125,8,955,42,"opts"],[1125,12,955,53],[1125,83,955,49],[1125,85,955,53],[1126,0,956,2,"assert"],[1126,4,956,2,"assert"],[1126,10,956,8],[1126,11,956,9],[1126,33,956,8],[1126,35,956,33,"node"],[1126,39,956,8],[1126,41,956,39,"opts"],[1126,45,956,8],[1126,46,956,2],[1127,0,957,1],[1129,0,959,0],[1129,11,959,9,"assertClassPrivateMethod"],[1129,35,959,0],[1129,36,959,34,"node"],[1129,40,959,0],[1129,42,959,51],[1130,0,959,51],[1130,8,959,40,"opts"],[1130,12,959,51],[1130,83,959,47],[1130,85,959,51],[1131,0,960,2,"assert"],[1131,4,960,2,"assert"],[1131,10,960,8],[1131,11,960,9],[1131,31,960,8],[1131,33,960,31,"node"],[1131,37,960,8],[1131,39,960,37,"opts"],[1131,43,960,8],[1131,44,960,2],[1132,0,961,1],[1134,0,963,0],[1134,11,963,9,"assertImport"],[1134,23,963,0],[1134,24,963,22,"node"],[1134,28,963,0],[1134,30,963,39],[1135,0,963,39],[1135,8,963,28,"opts"],[1135,12,963,39],[1135,83,963,35],[1135,85,963,39],[1136,0,964,2,"assert"],[1136,4,964,2,"assert"],[1136,10,964,8],[1136,11,964,9],[1136,19,964,8],[1136,21,964,19,"node"],[1136,25,964,8],[1136,27,964,25,"opts"],[1136,31,964,8],[1136,32,964,2],[1137,0,965,1],[1139,0,967,0],[1139,11,967,9,"assertDecorator"],[1139,26,967,0],[1139,27,967,25,"node"],[1139,31,967,0],[1139,33,967,42],[1140,0,967,42],[1140,8,967,31,"opts"],[1140,12,967,42],[1140,83,967,38],[1140,85,967,42],[1141,0,968,2,"assert"],[1141,4,968,2,"assert"],[1141,10,968,8],[1141,11,968,9],[1141,22,968,8],[1141,24,968,22,"node"],[1141,28,968,8],[1141,30,968,28,"opts"],[1141,34,968,8],[1141,35,968,2],[1142,0,969,1],[1144,0,971,0],[1144,11,971,9,"assertDoExpression"],[1144,29,971,0],[1144,30,971,28,"node"],[1144,34,971,0],[1144,36,971,45],[1145,0,971,45],[1145,8,971,34,"opts"],[1145,12,971,45],[1145,83,971,41],[1145,85,971,45],[1146,0,972,2,"assert"],[1146,4,972,2,"assert"],[1146,10,972,8],[1146,11,972,9],[1146,25,972,8],[1146,27,972,25,"node"],[1146,31,972,8],[1146,33,972,31,"opts"],[1146,37,972,8],[1146,38,972,2],[1147,0,973,1],[1149,0,975,0],[1149,11,975,9,"assertExportDefaultSpecifier"],[1149,39,975,0],[1149,40,975,38,"node"],[1149,44,975,0],[1149,46,975,55],[1150,0,975,55],[1150,8,975,44,"opts"],[1150,12,975,55],[1150,83,975,51],[1150,85,975,55],[1151,0,976,2,"assert"],[1151,4,976,2,"assert"],[1151,10,976,8],[1151,11,976,9],[1151,35,976,8],[1151,37,976,35,"node"],[1151,41,976,8],[1151,43,976,41,"opts"],[1151,47,976,8],[1151,48,976,2],[1152,0,977,1],[1154,0,979,0],[1154,11,979,9,"assertExportNamespaceSpecifier"],[1154,41,979,0],[1154,42,979,40,"node"],[1154,46,979,0],[1154,48,979,57],[1155,0,979,57],[1155,8,979,46,"opts"],[1155,12,979,57],[1155,83,979,53],[1155,85,979,57],[1156,0,980,2,"assert"],[1156,4,980,2,"assert"],[1156,10,980,8],[1156,11,980,9],[1156,37,980,8],[1156,39,980,37,"node"],[1156,43,980,8],[1156,45,980,43,"opts"],[1156,49,980,8],[1156,50,980,2],[1157,0,981,1],[1159,0,983,0],[1159,11,983,9,"assertPrivateName"],[1159,28,983,0],[1159,29,983,27,"node"],[1159,33,983,0],[1159,35,983,44],[1160,0,983,44],[1160,8,983,33,"opts"],[1160,12,983,44],[1160,83,983,40],[1160,85,983,44],[1161,0,984,2,"assert"],[1161,4,984,2,"assert"],[1161,10,984,8],[1161,11,984,9],[1161,24,984,8],[1161,26,984,24,"node"],[1161,30,984,8],[1161,32,984,30,"opts"],[1161,36,984,8],[1161,37,984,2],[1162,0,985,1],[1164,0,987,0],[1164,11,987,9,"assertBigIntLiteral"],[1164,30,987,0],[1164,31,987,29,"node"],[1164,35,987,0],[1164,37,987,46],[1165,0,987,46],[1165,8,987,35,"opts"],[1165,12,987,46],[1165,83,987,42],[1165,85,987,46],[1166,0,988,2,"assert"],[1166,4,988,2,"assert"],[1166,10,988,8],[1166,11,988,9],[1166,26,988,8],[1166,28,988,26,"node"],[1166,32,988,8],[1166,34,988,32,"opts"],[1166,38,988,8],[1166,39,988,2],[1167,0,989,1],[1169,0,991,0],[1169,11,991,9,"assertTSParameterProperty"],[1169,36,991,0],[1169,37,991,35,"node"],[1169,41,991,0],[1169,43,991,52],[1170,0,991,52],[1170,8,991,41,"opts"],[1170,12,991,52],[1170,83,991,48],[1170,85,991,52],[1171,0,992,2,"assert"],[1171,4,992,2,"assert"],[1171,10,992,8],[1171,11,992,9],[1171,32,992,8],[1171,34,992,32,"node"],[1171,38,992,8],[1171,40,992,38,"opts"],[1171,44,992,8],[1171,45,992,2],[1172,0,993,1],[1174,0,995,0],[1174,11,995,9,"assertTSDeclareFunction"],[1174,34,995,0],[1174,35,995,33,"node"],[1174,39,995,0],[1174,41,995,50],[1175,0,995,50],[1175,8,995,39,"opts"],[1175,12,995,50],[1175,83,995,46],[1175,85,995,50],[1176,0,996,2,"assert"],[1176,4,996,2,"assert"],[1176,10,996,8],[1176,11,996,9],[1176,30,996,8],[1176,32,996,30,"node"],[1176,36,996,8],[1176,38,996,36,"opts"],[1176,42,996,8],[1176,43,996,2],[1177,0,997,1],[1179,0,999,0],[1179,11,999,9,"assertTSDeclareMethod"],[1179,32,999,0],[1179,33,999,31,"node"],[1179,37,999,0],[1179,39,999,48],[1180,0,999,48],[1180,8,999,37,"opts"],[1180,12,999,48],[1180,83,999,44],[1180,85,999,48],[1181,0,1000,2,"assert"],[1181,4,1000,2,"assert"],[1181,10,1000,8],[1181,11,1000,9],[1181,28,1000,8],[1181,30,1000,28,"node"],[1181,34,1000,8],[1181,36,1000,34,"opts"],[1181,40,1000,8],[1181,41,1000,2],[1182,0,1001,1],[1184,0,1003,0],[1184,11,1003,9,"assertTSQualifiedName"],[1184,32,1003,0],[1184,33,1003,31,"node"],[1184,37,1003,0],[1184,39,1003,48],[1185,0,1003,48],[1185,8,1003,37,"opts"],[1185,12,1003,48],[1185,83,1003,44],[1185,85,1003,48],[1186,0,1004,2,"assert"],[1186,4,1004,2,"assert"],[1186,10,1004,8],[1186,11,1004,9],[1186,28,1004,8],[1186,30,1004,28,"node"],[1186,34,1004,8],[1186,36,1004,34,"opts"],[1186,40,1004,8],[1186,41,1004,2],[1187,0,1005,1],[1189,0,1007,0],[1189,11,1007,9,"assertTSCallSignatureDeclaration"],[1189,43,1007,0],[1189,44,1007,42,"node"],[1189,48,1007,0],[1189,50,1007,59],[1190,0,1007,59],[1190,8,1007,48,"opts"],[1190,12,1007,59],[1190,83,1007,55],[1190,85,1007,59],[1191,0,1008,2,"assert"],[1191,4,1008,2,"assert"],[1191,10,1008,8],[1191,11,1008,9],[1191,39,1008,8],[1191,41,1008,39,"node"],[1191,45,1008,8],[1191,47,1008,45,"opts"],[1191,51,1008,8],[1191,52,1008,2],[1192,0,1009,1],[1194,0,1011,0],[1194,11,1011,9,"assertTSConstructSignatureDeclaration"],[1194,48,1011,0],[1194,49,1011,47,"node"],[1194,53,1011,0],[1194,55,1011,64],[1195,0,1011,64],[1195,8,1011,53,"opts"],[1195,12,1011,64],[1195,83,1011,60],[1195,85,1011,64],[1196,0,1012,2,"assert"],[1196,4,1012,2,"assert"],[1196,10,1012,8],[1196,11,1012,9],[1196,44,1012,8],[1196,46,1012,44,"node"],[1196,50,1012,8],[1196,52,1012,50,"opts"],[1196,56,1012,8],[1196,57,1012,2],[1197,0,1013,1],[1199,0,1015,0],[1199,11,1015,9,"assertTSPropertySignature"],[1199,36,1015,0],[1199,37,1015,35,"node"],[1199,41,1015,0],[1199,43,1015,52],[1200,0,1015,52],[1200,8,1015,41,"opts"],[1200,12,1015,52],[1200,83,1015,48],[1200,85,1015,52],[1201,0,1016,2,"assert"],[1201,4,1016,2,"assert"],[1201,10,1016,8],[1201,11,1016,9],[1201,32,1016,8],[1201,34,1016,32,"node"],[1201,38,1016,8],[1201,40,1016,38,"opts"],[1201,44,1016,8],[1201,45,1016,2],[1202,0,1017,1],[1204,0,1019,0],[1204,11,1019,9,"assertTSMethodSignature"],[1204,34,1019,0],[1204,35,1019,33,"node"],[1204,39,1019,0],[1204,41,1019,50],[1205,0,1019,50],[1205,8,1019,39,"opts"],[1205,12,1019,50],[1205,83,1019,46],[1205,85,1019,50],[1206,0,1020,2,"assert"],[1206,4,1020,2,"assert"],[1206,10,1020,8],[1206,11,1020,9],[1206,30,1020,8],[1206,32,1020,30,"node"],[1206,36,1020,8],[1206,38,1020,36,"opts"],[1206,42,1020,8],[1206,43,1020,2],[1207,0,1021,1],[1209,0,1023,0],[1209,11,1023,9,"assertTSIndexSignature"],[1209,33,1023,0],[1209,34,1023,32,"node"],[1209,38,1023,0],[1209,40,1023,49],[1210,0,1023,49],[1210,8,1023,38,"opts"],[1210,12,1023,49],[1210,83,1023,45],[1210,85,1023,49],[1211,0,1024,2,"assert"],[1211,4,1024,2,"assert"],[1211,10,1024,8],[1211,11,1024,9],[1211,29,1024,8],[1211,31,1024,29,"node"],[1211,35,1024,8],[1211,37,1024,35,"opts"],[1211,41,1024,8],[1211,42,1024,2],[1212,0,1025,1],[1214,0,1027,0],[1214,11,1027,9,"assertTSAnyKeyword"],[1214,29,1027,0],[1214,30,1027,28,"node"],[1214,34,1027,0],[1214,36,1027,45],[1215,0,1027,45],[1215,8,1027,34,"opts"],[1215,12,1027,45],[1215,83,1027,41],[1215,85,1027,45],[1216,0,1028,2,"assert"],[1216,4,1028,2,"assert"],[1216,10,1028,8],[1216,11,1028,9],[1216,25,1028,8],[1216,27,1028,25,"node"],[1216,31,1028,8],[1216,33,1028,31,"opts"],[1216,37,1028,8],[1216,38,1028,2],[1217,0,1029,1],[1219,0,1031,0],[1219,11,1031,9,"assertTSBooleanKeyword"],[1219,33,1031,0],[1219,34,1031,32,"node"],[1219,38,1031,0],[1219,40,1031,49],[1220,0,1031,49],[1220,8,1031,38,"opts"],[1220,12,1031,49],[1220,83,1031,45],[1220,85,1031,49],[1221,0,1032,2,"assert"],[1221,4,1032,2,"assert"],[1221,10,1032,8],[1221,11,1032,9],[1221,29,1032,8],[1221,31,1032,29,"node"],[1221,35,1032,8],[1221,37,1032,35,"opts"],[1221,41,1032,8],[1221,42,1032,2],[1222,0,1033,1],[1224,0,1035,0],[1224,11,1035,9,"assertTSBigIntKeyword"],[1224,32,1035,0],[1224,33,1035,31,"node"],[1224,37,1035,0],[1224,39,1035,48],[1225,0,1035,48],[1225,8,1035,37,"opts"],[1225,12,1035,48],[1225,83,1035,44],[1225,85,1035,48],[1226,0,1036,2,"assert"],[1226,4,1036,2,"assert"],[1226,10,1036,8],[1226,11,1036,9],[1226,28,1036,8],[1226,30,1036,28,"node"],[1226,34,1036,8],[1226,36,1036,34,"opts"],[1226,40,1036,8],[1226,41,1036,2],[1227,0,1037,1],[1229,0,1039,0],[1229,11,1039,9,"assertTSNeverKeyword"],[1229,31,1039,0],[1229,32,1039,30,"node"],[1229,36,1039,0],[1229,38,1039,47],[1230,0,1039,47],[1230,8,1039,36,"opts"],[1230,12,1039,47],[1230,83,1039,43],[1230,85,1039,47],[1231,0,1040,2,"assert"],[1231,4,1040,2,"assert"],[1231,10,1040,8],[1231,11,1040,9],[1231,27,1040,8],[1231,29,1040,27,"node"],[1231,33,1040,8],[1231,35,1040,33,"opts"],[1231,39,1040,8],[1231,40,1040,2],[1232,0,1041,1],[1234,0,1043,0],[1234,11,1043,9,"assertTSNullKeyword"],[1234,30,1043,0],[1234,31,1043,29,"node"],[1234,35,1043,0],[1234,37,1043,46],[1235,0,1043,46],[1235,8,1043,35,"opts"],[1235,12,1043,46],[1235,83,1043,42],[1235,85,1043,46],[1236,0,1044,2,"assert"],[1236,4,1044,2,"assert"],[1236,10,1044,8],[1236,11,1044,9],[1236,26,1044,8],[1236,28,1044,26,"node"],[1236,32,1044,8],[1236,34,1044,32,"opts"],[1236,38,1044,8],[1236,39,1044,2],[1237,0,1045,1],[1239,0,1047,0],[1239,11,1047,9,"assertTSNumberKeyword"],[1239,32,1047,0],[1239,33,1047,31,"node"],[1239,37,1047,0],[1239,39,1047,48],[1240,0,1047,48],[1240,8,1047,37,"opts"],[1240,12,1047,48],[1240,83,1047,44],[1240,85,1047,48],[1241,0,1048,2,"assert"],[1241,4,1048,2,"assert"],[1241,10,1048,8],[1241,11,1048,9],[1241,28,1048,8],[1241,30,1048,28,"node"],[1241,34,1048,8],[1241,36,1048,34,"opts"],[1241,40,1048,8],[1241,41,1048,2],[1242,0,1049,1],[1244,0,1051,0],[1244,11,1051,9,"assertTSObjectKeyword"],[1244,32,1051,0],[1244,33,1051,31,"node"],[1244,37,1051,0],[1244,39,1051,48],[1245,0,1051,48],[1245,8,1051,37,"opts"],[1245,12,1051,48],[1245,83,1051,44],[1245,85,1051,48],[1246,0,1052,2,"assert"],[1246,4,1052,2,"assert"],[1246,10,1052,8],[1246,11,1052,9],[1246,28,1052,8],[1246,30,1052,28,"node"],[1246,34,1052,8],[1246,36,1052,34,"opts"],[1246,40,1052,8],[1246,41,1052,2],[1247,0,1053,1],[1249,0,1055,0],[1249,11,1055,9,"assertTSStringKeyword"],[1249,32,1055,0],[1249,33,1055,31,"node"],[1249,37,1055,0],[1249,39,1055,48],[1250,0,1055,48],[1250,8,1055,37,"opts"],[1250,12,1055,48],[1250,83,1055,44],[1250,85,1055,48],[1251,0,1056,2,"assert"],[1251,4,1056,2,"assert"],[1251,10,1056,8],[1251,11,1056,9],[1251,28,1056,8],[1251,30,1056,28,"node"],[1251,34,1056,8],[1251,36,1056,34,"opts"],[1251,40,1056,8],[1251,41,1056,2],[1252,0,1057,1],[1254,0,1059,0],[1254,11,1059,9,"assertTSSymbolKeyword"],[1254,32,1059,0],[1254,33,1059,31,"node"],[1254,37,1059,0],[1254,39,1059,48],[1255,0,1059,48],[1255,8,1059,37,"opts"],[1255,12,1059,48],[1255,83,1059,44],[1255,85,1059,48],[1256,0,1060,2,"assert"],[1256,4,1060,2,"assert"],[1256,10,1060,8],[1256,11,1060,9],[1256,28,1060,8],[1256,30,1060,28,"node"],[1256,34,1060,8],[1256,36,1060,34,"opts"],[1256,40,1060,8],[1256,41,1060,2],[1257,0,1061,1],[1259,0,1063,0],[1259,11,1063,9,"assertTSUndefinedKeyword"],[1259,35,1063,0],[1259,36,1063,34,"node"],[1259,40,1063,0],[1259,42,1063,51],[1260,0,1063,51],[1260,8,1063,40,"opts"],[1260,12,1063,51],[1260,83,1063,47],[1260,85,1063,51],[1261,0,1064,2,"assert"],[1261,4,1064,2,"assert"],[1261,10,1064,8],[1261,11,1064,9],[1261,31,1064,8],[1261,33,1064,31,"node"],[1261,37,1064,8],[1261,39,1064,37,"opts"],[1261,43,1064,8],[1261,44,1064,2],[1262,0,1065,1],[1264,0,1067,0],[1264,11,1067,9,"assertTSUnknownKeyword"],[1264,33,1067,0],[1264,34,1067,32,"node"],[1264,38,1067,0],[1264,40,1067,49],[1265,0,1067,49],[1265,8,1067,38,"opts"],[1265,12,1067,49],[1265,83,1067,45],[1265,85,1067,49],[1266,0,1068,2,"assert"],[1266,4,1068,2,"assert"],[1266,10,1068,8],[1266,11,1068,9],[1266,29,1068,8],[1266,31,1068,29,"node"],[1266,35,1068,8],[1266,37,1068,35,"opts"],[1266,41,1068,8],[1266,42,1068,2],[1267,0,1069,1],[1269,0,1071,0],[1269,11,1071,9,"assertTSVoidKeyword"],[1269,30,1071,0],[1269,31,1071,29,"node"],[1269,35,1071,0],[1269,37,1071,46],[1270,0,1071,46],[1270,8,1071,35,"opts"],[1270,12,1071,46],[1270,83,1071,42],[1270,85,1071,46],[1271,0,1072,2,"assert"],[1271,4,1072,2,"assert"],[1271,10,1072,8],[1271,11,1072,9],[1271,26,1072,8],[1271,28,1072,26,"node"],[1271,32,1072,8],[1271,34,1072,32,"opts"],[1271,38,1072,8],[1271,39,1072,2],[1272,0,1073,1],[1274,0,1075,0],[1274,11,1075,9,"assertTSThisType"],[1274,27,1075,0],[1274,28,1075,26,"node"],[1274,32,1075,0],[1274,34,1075,43],[1275,0,1075,43],[1275,8,1075,32,"opts"],[1275,12,1075,43],[1275,83,1075,39],[1275,85,1075,43],[1276,0,1076,2,"assert"],[1276,4,1076,2,"assert"],[1276,10,1076,8],[1276,11,1076,9],[1276,23,1076,8],[1276,25,1076,23,"node"],[1276,29,1076,8],[1276,31,1076,29,"opts"],[1276,35,1076,8],[1276,36,1076,2],[1277,0,1077,1],[1279,0,1079,0],[1279,11,1079,9,"assertTSFunctionType"],[1279,31,1079,0],[1279,32,1079,30,"node"],[1279,36,1079,0],[1279,38,1079,47],[1280,0,1079,47],[1280,8,1079,36,"opts"],[1280,12,1079,47],[1280,83,1079,43],[1280,85,1079,47],[1281,0,1080,2,"assert"],[1281,4,1080,2,"assert"],[1281,10,1080,8],[1281,11,1080,9],[1281,27,1080,8],[1281,29,1080,27,"node"],[1281,33,1080,8],[1281,35,1080,33,"opts"],[1281,39,1080,8],[1281,40,1080,2],[1282,0,1081,1],[1284,0,1083,0],[1284,11,1083,9,"assertTSConstructorType"],[1284,34,1083,0],[1284,35,1083,33,"node"],[1284,39,1083,0],[1284,41,1083,50],[1285,0,1083,50],[1285,8,1083,39,"opts"],[1285,12,1083,50],[1285,83,1083,46],[1285,85,1083,50],[1286,0,1084,2,"assert"],[1286,4,1084,2,"assert"],[1286,10,1084,8],[1286,11,1084,9],[1286,30,1084,8],[1286,32,1084,30,"node"],[1286,36,1084,8],[1286,38,1084,36,"opts"],[1286,42,1084,8],[1286,43,1084,2],[1287,0,1085,1],[1289,0,1087,0],[1289,11,1087,9,"assertTSTypeReference"],[1289,32,1087,0],[1289,33,1087,31,"node"],[1289,37,1087,0],[1289,39,1087,48],[1290,0,1087,48],[1290,8,1087,37,"opts"],[1290,12,1087,48],[1290,83,1087,44],[1290,85,1087,48],[1291,0,1088,2,"assert"],[1291,4,1088,2,"assert"],[1291,10,1088,8],[1291,11,1088,9],[1291,28,1088,8],[1291,30,1088,28,"node"],[1291,34,1088,8],[1291,36,1088,34,"opts"],[1291,40,1088,8],[1291,41,1088,2],[1292,0,1089,1],[1294,0,1091,0],[1294,11,1091,9,"assertTSTypePredicate"],[1294,32,1091,0],[1294,33,1091,31,"node"],[1294,37,1091,0],[1294,39,1091,48],[1295,0,1091,48],[1295,8,1091,37,"opts"],[1295,12,1091,48],[1295,83,1091,44],[1295,85,1091,48],[1296,0,1092,2,"assert"],[1296,4,1092,2,"assert"],[1296,10,1092,8],[1296,11,1092,9],[1296,28,1092,8],[1296,30,1092,28,"node"],[1296,34,1092,8],[1296,36,1092,34,"opts"],[1296,40,1092,8],[1296,41,1092,2],[1297,0,1093,1],[1299,0,1095,0],[1299,11,1095,9,"assertTSTypeQuery"],[1299,28,1095,0],[1299,29,1095,27,"node"],[1299,33,1095,0],[1299,35,1095,44],[1300,0,1095,44],[1300,8,1095,33,"opts"],[1300,12,1095,44],[1300,83,1095,40],[1300,85,1095,44],[1301,0,1096,2,"assert"],[1301,4,1096,2,"assert"],[1301,10,1096,8],[1301,11,1096,9],[1301,24,1096,8],[1301,26,1096,24,"node"],[1301,30,1096,8],[1301,32,1096,30,"opts"],[1301,36,1096,8],[1301,37,1096,2],[1302,0,1097,1],[1304,0,1099,0],[1304,11,1099,9,"assertTSTypeLiteral"],[1304,30,1099,0],[1304,31,1099,29,"node"],[1304,35,1099,0],[1304,37,1099,46],[1305,0,1099,46],[1305,8,1099,35,"opts"],[1305,12,1099,46],[1305,83,1099,42],[1305,85,1099,46],[1306,0,1100,2,"assert"],[1306,4,1100,2,"assert"],[1306,10,1100,8],[1306,11,1100,9],[1306,26,1100,8],[1306,28,1100,26,"node"],[1306,32,1100,8],[1306,34,1100,32,"opts"],[1306,38,1100,8],[1306,39,1100,2],[1307,0,1101,1],[1309,0,1103,0],[1309,11,1103,9,"assertTSArrayType"],[1309,28,1103,0],[1309,29,1103,27,"node"],[1309,33,1103,0],[1309,35,1103,44],[1310,0,1103,44],[1310,8,1103,33,"opts"],[1310,12,1103,44],[1310,83,1103,40],[1310,85,1103,44],[1311,0,1104,2,"assert"],[1311,4,1104,2,"assert"],[1311,10,1104,8],[1311,11,1104,9],[1311,24,1104,8],[1311,26,1104,24,"node"],[1311,30,1104,8],[1311,32,1104,30,"opts"],[1311,36,1104,8],[1311,37,1104,2],[1312,0,1105,1],[1314,0,1107,0],[1314,11,1107,9,"assertTSTupleType"],[1314,28,1107,0],[1314,29,1107,27,"node"],[1314,33,1107,0],[1314,35,1107,44],[1315,0,1107,44],[1315,8,1107,33,"opts"],[1315,12,1107,44],[1315,83,1107,40],[1315,85,1107,44],[1316,0,1108,2,"assert"],[1316,4,1108,2,"assert"],[1316,10,1108,8],[1316,11,1108,9],[1316,24,1108,8],[1316,26,1108,24,"node"],[1316,30,1108,8],[1316,32,1108,30,"opts"],[1316,36,1108,8],[1316,37,1108,2],[1317,0,1109,1],[1319,0,1111,0],[1319,11,1111,9,"assertTSOptionalType"],[1319,31,1111,0],[1319,32,1111,30,"node"],[1319,36,1111,0],[1319,38,1111,47],[1320,0,1111,47],[1320,8,1111,36,"opts"],[1320,12,1111,47],[1320,83,1111,43],[1320,85,1111,47],[1321,0,1112,2,"assert"],[1321,4,1112,2,"assert"],[1321,10,1112,8],[1321,11,1112,9],[1321,27,1112,8],[1321,29,1112,27,"node"],[1321,33,1112,8],[1321,35,1112,33,"opts"],[1321,39,1112,8],[1321,40,1112,2],[1322,0,1113,1],[1324,0,1115,0],[1324,11,1115,9,"assertTSRestType"],[1324,27,1115,0],[1324,28,1115,26,"node"],[1324,32,1115,0],[1324,34,1115,43],[1325,0,1115,43],[1325,8,1115,32,"opts"],[1325,12,1115,43],[1325,83,1115,39],[1325,85,1115,43],[1326,0,1116,2,"assert"],[1326,4,1116,2,"assert"],[1326,10,1116,8],[1326,11,1116,9],[1326,23,1116,8],[1326,25,1116,23,"node"],[1326,29,1116,8],[1326,31,1116,29,"opts"],[1326,35,1116,8],[1326,36,1116,2],[1327,0,1117,1],[1329,0,1119,0],[1329,11,1119,9,"assertTSUnionType"],[1329,28,1119,0],[1329,29,1119,27,"node"],[1329,33,1119,0],[1329,35,1119,44],[1330,0,1119,44],[1330,8,1119,33,"opts"],[1330,12,1119,44],[1330,83,1119,40],[1330,85,1119,44],[1331,0,1120,2,"assert"],[1331,4,1120,2,"assert"],[1331,10,1120,8],[1331,11,1120,9],[1331,24,1120,8],[1331,26,1120,24,"node"],[1331,30,1120,8],[1331,32,1120,30,"opts"],[1331,36,1120,8],[1331,37,1120,2],[1332,0,1121,1],[1334,0,1123,0],[1334,11,1123,9,"assertTSIntersectionType"],[1334,35,1123,0],[1334,36,1123,34,"node"],[1334,40,1123,0],[1334,42,1123,51],[1335,0,1123,51],[1335,8,1123,40,"opts"],[1335,12,1123,51],[1335,83,1123,47],[1335,85,1123,51],[1336,0,1124,2,"assert"],[1336,4,1124,2,"assert"],[1336,10,1124,8],[1336,11,1124,9],[1336,31,1124,8],[1336,33,1124,31,"node"],[1336,37,1124,8],[1336,39,1124,37,"opts"],[1336,43,1124,8],[1336,44,1124,2],[1337,0,1125,1],[1339,0,1127,0],[1339,11,1127,9,"assertTSConditionalType"],[1339,34,1127,0],[1339,35,1127,33,"node"],[1339,39,1127,0],[1339,41,1127,50],[1340,0,1127,50],[1340,8,1127,39,"opts"],[1340,12,1127,50],[1340,83,1127,46],[1340,85,1127,50],[1341,0,1128,2,"assert"],[1341,4,1128,2,"assert"],[1341,10,1128,8],[1341,11,1128,9],[1341,30,1128,8],[1341,32,1128,30,"node"],[1341,36,1128,8],[1341,38,1128,36,"opts"],[1341,42,1128,8],[1341,43,1128,2],[1342,0,1129,1],[1344,0,1131,0],[1344,11,1131,9,"assertTSInferType"],[1344,28,1131,0],[1344,29,1131,27,"node"],[1344,33,1131,0],[1344,35,1131,44],[1345,0,1131,44],[1345,8,1131,33,"opts"],[1345,12,1131,44],[1345,83,1131,40],[1345,85,1131,44],[1346,0,1132,2,"assert"],[1346,4,1132,2,"assert"],[1346,10,1132,8],[1346,11,1132,9],[1346,24,1132,8],[1346,26,1132,24,"node"],[1346,30,1132,8],[1346,32,1132,30,"opts"],[1346,36,1132,8],[1346,37,1132,2],[1347,0,1133,1],[1349,0,1135,0],[1349,11,1135,9,"assertTSParenthesizedType"],[1349,36,1135,0],[1349,37,1135,35,"node"],[1349,41,1135,0],[1349,43,1135,52],[1350,0,1135,52],[1350,8,1135,41,"opts"],[1350,12,1135,52],[1350,83,1135,48],[1350,85,1135,52],[1351,0,1136,2,"assert"],[1351,4,1136,2,"assert"],[1351,10,1136,8],[1351,11,1136,9],[1351,32,1136,8],[1351,34,1136,32,"node"],[1351,38,1136,8],[1351,40,1136,38,"opts"],[1351,44,1136,8],[1351,45,1136,2],[1352,0,1137,1],[1354,0,1139,0],[1354,11,1139,9,"assertTSTypeOperator"],[1354,31,1139,0],[1354,32,1139,30,"node"],[1354,36,1139,0],[1354,38,1139,47],[1355,0,1139,47],[1355,8,1139,36,"opts"],[1355,12,1139,47],[1355,83,1139,43],[1355,85,1139,47],[1356,0,1140,2,"assert"],[1356,4,1140,2,"assert"],[1356,10,1140,8],[1356,11,1140,9],[1356,27,1140,8],[1356,29,1140,27,"node"],[1356,33,1140,8],[1356,35,1140,33,"opts"],[1356,39,1140,8],[1356,40,1140,2],[1357,0,1141,1],[1359,0,1143,0],[1359,11,1143,9,"assertTSIndexedAccessType"],[1359,36,1143,0],[1359,37,1143,35,"node"],[1359,41,1143,0],[1359,43,1143,52],[1360,0,1143,52],[1360,8,1143,41,"opts"],[1360,12,1143,52],[1360,83,1143,48],[1360,85,1143,52],[1361,0,1144,2,"assert"],[1361,4,1144,2,"assert"],[1361,10,1144,8],[1361,11,1144,9],[1361,32,1144,8],[1361,34,1144,32,"node"],[1361,38,1144,8],[1361,40,1144,38,"opts"],[1361,44,1144,8],[1361,45,1144,2],[1362,0,1145,1],[1364,0,1147,0],[1364,11,1147,9,"assertTSMappedType"],[1364,29,1147,0],[1364,30,1147,28,"node"],[1364,34,1147,0],[1364,36,1147,45],[1365,0,1147,45],[1365,8,1147,34,"opts"],[1365,12,1147,45],[1365,83,1147,41],[1365,85,1147,45],[1366,0,1148,2,"assert"],[1366,4,1148,2,"assert"],[1366,10,1148,8],[1366,11,1148,9],[1366,25,1148,8],[1366,27,1148,25,"node"],[1366,31,1148,8],[1366,33,1148,31,"opts"],[1366,37,1148,8],[1366,38,1148,2],[1367,0,1149,1],[1369,0,1151,0],[1369,11,1151,9,"assertTSLiteralType"],[1369,30,1151,0],[1369,31,1151,29,"node"],[1369,35,1151,0],[1369,37,1151,46],[1370,0,1151,46],[1370,8,1151,35,"opts"],[1370,12,1151,46],[1370,83,1151,42],[1370,85,1151,46],[1371,0,1152,2,"assert"],[1371,4,1152,2,"assert"],[1371,10,1152,8],[1371,11,1152,9],[1371,26,1152,8],[1371,28,1152,26,"node"],[1371,32,1152,8],[1371,34,1152,32,"opts"],[1371,38,1152,8],[1371,39,1152,2],[1372,0,1153,1],[1374,0,1155,0],[1374,11,1155,9,"assertTSExpressionWithTypeArguments"],[1374,46,1155,0],[1374,47,1155,45,"node"],[1374,51,1155,0],[1374,53,1155,62],[1375,0,1155,62],[1375,8,1155,51,"opts"],[1375,12,1155,62],[1375,83,1155,58],[1375,85,1155,62],[1376,0,1156,2,"assert"],[1376,4,1156,2,"assert"],[1376,10,1156,8],[1376,11,1156,9],[1376,42,1156,8],[1376,44,1156,42,"node"],[1376,48,1156,8],[1376,50,1156,48,"opts"],[1376,54,1156,8],[1376,55,1156,2],[1377,0,1157,1],[1379,0,1159,0],[1379,11,1159,9,"assertTSInterfaceDeclaration"],[1379,39,1159,0],[1379,40,1159,38,"node"],[1379,44,1159,0],[1379,46,1159,55],[1380,0,1159,55],[1380,8,1159,44,"opts"],[1380,12,1159,55],[1380,83,1159,51],[1380,85,1159,55],[1381,0,1160,2,"assert"],[1381,4,1160,2,"assert"],[1381,10,1160,8],[1381,11,1160,9],[1381,35,1160,8],[1381,37,1160,35,"node"],[1381,41,1160,8],[1381,43,1160,41,"opts"],[1381,47,1160,8],[1381,48,1160,2],[1382,0,1161,1],[1384,0,1163,0],[1384,11,1163,9,"assertTSInterfaceBody"],[1384,32,1163,0],[1384,33,1163,31,"node"],[1384,37,1163,0],[1384,39,1163,48],[1385,0,1163,48],[1385,8,1163,37,"opts"],[1385,12,1163,48],[1385,83,1163,44],[1385,85,1163,48],[1386,0,1164,2,"assert"],[1386,4,1164,2,"assert"],[1386,10,1164,8],[1386,11,1164,9],[1386,28,1164,8],[1386,30,1164,28,"node"],[1386,34,1164,8],[1386,36,1164,34,"opts"],[1386,40,1164,8],[1386,41,1164,2],[1387,0,1165,1],[1389,0,1167,0],[1389,11,1167,9,"assertTSTypeAliasDeclaration"],[1389,39,1167,0],[1389,40,1167,38,"node"],[1389,44,1167,0],[1389,46,1167,55],[1390,0,1167,55],[1390,8,1167,44,"opts"],[1390,12,1167,55],[1390,83,1167,51],[1390,85,1167,55],[1391,0,1168,2,"assert"],[1391,4,1168,2,"assert"],[1391,10,1168,8],[1391,11,1168,9],[1391,35,1168,8],[1391,37,1168,35,"node"],[1391,41,1168,8],[1391,43,1168,41,"opts"],[1391,47,1168,8],[1391,48,1168,2],[1392,0,1169,1],[1394,0,1171,0],[1394,11,1171,9,"assertTSAsExpression"],[1394,31,1171,0],[1394,32,1171,30,"node"],[1394,36,1171,0],[1394,38,1171,47],[1395,0,1171,47],[1395,8,1171,36,"opts"],[1395,12,1171,47],[1395,83,1171,43],[1395,85,1171,47],[1396,0,1172,2,"assert"],[1396,4,1172,2,"assert"],[1396,10,1172,8],[1396,11,1172,9],[1396,27,1172,8],[1396,29,1172,27,"node"],[1396,33,1172,8],[1396,35,1172,33,"opts"],[1396,39,1172,8],[1396,40,1172,2],[1397,0,1173,1],[1399,0,1175,0],[1399,11,1175,9,"assertTSTypeAssertion"],[1399,32,1175,0],[1399,33,1175,31,"node"],[1399,37,1175,0],[1399,39,1175,48],[1400,0,1175,48],[1400,8,1175,37,"opts"],[1400,12,1175,48],[1400,83,1175,44],[1400,85,1175,48],[1401,0,1176,2,"assert"],[1401,4,1176,2,"assert"],[1401,10,1176,8],[1401,11,1176,9],[1401,28,1176,8],[1401,30,1176,28,"node"],[1401,34,1176,8],[1401,36,1176,34,"opts"],[1401,40,1176,8],[1401,41,1176,2],[1402,0,1177,1],[1404,0,1179,0],[1404,11,1179,9,"assertTSEnumDeclaration"],[1404,34,1179,0],[1404,35,1179,33,"node"],[1404,39,1179,0],[1404,41,1179,50],[1405,0,1179,50],[1405,8,1179,39,"opts"],[1405,12,1179,50],[1405,83,1179,46],[1405,85,1179,50],[1406,0,1180,2,"assert"],[1406,4,1180,2,"assert"],[1406,10,1180,8],[1406,11,1180,9],[1406,30,1180,8],[1406,32,1180,30,"node"],[1406,36,1180,8],[1406,38,1180,36,"opts"],[1406,42,1180,8],[1406,43,1180,2],[1407,0,1181,1],[1409,0,1183,0],[1409,11,1183,9,"assertTSEnumMember"],[1409,29,1183,0],[1409,30,1183,28,"node"],[1409,34,1183,0],[1409,36,1183,45],[1410,0,1183,45],[1410,8,1183,34,"opts"],[1410,12,1183,45],[1410,83,1183,41],[1410,85,1183,45],[1411,0,1184,2,"assert"],[1411,4,1184,2,"assert"],[1411,10,1184,8],[1411,11,1184,9],[1411,25,1184,8],[1411,27,1184,25,"node"],[1411,31,1184,8],[1411,33,1184,31,"opts"],[1411,37,1184,8],[1411,38,1184,2],[1412,0,1185,1],[1414,0,1187,0],[1414,11,1187,9,"assertTSModuleDeclaration"],[1414,36,1187,0],[1414,37,1187,35,"node"],[1414,41,1187,0],[1414,43,1187,52],[1415,0,1187,52],[1415,8,1187,41,"opts"],[1415,12,1187,52],[1415,83,1187,48],[1415,85,1187,52],[1416,0,1188,2,"assert"],[1416,4,1188,2,"assert"],[1416,10,1188,8],[1416,11,1188,9],[1416,32,1188,8],[1416,34,1188,32,"node"],[1416,38,1188,8],[1416,40,1188,38,"opts"],[1416,44,1188,8],[1416,45,1188,2],[1417,0,1189,1],[1419,0,1191,0],[1419,11,1191,9,"assertTSModuleBlock"],[1419,30,1191,0],[1419,31,1191,29,"node"],[1419,35,1191,0],[1419,37,1191,46],[1420,0,1191,46],[1420,8,1191,35,"opts"],[1420,12,1191,46],[1420,83,1191,42],[1420,85,1191,46],[1421,0,1192,2,"assert"],[1421,4,1192,2,"assert"],[1421,10,1192,8],[1421,11,1192,9],[1421,26,1192,8],[1421,28,1192,26,"node"],[1421,32,1192,8],[1421,34,1192,32,"opts"],[1421,38,1192,8],[1421,39,1192,2],[1422,0,1193,1],[1424,0,1195,0],[1424,11,1195,9,"assertTSImportType"],[1424,29,1195,0],[1424,30,1195,28,"node"],[1424,34,1195,0],[1424,36,1195,45],[1425,0,1195,45],[1425,8,1195,34,"opts"],[1425,12,1195,45],[1425,83,1195,41],[1425,85,1195,45],[1426,0,1196,2,"assert"],[1426,4,1196,2,"assert"],[1426,10,1196,8],[1426,11,1196,9],[1426,25,1196,8],[1426,27,1196,25,"node"],[1426,31,1196,8],[1426,33,1196,31,"opts"],[1426,37,1196,8],[1426,38,1196,2],[1427,0,1197,1],[1429,0,1199,0],[1429,11,1199,9,"assertTSImportEqualsDeclaration"],[1429,42,1199,0],[1429,43,1199,41,"node"],[1429,47,1199,0],[1429,49,1199,58],[1430,0,1199,58],[1430,8,1199,47,"opts"],[1430,12,1199,58],[1430,83,1199,54],[1430,85,1199,58],[1431,0,1200,2,"assert"],[1431,4,1200,2,"assert"],[1431,10,1200,8],[1431,11,1200,9],[1431,38,1200,8],[1431,40,1200,38,"node"],[1431,44,1200,8],[1431,46,1200,44,"opts"],[1431,50,1200,8],[1431,51,1200,2],[1432,0,1201,1],[1434,0,1203,0],[1434,11,1203,9,"assertTSExternalModuleReference"],[1434,42,1203,0],[1434,43,1203,41,"node"],[1434,47,1203,0],[1434,49,1203,58],[1435,0,1203,58],[1435,8,1203,47,"opts"],[1435,12,1203,58],[1435,83,1203,54],[1435,85,1203,58],[1436,0,1204,2,"assert"],[1436,4,1204,2,"assert"],[1436,10,1204,8],[1436,11,1204,9],[1436,38,1204,8],[1436,40,1204,38,"node"],[1436,44,1204,8],[1436,46,1204,44,"opts"],[1436,50,1204,8],[1436,51,1204,2],[1437,0,1205,1],[1439,0,1207,0],[1439,11,1207,9,"assertTSNonNullExpression"],[1439,36,1207,0],[1439,37,1207,35,"node"],[1439,41,1207,0],[1439,43,1207,52],[1440,0,1207,52],[1440,8,1207,41,"opts"],[1440,12,1207,52],[1440,83,1207,48],[1440,85,1207,52],[1441,0,1208,2,"assert"],[1441,4,1208,2,"assert"],[1441,10,1208,8],[1441,11,1208,9],[1441,32,1208,8],[1441,34,1208,32,"node"],[1441,38,1208,8],[1441,40,1208,38,"opts"],[1441,44,1208,8],[1441,45,1208,2],[1442,0,1209,1],[1444,0,1211,0],[1444,11,1211,9,"assertTSExportAssignment"],[1444,35,1211,0],[1444,36,1211,34,"node"],[1444,40,1211,0],[1444,42,1211,51],[1445,0,1211,51],[1445,8,1211,40,"opts"],[1445,12,1211,51],[1445,83,1211,47],[1445,85,1211,51],[1446,0,1212,2,"assert"],[1446,4,1212,2,"assert"],[1446,10,1212,8],[1446,11,1212,9],[1446,31,1212,8],[1446,33,1212,31,"node"],[1446,37,1212,8],[1446,39,1212,37,"opts"],[1446,43,1212,8],[1446,44,1212,2],[1447,0,1213,1],[1449,0,1215,0],[1449,11,1215,9,"assertTSNamespaceExportDeclaration"],[1449,45,1215,0],[1449,46,1215,44,"node"],[1449,50,1215,0],[1449,52,1215,61],[1450,0,1215,61],[1450,8,1215,50,"opts"],[1450,12,1215,61],[1450,83,1215,57],[1450,85,1215,61],[1451,0,1216,2,"assert"],[1451,4,1216,2,"assert"],[1451,10,1216,8],[1451,11,1216,9],[1451,41,1216,8],[1451,43,1216,41,"node"],[1451,47,1216,8],[1451,49,1216,47,"opts"],[1451,53,1216,8],[1451,54,1216,2],[1452,0,1217,1],[1454,0,1219,0],[1454,11,1219,9,"assertTSTypeAnnotation"],[1454,33,1219,0],[1454,34,1219,32,"node"],[1454,38,1219,0],[1454,40,1219,49],[1455,0,1219,49],[1455,8,1219,38,"opts"],[1455,12,1219,49],[1455,83,1219,45],[1455,85,1219,49],[1456,0,1220,2,"assert"],[1456,4,1220,2,"assert"],[1456,10,1220,8],[1456,11,1220,9],[1456,29,1220,8],[1456,31,1220,29,"node"],[1456,35,1220,8],[1456,37,1220,35,"opts"],[1456,41,1220,8],[1456,42,1220,2],[1457,0,1221,1],[1459,0,1223,0],[1459,11,1223,9,"assertTSTypeParameterInstantiation"],[1459,45,1223,0],[1459,46,1223,44,"node"],[1459,50,1223,0],[1459,52,1223,61],[1460,0,1223,61],[1460,8,1223,50,"opts"],[1460,12,1223,61],[1460,83,1223,57],[1460,85,1223,61],[1461,0,1224,2,"assert"],[1461,4,1224,2,"assert"],[1461,10,1224,8],[1461,11,1224,9],[1461,41,1224,8],[1461,43,1224,41,"node"],[1461,47,1224,8],[1461,49,1224,47,"opts"],[1461,53,1224,8],[1461,54,1224,2],[1462,0,1225,1],[1464,0,1227,0],[1464,11,1227,9,"assertTSTypeParameterDeclaration"],[1464,43,1227,0],[1464,44,1227,42,"node"],[1464,48,1227,0],[1464,50,1227,59],[1465,0,1227,59],[1465,8,1227,48,"opts"],[1465,12,1227,59],[1465,83,1227,55],[1465,85,1227,59],[1466,0,1228,2,"assert"],[1466,4,1228,2,"assert"],[1466,10,1228,8],[1466,11,1228,9],[1466,39,1228,8],[1466,41,1228,39,"node"],[1466,45,1228,8],[1466,47,1228,45,"opts"],[1466,51,1228,8],[1466,52,1228,2],[1467,0,1229,1],[1469,0,1231,0],[1469,11,1231,9,"assertTSTypeParameter"],[1469,32,1231,0],[1469,33,1231,31,"node"],[1469,37,1231,0],[1469,39,1231,48],[1470,0,1231,48],[1470,8,1231,37,"opts"],[1470,12,1231,48],[1470,83,1231,44],[1470,85,1231,48],[1471,0,1232,2,"assert"],[1471,4,1232,2,"assert"],[1471,10,1232,8],[1471,11,1232,9],[1471,28,1232,8],[1471,30,1232,28,"node"],[1471,34,1232,8],[1471,36,1232,34,"opts"],[1471,40,1232,8],[1471,41,1232,2],[1472,0,1233,1],[1474,0,1235,0],[1474,11,1235,9,"assertExpression"],[1474,27,1235,0],[1474,28,1235,26,"node"],[1474,32,1235,0],[1474,34,1235,43],[1475,0,1235,43],[1475,8,1235,32,"opts"],[1475,12,1235,43],[1475,83,1235,39],[1475,85,1235,43],[1476,0,1236,2,"assert"],[1476,4,1236,2,"assert"],[1476,10,1236,8],[1476,11,1236,9],[1476,23,1236,8],[1476,25,1236,23,"node"],[1476,29,1236,8],[1476,31,1236,29,"opts"],[1476,35,1236,8],[1476,36,1236,2],[1477,0,1237,1],[1479,0,1239,0],[1479,11,1239,9,"assertBinary"],[1479,23,1239,0],[1479,24,1239,22,"node"],[1479,28,1239,0],[1479,30,1239,39],[1480,0,1239,39],[1480,8,1239,28,"opts"],[1480,12,1239,39],[1480,83,1239,35],[1480,85,1239,39],[1481,0,1240,2,"assert"],[1481,4,1240,2,"assert"],[1481,10,1240,8],[1481,11,1240,9],[1481,19,1240,8],[1481,21,1240,19,"node"],[1481,25,1240,8],[1481,27,1240,25,"opts"],[1481,31,1240,8],[1481,32,1240,2],[1482,0,1241,1],[1484,0,1243,0],[1484,11,1243,9,"assertScopable"],[1484,25,1243,0],[1484,26,1243,24,"node"],[1484,30,1243,0],[1484,32,1243,41],[1485,0,1243,41],[1485,8,1243,30,"opts"],[1485,12,1243,41],[1485,83,1243,37],[1485,85,1243,41],[1486,0,1244,2,"assert"],[1486,4,1244,2,"assert"],[1486,10,1244,8],[1486,11,1244,9],[1486,21,1244,8],[1486,23,1244,21,"node"],[1486,27,1244,8],[1486,29,1244,27,"opts"],[1486,33,1244,8],[1486,34,1244,2],[1487,0,1245,1],[1489,0,1247,0],[1489,11,1247,9,"assertBlockParent"],[1489,28,1247,0],[1489,29,1247,27,"node"],[1489,33,1247,0],[1489,35,1247,44],[1490,0,1247,44],[1490,8,1247,33,"opts"],[1490,12,1247,44],[1490,83,1247,40],[1490,85,1247,44],[1491,0,1248,2,"assert"],[1491,4,1248,2,"assert"],[1491,10,1248,8],[1491,11,1248,9],[1491,24,1248,8],[1491,26,1248,24,"node"],[1491,30,1248,8],[1491,32,1248,30,"opts"],[1491,36,1248,8],[1491,37,1248,2],[1492,0,1249,1],[1494,0,1251,0],[1494,11,1251,9,"assertBlock"],[1494,22,1251,0],[1494,23,1251,21,"node"],[1494,27,1251,0],[1494,29,1251,38],[1495,0,1251,38],[1495,8,1251,27,"opts"],[1495,12,1251,38],[1495,83,1251,34],[1495,85,1251,38],[1496,0,1252,2,"assert"],[1496,4,1252,2,"assert"],[1496,10,1252,8],[1496,11,1252,9],[1496,18,1252,8],[1496,20,1252,18,"node"],[1496,24,1252,8],[1496,26,1252,24,"opts"],[1496,30,1252,8],[1496,31,1252,2],[1497,0,1253,1],[1499,0,1255,0],[1499,11,1255,9,"assertStatement"],[1499,26,1255,0],[1499,27,1255,25,"node"],[1499,31,1255,0],[1499,33,1255,42],[1500,0,1255,42],[1500,8,1255,31,"opts"],[1500,12,1255,42],[1500,83,1255,38],[1500,85,1255,42],[1501,0,1256,2,"assert"],[1501,4,1256,2,"assert"],[1501,10,1256,8],[1501,11,1256,9],[1501,22,1256,8],[1501,24,1256,22,"node"],[1501,28,1256,8],[1501,30,1256,28,"opts"],[1501,34,1256,8],[1501,35,1256,2],[1502,0,1257,1],[1504,0,1259,0],[1504,11,1259,9,"assertTerminatorless"],[1504,31,1259,0],[1504,32,1259,30,"node"],[1504,36,1259,0],[1504,38,1259,47],[1505,0,1259,47],[1505,8,1259,36,"opts"],[1505,12,1259,47],[1505,83,1259,43],[1505,85,1259,47],[1506,0,1260,2,"assert"],[1506,4,1260,2,"assert"],[1506,10,1260,8],[1506,11,1260,9],[1506,27,1260,8],[1506,29,1260,27,"node"],[1506,33,1260,8],[1506,35,1260,33,"opts"],[1506,39,1260,8],[1506,40,1260,2],[1507,0,1261,1],[1509,0,1263,0],[1509,11,1263,9,"assertCompletionStatement"],[1509,36,1263,0],[1509,37,1263,35,"node"],[1509,41,1263,0],[1509,43,1263,52],[1510,0,1263,52],[1510,8,1263,41,"opts"],[1510,12,1263,52],[1510,83,1263,48],[1510,85,1263,52],[1511,0,1264,2,"assert"],[1511,4,1264,2,"assert"],[1511,10,1264,8],[1511,11,1264,9],[1511,32,1264,8],[1511,34,1264,32,"node"],[1511,38,1264,8],[1511,40,1264,38,"opts"],[1511,44,1264,8],[1511,45,1264,2],[1512,0,1265,1],[1514,0,1267,0],[1514,11,1267,9,"assertConditional"],[1514,28,1267,0],[1514,29,1267,27,"node"],[1514,33,1267,0],[1514,35,1267,44],[1515,0,1267,44],[1515,8,1267,33,"opts"],[1515,12,1267,44],[1515,83,1267,40],[1515,85,1267,44],[1516,0,1268,2,"assert"],[1516,4,1268,2,"assert"],[1516,10,1268,8],[1516,11,1268,9],[1516,24,1268,8],[1516,26,1268,24,"node"],[1516,30,1268,8],[1516,32,1268,30,"opts"],[1516,36,1268,8],[1516,37,1268,2],[1517,0,1269,1],[1519,0,1271,0],[1519,11,1271,9,"assertLoop"],[1519,21,1271,0],[1519,22,1271,20,"node"],[1519,26,1271,0],[1519,28,1271,37],[1520,0,1271,37],[1520,8,1271,26,"opts"],[1520,12,1271,37],[1520,83,1271,33],[1520,85,1271,37],[1521,0,1272,2,"assert"],[1521,4,1272,2,"assert"],[1521,10,1272,8],[1521,11,1272,9],[1521,17,1272,8],[1521,19,1272,17,"node"],[1521,23,1272,8],[1521,25,1272,23,"opts"],[1521,29,1272,8],[1521,30,1272,2],[1522,0,1273,1],[1524,0,1275,0],[1524,11,1275,9,"assertWhile"],[1524,22,1275,0],[1524,23,1275,21,"node"],[1524,27,1275,0],[1524,29,1275,38],[1525,0,1275,38],[1525,8,1275,27,"opts"],[1525,12,1275,38],[1525,83,1275,34],[1525,85,1275,38],[1526,0,1276,2,"assert"],[1526,4,1276,2,"assert"],[1526,10,1276,8],[1526,11,1276,9],[1526,18,1276,8],[1526,20,1276,18,"node"],[1526,24,1276,8],[1526,26,1276,24,"opts"],[1526,30,1276,8],[1526,31,1276,2],[1527,0,1277,1],[1529,0,1279,0],[1529,11,1279,9,"assertExpressionWrapper"],[1529,34,1279,0],[1529,35,1279,33,"node"],[1529,39,1279,0],[1529,41,1279,50],[1530,0,1279,50],[1530,8,1279,39,"opts"],[1530,12,1279,50],[1530,83,1279,46],[1530,85,1279,50],[1531,0,1280,2,"assert"],[1531,4,1280,2,"assert"],[1531,10,1280,8],[1531,11,1280,9],[1531,30,1280,8],[1531,32,1280,30,"node"],[1531,36,1280,8],[1531,38,1280,36,"opts"],[1531,42,1280,8],[1531,43,1280,2],[1532,0,1281,1],[1534,0,1283,0],[1534,11,1283,9,"assertFor"],[1534,20,1283,0],[1534,21,1283,19,"node"],[1534,25,1283,0],[1534,27,1283,36],[1535,0,1283,36],[1535,8,1283,25,"opts"],[1535,12,1283,36],[1535,83,1283,32],[1535,85,1283,36],[1536,0,1284,2,"assert"],[1536,4,1284,2,"assert"],[1536,10,1284,8],[1536,11,1284,9],[1536,16,1284,8],[1536,18,1284,16,"node"],[1536,22,1284,8],[1536,24,1284,22,"opts"],[1536,28,1284,8],[1536,29,1284,2],[1537,0,1285,1],[1539,0,1287,0],[1539,11,1287,9,"assertForXStatement"],[1539,30,1287,0],[1539,31,1287,29,"node"],[1539,35,1287,0],[1539,37,1287,46],[1540,0,1287,46],[1540,8,1287,35,"opts"],[1540,12,1287,46],[1540,83,1287,42],[1540,85,1287,46],[1541,0,1288,2,"assert"],[1541,4,1288,2,"assert"],[1541,10,1288,8],[1541,11,1288,9],[1541,26,1288,8],[1541,28,1288,26,"node"],[1541,32,1288,8],[1541,34,1288,32,"opts"],[1541,38,1288,8],[1541,39,1288,2],[1542,0,1289,1],[1544,0,1291,0],[1544,11,1291,9,"assertFunction"],[1544,25,1291,0],[1544,26,1291,24,"node"],[1544,30,1291,0],[1544,32,1291,41],[1545,0,1291,41],[1545,8,1291,30,"opts"],[1545,12,1291,41],[1545,83,1291,37],[1545,85,1291,41],[1546,0,1292,2,"assert"],[1546,4,1292,2,"assert"],[1546,10,1292,8],[1546,11,1292,9],[1546,21,1292,8],[1546,23,1292,21,"node"],[1546,27,1292,8],[1546,29,1292,27,"opts"],[1546,33,1292,8],[1546,34,1292,2],[1547,0,1293,1],[1549,0,1295,0],[1549,11,1295,9,"assertFunctionParent"],[1549,31,1295,0],[1549,32,1295,30,"node"],[1549,36,1295,0],[1549,38,1295,47],[1550,0,1295,47],[1550,8,1295,36,"opts"],[1550,12,1295,47],[1550,83,1295,43],[1550,85,1295,47],[1551,0,1296,2,"assert"],[1551,4,1296,2,"assert"],[1551,10,1296,8],[1551,11,1296,9],[1551,27,1296,8],[1551,29,1296,27,"node"],[1551,33,1296,8],[1551,35,1296,33,"opts"],[1551,39,1296,8],[1551,40,1296,2],[1552,0,1297,1],[1554,0,1299,0],[1554,11,1299,9,"assertPureish"],[1554,24,1299,0],[1554,25,1299,23,"node"],[1554,29,1299,0],[1554,31,1299,40],[1555,0,1299,40],[1555,8,1299,29,"opts"],[1555,12,1299,40],[1555,83,1299,36],[1555,85,1299,40],[1556,0,1300,2,"assert"],[1556,4,1300,2,"assert"],[1556,10,1300,8],[1556,11,1300,9],[1556,20,1300,8],[1556,22,1300,20,"node"],[1556,26,1300,8],[1556,28,1300,26,"opts"],[1556,32,1300,8],[1556,33,1300,2],[1557,0,1301,1],[1559,0,1303,0],[1559,11,1303,9,"assertDeclaration"],[1559,28,1303,0],[1559,29,1303,27,"node"],[1559,33,1303,0],[1559,35,1303,44],[1560,0,1303,44],[1560,8,1303,33,"opts"],[1560,12,1303,44],[1560,83,1303,40],[1560,85,1303,44],[1561,0,1304,2,"assert"],[1561,4,1304,2,"assert"],[1561,10,1304,8],[1561,11,1304,9],[1561,24,1304,8],[1561,26,1304,24,"node"],[1561,30,1304,8],[1561,32,1304,30,"opts"],[1561,36,1304,8],[1561,37,1304,2],[1562,0,1305,1],[1564,0,1307,0],[1564,11,1307,9,"assertPatternLike"],[1564,28,1307,0],[1564,29,1307,27,"node"],[1564,33,1307,0],[1564,35,1307,44],[1565,0,1307,44],[1565,8,1307,33,"opts"],[1565,12,1307,44],[1565,83,1307,40],[1565,85,1307,44],[1566,0,1308,2,"assert"],[1566,4,1308,2,"assert"],[1566,10,1308,8],[1566,11,1308,9],[1566,24,1308,8],[1566,26,1308,24,"node"],[1566,30,1308,8],[1566,32,1308,30,"opts"],[1566,36,1308,8],[1566,37,1308,2],[1567,0,1309,1],[1569,0,1311,0],[1569,11,1311,9,"assertLVal"],[1569,21,1311,0],[1569,22,1311,20,"node"],[1569,26,1311,0],[1569,28,1311,37],[1570,0,1311,37],[1570,8,1311,26,"opts"],[1570,12,1311,37],[1570,83,1311,33],[1570,85,1311,37],[1571,0,1312,2,"assert"],[1571,4,1312,2,"assert"],[1571,10,1312,8],[1571,11,1312,9],[1571,17,1312,8],[1571,19,1312,17,"node"],[1571,23,1312,8],[1571,25,1312,23,"opts"],[1571,29,1312,8],[1571,30,1312,2],[1572,0,1313,1],[1574,0,1315,0],[1574,11,1315,9,"assertTSEntityName"],[1574,29,1315,0],[1574,30,1315,28,"node"],[1574,34,1315,0],[1574,36,1315,45],[1575,0,1315,45],[1575,8,1315,34,"opts"],[1575,12,1315,45],[1575,83,1315,41],[1575,85,1315,45],[1576,0,1316,2,"assert"],[1576,4,1316,2,"assert"],[1576,10,1316,8],[1576,11,1316,9],[1576,25,1316,8],[1576,27,1316,25,"node"],[1576,31,1316,8],[1576,33,1316,31,"opts"],[1576,37,1316,8],[1576,38,1316,2],[1577,0,1317,1],[1579,0,1319,0],[1579,11,1319,9,"assertLiteral"],[1579,24,1319,0],[1579,25,1319,23,"node"],[1579,29,1319,0],[1579,31,1319,40],[1580,0,1319,40],[1580,8,1319,29,"opts"],[1580,12,1319,40],[1580,83,1319,36],[1580,85,1319,40],[1581,0,1320,2,"assert"],[1581,4,1320,2,"assert"],[1581,10,1320,8],[1581,11,1320,9],[1581,20,1320,8],[1581,22,1320,20,"node"],[1581,26,1320,8],[1581,28,1320,26,"opts"],[1581,32,1320,8],[1581,33,1320,2],[1582,0,1321,1],[1584,0,1323,0],[1584,11,1323,9,"assertImmutable"],[1584,26,1323,0],[1584,27,1323,25,"node"],[1584,31,1323,0],[1584,33,1323,42],[1585,0,1323,42],[1585,8,1323,31,"opts"],[1585,12,1323,42],[1585,83,1323,38],[1585,85,1323,42],[1586,0,1324,2,"assert"],[1586,4,1324,2,"assert"],[1586,10,1324,8],[1586,11,1324,9],[1586,22,1324,8],[1586,24,1324,22,"node"],[1586,28,1324,8],[1586,30,1324,28,"opts"],[1586,34,1324,8],[1586,35,1324,2],[1587,0,1325,1],[1589,0,1327,0],[1589,11,1327,9,"assertUserWhitespacable"],[1589,34,1327,0],[1589,35,1327,33,"node"],[1589,39,1327,0],[1589,41,1327,50],[1590,0,1327,50],[1590,8,1327,39,"opts"],[1590,12,1327,50],[1590,83,1327,46],[1590,85,1327,50],[1591,0,1328,2,"assert"],[1591,4,1328,2,"assert"],[1591,10,1328,8],[1591,11,1328,9],[1591,30,1328,8],[1591,32,1328,30,"node"],[1591,36,1328,8],[1591,38,1328,36,"opts"],[1591,42,1328,8],[1591,43,1328,2],[1592,0,1329,1],[1594,0,1331,0],[1594,11,1331,9,"assertMethod"],[1594,23,1331,0],[1594,24,1331,22,"node"],[1594,28,1331,0],[1594,30,1331,39],[1595,0,1331,39],[1595,8,1331,28,"opts"],[1595,12,1331,39],[1595,83,1331,35],[1595,85,1331,39],[1596,0,1332,2,"assert"],[1596,4,1332,2,"assert"],[1596,10,1332,8],[1596,11,1332,9],[1596,19,1332,8],[1596,21,1332,19,"node"],[1596,25,1332,8],[1596,27,1332,25,"opts"],[1596,31,1332,8],[1596,32,1332,2],[1597,0,1333,1],[1599,0,1335,0],[1599,11,1335,9,"assertObjectMember"],[1599,29,1335,0],[1599,30,1335,28,"node"],[1599,34,1335,0],[1599,36,1335,45],[1600,0,1335,45],[1600,8,1335,34,"opts"],[1600,12,1335,45],[1600,83,1335,41],[1600,85,1335,45],[1601,0,1336,2,"assert"],[1601,4,1336,2,"assert"],[1601,10,1336,8],[1601,11,1336,9],[1601,25,1336,8],[1601,27,1336,25,"node"],[1601,31,1336,8],[1601,33,1336,31,"opts"],[1601,37,1336,8],[1601,38,1336,2],[1602,0,1337,1],[1604,0,1339,0],[1604,11,1339,9,"assertProperty"],[1604,25,1339,0],[1604,26,1339,24,"node"],[1604,30,1339,0],[1604,32,1339,41],[1605,0,1339,41],[1605,8,1339,30,"opts"],[1605,12,1339,41],[1605,83,1339,37],[1605,85,1339,41],[1606,0,1340,2,"assert"],[1606,4,1340,2,"assert"],[1606,10,1340,8],[1606,11,1340,9],[1606,21,1340,8],[1606,23,1340,21,"node"],[1606,27,1340,8],[1606,29,1340,27,"opts"],[1606,33,1340,8],[1606,34,1340,2],[1607,0,1341,1],[1609,0,1343,0],[1609,11,1343,9,"assertUnaryLike"],[1609,26,1343,0],[1609,27,1343,25,"node"],[1609,31,1343,0],[1609,33,1343,42],[1610,0,1343,42],[1610,8,1343,31,"opts"],[1610,12,1343,42],[1610,83,1343,38],[1610,85,1343,42],[1611,0,1344,2,"assert"],[1611,4,1344,2,"assert"],[1611,10,1344,8],[1611,11,1344,9],[1611,22,1344,8],[1611,24,1344,22,"node"],[1611,28,1344,8],[1611,30,1344,28,"opts"],[1611,34,1344,8],[1611,35,1344,2],[1612,0,1345,1],[1614,0,1347,0],[1614,11,1347,9,"assertPattern"],[1614,24,1347,0],[1614,25,1347,23,"node"],[1614,29,1347,0],[1614,31,1347,40],[1615,0,1347,40],[1615,8,1347,29,"opts"],[1615,12,1347,40],[1615,83,1347,36],[1615,85,1347,40],[1616,0,1348,2,"assert"],[1616,4,1348,2,"assert"],[1616,10,1348,8],[1616,11,1348,9],[1616,20,1348,8],[1616,22,1348,20,"node"],[1616,26,1348,8],[1616,28,1348,26,"opts"],[1616,32,1348,8],[1616,33,1348,2],[1617,0,1349,1],[1619,0,1351,0],[1619,11,1351,9,"assertClass"],[1619,22,1351,0],[1619,23,1351,21,"node"],[1619,27,1351,0],[1619,29,1351,38],[1620,0,1351,38],[1620,8,1351,27,"opts"],[1620,12,1351,38],[1620,83,1351,34],[1620,85,1351,38],[1621,0,1352,2,"assert"],[1621,4,1352,2,"assert"],[1621,10,1352,8],[1621,11,1352,9],[1621,18,1352,8],[1621,20,1352,18,"node"],[1621,24,1352,8],[1621,26,1352,24,"opts"],[1621,30,1352,8],[1621,31,1352,2],[1622,0,1353,1],[1624,0,1355,0],[1624,11,1355,9,"assertModuleDeclaration"],[1624,34,1355,0],[1624,35,1355,33,"node"],[1624,39,1355,0],[1624,41,1355,50],[1625,0,1355,50],[1625,8,1355,39,"opts"],[1625,12,1355,50],[1625,83,1355,46],[1625,85,1355,50],[1626,0,1356,2,"assert"],[1626,4,1356,2,"assert"],[1626,10,1356,8],[1626,11,1356,9],[1626,30,1356,8],[1626,32,1356,30,"node"],[1626,36,1356,8],[1626,38,1356,36,"opts"],[1626,42,1356,8],[1626,43,1356,2],[1627,0,1357,1],[1629,0,1359,0],[1629,11,1359,9,"assertExportDeclaration"],[1629,34,1359,0],[1629,35,1359,33,"node"],[1629,39,1359,0],[1629,41,1359,50],[1630,0,1359,50],[1630,8,1359,39,"opts"],[1630,12,1359,50],[1630,83,1359,46],[1630,85,1359,50],[1631,0,1360,2,"assert"],[1631,4,1360,2,"assert"],[1631,10,1360,8],[1631,11,1360,9],[1631,30,1360,8],[1631,32,1360,30,"node"],[1631,36,1360,8],[1631,38,1360,36,"opts"],[1631,42,1360,8],[1631,43,1360,2],[1632,0,1361,1],[1634,0,1363,0],[1634,11,1363,9,"assertModuleSpecifier"],[1634,32,1363,0],[1634,33,1363,31,"node"],[1634,37,1363,0],[1634,39,1363,48],[1635,0,1363,48],[1635,8,1363,37,"opts"],[1635,12,1363,48],[1635,83,1363,44],[1635,85,1363,48],[1636,0,1364,2,"assert"],[1636,4,1364,2,"assert"],[1636,10,1364,8],[1636,11,1364,9],[1636,28,1364,8],[1636,30,1364,28,"node"],[1636,34,1364,8],[1636,36,1364,34,"opts"],[1636,40,1364,8],[1636,41,1364,2],[1637,0,1365,1],[1639,0,1367,0],[1639,11,1367,9,"assertFlow"],[1639,21,1367,0],[1639,22,1367,20,"node"],[1639,26,1367,0],[1639,28,1367,37],[1640,0,1367,37],[1640,8,1367,26,"opts"],[1640,12,1367,37],[1640,83,1367,33],[1640,85,1367,37],[1641,0,1368,2,"assert"],[1641,4,1368,2,"assert"],[1641,10,1368,8],[1641,11,1368,9],[1641,17,1368,8],[1641,19,1368,17,"node"],[1641,23,1368,8],[1641,25,1368,23,"opts"],[1641,29,1368,8],[1641,30,1368,2],[1642,0,1369,1],[1644,0,1371,0],[1644,11,1371,9,"assertFlowType"],[1644,25,1371,0],[1644,26,1371,24,"node"],[1644,30,1371,0],[1644,32,1371,41],[1645,0,1371,41],[1645,8,1371,30,"opts"],[1645,12,1371,41],[1645,83,1371,37],[1645,85,1371,41],[1646,0,1372,2,"assert"],[1646,4,1372,2,"assert"],[1646,10,1372,8],[1646,11,1372,9],[1646,21,1372,8],[1646,23,1372,21,"node"],[1646,27,1372,8],[1646,29,1372,27,"opts"],[1646,33,1372,8],[1646,34,1372,2],[1647,0,1373,1],[1649,0,1375,0],[1649,11,1375,9,"assertFlowBaseAnnotation"],[1649,35,1375,0],[1649,36,1375,34,"node"],[1649,40,1375,0],[1649,42,1375,51],[1650,0,1375,51],[1650,8,1375,40,"opts"],[1650,12,1375,51],[1650,83,1375,47],[1650,85,1375,51],[1651,0,1376,2,"assert"],[1651,4,1376,2,"assert"],[1651,10,1376,8],[1651,11,1376,9],[1651,31,1376,8],[1651,33,1376,31,"node"],[1651,37,1376,8],[1651,39,1376,37,"opts"],[1651,43,1376,8],[1651,44,1376,2],[1652,0,1377,1],[1654,0,1379,0],[1654,11,1379,9,"assertFlowDeclaration"],[1654,32,1379,0],[1654,33,1379,31,"node"],[1654,37,1379,0],[1654,39,1379,48],[1655,0,1379,48],[1655,8,1379,37,"opts"],[1655,12,1379,48],[1655,83,1379,44],[1655,85,1379,48],[1656,0,1380,2,"assert"],[1656,4,1380,2,"assert"],[1656,10,1380,8],[1656,11,1380,9],[1656,28,1380,8],[1656,30,1380,28,"node"],[1656,34,1380,8],[1656,36,1380,34,"opts"],[1656,40,1380,8],[1656,41,1380,2],[1657,0,1381,1],[1659,0,1383,0],[1659,11,1383,9,"assertFlowPredicate"],[1659,30,1383,0],[1659,31,1383,29,"node"],[1659,35,1383,0],[1659,37,1383,46],[1660,0,1383,46],[1660,8,1383,35,"opts"],[1660,12,1383,46],[1660,83,1383,42],[1660,85,1383,46],[1661,0,1384,2,"assert"],[1661,4,1384,2,"assert"],[1661,10,1384,8],[1661,11,1384,9],[1661,26,1384,8],[1661,28,1384,26,"node"],[1661,32,1384,8],[1661,34,1384,32,"opts"],[1661,38,1384,8],[1661,39,1384,2],[1662,0,1385,1],[1664,0,1387,0],[1664,11,1387,9,"assertEnumBody"],[1664,25,1387,0],[1664,26,1387,24,"node"],[1664,30,1387,0],[1664,32,1387,41],[1665,0,1387,41],[1665,8,1387,30,"opts"],[1665,12,1387,41],[1665,83,1387,37],[1665,85,1387,41],[1666,0,1388,2,"assert"],[1666,4,1388,2,"assert"],[1666,10,1388,8],[1666,11,1388,9],[1666,21,1388,8],[1666,23,1388,21,"node"],[1666,27,1388,8],[1666,29,1388,27,"opts"],[1666,33,1388,8],[1666,34,1388,2],[1667,0,1389,1],[1669,0,1391,0],[1669,11,1391,9,"assertEnumMember"],[1669,27,1391,0],[1669,28,1391,26,"node"],[1669,32,1391,0],[1669,34,1391,43],[1670,0,1391,43],[1670,8,1391,32,"opts"],[1670,12,1391,43],[1670,83,1391,39],[1670,85,1391,43],[1671,0,1392,2,"assert"],[1671,4,1392,2,"assert"],[1671,10,1392,8],[1671,11,1392,9],[1671,23,1392,8],[1671,25,1392,23,"node"],[1671,29,1392,8],[1671,31,1392,29,"opts"],[1671,35,1392,8],[1671,36,1392,2],[1672,0,1393,1],[1674,0,1395,0],[1674,11,1395,9,"assertJSX"],[1674,20,1395,0],[1674,21,1395,19,"node"],[1674,25,1395,0],[1674,27,1395,36],[1675,0,1395,36],[1675,8,1395,25,"opts"],[1675,12,1395,36],[1675,83,1395,32],[1675,85,1395,36],[1676,0,1396,2,"assert"],[1676,4,1396,2,"assert"],[1676,10,1396,8],[1676,11,1396,9],[1676,16,1396,8],[1676,18,1396,16,"node"],[1676,22,1396,8],[1676,24,1396,22,"opts"],[1676,28,1396,8],[1676,29,1396,2],[1677,0,1397,1],[1679,0,1399,0],[1679,11,1399,9,"assertPrivate"],[1679,24,1399,0],[1679,25,1399,23,"node"],[1679,29,1399,0],[1679,31,1399,40],[1680,0,1399,40],[1680,8,1399,29,"opts"],[1680,12,1399,40],[1680,83,1399,36],[1680,85,1399,40],[1681,0,1400,2,"assert"],[1681,4,1400,2,"assert"],[1681,10,1400,8],[1681,11,1400,9],[1681,20,1400,8],[1681,22,1400,20,"node"],[1681,26,1400,8],[1681,28,1400,26,"opts"],[1681,32,1400,8],[1681,33,1400,2],[1682,0,1401,1],[1684,0,1403,0],[1684,11,1403,9,"assertTSTypeElement"],[1684,30,1403,0],[1684,31,1403,29,"node"],[1684,35,1403,0],[1684,37,1403,46],[1685,0,1403,46],[1685,8,1403,35,"opts"],[1685,12,1403,46],[1685,83,1403,42],[1685,85,1403,46],[1686,0,1404,2,"assert"],[1686,4,1404,2,"assert"],[1686,10,1404,8],[1686,11,1404,9],[1686,26,1404,8],[1686,28,1404,26,"node"],[1686,32,1404,8],[1686,34,1404,32,"opts"],[1686,38,1404,8],[1686,39,1404,2],[1687,0,1405,1],[1689,0,1407,0],[1689,11,1407,9,"assertTSType"],[1689,23,1407,0],[1689,24,1407,22,"node"],[1689,28,1407,0],[1689,30,1407,39],[1690,0,1407,39],[1690,8,1407,28,"opts"],[1690,12,1407,39],[1690,83,1407,35],[1690,85,1407,39],[1691,0,1408,2,"assert"],[1691,4,1408,2,"assert"],[1691,10,1408,8],[1691,11,1408,9],[1691,19,1408,8],[1691,21,1408,19,"node"],[1691,25,1408,8],[1691,27,1408,25,"opts"],[1691,31,1408,8],[1691,32,1408,2],[1692,0,1409,1],[1694,0,1411,0],[1694,11,1411,9,"assertNumberLiteral"],[1694,30,1411,0],[1694,31,1411,29,"node"],[1694,35,1411,0],[1694,37,1411,35,"opts"],[1694,41,1411,0],[1694,43,1411,41],[1695,0,1412,2,"console"],[1695,4,1412,2,"console"],[1695,11,1412,9],[1695,12,1412,10,"trace"],[1695,17,1412,2],[1695,18,1412,16],[1695,82,1412,2],[1696,0,1413,2,"assert"],[1696,4,1413,2,"assert"],[1696,10,1413,8],[1696,11,1413,9],[1696,26,1413,8],[1696,28,1413,26,"node"],[1696,32,1413,8],[1696,34,1413,32,"opts"],[1696,38,1413,8],[1696,39,1413,2],[1697,0,1414,1],[1699,0,1416,0],[1699,11,1416,9,"assertRegexLiteral"],[1699,29,1416,0],[1699,30,1416,28,"node"],[1699,34,1416,0],[1699,36,1416,34,"opts"],[1699,40,1416,0],[1699,42,1416,40],[1700,0,1417,2,"console"],[1700,4,1417,2,"console"],[1700,11,1417,9],[1700,12,1417,10,"trace"],[1700,17,1417,2],[1700,18,1417,16],[1700,80,1417,2],[1701,0,1418,2,"assert"],[1701,4,1418,2,"assert"],[1701,10,1418,8],[1701,11,1418,9],[1701,25,1418,8],[1701,27,1418,25,"node"],[1701,31,1418,8],[1701,33,1418,31,"opts"],[1701,37,1418,8],[1701,38,1418,2],[1702,0,1419,1],[1704,0,1421,0],[1704,11,1421,9,"assertRestProperty"],[1704,29,1421,0],[1704,30,1421,28,"node"],[1704,34,1421,0],[1704,36,1421,34,"opts"],[1704,40,1421,0],[1704,42,1421,40],[1705,0,1422,2,"console"],[1705,4,1422,2,"console"],[1705,11,1422,9],[1705,12,1422,10,"trace"],[1705,17,1422,2],[1705,18,1422,16],[1705,78,1422,2],[1706,0,1423,2,"assert"],[1706,4,1423,2,"assert"],[1706,10,1423,8],[1706,11,1423,9],[1706,25,1423,8],[1706,27,1423,25,"node"],[1706,31,1423,8],[1706,33,1423,31,"opts"],[1706,37,1423,8],[1706,38,1423,2],[1707,0,1424,1],[1709,0,1426,0],[1709,11,1426,9,"assertSpreadProperty"],[1709,31,1426,0],[1709,32,1426,30,"node"],[1709,36,1426,0],[1709,38,1426,36,"opts"],[1709,42,1426,0],[1709,44,1426,42],[1710,0,1427,2,"console"],[1710,4,1427,2,"console"],[1710,11,1427,9],[1710,12,1427,10,"trace"],[1710,17,1427,2],[1710,18,1427,16],[1710,82,1427,2],[1711,0,1428,2,"assert"],[1711,4,1428,2,"assert"],[1711,10,1428,8],[1711,11,1428,9],[1711,27,1428,8],[1711,29,1428,27,"node"],[1711,33,1428,8],[1711,35,1428,33,"opts"],[1711,39,1428,8],[1711,40,1428,2],[1712,0,1429,1]]},"type":"js/module"}]}