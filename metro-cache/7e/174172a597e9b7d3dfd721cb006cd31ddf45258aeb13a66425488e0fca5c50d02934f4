{"dependencies":[{"name":"./whitespace","data":{"isAsync":false}},{"name":"./parentheses","data":{"isAsync":false}},{"name":"@babel/types","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.needsWhitespace = needsWhitespace;\n  exports.needsWhitespaceBefore = needsWhitespaceBefore;\n  exports.needsWhitespaceAfter = needsWhitespaceAfter;\n  exports.needsParens = needsParens;\n\n  var whitespace = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[0], \"./whitespace\"));\n\n  var parens = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1], \"./parentheses\"));\n\n  var t = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[2], \"@babel/types\"));\n\n  function _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n\n    _getRequireWildcardCache = function _getRequireWildcardCache() {\n      return cache;\n    };\n\n    return cache;\n  }\n\n  function _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n      return obj;\n    }\n\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n      return {\n        default: obj\n      };\n    }\n\n    var cache = _getRequireWildcardCache();\n\n    if (cache && cache.has(obj)) {\n      return cache.get(obj);\n    }\n\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n    for (var key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n        if (desc && (desc.get || desc.set)) {\n          Object.defineProperty(newObj, key, desc);\n        } else {\n          newObj[key] = obj[key];\n        }\n      }\n    }\n\n    newObj.default = obj;\n\n    if (cache) {\n      cache.set(obj, newObj);\n    }\n\n    return newObj;\n  }\n\n  function expandAliases(obj) {\n    var newObj = {};\n\n    function add(type, func) {\n      var fn = newObj[type];\n      newObj[type] = fn ? function (node, parent, stack) {\n        var result = fn(node, parent, stack);\n        return result == null ? func(node, parent, stack) : result;\n      } : func;\n    }\n\n    for (var _i = 0, _Object$keys = Object.keys(obj); _i < _Object$keys.length; _i++) {\n      var type = _Object$keys[_i];\n      var aliases = t.FLIPPED_ALIAS_KEYS[type];\n\n      if (aliases) {\n        for (var _iterator = aliases, _isArray = Array.isArray(_iterator), _i2 = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"]();;) {\n          var _ref;\n\n          if (_isArray) {\n            if (_i2 >= _iterator.length) break;\n            _ref = _iterator[_i2++];\n          } else {\n            _i2 = _iterator.next();\n            if (_i2.done) break;\n            _ref = _i2.value;\n          }\n\n          var _alias = _ref;\n          add(_alias, obj[type]);\n        }\n      } else {\n        add(type, obj[type]);\n      }\n    }\n\n    return newObj;\n  }\n\n  var expandedParens = expandAliases(parens);\n  var expandedWhitespaceNodes = expandAliases(whitespace.nodes);\n  var expandedWhitespaceList = expandAliases(whitespace.list);\n\n  function find(obj, node, parent, printStack) {\n    var fn = obj[node.type];\n    return fn ? fn(node, parent, printStack) : null;\n  }\n\n  function isOrHasCallExpression(node) {\n    if (t.isCallExpression(node)) {\n      return true;\n    }\n\n    if (t.isMemberExpression(node)) {\n      return isOrHasCallExpression(node.object) || !node.computed && isOrHasCallExpression(node.property);\n    } else {\n      return false;\n    }\n  }\n\n  function needsWhitespace(node, parent, type) {\n    if (!node) return 0;\n\n    if (t.isExpressionStatement(node)) {\n      node = node.expression;\n    }\n\n    var linesInfo = find(expandedWhitespaceNodes, node, parent);\n\n    if (!linesInfo) {\n      var items = find(expandedWhitespaceList, node, parent);\n\n      if (items) {\n        for (var i = 0; i < items.length; i++) {\n          linesInfo = needsWhitespace(items[i], node, type);\n          if (linesInfo) break;\n        }\n      }\n    }\n\n    if (typeof linesInfo === \"object\" && linesInfo !== null) {\n      return linesInfo[type] || 0;\n    }\n\n    return 0;\n  }\n\n  function needsWhitespaceBefore(node, parent) {\n    return needsWhitespace(node, parent, \"before\");\n  }\n\n  function needsWhitespaceAfter(node, parent) {\n    return needsWhitespace(node, parent, \"after\");\n  }\n\n  function needsParens(node, parent, printStack) {\n    if (!parent) return false;\n\n    if (t.isNewExpression(parent) && parent.callee === node) {\n      if (isOrHasCallExpression(node)) return true;\n    }\n\n    if (t.isLogicalExpression(node) && parent.operator === \"??\") return true;\n    return find(expandedParens, node, parent, printStack);\n  }\n});","map":[[2,0,1,0],[4,0,3,0,"Object"],[4,2,3,0,"Object"],[4,8,3,6],[4,9,3,7,"defineProperty"],[4,23,3,0],[4,24,3,22,"exports"],[4,31,3,0],[4,33,3,31],[4,45,3,0],[4,47,3,45],[5,0,4,2,"value"],[5,4,4,2,"value"],[5,9,4,7],[5,11,4,9],[6,0,3,45],[6,3,3,0],[7,0,6,0,"exports"],[7,2,6,0,"exports"],[7,9,6,7],[7,10,6,8,"needsWhitespace"],[7,25,6,0],[7,28,6,26,"needsWhitespace"],[7,43,6,0],[8,0,7,0,"exports"],[8,2,7,0,"exports"],[8,9,7,7],[8,10,7,8,"needsWhitespaceBefore"],[8,31,7,0],[8,34,7,32,"needsWhitespaceBefore"],[8,55,7,0],[9,0,8,0,"exports"],[9,2,8,0,"exports"],[9,9,8,7],[9,10,8,8,"needsWhitespaceAfter"],[9,30,8,0],[9,33,8,31,"needsWhitespaceAfter"],[9,53,8,0],[10,0,9,0,"exports"],[10,2,9,0,"exports"],[10,9,9,7],[10,10,9,8,"needsParens"],[10,21,9,0],[10,24,9,22,"needsParens"],[10,35,9,0],[12,0,11,0],[12,6,11,4,"whitespace"],[12,16,11,14],[12,19,11,17,"_interopRequireWildcard"],[12,42,11,40],[12,43,11,41,"require"],[12,54,11,48],[12,89,11,40],[12,90,11,0],[14,0,13,0],[14,6,13,4,"parens"],[14,12,13,10],[14,15,13,13,"_interopRequireWildcard"],[14,38,13,36],[14,39,13,37,"require"],[14,50,13,44],[14,86,13,36],[14,87,13,0],[16,0,15,0],[16,6,15,4,"t"],[16,7,15,5],[16,10,15,8,"_interopRequireWildcard"],[16,33,15,31],[16,34,15,32,"require"],[16,45,15,39],[16,80,15,31],[16,81,15,0],[18,0,17,0],[18,11,17,9,"_getRequireWildcardCache"],[18,35,17,0],[18,38,17,36],[19,0,17,38],[19,8,17,42],[19,15,17,49,"WeakMap"],[19,22,17,42],[19,27,17,61],[19,37,17,38],[19,39,17,73],[19,46,17,80],[19,50,17,73],[20,0,17,86],[20,8,17,90,"cache"],[20,13,17,95],[20,16,17,98],[20,20,17,102,"WeakMap"],[20,27,17,98],[20,29,17,86],[22,0,17,113,"_getRequireWildcardCache"],[22,4,17,113,"_getRequireWildcardCache"],[22,28,17,137],[22,31,17,140],[22,67,17,152],[23,0,17,154],[23,13,17,161,"cache"],[23,18,17,154],[24,0,17,169],[24,5,17,113],[26,0,17,171],[26,11,17,178,"cache"],[26,16,17,171],[27,0,17,186],[29,0,19,0],[29,11,19,9,"_interopRequireWildcard"],[29,34,19,0],[29,35,19,33,"obj"],[29,38,19,0],[29,40,19,38],[30,0,19,40],[30,8,19,44,"obj"],[30,11,19,47],[30,15,19,51,"obj"],[30,18,19,54],[30,19,19,55,"__esModule"],[30,29,19,40],[30,31,19,67],[31,0,19,69],[31,13,19,76,"obj"],[31,16,19,69],[32,0,19,82],[34,0,19,83],[34,8,19,87,"obj"],[34,11,19,90],[34,16,19,95],[34,20,19,87],[34,24,19,103],[34,31,19,110,"obj"],[34,34,19,103],[34,39,19,118],[34,47,19,103],[34,51,19,130],[34,58,19,137,"obj"],[34,61,19,130],[34,66,19,145],[34,76,19,83],[34,78,19,157],[35,0,19,159],[35,13,19,166],[36,0,19,168,"default"],[36,8,19,168,"default"],[36,15,19,175],[36,17,19,177,"obj"],[37,0,19,166],[37,7,19,159],[38,0,19,185],[40,0,19,186],[40,8,19,190,"cache"],[40,13,19,195],[40,16,19,198,"_getRequireWildcardCache"],[40,40,19,222],[40,42,19,186],[42,0,19,226],[42,8,19,230,"cache"],[42,13,19,235],[42,17,19,239,"cache"],[42,22,19,244],[42,23,19,245,"has"],[42,26,19,239],[42,27,19,249,"obj"],[42,30,19,239],[42,31,19,226],[42,33,19,255],[43,0,19,257],[43,13,19,264,"cache"],[43,18,19,269],[43,19,19,270,"get"],[43,22,19,264],[43,23,19,274,"obj"],[43,26,19,264],[43,27,19,257],[44,0,19,281],[46,0,19,282],[46,8,19,286,"newObj"],[46,14,19,292],[46,17,19,295],[46,19,19,282],[47,0,19,299],[47,8,19,303,"hasPropertyDescriptor"],[47,29,19,324],[47,32,19,327,"Object"],[47,38,19,333],[47,39,19,334,"defineProperty"],[47,53,19,327],[47,57,19,352,"Object"],[47,63,19,358],[47,64,19,359,"getOwnPropertyDescriptor"],[47,88,19,299],[49,0,19,385],[49,9,19,390],[49,13,19,394,"key"],[49,16,19,385],[49,20,19,401,"obj"],[49,23,19,385],[49,25,19,406],[50,0,19,408],[50,10,19,412,"Object"],[50,16,19,418],[50,17,19,419,"prototype"],[50,26,19,412],[50,27,19,429,"hasOwnProperty"],[50,41,19,412],[50,42,19,444,"call"],[50,46,19,412],[50,47,19,449,"obj"],[50,50,19,412],[50,52,19,454,"key"],[50,55,19,412],[50,56,19,408],[50,58,19,460],[51,0,19,462],[51,12,19,466,"desc"],[51,16,19,470],[51,19,19,473,"hasPropertyDescriptor"],[51,40,19,494],[51,43,19,497,"Object"],[51,49,19,503],[51,50,19,504,"getOwnPropertyDescriptor"],[51,74,19,497],[51,75,19,529,"obj"],[51,78,19,497],[51,80,19,534,"key"],[51,83,19,497],[51,84,19,494],[51,87,19,541],[51,91,19,462],[53,0,19,547],[53,12,19,551,"desc"],[53,16,19,555],[53,21,19,560,"desc"],[53,25,19,564],[53,26,19,565,"get"],[53,29,19,560],[53,33,19,572,"desc"],[53,37,19,576],[53,38,19,577,"set"],[53,41,19,555],[53,42,19,547],[53,44,19,583],[54,0,19,585,"Object"],[54,10,19,585,"Object"],[54,16,19,591],[54,17,19,592,"defineProperty"],[54,31,19,585],[54,32,19,607,"newObj"],[54,38,19,585],[54,40,19,615,"key"],[54,43,19,585],[54,45,19,620,"desc"],[54,49,19,585],[55,0,19,628],[55,9,19,547],[55,15,19,634],[56,0,19,636,"newObj"],[56,10,19,636,"newObj"],[56,16,19,642],[56,17,19,643,"key"],[56,20,19,642],[56,21,19,636],[56,24,19,650,"obj"],[56,27,19,653],[56,28,19,654,"key"],[56,31,19,653],[56,32,19,636],[57,0,19,661],[58,0,19,663],[59,0,19,665],[61,0,19,666,"newObj"],[61,4,19,666,"newObj"],[61,10,19,672],[61,11,19,673,"default"],[61,18,19,666],[61,21,19,683,"obj"],[61,24,19,666],[63,0,19,688],[63,8,19,692,"cache"],[63,13,19,688],[63,15,19,699],[64,0,19,701,"cache"],[64,6,19,701,"cache"],[64,11,19,706],[64,12,19,707,"set"],[64,15,19,701],[64,16,19,711,"obj"],[64,19,19,701],[64,21,19,716,"newObj"],[64,27,19,701],[65,0,19,726],[67,0,19,727],[67,11,19,734,"newObj"],[67,17,19,727],[68,0,19,743],[70,0,21,0],[70,11,21,9,"expandAliases"],[70,24,21,0],[70,25,21,23,"obj"],[70,28,21,0],[70,30,21,28],[71,0,22,2],[71,8,22,8,"newObj"],[71,14,22,14],[71,17,22,17],[71,19,22,2],[73,0,24,2],[73,13,24,11,"add"],[73,16,24,2],[73,17,24,15,"type"],[73,21,24,2],[73,23,24,21,"func"],[73,27,24,2],[73,29,24,27],[74,0,25,4],[74,10,25,10,"fn"],[74,12,25,12],[74,15,25,15,"newObj"],[74,21,25,21],[74,22,25,22,"type"],[74,26,25,21],[74,27,25,4],[75,0,26,4,"newObj"],[75,6,26,4,"newObj"],[75,12,26,10],[75,13,26,11,"type"],[75,17,26,10],[75,18,26,4],[75,21,26,19,"fn"],[75,23,26,21],[75,26,26,24],[75,36,26,34,"node"],[75,40,26,24],[75,42,26,40,"parent"],[75,48,26,24],[75,50,26,48,"stack"],[75,55,26,24],[75,57,26,55],[76,0,27,6],[76,12,27,12,"result"],[76,18,27,18],[76,21,27,21,"fn"],[76,23,27,23],[76,24,27,24,"node"],[76,28,27,23],[76,30,27,30,"parent"],[76,36,27,23],[76,38,27,38,"stack"],[76,43,27,23],[76,44,27,6],[77,0,28,6],[77,15,28,13,"result"],[77,21,28,19],[77,25,28,23],[77,29,28,13],[77,32,28,30,"func"],[77,36,28,34],[77,37,28,35,"node"],[77,41,28,34],[77,43,28,41,"parent"],[77,49,28,34],[77,51,28,49,"stack"],[77,56,28,34],[77,57,28,13],[77,60,28,58,"result"],[77,66,28,6],[78,0,29,5],[78,7,26,21],[78,10,29,8,"func"],[78,14,26,4],[79,0,30,3],[81,0,32,2],[81,36,32,21,"Object"],[81,42,32,27],[81,43,32,28,"keys"],[81,47,32,21],[81,48,32,33,"obj"],[81,51,32,21],[81,52,32,2],[81,86,32,39],[82,0,32,7],[82,10,32,13,"type"],[82,14,32,17],[82,33,32,7],[83,0,33,4],[83,10,33,10,"aliases"],[83,17,33,17],[83,20,33,20,"t"],[83,21,33,21],[83,22,33,22,"FLIPPED_ALIAS_KEYS"],[83,40,33,20],[83,41,33,41,"type"],[83,45,33,20],[83,46,33,4],[85,0,35,4],[85,10,35,8,"aliases"],[85,17,35,4],[85,19,35,17],[86,0,36,6],[86,29,36,26,"aliases"],[86,36,36,6],[86,197,36,35],[87,0,36,35],[89,0,36,35],[90,0,36,35],[91,0,36,35],[92,0,36,35],[93,0,36,35],[94,0,36,35],[95,0,36,35],[96,0,36,35],[98,0,36,35],[98,14,36,17,"alias"],[98,20,36,35],[99,0,37,8,"add"],[99,10,37,8,"add"],[99,13,37,11],[99,14,37,12,"alias"],[99,20,37,11],[99,22,37,19,"obj"],[99,25,37,22],[99,26,37,23,"type"],[99,30,37,22],[99,31,37,11],[99,32,37,8],[100,0,38,7],[101,0,39,5],[101,7,35,4],[101,13,39,11],[102,0,40,6,"add"],[102,8,40,6,"add"],[102,11,40,9],[102,12,40,10,"type"],[102,16,40,9],[102,18,40,16,"obj"],[102,21,40,19],[102,22,40,20,"type"],[102,26,40,19],[102,27,40,9],[102,28,40,6],[103,0,41,5],[104,0,42,3],[106,0,44,2],[106,11,44,9,"newObj"],[106,17,44,2],[107,0,45,1],[109,0,47,0],[109,6,47,6,"expandedParens"],[109,20,47,20],[109,23,47,23,"expandAliases"],[109,36,47,36],[109,37,47,37,"parens"],[109,43,47,36],[109,44,47,0],[110,0,48,0],[110,6,48,6,"expandedWhitespaceNodes"],[110,29,48,29],[110,32,48,32,"expandAliases"],[110,45,48,45],[110,46,48,46,"whitespace"],[110,56,48,56],[110,57,48,57,"nodes"],[110,62,48,45],[110,63,48,0],[111,0,49,0],[111,6,49,6,"expandedWhitespaceList"],[111,28,49,28],[111,31,49,31,"expandAliases"],[111,44,49,44],[111,45,49,45,"whitespace"],[111,55,49,55],[111,56,49,56,"list"],[111,60,49,44],[111,61,49,0],[113,0,51,0],[113,11,51,9,"find"],[113,15,51,0],[113,16,51,14,"obj"],[113,19,51,0],[113,21,51,19,"node"],[113,25,51,0],[113,27,51,25,"parent"],[113,33,51,0],[113,35,51,33,"printStack"],[113,45,51,0],[113,47,51,45],[114,0,52,2],[114,8,52,8,"fn"],[114,10,52,10],[114,13,52,13,"obj"],[114,16,52,16],[114,17,52,17,"node"],[114,21,52,21],[114,22,52,22,"type"],[114,26,52,16],[114,27,52,2],[115,0,53,2],[115,11,53,9,"fn"],[115,13,53,11],[115,16,53,14,"fn"],[115,18,53,16],[115,19,53,17,"node"],[115,23,53,16],[115,25,53,23,"parent"],[115,31,53,16],[115,33,53,31,"printStack"],[115,43,53,16],[115,44,53,11],[115,47,53,45],[115,51,53,2],[116,0,54,1],[118,0,56,0],[118,11,56,9,"isOrHasCallExpression"],[118,32,56,0],[118,33,56,31,"node"],[118,37,56,0],[118,39,56,37],[119,0,57,2],[119,8,57,6,"t"],[119,9,57,7],[119,10,57,8,"isCallExpression"],[119,26,57,6],[119,27,57,25,"node"],[119,31,57,6],[119,32,57,2],[119,34,57,32],[120,0,58,4],[120,13,58,11],[120,17,58,4],[121,0,59,3],[123,0,61,2],[123,8,61,6,"t"],[123,9,61,7],[123,10,61,8,"isMemberExpression"],[123,28,61,6],[123,29,61,27,"node"],[123,33,61,6],[123,34,61,2],[123,36,61,34],[124,0,62,4],[124,13,62,11,"isOrHasCallExpression"],[124,34,62,32],[124,35,62,33,"node"],[124,39,62,37],[124,40,62,38,"object"],[124,46,62,32],[124,47,62,11],[124,51,62,49],[124,52,62,50,"node"],[124,56,62,54],[124,57,62,55,"computed"],[124,65,62,49],[124,69,62,67,"isOrHasCallExpression"],[124,90,62,88],[124,91,62,89,"node"],[124,95,62,93],[124,96,62,94,"property"],[124,104,62,88],[124,105,62,4],[125,0,63,3],[125,5,61,2],[125,11,63,9],[126,0,64,4],[126,13,64,11],[126,18,64,4],[127,0,65,3],[128,0,66,1],[130,0,68,0],[130,11,68,9,"needsWhitespace"],[130,26,68,0],[130,27,68,25,"node"],[130,31,68,0],[130,33,68,31,"parent"],[130,39,68,0],[130,41,68,39,"type"],[130,45,68,0],[130,47,68,45],[131,0,69,2],[131,8,69,6],[131,9,69,7,"node"],[131,13,69,2],[131,15,69,13],[131,22,69,20],[131,23,69,13],[133,0,71,2],[133,8,71,6,"t"],[133,9,71,7],[133,10,71,8,"isExpressionStatement"],[133,31,71,6],[133,32,71,30,"node"],[133,36,71,6],[133,37,71,2],[133,39,71,37],[134,0,72,4,"node"],[134,6,72,4,"node"],[134,10,72,8],[134,13,72,11,"node"],[134,17,72,15],[134,18,72,16,"expression"],[134,28,72,4],[135,0,73,3],[137,0,75,2],[137,8,75,6,"linesInfo"],[137,17,75,15],[137,20,75,18,"find"],[137,24,75,22],[137,25,75,23,"expandedWhitespaceNodes"],[137,48,75,22],[137,50,75,48,"node"],[137,54,75,22],[137,56,75,54,"parent"],[137,62,75,22],[137,63,75,2],[139,0,77,2],[139,8,77,6],[139,9,77,7,"linesInfo"],[139,18,77,2],[139,20,77,18],[140,0,78,4],[140,10,78,10,"items"],[140,15,78,15],[140,18,78,18,"find"],[140,22,78,22],[140,23,78,23,"expandedWhitespaceList"],[140,45,78,22],[140,47,78,47,"node"],[140,51,78,22],[140,53,78,53,"parent"],[140,59,78,22],[140,60,78,4],[142,0,80,4],[142,10,80,8,"items"],[142,15,80,4],[142,17,80,15],[143,0,81,6],[143,13,81,11],[143,17,81,15,"i"],[143,18,81,16],[143,21,81,19],[143,22,81,6],[143,24,81,22,"i"],[143,25,81,23],[143,28,81,26,"items"],[143,33,81,31],[143,34,81,32,"length"],[143,40,81,6],[143,42,81,40,"i"],[143,43,81,41],[143,45,81,6],[143,47,81,45],[144,0,82,8,"linesInfo"],[144,10,82,8,"linesInfo"],[144,19,82,17],[144,22,82,20,"needsWhitespace"],[144,37,82,35],[144,38,82,36,"items"],[144,43,82,41],[144,44,82,42,"i"],[144,45,82,41],[144,46,82,35],[144,48,82,46,"node"],[144,52,82,35],[144,54,82,52,"type"],[144,58,82,35],[144,59,82,8],[145,0,83,8],[145,14,83,12,"linesInfo"],[145,23,83,8],[145,25,83,23],[146,0,84,7],[147,0,85,5],[148,0,86,3],[150,0,88,2],[150,8,88,6],[150,15,88,13,"linesInfo"],[150,24,88,6],[150,29,88,27],[150,37,88,6],[150,41,88,39,"linesInfo"],[150,50,88,48],[150,55,88,53],[150,59,88,2],[150,61,88,59],[151,0,89,4],[151,13,89,11,"linesInfo"],[151,22,89,20],[151,23,89,21,"type"],[151,27,89,20],[151,28,89,11],[151,32,89,30],[151,33,89,4],[152,0,90,3],[154,0,92,2],[154,11,92,9],[154,12,92,2],[155,0,93,1],[157,0,95,0],[157,11,95,9,"needsWhitespaceBefore"],[157,32,95,0],[157,33,95,31,"node"],[157,37,95,0],[157,39,95,37,"parent"],[157,45,95,0],[157,47,95,45],[158,0,96,2],[158,11,96,9,"needsWhitespace"],[158,26,96,24],[158,27,96,25,"node"],[158,31,96,24],[158,33,96,31,"parent"],[158,39,96,24],[158,41,96,39],[158,49,96,24],[158,50,96,2],[159,0,97,1],[161,0,99,0],[161,11,99,9,"needsWhitespaceAfter"],[161,31,99,0],[161,32,99,30,"node"],[161,36,99,0],[161,38,99,36,"parent"],[161,44,99,0],[161,46,99,44],[162,0,100,2],[162,11,100,9,"needsWhitespace"],[162,26,100,24],[162,27,100,25,"node"],[162,31,100,24],[162,33,100,31,"parent"],[162,39,100,24],[162,41,100,39],[162,48,100,24],[162,49,100,2],[163,0,101,1],[165,0,103,0],[165,11,103,9,"needsParens"],[165,22,103,0],[165,23,103,21,"node"],[165,27,103,0],[165,29,103,27,"parent"],[165,35,103,0],[165,37,103,35,"printStack"],[165,47,103,0],[165,49,103,47],[166,0,104,2],[166,8,104,6],[166,9,104,7,"parent"],[166,15,104,2],[166,17,104,15],[166,24,104,22],[166,29,104,15],[168,0,106,2],[168,8,106,6,"t"],[168,9,106,7],[168,10,106,8,"isNewExpression"],[168,25,106,6],[168,26,106,24,"parent"],[168,32,106,6],[168,37,106,35,"parent"],[168,43,106,41],[168,44,106,42,"callee"],[168,50,106,35],[168,55,106,53,"node"],[168,59,106,2],[168,61,106,59],[169,0,107,4],[169,10,107,8,"isOrHasCallExpression"],[169,31,107,29],[169,32,107,30,"node"],[169,36,107,29],[169,37,107,4],[169,39,107,37],[169,46,107,44],[169,50,107,37],[170,0,108,3],[172,0,110,2],[172,8,110,6,"t"],[172,9,110,7],[172,10,110,8,"isLogicalExpression"],[172,29,110,6],[172,30,110,28,"node"],[172,34,110,6],[172,39,110,37,"parent"],[172,45,110,43],[172,46,110,44,"operator"],[172,54,110,37],[172,59,110,57],[172,63,110,2],[172,65,110,63],[172,72,110,70],[172,76,110,63],[173,0,111,2],[173,11,111,9,"find"],[173,15,111,13],[173,16,111,14,"expandedParens"],[173,30,111,13],[173,32,111,30,"node"],[173,36,111,13],[173,38,111,36,"parent"],[173,44,111,13],[173,46,111,44,"printStack"],[173,56,111,13],[173,57,111,2],[174,0,112,1]]},"type":"js/module"}]}