{"dependencies":[{"name":"@babel/runtime/helpers/slicedToArray","data":{"isAsync":false}},{"name":"@babel/types","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _slicedToArray = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/slicedToArray\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.list = exports.nodes = void 0;\n\n  var t = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[1], \"@babel/types\"));\n\n  function _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n\n    _getRequireWildcardCache = function _getRequireWildcardCache() {\n      return cache;\n    };\n\n    return cache;\n  }\n\n  function _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n      return obj;\n    }\n\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n      return {\n        default: obj\n      };\n    }\n\n    var cache = _getRequireWildcardCache();\n\n    if (cache && cache.has(obj)) {\n      return cache.get(obj);\n    }\n\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n    for (var key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n        if (desc && (desc.get || desc.set)) {\n          Object.defineProperty(newObj, key, desc);\n        } else {\n          newObj[key] = obj[key];\n        }\n      }\n    }\n\n    newObj.default = obj;\n\n    if (cache) {\n      cache.set(obj, newObj);\n    }\n\n    return newObj;\n  }\n\n  function crawl(node) {\n    var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (t.isMemberExpression(node)) {\n      crawl(node.object, state);\n      if (node.computed) crawl(node.property, state);\n    } else if (t.isBinary(node) || t.isAssignmentExpression(node)) {\n      crawl(node.left, state);\n      crawl(node.right, state);\n    } else if (t.isCallExpression(node)) {\n      state.hasCall = true;\n      crawl(node.callee, state);\n    } else if (t.isFunction(node)) {\n      state.hasFunction = true;\n    } else if (t.isIdentifier(node)) {\n      state.hasHelper = state.hasHelper || isHelper(node.callee);\n    }\n\n    return state;\n  }\n\n  function isHelper(node) {\n    if (t.isMemberExpression(node)) {\n      return isHelper(node.object) || isHelper(node.property);\n    } else if (t.isIdentifier(node)) {\n      return node.name === \"require\" || node.name[0] === \"_\";\n    } else if (t.isCallExpression(node)) {\n      return isHelper(node.callee);\n    } else if (t.isBinary(node) || t.isAssignmentExpression(node)) {\n      return t.isIdentifier(node.left) && isHelper(node.left) || isHelper(node.right);\n    } else {\n      return false;\n    }\n  }\n\n  function isType(node) {\n    return t.isLiteral(node) || t.isObjectExpression(node) || t.isArrayExpression(node) || t.isIdentifier(node) || t.isMemberExpression(node);\n  }\n\n  var nodes = {\n    AssignmentExpression: function AssignmentExpression(node) {\n      var state = crawl(node.right);\n\n      if (state.hasCall && state.hasHelper || state.hasFunction) {\n        return {\n          before: state.hasFunction,\n          after: true\n        };\n      }\n    },\n    SwitchCase: function SwitchCase(node, parent) {\n      return {\n        before: node.consequent.length || parent.cases[0] === node,\n        after: !node.consequent.length && parent.cases[parent.cases.length - 1] === node\n      };\n    },\n    LogicalExpression: function LogicalExpression(node) {\n      if (t.isFunction(node.left) || t.isFunction(node.right)) {\n        return {\n          after: true\n        };\n      }\n    },\n    Literal: function Literal(node) {\n      if (node.value === \"use strict\") {\n        return {\n          after: true\n        };\n      }\n    },\n    CallExpression: function CallExpression(node) {\n      if (t.isFunction(node.callee) || isHelper(node)) {\n        return {\n          before: true,\n          after: true\n        };\n      }\n    },\n    VariableDeclaration: function VariableDeclaration(node) {\n      for (var i = 0; i < node.declarations.length; i++) {\n        var declar = node.declarations[i];\n        var enabled = isHelper(declar.id) && !isType(declar.init);\n\n        if (!enabled) {\n          var state = crawl(declar.init);\n          enabled = isHelper(declar.init) && state.hasCall || state.hasFunction;\n        }\n\n        if (enabled) {\n          return {\n            before: true,\n            after: true\n          };\n        }\n      }\n    },\n    IfStatement: function IfStatement(node) {\n      if (t.isBlockStatement(node.consequent)) {\n        return {\n          before: true,\n          after: true\n        };\n      }\n    }\n  };\n  exports.nodes = nodes;\n\n  nodes.ObjectProperty = nodes.ObjectTypeProperty = nodes.ObjectMethod = function (node, parent) {\n    if (parent.properties[0] === node) {\n      return {\n        before: true\n      };\n    }\n  };\n\n  nodes.ObjectTypeCallProperty = function (node, parent) {\n    if (parent.callProperties[0] === node && (!parent.properties || !parent.properties.length)) {\n      return {\n        before: true\n      };\n    }\n  };\n\n  nodes.ObjectTypeIndexer = function (node, parent) {\n    if (parent.indexers[0] === node && (!parent.properties || !parent.properties.length) && (!parent.callProperties || !parent.callProperties.length)) {\n      return {\n        before: true\n      };\n    }\n  };\n\n  nodes.ObjectTypeInternalSlot = function (node, parent) {\n    if (parent.internalSlots[0] === node && (!parent.properties || !parent.properties.length) && (!parent.callProperties || !parent.callProperties.length) && (!parent.indexers || !parent.indexers.length)) {\n      return {\n        before: true\n      };\n    }\n  };\n\n  var list = {\n    VariableDeclaration: function VariableDeclaration(node) {\n      return node.declarations.map(function (decl) {\n        return decl.init;\n      });\n    },\n    ArrayExpression: function ArrayExpression(node) {\n      return node.elements;\n    },\n    ObjectExpression: function ObjectExpression(node) {\n      return node.properties;\n    }\n  };\n  exports.list = list;\n  [[\"Function\", true], [\"Class\", true], [\"Loop\", true], [\"LabeledStatement\", true], [\"SwitchStatement\", true], [\"TryStatement\", true]].forEach(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        type = _ref2[0],\n        amounts = _ref2[1];\n\n    if (typeof amounts === \"boolean\") {\n      amounts = {\n        after: amounts,\n        before: amounts\n      };\n    }\n\n    [type].concat(t.FLIPPED_ALIAS_KEYS[type] || []).forEach(function (type) {\n      nodes[type] = function () {\n        return amounts;\n      };\n    });\n  });\n});","map":[[2,0,1,0],[6,0,3,0,"Object"],[6,2,3,0,"Object"],[6,8,3,6],[6,9,3,7,"defineProperty"],[6,23,3,0],[6,24,3,22,"exports"],[6,31,3,0],[6,33,3,31],[6,45,3,0],[6,47,3,45],[7,0,4,2,"value"],[7,4,4,2,"value"],[7,9,4,7],[7,11,4,9],[8,0,3,45],[8,3,3,0],[9,0,6,0,"exports"],[9,2,6,0,"exports"],[9,9,6,7],[9,10,6,8,"list"],[9,14,6,0],[9,17,6,15,"exports"],[9,24,6,22],[9,25,6,23,"nodes"],[9,30,6,15],[9,33,6,31],[9,38,6,36],[9,39,6,0],[11,0,8,0],[11,6,8,4,"t"],[11,7,8,5],[11,10,8,8,"_interopRequireWildcard"],[11,33,8,31],[11,34,8,32,"require"],[11,45,8,39],[11,80,8,31],[11,81,8,0],[13,0,10,0],[13,11,10,9,"_getRequireWildcardCache"],[13,35,10,0],[13,38,10,36],[14,0,10,38],[14,8,10,42],[14,15,10,49,"WeakMap"],[14,22,10,42],[14,27,10,61],[14,37,10,38],[14,39,10,73],[14,46,10,80],[14,50,10,73],[15,0,10,86],[15,8,10,90,"cache"],[15,13,10,95],[15,16,10,98],[15,20,10,102,"WeakMap"],[15,27,10,98],[15,29,10,86],[17,0,10,113,"_getRequireWildcardCache"],[17,4,10,113,"_getRequireWildcardCache"],[17,28,10,137],[17,31,10,140],[17,67,10,152],[18,0,10,154],[18,13,10,161,"cache"],[18,18,10,154],[19,0,10,169],[19,5,10,113],[21,0,10,171],[21,11,10,178,"cache"],[21,16,10,171],[22,0,10,186],[24,0,12,0],[24,11,12,9,"_interopRequireWildcard"],[24,34,12,0],[24,35,12,33,"obj"],[24,38,12,0],[24,40,12,38],[25,0,12,40],[25,8,12,44,"obj"],[25,11,12,47],[25,15,12,51,"obj"],[25,18,12,54],[25,19,12,55,"__esModule"],[25,29,12,40],[25,31,12,67],[26,0,12,69],[26,13,12,76,"obj"],[26,16,12,69],[27,0,12,82],[29,0,12,83],[29,8,12,87,"obj"],[29,11,12,90],[29,16,12,95],[29,20,12,87],[29,24,12,103],[29,31,12,110,"obj"],[29,34,12,103],[29,39,12,118],[29,47,12,103],[29,51,12,130],[29,58,12,137,"obj"],[29,61,12,130],[29,66,12,145],[29,76,12,83],[29,78,12,157],[30,0,12,159],[30,13,12,166],[31,0,12,168,"default"],[31,8,12,168,"default"],[31,15,12,175],[31,17,12,177,"obj"],[32,0,12,166],[32,7,12,159],[33,0,12,185],[35,0,12,186],[35,8,12,190,"cache"],[35,13,12,195],[35,16,12,198,"_getRequireWildcardCache"],[35,40,12,222],[35,42,12,186],[37,0,12,226],[37,8,12,230,"cache"],[37,13,12,235],[37,17,12,239,"cache"],[37,22,12,244],[37,23,12,245,"has"],[37,26,12,239],[37,27,12,249,"obj"],[37,30,12,239],[37,31,12,226],[37,33,12,255],[38,0,12,257],[38,13,12,264,"cache"],[38,18,12,269],[38,19,12,270,"get"],[38,22,12,264],[38,23,12,274,"obj"],[38,26,12,264],[38,27,12,257],[39,0,12,281],[41,0,12,282],[41,8,12,286,"newObj"],[41,14,12,292],[41,17,12,295],[41,19,12,282],[42,0,12,299],[42,8,12,303,"hasPropertyDescriptor"],[42,29,12,324],[42,32,12,327,"Object"],[42,38,12,333],[42,39,12,334,"defineProperty"],[42,53,12,327],[42,57,12,352,"Object"],[42,63,12,358],[42,64,12,359,"getOwnPropertyDescriptor"],[42,88,12,299],[44,0,12,385],[44,9,12,390],[44,13,12,394,"key"],[44,16,12,385],[44,20,12,401,"obj"],[44,23,12,385],[44,25,12,406],[45,0,12,408],[45,10,12,412,"Object"],[45,16,12,418],[45,17,12,419,"prototype"],[45,26,12,412],[45,27,12,429,"hasOwnProperty"],[45,41,12,412],[45,42,12,444,"call"],[45,46,12,412],[45,47,12,449,"obj"],[45,50,12,412],[45,52,12,454,"key"],[45,55,12,412],[45,56,12,408],[45,58,12,460],[46,0,12,462],[46,12,12,466,"desc"],[46,16,12,470],[46,19,12,473,"hasPropertyDescriptor"],[46,40,12,494],[46,43,12,497,"Object"],[46,49,12,503],[46,50,12,504,"getOwnPropertyDescriptor"],[46,74,12,497],[46,75,12,529,"obj"],[46,78,12,497],[46,80,12,534,"key"],[46,83,12,497],[46,84,12,494],[46,87,12,541],[46,91,12,462],[48,0,12,547],[48,12,12,551,"desc"],[48,16,12,555],[48,21,12,560,"desc"],[48,25,12,564],[48,26,12,565,"get"],[48,29,12,560],[48,33,12,572,"desc"],[48,37,12,576],[48,38,12,577,"set"],[48,41,12,555],[48,42,12,547],[48,44,12,583],[49,0,12,585,"Object"],[49,10,12,585,"Object"],[49,16,12,591],[49,17,12,592,"defineProperty"],[49,31,12,585],[49,32,12,607,"newObj"],[49,38,12,585],[49,40,12,615,"key"],[49,43,12,585],[49,45,12,620,"desc"],[49,49,12,585],[50,0,12,628],[50,9,12,547],[50,15,12,634],[51,0,12,636,"newObj"],[51,10,12,636,"newObj"],[51,16,12,642],[51,17,12,643,"key"],[51,20,12,642],[51,21,12,636],[51,24,12,650,"obj"],[51,27,12,653],[51,28,12,654,"key"],[51,31,12,653],[51,32,12,636],[52,0,12,661],[53,0,12,663],[54,0,12,665],[56,0,12,666,"newObj"],[56,4,12,666,"newObj"],[56,10,12,672],[56,11,12,673,"default"],[56,18,12,666],[56,21,12,683,"obj"],[56,24,12,666],[58,0,12,688],[58,8,12,692,"cache"],[58,13,12,688],[58,15,12,699],[59,0,12,701,"cache"],[59,6,12,701,"cache"],[59,11,12,706],[59,12,12,707,"set"],[59,15,12,701],[59,16,12,711,"obj"],[59,19,12,701],[59,21,12,716,"newObj"],[59,27,12,701],[60,0,12,726],[62,0,12,727],[62,11,12,734,"newObj"],[62,17,12,727],[63,0,12,743],[65,0,14,0],[65,11,14,9,"crawl"],[65,16,14,0],[65,17,14,15,"node"],[65,21,14,0],[65,23,14,33],[66,0,14,33],[66,8,14,21,"state"],[66,13,14,33],[66,84,14,29],[66,86,14,33],[68,0,15,2],[68,8,15,6,"t"],[68,9,15,7],[68,10,15,8,"isMemberExpression"],[68,28,15,6],[68,29,15,27,"node"],[68,33,15,6],[68,34,15,2],[68,36,15,34],[69,0,16,4,"crawl"],[69,6,16,4,"crawl"],[69,11,16,9],[69,12,16,10,"node"],[69,16,16,14],[69,17,16,15,"object"],[69,23,16,9],[69,25,16,23,"state"],[69,30,16,9],[69,31,16,4],[70,0,17,4],[70,10,17,8,"node"],[70,14,17,12],[70,15,17,13,"computed"],[70,23,17,4],[70,25,17,23,"crawl"],[70,30,17,28],[70,31,17,29,"node"],[70,35,17,33],[70,36,17,34,"property"],[70,44,17,28],[70,46,17,44,"state"],[70,51,17,28],[70,52,17,23],[71,0,18,3],[71,5,15,2],[71,11,18,9],[71,15,18,13,"t"],[71,16,18,14],[71,17,18,15,"isBinary"],[71,25,18,13],[71,26,18,24,"node"],[71,30,18,13],[71,35,18,33,"t"],[71,36,18,34],[71,37,18,35,"isAssignmentExpression"],[71,59,18,33],[71,60,18,58,"node"],[71,64,18,33],[71,65,18,9],[71,67,18,65],[72,0,19,4,"crawl"],[72,6,19,4,"crawl"],[72,11,19,9],[72,12,19,10,"node"],[72,16,19,14],[72,17,19,15,"left"],[72,21,19,9],[72,23,19,21,"state"],[72,28,19,9],[72,29,19,4],[73,0,20,4,"crawl"],[73,6,20,4,"crawl"],[73,11,20,9],[73,12,20,10,"node"],[73,16,20,14],[73,17,20,15,"right"],[73,22,20,9],[73,24,20,22,"state"],[73,29,20,9],[73,30,20,4],[74,0,21,3],[74,5,18,9],[74,11,21,9],[74,15,21,13,"t"],[74,16,21,14],[74,17,21,15,"isCallExpression"],[74,33,21,13],[74,34,21,32,"node"],[74,38,21,13],[74,39,21,9],[74,41,21,39],[75,0,22,4,"state"],[75,6,22,4,"state"],[75,11,22,9],[75,12,22,10,"hasCall"],[75,19,22,4],[75,22,22,20],[75,26,22,4],[76,0,23,4,"crawl"],[76,6,23,4,"crawl"],[76,11,23,9],[76,12,23,10,"node"],[76,16,23,14],[76,17,23,15,"callee"],[76,23,23,9],[76,25,23,23,"state"],[76,30,23,9],[76,31,23,4],[77,0,24,3],[77,5,21,9],[77,11,24,9],[77,15,24,13,"t"],[77,16,24,14],[77,17,24,15,"isFunction"],[77,27,24,13],[77,28,24,26,"node"],[77,32,24,13],[77,33,24,9],[77,35,24,33],[78,0,25,4,"state"],[78,6,25,4,"state"],[78,11,25,9],[78,12,25,10,"hasFunction"],[78,23,25,4],[78,26,25,24],[78,30,25,4],[79,0,26,3],[79,5,24,9],[79,11,26,9],[79,15,26,13,"t"],[79,16,26,14],[79,17,26,15,"isIdentifier"],[79,29,26,13],[79,30,26,28,"node"],[79,34,26,13],[79,35,26,9],[79,37,26,35],[80,0,27,4,"state"],[80,6,27,4,"state"],[80,11,27,9],[80,12,27,10,"hasHelper"],[80,21,27,4],[80,24,27,22,"state"],[80,29,27,27],[80,30,27,28,"hasHelper"],[80,39,27,22],[80,43,27,41,"isHelper"],[80,51,27,49],[80,52,27,50,"node"],[80,56,27,54],[80,57,27,55,"callee"],[80,63,27,49],[80,64,27,4],[81,0,28,3],[83,0,30,2],[83,11,30,9,"state"],[83,16,30,2],[84,0,31,1],[86,0,33,0],[86,11,33,9,"isHelper"],[86,19,33,0],[86,20,33,18,"node"],[86,24,33,0],[86,26,33,24],[87,0,34,2],[87,8,34,6,"t"],[87,9,34,7],[87,10,34,8,"isMemberExpression"],[87,28,34,6],[87,29,34,27,"node"],[87,33,34,6],[87,34,34,2],[87,36,34,34],[88,0,35,4],[88,13,35,11,"isHelper"],[88,21,35,19],[88,22,35,20,"node"],[88,26,35,24],[88,27,35,25,"object"],[88,33,35,19],[88,34,35,11],[88,38,35,36,"isHelper"],[88,46,35,44],[88,47,35,45,"node"],[88,51,35,49],[88,52,35,50,"property"],[88,60,35,44],[88,61,35,4],[89,0,36,3],[89,5,34,2],[89,11,36,9],[89,15,36,13,"t"],[89,16,36,14],[89,17,36,15,"isIdentifier"],[89,29,36,13],[89,30,36,28,"node"],[89,34,36,13],[89,35,36,9],[89,37,36,35],[90,0,37,4],[90,13,37,11,"node"],[90,17,37,15],[90,18,37,16,"name"],[90,22,37,11],[90,27,37,25],[90,36,37,11],[90,40,37,38,"node"],[90,44,37,42],[90,45,37,43,"name"],[90,49,37,38],[90,50,37,48],[90,51,37,38],[90,57,37,55],[90,60,37,4],[91,0,38,3],[91,5,36,9],[91,11,38,9],[91,15,38,13,"t"],[91,16,38,14],[91,17,38,15,"isCallExpression"],[91,33,38,13],[91,34,38,32,"node"],[91,38,38,13],[91,39,38,9],[91,41,38,39],[92,0,39,4],[92,13,39,11,"isHelper"],[92,21,39,19],[92,22,39,20,"node"],[92,26,39,24],[92,27,39,25,"callee"],[92,33,39,19],[92,34,39,4],[93,0,40,3],[93,5,38,9],[93,11,40,9],[93,15,40,13,"t"],[93,16,40,14],[93,17,40,15,"isBinary"],[93,25,40,13],[93,26,40,24,"node"],[93,30,40,13],[93,35,40,33,"t"],[93,36,40,34],[93,37,40,35,"isAssignmentExpression"],[93,59,40,33],[93,60,40,58,"node"],[93,64,40,33],[93,65,40,9],[93,67,40,65],[94,0,41,4],[94,13,41,11,"t"],[94,14,41,12],[94,15,41,13,"isIdentifier"],[94,27,41,11],[94,28,41,26,"node"],[94,32,41,30],[94,33,41,31,"left"],[94,37,41,11],[94,42,41,40,"isHelper"],[94,50,41,48],[94,51,41,49,"node"],[94,55,41,53],[94,56,41,54,"left"],[94,60,41,48],[94,61,41,11],[94,65,41,63,"isHelper"],[94,73,41,71],[94,74,41,72,"node"],[94,78,41,76],[94,79,41,77,"right"],[94,84,41,71],[94,85,41,4],[95,0,42,3],[95,5,40,9],[95,11,42,9],[96,0,43,4],[96,13,43,11],[96,18,43,4],[97,0,44,3],[98,0,45,1],[100,0,47,0],[100,11,47,9,"isType"],[100,17,47,0],[100,18,47,16,"node"],[100,22,47,0],[100,24,47,22],[101,0,48,2],[101,11,48,9,"t"],[101,12,48,10],[101,13,48,11,"isLiteral"],[101,22,48,9],[101,23,48,21,"node"],[101,27,48,9],[101,32,48,30,"t"],[101,33,48,31],[101,34,48,32,"isObjectExpression"],[101,52,48,30],[101,53,48,51,"node"],[101,57,48,30],[101,58,48,9],[101,62,48,60,"t"],[101,63,48,61],[101,64,48,62,"isArrayExpression"],[101,81,48,60],[101,82,48,80,"node"],[101,86,48,60],[101,87,48,9],[101,91,48,89,"t"],[101,92,48,90],[101,93,48,91,"isIdentifier"],[101,105,48,89],[101,106,48,104,"node"],[101,110,48,89],[101,111,48,9],[101,115,48,113,"t"],[101,116,48,114],[101,117,48,115,"isMemberExpression"],[101,135,48,113],[101,136,48,134,"node"],[101,140,48,113],[101,141,48,2],[102,0,49,1],[104,0,51,0],[104,6,51,6,"nodes"],[104,11,51,11],[104,14,51,14],[105,0,52,2,"AssignmentExpression"],[105,4,52,2,"AssignmentExpression"],[105,24,51,14],[105,56,52,23,"node"],[105,60,51,14],[105,62,52,29],[106,0,53,4],[106,10,53,10,"state"],[106,15,53,15],[106,18,53,18,"crawl"],[106,23,53,23],[106,24,53,24,"node"],[106,28,53,28],[106,29,53,29,"right"],[106,34,53,23],[106,35,53,4],[108,0,55,4],[108,10,55,8,"state"],[108,15,55,13],[108,16,55,14,"hasCall"],[108,23,55,8],[108,27,55,25,"state"],[108,32,55,30],[108,33,55,31,"hasHelper"],[108,42,55,8],[108,46,55,44,"state"],[108,51,55,49],[108,52,55,50,"hasFunction"],[108,63,55,4],[108,65,55,63],[109,0,56,6],[109,15,56,13],[110,0,57,8,"before"],[110,10,57,8,"before"],[110,16,57,14],[110,18,57,16,"state"],[110,23,57,21],[110,24,57,22,"hasFunction"],[110,35,56,13],[111,0,58,8,"after"],[111,10,58,8,"after"],[111,15,58,13],[111,17,58,15],[112,0,56,13],[112,9,56,6],[113,0,60,5],[114,0,61,3],[114,5,51,14],[115,0,63,2,"SwitchCase"],[115,4,63,2,"SwitchCase"],[115,14,51,14],[115,36,63,13,"node"],[115,40,51,14],[115,42,63,19,"parent"],[115,48,51,14],[115,50,63,27],[116,0,64,4],[116,13,64,11],[117,0,65,6,"before"],[117,8,65,6,"before"],[117,14,65,12],[117,16,65,14,"node"],[117,20,65,18],[117,21,65,19,"consequent"],[117,31,65,14],[117,32,65,30,"length"],[117,38,65,14],[117,42,65,40,"parent"],[117,48,65,46],[117,49,65,47,"cases"],[117,54,65,40],[117,55,65,53],[117,56,65,40],[117,62,65,60,"node"],[117,66,64,11],[118,0,66,6,"after"],[118,8,66,6,"after"],[118,13,66,11],[118,15,66,13],[118,16,66,14,"node"],[118,20,66,18],[118,21,66,19,"consequent"],[118,31,66,14],[118,32,66,30,"length"],[118,38,66,13],[118,42,66,40,"parent"],[118,48,66,46],[118,49,66,47,"cases"],[118,54,66,40],[118,55,66,53,"parent"],[118,61,66,59],[118,62,66,60,"cases"],[118,67,66,53],[118,68,66,66,"length"],[118,74,66,53],[118,77,66,75],[118,78,66,40],[118,84,66,82,"node"],[119,0,64,11],[119,7,64,4],[120,0,68,3],[120,5,51,14],[121,0,70,2,"LogicalExpression"],[121,4,70,2,"LogicalExpression"],[121,21,51,14],[121,50,70,20,"node"],[121,54,51,14],[121,56,70,26],[122,0,71,4],[122,10,71,8,"t"],[122,11,71,9],[122,12,71,10,"isFunction"],[122,22,71,8],[122,23,71,21,"node"],[122,27,71,25],[122,28,71,26,"left"],[122,32,71,8],[122,37,71,35,"t"],[122,38,71,36],[122,39,71,37,"isFunction"],[122,49,71,35],[122,50,71,48,"node"],[122,54,71,52],[122,55,71,53,"right"],[122,60,71,35],[122,61,71,4],[122,63,71,61],[123,0,72,6],[123,15,72,13],[124,0,73,8,"after"],[124,10,73,8,"after"],[124,15,73,13],[124,17,73,15],[125,0,72,13],[125,9,72,6],[126,0,75,5],[127,0,76,3],[127,5,51,14],[128,0,78,2,"Literal"],[128,4,78,2,"Literal"],[128,11,51,14],[128,30,78,10,"node"],[128,34,51,14],[128,36,78,16],[129,0,79,4],[129,10,79,8,"node"],[129,14,79,12],[129,15,79,13,"value"],[129,20,79,8],[129,25,79,23],[129,37,79,4],[129,39,79,37],[130,0,80,6],[130,15,80,13],[131,0,81,8,"after"],[131,10,81,8,"after"],[131,15,81,13],[131,17,81,15],[132,0,80,13],[132,9,80,6],[133,0,83,5],[134,0,84,3],[134,5,51,14],[135,0,86,2,"CallExpression"],[135,4,86,2,"CallExpression"],[135,18,51,14],[135,44,86,17,"node"],[135,48,51,14],[135,50,86,23],[136,0,87,4],[136,10,87,8,"t"],[136,11,87,9],[136,12,87,10,"isFunction"],[136,22,87,8],[136,23,87,21,"node"],[136,27,87,25],[136,28,87,26,"callee"],[136,34,87,8],[136,39,87,37,"isHelper"],[136,47,87,45],[136,48,87,46,"node"],[136,52,87,45],[136,53,87,4],[136,55,87,53],[137,0,88,6],[137,15,88,13],[138,0,89,8,"before"],[138,10,89,8,"before"],[138,16,89,14],[138,18,89,16],[138,22,88,13],[139,0,90,8,"after"],[139,10,90,8,"after"],[139,15,90,13],[139,17,90,15],[140,0,88,13],[140,9,88,6],[141,0,92,5],[142,0,93,3],[142,5,51,14],[143,0,95,2,"VariableDeclaration"],[143,4,95,2,"VariableDeclaration"],[143,23,51,14],[143,54,95,22,"node"],[143,58,51,14],[143,60,95,28],[144,0,96,4],[144,11,96,9],[144,15,96,13,"i"],[144,16,96,14],[144,19,96,17],[144,20,96,4],[144,22,96,20,"i"],[144,23,96,21],[144,26,96,24,"node"],[144,30,96,28],[144,31,96,29,"declarations"],[144,43,96,24],[144,44,96,42,"length"],[144,50,96,4],[144,52,96,50,"i"],[144,53,96,51],[144,55,96,4],[144,57,96,55],[145,0,97,6],[145,12,97,12,"declar"],[145,18,97,18],[145,21,97,21,"node"],[145,25,97,25],[145,26,97,26,"declarations"],[145,38,97,21],[145,39,97,39,"i"],[145,40,97,21],[145,41,97,6],[146,0,98,6],[146,12,98,10,"enabled"],[146,19,98,17],[146,22,98,20,"isHelper"],[146,30,98,28],[146,31,98,29,"declar"],[146,37,98,35],[146,38,98,36,"id"],[146,40,98,28],[146,41,98,20],[146,45,98,43],[146,46,98,44,"isType"],[146,52,98,50],[146,53,98,51,"declar"],[146,59,98,57],[146,60,98,58,"init"],[146,64,98,50],[146,65,98,6],[148,0,100,6],[148,12,100,10],[148,13,100,11,"enabled"],[148,20,100,6],[148,22,100,20],[149,0,101,8],[149,14,101,14,"state"],[149,19,101,19],[149,22,101,22,"crawl"],[149,27,101,27],[149,28,101,28,"declar"],[149,34,101,34],[149,35,101,35,"init"],[149,39,101,27],[149,40,101,8],[150,0,102,8,"enabled"],[150,10,102,8,"enabled"],[150,17,102,15],[150,20,102,18,"isHelper"],[150,28,102,26],[150,29,102,27,"declar"],[150,35,102,33],[150,36,102,34,"init"],[150,40,102,26],[150,41,102,18],[150,45,102,43,"state"],[150,50,102,48],[150,51,102,49,"hasCall"],[150,58,102,18],[150,62,102,60,"state"],[150,67,102,65],[150,68,102,66,"hasFunction"],[150,79,102,8],[151,0,103,7],[153,0,105,6],[153,12,105,10,"enabled"],[153,19,105,6],[153,21,105,19],[154,0,106,8],[154,17,106,15],[155,0,107,10,"before"],[155,12,107,10,"before"],[155,18,107,16],[155,20,107,18],[155,24,106,15],[156,0,108,10,"after"],[156,12,108,10,"after"],[156,17,108,15],[156,19,108,17],[157,0,106,15],[157,11,106,8],[158,0,110,7],[159,0,111,5],[160,0,112,3],[160,5,51,14],[161,0,114,2,"IfStatement"],[161,4,114,2,"IfStatement"],[161,15,51,14],[161,38,114,14,"node"],[161,42,51,14],[161,44,114,20],[162,0,115,4],[162,10,115,8,"t"],[162,11,115,9],[162,12,115,10,"isBlockStatement"],[162,28,115,8],[162,29,115,27,"node"],[162,33,115,31],[162,34,115,32,"consequent"],[162,44,115,8],[162,45,115,4],[162,47,115,45],[163,0,116,6],[163,15,116,13],[164,0,117,8,"before"],[164,10,117,8,"before"],[164,16,117,14],[164,18,117,16],[164,22,116,13],[165,0,118,8,"after"],[165,10,118,8,"after"],[165,15,118,13],[165,17,118,15],[166,0,116,13],[166,9,116,6],[167,0,120,5],[168,0,121,3],[169,0,51,14],[169,3,51,0],[170,0,124,0,"exports"],[170,2,124,0,"exports"],[170,9,124,7],[170,10,124,8,"nodes"],[170,15,124,0],[170,18,124,16,"nodes"],[170,23,124,0],[172,0,126,0,"nodes"],[172,2,126,0,"nodes"],[172,7,126,5],[172,8,126,6,"ObjectProperty"],[172,22,126,0],[172,25,126,23,"nodes"],[172,30,126,28],[172,31,126,29,"ObjectTypeProperty"],[172,49,126,23],[172,52,126,50,"nodes"],[172,57,126,55],[172,58,126,56,"ObjectMethod"],[172,70,126,50],[172,73,126,71],[172,83,126,81,"node"],[172,87,126,71],[172,89,126,87,"parent"],[172,95,126,71],[172,97,126,95],[173,0,127,2],[173,8,127,6,"parent"],[173,14,127,12],[173,15,127,13,"properties"],[173,25,127,6],[173,26,127,24],[173,27,127,6],[173,33,127,31,"node"],[173,37,127,2],[173,39,127,37],[174,0,128,4],[174,13,128,11],[175,0,129,6,"before"],[175,8,129,6,"before"],[175,14,129,12],[175,16,129,14],[176,0,128,11],[176,7,128,4],[177,0,131,3],[178,0,132,1],[178,3,126,0],[180,0,134,0,"nodes"],[180,2,134,0,"nodes"],[180,7,134,5],[180,8,134,6,"ObjectTypeCallProperty"],[180,30,134,0],[180,33,134,31],[180,43,134,41,"node"],[180,47,134,31],[180,49,134,47,"parent"],[180,55,134,31],[180,57,134,55],[181,0,135,2],[181,8,135,6,"parent"],[181,14,135,12],[181,15,135,13,"callProperties"],[181,29,135,6],[181,30,135,28],[181,31,135,6],[181,37,135,35,"node"],[181,41,135,6],[181,46,135,44],[181,47,135,45,"parent"],[181,53,135,51],[181,54,135,52,"properties"],[181,64,135,44],[181,68,135,66],[181,69,135,67,"parent"],[181,75,135,73],[181,76,135,74,"properties"],[181,86,135,67],[181,87,135,85,"length"],[181,93,135,6],[181,94,135,2],[181,96,135,94],[182,0,136,4],[182,13,136,11],[183,0,137,6,"before"],[183,8,137,6,"before"],[183,14,137,12],[183,16,137,14],[184,0,136,11],[184,7,136,4],[185,0,139,3],[186,0,140,1],[186,3,134,0],[188,0,142,0,"nodes"],[188,2,142,0,"nodes"],[188,7,142,5],[188,8,142,6,"ObjectTypeIndexer"],[188,25,142,0],[188,28,142,26],[188,38,142,36,"node"],[188,42,142,26],[188,44,142,42,"parent"],[188,50,142,26],[188,52,142,50],[189,0,143,2],[189,8,143,6,"parent"],[189,14,143,12],[189,15,143,13,"indexers"],[189,23,143,6],[189,24,143,22],[189,25,143,6],[189,31,143,29,"node"],[189,35,143,6],[189,40,143,38],[189,41,143,39,"parent"],[189,47,143,45],[189,48,143,46,"properties"],[189,58,143,38],[189,62,143,60],[189,63,143,61,"parent"],[189,69,143,67],[189,70,143,68,"properties"],[189,80,143,61],[189,81,143,79,"length"],[189,87,143,6],[189,93,143,91],[189,94,143,92,"parent"],[189,100,143,98],[189,101,143,99,"callProperties"],[189,115,143,91],[189,119,143,117],[189,120,143,118,"parent"],[189,126,143,124],[189,127,143,125,"callProperties"],[189,141,143,118],[189,142,143,140,"length"],[189,148,143,6],[189,149,143,2],[189,151,143,149],[190,0,144,4],[190,13,144,11],[191,0,145,6,"before"],[191,8,145,6,"before"],[191,14,145,12],[191,16,145,14],[192,0,144,11],[192,7,144,4],[193,0,147,3],[194,0,148,1],[194,3,142,0],[196,0,150,0,"nodes"],[196,2,150,0,"nodes"],[196,7,150,5],[196,8,150,6,"ObjectTypeInternalSlot"],[196,30,150,0],[196,33,150,31],[196,43,150,41,"node"],[196,47,150,31],[196,49,150,47,"parent"],[196,55,150,31],[196,57,150,55],[197,0,151,2],[197,8,151,6,"parent"],[197,14,151,12],[197,15,151,13,"internalSlots"],[197,28,151,6],[197,29,151,27],[197,30,151,6],[197,36,151,34,"node"],[197,40,151,6],[197,45,151,43],[197,46,151,44,"parent"],[197,52,151,50],[197,53,151,51,"properties"],[197,63,151,43],[197,67,151,65],[197,68,151,66,"parent"],[197,74,151,72],[197,75,151,73,"properties"],[197,85,151,66],[197,86,151,84,"length"],[197,92,151,6],[197,98,151,96],[197,99,151,97,"parent"],[197,105,151,103],[197,106,151,104,"callProperties"],[197,120,151,96],[197,124,151,122],[197,125,151,123,"parent"],[197,131,151,129],[197,132,151,130,"callProperties"],[197,146,151,123],[197,147,151,145,"length"],[197,153,151,6],[197,159,151,157],[197,160,151,158,"parent"],[197,166,151,164],[197,167,151,165,"indexers"],[197,175,151,157],[197,179,151,177],[197,180,151,178,"parent"],[197,186,151,184],[197,187,151,185,"indexers"],[197,195,151,178],[197,196,151,194,"length"],[197,202,151,6],[197,203,151,2],[197,205,151,203],[198,0,152,4],[198,13,152,11],[199,0,153,6,"before"],[199,8,153,6,"before"],[199,14,153,12],[199,16,153,14],[200,0,152,11],[200,7,152,4],[201,0,155,3],[202,0,156,1],[202,3,150,0],[204,0,158,0],[204,6,158,6,"list"],[204,10,158,10],[204,13,158,13],[205,0,159,2,"VariableDeclaration"],[205,4,159,2,"VariableDeclaration"],[205,23,158,13],[205,54,159,22,"node"],[205,58,158,13],[205,60,159,28],[206,0,160,4],[206,13,160,11,"node"],[206,17,160,15],[206,18,160,16,"declarations"],[206,30,160,11],[206,31,160,29,"map"],[206,34,160,11],[206,35,160,33],[206,45,160,33,"decl"],[206,49,160,37],[207,0,160,37],[207,15,160,41,"decl"],[207,19,160,45],[207,20,160,46,"init"],[207,24,160,37],[208,0,160,37],[208,7,160,11],[208,8,160,4],[209,0,161,3],[209,5,158,13],[210,0,163,2,"ArrayExpression"],[210,4,163,2,"ArrayExpression"],[210,19,158,13],[210,46,163,18,"node"],[210,50,158,13],[210,52,163,24],[211,0,164,4],[211,13,164,11,"node"],[211,17,164,15],[211,18,164,16,"elements"],[211,26,164,4],[212,0,165,3],[212,5,158,13],[213,0,167,2,"ObjectExpression"],[213,4,167,2,"ObjectExpression"],[213,20,158,13],[213,48,167,19,"node"],[213,52,158,13],[213,54,167,25],[214,0,168,4],[214,13,168,11,"node"],[214,17,168,15],[214,18,168,16,"properties"],[214,28,168,4],[215,0,169,3],[216,0,158,13],[216,3,158,0],[217,0,172,0,"exports"],[217,2,172,0,"exports"],[217,9,172,7],[217,10,172,8,"list"],[217,14,172,0],[217,17,172,15,"list"],[217,21,172,0],[218,0,173,0],[218,3,173,1],[218,4,173,2],[218,14,173,1],[218,16,173,14],[218,20,173,1],[218,21,173,0],[218,23,173,21],[218,24,173,22],[218,31,173,21],[218,33,173,31],[218,37,173,21],[218,38,173,0],[218,40,173,38],[218,41,173,39],[218,47,173,38],[218,49,173,47],[218,53,173,38],[218,54,173,0],[218,56,173,54],[218,57,173,55],[218,75,173,54],[218,77,173,75],[218,81,173,54],[218,82,173,0],[218,84,173,82],[218,85,173,83],[218,102,173,82],[218,104,173,102],[218,108,173,82],[218,109,173,0],[218,111,173,109],[218,112,173,110],[218,126,173,109],[218,128,173,126],[218,132,173,109],[218,133,173,0],[218,135,173,133,"forEach"],[218,142,173,0],[218,143,173,141],[218,159,173,168],[219,0,173,168],[220,0,173,168],[220,8,173,152,"type"],[220,12,173,168],[221,0,173,168],[221,8,173,158,"amounts"],[221,15,173,168],[223,0,174,2],[223,8,174,6],[223,15,174,13,"amounts"],[223,22,174,6],[223,27,174,25],[223,36,174,2],[223,38,174,36],[224,0,175,4,"amounts"],[224,6,175,4,"amounts"],[224,13,175,11],[224,16,175,14],[225,0,176,6,"after"],[225,8,176,6,"after"],[225,13,176,11],[225,15,176,13,"amounts"],[225,22,175,14],[226,0,177,6,"before"],[226,8,177,6,"before"],[226,14,177,12],[226,16,177,14,"amounts"],[227,0,175,14],[227,7,175,4],[228,0,179,3],[230,0,181,2],[230,5,181,3,"type"],[230,9,181,2],[230,11,181,9,"concat"],[230,17,181,2],[230,18,181,16,"t"],[230,19,181,17],[230,20,181,18,"FLIPPED_ALIAS_KEYS"],[230,38,181,16],[230,39,181,37,"type"],[230,43,181,16],[230,48,181,46],[230,50,181,2],[230,52,181,50,"forEach"],[230,59,181,2],[230,60,181,58],[230,70,181,68,"type"],[230,74,181,58],[230,76,181,74],[231,0,182,4,"nodes"],[231,6,182,4,"nodes"],[231,11,182,9],[231,12,182,10,"type"],[231,16,182,9],[231,17,182,4],[231,20,182,18],[231,32,182,30],[232,0,183,6],[232,15,183,13,"amounts"],[232,22,183,6],[233,0,184,5],[233,7,182,4],[234,0,185,3],[234,5,181,2],[235,0,186,1],[235,3,173,0]]},"type":"js/module"}]}