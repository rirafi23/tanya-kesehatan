{"dependencies":[{"name":"@babel/runtime/helpers/extends","data":{"isAsync":false}},{"name":"../definitions","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _extends = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/extends\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = cloneNode;\n\n  var _definitions = _$$_REQUIRE(_dependencyMap[1], \"../definitions\");\n\n  var has = Function.call.bind(Object.prototype.hasOwnProperty);\n\n  function cloneIfNode(obj, deep) {\n    if (obj && typeof obj.type === \"string\" && obj.type !== \"CommentLine\" && obj.type !== \"CommentBlock\") {\n      return cloneNode(obj, deep);\n    }\n\n    return obj;\n  }\n\n  function cloneIfNodeOrArray(obj, deep) {\n    if (Array.isArray(obj)) {\n      return obj.map(function (node) {\n        return cloneIfNode(node, deep);\n      });\n    }\n\n    return cloneIfNode(obj, deep);\n  }\n\n  function cloneNode(node) {\n    var deep = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    if (!node) return node;\n    var type = node.type;\n    var newNode = {\n      type: type\n    };\n\n    if (type === \"Identifier\") {\n      newNode.name = node.name;\n\n      if (has(node, \"optional\") && typeof node.optional === \"boolean\") {\n        newNode.optional = node.optional;\n      }\n\n      if (has(node, \"typeAnnotation\")) {\n        newNode.typeAnnotation = deep ? cloneIfNodeOrArray(node.typeAnnotation, true) : node.typeAnnotation;\n      }\n    } else if (!has(_definitions.NODE_FIELDS, type)) {\n      throw new Error(\"Unknown node type: \\\"\" + type + \"\\\"\");\n    } else {\n      for (var _i = 0, _Object$keys = Object.keys(_definitions.NODE_FIELDS[type]); _i < _Object$keys.length; _i++) {\n        var field = _Object$keys[_i];\n\n        if (has(node, field)) {\n          newNode[field] = deep ? cloneIfNodeOrArray(node[field], true) : node[field];\n        }\n      }\n    }\n\n    if (has(node, \"loc\")) {\n      newNode.loc = node.loc;\n    }\n\n    if (has(node, \"leadingComments\")) {\n      newNode.leadingComments = node.leadingComments;\n    }\n\n    if (has(node, \"innerComments\")) {\n      newNode.innerComments = node.innerComments;\n    }\n\n    if (has(node, \"trailingComments\")) {\n      newNode.trailingComments = node.trailingComments;\n    }\n\n    if (has(node, \"extra\")) {\n      newNode.extra = _extends({}, node.extra);\n    }\n\n    return newNode;\n  }\n});","map":[[2,0,1,0],[6,0,3,0,"Object"],[6,2,3,0,"Object"],[6,8,3,6],[6,9,3,7,"defineProperty"],[6,23,3,0],[6,24,3,22,"exports"],[6,31,3,0],[6,33,3,31],[6,45,3,0],[6,47,3,45],[7,0,4,2,"value"],[7,4,4,2,"value"],[7,9,4,7],[7,11,4,9],[8,0,3,45],[8,3,3,0],[9,0,6,0,"exports"],[9,2,6,0,"exports"],[9,9,6,7],[9,10,6,8,"default"],[9,17,6,0],[9,20,6,18,"cloneNode"],[9,29,6,0],[11,0,8,0],[11,6,8,4,"_definitions"],[11,18,8,16],[11,21,8,19,"require"],[11,32,8,26],[11,69,8,0],[13,0,10,0],[13,6,10,6,"has"],[13,9,10,9],[13,12,10,12,"Function"],[13,20,10,20],[13,21,10,21,"call"],[13,25,10,12],[13,26,10,26,"bind"],[13,30,10,12],[13,31,10,31,"Object"],[13,37,10,37],[13,38,10,38,"prototype"],[13,47,10,31],[13,48,10,48,"hasOwnProperty"],[13,62,10,12],[13,63,10,0],[15,0,12,0],[15,11,12,9,"cloneIfNode"],[15,22,12,0],[15,23,12,21,"obj"],[15,26,12,0],[15,28,12,26,"deep"],[15,32,12,0],[15,34,12,32],[16,0,13,2],[16,8,13,6,"obj"],[16,11,13,9],[16,15,13,13],[16,22,13,20,"obj"],[16,25,13,23],[16,26,13,24,"type"],[16,30,13,13],[16,35,13,33],[16,43,13,6],[16,47,13,45,"obj"],[16,50,13,48],[16,51,13,49,"type"],[16,55,13,45],[16,60,13,58],[16,73,13,6],[16,77,13,75,"obj"],[16,80,13,78],[16,81,13,79,"type"],[16,85,13,75],[16,90,13,88],[16,104,13,2],[16,106,13,104],[17,0,14,4],[17,13,14,11,"cloneNode"],[17,22,14,20],[17,23,14,21,"obj"],[17,26,14,20],[17,28,14,26,"deep"],[17,32,14,20],[17,33,14,4],[18,0,15,3],[20,0,17,2],[20,11,17,9,"obj"],[20,14,17,2],[21,0,18,1],[23,0,20,0],[23,11,20,9,"cloneIfNodeOrArray"],[23,29,20,0],[23,30,20,28,"obj"],[23,33,20,0],[23,35,20,33,"deep"],[23,39,20,0],[23,41,20,39],[24,0,21,2],[24,8,21,6,"Array"],[24,13,21,11],[24,14,21,12,"isArray"],[24,21,21,6],[24,22,21,20,"obj"],[24,25,21,6],[24,26,21,2],[24,28,21,26],[25,0,22,4],[25,13,22,11,"obj"],[25,16,22,14],[25,17,22,15,"map"],[25,20,22,11],[25,21,22,19],[25,31,22,19,"node"],[25,35,22,23],[26,0,22,23],[26,15,22,27,"cloneIfNode"],[26,26,22,38],[26,27,22,39,"node"],[26,31,22,38],[26,33,22,45,"deep"],[26,37,22,38],[26,38,22,23],[27,0,22,23],[27,7,22,11],[27,8,22,4],[28,0,23,3],[30,0,25,2],[30,11,25,9,"cloneIfNode"],[30,22,25,20],[30,23,25,21,"obj"],[30,26,25,20],[30,28,25,26,"deep"],[30,32,25,20],[30,33,25,2],[31,0,26,1],[33,0,28,0],[33,11,28,9,"cloneNode"],[33,20,28,0],[33,21,28,19,"node"],[33,25,28,0],[33,27,28,38],[34,0,28,38],[34,8,28,25,"deep"],[34,12,28,38],[34,83,28,32],[34,87,28,38],[35,0,29,2],[35,8,29,6],[35,9,29,7,"node"],[35,13,29,2],[35,15,29,13],[35,22,29,20,"node"],[35,26,29,13],[36,0,28,38],[36,8,31,4,"type"],[36,12,28,38],[36,15,32,6,"node"],[36,19,28,38],[36,20,31,4,"type"],[36,24,28,38],[37,0,33,2],[37,8,33,8,"newNode"],[37,15,33,15],[37,18,33,18],[38,0,34,4,"type"],[38,6,34,4,"type"],[38,10,34,8],[38,12,34,4,"type"],[39,0,33,18],[39,5,33,2],[41,0,37,2],[41,8,37,6,"type"],[41,12,37,10],[41,17,37,15],[41,29,37,2],[41,31,37,29],[42,0,38,4,"newNode"],[42,6,38,4,"newNode"],[42,13,38,11],[42,14,38,12,"name"],[42,18,38,4],[42,21,38,19,"node"],[42,25,38,23],[42,26,38,24,"name"],[42,30,38,4],[44,0,40,4],[44,10,40,8,"has"],[44,13,40,11],[44,14,40,12,"node"],[44,18,40,11],[44,20,40,18],[44,30,40,11],[44,31,40,8],[44,35,40,33],[44,42,40,40,"node"],[44,46,40,44],[44,47,40,45,"optional"],[44,55,40,33],[44,60,40,58],[44,69,40,4],[44,71,40,69],[45,0,41,6,"newNode"],[45,8,41,6,"newNode"],[45,15,41,13],[45,16,41,14,"optional"],[45,24,41,6],[45,27,41,25,"node"],[45,31,41,29],[45,32,41,30,"optional"],[45,40,41,6],[46,0,42,5],[48,0,44,4],[48,10,44,8,"has"],[48,13,44,11],[48,14,44,12,"node"],[48,18,44,11],[48,20,44,18],[48,36,44,11],[48,37,44,4],[48,39,44,37],[49,0,45,6,"newNode"],[49,8,45,6,"newNode"],[49,15,45,13],[49,16,45,14,"typeAnnotation"],[49,30,45,6],[49,33,45,31,"deep"],[49,37,45,35],[49,40,45,38,"cloneIfNodeOrArray"],[49,58,45,56],[49,59,45,57,"node"],[49,63,45,61],[49,64,45,62,"typeAnnotation"],[49,78,45,56],[49,80,45,78],[49,84,45,56],[49,85,45,35],[49,88,45,86,"node"],[49,92,45,90],[49,93,45,91,"typeAnnotation"],[49,107,45,6],[50,0,46,5],[51,0,47,3],[51,5,37,2],[51,11,47,9],[51,15,47,13],[51,16,47,14,"has"],[51,19,47,17],[51,20,47,18,"_definitions"],[51,32,47,30],[51,33,47,31,"NODE_FIELDS"],[51,44,47,17],[51,46,47,44,"type"],[51,50,47,17],[51,51,47,9],[51,53,47,51],[52,0,48,4],[52,12,48,10],[52,16,48,14,"Error"],[52,21,48,10],[52,48,48,43,"type"],[52,52,48,10],[52,60,48,4],[53,0,49,3],[53,5,47,9],[53,11,49,9],[54,0,50,4],[54,38,50,24,"Object"],[54,44,50,30],[54,45,50,31,"keys"],[54,49,50,24],[54,50,50,36,"_definitions"],[54,62,50,48],[54,63,50,49,"NODE_FIELDS"],[54,74,50,36],[54,75,50,61,"type"],[54,79,50,36],[54,80,50,24],[54,81,50,4],[54,115,50,69],[55,0,50,9],[55,12,50,15,"field"],[55,17,50,20],[55,36,50,9],[57,0,51,6],[57,12,51,10,"has"],[57,15,51,13],[57,16,51,14,"node"],[57,20,51,13],[57,22,51,20,"field"],[57,27,51,13],[57,28,51,6],[57,30,51,28],[58,0,52,8,"newNode"],[58,10,52,8,"newNode"],[58,17,52,15],[58,18,52,16,"field"],[58,23,52,15],[58,24,52,8],[58,27,52,25,"deep"],[58,31,52,29],[58,34,52,32,"cloneIfNodeOrArray"],[58,52,52,50],[58,53,52,51,"node"],[58,57,52,55],[58,58,52,56,"field"],[58,63,52,55],[58,64,52,50],[58,66,52,64],[58,70,52,50],[58,71,52,29],[58,74,52,72,"node"],[58,78,52,76],[58,79,52,77,"field"],[58,84,52,76],[58,85,52,8],[59,0,53,7],[60,0,54,5],[61,0,55,3],[63,0,57,2],[63,8,57,6,"has"],[63,11,57,9],[63,12,57,10,"node"],[63,16,57,9],[63,18,57,16],[63,23,57,9],[63,24,57,2],[63,26,57,24],[64,0,58,4,"newNode"],[64,6,58,4,"newNode"],[64,13,58,11],[64,14,58,12,"loc"],[64,17,58,4],[64,20,58,18,"node"],[64,24,58,22],[64,25,58,23,"loc"],[64,28,58,4],[65,0,59,3],[67,0,61,2],[67,8,61,6,"has"],[67,11,61,9],[67,12,61,10,"node"],[67,16,61,9],[67,18,61,16],[67,35,61,9],[67,36,61,2],[67,38,61,36],[68,0,62,4,"newNode"],[68,6,62,4,"newNode"],[68,13,62,11],[68,14,62,12,"leadingComments"],[68,29,62,4],[68,32,62,30,"node"],[68,36,62,34],[68,37,62,35,"leadingComments"],[68,52,62,4],[69,0,63,3],[71,0,65,2],[71,8,65,6,"has"],[71,11,65,9],[71,12,65,10,"node"],[71,16,65,9],[71,18,65,16],[71,33,65,9],[71,34,65,2],[71,36,65,34],[72,0,66,4,"newNode"],[72,6,66,4,"newNode"],[72,13,66,11],[72,14,66,12,"innerComments"],[72,27,66,4],[72,30,66,28,"node"],[72,34,66,32],[72,35,66,33,"innerComments"],[72,48,66,4],[73,0,67,3],[75,0,69,2],[75,8,69,6,"has"],[75,11,69,9],[75,12,69,10,"node"],[75,16,69,9],[75,18,69,16],[75,36,69,9],[75,37,69,2],[75,39,69,37],[76,0,70,4,"newNode"],[76,6,70,4,"newNode"],[76,13,70,11],[76,14,70,12,"trailingComments"],[76,30,70,4],[76,33,70,31,"node"],[76,37,70,35],[76,38,70,36,"trailingComments"],[76,54,70,4],[77,0,71,3],[79,0,73,2],[79,8,73,6,"has"],[79,11,73,9],[79,12,73,10,"node"],[79,16,73,9],[79,18,73,16],[79,25,73,9],[79,26,73,2],[79,28,73,26],[80,0,74,4,"newNode"],[80,6,74,4,"newNode"],[80,13,74,11],[80,14,74,12,"extra"],[80,19,74,4],[80,22,74,20],[80,31,74,34],[80,33,74,20],[80,35,74,38,"node"],[80,39,74,42],[80,40,74,43,"extra"],[80,45,74,20],[80,46,74,4],[81,0,75,3],[83,0,77,2],[83,11,77,9,"newNode"],[83,18,77,2],[84,0,78,1]]},"type":"js/module"}]}